#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1623;
float _4026;
float _4027;
float _4028;
float _4029;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _252 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _253 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _254 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _260 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _289 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4038 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4049 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4060 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _318) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _319) + cbTextureTilingScale._m0[13u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _386 = _381.x * cbMtdParam._m0[11u].x;
    float _387 = _381.y * cbMtdParam._m0[11u].y;
    float _388 = _381.z * cbMtdParam._m0[11u].z;
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _475 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _492 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _426.x) * 2.0) - ((((_463 - _475) * cbMtdParam._m0[23u].w) + _475) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4071 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _493 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _500 = (_493 * ((_407.x * cbMtdParam._m0[12u].x) - _386)) + _386;
    float _501 = (_493 * ((_407.y * cbMtdParam._m0[12u].y) - _387)) + _387;
    float _502 = (_493 * ((_407.z * cbMtdParam._m0[12u].z) - _388)) + _388;
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _318) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _319) + cbTextureTilingScale._m0[3u].w));
    vec4 _539 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _541 = _539.x;
    float _551 = dot(vec4(_541, _539.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _565 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _426.y) * 2.0) - ((((_541 - _551) * cbMtdParam._m0[23u].w) + _551) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4082 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _573 = (_566 * ((_519.x * cbMtdParam._m0[13u].x) - _500)) + _500;
    float _574 = (_566 * ((_519.y * cbMtdParam._m0[13u].y) - _501)) + _501;
    float _575 = (_566 * ((_519.z * cbMtdParam._m0[13u].z) - _502)) + _502;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _318) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _319) + cbTextureTilingScale._m0[24u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _613 = _611.x;
    float _623 = dot(vec4(_613, _611.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _635 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _426.z) * 2.0) - ((((_613 - _623) * cbMtdParam._m0[23u].w) + _623) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4093 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _646 = (_355.x * cbMtdParam._m0[9u].x) * ((_636 * ((_594.x * cbMtdParam._m0[14u].x) - _573)) + _573);
    float _647 = (_355.y * cbMtdParam._m0[9u].y) * ((_636 * ((_594.y * cbMtdParam._m0[14u].y) - _574)) + _574);
    float _648 = (_355.z * cbMtdParam._m0[9u].z) * ((_636 * ((_594.z * cbMtdParam._m0[14u].z) - _575)) + _575);
    float _652 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _332.x) * _646;
    float _655 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _332.y) * _647;
    float _658 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _332.z) * _648;
    float _666 = (((_646 - _652) * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) + _652) * 4.55000019073486328125;
    float _668 = (((_647 - _655) * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) + _655) * 4.55000019073486328125;
    float _670 = (((_648 - _658) * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) + _658) * 4.55000019073486328125;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _318) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _319) + cbTextureTilingScale._m0[20u].w));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _318) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _319) + cbTextureTilingScale._m0[4u].w));
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _724 = _722.x;
    float _725 = _722.y;
    float _726 = _722.z;
    float _733 = ((_705.x - _724) * _493) + _724;
    float _734 = ((_705.y - _725) * _493) + _725;
    float _735 = ((_705.z - _726) * _493) + _726;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _318) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _319) + cbTextureTilingScale._m0[2u].w));
    float _758 = ((_747.x - _733) * _566) + _733;
    float _759 = ((_747.y - _734) * _566) + _734;
    float _760 = ((_747.z - _735) * _566) + _735;
    vec4 _772 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _318) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _319) + cbTextureTilingScale._m0[23u].w));
    float _785 = ((_772.z - _760) * _636) + _760;
    float _788 = ((((_772.x - _758) * _636) + _758) * 2.0) + (-1.0);
    float _789 = ((((_772.y - _759) * _636) + _759) * 2.0) + (-1.0);
    float _790 = dot(vec2(_788, _789), vec2(_788, _789));
    float _4104 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _795 = sqrt(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))));
    vec4 _815 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _827 = (_788 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_682.x * 2.0) + (-1.0)))) + (((_815.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _828 = (_789 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_682.y * 2.0) + (-1.0)))) + (((_815.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _840 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _318) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _319) + cbTextureTilingScale._m0[19u].w));
    float _842 = _840.x;
    float _843 = 1.0 - _842;
    float _871 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_842 - _843) * cbMtdParam._m0[24u].w) + _843) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4115 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _872 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _880 = ((((cbMtdParam._m0[10u].x - _666) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _872) + _666;
    float _881 = ((((cbMtdParam._m0[10u].y - _668) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _872) + _668;
    float _882 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _670)) * _872) + _670;
    vec4 _908 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _910 = _908.x;
    float _927 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w)).x - _910) * _493) + _910;
    float _945 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _318) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _319) + cbTextureTilingScale._m0[21u].w)).x - _927) * _566) + _927;
    float _962 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _318) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _319) + cbTextureTilingScale._m0[10u].w)).x - _945) * _636) + _945;
    float _966 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _962) * cbMtdParam._m0[19u].z) + _962;
    float _968 = _966 - (_966 * _872);
    float _973 = (((_682.z - _785) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _785;
    float _977 = ((_815.z - _973) * cbMtdParam._m0[19u].w) + _973;
    float _981 = ((cbMtdParam._m0[23u].x - _977) * _872) + _977;
    vec4 _1002 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _318) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _319) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1008 = (_1002.x * 2.0) + (-1.0);
    float _1009 = (_1002.y * 2.0) + (-1.0);
    float _1010 = dot(vec2(_1008, _1009), vec2(_1008, _1009));
    float _4126 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1026 = (_872 * (((cbMtdParam._m0[22u].z * _827) - _827) + _1008)) + _827;
    float _1027 = (_872 * (((cbMtdParam._m0[22u].z * _828) - _828) + _1009)) + _828;
    float _1028 = (_872 * (sqrt(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) - _795)) + _795;
    float _1030 = cbMtdParam._m0[22u].x + _815.w;
    float _1033 = fma(_1028, _267 * NORMAL.x, fma(_1027, _274 * TANGENT.x, (_260 * _252) * _1026));
    float _1036 = fma(_1028, _267 * NORMAL.y, fma(_1027, _274 * TANGENT.y, (_260 * _253) * _1026));
    float _1039 = fma(_1028, _267 * NORMAL.z, fma(_1027, _274 * TANGENT.z, (_260 * _254) * _1026));
    float _1043 = inversesqrt(dot(vec3(_1033, _1036, _1039), vec3(_1033, _1036, _1039)));
    float _1044 = _1043 * _1033;
    float _1045 = _1043 * _1036;
    float _1046 = _1043 * _1039;
    float _4137 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _1047 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _4148 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _4159 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4170 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _4181 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4192 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _1052 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _1066 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1106 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1116 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1106);
    float _1117 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1106);
    float _1118 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1106);
    float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
    float _1123 = _1116 * _1122;
    float _1124 = _1117 * _1122;
    float _1125 = _1118 * _1122;
    vec4 _1130 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1132 = _1130.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1304 = sqrt(((_1116 * _1116) + (_1117 * _1117)) + (_1118 * _1118));
        float _1310 = (cbMatDynParam._m0[5u].x * _1304) + cbMatDynParam._m0[5u].y;
        float _4203 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1315 = (cbMatDynParam._m0[5u].z * _1304) + cbMatDynParam._m0[5u].w;
        float _4214 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) - _1311)) + _1311) < ((_1132 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1143 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1144 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1162 = fma(_1046, cbSceneParam._m0[5u].z, fma(_1045, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1044));
    float _1165 = fma(_1046, cbSceneParam._m0[6u].z, fma(_1045, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1044));
    float _1168 = fma(_1046, cbSceneParam._m0[7u].z, fma(_1045, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1044));
    uint _1181 = _299 + 9u;
    uint _1182 = _1181 + uint(cbMatDynParam._m0[0u].w);
    float _1188 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * cbInstanceData._m0[_1182].x;
    float _1189 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * cbInstanceData._m0[_1182].y;
    float _1190 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * cbInstanceData._m0[_1182].z;
    float _4225 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _1191 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _1192 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _4247 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _1193 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _1194 = 1.0 - _1052;
    float _1195 = _1191 * _1194;
    float _1196 = _1192 * _1194;
    float _1197 = _1193 * _1194;
    float _1202 = (_1191 + (-0.039999999105930328369140625)) * _1052;
    float _1203 = (_1192 + (-0.039999999105930328369140625)) * _1052;
    float _1204 = (_1193 + (-0.039999999105930328369140625)) * _1052;
    float _1205 = _1202 + 0.039999999105930328369140625;
    float _1207 = _1203 + 0.039999999105930328369140625;
    float _1208 = _1204 + 0.039999999105930328369140625;
    vec4 _1217 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1143, cbSceneParam._m0[86u].y * _1144));
    float _1221 = ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * TEXCOORD_5.w) * _1217.x;
    float _1222 = dot(vec3(_1044, _1045, _1046), vec3(_1123, _1124, _1125));
    float _1225 = _1222 * 2.0;
    float _1229 = (_1225 * _1044) - _1123;
    float _1230 = (_1225 * _1045) - _1124;
    float _1231 = (_1225 * _1046) - _1125;
    float _1235 = abs(dot(vec3(_1123, _1124, _1125), vec3(_1044, _1045, _1046)));
    float _4258 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
    float _1237 = sqrt(_1047);
    float _1250 = exp2((_1237 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1237 * 3.0));
    float _1256 = (1.0 - _1250) * ((_1237 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1257 = _1250 * _1237;
    float _1285 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1289 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1293 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1622;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1347 = fma(_1293, cbModelParam._m0[26u].z, fma(_1289, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1285));
        float _1351 = fma(_1293, cbModelParam._m0[27u].z, fma(_1289, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1285));
        float _1355 = fma(_1293, cbModelParam._m0[28u].z, fma(_1289, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1285));
        float _1380 = _1285 + _1044;
        float _1381 = _1289 + _1045;
        float _1382 = _1293 + _1046;
        float _1392 = fma(_1382, cbModelParam._m0[26u].z, fma(_1381, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1380)) - _1347;
        float _1393 = fma(_1382, cbModelParam._m0[27u].z, fma(_1381, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1380)) - _1351;
        float _1394 = fma(_1382, cbModelParam._m0[28u].z, fma(_1381, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1380)) - _1355;
        float _1398 = inversesqrt(dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394)));
        float _1411 = ((_1398 * _1392) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1347 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1398 * _1393) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1351 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1398 * _1394) / cbModelParam._m0[34u].z) + ((((((_1355 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        float _1450 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1416.x + (-0.5));
        float _1452 = _1450 * (_1416.y + (-0.5));
        float _1453 = _1450 * (_1416.z + (-0.5));
        float _1460 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1423.x + (-0.5));
        float _1462 = _1460 * (_1423.y + (-0.5));
        float _1463 = _1460 * (_1423.z + (-0.5));
        float _1470 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1430.x + (-0.5));
        float _1472 = _1470 * (_1430.y + (-0.5));
        float _1473 = _1470 * (_1430.z + (-0.5));
        float _1480 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1437.x + (-0.5));
        float _1482 = _1480 * (_1437.y + (-0.5));
        float _1483 = _1480 * (_1437.z + (-0.5));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = _1451 * 0.5;
        float _1488 = _1461 * 0.5;
        float _1489 = _1471 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1504 = (dot(vec3(_1044, _1045, _1046), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1514 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _4306 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1516 + 1.0))) + _1521) * _1484;
        float _1531 = _1452 * 0.5;
        float _1532 = _1462 * 0.5;
        float _1533 = _1472 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_1044, _1045, _1046), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4339 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1558 + 1.0))) + _1563) * _1485;
        float _1573 = _1453 * 0.5;
        float _1574 = _1463 * 0.5;
        float _1575 = _1473 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_1044, _1045, _1046), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4372 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1600 + 1.0))) + _1605) * _1486;
        _1622 = _1453;
        _1624 = _1452;
        _1625 = _1451;
        _1626 = _1463;
        _1627 = _1462;
        _1628 = _1461;
        _1629 = _1473;
        _1630 = _1472;
        _1631 = _1471;
        _1632 = _1486;
        _1633 = _1485;
        _1634 = _1484;
        _1635 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
        _1636 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
        _1637 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
    }
    else
    {
        _1622 = _1623;
        _1624 = _1623;
        _1625 = _1623;
        _1626 = _1623;
        _1627 = _1623;
        _1628 = _1623;
        _1629 = _1623;
        _1630 = _1623;
        _1631 = _1623;
        _1632 = _1623;
        _1633 = _1623;
        _1634 = _1623;
        _1635 = 0.0;
        _1636 = 0.0;
        _1637 = 0.0;
    }
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1663 = fma(_1293, cbModelParam._m0[30u].z, fma(_1289, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1285));
        float _1667 = fma(_1293, cbModelParam._m0[31u].z, fma(_1289, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1285));
        float _1671 = fma(_1293, cbModelParam._m0[32u].z, fma(_1289, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1285));
        float _1694 = _1285 + _1044;
        float _1695 = _1289 + _1045;
        float _1696 = _1293 + _1046;
        float _1706 = fma(_1696, cbModelParam._m0[30u].z, fma(_1695, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1694)) - _1663;
        float _1707 = fma(_1696, cbModelParam._m0[31u].z, fma(_1695, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1694)) - _1667;
        float _1708 = fma(_1696, cbModelParam._m0[32u].z, fma(_1695, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1694)) - _1671;
        float _1712 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
        float _1725 = ((_1712 * _1706) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1663 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1726 = ((_1712 * _1707) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1667 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1727 = ((_1712 * _1708) / cbModelParam._m0[35u].z) + ((((((_1671 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1729 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1725, _1726, _1727), 0.0);
        vec4 _1736 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1725, _1726, _1727), 0.0);
        vec4 _1743 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1725, _1726, _1727), 0.0);
        vec4 _1750 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1725, _1726, _1727), 0.0);
        float _1762 = exp2((_1729.w + (-0.5)) * 20.0) * 2.0;
        float _1763 = _1762 * (_1729.x + (-0.5));
        float _1764 = _1762 * (_1729.y + (-0.5));
        float _1765 = _1762 * (_1729.z + (-0.5));
        float _1772 = exp2((_1736.w + (-0.5)) * 20.0) * 2.0;
        float _1773 = _1772 * (_1736.x + (-0.5));
        float _1774 = _1772 * (_1736.y + (-0.5));
        float _1775 = _1772 * (_1736.z + (-0.5));
        float _1782 = exp2((_1743.w + (-0.5)) * 20.0) * 2.0;
        float _1783 = _1782 * (_1743.x + (-0.5));
        float _1784 = _1782 * (_1743.y + (-0.5));
        float _1785 = _1782 * (_1743.z + (-0.5));
        float _1792 = exp2((_1750.w + (-0.5)) * 20.0) * 2.0;
        float _1793 = _1792 * (_1750.x + (-0.5));
        float _1794 = _1792 * (_1750.y + (-0.5));
        float _1795 = _1792 * (_1750.z + (-0.5));
        float _1796 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1797 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1798 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1799 = _1763 * 0.5;
        float _1800 = _1773 * 0.5;
        float _1801 = _1783 * 0.5;
        float _1802 = dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801));
        float _1807 = (_1802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1802);
        float _1815 = (dot(vec3(_1044, _1045, _1046), vec3(_1807 * _1799, _1807 * _1800, _1807 * _1801)) + 1.0) * 0.5;
        float _4413 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1824 = sqrt(((_1800 * _1800) + (_1799 * _1799)) + (_1801 * _1801)) / (_1796 + 9.9999997473787516355514526367188e-06);
        float _4424 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1826 = _1825 * 2.0;
        float _1830 = (1.0 - _1825) / (_1825 + 1.0);
        float _4435 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1840 = ((((1.0 - _1831) * (_1826 + 2.0)) * exp2(log2(isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_1826 + 1.0))) + _1831) * _1796;
        float _1841 = _1764 * 0.5;
        float _1842 = _1774 * 0.5;
        float _1843 = _1784 * 0.5;
        float _1844 = dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843));
        float _1849 = (_1844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1844);
        float _1857 = (dot(vec3(_1044, _1045, _1046), vec3(_1849 * _1841, _1849 * _1842, _1849 * _1843)) + 1.0) * 0.5;
        float _4446 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1866 = sqrt(((_1842 * _1842) + (_1841 * _1841)) + (_1843 * _1843)) / (_1797 + 9.9999997473787516355514526367188e-06);
        float _4457 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1868 = _1867 * 2.0;
        float _1872 = (1.0 - _1867) / (_1867 + 1.0);
        float _4468 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1882 = ((((1.0 - _1873) * (_1868 + 2.0)) * exp2(log2(isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_1868 + 1.0))) + _1873) * _1797;
        float _1883 = _1765 * 0.5;
        float _1884 = _1775 * 0.5;
        float _1885 = _1785 * 0.5;
        float _1886 = dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885));
        float _1891 = (_1886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1886);
        float _1899 = (dot(vec3(_1044, _1045, _1046), vec3(_1891 * _1883, _1891 * _1884, _1891 * _1885)) + 1.0) * 0.5;
        float _4479 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1908 = sqrt(((_1884 * _1884) + (_1883 * _1883)) + (_1885 * _1885)) / (_1798 + 9.9999997473787516355514526367188e-06);
        float _4490 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1910 = _1909 * 2.0;
        float _1914 = (1.0 - _1909) / (_1909 + 1.0);
        float _4501 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1915 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1924 = ((((1.0 - _1915) * (_1910 + 2.0)) * exp2(log2(isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_1910 + 1.0))) + _1915) * _1798;
        _1932 = _1765;
        _1933 = _1764;
        _1934 = _1763;
        _1935 = _1775;
        _1936 = _1774;
        _1937 = _1773;
        _1938 = _1785;
        _1939 = _1784;
        _1940 = _1783;
        _1941 = _1798;
        _1942 = _1797;
        _1943 = _1796;
        _1944 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)));
        _1945 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)));
        _1946 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)));
    }
    else
    {
        _1932 = _1623;
        _1933 = _1623;
        _1934 = _1623;
        _1935 = _1623;
        _1936 = _1623;
        _1937 = _1623;
        _1938 = _1623;
        _1939 = _1623;
        _1940 = _1623;
        _1941 = _1623;
        _1942 = _1623;
        _1943 = _1623;
        _1944 = 0.0;
        _1945 = 0.0;
        _1946 = 0.0;
    }
    float _1956 = (cbModelParam._m0[1u].x * (_1944 - _1635)) + _1635;
    float _1957 = (cbModelParam._m0[1u].x * (_1945 - _1636)) + _1636;
    float _1958 = (cbModelParam._m0[1u].x * (_1946 - _1637)) + _1637;
    float _1979 = fma(_1958, cbSceneParam._m0[89u].z, fma(_1957, cbSceneParam._m0[89u].y, _1956 * cbSceneParam._m0[89u].x));
    float _1982 = fma(_1958, cbSceneParam._m0[90u].z, fma(_1957, cbSceneParam._m0[90u].y, _1956 * cbSceneParam._m0[90u].x));
    float _1985 = fma(_1958, cbSceneParam._m0[91u].z, fma(_1957, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1956));
    float _2000 = _1229 * 0.5;
    float _2001 = _1230 * 0.5;
    float _2002 = _1231 * 0.5;
    float _2003 = dot(vec4(_2000, _2001, _2002, 1.0), vec4(_1934, _1937, _1940, _1943));
    float _2006 = dot(vec4(_2000, _2001, _2002, 1.0), vec4(_1933, _1936, _1939, _1942));
    float _2009 = dot(vec4(_2000, _2001, _2002, 1.0), vec4(_1932, _1935, _1938, _1941));
    float _2043;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2016 = dot(vec4(_2000, _2001, _2002, 1.0), vec4(_1622, _1626, _1629, _1632));
        float _2020 = dot(vec4(_2000, _2001, _2002, 1.0), vec4(_1624, _1627, _1630, _1633));
        float _2024 = dot(vec4(_2000, _2001, _2002, 1.0), vec4(_1625, _1628, _1631, _1634));
        float _2031 = dot(vec4(cbModelParam._m0[39u]), vec4(_2000, _2001, _2002, 1.0));
        _2043 = dot(vec3(isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)), isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0)), isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2031) ? 0.0 : (isnan(0.0) ? _2031 : max(0.0, _2031))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2043 = 1.0;
    }
    float _2054;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2045 = dot(vec4(cbModelParam._m0[40u]), vec4(_2000, _2001, _2002, 1.0));
        _2054 = dot(vec3(isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0)), isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)), isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2045) ? 0.0 : (isnan(0.0) ? _2045 : max(0.0, _2045))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2054 = 1.0;
    }
    float _2058 = (_2054 * cbModelParam._m0[1u].x) + (_2043 * (1.0 - cbModelParam._m0[1u].x));
    float _2068 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1047);
    float _2069 = isnan(_2068) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2068 : min(cbModelParam._m0[25u].z, _2068));
    float _2150;
    float _2152;
    float _2154;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2117 = fma(_1293, cbModelParam._m0[13u].z, fma(_1289, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1285)) + cbModelParam._m0[13u].w;
        float _2121 = fma(_1293, cbModelParam._m0[14u].z, fma(_1289, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1285)) + cbModelParam._m0[14u].w;
        float _2125 = fma(_1293, cbModelParam._m0[15u].z, fma(_1289, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1285)) + cbModelParam._m0[15u].w;
        float _2128 = fma(_1231, cbModelParam._m0[13u].z, fma(_1230, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1229));
        float _2131 = fma(_1231, cbModelParam._m0[14u].z, fma(_1230, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1229));
        float _2134 = fma(_1231, cbModelParam._m0[15u].z, fma(_1230, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1229));
        float _2162;
        if (_2128 > 0.0)
        {
            _2162 = abs((1.0 - _2117) / _2128);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2117 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2162 = frontier_phi_17_15_ladder;
        }
        float _2386;
        if (_2131 > 0.0)
        {
            _2386 = abs((1.0 - _2121) / _2131);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2121 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2386 = frontier_phi_26_22_ladder;
        }
        float _2643;
        if (_2134 > 0.0)
        {
            _2643 = abs((1.0 - _2125) / _2134);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2125 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2643 = frontier_phi_38_33_ladder;
        }
        float _2645 = isnan(_2386) ? _2162 : (isnan(_2162) ? _2386 : min(_2162, _2386));
        float _2646 = isnan(_2643) ? _2645 : (isnan(_2645) ? _2643 : min(_2645, _2643));
        float _2650 = (_2646 * _2128) + _2117;
        float _2651 = (_2646 * _2131) + _2121;
        float _2652 = (_2646 * _2134) + _2125;
        float _2653 = _2646 * 9.9999997473787516355514526367188e-05;
        float _2655 = (-1.0) - _2653;
        float _2657 = _2653 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2652 > _2657) || ((_2652 < _2655) || ((_2651 > _2657) || ((_2651 < _2655) || ((_2650 < _2655) || (_2650 > _2657))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2780 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2652, cbModelParam._m0[9u].z, fma(_2651, cbModelParam._m0[9u].y, _2650 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2652, cbModelParam._m0[10u].z, fma(_2651, cbModelParam._m0[10u].y, _2650 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2652, cbModelParam._m0[11u].z, fma(_2651, cbModelParam._m0[11u].y, _2650 * cbModelParam._m0[11u].x))), _2069);
            frontier_phi_16_38_ladder = _2780.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2780.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2780.x * cbModelParam._m0[1u].y;
        }
        _2150 = frontier_phi_16_38_ladder_2;
        _2152 = frontier_phi_16_38_ladder_1;
        _2154 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2138 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1229, _1230, _1231), _2069);
        _2150 = _2138.x * cbModelParam._m0[1u].y;
        _2152 = _2138.y * cbModelParam._m0[1u].y;
        _2154 = _2138.z * cbModelParam._m0[1u].y;
    }
    float _2158 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1047);
    float _2159 = isnan(_2158) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2158 : min(cbModelParam._m0[25u].w, _2158));
    float _2249;
    float _2251;
    float _2253;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2213 = fma(_1293, cbModelParam._m0[21u].z, fma(_1289, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1285)) + cbModelParam._m0[21u].w;
        float _2217 = fma(_1293, cbModelParam._m0[22u].z, fma(_1289, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1285)) + cbModelParam._m0[22u].w;
        float _2221 = fma(_1293, cbModelParam._m0[23u].z, fma(_1289, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1285)) + cbModelParam._m0[23u].w;
        float _2224 = fma(_1231, cbModelParam._m0[21u].z, fma(_1230, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1229));
        float _2227 = fma(_1231, cbModelParam._m0[22u].z, fma(_1230, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1229));
        float _2230 = fma(_1231, cbModelParam._m0[23u].z, fma(_1230, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1229));
        float _2391;
        if (_2224 > 0.0)
        {
            _2391 = abs((1.0 - _2213) / _2224);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2224 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2213 + 1.0) / _2224);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2391 = frontier_phi_28_24_ladder;
        }
        float _2670;
        if (_2227 > 0.0)
        {
            _2670 = abs((1.0 - _2217) / _2227);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2227 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2217 + 1.0) / _2227);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2670 = frontier_phi_40_35_ladder;
        }
        float _2883;
        if (_2230 > 0.0)
        {
            _2883 = abs((1.0 - _2221) / _2230);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2230 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2221 + 1.0) / _2230);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2883 = frontier_phi_49_46_ladder;
        }
        float _2885 = isnan(_2670) ? _2391 : (isnan(_2391) ? _2670 : min(_2391, _2670));
        float _2886 = isnan(_2883) ? _2885 : (isnan(_2885) ? _2883 : min(_2885, _2883));
        float _2890 = (_2886 * _2224) + _2213;
        float _2891 = (_2886 * _2227) + _2217;
        float _2892 = (_2886 * _2230) + _2221;
        float _2893 = _2886 * 9.9999997473787516355514526367188e-05;
        float _2894 = (-1.0) - _2893;
        float _2896 = _2893 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2892 > _2896) || ((_2892 < _2894) || ((_2891 > _2896) || ((_2891 < _2894) || ((_2890 < _2894) || (_2890 > _2896))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3091 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2892, cbModelParam._m0[17u].z, fma(_2891, cbModelParam._m0[17u].y, _2890 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2892, cbModelParam._m0[18u].z, fma(_2891, cbModelParam._m0[18u].y, _2890 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2892, cbModelParam._m0[19u].z, fma(_2891, cbModelParam._m0[19u].y, _2890 * cbModelParam._m0[19u].x))), _2159);
            frontier_phi_25_49_ladder = _3091.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3091.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3091.x * cbModelParam._m0[1u].z;
        }
        _2249 = frontier_phi_25_49_ladder_2;
        _2251 = frontier_phi_25_49_ladder_1;
        _2253 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2233 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1229, _1230, _1231), _2159);
        _2249 = _2233.x * cbModelParam._m0[1u].z;
        _2251 = _2233.y * cbModelParam._m0[1u].z;
        _2253 = _2233.z * cbModelParam._m0[1u].z;
    }
    float _2266 = (((_1256 * _1205) + _1257) * _1221) * ((cbModelParam._m0[1u].w * (_2249 - _2150)) + _2150);
    float _2268 = (((_1256 * _1207) + _1257) * _1221) * ((cbModelParam._m0[1u].w * (_2251 - _2152)) + _2152);
    float _2270 = (((_1256 * _1208) + _1257) * _1221) * ((cbModelParam._m0[1u].w * (_2253 - _2154)) + _2154);
    float _2273 = fma(_2270, cbSceneParam._m0[89u].z, fma(_2268, cbSceneParam._m0[89u].y, _2266 * cbSceneParam._m0[89u].x));
    float _2276 = fma(_2270, cbSceneParam._m0[90u].z, fma(_2268, cbSceneParam._m0[90u].y, _2266 * cbSceneParam._m0[90u].x));
    float _2279 = fma(_2270, cbSceneParam._m0[91u].z, fma(_2268, cbSceneParam._m0[91u].y, _2266 * cbSceneParam._m0[91u].x));
    vec4 _2287 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1143, _1144));
    float _2289 = _2287.w;
    float _2301 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2289);
    float _2302 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2289);
    float _2303 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2289);
    uvec4 _2307 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _2309 = _2307.x * 14u;
    uint _2310 = _2309 + 13u;
    float _2317 = _1221 + (-1.0);
    float _2322 = (cbLight._m0[_2310].x * _2317) + 1.0;
    float _2323 = (cbLight._m0[_2310].y * _2317) + 1.0;
    float _2324 = (cbLight._m0[_2310].z * _2317) + 1.0;
    float _2325 = (cbLight._m0[_2310].w * _2317) + 1.0;
    uint _2326 = _2309 + 5u;
    float _2332 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
    uint _2336 = _2309 + 4u;
    float _2345 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
    uint _2349 = _2309 | 1u;
    float _2360 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_1044, _1045, _1046));
    float _2363 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_1044, _1045, _1046));
    float _4637 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _4648 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2368 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * 0.3183098733425140380859375;
    float _2370 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * 0.3183098733425140380859375;
    float _2377 = ((cbLight._m0[_2326].x * _2332) * _2370) + (((cbLight._m0[_2336].x * _2301) * _2345) * _2368);
    float _2378 = ((_2332 * cbLight._m0[_2326].y) * _2370) + (((cbLight._m0[_2336].y * _2302) * _2345) * _2368);
    float _2379 = ((_2332 * cbLight._m0[_2326].z) * _2370) + (((cbLight._m0[_2336].z * _2303) * _2345) * _2368);
    uvec4 _2383 = floatBitsToUint(cbLight._m0[_2309 + 12u]);
    bool _2385 = _2383.x == 0u;
    float _2396;
    float _2398;
    float _2400;
    if (_2385)
    {
        _2396 = _2377;
        _2398 = _2378;
        _2400 = _2379;
    }
    else
    {
        uint _2404 = _2309 + 6u;
        float _2420 = (dot(vec3(cbLight._m0[_2309 + 2u].xyz), vec3(_1044, _1045, _1046)) * 0.5) + 0.5;
        float _2421 = _2420 * _2420;
        float _4659 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2422 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2423 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2396 = (((cbLight._m0[_2404].x * 0.3183098733425140380859375) * _2422) * _2423) + _2377;
        _2398 = (((cbLight._m0[_2404].y * 0.3183098733425140380859375) * _2422) * _2423) + _2378;
        _2400 = (((cbLight._m0[_2404].z * 0.3183098733425140380859375) * _2422) * _2423) + _2379;
    }
    bool _2403 = _2383.y == 0u;
    float _2441;
    float _2443;
    float _2445;
    if (_2403)
    {
        _2441 = _2396;
        _2443 = _2398;
        _2445 = _2400;
    }
    else
    {
        uint _2614 = _2309 + 7u;
        float _2630 = (dot(vec3(cbLight._m0[_2309 + 3u].xyz), vec3(_1044, _1045, _1046)) * 0.5) + 0.5;
        float _2631 = _2630 * _2630;
        float _4675 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2632 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2633 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2441 = (((cbLight._m0[_2614].x * 0.3183098733425140380859375) * _2632) * _2633) + _2396;
        _2443 = (((cbLight._m0[_2614].y * 0.3183098733425140380859375) * _2632) * _2633) + _2398;
        _2445 = (((cbLight._m0[_2614].z * 0.3183098733425140380859375) * _2632) * _2633) + _2400;
    }
    uint _2448 = _2309 + 8u;
    float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _1047) * 0.949999988079071044921875);
    float _2462 = _2461 * _2461;
    float _2463 = cbLight._m0[_2309].x + _1123;
    float _2464 = cbLight._m0[_2309].y + _1124;
    float _2465 = cbLight._m0[_2309].z + _1125;
    float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
    float _2470 = _2469 * _2463;
    float _2471 = _2469 * _2464;
    float _2472 = _2469 * _2465;
    float _2473 = dot(vec3(_1044, _1045, _1046), vec3(cbLight._m0[_2309].xyz));
    float _4691 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _4702 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _2477 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2478 = dot(vec3(_1044, _1045, _1046), vec3(_2470, _2471, _2472));
    float _4713 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2482 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2470, _2471, _2472));
    float _4724 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2486 = _2462 * _2462;
    float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
    float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
    float _2499 = 0.959999978542327880859375 - _1202;
    float _2501 = 0.959999978542327880859375 - _1203;
    float _2502 = 0.959999978542327880859375 - _1204;
    float _2509 = 1.0 - _2462;
    float _2520 = (0.5 / (((_2477 * ((_2476 * _2509) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2509) + _2462) * _2476))) * _2476;
    float _4735 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2522 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
    uint _2536 = _2309 + 9u;
    float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _1047) * 0.949999988079071044921875);
    float _2548 = _2547 * _2547;
    float _2549 = cbLight._m0[_2349].x + _1123;
    float _2550 = cbLight._m0[_2349].y + _1124;
    float _2551 = cbLight._m0[_2349].z + _1125;
    float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
    float _2556 = _2555 * _2549;
    float _2557 = _2555 * _2550;
    float _2558 = _2555 * _2551;
    float _2559 = dot(vec3(_1044, _1045, _1046), vec3(cbLight._m0[_2349].xyz));
    float _4746 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2563 = dot(vec3(_1044, _1045, _1046), vec3(_2556, _2557, _2558));
    float _4757 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2567 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2556, _2557, _2558));
    float _4768 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2571 = _2548 * _2548;
    float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
    float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0);
    float _2589 = 1.0 - _2548;
    float _2599 = (0.5 / (((_2477 * ((_2562 * _2589) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2589) + _2548) * _2562))) * _2562;
    float _4779 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
    float _2611 = (((((_2582 * _2499) + _1205) * cbLight._m0[_2536].x) * _2601) * _2332) + ((((cbLight._m0[_2448].x * _2301) * ((_2498 * _2499) + _1205)) * _2522) * _2345);
    float _2612 = (((((_2582 * _2501) + _1207) * cbLight._m0[_2536].y) * _2601) * _2332) + ((((cbLight._m0[_2448].y * _2302) * ((_2498 * _2501) + _1207)) * _2522) * _2345);
    float _2613 = (((((_2582 * _2502) + _1208) * cbLight._m0[_2536].z) * _2601) * _2332) + ((((cbLight._m0[_2448].z * _2303) * ((_2498 * _2502) + _1208)) * _2522) * _2345);
    float _2675;
    float _2677;
    float _2679;
    if (_2385)
    {
        _2675 = _2611;
        _2677 = _2612;
        _2679 = _2613;
    }
    else
    {
        uint _2681 = _2309 + 2u;
        uint _2685 = _2309 + 10u;
        float _2699 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2681].w)) * _1047) * 0.949999988079071044921875);
        float _2700 = _2699 * _2699;
        float _2701 = cbLight._m0[_2681].x + _1123;
        float _2702 = cbLight._m0[_2681].y + _1124;
        float _2703 = cbLight._m0[_2681].z + _1125;
        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
        float _2708 = _2707 * _2701;
        float _2709 = _2707 * _2702;
        float _2710 = _2707 * _2703;
        float _2711 = dot(vec3(_1044, _1045, _1046), vec3(cbLight._m0[_2681].xyz));
        float _4790 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2715 = dot(vec3(_1044, _1045, _1046), vec3(_2708, _2709, _2710));
        float _4801 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2719 = dot(vec3(cbLight._m0[_2681].xyz), vec3(_2708, _2709, _2710));
        float _4812 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2723 = _2700 * _2700;
        float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
        float _2734 = exp2(log2(1.0 - (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) * 5.0);
        float _2741 = 1.0 - _2700;
        float _2751 = (0.5 / (((_2477 * ((_2714 * _2741) + _2700)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2741) + _2700) * _2714))) * _2714;
        float _4823 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2753 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
        float _2754 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2675 = (((((_2734 * _2499) + _1205) * cbLight._m0[_2685].x) * _2753) * _2754) + _2611;
        _2677 = (((((_2734 * _2501) + _1207) * cbLight._m0[_2685].y) * _2753) * _2754) + _2612;
        _2679 = (((((_2734 * _2502) + _1208) * cbLight._m0[_2685].z) * _2753) * _2754) + _2613;
    }
    float _2789;
    float _2791;
    float _2793;
    if (_2403)
    {
        _2789 = _2675;
        _2791 = _2677;
        _2793 = _2679;
    }
    else
    {
        uint _2800 = _2309 + 3u;
        uint _2804 = _2309 + 11u;
        float _2818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2800].w)) * _1047) * 0.949999988079071044921875);
        float _2819 = _2818 * _2818;
        float _2820 = cbLight._m0[_2800].x + _1123;
        float _2821 = cbLight._m0[_2800].y + _1124;
        float _2822 = cbLight._m0[_2800].z + _1125;
        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
        float _2827 = _2826 * _2820;
        float _2828 = _2826 * _2821;
        float _2829 = _2826 * _2822;
        float _2830 = dot(vec3(_1044, _1045, _1046), vec3(cbLight._m0[_2800].xyz));
        float _4839 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2834 = dot(vec3(_1044, _1045, _1046), vec3(_2827, _2828, _2829));
        float _4850 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2838 = dot(vec3(cbLight._m0[_2800].xyz), vec3(_2827, _2828, _2829));
        float _4861 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2842 = _2819 * _2819;
        float _2846 = ((_2837 * _2837) * (_2842 + (-1.0))) + 1.0;
        float _2853 = exp2(log2(1.0 - (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) * 5.0);
        float _2860 = 1.0 - _2819;
        float _2870 = (0.5 / (((_2477 * ((_2833 * _2860) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2477 * _2860) + _2819) * _2833))) * _2833;
        float _4872 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2872 = (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2842 / ((_2846 * _2846) * 3.141590118408203125));
        float _2873 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2789 = (((((_2853 * _2499) + _1205) * cbLight._m0[_2804].x) * _2872) * _2873) + _2675;
        _2791 = (((((_2853 * _2501) + _1207) * cbLight._m0[_2804].y) * _2872) * _2873) + _2677;
        _2793 = (((((_2853 * _2502) + _1208) * cbLight._m0[_2804].z) * _2872) * _2873) + _2679;
    }
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    if (_2307.y == 0u)
    {
        float _2948 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2949 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2948;
        float _2950 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2948;
        float _2951 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2948;
        uvec4 _2963 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2964 = _2963.x;
        uint _2975 = uint((float(_2963.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1144) / _2964))) + floor(float(uint(cbSceneParam._m0[85u].x * _1143) / _2964)));
        float _2985 = (log2(_2951 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2986 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        uint _2989 = uint(isnan(14.0) ? _2986 : (isnan(_2986) ? 14.0 : min(_2986, 14.0)));
        uvec4 _2994 = texelFetch(g_lightClusterGridBuffer, int(((_2989 << 2u) + (_2975 << 6u)) >> 2u));
        uint _2995 = _2994.x;
        uint _2996 = _2963.z;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        if (((((1u << ((_2996 >> 4u) & 15u)) + 4294967295u) & _2995) == 0u) || ((_2996 & 240u) == 0u))
        {
            _3096 = 0.0;
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
        }
        else
        {
            float _3097;
            float _3099;
            float _3101;
            float _3103;
            float _3105;
            float _3107;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            uint _3255 = 0u;
            uint _3264;
            bool _3265;
            for (;;)
            {
                _3264 = texelFetch(g_lightClassification, int((((_2989 << 5u) + (_2975 << 9u)) + (_3255 << 2u)) >> 2u)).x;
                _3265 = _3264 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3265)
                {
                    frontier_phi_66_pred = _3249;
                    frontier_phi_66_pred_1 = _3254;
                    frontier_phi_66_pred_2 = _3253;
                    frontier_phi_66_pred_3 = _3252;
                    frontier_phi_66_pred_4 = _3251;
                    frontier_phi_66_pred_5 = _3250;
                }
                else
                {
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    float _3398;
                    float _3399;
                    uint _3400;
                    _3394 = _3249;
                    _3395 = _3250;
                    _3396 = _3251;
                    _3397 = _3252;
                    _3398 = _3253;
                    _3399 = _3254;
                    _3400 = _3264;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    for (;;)
                    {
                        uint _3404 = uint(findLSB(_3400)) + (_3255 << 5u);
                        uint _3401 = (_3400 + 4294967295u) & _3400;
                        uint _3406 = _3404 * 48u;
                        vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3406)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 3u)).x));
                        uint _3426 = (_3404 * 48u) + 4u;
                        vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3426)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 3u)).x));
                        uint _3445 = (_3404 * 48u) + 8u;
                        vec3 _3456 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3445)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 2u)).x));
                        float _3460 = _3420.x - _2949;
                        float _3461 = _3420.y - _2950;
                        float _3462 = _3420.z - _2951;
                        float _3463 = dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462));
                        float _3466 = inversesqrt(_3463);
                        float _3467 = _3466 * _3460;
                        float _3468 = _3466 * _3461;
                        float _3469 = _3466 * _3462;
                        float _3470 = dot(vec3(_1162, _1165, _1168), vec3(_3467, _3468, _3469));
                        float _3475 = 1.0 - (_3463 * _3420.w);
                        float _4898 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3476 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3477 = sqrt(_3463) * _3439.w;
                        float _3480 = 1.39999997615814208984375 / (_3477 + 1.39999997615814208984375);
                        float _3481 = _3480 * _3480;
                        float _3484 = ((1.0 - _3481) * _3470) + _3481;
                        float _3487 = _3477 * _3477;
                        float _3491 = ((isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0))) * _3476) / ((_3487 * 0.699999988079071044921875) + 1.0);
                        float _3495 = (-0.0) - _2949;
                        float _3496 = (-0.0) - _2950;
                        float _3497 = (-0.0) - _2951;
                        float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                        float _3502 = _3501 * _3495;
                        float _3503 = _3501 * _3496;
                        float _3504 = _3501 * _3497;
                        float _3512 = exp2(log2(1.0 / ((_3487 * 3.5) + 5.0)) * 0.25);
                        float _3513 = 1.0 - _1237;
                        float _3520 = sqrt(1.0 - ((1.0 - (_3513 * _3513)) * (1.0 - (_3512 * _3512))));
                        float _3521 = _3520 * _3520;
                        float _3522 = _3521 * _3521;
                        float _3523 = _3502 + _3467;
                        float _3524 = _3503 + _3468;
                        float _3525 = _3504 + _3469;
                        float _3529 = inversesqrt(dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525)));
                        float _3533 = dot(vec3(_1162, _1165, _1168), vec3(_3502, _3503, _3504));
                        float _4914 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                        float _3536 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3537 = dot(vec3(_1162, _1165, _1168), vec3(_3529 * _3523, _3529 * _3524, _3529 * _3525));
                        float _4925 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3540 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3544 = ((_3540 * _3540) * (_3522 + (-1.0))) + 1.0;
                        float _3545 = _3480 * _3521;
                        float _3546 = _3545 * _3545;
                        float _3549 = ((1.0 - _3546) * _3470) + _3546;
                        float _4936 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3550 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3551 = 1.0 - _3521;
                        float _3561 = (0.5 / (((_3550 * ((_3536 * _3551) + _3521)) + 9.9999999392252902907785028219223e-09) + (((_3550 * _3551) + _3521) * _3536))) * _3550;
                        float _4947 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3572 = (((_3522 * 3.1415927410125732421875) * (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0)))) / ((_3544 * _3544) * ((_3487 * 2.1991131305694580078125) + 3.141590118408203125))) * _3476;
                        _3324 = (_3491 * _3439.x) + _3397;
                        _3325 = (_3491 * _3439.y) + _3398;
                        _3326 = (_3491 * _3439.z) + _3399;
                        _3321 = (_3572 * _3456.x) + _3394;
                        _3322 = (_3572 * _3456.y) + _3395;
                        _3323 = (_3572 * _3456.z) + _3396;
                        if (_3401 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3394 = _3321;
                            _3395 = _3322;
                            _3396 = _3323;
                            _3397 = _3324;
                            _3398 = _3325;
                            _3399 = _3326;
                            _3400 = _3401;
                        }
                    }
                    frontier_phi_66_pred = _3321;
                    frontier_phi_66_pred_1 = _3326;
                    frontier_phi_66_pred_2 = _3325;
                    frontier_phi_66_pred_3 = _3324;
                    frontier_phi_66_pred_4 = _3323;
                    frontier_phi_66_pred_5 = _3322;
                }
                _3097 = frontier_phi_66_pred;
                _3107 = frontier_phi_66_pred_1;
                _3105 = frontier_phi_66_pred_2;
                _3103 = frontier_phi_66_pred_3;
                _3101 = frontier_phi_66_pred_4;
                _3099 = frontier_phi_66_pred_5;
                uint _3256 = _3255 + 1u;
                if (_3256 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3249 = _3097;
                    _3250 = _3099;
                    _3251 = _3101;
                    _3252 = _3103;
                    _3253 = _3105;
                    _3254 = _3107;
                    _3255 = _3256;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3096 = _3097;
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
        }
        uvec4 _3110 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3111 = _3110.z;
        uint _3113 = (_3111 >> 8u) & 15u;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        if (((4294967295u << _3113) & _2995) == 0u)
        {
            _3217 = _3096;
            _3219 = _3098;
            _3221 = _3100;
            _3223 = _3102;
            _3225 = _3104;
            _3227 = _3106;
        }
        else
        {
            float _3242 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
            float _3243 = _3242 * _2949;
            float _3244 = _3242 * _2950;
            float _3245 = _3242 * _2951;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3113 < ((_3111 >> 12u) & 15u))
            {
                float _3218;
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3377 = _3096;
                float _3378 = _3098;
                float _3379 = _3100;
                float _3380 = _3102;
                float _3381 = _3104;
                float _3382 = _3106;
                uint _3383 = _3113;
                uint _3392;
                bool _3393;
                for (;;)
                {
                    _3392 = texelFetch(g_lightClassification, int((((_2989 << 5u) + (_2975 << 9u)) + (_3383 << 2u)) >> 2u)).x;
                    _3393 = _3392 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3393)
                    {
                        frontier_phi_77_pred = _3382;
                        frontier_phi_77_pred_1 = _3381;
                        frontier_phi_77_pred_2 = _3380;
                        frontier_phi_77_pred_3 = _3379;
                        frontier_phi_77_pred_4 = _3378;
                        frontier_phi_77_pred_5 = _3377;
                    }
                    else
                    {
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3599 = _3377;
                        float _3600 = _3378;
                        float _3601 = _3379;
                        float _3602 = _3380;
                        float _3603 = _3381;
                        float _3604 = _3382;
                        uint _3605 = _3392;
                        uint _3606;
                        vec4 _3631;
                        float _3632;
                        vec4 _3647;
                        vec3 _3659;
                        vec4 _3674;
                        vec4 _3689;
                        float _3735;
                        bool _3736;
                        for (;;)
                        {
                            uint _3616 = ((_3383 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3605));
                            _3606 = (_3605 + 4294967295u) & _3605;
                            uint _3618 = _3616 * 40u;
                            _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            _3632 = _3631.w;
                            uint _3634 = (_3616 * 40u) + 4u;
                            _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            uint _3649 = (_3616 * 40u) + 8u;
                            _3659 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x));
                            uint _3661 = (_3616 * 40u) + 16u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3676 = (_3616 * 40u) + 20u;
                            _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3691 = (_3616 * 40u) + 24u;
                            vec4 _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            uint _3710 = (_3616 * 40u) + 28u;
                            vec4 _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            _3735 = fma(_2951, _3723.z, fma(_2950, _3723.y, _3723.x * _2949)) + _3723.w;
                            _3736 = !((fma(_2951, _3704.z, fma(_2950, _3704.y, _3704.x * _2949)) + _3704.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3736)
                            {
                                float _3763 = _3631.x - _2949;
                                float _3764 = _3631.y - _2950;
                                float _3765 = _3631.z - _2951;
                                float _3766 = dot(vec3(_3763, _3764, _3765), vec3(_3763, _3764, _3765));
                                float _3769 = inversesqrt(_3766);
                                float _3770 = _3769 * _3763;
                                float _3771 = _3769 * _3764;
                                float _3772 = _3769 * _3765;
                                float _3776 = 1.0 - (_3766 / (_3632 * _3632));
                                float _4958 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3777 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3781 = sqrt(_3766) * _3647.w;
                                float _3783 = 1.39999997615814208984375 / (_3781 + 1.39999997615814208984375);
                                float _3784 = _3783 * _3783;
                                float _3787 = ((1.0 - _3784) * dot(vec3(_3770, _3771, _3772), vec3(_1162, _1165, _1168))) + _3784;
                                float _3790 = _3781 * _3781;
                                float _3794 = (fma(_2951, _3674.z, fma(_2950, _3674.y, _3674.x * _2949)) + _3674.w) / _3735;
                                float _3795 = (fma(_2951, _3689.z, fma(_2950, _3689.y, _3689.x * _2949)) + _3689.w) / _3735;
                                float _3799 = 1.0 - dot(vec2(_3794, _3795), vec2(_3794, _3795));
                                float _4974 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3800 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3801 = _3800 * (((isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0))) * _3777) / ((_3790 * 0.699999988079071044921875) + 1.0));
                                float _3813 = exp2(log2(1.0 / ((_3790 * 3.5) + 5.0)) * 0.25);
                                float _3814 = 1.0 - _1237;
                                float _3821 = sqrt(1.0 - ((1.0 - (_3814 * _3814)) * (1.0 - (_3813 * _3813))));
                                float _3822 = _3821 * _3821;
                                float _3823 = _3822 * _3822;
                                float _3824 = _3770 - _3243;
                                float _3825 = _3771 - _3244;
                                float _3826 = _3772 - _3245;
                                float _3830 = inversesqrt(dot(vec3(_3824, _3825, _3826), vec3(_3824, _3825, _3826)));
                                float _3834 = dot(vec3(_1162, _1165, _1168), vec3((-0.0) - _3243, (-0.0) - _3244, (-0.0) - _3245));
                                float _4985 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3837 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3838 = dot(vec3(_1162, _1165, _1168), vec3(_3830 * _3824, _3830 * _3825, _3830 * _3826));
                                float _4996 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3841 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3845 = ((_3841 * _3841) * (_3823 + (-1.0))) + 1.0;
                                float _3846 = _3783 * _3822;
                                float _3847 = _3846 * _3846;
                                float _3853 = ((1.0 - _3847) * dot(vec3(_1162, _1165, _1168), vec3(_3770, _3771, _3772))) + _3847;
                                float _5007 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3854 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3855 = 1.0 - _3822;
                                float _3865 = (0.5 / (((_3854 * ((_3837 * _3855) + _3822)) + 9.9999999392252902907785028219223e-09) + (((_3854 * _3855) + _3822) * _3837))) * _3854;
                                float _5018 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3875 = (_3800 * _3777) * (((_3823 * 3.1415927410125732421875) * (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0)))) / ((_3845 * _3845) * ((_3790 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3801 * _3647.y;
                                frontier_phi_83_pred_1 = _3801 * _3647.x;
                                frontier_phi_83_pred_2 = _3875 * _3659.z;
                                frontier_phi_83_pred_3 = _3875 * _3659.y;
                                frontier_phi_83_pred_4 = _3875 * _3659.x;
                                frontier_phi_83_pred_5 = _3801 * _3647.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3883 = frontier_phi_83_pred;
                            _3882 = frontier_phi_83_pred_1;
                            _3881 = frontier_phi_83_pred_2;
                            _3880 = frontier_phi_83_pred_3;
                            _3879 = frontier_phi_83_pred_4;
                            _3884 = frontier_phi_83_pred_5;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            _3591 = _3884 + _3604;
                            _3586 = _3879 + _3599;
                            _3587 = _3880 + _3600;
                            _3588 = _3881 + _3601;
                            if (_3606 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3606;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3591;
                        frontier_phi_77_pred_1 = _3590;
                        frontier_phi_77_pred_2 = _3589;
                        frontier_phi_77_pred_3 = _3588;
                        frontier_phi_77_pred_4 = _3587;
                        frontier_phi_77_pred_5 = _3586;
                    }
                    _3228 = frontier_phi_77_pred;
                    _3226 = frontier_phi_77_pred_1;
                    _3224 = frontier_phi_77_pred_2;
                    _3222 = frontier_phi_77_pred_3;
                    _3220 = frontier_phi_77_pred_4;
                    _3218 = frontier_phi_77_pred_5;
                    uint _3384 = _3383 + 1u;
                    if (_3384 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3377 = _3218;
                        _3378 = _3220;
                        _3379 = _3222;
                        _3380 = _3224;
                        _3381 = _3226;
                        _3382 = _3228;
                        _3383 = _3384;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3222;
                frontier_phi_58_59_ladder_1 = _3228;
                frontier_phi_58_59_ladder_2 = _3226;
                frontier_phi_58_59_ladder_3 = _3224;
                frontier_phi_58_59_ladder_4 = _3220;
                frontier_phi_58_59_ladder_5 = _3218;
            }
            else
            {
                frontier_phi_58_59_ladder = _3100;
                frontier_phi_58_59_ladder_1 = _3106;
                frontier_phi_58_59_ladder_2 = _3104;
                frontier_phi_58_59_ladder_3 = _3102;
                frontier_phi_58_59_ladder_4 = _3098;
                frontier_phi_58_59_ladder_5 = _3096;
            }
            _3217 = frontier_phi_58_59_ladder_5;
            _3219 = frontier_phi_58_59_ladder_4;
            _3221 = frontier_phi_58_59_ladder;
            _3223 = frontier_phi_58_59_ladder_3;
            _3225 = frontier_phi_58_59_ladder_2;
            _3227 = frontier_phi_58_59_ladder_1;
        }
        float _3232 = isnan(1.0) ? _1221 : (isnan(_1221) ? 1.0 : min(_1221, 1.0));
        _3008 = (_3232 * _3223) + _2441;
        _3010 = (_3232 * _3225) + _2443;
        _3012 = (_3232 * _3227) + _2445;
        _3014 = ((_3217 * _1205) * _3232) + _2789;
        _3016 = ((_3219 * _1207) * _3232) + _2791;
        _3018 = ((_3221 * _1208) * _3232) + _2793;
    }
    else
    {
        _3008 = _2441;
        _3010 = _2443;
        _3012 = _2445;
        _3014 = _2789;
        _3016 = _2791;
        _3018 = _2793;
    }
    float _5034 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _5045 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _5056 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    float _3035 = ((isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0))) * (_3008 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1221))) + ((_3014 + ((isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0))) * _2058)) * cbPerFrame._m0[3u].x);
    float _3036 = ((isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_3010 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1221))) + ((_3016 + ((isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))) * _2058)) * cbPerFrame._m0[3u].x);
    float _3037 = ((isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * (_3012 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1221))) + ((_3018 + ((isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0))) * _2058)) * cbPerFrame._m0[3u].x);
    uint _3038 = _299 + 6u;
    float _3046 = _1143 / cbSceneParam._m0[86u].x;
    float _3047 = _1144 / cbSceneParam._m0[86u].y;
    vec4 _3061 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3046, _3047, (log2((isnan(cbSceneParam._m0[77u].w) ? _1066 : (isnan(_1066) ? cbSceneParam._m0[77u].w : min(_1066, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3063 = _3061.x;
    float _3064 = _3061.y;
    float _3065 = _3061.z;
    float _3066 = _3061.w;
    float _3159;
    float _3161;
    float _3163;
    float _3165;
    if (_1066 > cbSceneParam._m0[78u].w)
    {
        float _3121 = isnan(_1066) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1066 : min(cbSceneParam._m0[80u].w, _1066));
        float _3122 = _3121 / _1066;
        float _3133 = _3122 * _1116;
        float _3134 = _1117 * _3122;
        float _3135 = (-0.0) - _3134;
        float _3137 = _3122 * _1118;
        float _3139 = (cbSceneParam._m0[77u].w * _3135) / _3121;
        float _3140 = _3139 + cbSceneParam._m0[79u].w;
        float _3141 = cbSceneParam._m0[79u].w - _3134;
        float _3147 = sqrt(((_3133 * _3133) + (_3134 * _3134)) + (_3137 * _3137));
        float _3150 = (1.0 - (cbSceneParam._m0[77u].w / _3121)) * _3147;
        float _3155 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3157 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3334;
        if (abs((_3135 - _3139) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3334 = ((((_3140 > 0.0) ? exp2(_3155 * _3140) : (2.0 - exp2(_3157 * _3140))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3150;
        }
        else
        {
            float _3278 = 1.0 / cbSceneParam._m0[80u].x;
            float _3279 = isnan(_3141) ? _3140 : (isnan(_3140) ? _3141 : max(_3140, _3141));
            float _3280 = isnan(_3141) ? _3140 : (isnan(_3140) ? _3141 : min(_3140, _3141));
            float _3289 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : min(_3279, 0.0));
            float _3290 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : min(_3280, 0.0));
            _3334 = ((abs(_3147 / _3135) * cbSceneParam._m0[80u].y) * ((((_3289 - _3290) * 2.0) - ((exp2(_3155 * (isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0)))) - exp2(_3155 * (isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))))) * _3278)) - ((exp2(_3157 * _3289) - exp2(_3157 * _3290)) * _3278))) + (_3150 * cbSceneParam._m0[80u].z);
        }
        vec4 _3336 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3046, _3047, 1.0), 0.0);
        float _3345 = exp2((_3334 * (-1.44269502162933349609375)) * (1.0 - _3336.w));
        float _3346 = log2(_3345);
        float _3362 = log2(_3066);
        _3159 = (exp2(_3362 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3346 * cbSceneParam._m0[78u].x)) * _3336.x) / cbSceneParam._m0[78u].x)) + _3063;
        _3161 = (exp2(_3362 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3346 * cbSceneParam._m0[78u].y)) * _3336.y) / cbSceneParam._m0[78u].y)) + _3064;
        _3163 = (exp2(_3362 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3346 * cbSceneParam._m0[78u].z)) * _3336.z) / cbSceneParam._m0[78u].z)) + _3065;
        _3165 = _3345 * _3066;
    }
    else
    {
        _3159 = _3063;
        _3161 = _3064;
        _3163 = _3065;
        _3165 = _3066;
    }
    bool _3372;
    vec4 _3175;
    vec4 _3197;
    float _3199;
    float _3203;
    float _3204;
    float _3205;
    float _3206;
    bool _3216;
    for (;;)
    {
        _3175 = cbMatDynParam._m0[0u];
        float _3177 = roundEven(_3175.y);
        bool _3178 = _3177 == 3.0;
        float _3179 = log2(_3165);
        float _3186 = exp2(_3179 * cbSceneParam._m0[78u].x) * _3035;
        float _3187 = exp2(_3179 * cbSceneParam._m0[78u].y) * _3036;
        float _3188 = exp2(_3179 * cbSceneParam._m0[78u].z) * _3037;
        float _3195 = _1132 + (-0.5);
        _3197 = cbMtdParam._m0[1u];
        _3199 = _3197.y * _3195;
        float _3202 = (_3177 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3203 = _3202 * (_3178 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3159)));
        _3204 = _3202 * (_3178 ? _3187 : (_3187 + (cbSceneParam._m0[72u].w * _3161)));
        _3205 = _3202 * (_3178 ? _3188 : (_3188 + (cbSceneParam._m0[72u].w * _3163)));
        _3206 = _3195 * 0.999000012874603271484375;
        _3216 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3216)
        {
            if ((cbInstanceData._m0[_299 + 7u].x + _3206) < 0.5)
            {
                _3372 = true;
                break;
            }
        }
        uint _3313 = _1181 + uint(_3175.w);
        if ((cbInstanceData._m0[_3313].w < 1.0) && ((cbInstanceData._m0[_3313].w + _3206) < 0.5))
        {
            _3372 = true;
            break;
        }
        if ((_3199 + 1.0) < _3197.x)
        {
            _3372 = true;
            break;
        }
        _3372 = false;
        break;
    }
    float _3577;
    if (_3372)
    {
        discard_state = true;
        _3577 = 0.0;
    }
    else
    {
        _3577 = cbInstanceData._m0[_3038].w;
    }
    SV_Target.x = _3203;
    SV_Target.y = _3204;
    SV_Target.z = _3205;
    SV_Target.w = _3577;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3038].w;
    discard_exit();
}


