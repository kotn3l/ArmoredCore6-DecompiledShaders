#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1501;
float _3904;
float _3905;
float _3906;
float _3907;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _349.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[23u].w) + _399) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3916 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _424 = (_417 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _425 = (_417 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _426 = (_417 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _475 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _489 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _349.y) * 2.0) - ((((_465 - _475) * cbMtdParam._m0[23u].w) + _475) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3927 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _497 = (_490 * ((_443.x * cbMtdParam._m0[13u].x) - _424)) + _424;
    float _498 = (_490 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425;
    float _499 = (_490 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426;
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    float _545 = ((_517.x - _536) * _417) + _536;
    float _546 = ((_517.y - _537) * _417) + _537;
    float _547 = ((_517.z - _538) * _417) + _538;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _572 = ((_559.z - _547) * _490) + _547;
    float _575 = ((((_559.x - _545) * _490) + _545) * 2.0) + (-1.0);
    float _577 = ((((_559.y - _546) * _490) + _546) * 2.0) + (-1.0);
    float _578 = dot(vec2(_575, _577), vec2(_575, _577));
    float _3938 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _583 = sqrt(1.0 - (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))));
    vec4 _597 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _609 = (((_597.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _575;
    float _610 = (((_597.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _577;
    float _613 = fma(_583, _251, fma(_610, _258, _609 * _244));
    float _616 = fma(_583, _252, fma(_610, _259, _609 * _245));
    float _619 = fma(_583, _253, fma(_610, _260, _609 * _246));
    float _623 = inversesqrt(dot(vec3(_613, _616, _619), vec3(_613, _616, _619)));
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _652 = _650.x;
    float _653 = 1.0 - _652;
    float _662 = (cbMtdParam._m0[19u].x + dot(vec4(_623 * _613, _623 * _616, _623 * _619, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_652 - _653) * cbMtdParam._m0[24u].z) + _653) * cbMtdParam._m0[21u].z);
    float _3949 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _665 = (-0.0) - cbMtdParam._m0[24u].x;
    float _667 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _667 : (isnan(_667) ? 1.0 : min(_667, 1.0));
    float _675 = _663 - ((_663 * TEXCOORD_8.x) * _668);
    float _676 = _663 - ((_663 * TEXCOORD_8.y) * _668);
    float _677 = _663 - ((_663 * TEXCOORD_8.z) * _668);
    float _684 = (_675 * (cbMtdParam._m0[17u].x - _497)) + _497;
    float _685 = (_676 * (cbMtdParam._m0[17u].y - _498)) + _498;
    float _686 = (_677 * (cbMtdParam._m0[17u].z - _499)) + _499;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _700 = _698.x;
    float _701 = 1.0 - _700;
    float _727 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_700 - _701) * cbMtdParam._m0[24u].w) + _701) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3970 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _728 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _736 = ((((cbMtdParam._m0[10u].x - _684) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _728) + _684;
    float _737 = ((((cbMtdParam._m0[10u].y - _685) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _728) + _685;
    float _738 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _686)) * _728) + _686;
    vec4 _764 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _766 = _764.x;
    float _784 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _766) * _417) + _766;
    float _801 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _784) * _490) + _784;
    float _805 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _801) * cbMtdParam._m0[19u].z) + _801;
    float _807 = _805 - (_805 * _675);
    float _809 = _807 - (_807 * _728);
    float _813 = (cbMtdParam._m0[19u].w * (_597.z - _572)) + _572;
    vec4 _827 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _834 = (_827.x * 2.0) + (-1.0);
    float _835 = (_827.y * 2.0) + (-1.0);
    float _836 = dot(vec2(_834, _835), vec2(_834, _835));
    float _3981 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _844 = ((_827.z - _813) * _675) + _813;
    float _847 = ((cbMtdParam._m0[23u].x - _844) * _728) + _844;
    vec4 _866 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _872 = (_866.x * 2.0) + (-1.0);
    float _873 = (_866.y * 2.0) + (-1.0);
    float _874 = dot(vec2(_872, _873), vec2(_872, _873));
    float _3992 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _889 = ((sqrt(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) - _583) * _677) + _583;
    float _892 = (((_834 - _609) * _675) + _609) + (cbMtdParam._m0[21u].x * _609);
    float _893 = (((_835 - _610) * _676) + _610) + (cbMtdParam._m0[21u].x * _610);
    float _904 = (((_872 - _892) + (_892 * cbMtdParam._m0[22u].z)) * _728) + _892;
    float _905 = (((_873 - _893) + (_893 * cbMtdParam._m0[22u].z)) * _728) + _893;
    float _906 = (_728 * (sqrt(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) - _889)) + _889;
    float _908 = cbMtdParam._m0[22u].x + _597.w;
    float _911 = fma(_906, _251, fma(_905, _258, _904 * _244));
    float _914 = fma(_906, _252, fma(_905, _259, _904 * _245));
    float _917 = fma(_906, _253, fma(_905, _260, _904 * _246));
    float _921 = inversesqrt(dot(vec3(_911, _914, _917), vec3(_911, _914, _917)));
    float _922 = _921 * _911;
    float _923 = _921 * _914;
    float _924 = _921 * _917;
    float _4003 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _925 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4025 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4036 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4047 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4058 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _930 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _944 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _994 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _984);
    float _995 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _984);
    float _996 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _984);
    float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
    float _1001 = _994 * _1000;
    float _1002 = _995 * _1000;
    float _1003 = _996 * _1000;
    vec4 _1008 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1010 = _1008.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1182 = sqrt(((_994 * _994) + (_995 * _995)) + (_996 * _996));
        float _1188 = (cbMatDynParam._m0[5u].x * _1182) + cbMatDynParam._m0[5u].y;
        float _4069 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1193 = (cbMatDynParam._m0[5u].z * _1182) + cbMatDynParam._m0[5u].w;
        float _4080 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) - _1189)) + _1189) < ((_1010 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1021 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1022 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1040 = fma(_924, cbSceneParam._m0[5u].z, fma(_923, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _922));
    float _1043 = fma(_924, cbSceneParam._m0[6u].z, fma(_923, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _922));
    float _1046 = fma(_924, cbSceneParam._m0[7u].z, fma(_923, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _922));
    uint _1059 = _263 + 9u;
    uint _1060 = _1059 + uint(cbMatDynParam._m0[0u].w);
    float _1066 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_1060].x;
    float _1067 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_1060].y;
    float _1068 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * cbInstanceData._m0[_1060].z;
    float _4091 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _1072 = 1.0 - _930;
    float _1073 = _1069 * _1072;
    float _1074 = _1070 * _1072;
    float _1075 = _1071 * _1072;
    float _1080 = (_1069 + (-0.039999999105930328369140625)) * _930;
    float _1081 = (_1070 + (-0.039999999105930328369140625)) * _930;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _930;
    float _1083 = _1080 + 0.039999999105930328369140625;
    float _1085 = _1081 + 0.039999999105930328369140625;
    float _1086 = _1082 + 0.039999999105930328369140625;
    vec4 _1095 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1021, cbSceneParam._m0[86u].y * _1022));
    float _1099 = ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * TEXCOORD_5.w) * _1095.x;
    float _1100 = dot(vec3(_922, _923, _924), vec3(_1001, _1002, _1003));
    float _1103 = _1100 * 2.0;
    float _1107 = (_1103 * _922) - _1001;
    float _1108 = (_1103 * _923) - _1002;
    float _1109 = (_1103 * _924) - _1003;
    float _1113 = abs(dot(vec3(_1001, _1002, _1003), vec3(_922, _923, _924)));
    float _4124 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1115 = sqrt(_925);
    float _1128 = exp2((_1115 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1115 * 3.0));
    float _1134 = (1.0 - _1128) * ((_1115 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1135 = _1128 * _1115;
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1500;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1225 = fma(_1171, cbModelParam._m0[26u].z, fma(_1167, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163));
        float _1229 = fma(_1171, cbModelParam._m0[27u].z, fma(_1167, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163));
        float _1233 = fma(_1171, cbModelParam._m0[28u].z, fma(_1167, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163));
        float _1258 = _1163 + _922;
        float _1259 = _1167 + _923;
        float _1260 = _1171 + _924;
        float _1270 = fma(_1260, cbModelParam._m0[26u].z, fma(_1259, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1258)) - _1225;
        float _1271 = fma(_1260, cbModelParam._m0[27u].z, fma(_1259, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1258)) - _1229;
        float _1272 = fma(_1260, cbModelParam._m0[28u].z, fma(_1259, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1258)) - _1233;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1225 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1229 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[34u].z) + ((((((_1233 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1328 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1294.x + (-0.5));
        float _1330 = _1328 * (_1294.y + (-0.5));
        float _1331 = _1328 * (_1294.z + (-0.5));
        float _1338 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1301.x + (-0.5));
        float _1340 = _1338 * (_1301.y + (-0.5));
        float _1341 = _1338 * (_1301.z + (-0.5));
        float _1348 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1308.x + (-0.5));
        float _1350 = _1348 * (_1308.y + (-0.5));
        float _1351 = _1348 * (_1308.z + (-0.5));
        float _1358 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1315.x + (-0.5));
        float _1360 = _1358 * (_1315.y + (-0.5));
        float _1361 = _1358 * (_1315.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1382 = (dot(vec3(_922, _923, _924), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1392 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4172 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1394 + 1.0))) + _1399) * _1362;
        float _1409 = _1330 * 0.5;
        float _1410 = _1340 * 0.5;
        float _1411 = _1350 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_922, _923, _924), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4205 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1436 + 1.0))) + _1441) * _1363;
        float _1451 = _1331 * 0.5;
        float _1452 = _1341 * 0.5;
        float _1453 = _1351 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_922, _923, _924), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4238 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1478 + 1.0))) + _1483) * _1364;
        _1500 = _1331;
        _1502 = _1330;
        _1503 = _1329;
        _1504 = _1341;
        _1505 = _1340;
        _1506 = _1339;
        _1507 = _1351;
        _1508 = _1350;
        _1509 = _1349;
        _1510 = _1364;
        _1511 = _1363;
        _1512 = _1362;
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1514 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
    }
    else
    {
        _1500 = _1501;
        _1502 = _1501;
        _1503 = _1501;
        _1504 = _1501;
        _1505 = _1501;
        _1506 = _1501;
        _1507 = _1501;
        _1508 = _1501;
        _1509 = _1501;
        _1510 = _1501;
        _1511 = _1501;
        _1512 = _1501;
        _1513 = 0.0;
        _1514 = 0.0;
        _1515 = 0.0;
    }
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1542 = fma(_1171, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163));
        float _1546 = fma(_1171, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163));
        float _1550 = fma(_1171, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163));
        float _1573 = _1163 + _922;
        float _1574 = _1167 + _923;
        float _1575 = _1171 + _924;
        float _1585 = fma(_1575, cbModelParam._m0[30u].z, fma(_1574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1573)) - _1542;
        float _1586 = fma(_1575, cbModelParam._m0[31u].z, fma(_1574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1573)) - _1546;
        float _1587 = fma(_1575, cbModelParam._m0[32u].z, fma(_1574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1573)) - _1550;
        float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
        float _1604 = ((_1591 * _1585) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1542 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1605 = ((_1591 * _1586) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1546 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1606 = ((_1591 * _1587) / cbModelParam._m0[35u].z) + ((((((_1550 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        float _1641 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1608.x + (-0.5));
        float _1643 = _1641 * (_1608.y + (-0.5));
        float _1644 = _1641 * (_1608.z + (-0.5));
        float _1651 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1615.x + (-0.5));
        float _1653 = _1651 * (_1615.y + (-0.5));
        float _1654 = _1651 * (_1615.z + (-0.5));
        float _1661 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1622.x + (-0.5));
        float _1663 = _1661 * (_1622.y + (-0.5));
        float _1664 = _1661 * (_1622.z + (-0.5));
        float _1671 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1629.x + (-0.5));
        float _1673 = _1671 * (_1629.y + (-0.5));
        float _1674 = _1671 * (_1629.z + (-0.5));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = _1642 * 0.5;
        float _1679 = _1652 * 0.5;
        float _1680 = _1662 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_922, _923, _924), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4301 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1705 + 1.0))) + _1710) * _1675;
        float _1720 = _1643 * 0.5;
        float _1721 = _1653 * 0.5;
        float _1722 = _1663 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_922, _923, _924), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4334 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1747 + 1.0))) + _1752) * _1676;
        float _1762 = _1644 * 0.5;
        float _1763 = _1654 * 0.5;
        float _1764 = _1664 * 0.5;
        float _1765 = dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764));
        float _1770 = (_1765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1765);
        float _1778 = (dot(vec3(_922, _923, _924), vec3(_1770 * _1762, _1770 * _1763, _1770 * _1764)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1789 = _1788 * 2.0;
        float _1793 = (1.0 - _1788) / (_1788 + 1.0);
        float _4367 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1803 = ((((1.0 - _1794) * (_1789 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1789 + 1.0))) + _1794) * _1677;
        _1811 = _1644;
        _1812 = _1643;
        _1813 = _1642;
        _1814 = _1654;
        _1815 = _1653;
        _1816 = _1652;
        _1817 = _1664;
        _1818 = _1663;
        _1819 = _1662;
        _1820 = _1677;
        _1821 = _1676;
        _1822 = _1675;
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)));
    }
    else
    {
        _1811 = _1501;
        _1812 = _1501;
        _1813 = _1501;
        _1814 = _1501;
        _1815 = _1501;
        _1816 = _1501;
        _1817 = _1501;
        _1818 = _1501;
        _1819 = _1501;
        _1820 = _1501;
        _1821 = _1501;
        _1822 = _1501;
        _1823 = 0.0;
        _1824 = 0.0;
        _1825 = 0.0;
    }
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1513)) + _1513;
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1514)) + _1514;
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1515)) + _1515;
    float _1858 = fma(_1837, cbSceneParam._m0[89u].z, fma(_1836, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1837, cbSceneParam._m0[90u].z, fma(_1836, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1837, cbSceneParam._m0[91u].z, fma(_1836, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1835));
    float _1879 = _1107 * 0.5;
    float _1880 = _1108 * 0.5;
    float _1881 = _1109 * 0.5;
    float _1882 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1885 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1888 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1922;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1895 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1500, _1504, _1507, _1510));
        float _1899 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1502, _1505, _1508, _1511));
        float _1903 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1503, _1506, _1509, _1512));
        float _1910 = dot(vec4(cbModelParam._m0[39u]), vec4(_1879, _1880, _1881, 1.0));
        _1922 = dot(vec3(isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1910) ? 0.0 : (isnan(0.0) ? _1910 : max(0.0, _1910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1922 = 1.0;
    }
    float _1933;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1924 = dot(vec4(cbModelParam._m0[40u]), vec4(_1879, _1880, _1881, 1.0));
        _1933 = dot(vec3(isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1924) ? 0.0 : (isnan(0.0) ? _1924 : max(0.0, _1924))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1933 = 1.0;
    }
    float _1937 = (_1933 * cbModelParam._m0[1u].x) + (_1922 * (1.0 - cbModelParam._m0[1u].x));
    float _1947 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _925);
    float _1948 = isnan(_1947) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1947 : min(cbModelParam._m0[25u].z, _1947));
    float _2029;
    float _2031;
    float _2033;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1996 = fma(_1171, cbModelParam._m0[13u].z, fma(_1167, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1163)) + cbModelParam._m0[13u].w;
        float _2000 = fma(_1171, cbModelParam._m0[14u].z, fma(_1167, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1163)) + cbModelParam._m0[14u].w;
        float _2004 = fma(_1171, cbModelParam._m0[15u].z, fma(_1167, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1163)) + cbModelParam._m0[15u].w;
        float _2007 = fma(_1109, cbModelParam._m0[13u].z, fma(_1108, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1107));
        float _2010 = fma(_1109, cbModelParam._m0[14u].z, fma(_1108, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1107));
        float _2013 = fma(_1109, cbModelParam._m0[15u].z, fma(_1108, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1107));
        float _2041;
        if (_2007 > 0.0)
        {
            _2041 = abs((1.0 - _1996) / _2007);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1996 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2041 = frontier_phi_17_15_ladder;
        }
        float _2265;
        if (_2010 > 0.0)
        {
            _2265 = abs((1.0 - _2000) / _2010);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2000 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2265 = frontier_phi_26_22_ladder;
        }
        float _2522;
        if (_2013 > 0.0)
        {
            _2522 = abs((1.0 - _2004) / _2013);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2004 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2522 = frontier_phi_38_33_ladder;
        }
        float _2524 = isnan(_2265) ? _2041 : (isnan(_2041) ? _2265 : min(_2041, _2265));
        float _2525 = isnan(_2522) ? _2524 : (isnan(_2524) ? _2522 : min(_2524, _2522));
        float _2529 = (_2525 * _2007) + _1996;
        float _2530 = (_2525 * _2010) + _2000;
        float _2531 = (_2525 * _2013) + _2004;
        float _2532 = _2525 * 9.9999997473787516355514526367188e-05;
        float _2534 = (-1.0) - _2532;
        float _2536 = _2532 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2531 > _2536) || ((_2531 < _2534) || ((_2530 > _2536) || ((_2530 < _2534) || ((_2529 < _2534) || (_2529 > _2536))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2659 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2531, cbModelParam._m0[9u].z, fma(_2530, cbModelParam._m0[9u].y, _2529 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2531, cbModelParam._m0[10u].z, fma(_2530, cbModelParam._m0[10u].y, _2529 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2531, cbModelParam._m0[11u].z, fma(_2530, cbModelParam._m0[11u].y, _2529 * cbModelParam._m0[11u].x))), _1948);
            frontier_phi_16_38_ladder = _2659.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2659.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2659.x * cbModelParam._m0[1u].y;
        }
        _2029 = frontier_phi_16_38_ladder_2;
        _2031 = frontier_phi_16_38_ladder_1;
        _2033 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2017 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1107, _1108, _1109), _1948);
        _2029 = _2017.x * cbModelParam._m0[1u].y;
        _2031 = _2017.y * cbModelParam._m0[1u].y;
        _2033 = _2017.z * cbModelParam._m0[1u].y;
    }
    float _2037 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _925);
    float _2038 = isnan(_2037) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2037 : min(cbModelParam._m0[25u].w, _2037));
    float _2128;
    float _2130;
    float _2132;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2092 = fma(_1171, cbModelParam._m0[21u].z, fma(_1167, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1163)) + cbModelParam._m0[21u].w;
        float _2096 = fma(_1171, cbModelParam._m0[22u].z, fma(_1167, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1163)) + cbModelParam._m0[22u].w;
        float _2100 = fma(_1171, cbModelParam._m0[23u].z, fma(_1167, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1163)) + cbModelParam._m0[23u].w;
        float _2103 = fma(_1109, cbModelParam._m0[21u].z, fma(_1108, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1107));
        float _2106 = fma(_1109, cbModelParam._m0[22u].z, fma(_1108, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1107));
        float _2109 = fma(_1109, cbModelParam._m0[23u].z, fma(_1108, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1107));
        float _2270;
        if (_2103 > 0.0)
        {
            _2270 = abs((1.0 - _2092) / _2103);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2092 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2270 = frontier_phi_28_24_ladder;
        }
        float _2549;
        if (_2106 > 0.0)
        {
            _2549 = abs((1.0 - _2096) / _2106);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2096 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2549 = frontier_phi_40_35_ladder;
        }
        float _2762;
        if (_2109 > 0.0)
        {
            _2762 = abs((1.0 - _2100) / _2109);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2100 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2762 = frontier_phi_49_46_ladder;
        }
        float _2764 = isnan(_2549) ? _2270 : (isnan(_2270) ? _2549 : min(_2270, _2549));
        float _2765 = isnan(_2762) ? _2764 : (isnan(_2764) ? _2762 : min(_2764, _2762));
        float _2769 = (_2765 * _2103) + _2092;
        float _2770 = (_2765 * _2106) + _2096;
        float _2771 = (_2765 * _2109) + _2100;
        float _2772 = _2765 * 9.9999997473787516355514526367188e-05;
        float _2773 = (-1.0) - _2772;
        float _2775 = _2772 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2771 > _2775) || ((_2771 < _2773) || ((_2770 > _2775) || ((_2770 < _2773) || ((_2769 < _2773) || (_2769 > _2775))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2970 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2771, cbModelParam._m0[17u].z, fma(_2770, cbModelParam._m0[17u].y, _2769 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2771, cbModelParam._m0[18u].z, fma(_2770, cbModelParam._m0[18u].y, _2769 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2771, cbModelParam._m0[19u].z, fma(_2770, cbModelParam._m0[19u].y, _2769 * cbModelParam._m0[19u].x))), _2038);
            frontier_phi_25_49_ladder = _2970.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2970.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2970.x * cbModelParam._m0[1u].z;
        }
        _2128 = frontier_phi_25_49_ladder_2;
        _2130 = frontier_phi_25_49_ladder_1;
        _2132 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2112 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1107, _1108, _1109), _2038);
        _2128 = _2112.x * cbModelParam._m0[1u].z;
        _2130 = _2112.y * cbModelParam._m0[1u].z;
        _2132 = _2112.z * cbModelParam._m0[1u].z;
    }
    float _2145 = (((_1134 * _1083) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2128 - _2029)) + _2029);
    float _2147 = (((_1134 * _1085) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2130 - _2031)) + _2031);
    float _2149 = (((_1134 * _1086) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2132 - _2033)) + _2033);
    float _2152 = fma(_2149, cbSceneParam._m0[89u].z, fma(_2147, cbSceneParam._m0[89u].y, _2145 * cbSceneParam._m0[89u].x));
    float _2155 = fma(_2149, cbSceneParam._m0[90u].z, fma(_2147, cbSceneParam._m0[90u].y, _2145 * cbSceneParam._m0[90u].x));
    float _2158 = fma(_2149, cbSceneParam._m0[91u].z, fma(_2147, cbSceneParam._m0[91u].y, _2145 * cbSceneParam._m0[91u].x));
    vec4 _2166 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1021, _1022));
    float _2168 = _2166.w;
    float _2180 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2168);
    float _2181 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2168);
    float _2182 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2168);
    uvec4 _2186 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2188 = _2186.x * 14u;
    uint _2189 = _2188 + 13u;
    float _2196 = _1099 + (-1.0);
    float _2201 = (cbLight._m0[_2189].x * _2196) + 1.0;
    float _2202 = (cbLight._m0[_2189].y * _2196) + 1.0;
    float _2203 = (cbLight._m0[_2189].z * _2196) + 1.0;
    float _2204 = (cbLight._m0[_2189].w * _2196) + 1.0;
    uint _2205 = _2188 + 5u;
    float _2211 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
    uint _2215 = _2188 + 4u;
    float _2224 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
    uint _2228 = _2188 | 1u;
    float _2239 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_922, _923, _924));
    float _2242 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_922, _923, _924));
    float _4503 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _4514 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2247 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * 0.3183098733425140380859375;
    float _2249 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * 0.3183098733425140380859375;
    float _2256 = ((cbLight._m0[_2205].x * _2211) * _2249) + (((cbLight._m0[_2215].x * _2180) * _2224) * _2247);
    float _2257 = ((_2211 * cbLight._m0[_2205].y) * _2249) + (((cbLight._m0[_2215].y * _2181) * _2224) * _2247);
    float _2258 = ((_2211 * cbLight._m0[_2205].z) * _2249) + (((cbLight._m0[_2215].z * _2182) * _2224) * _2247);
    uvec4 _2262 = floatBitsToUint(cbLight._m0[_2188 + 12u]);
    bool _2264 = _2262.x == 0u;
    float _2275;
    float _2277;
    float _2279;
    if (_2264)
    {
        _2275 = _2256;
        _2277 = _2257;
        _2279 = _2258;
    }
    else
    {
        uint _2283 = _2188 + 6u;
        float _2299 = (dot(vec3(cbLight._m0[_2188 + 2u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2300 = _2299 * _2299;
        float _4525 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2301 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2302 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2275 = (((cbLight._m0[_2283].x * 0.3183098733425140380859375) * _2301) * _2302) + _2256;
        _2277 = (((cbLight._m0[_2283].y * 0.3183098733425140380859375) * _2301) * _2302) + _2257;
        _2279 = (((cbLight._m0[_2283].z * 0.3183098733425140380859375) * _2301) * _2302) + _2258;
    }
    bool _2282 = _2262.y == 0u;
    float _2320;
    float _2322;
    float _2324;
    if (_2282)
    {
        _2320 = _2275;
        _2322 = _2277;
        _2324 = _2279;
    }
    else
    {
        uint _2493 = _2188 + 7u;
        float _2509 = (dot(vec3(cbLight._m0[_2188 + 3u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2510 = _2509 * _2509;
        float _4541 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2511 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2512 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2320 = (((cbLight._m0[_2493].x * 0.3183098733425140380859375) * _2511) * _2512) + _2275;
        _2322 = (((cbLight._m0[_2493].y * 0.3183098733425140380859375) * _2511) * _2512) + _2277;
        _2324 = (((cbLight._m0[_2493].z * 0.3183098733425140380859375) * _2511) * _2512) + _2279;
    }
    uint _2327 = _2188 + 8u;
    float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _925) * 0.949999988079071044921875);
    float _2341 = _2340 * _2340;
    float _2342 = cbLight._m0[_2188].x + _1001;
    float _2343 = cbLight._m0[_2188].y + _1002;
    float _2344 = cbLight._m0[_2188].z + _1003;
    float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
    float _2349 = _2348 * _2342;
    float _2350 = _2348 * _2343;
    float _2351 = _2348 * _2344;
    float _2352 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2188].xyz));
    float _4557 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _4568 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _2356 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2357 = dot(vec3(_922, _923, _924), vec3(_2349, _2350, _2351));
    float _4579 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2361 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2349, _2350, _2351));
    float _4590 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2365 = _2341 * _2341;
    float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
    float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
    float _2378 = 0.959999978542327880859375 - _1080;
    float _2380 = 0.959999978542327880859375 - _1081;
    float _2381 = 0.959999978542327880859375 - _1082;
    float _2388 = 1.0 - _2341;
    float _2399 = (0.5 / (((_2356 * ((_2355 * _2388) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2388) + _2341) * _2355))) * _2355;
    float _4601 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2401 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
    uint _2415 = _2188 + 9u;
    float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _925) * 0.949999988079071044921875);
    float _2427 = _2426 * _2426;
    float _2428 = cbLight._m0[_2228].x + _1001;
    float _2429 = cbLight._m0[_2228].y + _1002;
    float _2430 = cbLight._m0[_2228].z + _1003;
    float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
    float _2435 = _2434 * _2428;
    float _2436 = _2434 * _2429;
    float _2437 = _2434 * _2430;
    float _2438 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2228].xyz));
    float _4612 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2442 = dot(vec3(_922, _923, _924), vec3(_2435, _2436, _2437));
    float _4623 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2446 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2435, _2436, _2437));
    float _4634 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2450 = _2427 * _2427;
    float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
    float _2461 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
    float _2468 = 1.0 - _2427;
    float _2478 = (0.5 / (((_2356 * ((_2441 * _2468) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2468) + _2427) * _2441))) * _2441;
    float _4645 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2480 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
    float _2490 = (((((_2461 * _2378) + _1083) * cbLight._m0[_2415].x) * _2480) * _2211) + ((((cbLight._m0[_2327].x * _2180) * ((_2377 * _2378) + _1083)) * _2401) * _2224);
    float _2491 = (((((_2461 * _2380) + _1085) * cbLight._m0[_2415].y) * _2480) * _2211) + ((((cbLight._m0[_2327].y * _2181) * ((_2377 * _2380) + _1085)) * _2401) * _2224);
    float _2492 = (((((_2461 * _2381) + _1086) * cbLight._m0[_2415].z) * _2480) * _2211) + ((((cbLight._m0[_2327].z * _2182) * ((_2377 * _2381) + _1086)) * _2401) * _2224);
    float _2554;
    float _2556;
    float _2558;
    if (_2264)
    {
        _2554 = _2490;
        _2556 = _2491;
        _2558 = _2492;
    }
    else
    {
        uint _2560 = _2188 + 2u;
        uint _2564 = _2188 + 10u;
        float _2578 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2560].w)) * _925) * 0.949999988079071044921875);
        float _2579 = _2578 * _2578;
        float _2580 = cbLight._m0[_2560].x + _1001;
        float _2581 = cbLight._m0[_2560].y + _1002;
        float _2582 = cbLight._m0[_2560].z + _1003;
        float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
        float _2587 = _2586 * _2580;
        float _2588 = _2586 * _2581;
        float _2589 = _2586 * _2582;
        float _2590 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2560].xyz));
        float _4656 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2594 = dot(vec3(_922, _923, _924), vec3(_2587, _2588, _2589));
        float _4667 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2598 = dot(vec3(cbLight._m0[_2560].xyz), vec3(_2587, _2588, _2589));
        float _4678 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2602 = _2579 * _2579;
        float _2606 = ((_2597 * _2597) * (_2602 + (-1.0))) + 1.0;
        float _2613 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
        float _2620 = 1.0 - _2579;
        float _2630 = (0.5 / (((_2356 * ((_2593 * _2620) + _2579)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2620) + _2579) * _2593))) * _2593;
        float _4689 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2632 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2602 / ((_2606 * _2606) * 3.141590118408203125));
        float _2633 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2554 = (((((_2613 * _2378) + _1083) * cbLight._m0[_2564].x) * _2632) * _2633) + _2490;
        _2556 = (((((_2613 * _2380) + _1085) * cbLight._m0[_2564].y) * _2632) * _2633) + _2491;
        _2558 = (((((_2613 * _2381) + _1086) * cbLight._m0[_2564].z) * _2632) * _2633) + _2492;
    }
    float _2668;
    float _2670;
    float _2672;
    if (_2282)
    {
        _2668 = _2554;
        _2670 = _2556;
        _2672 = _2558;
    }
    else
    {
        uint _2679 = _2188 + 3u;
        uint _2683 = _2188 + 11u;
        float _2697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2679].w)) * _925) * 0.949999988079071044921875);
        float _2698 = _2697 * _2697;
        float _2699 = cbLight._m0[_2679].x + _1001;
        float _2700 = cbLight._m0[_2679].y + _1002;
        float _2701 = cbLight._m0[_2679].z + _1003;
        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
        float _2706 = _2705 * _2699;
        float _2707 = _2705 * _2700;
        float _2708 = _2705 * _2701;
        float _2709 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2679].xyz));
        float _4705 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2713 = dot(vec3(_922, _923, _924), vec3(_2706, _2707, _2708));
        float _4716 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2717 = dot(vec3(cbLight._m0[_2679].xyz), vec3(_2706, _2707, _2708));
        float _4727 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2721 = _2698 * _2698;
        float _2725 = ((_2716 * _2716) * (_2721 + (-1.0))) + 1.0;
        float _2732 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
        float _2739 = 1.0 - _2698;
        float _2749 = (0.5 / (((_2356 * ((_2712 * _2739) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2739) + _2698) * _2712))) * _2712;
        float _4738 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2751 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2721 / ((_2725 * _2725) * 3.141590118408203125));
        float _2752 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2668 = (((((_2732 * _2378) + _1083) * cbLight._m0[_2683].x) * _2751) * _2752) + _2554;
        _2670 = (((((_2732 * _2380) + _1085) * cbLight._m0[_2683].y) * _2751) * _2752) + _2556;
        _2672 = (((((_2732 * _2381) + _1086) * cbLight._m0[_2683].z) * _2751) * _2752) + _2558;
    }
    float _2887;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    if (_2186.y == 0u)
    {
        float _2827 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2828 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2827;
        float _2829 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2827;
        float _2830 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2827;
        uvec4 _2842 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2843 = _2842.x;
        uint _2854 = uint((float(_2842.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1022) / _2843))) + floor(float(uint(cbSceneParam._m0[85u].x * _1021) / _2843)));
        float _2864 = (log2(_2830 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2865 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        uint _2868 = uint(isnan(14.0) ? _2865 : (isnan(_2865) ? 14.0 : min(_2865, 14.0)));
        uvec4 _2873 = texelFetch(g_lightClusterGridBuffer, int(((_2868 << 2u) + (_2854 << 6u)) >> 2u));
        uint _2874 = _2873.x;
        uint _2875 = _2842.z;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        if (((((1u << ((_2875 >> 4u) & 15u)) + 4294967295u) & _2874) == 0u) || ((_2875 & 240u) == 0u))
        {
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
        }
        else
        {
            float _2976;
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            uint _3133 = 0u;
            uint _3142;
            bool _3143;
            for (;;)
            {
                _3142 = texelFetch(g_lightClassification, int((((_2868 << 5u) + (_2854 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                _3143 = _3142 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3143)
                {
                    frontier_phi_66_pred = _3127;
                    frontier_phi_66_pred_1 = _3132;
                    frontier_phi_66_pred_2 = _3131;
                    frontier_phi_66_pred_3 = _3130;
                    frontier_phi_66_pred_4 = _3129;
                    frontier_phi_66_pred_5 = _3128;
                }
                else
                {
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    uint _3278;
                    _3272 = _3127;
                    _3273 = _3128;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3142;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    for (;;)
                    {
                        uint _3282 = uint(findLSB(_3278)) + (_3133 << 5u);
                        uint _3279 = (_3278 + 4294967295u) & _3278;
                        uint _3284 = _3282 * 48u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3304 = (_3282 * 48u) + 4u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 3u)).x));
                        uint _3323 = (_3282 * 48u) + 8u;
                        vec3 _3334 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x));
                        float _3338 = _3298.x - _2828;
                        float _3339 = _3298.y - _2829;
                        float _3340 = _3298.z - _2830;
                        float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                        float _3344 = inversesqrt(_3341);
                        float _3345 = _3344 * _3338;
                        float _3346 = _3344 * _3339;
                        float _3347 = _3344 * _3340;
                        float _3348 = dot(vec3(_1040, _1043, _1046), vec3(_3345, _3346, _3347));
                        float _3353 = 1.0 - (_3341 * _3298.w);
                        float _4764 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3354 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3355 = sqrt(_3341) * _3317.w;
                        float _3358 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3348) + _3359;
                        float _3365 = _3355 * _3355;
                        float _3369 = ((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3354) / ((_3365 * 0.699999988079071044921875) + 1.0);
                        float _3373 = (-0.0) - _2828;
                        float _3374 = (-0.0) - _2829;
                        float _3375 = (-0.0) - _2830;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3380 = _3379 * _3373;
                        float _3381 = _3379 * _3374;
                        float _3382 = _3379 * _3375;
                        float _3390 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                        float _3391 = 1.0 - _1115;
                        float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                        float _3399 = _3398 * _3398;
                        float _3400 = _3399 * _3399;
                        float _3401 = _3380 + _3345;
                        float _3402 = _3381 + _3346;
                        float _3403 = _3382 + _3347;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3411 = dot(vec3(_1040, _1043, _1046), vec3(_3380, _3381, _3382));
                        float _4780 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3414 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3415 = dot(vec3(_1040, _1043, _1046), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                        float _4791 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                        float _3423 = _3358 * _3399;
                        float _3424 = _3423 * _3423;
                        float _3427 = ((1.0 - _3424) * _3348) + _3424;
                        float _4802 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3429 = 1.0 - _3399;
                        float _3439 = (0.5 / (((_3428 * ((_3414 * _3429) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3399) * _3414))) * _3428;
                        float _4813 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3450 = (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) / ((_3422 * _3422) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125))) * _3354;
                        _3202 = (_3369 * _3317.x) + _3275;
                        _3203 = (_3369 * _3317.y) + _3276;
                        _3204 = (_3369 * _3317.z) + _3277;
                        _3199 = (_3450 * _3334.x) + _3272;
                        _3200 = (_3450 * _3334.y) + _3273;
                        _3201 = (_3450 * _3334.z) + _3274;
                        if (_3279 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3272 = _3199;
                            _3273 = _3200;
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3279;
                        }
                    }
                    frontier_phi_66_pred = _3199;
                    frontier_phi_66_pred_1 = _3204;
                    frontier_phi_66_pred_2 = _3203;
                    frontier_phi_66_pred_3 = _3202;
                    frontier_phi_66_pred_4 = _3201;
                    frontier_phi_66_pred_5 = _3200;
                }
                _2976 = frontier_phi_66_pred;
                _2986 = frontier_phi_66_pred_1;
                _2984 = frontier_phi_66_pred_2;
                _2982 = frontier_phi_66_pred_3;
                _2980 = frontier_phi_66_pred_4;
                _2978 = frontier_phi_66_pred_5;
                uint _3134 = _3133 + 1u;
                if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3127 = _2976;
                    _3128 = _2978;
                    _3129 = _2980;
                    _3130 = _2982;
                    _3131 = _2984;
                    _3132 = _2986;
                    _3133 = _3134;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
        }
        uvec4 _2989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2990 = _2989.z;
        uint _2992 = (_2990 >> 8u) & 15u;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        if (((4294967295u << _2992) & _2874) == 0u)
        {
            _3095 = _2975;
            _3097 = _2977;
            _3099 = _2979;
            _3101 = _2981;
            _3103 = _2983;
            _3105 = _2985;
        }
        else
        {
            float _3120 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
            float _3121 = _3120 * _2828;
            float _3122 = _3120 * _2829;
            float _3123 = _3120 * _2830;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2992 < ((_2990 >> 12u) & 15u))
            {
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3255 = _2975;
                float _3256 = _2977;
                float _3257 = _2979;
                float _3258 = _2981;
                float _3259 = _2983;
                float _3260 = _2985;
                uint _3261 = _2992;
                uint _3270;
                bool _3271;
                for (;;)
                {
                    _3270 = texelFetch(g_lightClassification, int((((_2868 << 5u) + (_2854 << 9u)) + (_3261 << 2u)) >> 2u)).x;
                    _3271 = _3270 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3271)
                    {
                        frontier_phi_77_pred = _3260;
                        frontier_phi_77_pred_1 = _3259;
                        frontier_phi_77_pred_2 = _3258;
                        frontier_phi_77_pred_3 = _3257;
                        frontier_phi_77_pred_4 = _3256;
                        frontier_phi_77_pred_5 = _3255;
                    }
                    else
                    {
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3477 = _3255;
                        float _3478 = _3256;
                        float _3479 = _3257;
                        float _3480 = _3258;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        uint _3483 = _3270;
                        uint _3484;
                        vec4 _3509;
                        float _3510;
                        vec4 _3525;
                        vec3 _3537;
                        vec4 _3552;
                        vec4 _3567;
                        float _3613;
                        bool _3614;
                        for (;;)
                        {
                            uint _3494 = ((_3261 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3483));
                            _3484 = (_3483 + 4294967295u) & _3483;
                            uint _3496 = _3494 * 40u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            _3510 = _3509.w;
                            uint _3512 = (_3494 * 40u) + 4u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3527 = (_3494 * 40u) + 8u;
                            _3537 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x));
                            uint _3539 = (_3494 * 40u) + 16u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3494 * 40u) + 20u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3494 * 40u) + 24u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3588 = (_3494 * 40u) + 28u;
                            vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            _3613 = fma(_2830, _3601.z, fma(_2829, _3601.y, _3601.x * _2828)) + _3601.w;
                            _3614 = !((fma(_2830, _3582.z, fma(_2829, _3582.y, _3582.x * _2828)) + _3582.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3614)
                            {
                                float _3641 = _3509.x - _2828;
                                float _3642 = _3509.y - _2829;
                                float _3643 = _3509.z - _2830;
                                float _3644 = dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643));
                                float _3647 = inversesqrt(_3644);
                                float _3648 = _3647 * _3641;
                                float _3649 = _3647 * _3642;
                                float _3650 = _3647 * _3643;
                                float _3654 = 1.0 - (_3644 / (_3510 * _3510));
                                float _4824 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3659 = sqrt(_3644) * _3525.w;
                                float _3661 = 1.39999997615814208984375 / (_3659 + 1.39999997615814208984375);
                                float _3662 = _3661 * _3661;
                                float _3665 = ((1.0 - _3662) * dot(vec3(_3648, _3649, _3650), vec3(_1040, _1043, _1046))) + _3662;
                                float _3668 = _3659 * _3659;
                                float _3672 = (fma(_2830, _3552.z, fma(_2829, _3552.y, _3552.x * _2828)) + _3552.w) / _3613;
                                float _3673 = (fma(_2830, _3567.z, fma(_2829, _3567.y, _3567.x * _2828)) + _3567.w) / _3613;
                                float _3677 = 1.0 - dot(vec2(_3672, _3673), vec2(_3672, _3673));
                                float _4840 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3679 = _3678 * (((isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0))) * _3655) / ((_3668 * 0.699999988079071044921875) + 1.0));
                                float _3691 = exp2(log2(1.0 / ((_3668 * 3.5) + 5.0)) * 0.25);
                                float _3692 = 1.0 - _1115;
                                float _3699 = sqrt(1.0 - ((1.0 - (_3692 * _3692)) * (1.0 - (_3691 * _3691))));
                                float _3700 = _3699 * _3699;
                                float _3701 = _3700 * _3700;
                                float _3702 = _3648 - _3121;
                                float _3703 = _3649 - _3122;
                                float _3704 = _3650 - _3123;
                                float _3708 = inversesqrt(dot(vec3(_3702, _3703, _3704), vec3(_3702, _3703, _3704)));
                                float _3712 = dot(vec3(_1040, _1043, _1046), vec3((-0.0) - _3121, (-0.0) - _3122, (-0.0) - _3123));
                                float _4851 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3715 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3716 = dot(vec3(_1040, _1043, _1046), vec3(_3708 * _3702, _3708 * _3703, _3708 * _3704));
                                float _4862 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3723 = ((_3719 * _3719) * (_3701 + (-1.0))) + 1.0;
                                float _3724 = _3661 * _3700;
                                float _3725 = _3724 * _3724;
                                float _3731 = ((1.0 - _3725) * dot(vec3(_1040, _1043, _1046), vec3(_3648, _3649, _3650))) + _3725;
                                float _4873 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3733 = 1.0 - _3700;
                                float _3743 = (0.5 / (((_3732 * ((_3715 * _3733) + _3700)) + 9.9999999392252902907785028219223e-09) + (((_3732 * _3733) + _3700) * _3715))) * _3732;
                                float _4884 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3753 = (_3678 * _3655) * (((_3701 * 3.1415927410125732421875) * (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) / ((_3723 * _3723) * ((_3668 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3679 * _3525.y;
                                frontier_phi_83_pred_1 = _3679 * _3525.x;
                                frontier_phi_83_pred_2 = _3753 * _3537.z;
                                frontier_phi_83_pred_3 = _3753 * _3537.y;
                                frontier_phi_83_pred_4 = _3753 * _3537.x;
                                frontier_phi_83_pred_5 = _3679 * _3525.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3761 = frontier_phi_83_pred;
                            _3760 = frontier_phi_83_pred_1;
                            _3759 = frontier_phi_83_pred_2;
                            _3758 = frontier_phi_83_pred_3;
                            _3757 = frontier_phi_83_pred_4;
                            _3762 = frontier_phi_83_pred_5;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3464 = _3757 + _3477;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            if (_3484 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3484;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3469;
                        frontier_phi_77_pred_1 = _3468;
                        frontier_phi_77_pred_2 = _3467;
                        frontier_phi_77_pred_3 = _3466;
                        frontier_phi_77_pred_4 = _3465;
                        frontier_phi_77_pred_5 = _3464;
                    }
                    _3106 = frontier_phi_77_pred;
                    _3104 = frontier_phi_77_pred_1;
                    _3102 = frontier_phi_77_pred_2;
                    _3100 = frontier_phi_77_pred_3;
                    _3098 = frontier_phi_77_pred_4;
                    _3096 = frontier_phi_77_pred_5;
                    uint _3262 = _3261 + 1u;
                    if (_3262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3255 = _3096;
                        _3256 = _3098;
                        _3257 = _3100;
                        _3258 = _3102;
                        _3259 = _3104;
                        _3260 = _3106;
                        _3261 = _3262;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3100;
                frontier_phi_58_59_ladder_1 = _3106;
                frontier_phi_58_59_ladder_2 = _3104;
                frontier_phi_58_59_ladder_3 = _3102;
                frontier_phi_58_59_ladder_4 = _3098;
                frontier_phi_58_59_ladder_5 = _3096;
            }
            else
            {
                frontier_phi_58_59_ladder = _2979;
                frontier_phi_58_59_ladder_1 = _2985;
                frontier_phi_58_59_ladder_2 = _2983;
                frontier_phi_58_59_ladder_3 = _2981;
                frontier_phi_58_59_ladder_4 = _2977;
                frontier_phi_58_59_ladder_5 = _2975;
            }
            _3095 = frontier_phi_58_59_ladder_5;
            _3097 = frontier_phi_58_59_ladder_4;
            _3099 = frontier_phi_58_59_ladder;
            _3101 = frontier_phi_58_59_ladder_3;
            _3103 = frontier_phi_58_59_ladder_2;
            _3105 = frontier_phi_58_59_ladder_1;
        }
        float _3110 = isnan(1.0) ? _1099 : (isnan(_1099) ? 1.0 : min(_1099, 1.0));
        _2887 = (_3110 * _3101) + _2320;
        _2889 = (_3110 * _3103) + _2322;
        _2891 = (_3110 * _3105) + _2324;
        _2893 = ((_3095 * _1083) * _3110) + _2668;
        _2895 = ((_3097 * _1085) * _3110) + _2670;
        _2897 = ((_3099 * _1086) * _3110) + _2672;
    }
    else
    {
        _2887 = _2320;
        _2889 = _2322;
        _2891 = _2324;
        _2893 = _2668;
        _2895 = _2670;
        _2897 = _2672;
    }
    float _4900 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _4911 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _4922 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _2914 = ((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2887 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1099))) + ((_2893 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _2915 = ((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2889 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1099))) + ((_2895 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _2916 = ((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2891 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1099))) + ((_2897 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    uint _2917 = _263 + 6u;
    float _2925 = _1021 / cbSceneParam._m0[86u].x;
    float _2926 = _1022 / cbSceneParam._m0[86u].y;
    vec4 _2940 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2925, _2926, (log2((isnan(cbSceneParam._m0[77u].w) ? _944 : (isnan(_944) ? cbSceneParam._m0[77u].w : min(_944, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2942 = _2940.x;
    float _2943 = _2940.y;
    float _2944 = _2940.z;
    float _2945 = _2940.w;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    if (_944 > cbSceneParam._m0[78u].w)
    {
        float _3000 = isnan(_944) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _944 : min(cbSceneParam._m0[80u].w, _944));
        float _3001 = _3000 / _944;
        float _3012 = _3001 * _994;
        float _3013 = _995 * _3001;
        float _3014 = (-0.0) - _3013;
        float _3015 = _3001 * _996;
        float _3017 = (cbSceneParam._m0[77u].w * _3014) / _3000;
        float _3018 = _3017 + cbSceneParam._m0[79u].w;
        float _3019 = cbSceneParam._m0[79u].w - _3013;
        float _3025 = sqrt(((_3012 * _3012) + (_3013 * _3013)) + (_3015 * _3015));
        float _3028 = (1.0 - (cbSceneParam._m0[77u].w / _3000)) * _3025;
        float _3033 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3035 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3212;
        if (abs((_3014 - _3017) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3212 = ((((_3018 > 0.0) ? exp2(_3033 * _3018) : (2.0 - exp2(_3035 * _3018))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3028;
        }
        else
        {
            float _3156 = 1.0 / cbSceneParam._m0[80u].x;
            float _3157 = isnan(_3019) ? _3018 : (isnan(_3018) ? _3019 : max(_3018, _3019));
            float _3158 = isnan(_3019) ? _3018 : (isnan(_3018) ? _3019 : min(_3018, _3019));
            float _3167 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : min(_3157, 0.0));
            float _3168 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : min(_3158, 0.0));
            _3212 = ((abs(_3025 / _3014) * cbSceneParam._m0[80u].y) * ((((_3167 - _3168) * 2.0) - ((exp2(_3033 * (isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0)))) - exp2(_3033 * (isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))))) * _3156)) - ((exp2(_3035 * _3167) - exp2(_3035 * _3168)) * _3156))) + (_3028 * cbSceneParam._m0[80u].z);
        }
        vec4 _3214 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2925, _2926, 1.0), 0.0);
        float _3223 = exp2((_3212 * (-1.44269502162933349609375)) * (1.0 - _3214.w));
        float _3224 = log2(_3223);
        float _3240 = log2(_2945);
        _3037 = (exp2(_3240 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].x)) * _3214.x) / cbSceneParam._m0[78u].x)) + _2942;
        _3039 = (exp2(_3240 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].y)) * _3214.y) / cbSceneParam._m0[78u].y)) + _2943;
        _3041 = (exp2(_3240 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].z)) * _3214.z) / cbSceneParam._m0[78u].z)) + _2944;
        _3043 = _3223 * _2945;
    }
    else
    {
        _3037 = _2942;
        _3039 = _2943;
        _3041 = _2944;
        _3043 = _2945;
    }
    bool _3250;
    vec4 _3053;
    vec4 _3075;
    float _3077;
    float _3081;
    float _3082;
    float _3083;
    float _3084;
    bool _3094;
    for (;;)
    {
        _3053 = cbMatDynParam._m0[0u];
        float _3055 = roundEven(_3053.y);
        bool _3056 = _3055 == 3.0;
        float _3057 = log2(_3043);
        float _3064 = exp2(_3057 * cbSceneParam._m0[78u].x) * _2914;
        float _3065 = exp2(_3057 * cbSceneParam._m0[78u].y) * _2915;
        float _3066 = exp2(_3057 * cbSceneParam._m0[78u].z) * _2916;
        float _3073 = _1010 + (-0.5);
        _3075 = cbMtdParam._m0[1u];
        _3077 = _3075.y * _3073;
        float _3080 = (_3055 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3081 = _3080 * (_3056 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3037)));
        _3082 = _3080 * (_3056 ? _3065 : (_3065 + (cbSceneParam._m0[72u].w * _3039)));
        _3083 = _3080 * (_3056 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3041)));
        _3084 = _3073 * 0.999000012874603271484375;
        _3094 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3094)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3084) < 0.5)
            {
                _3250 = true;
                break;
            }
        }
        uint _3191 = _1059 + uint(_3053.w);
        if ((cbInstanceData._m0[_3191].w < 1.0) && ((cbInstanceData._m0[_3191].w + _3084) < 0.5))
        {
            _3250 = true;
            break;
        }
        if ((_3077 + 1.0) < _3075.x)
        {
            _3250 = true;
            break;
        }
        _3250 = false;
        break;
    }
    float _3455;
    if (_3250)
    {
        discard_state = true;
        _3455 = 0.0;
    }
    else
    {
        _3455 = cbInstanceData._m0[_2917].w;
    }
    SV_Target.x = _3081;
    SV_Target.y = _3082;
    SV_Target.z = _3083;
    SV_Target.w = _3455;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2917].w;
    discard_exit();
}


