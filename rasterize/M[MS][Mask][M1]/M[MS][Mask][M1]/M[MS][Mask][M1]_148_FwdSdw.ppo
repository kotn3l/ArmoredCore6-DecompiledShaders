#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1723;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _254 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _255 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _256 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _262 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _263 = _262 * _254;
    float _264 = _262 * _255;
    float _265 = _262 * _256;
    float _269 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = _269 * NORMAL.x;
    float _271 = _269 * NORMAL.y;
    float _272 = _269 * NORMAL.z;
    float _276 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _277 = _276 * TANGENT.x;
    float _278 = _276 * TANGENT.y;
    float _279 = _276 * TANGENT.z;
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _291 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4328 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4339 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4350 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _301 = uint(roundEven(NORMAL.w)) * 13u;
    uint _306 = _301 + 1u;
    uint _310 = _301 + 2u;
    float _319 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _320 = _319 * TEXCOORD.z;
    float _321 = _319 * TEXCOORD.w;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _320) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _321) + cbTextureTilingScale._m0[13u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _320) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _321) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _438 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _440 = _438.x;
    float _452 = dot(vec4(_440, _438.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _469 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _403.x) * 2.0) - ((((_440 - _452) * cbMtdParam._m0[23u].w) + _452) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4361 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _477 = (_470 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363;
    float _478 = (_470 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _479 = (_470 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _320) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _321) + cbTextureTilingScale._m0[3u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _518 = _516.x;
    float _528 = dot(vec4(_518, _516.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _542 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _403.y) * 2.0) - ((((_518 - _528) * cbMtdParam._m0[23u].w) + _528) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4372 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _550 = (_543 * ((_496.x * cbMtdParam._m0[13u].x) - _477)) + _477;
    float _551 = (_543 * ((_496.y * cbMtdParam._m0[13u].y) - _478)) + _478;
    float _552 = (_543 * ((_496.z * cbMtdParam._m0[13u].z) - _479)) + _479;
    vec4 _571 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _320) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _321) + cbTextureTilingScale._m0[24u].w));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _590 = _588.x;
    float _600 = dot(vec4(_590, _588.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _612 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _403.z) * 2.0) - ((((_590 - _600) * cbMtdParam._m0[23u].w) + _600) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4383 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _620 = (_613 * ((_571.x * cbMtdParam._m0[14u].x) - _550)) + _550;
    float _621 = (_613 * ((_571.y * cbMtdParam._m0[14u].y) - _551)) + _551;
    float _622 = (_613 * ((_571.z * cbMtdParam._m0[14u].z) - _552)) + _552;
    float _626 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _334.x) * _620;
    float _629 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _334.y) * _621;
    float _632 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _334.z) * _622;
    float _639 = ((_620 - _626) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) + _626;
    float _640 = ((_621 - _629) * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) + _629;
    float _641 = ((_622 - _632) * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) + _632;
    vec4 _659 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _320) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _321) + cbTextureTilingScale._m0[14u].w));
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _320) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _321) + cbTextureTilingScale._m0[20u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _320) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _321) + cbTextureTilingScale._m0[4u].w));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _722 = _720.x;
    float _723 = _720.y;
    float _724 = _720.z;
    float _731 = ((_703.x - _722) * _470) + _722;
    float _732 = ((_703.y - _723) * _470) + _723;
    float _733 = ((_703.z - _724) * _470) + _724;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _320) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _321) + cbTextureTilingScale._m0[2u].w));
    float _756 = ((_745.x - _731) * _543) + _731;
    float _757 = ((_745.y - _732) * _543) + _732;
    float _758 = ((_745.z - _733) * _543) + _733;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _320) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _321) + cbTextureTilingScale._m0[23u].w));
    float _783 = ((_770.z - _758) * _613) + _758;
    float _786 = ((((_770.x - _756) * _613) + _756) * 2.0) + (-1.0);
    float _787 = ((((_770.y - _757) * _613) + _757) * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _4394 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))));
    vec4 _811 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _823 = (_786 + ((((_678.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_811.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _824 = (_787 + ((((_678.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_811.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _827 = fma(_793, _270, fma(_824, _277, _823 * _263));
    float _830 = fma(_793, _271, fma(_824, _278, _823 * _264));
    float _833 = fma(_793, _272, fma(_824, _279, _823 * _265));
    float _837 = inversesqrt(dot(vec3(_827, _830, _833), vec3(_827, _830, _833)));
    vec4 _864 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _320) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _321) + cbTextureTilingScale._m0[11u].w));
    float _866 = _864.x;
    float _867 = 1.0 - _866;
    float _875 = (cbMtdParam._m0[19u].x + dot(vec4(_837 * _827, _837 * _830, _837 * _833, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_866 - _867) * cbMtdParam._m0[24u].z) + _867) * cbMtdParam._m0[21u].z);
    float _4405 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _876 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _878 = (-0.0) - cbMtdParam._m0[24u].x;
    float _880 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _880 : (isnan(_880) ? 1.0 : min(_880, 1.0));
    float _888 = _876 - ((_876 * TEXCOORD_8.x) * _881);
    float _889 = _876 - ((_876 * TEXCOORD_8.y) * _881);
    float _890 = _876 - ((_876 * TEXCOORD_8.z) * _881);
    float _897 = (_888 * ((_659.x * cbMtdParam._m0[18u].x) - _639)) + _639;
    float _898 = (_889 * ((_659.y * cbMtdParam._m0[18u].y) - _640)) + _640;
    float _899 = (_890 * ((_659.z * cbMtdParam._m0[18u].z) - _641)) + _641;
    float _914 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _915 = _914 * TEXCOORD.z;
    float _916 = _914 * TEXCOORD.w;
    vec4 _928 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _915) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _916) + cbTextureTilingScale._m0[19u].w));
    float _930 = _928.x;
    float _931 = 1.0 - _930;
    float _957 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_930 - _931) * cbMtdParam._m0[24u].w) + _931) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4426 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _958 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _966 = ((((cbMtdParam._m0[10u].x - _897) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _958) + _897;
    float _967 = ((((cbMtdParam._m0[10u].y - _898) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _958) + _898;
    float _968 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _899)) * _958) + _899;
    vec4 _994 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _996 = _994.x;
    float _1014 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _320) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _321) + cbTextureTilingScale._m0[9u].w)).x - _996) * _470) + _996;
    float _1031 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _320) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _321) + cbTextureTilingScale._m0[21u].w)).x - _1014) * _543) + _1014;
    float _1048 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _320) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _321) + cbTextureTilingScale._m0[10u].w)).x - _1031) * _613) + _1031;
    float _1054 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1048) * cbMtdParam._m0[19u].z) + _1048;
    float _1056 = _1054 - (_1054 * _888);
    float _1058 = _1056 - (_1056 * _958);
    float _1065 = (((_678.z - _783) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _783;
    float _1069 = ((_811.z - _1065) * cbMtdParam._m0[19u].w) + _1065;
    vec4 _1085 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _320) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _321) + cbTextureTilingScale._m0[15u].w));
    float _1092 = (_1085.x * 2.0) + (-1.0);
    float _1093 = (_1085.y * 2.0) + (-1.0);
    float _1094 = dot(vec2(_1092, _1093), vec2(_1092, _1093));
    float _4437 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1102 = ((_1085.z - _1069) * _888) + _1069;
    float _1105 = ((cbMtdParam._m0[23u].x - _1102) * _958) + _1102;
    vec4 _1128 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _915) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _916) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1134 = (_1128.x * 2.0) + (-1.0);
    float _1135 = (_1128.y * 2.0) + (-1.0);
    float _1136 = dot(vec2(_1134, _1135), vec2(_1134, _1135));
    float _4448 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _1151 = ((sqrt(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) - _793) * _890) + _793;
    float _1154 = (((_1092 - _823) * _888) + _823) + (cbMtdParam._m0[21u].x * _823);
    float _1155 = (((_1093 - _824) * _889) + _824) + (cbMtdParam._m0[21u].x * _824);
    float _1166 = (((_1134 - _1154) + (_1154 * cbMtdParam._m0[22u].z)) * _958) + _1154;
    float _1167 = (((_1135 - _1155) + (_1155 * cbMtdParam._m0[22u].z)) * _958) + _1155;
    float _1168 = (_958 * (sqrt(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) - _1151)) + _1151;
    float _1170 = cbMtdParam._m0[22u].x + _811.w;
    float _1173 = fma(_1168, _270, fma(_1167, _277, _1166 * _263));
    float _1176 = fma(_1168, _271, fma(_1167, _278, _1166 * _264));
    float _1179 = fma(_1168, _272, fma(_1167, _279, _1166 * _265));
    float _1183 = inversesqrt(dot(vec3(_1173, _1176, _1179), vec3(_1173, _1176, _1179)));
    float _1184 = _1183 * _1173;
    float _1185 = _1183 * _1176;
    float _1186 = _1183 * _1179;
    float _4459 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1187 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _4470 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _4481 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4492 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4503 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4514 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1192 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _1206 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1246 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1256 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1246);
    float _1257 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1246);
    float _1258 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1246);
    float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
    float _1263 = _1256 * _1262;
    float _1264 = _1257 * _1262;
    float _1265 = _1258 * _1262;
    float _1271 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1272 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1290 = fma(_1186, cbSceneParam._m0[5u].z, fma(_1185, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1184));
    float _1293 = fma(_1186, cbSceneParam._m0[6u].z, fma(_1185, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1184));
    float _1296 = fma(_1186, cbSceneParam._m0[7u].z, fma(_1185, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1184));
    uint _1310 = (_301 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1316 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * cbInstanceData._m0[_1310].x;
    float _1317 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * cbInstanceData._m0[_1310].y;
    float _1318 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * cbInstanceData._m0[_1310].z;
    float _4525 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    float _1319 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _4536 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
    float _1320 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _4547 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _1321 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _1322 = 1.0 - _1192;
    float _1323 = _1319 * _1322;
    float _1324 = _1320 * _1322;
    float _1325 = _1321 * _1322;
    float _1330 = (_1319 + (-0.039999999105930328369140625)) * _1192;
    float _1331 = (_1320 + (-0.039999999105930328369140625)) * _1192;
    float _1332 = (_1321 + (-0.039999999105930328369140625)) * _1192;
    float _1333 = _1330 + 0.039999999105930328369140625;
    float _1335 = _1331 + 0.039999999105930328369140625;
    float _1336 = _1332 + 0.039999999105930328369140625;
    vec4 _1345 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1271, cbSceneParam._m0[86u].y * _1272));
    float _1349 = ((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * TEXCOORD_5.w) * _1345.x;
    float _1350 = dot(vec3(_1184, _1185, _1186), vec3(_1263, _1264, _1265));
    float _1353 = _1350 * 2.0;
    float _1357 = (_1353 * _1184) - _1263;
    float _1358 = (_1353 * _1185) - _1264;
    float _1359 = (_1353 * _1186) - _1265;
    float _1363 = abs(dot(vec3(_1263, _1264, _1265), vec3(_1184, _1185, _1186)));
    float _4558 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
    float _1365 = sqrt(_1187);
    float _1378 = exp2((_1365 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1365 * 3.0));
    float _1384 = (1.0 - _1378) * ((_1365 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1385 = _1378 * _1365;
    float _1413 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1417 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1421 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1722;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1447 = fma(_1421, cbModelParam._m0[26u].z, fma(_1417, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1413));
        float _1451 = fma(_1421, cbModelParam._m0[27u].z, fma(_1417, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1413));
        float _1455 = fma(_1421, cbModelParam._m0[28u].z, fma(_1417, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1413));
        float _1480 = _1413 + _1184;
        float _1481 = _1417 + _1185;
        float _1482 = _1421 + _1186;
        float _1492 = fma(_1482, cbModelParam._m0[26u].z, fma(_1481, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1480)) - _1447;
        float _1493 = fma(_1482, cbModelParam._m0[27u].z, fma(_1481, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1480)) - _1451;
        float _1494 = fma(_1482, cbModelParam._m0[28u].z, fma(_1481, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1480)) - _1455;
        float _1498 = inversesqrt(dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494)));
        float _1511 = ((_1498 * _1492) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1447 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1498 * _1493) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1451 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1498 * _1494) / cbModelParam._m0[34u].z) + ((((((_1455 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        float _1550 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1516.x + (-0.5));
        float _1552 = _1550 * (_1516.y + (-0.5));
        float _1553 = _1550 * (_1516.z + (-0.5));
        float _1560 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1523.x + (-0.5));
        float _1562 = _1560 * (_1523.y + (-0.5));
        float _1563 = _1560 * (_1523.z + (-0.5));
        float _1570 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1530.x + (-0.5));
        float _1572 = _1570 * (_1530.y + (-0.5));
        float _1573 = _1570 * (_1530.z + (-0.5));
        float _1580 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1537.x + (-0.5));
        float _1582 = _1580 * (_1537.y + (-0.5));
        float _1583 = _1580 * (_1537.z + (-0.5));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = _1551 * 0.5;
        float _1588 = _1561 * 0.5;
        float _1589 = _1571 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1604 = (dot(vec3(_1184, _1185, _1186), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4584 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1614 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4595 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4606 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_1616 + 1.0))) + _1621) * _1584;
        float _1631 = _1552 * 0.5;
        float _1632 = _1562 * 0.5;
        float _1633 = _1572 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_1184, _1185, _1186), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4617 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4628 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4639 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_1658 + 1.0))) + _1663) * _1585;
        float _1673 = _1553 * 0.5;
        float _1674 = _1563 * 0.5;
        float _1675 = _1573 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_1184, _1185, _1186), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4650 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4661 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4672 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_1700 + 1.0))) + _1705) * _1586;
        _1722 = _1553;
        _1724 = _1552;
        _1725 = _1551;
        _1726 = _1563;
        _1727 = _1562;
        _1728 = _1561;
        _1729 = _1573;
        _1730 = _1572;
        _1731 = _1571;
        _1732 = _1586;
        _1733 = _1585;
        _1734 = _1584;
        _1735 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
        _1736 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1737 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
    }
    else
    {
        _1722 = _1723;
        _1724 = _1723;
        _1725 = _1723;
        _1726 = _1723;
        _1727 = _1723;
        _1728 = _1723;
        _1729 = _1723;
        _1730 = _1723;
        _1731 = _1723;
        _1732 = _1723;
        _1733 = _1723;
        _1734 = _1723;
        _1735 = 0.0;
        _1736 = 0.0;
        _1737 = 0.0;
    }
    float _2029;
    float _2030;
    float _2031;
    float _2032;
    float _2033;
    float _2034;
    float _2035;
    float _2036;
    float _2037;
    float _2038;
    float _2039;
    float _2040;
    float _2041;
    float _2042;
    float _2043;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1760 = fma(_1421, cbModelParam._m0[30u].z, fma(_1417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1413));
        float _1764 = fma(_1421, cbModelParam._m0[31u].z, fma(_1417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1413));
        float _1768 = fma(_1421, cbModelParam._m0[32u].z, fma(_1417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1413));
        float _1791 = _1413 + _1184;
        float _1792 = _1417 + _1185;
        float _1793 = _1421 + _1186;
        float _1803 = fma(_1793, cbModelParam._m0[30u].z, fma(_1792, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1791)) - _1760;
        float _1804 = fma(_1793, cbModelParam._m0[31u].z, fma(_1792, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1791)) - _1764;
        float _1805 = fma(_1793, cbModelParam._m0[32u].z, fma(_1792, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1791)) - _1768;
        float _1809 = inversesqrt(dot(vec3(_1803, _1804, _1805), vec3(_1803, _1804, _1805)));
        float _1822 = ((_1809 * _1803) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1760 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1823 = ((_1809 * _1804) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1764 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1824 = ((_1809 * _1805) / cbModelParam._m0[35u].z) + ((((((_1768 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1826 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1822, _1823, _1824), 0.0);
        vec4 _1833 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1822, _1823, _1824), 0.0);
        vec4 _1840 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1822, _1823, _1824), 0.0);
        vec4 _1847 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1822, _1823, _1824), 0.0);
        float _1859 = exp2((_1826.w + (-0.5)) * 20.0) * 2.0;
        float _1860 = _1859 * (_1826.x + (-0.5));
        float _1861 = _1859 * (_1826.y + (-0.5));
        float _1862 = _1859 * (_1826.z + (-0.5));
        float _1869 = exp2((_1833.w + (-0.5)) * 20.0) * 2.0;
        float _1870 = _1869 * (_1833.x + (-0.5));
        float _1871 = _1869 * (_1833.y + (-0.5));
        float _1872 = _1869 * (_1833.z + (-0.5));
        float _1879 = exp2((_1840.w + (-0.5)) * 20.0) * 2.0;
        float _1880 = _1879 * (_1840.x + (-0.5));
        float _1881 = _1879 * (_1840.y + (-0.5));
        float _1882 = _1879 * (_1840.z + (-0.5));
        float _1889 = exp2((_1847.w + (-0.5)) * 20.0) * 2.0;
        float _1890 = _1889 * (_1847.x + (-0.5));
        float _1891 = _1889 * (_1847.y + (-0.5));
        float _1892 = _1889 * (_1847.z + (-0.5));
        float _1893 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1894 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1895 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1896 = _1860 * 0.5;
        float _1897 = _1870 * 0.5;
        float _1898 = _1880 * 0.5;
        float _1899 = dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898));
        float _1904 = (_1899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1899);
        float _1912 = (dot(vec3(_1184, _1185, _1186), vec3(_1904 * _1896, _1904 * _1897, _1904 * _1898)) + 1.0) * 0.5;
        float _4713 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1921 = sqrt(((_1897 * _1897) + (_1896 * _1896)) + (_1898 * _1898)) / (_1893 + 9.9999997473787516355514526367188e-06);
        float _4724 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _1923 = _1922 * 2.0;
        float _1927 = (1.0 - _1922) / (_1922 + 1.0);
        float _4735 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1928 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _1937 = ((((1.0 - _1928) * (_1923 + 2.0)) * exp2(log2(isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_1923 + 1.0))) + _1928) * _1893;
        float _1938 = _1861 * 0.5;
        float _1939 = _1871 * 0.5;
        float _1940 = _1881 * 0.5;
        float _1941 = dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940));
        float _1946 = (_1941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1941);
        float _1954 = (dot(vec3(_1184, _1185, _1186), vec3(_1946 * _1938, _1946 * _1939, _1946 * _1940)) + 1.0) * 0.5;
        float _4746 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1963 = sqrt(((_1939 * _1939) + (_1938 * _1938)) + (_1940 * _1940)) / (_1894 + 9.9999997473787516355514526367188e-06);
        float _4757 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1964 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _1965 = _1964 * 2.0;
        float _1969 = (1.0 - _1964) / (_1964 + 1.0);
        float _4768 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
        float _1979 = ((((1.0 - _1970) * (_1965 + 2.0)) * exp2(log2(isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_1965 + 1.0))) + _1970) * _1894;
        float _1980 = _1862 * 0.5;
        float _1981 = _1872 * 0.5;
        float _1982 = _1882 * 0.5;
        float _1983 = dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982));
        float _1988 = (_1983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1983);
        float _1996 = (dot(vec3(_1184, _1185, _1186), vec3(_1988 * _1980, _1988 * _1981, _1988 * _1982)) + 1.0) * 0.5;
        float _4779 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _2005 = sqrt(((_1981 * _1981) + (_1980 * _1980)) + (_1982 * _1982)) / (_1895 + 9.9999997473787516355514526367188e-06);
        float _4790 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2006 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2007 = _2006 * 2.0;
        float _2011 = (1.0 - _2006) / (_2006 + 1.0);
        float _4801 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2012 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2021 = ((((1.0 - _2012) * (_2007 + 2.0)) * exp2(log2(isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2007 + 1.0))) + _2012) * _1895;
        _2029 = _1862;
        _2030 = _1861;
        _2031 = _1860;
        _2032 = _1872;
        _2033 = _1871;
        _2034 = _1870;
        _2035 = _1882;
        _2036 = _1881;
        _2037 = _1880;
        _2038 = _1895;
        _2039 = _1894;
        _2040 = _1893;
        _2041 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0)));
        _2042 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)));
        _2043 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0)));
    }
    else
    {
        _2029 = _1723;
        _2030 = _1723;
        _2031 = _1723;
        _2032 = _1723;
        _2033 = _1723;
        _2034 = _1723;
        _2035 = _1723;
        _2036 = _1723;
        _2037 = _1723;
        _2038 = _1723;
        _2039 = _1723;
        _2040 = _1723;
        _2041 = 0.0;
        _2042 = 0.0;
        _2043 = 0.0;
    }
    float _2053 = (cbModelParam._m0[1u].x * (_2041 - _1735)) + _1735;
    float _2054 = (cbModelParam._m0[1u].x * (_2042 - _1736)) + _1736;
    float _2055 = (cbModelParam._m0[1u].x * (_2043 - _1737)) + _1737;
    float _2076 = fma(_2055, cbSceneParam._m0[89u].z, fma(_2054, cbSceneParam._m0[89u].y, _2053 * cbSceneParam._m0[89u].x));
    float _2079 = fma(_2055, cbSceneParam._m0[90u].z, fma(_2054, cbSceneParam._m0[90u].y, _2053 * cbSceneParam._m0[90u].x));
    float _2082 = fma(_2055, cbSceneParam._m0[91u].z, fma(_2054, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2053));
    float _2097 = _1357 * 0.5;
    float _2098 = _1358 * 0.5;
    float _2099 = _1359 * 0.5;
    float _2100 = dot(vec4(_2097, _2098, _2099, 1.0), vec4(_2031, _2034, _2037, _2040));
    float _2103 = dot(vec4(_2097, _2098, _2099, 1.0), vec4(_2030, _2033, _2036, _2039));
    float _2106 = dot(vec4(_2097, _2098, _2099, 1.0), vec4(_2029, _2032, _2035, _2038));
    float _2140;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2113 = dot(vec4(_2097, _2098, _2099, 1.0), vec4(_1722, _1726, _1729, _1732));
        float _2117 = dot(vec4(_2097, _2098, _2099, 1.0), vec4(_1724, _1727, _1730, _1733));
        float _2121 = dot(vec4(_2097, _2098, _2099, 1.0), vec4(_1725, _1728, _1731, _1734));
        float _2128 = dot(vec4(cbModelParam._m0[39u]), vec4(_2097, _2098, _2099, 1.0));
        _2140 = dot(vec3(isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0)), isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0)), isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2128) ? 0.0 : (isnan(0.0) ? _2128 : max(0.0, _2128))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2140 = 1.0;
    }
    float _2151;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2142 = dot(vec4(cbModelParam._m0[40u]), vec4(_2097, _2098, _2099, 1.0));
        _2151 = dot(vec3(isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0)), isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0)), isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2142) ? 0.0 : (isnan(0.0) ? _2142 : max(0.0, _2142))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2151 = 1.0;
    }
    float _2155 = (_2151 * cbModelParam._m0[1u].x) + (_2140 * (1.0 - cbModelParam._m0[1u].x));
    float _2165 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1187);
    float _2166 = isnan(_2165) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2165 : min(cbModelParam._m0[25u].z, _2165));
    float _2246;
    float _2248;
    float _2250;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2213 = fma(_1421, cbModelParam._m0[13u].z, fma(_1417, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1413)) + cbModelParam._m0[13u].w;
        float _2217 = fma(_1421, cbModelParam._m0[14u].z, fma(_1417, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1413)) + cbModelParam._m0[14u].w;
        float _2221 = fma(_1421, cbModelParam._m0[15u].z, fma(_1417, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1413)) + cbModelParam._m0[15u].w;
        float _2224 = fma(_1359, cbModelParam._m0[13u].z, fma(_1358, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1357));
        float _2227 = fma(_1359, cbModelParam._m0[14u].z, fma(_1358, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1357));
        float _2230 = fma(_1359, cbModelParam._m0[15u].z, fma(_1358, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1357));
        float _2258;
        if (_2224 > 0.0)
        {
            _2258 = abs((1.0 - _2213) / _2224);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2224 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2213 + 1.0) / _2224);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2258 = frontier_phi_14_12_ladder;
        }
        float _2429;
        if (_2227 > 0.0)
        {
            _2429 = abs((1.0 - _2217) / _2227);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2227 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2217 + 1.0) / _2227);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2429 = frontier_phi_23_19_ladder;
        }
        float _2724;
        if (_2230 > 0.0)
        {
            _2724 = abs((1.0 - _2221) / _2230);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2230 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2221 + 1.0) / _2230);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2724 = frontier_phi_35_30_ladder;
        }
        float _2726 = isnan(_2429) ? _2258 : (isnan(_2258) ? _2429 : min(_2258, _2429));
        float _2727 = isnan(_2724) ? _2726 : (isnan(_2726) ? _2724 : min(_2726, _2724));
        float _2731 = (_2727 * _2224) + _2213;
        float _2732 = (_2727 * _2227) + _2217;
        float _2733 = (_2727 * _2230) + _2221;
        float _2734 = _2727 * 9.9999997473787516355514526367188e-05;
        float _2736 = (-1.0) - _2734;
        float _2738 = _2734 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2733 > _2738) || ((_2733 < _2736) || ((_2732 > _2738) || ((_2732 < _2736) || ((_2731 < _2736) || (_2731 > _2738))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2878 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2733, cbModelParam._m0[9u].z, fma(_2732, cbModelParam._m0[9u].y, _2731 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2733, cbModelParam._m0[10u].z, fma(_2732, cbModelParam._m0[10u].y, _2731 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2733, cbModelParam._m0[11u].z, fma(_2732, cbModelParam._m0[11u].y, _2731 * cbModelParam._m0[11u].x))), _2166);
            frontier_phi_13_35_ladder = _2878.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2878.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2878.x * cbModelParam._m0[1u].y;
        }
        _2246 = frontier_phi_13_35_ladder_2;
        _2248 = frontier_phi_13_35_ladder_1;
        _2250 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2234 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1357, _1358, _1359), _2166);
        _2246 = _2234.x * cbModelParam._m0[1u].y;
        _2248 = _2234.y * cbModelParam._m0[1u].y;
        _2250 = _2234.z * cbModelParam._m0[1u].y;
    }
    float _2254 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1187);
    float _2255 = isnan(_2254) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2254 : min(cbModelParam._m0[25u].w, _2254));
    float _2344;
    float _2346;
    float _2348;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2308 = fma(_1421, cbModelParam._m0[21u].z, fma(_1417, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1413)) + cbModelParam._m0[21u].w;
        float _2312 = fma(_1421, cbModelParam._m0[22u].z, fma(_1417, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1413)) + cbModelParam._m0[22u].w;
        float _2316 = fma(_1421, cbModelParam._m0[23u].z, fma(_1417, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1413)) + cbModelParam._m0[23u].w;
        float _2319 = fma(_1359, cbModelParam._m0[21u].z, fma(_1358, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1357));
        float _2322 = fma(_1359, cbModelParam._m0[22u].z, fma(_1358, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1357));
        float _2325 = fma(_1359, cbModelParam._m0[23u].z, fma(_1358, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1357));
        float _2434;
        if (_2319 > 0.0)
        {
            _2434 = abs((1.0 - _2308) / _2319);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2319 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2308 + 1.0) / _2319);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2434 = frontier_phi_25_21_ladder;
        }
        float _2751;
        if (_2322 > 0.0)
        {
            _2751 = abs((1.0 - _2312) / _2322);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2322 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2312 + 1.0) / _2322);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2751 = frontier_phi_37_32_ladder;
        }
        float _3089;
        if (_2325 > 0.0)
        {
            _3089 = abs((1.0 - _2316) / _2325);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2325 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2316 + 1.0) / _2325);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _3089 = frontier_phi_47_44_ladder;
        }
        float _3091 = isnan(_2751) ? _2434 : (isnan(_2434) ? _2751 : min(_2434, _2751));
        float _3092 = isnan(_3089) ? _3091 : (isnan(_3091) ? _3089 : min(_3091, _3089));
        float _3096 = (_3092 * _2319) + _2308;
        float _3097 = (_3092 * _2322) + _2312;
        float _3098 = (_3092 * _2325) + _2316;
        float _3099 = _3092 * 9.9999997473787516355514526367188e-05;
        float _3100 = (-1.0) - _3099;
        float _3102 = _3099 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_3098 > _3102) || ((_3098 < _3100) || ((_3097 > _3102) || ((_3097 < _3100) || ((_3096 < _3100) || (_3096 > _3102))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3220 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3098, cbModelParam._m0[17u].z, fma(_3097, cbModelParam._m0[17u].y, _3096 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3098, cbModelParam._m0[18u].z, fma(_3097, cbModelParam._m0[18u].y, _3096 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3098, cbModelParam._m0[19u].z, fma(_3097, cbModelParam._m0[19u].y, _3096 * cbModelParam._m0[19u].x))), _2255);
            frontier_phi_22_47_ladder = _3220.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3220.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3220.x * cbModelParam._m0[1u].z;
        }
        _2344 = frontier_phi_22_47_ladder_2;
        _2346 = frontier_phi_22_47_ladder_1;
        _2348 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2328 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1357, _1358, _1359), _2255);
        _2344 = _2328.x * cbModelParam._m0[1u].z;
        _2346 = _2328.y * cbModelParam._m0[1u].z;
        _2348 = _2328.z * cbModelParam._m0[1u].z;
    }
    float _2361 = (((_1384 * _1333) + _1385) * _1349) * ((cbModelParam._m0[1u].w * (_2344 - _2246)) + _2246);
    float _2363 = (((_1384 * _1335) + _1385) * _1349) * ((cbModelParam._m0[1u].w * (_2346 - _2248)) + _2248);
    float _2365 = (((_1384 * _1336) + _1385) * _1349) * ((cbModelParam._m0[1u].w * (_2348 - _2250)) + _2250);
    float _2368 = fma(_2365, cbSceneParam._m0[89u].z, fma(_2363, cbSceneParam._m0[89u].y, _2361 * cbSceneParam._m0[89u].x));
    float _2371 = fma(_2365, cbSceneParam._m0[90u].z, fma(_2363, cbSceneParam._m0[90u].y, _2361 * cbSceneParam._m0[90u].x));
    float _2374 = fma(_2365, cbSceneParam._m0[91u].z, fma(_2363, cbSceneParam._m0[91u].y, _2361 * cbSceneParam._m0[91u].x));
    float _2408 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2412 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2416 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2420 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2421 = _2408 / _2420;
    float _2422 = _2412 / _2420;
    float _2423 = _2416 / _2420;
    float _2570;
    float _2571;
    float _2572;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2450 = ((uint(_2423 > cbSceneParam._m0[59u].y) + uint(_2423 > cbSceneParam._m0[59u].x)) + uint(_2423 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2451 = _2450 + 43u;
        uint _2459 = _2450 + 44u;
        uint _2467 = _2450 + 45u;
        uint _2475 = _2450 + 46u;
        float _2486 = fma(_2420, cbSceneParam._m0[_2451].w, fma(_2416, cbSceneParam._m0[_2451].z, fma(_2412, cbSceneParam._m0[_2451].y, _2408 * cbSceneParam._m0[_2451].x)));
        float _2490 = fma(_2420, cbSceneParam._m0[_2459].w, fma(_2416, cbSceneParam._m0[_2459].z, fma(_2412, cbSceneParam._m0[_2459].y, _2408 * cbSceneParam._m0[_2459].x)));
        float _2498 = fma(_2420, cbSceneParam._m0[_2475].w, fma(_2416, cbSceneParam._m0[_2475].z, fma(_2412, cbSceneParam._m0[_2475].y, _2408 * cbSceneParam._m0[_2475].x)));
        float _2503 = cbSceneParam._m0[33u].z * _2498;
        float _2505 = cbSceneParam._m0[33u].w * _2498;
        float _2508 = fma(_2420, cbSceneParam._m0[_2467].w, fma(_2416, cbSceneParam._m0[_2467].z, fma(_2412, cbSceneParam._m0[_2467].y, _2408 * cbSceneParam._m0[_2467].x))) / _2498;
        float _2556 = (cbSceneParam._m0[33u].x - sqrt(((_2422 * _2422) + (_2421 * _2421)) + (_2423 * _2423))) * cbSceneParam._m0[33u].y;
        float _4927 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2563 = (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2503 + _2486) / _2498, (_2505 + _2490) / _2498), _2508), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2505 + _2486) / _2498, (_2490 - _2503) / _2498), _2508), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2486 - _2503) / _2498, (_2490 - _2505) / _2498), _2508), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2486 - _2505) / _2498, (_2503 + _2490) / _2498), _2508), 0.0)).x), vec4(0.25)));
        _2570 = 1.0 - (_2563 * cbSceneParam._m0[34u].x);
        _2571 = 1.0 - (_2563 * cbSceneParam._m0[34u].y);
        _2572 = 1.0 - (_2563 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2570 = 1.0;
        _2571 = 1.0;
        _2572 = 1.0;
    }
    float _2636;
    float _2638;
    float _2640;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2624 = fma(_2420, cbSceneParam._m0[63u].w, fma(_2416, cbSceneParam._m0[63u].z, fma(_2412, cbSceneParam._m0[63u].y, _2408 * cbSceneParam._m0[63u].x)));
        float _2625 = fma(_2420, cbSceneParam._m0[60u].w, fma(_2416, cbSceneParam._m0[60u].z, fma(_2412, cbSceneParam._m0[60u].y, _2408 * cbSceneParam._m0[60u].x))) / _2624;
        float _2626 = fma(_2420, cbSceneParam._m0[61u].w, fma(_2416, cbSceneParam._m0[61u].z, fma(_2412, cbSceneParam._m0[61u].y, _2408 * cbSceneParam._m0[61u].x))) / _2624;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2625 >= cbSceneParam._m0[64u].x) && (_2626 >= cbSceneParam._m0[64u].y)) && (_2625 <= cbSceneParam._m0[64u].z)) && (_2626 <= cbSceneParam._m0[64u].w))
        {
            float _2764 = fma(_2420, cbSceneParam._m0[62u].w, fma(_2416, cbSceneParam._m0[62u].z, fma(_2412, cbSceneParam._m0[62u].y, _2408 * cbSceneParam._m0[62u].x))) / _2624;
            float _2768 = isnan(cbSceneParam._m0[41u].w) ? _2764 : (isnan(_2764) ? cbSceneParam._m0[41u].w : max(_2764, cbSceneParam._m0[41u].w));
            float _2811 = (cbSceneParam._m0[33u].x - sqrt(((_2422 * _2422) + (_2421 * _2421)) + (_2423 * _2423))) * cbSceneParam._m0[33u].y;
            float _4943 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
            float _2818 = (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2625, cbSceneParam._m0[33u].w + _2626), _2768), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2625, _2626 - cbSceneParam._m0[33u].z), _2768), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2625 - cbSceneParam._m0[33u].z, _2626 - cbSceneParam._m0[33u].w), _2768), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2625 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2626), _2768), 0.0)).x), vec4(0.25)));
            float _2822 = 1.0 - (_2818 * cbSceneParam._m0[34u].x);
            float _2823 = 1.0 - (_2818 * cbSceneParam._m0[34u].y);
            float _2824 = 1.0 - (_2818 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2824) ? _2572 : (isnan(_2572) ? _2824 : min(_2572, _2824));
            frontier_phi_34_33_ladder_1 = isnan(_2823) ? _2571 : (isnan(_2571) ? _2823 : min(_2571, _2823));
            frontier_phi_34_33_ladder_2 = isnan(_2822) ? _2570 : (isnan(_2570) ? _2822 : min(_2570, _2822));
        }
        else
        {
            frontier_phi_34_33_ladder = _2572;
            frontier_phi_34_33_ladder_1 = _2571;
            frontier_phi_34_33_ladder_2 = _2570;
        }
        _2636 = frontier_phi_34_33_ladder_2;
        _2638 = frontier_phi_34_33_ladder_1;
        _2640 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2636 = _2570;
        _2638 = _2571;
        _2640 = _2572;
    }
    uvec4 _2645 = floatBitsToUint(cbInstanceData._m0[_301 + 5u]);
    uint _2647 = _2645.x * 14u;
    uint _2648 = _2647 + 13u;
    float _2655 = _1349 + (-1.0);
    float _2660 = (cbLight._m0[_2648].x * _2655) + 1.0;
    float _2661 = (cbLight._m0[_2648].y * _2655) + 1.0;
    float _2662 = (cbLight._m0[_2648].z * _2655) + 1.0;
    float _2663 = (cbLight._m0[_2648].w * _2655) + 1.0;
    uint _2664 = _2647 + 5u;
    float _2670 = isnan(1.0) ? _2661 : (isnan(_2661) ? 1.0 : min(_2661, 1.0));
    uint _2674 = _2647 + 4u;
    float _2683 = isnan(1.0) ? _2660 : (isnan(_2660) ? 1.0 : min(_2660, 1.0));
    uint _2687 = _2647 | 1u;
    float _2698 = dot(vec3(cbLight._m0[_2647].xyz), vec3(_1184, _1185, _1186));
    float _2701 = dot(vec3(cbLight._m0[_2687].xyz), vec3(_1184, _1185, _1186));
    float _4979 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _4990 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2706 = (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * 0.3183098733425140380859375;
    float _2708 = (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * 0.3183098733425140380859375;
    float _2715 = ((cbLight._m0[_2664].x * _2670) * _2708) + (((cbLight._m0[_2674].x * _2636) * _2683) * _2706);
    float _2716 = ((_2670 * cbLight._m0[_2664].y) * _2708) + (((cbLight._m0[_2674].y * _2638) * _2683) * _2706);
    float _2717 = ((_2670 * cbLight._m0[_2664].z) * _2708) + (((cbLight._m0[_2674].z * _2640) * _2683) * _2706);
    uvec4 _2721 = floatBitsToUint(cbLight._m0[_2647 + 12u]);
    bool _2723 = _2721.x == 0u;
    float _2825;
    float _2827;
    float _2829;
    if (_2723)
    {
        _2825 = _2715;
        _2827 = _2716;
        _2829 = _2717;
    }
    else
    {
        uint _2833 = _2647 + 6u;
        float _2849 = (dot(vec3(cbLight._m0[_2647 + 2u].xyz), vec3(_1184, _1185, _1186)) * 0.5) + 0.5;
        float _2850 = _2849 * _2849;
        float _5001 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2851 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
        float _2852 = isnan(1.0) ? _2662 : (isnan(_2662) ? 1.0 : min(_2662, 1.0));
        _2825 = (((cbLight._m0[_2833].x * 0.3183098733425140380859375) * _2851) * _2852) + _2715;
        _2827 = (((cbLight._m0[_2833].y * 0.3183098733425140380859375) * _2851) * _2852) + _2716;
        _2829 = (((cbLight._m0[_2833].z * 0.3183098733425140380859375) * _2851) * _2852) + _2717;
    }
    bool _2832 = _2721.y == 0u;
    float _2887;
    float _2889;
    float _2891;
    if (_2832)
    {
        _2887 = _2825;
        _2889 = _2827;
        _2891 = _2829;
    }
    else
    {
        uint _3060 = _2647 + 7u;
        float _3076 = (dot(vec3(cbLight._m0[_2647 + 3u].xyz), vec3(_1184, _1185, _1186)) * 0.5) + 0.5;
        float _3077 = _3076 * _3076;
        float _5017 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
        float _3078 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
        float _3079 = isnan(1.0) ? _2663 : (isnan(_2663) ? 1.0 : min(_2663, 1.0));
        _2887 = (((cbLight._m0[_3060].x * 0.3183098733425140380859375) * _3078) * _3079) + _2825;
        _2889 = (((cbLight._m0[_3060].y * 0.3183098733425140380859375) * _3078) * _3079) + _2827;
        _2891 = (((cbLight._m0[_3060].z * 0.3183098733425140380859375) * _3078) * _3079) + _2829;
    }
    uint _2894 = _2647 + 8u;
    float _2907 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2647].w)) * _1187) * 0.949999988079071044921875);
    float _2908 = _2907 * _2907;
    float _2909 = cbLight._m0[_2647].x + _1263;
    float _2910 = cbLight._m0[_2647].y + _1264;
    float _2911 = cbLight._m0[_2647].z + _1265;
    float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
    float _2916 = _2915 * _2909;
    float _2917 = _2915 * _2910;
    float _2918 = _2915 * _2911;
    float _2919 = dot(vec3(_1184, _1185, _1186), vec3(cbLight._m0[_2647].xyz));
    float _5033 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
    float _2922 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
    float _5044 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
    float _2923 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
    float _2924 = dot(vec3(_1184, _1185, _1186), vec3(_2916, _2917, _2918));
    float _5055 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
    float _2927 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
    float _2928 = dot(vec3(cbLight._m0[_2647].xyz), vec3(_2916, _2917, _2918));
    float _5066 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
    float _2932 = _2908 * _2908;
    float _2936 = ((_2927 * _2927) * (_2932 + (-1.0))) + 1.0;
    float _2944 = exp2(log2(1.0 - (isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0)))) * 5.0);
    float _2945 = 0.959999978542327880859375 - _1330;
    float _2947 = 0.959999978542327880859375 - _1331;
    float _2948 = 0.959999978542327880859375 - _1332;
    float _2955 = 1.0 - _2908;
    float _2966 = (0.5 / (((_2923 * ((_2922 * _2955) + _2908)) + 9.9999999392252902907785028219223e-09) + (((_2923 * _2955) + _2908) * _2922))) * _2922;
    float _5077 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
    float _2968 = (isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0))) * (_2932 / ((_2936 * _2936) * 3.141590118408203125));
    uint _2982 = _2647 + 9u;
    float _2993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2687].w)) * _1187) * 0.949999988079071044921875);
    float _2994 = _2993 * _2993;
    float _2995 = cbLight._m0[_2687].x + _1263;
    float _2996 = cbLight._m0[_2687].y + _1264;
    float _2997 = cbLight._m0[_2687].z + _1265;
    float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
    float _3002 = _3001 * _2995;
    float _3003 = _3001 * _2996;
    float _3004 = _3001 * _2997;
    float _3005 = dot(vec3(_1184, _1185, _1186), vec3(cbLight._m0[_2687].xyz));
    float _5088 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
    float _3008 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
    float _3009 = dot(vec3(_1184, _1185, _1186), vec3(_3002, _3003, _3004));
    float _5099 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
    float _3012 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
    float _3013 = dot(vec3(cbLight._m0[_2687].xyz), vec3(_3002, _3003, _3004));
    float _5110 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
    float _3017 = _2994 * _2994;
    float _3021 = ((_3012 * _3012) * (_3017 + (-1.0))) + 1.0;
    float _3028 = exp2(log2(1.0 - (isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0)))) * 5.0);
    float _3035 = 1.0 - _2994;
    float _3045 = (0.5 / (((_2923 * ((_3008 * _3035) + _2994)) + 9.9999999392252902907785028219223e-09) + (((_2923 * _3035) + _2994) * _3008))) * _3008;
    float _5121 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
    float _3047 = (isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0))) * (_3017 / ((_3021 * _3021) * 3.141590118408203125));
    float _3057 = (((((_3028 * _2945) + _1333) * cbLight._m0[_2982].x) * _3047) * _2670) + ((((cbLight._m0[_2894].x * _2636) * ((_2944 * _2945) + _1333)) * _2968) * _2683);
    float _3058 = (((((_3028 * _2947) + _1335) * cbLight._m0[_2982].y) * _3047) * _2670) + ((((cbLight._m0[_2894].y * _2638) * ((_2944 * _2947) + _1335)) * _2968) * _2683);
    float _3059 = (((((_3028 * _2948) + _1336) * cbLight._m0[_2982].z) * _3047) * _2670) + ((((cbLight._m0[_2894].z * _2640) * ((_2944 * _2948) + _1336)) * _2968) * _2683);
    float _3115;
    float _3117;
    float _3119;
    if (_2723)
    {
        _3115 = _3057;
        _3117 = _3058;
        _3119 = _3059;
    }
    else
    {
        uint _3121 = _2647 + 2u;
        uint _3125 = _2647 + 10u;
        float _3139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3121].w)) * _1187) * 0.949999988079071044921875);
        float _3140 = _3139 * _3139;
        float _3141 = cbLight._m0[_3121].x + _1263;
        float _3142 = cbLight._m0[_3121].y + _1264;
        float _3143 = cbLight._m0[_3121].z + _1265;
        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
        float _3148 = _3147 * _3141;
        float _3149 = _3147 * _3142;
        float _3150 = _3147 * _3143;
        float _3151 = dot(vec3(_1184, _1185, _1186), vec3(cbLight._m0[_3121].xyz));
        float _5132 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
        float _3154 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
        float _3155 = dot(vec3(_1184, _1185, _1186), vec3(_3148, _3149, _3150));
        float _5143 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
        float _3158 = isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0));
        float _3159 = dot(vec3(cbLight._m0[_3121].xyz), vec3(_3148, _3149, _3150));
        float _5154 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
        float _3163 = _3140 * _3140;
        float _3167 = ((_3158 * _3158) * (_3163 + (-1.0))) + 1.0;
        float _3174 = exp2(log2(1.0 - (isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0)))) * 5.0);
        float _3181 = 1.0 - _3140;
        float _3191 = (0.5 / (((_2923 * ((_3154 * _3181) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_2923 * _3181) + _3140) * _3154))) * _3154;
        float _5165 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
        float _3193 = (isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0))) * (_3163 / ((_3167 * _3167) * 3.141590118408203125));
        float _3194 = isnan(1.0) ? _2662 : (isnan(_2662) ? 1.0 : min(_2662, 1.0));
        _3115 = (((((_3174 * _2945) + _1333) * cbLight._m0[_3125].x) * _3193) * _3194) + _3057;
        _3117 = (((((_3174 * _2947) + _1335) * cbLight._m0[_3125].y) * _3193) * _3194) + _3058;
        _3119 = (((((_3174 * _2948) + _1336) * cbLight._m0[_3125].z) * _3193) * _3194) + _3059;
    }
    float _3225;
    float _3227;
    float _3229;
    if (_2832)
    {
        _3225 = _3115;
        _3227 = _3117;
        _3229 = _3119;
    }
    else
    {
        uint _3236 = _2647 + 3u;
        uint _3240 = _2647 + 11u;
        float _3254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3236].w)) * _1187) * 0.949999988079071044921875);
        float _3255 = _3254 * _3254;
        float _3256 = cbLight._m0[_3236].x + _1263;
        float _3257 = cbLight._m0[_3236].y + _1264;
        float _3258 = cbLight._m0[_3236].z + _1265;
        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
        float _3263 = _3262 * _3256;
        float _3264 = _3262 * _3257;
        float _3265 = _3262 * _3258;
        float _3266 = dot(vec3(_1184, _1185, _1186), vec3(cbLight._m0[_3236].xyz));
        float _5181 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
        float _3269 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
        float _3270 = dot(vec3(_1184, _1185, _1186), vec3(_3263, _3264, _3265));
        float _5192 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
        float _3273 = isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0));
        float _3274 = dot(vec3(cbLight._m0[_3236].xyz), vec3(_3263, _3264, _3265));
        float _5203 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
        float _3278 = _3255 * _3255;
        float _3282 = ((_3273 * _3273) * (_3278 + (-1.0))) + 1.0;
        float _3289 = exp2(log2(1.0 - (isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0)))) * 5.0);
        float _3296 = 1.0 - _3255;
        float _3306 = (0.5 / (((_2923 * ((_3269 * _3296) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_2923 * _3296) + _3255) * _3269))) * _3269;
        float _5214 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
        float _3308 = (isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0))) * (_3278 / ((_3282 * _3282) * 3.141590118408203125));
        float _3309 = isnan(1.0) ? _2663 : (isnan(_2663) ? 1.0 : min(_2663, 1.0));
        _3225 = (((((_3289 * _2945) + _1333) * cbLight._m0[_3240].x) * _3308) * _3309) + _3115;
        _3227 = (((((_3289 * _2947) + _1335) * cbLight._m0[_3240].y) * _3308) * _3309) + _3117;
        _3229 = (((((_3289 * _2948) + _1336) * cbLight._m0[_3240].z) * _3308) * _3309) + _3119;
    }
    float _3375;
    float _3377;
    float _3379;
    float _3381;
    float _3383;
    float _3385;
    if (_2645.y == 0u)
    {
        uvec4 _3330 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3331 = _3330.x;
        uint _3342 = uint((float(_3330.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1272) / _3331))) + floor(float(uint(cbSceneParam._m0[85u].x * _1271) / _3331)));
        float _3352 = (log2(_2423 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3353 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
        uint _3356 = uint(isnan(14.0) ? _3353 : (isnan(_3353) ? 14.0 : min(_3353, 14.0)));
        uvec4 _3361 = texelFetch(g_lightClusterGridBuffer, int(((_3356 << 2u) + (_3342 << 6u)) >> 2u));
        uint _3362 = _3361.x;
        uint _3363 = _3330.z;
        float _3442;
        float _3444;
        float _3446;
        float _3448;
        float _3450;
        float _3452;
        if (((((1u << ((_3363 >> 4u) & 15u)) + 4294967295u) & _3362) == 0u) || ((_3363 & 240u) == 0u))
        {
            _3442 = 0.0;
            _3444 = 0.0;
            _3446 = 0.0;
            _3448 = 0.0;
            _3450 = 0.0;
            _3452 = 0.0;
        }
        else
        {
            float _3443;
            float _3445;
            float _3447;
            float _3449;
            float _3451;
            float _3453;
            float _3586 = 0.0;
            float _3587 = 0.0;
            float _3588 = 0.0;
            float _3589 = 0.0;
            float _3590 = 0.0;
            float _3591 = 0.0;
            uint _3592 = 0u;
            uint _3601;
            bool _3602;
            for (;;)
            {
                _3601 = texelFetch(g_lightClassification, int((((_3356 << 5u) + (_3342 << 9u)) + (_3592 << 2u)) >> 2u)).x;
                _3602 = _3601 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3602)
                {
                    frontier_phi_66_pred = _3591;
                    frontier_phi_66_pred_1 = _3590;
                    frontier_phi_66_pred_2 = _3589;
                    frontier_phi_66_pred_3 = _3588;
                    frontier_phi_66_pred_4 = _3587;
                    frontier_phi_66_pred_5 = _3586;
                }
                else
                {
                    float _3710;
                    float _3711;
                    float _3712;
                    float _3713;
                    float _3714;
                    float _3715;
                    uint _3716;
                    _3710 = _3586;
                    _3711 = _3587;
                    _3712 = _3588;
                    _3713 = _3589;
                    _3714 = _3590;
                    _3715 = _3591;
                    _3716 = _3601;
                    float _3642;
                    float _3643;
                    float _3644;
                    float _3645;
                    float _3646;
                    float _3647;
                    for (;;)
                    {
                        uint _3720 = uint(findLSB(_3716)) + (_3592 << 5u);
                        uint _3717 = (_3716 + 4294967295u) & _3716;
                        uint _3722 = _3720 * 48u;
                        vec4 _3736 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3722)).x, texelFetch(g_PointLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3722 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3722 + 3u)).x));
                        uint _3742 = (_3720 * 48u) + 4u;
                        vec4 _3755 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3742)).x, texelFetch(g_PointLightRenderingBuffer, int(_3742 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3742 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3742 + 3u)).x));
                        uint _3761 = (_3720 * 48u) + 8u;
                        vec3 _3772 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3761)).x, texelFetch(g_PointLightRenderingBuffer, int(_3761 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3761 + 2u)).x));
                        float _3776 = _3736.x - _2421;
                        float _3777 = _3736.y - _2422;
                        float _3778 = _3736.z - _2423;
                        float _3779 = dot(vec3(_3776, _3777, _3778), vec3(_3776, _3777, _3778));
                        float _3782 = inversesqrt(_3779);
                        float _3783 = _3782 * _3776;
                        float _3784 = _3782 * _3777;
                        float _3785 = _3782 * _3778;
                        float _3786 = dot(vec3(_1290, _1293, _1296), vec3(_3783, _3784, _3785));
                        float _3791 = 1.0 - (_3779 * _3736.w);
                        float _5240 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                        float _3792 = isnan(1.0) ? _5240 : (isnan(_5240) ? 1.0 : min(_5240, 1.0));
                        float _3793 = sqrt(_3779) * _3755.w;
                        float _3796 = 1.39999997615814208984375 / (_3793 + 1.39999997615814208984375);
                        float _3797 = _3796 * _3796;
                        float _3800 = ((1.0 - _3797) * _3786) + _3797;
                        float _3803 = _3793 * _3793;
                        float _3807 = ((isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0))) * _3792) / ((_3803 * 0.699999988079071044921875) + 1.0);
                        float _3811 = (-0.0) - _2421;
                        float _3812 = (-0.0) - _2422;
                        float _3813 = (-0.0) - _2423;
                        float _3817 = inversesqrt(dot(vec3(_3811, _3812, _3813), vec3(_3811, _3812, _3813)));
                        float _3818 = _3817 * _3811;
                        float _3819 = _3817 * _3812;
                        float _3820 = _3817 * _3813;
                        float _3827 = exp2(log2(1.0 / ((_3803 * 3.5) + 5.0)) * 0.25);
                        float _3828 = 1.0 - _1365;
                        float _3835 = sqrt(1.0 - ((1.0 - (_3828 * _3828)) * (1.0 - (_3827 * _3827))));
                        float _3836 = _3835 * _3835;
                        float _3837 = _3836 * _3836;
                        float _3838 = _3818 + _3783;
                        float _3839 = _3819 + _3784;
                        float _3840 = _3820 + _3785;
                        float _3844 = inversesqrt(dot(vec3(_3838, _3839, _3840), vec3(_3838, _3839, _3840)));
                        float _3848 = dot(vec3(_1290, _1293, _1296), vec3(_3818, _3819, _3820));
                        float _5256 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                        float _3851 = isnan(1.0) ? _5256 : (isnan(_5256) ? 1.0 : min(_5256, 1.0));
                        float _3852 = dot(vec3(_1290, _1293, _1296), vec3(_3844 * _3838, _3844 * _3839, _3844 * _3840));
                        float _5267 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                        float _3855 = isnan(1.0) ? _5267 : (isnan(_5267) ? 1.0 : min(_5267, 1.0));
                        float _3859 = ((_3855 * _3855) * (_3837 + (-1.0))) + 1.0;
                        float _3860 = _3796 * _3836;
                        float _3861 = _3860 * _3860;
                        float _3864 = ((1.0 - _3861) * _3786) + _3861;
                        float _5278 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                        float _3865 = isnan(1.0) ? _5278 : (isnan(_5278) ? 1.0 : min(_5278, 1.0));
                        float _3866 = 1.0 - _3836;
                        float _3876 = (0.5 / (((_3865 * ((_3851 * _3866) + _3836)) + 9.9999999392252902907785028219223e-09) + (((_3865 * _3866) + _3836) * _3851))) * _3865;
                        float _5289 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                        float _3887 = (((_3837 * 3.1415927410125732421875) * (isnan(1.0) ? _5289 : (isnan(_5289) ? 1.0 : min(_5289, 1.0)))) / ((_3859 * _3859) * ((_3803 * 2.1991131305694580078125) + 3.141590118408203125))) * _3792;
                        _3645 = (_3807 * _3755.x) + _3713;
                        _3646 = (_3807 * _3755.y) + _3714;
                        _3647 = (_3807 * _3755.z) + _3715;
                        _3642 = (_3887 * _3772.x) + _3710;
                        _3643 = (_3887 * _3772.y) + _3711;
                        _3644 = (_3887 * _3772.z) + _3712;
                        if (_3717 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3710 = _3642;
                            _3711 = _3643;
                            _3712 = _3644;
                            _3713 = _3645;
                            _3714 = _3646;
                            _3715 = _3647;
                            _3716 = _3717;
                        }
                    }
                    frontier_phi_66_pred = _3647;
                    frontier_phi_66_pred_1 = _3646;
                    frontier_phi_66_pred_2 = _3645;
                    frontier_phi_66_pred_3 = _3644;
                    frontier_phi_66_pred_4 = _3643;
                    frontier_phi_66_pred_5 = _3642;
                }
                _3453 = frontier_phi_66_pred;
                _3451 = frontier_phi_66_pred_1;
                _3449 = frontier_phi_66_pred_2;
                _3447 = frontier_phi_66_pred_3;
                _3445 = frontier_phi_66_pred_4;
                _3443 = frontier_phi_66_pred_5;
                uint _3593 = _3592 + 1u;
                if (_3593 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3586 = _3443;
                    _3587 = _3445;
                    _3588 = _3447;
                    _3589 = _3449;
                    _3590 = _3451;
                    _3591 = _3453;
                    _3592 = _3593;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3442 = _3443;
            _3444 = _3445;
            _3446 = _3447;
            _3448 = _3449;
            _3450 = _3451;
            _3452 = _3453;
        }
        uvec4 _3456 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3457 = _3456.z;
        uint _3459 = (_3457 >> 8u) & 15u;
        float _3554;
        float _3556;
        float _3558;
        float _3560;
        float _3562;
        float _3564;
        if (((4294967295u << _3459) & _3362) == 0u)
        {
            _3554 = _3442;
            _3556 = _3444;
            _3558 = _3446;
            _3560 = _3448;
            _3562 = _3450;
            _3564 = _3452;
        }
        else
        {
            float _3579 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
            float _3580 = _3579 * _2421;
            float _3581 = _3579 * _2422;
            float _3582 = _3579 * _2423;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3459 < ((_3457 >> 12u) & 15u))
            {
                float _3555;
                float _3557;
                float _3559;
                float _3561;
                float _3563;
                float _3565;
                float _3693 = _3442;
                float _3694 = _3444;
                float _3695 = _3446;
                float _3696 = _3448;
                float _3697 = _3450;
                float _3698 = _3452;
                uint _3699 = _3459;
                uint _3708;
                bool _3709;
                for (;;)
                {
                    _3708 = texelFetch(g_lightClassification, int((((_3356 << 5u) + (_3342 << 9u)) + (_3699 << 2u)) >> 2u)).x;
                    _3709 = _3708 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3709)
                    {
                        frontier_phi_72_pred = _3698;
                        frontier_phi_72_pred_1 = _3697;
                        frontier_phi_72_pred_2 = _3696;
                        frontier_phi_72_pred_3 = _3695;
                        frontier_phi_72_pred_4 = _3694;
                        frontier_phi_72_pred_5 = _3693;
                    }
                    else
                    {
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _4185;
                        float _4186;
                        float _4187;
                        float _4188;
                        float _4189;
                        float _4190;
                        float _3905 = _3693;
                        float _3906 = _3694;
                        float _3907 = _3695;
                        float _3908 = _3696;
                        float _3909 = _3697;
                        float _3910 = _3698;
                        uint _3911 = _3708;
                        uint _3912;
                        vec4 _3937;
                        float _3938;
                        vec4 _3953;
                        vec3 _3965;
                        vec4 _3980;
                        vec4 _3995;
                        float _4041;
                        bool _4042;
                        for (;;)
                        {
                            uint _3922 = ((_3699 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3911));
                            _3912 = (_3911 + 4294967295u) & _3911;
                            uint _3924 = _3922 * 40u;
                            _3937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3924 + 3u)).x));
                            _3938 = _3937.w;
                            uint _3940 = (_3922 * 40u) + 4u;
                            _3953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3940 + 3u)).x));
                            uint _3955 = (_3922 * 40u) + 8u;
                            _3965 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3955 + 2u)).x));
                            uint _3967 = (_3922 * 40u) + 16u;
                            _3980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3967 + 3u)).x));
                            uint _3982 = (_3922 * 40u) + 20u;
                            _3995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3982 + 3u)).x));
                            uint _3997 = (_3922 * 40u) + 24u;
                            vec4 _4010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3997 + 3u)).x));
                            uint _4016 = (_3922 * 40u) + 28u;
                            vec4 _4029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4016 + 3u)).x));
                            _4041 = fma(_2423, _4029.z, fma(_2422, _4029.y, _4029.x * _2421)) + _4029.w;
                            _4042 = !((fma(_2423, _4010.z, fma(_2422, _4010.y, _4010.x * _2421)) + _4010.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_4042)
                            {
                                float _4069 = _3937.x - _2421;
                                float _4070 = _3937.y - _2422;
                                float _4071 = _3937.z - _2423;
                                float _4072 = dot(vec3(_4069, _4070, _4071), vec3(_4069, _4070, _4071));
                                float _4075 = inversesqrt(_4072);
                                float _4076 = _4075 * _4069;
                                float _4077 = _4075 * _4070;
                                float _4078 = _4075 * _4071;
                                float _4082 = 1.0 - (_4072 / (_3938 * _3938));
                                float _5300 = isnan(0.0) ? _4082 : (isnan(_4082) ? 0.0 : max(_4082, 0.0));
                                float _4083 = isnan(1.0) ? _5300 : (isnan(_5300) ? 1.0 : min(_5300, 1.0));
                                float _4087 = sqrt(_4072) * _3953.w;
                                float _4089 = 1.39999997615814208984375 / (_4087 + 1.39999997615814208984375);
                                float _4090 = _4089 * _4089;
                                float _4093 = ((1.0 - _4090) * dot(vec3(_4076, _4077, _4078), vec3(_1290, _1293, _1296))) + _4090;
                                float _4096 = _4087 * _4087;
                                float _4100 = (fma(_2423, _3980.z, fma(_2422, _3980.y, _3980.x * _2421)) + _3980.w) / _4041;
                                float _4101 = (fma(_2423, _3995.z, fma(_2422, _3995.y, _3995.x * _2421)) + _3995.w) / _4041;
                                float _4105 = 1.0 - dot(vec2(_4100, _4101), vec2(_4100, _4101));
                                float _5316 = isnan(0.0) ? _4105 : (isnan(_4105) ? 0.0 : max(_4105, 0.0));
                                float _4106 = isnan(1.0) ? _5316 : (isnan(_5316) ? 1.0 : min(_5316, 1.0));
                                float _4107 = _4106 * (((isnan(0.0) ? _4093 : (isnan(_4093) ? 0.0 : max(_4093, 0.0))) * _4083) / ((_4096 * 0.699999988079071044921875) + 1.0));
                                float _4119 = exp2(log2(1.0 / ((_4096 * 3.5) + 5.0)) * 0.25);
                                float _4120 = 1.0 - _1365;
                                float _4127 = sqrt(1.0 - ((1.0 - (_4120 * _4120)) * (1.0 - (_4119 * _4119))));
                                float _4128 = _4127 * _4127;
                                float _4129 = _4128 * _4128;
                                float _4130 = _4076 - _3580;
                                float _4131 = _4077 - _3581;
                                float _4132 = _4078 - _3582;
                                float _4136 = inversesqrt(dot(vec3(_4130, _4131, _4132), vec3(_4130, _4131, _4132)));
                                float _4140 = dot(vec3(_1290, _1293, _1296), vec3((-0.0) - _3580, (-0.0) - _3581, (-0.0) - _3582));
                                float _5327 = isnan(0.0) ? _4140 : (isnan(_4140) ? 0.0 : max(_4140, 0.0));
                                float _4143 = isnan(1.0) ? _5327 : (isnan(_5327) ? 1.0 : min(_5327, 1.0));
                                float _4144 = dot(vec3(_1290, _1293, _1296), vec3(_4136 * _4130, _4136 * _4131, _4136 * _4132));
                                float _5338 = isnan(0.0) ? _4144 : (isnan(_4144) ? 0.0 : max(_4144, 0.0));
                                float _4147 = isnan(1.0) ? _5338 : (isnan(_5338) ? 1.0 : min(_5338, 1.0));
                                float _4151 = ((_4147 * _4147) * (_4129 + (-1.0))) + 1.0;
                                float _4152 = _4089 * _4128;
                                float _4153 = _4152 * _4152;
                                float _4159 = ((1.0 - _4153) * dot(vec3(_1290, _1293, _1296), vec3(_4076, _4077, _4078))) + _4153;
                                float _5349 = isnan(0.0) ? _4159 : (isnan(_4159) ? 0.0 : max(_4159, 0.0));
                                float _4160 = isnan(1.0) ? _5349 : (isnan(_5349) ? 1.0 : min(_5349, 1.0));
                                float _4161 = 1.0 - _4128;
                                float _4171 = (0.5 / (((_4160 * ((_4143 * _4161) + _4128)) + 9.9999999392252902907785028219223e-09) + (((_4160 * _4161) + _4128) * _4143))) * _4160;
                                float _5360 = isnan(0.0) ? _4171 : (isnan(_4171) ? 0.0 : max(_4171, 0.0));
                                float _4181 = (_4106 * _4083) * (((_4129 * 3.1415927410125732421875) * (isnan(1.0) ? _5360 : (isnan(_5360) ? 1.0 : min(_5360, 1.0)))) / ((_4151 * _4151) * ((_4096 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _4107 * _3953.y;
                                frontier_phi_78_pred_1 = _4107 * _3953.x;
                                frontier_phi_78_pred_2 = _4181 * _3965.z;
                                frontier_phi_78_pred_3 = _4181 * _3965.y;
                                frontier_phi_78_pred_4 = _4181 * _3965.x;
                                frontier_phi_78_pred_5 = _4107 * _3953.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4189 = frontier_phi_78_pred;
                            _4188 = frontier_phi_78_pred_1;
                            _4187 = frontier_phi_78_pred_2;
                            _4186 = frontier_phi_78_pred_3;
                            _4185 = frontier_phi_78_pred_4;
                            _4190 = frontier_phi_78_pred_5;
                            _3895 = _4188 + _3908;
                            _3896 = _4189 + _3909;
                            _3897 = _4190 + _3910;
                            _3892 = _4185 + _3905;
                            _3893 = _4186 + _3906;
                            _3894 = _4187 + _3907;
                            if (_3912 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3905 = _3892;
                                _3906 = _3893;
                                _3907 = _3894;
                                _3908 = _3895;
                                _3909 = _3896;
                                _3910 = _3897;
                                _3911 = _3912;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3897;
                        frontier_phi_72_pred_1 = _3896;
                        frontier_phi_72_pred_2 = _3895;
                        frontier_phi_72_pred_3 = _3894;
                        frontier_phi_72_pred_4 = _3893;
                        frontier_phi_72_pred_5 = _3892;
                    }
                    _3565 = frontier_phi_72_pred;
                    _3563 = frontier_phi_72_pred_1;
                    _3561 = frontier_phi_72_pred_2;
                    _3559 = frontier_phi_72_pred_3;
                    _3557 = frontier_phi_72_pred_4;
                    _3555 = frontier_phi_72_pred_5;
                    uint _3700 = _3699 + 1u;
                    if (_3700 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3693 = _3555;
                        _3694 = _3557;
                        _3695 = _3559;
                        _3696 = _3561;
                        _3697 = _3563;
                        _3698 = _3565;
                        _3699 = _3700;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3565;
                frontier_phi_60_61_ladder_1 = _3563;
                frontier_phi_60_61_ladder_2 = _3559;
                frontier_phi_60_61_ladder_3 = _3557;
                frontier_phi_60_61_ladder_4 = _3555;
                frontier_phi_60_61_ladder_5 = _3561;
            }
            else
            {
                frontier_phi_60_61_ladder = _3452;
                frontier_phi_60_61_ladder_1 = _3450;
                frontier_phi_60_61_ladder_2 = _3446;
                frontier_phi_60_61_ladder_3 = _3444;
                frontier_phi_60_61_ladder_4 = _3442;
                frontier_phi_60_61_ladder_5 = _3448;
            }
            _3554 = frontier_phi_60_61_ladder_4;
            _3556 = frontier_phi_60_61_ladder_3;
            _3558 = frontier_phi_60_61_ladder_2;
            _3560 = frontier_phi_60_61_ladder_5;
            _3562 = frontier_phi_60_61_ladder_1;
            _3564 = frontier_phi_60_61_ladder;
        }
        float _3569 = isnan(1.0) ? _1349 : (isnan(_1349) ? 1.0 : min(_1349, 1.0));
        _3375 = (_3569 * _3560) + _2887;
        _3377 = (_3569 * _3562) + _2889;
        _3379 = (_3569 * _3564) + _2891;
        _3381 = ((_3554 * _1333) * _3569) + _3225;
        _3383 = ((_3556 * _1335) * _3569) + _3227;
        _3385 = ((_3558 * _1336) * _3569) + _3229;
    }
    else
    {
        _3375 = _2887;
        _3377 = _2889;
        _3379 = _2891;
        _3381 = _3225;
        _3383 = _3227;
        _3385 = _3229;
    }
    float _5376 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
    float _5387 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
    float _5398 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
    uint _3405 = _301 + 6u;
    float _3413 = _1271 / cbSceneParam._m0[86u].x;
    float _3414 = _1272 / cbSceneParam._m0[86u].y;
    vec4 _3428 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3413, _3414, (log2((isnan(cbSceneParam._m0[77u].w) ? _1206 : (isnan(_1206) ? cbSceneParam._m0[77u].w : min(_1206, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3430 = _3428.x;
    float _3431 = _3428.y;
    float _3432 = _3428.z;
    float _3433 = _3428.w;
    float _3504;
    float _3506;
    float _3508;
    float _3510;
    if (_1206 > cbSceneParam._m0[78u].w)
    {
        float _3467 = isnan(_1206) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1206 : min(cbSceneParam._m0[80u].w, _1206));
        float _3468 = _3467 / _1206;
        float _3479 = _3468 * _1256;
        float _3480 = _1257 * _3468;
        float _3481 = (-0.0) - _3480;
        float _3482 = _3468 * _1258;
        float _3484 = (cbSceneParam._m0[77u].w * _3481) / _3467;
        float _3485 = _3484 + cbSceneParam._m0[79u].w;
        float _3486 = cbSceneParam._m0[79u].w - _3480;
        float _3492 = sqrt(((_3479 * _3479) + (_3480 * _3480)) + (_3482 * _3482));
        float _3495 = (1.0 - (cbSceneParam._m0[77u].w / _3467)) * _3492;
        float _3500 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3502 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3655;
        if (abs((_3481 - _3484) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3655 = ((((_3485 > 0.0) ? exp2(_3500 * _3485) : (2.0 - exp2(_3502 * _3485))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3495;
        }
        else
        {
            float _3615 = 1.0 / cbSceneParam._m0[80u].x;
            float _3616 = isnan(_3486) ? _3485 : (isnan(_3485) ? _3486 : max(_3485, _3486));
            float _3617 = isnan(_3486) ? _3485 : (isnan(_3485) ? _3486 : min(_3485, _3486));
            float _3626 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : min(_3616, 0.0));
            float _3627 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : min(_3617, 0.0));
            _3655 = ((abs(_3492 / _3481) * cbSceneParam._m0[80u].y) * ((((_3626 - _3627) * 2.0) - ((exp2(_3500 * (isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0)))) - exp2(_3500 * (isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0))))) * _3615)) - ((exp2(_3502 * _3626) - exp2(_3502 * _3627)) * _3615))) + (_3495 * cbSceneParam._m0[80u].z);
        }
        vec4 _3657 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3413, _3414, 1.0), 0.0);
        float _3666 = exp2((_3655 * (-1.44269502162933349609375)) * (1.0 - _3657.w));
        float _3667 = log2(_3666);
        float _3683 = log2(_3433);
        _3504 = (exp2(_3683 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3667 * cbSceneParam._m0[78u].x)) * _3657.x) / cbSceneParam._m0[78u].x)) + _3430;
        _3506 = (exp2(_3683 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3667 * cbSceneParam._m0[78u].y)) * _3657.y) / cbSceneParam._m0[78u].y)) + _3431;
        _3508 = (exp2(_3683 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3667 * cbSceneParam._m0[78u].z)) * _3657.z) / cbSceneParam._m0[78u].z)) + _3432;
        _3510 = _3666 * _3433;
    }
    else
    {
        _3504 = _3430;
        _3506 = _3431;
        _3508 = _3432;
        _3510 = _3433;
    }
    float _3522 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3523 = _3522 == 3.0;
    float _3524 = log2(_3510);
    float _3531 = exp2(_3524 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5376 : (isnan(_5376) ? 1.0 : min(_5376, 1.0))) * (_3375 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1349))) + ((_3381 + ((isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0))) * _2155)) * cbPerFrame._m0[3u].x));
    float _3532 = exp2(_3524 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5387 : (isnan(_5387) ? 1.0 : min(_5387, 1.0))) * (_3377 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1349))) + ((_3383 + ((isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0))) * _2155)) * cbPerFrame._m0[3u].x));
    float _3533 = exp2(_3524 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5398 : (isnan(_5398) ? 1.0 : min(_5398, 1.0))) * (_3379 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1349))) + ((_3385 + ((isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0))) * _2155)) * cbPerFrame._m0[3u].x));
    float _3542 = (_3522 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3542 * (_3523 ? _3531 : (_3531 + (cbSceneParam._m0[72u].w * _3504)));
    SV_Target.y = _3542 * (_3523 ? _3532 : (_3532 + (cbSceneParam._m0[72u].w * _3506)));
    SV_Target.z = _3542 * (_3523 ? _3533 : (_3533 + (cbSceneParam._m0[72u].w * _3508)));
    SV_Target.w = cbInstanceData._m0[_3405].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3405].w;
}


