#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1503;
float _4167;
float _4168;
float _4169;
float _4170;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4179 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4190 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4201 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = _375.x * cbMtdParam._m0[11u].x;
    float _381 = _375.y * cbMtdParam._m0[11u].y;
    float _382 = _375.z * cbMtdParam._m0[11u].z;
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _466 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _483 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _420.x) * 2.0) - ((((_454 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4212 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _491 = (_484 * ((_401.x * cbMtdParam._m0[12u].x) - _380)) + _380;
    float _492 = (_484 * ((_401.y * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _493 = (_484 * ((_401.z * cbMtdParam._m0[12u].z) - _382)) + _382;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _532 = _530.x;
    float _542 = dot(vec4(_532, _530.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _556 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _420.y) * 2.0) - ((((_532 - _542) * cbMtdParam._m0[23u].w) + _542) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4223 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _567 = (_349.x * cbMtdParam._m0[9u].x) * ((_557 * ((_510.x * cbMtdParam._m0[13u].x) - _491)) + _491);
    float _568 = (_349.y * cbMtdParam._m0[9u].y) * ((_557 * ((_510.y * cbMtdParam._m0[13u].y) - _492)) + _492);
    float _569 = (_349.z * cbMtdParam._m0[9u].z) * ((_557 * ((_510.z * cbMtdParam._m0[13u].z) - _493)) + _493);
    float _573 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _567;
    float _576 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _568;
    float _579 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _569;
    float _587 = (((_567 - _573) * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) + _573) * 4.55000019073486328125;
    float _589 = (((_568 - _576) * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) + _576) * 4.55000019073486328125;
    float _591 = (((_569 - _579) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) + _579) * 4.55000019073486328125;
    vec4 _603 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _645 = _643.x;
    float _646 = _643.y;
    float _647 = _643.z;
    float _654 = ((_626.x - _645) * _484) + _645;
    float _655 = ((_626.y - _646) * _484) + _646;
    float _656 = ((_626.z - _647) * _484) + _647;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _681 = ((_668.z - _656) * _557) + _656;
    float _684 = ((((_668.x - _654) * _557) + _654) * 2.0) + (-1.0);
    float _685 = ((((_668.y - _655) * _557) + _655) * 2.0) + (-1.0);
    float _686 = dot(vec2(_684, _685), vec2(_684, _685));
    float _4234 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _691 = sqrt(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _723 = (_684 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_603.x * 2.0) + (-1.0)))) + (((_711.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _724 = (_685 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_603.y * 2.0) + (-1.0)))) + (((_711.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _738 = _736.x;
    float _739 = 1.0 - _738;
    float _768 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_738 - _739) * cbMtdParam._m0[24u].w) + _739) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4245 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _769 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _777 = ((((cbMtdParam._m0[10u].x - _587) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _769) + _587;
    float _778 = ((((cbMtdParam._m0[10u].y - _589) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _769) + _589;
    float _779 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _591)) * _769) + _591;
    vec4 _805 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _807 = _805.x;
    float _824 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _807) * _484) + _807;
    float _842 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _824) * _557) + _824;
    float _846 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _842) * cbMtdParam._m0[19u].z) + _842;
    float _848 = _846 - (_846 * _769);
    float _853 = (((_603.z - _681) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _681;
    float _857 = ((_711.z - _853) * cbMtdParam._m0[19u].w) + _853;
    float _861 = ((cbMtdParam._m0[23u].x - _857) * _769) + _857;
    vec4 _882 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _888 = (_882.x * 2.0) + (-1.0);
    float _889 = (_882.y * 2.0) + (-1.0);
    float _890 = dot(vec2(_888, _889), vec2(_888, _889));
    float _4256 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _906 = (_769 * (((cbMtdParam._m0[22u].z * _723) - _723) + _888)) + _723;
    float _907 = (_769 * (((cbMtdParam._m0[22u].z * _724) - _724) + _889)) + _724;
    float _908 = (_769 * (sqrt(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) - _691)) + _691;
    float _910 = cbMtdParam._m0[22u].x + _711.w;
    float _913 = fma(_908, _261 * NORMAL.x, fma(_907, _268 * TANGENT.x, (_254 * _246) * _906));
    float _916 = fma(_908, _261 * NORMAL.y, fma(_907, _268 * TANGENT.y, (_254 * _247) * _906));
    float _919 = fma(_908, _261 * NORMAL.z, fma(_907, _268 * TANGENT.z, (_254 * _248) * _906));
    float _923 = inversesqrt(dot(vec3(_913, _916, _919), vec3(_913, _916, _919)));
    float _924 = _923 * _913;
    float _925 = _923 * _916;
    float _926 = _923 * _919;
    float _4267 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _927 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4289 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4300 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4311 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4322 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _932 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _946 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _996 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _986);
    float _997 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _986);
    float _998 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _986);
    float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
    float _1003 = _996 * _1002;
    float _1004 = _997 * _1002;
    float _1005 = _998 * _1002;
    vec4 _1010 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1012 = _1010.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1184 = sqrt(((_996 * _996) + (_997 * _997)) + (_998 * _998));
        float _1190 = (cbMatDynParam._m0[5u].x * _1184) + cbMatDynParam._m0[5u].y;
        float _4333 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1195 = (cbMatDynParam._m0[5u].z * _1184) + cbMatDynParam._m0[5u].w;
        float _4344 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) - _1191)) + _1191) < ((_1012 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1023 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1024 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1042 = fma(_926, cbSceneParam._m0[5u].z, fma(_925, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _924));
    float _1045 = fma(_926, cbSceneParam._m0[6u].z, fma(_925, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _924));
    float _1048 = fma(_926, cbSceneParam._m0[7u].z, fma(_925, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _924));
    uint _1061 = _293 + 9u;
    uint _1062 = _1061 + uint(cbMatDynParam._m0[0u].w);
    float _1068 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * cbInstanceData._m0[_1062].x;
    float _1069 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * cbInstanceData._m0[_1062].y;
    float _1070 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * cbInstanceData._m0[_1062].z;
    float _4355 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _4366 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _4377 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1073 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _1074 = 1.0 - _932;
    float _1075 = _1071 * _1074;
    float _1076 = _1072 * _1074;
    float _1077 = _1073 * _1074;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _932;
    float _1083 = (_1072 + (-0.039999999105930328369140625)) * _932;
    float _1084 = (_1073 + (-0.039999999105930328369140625)) * _932;
    float _1085 = _1082 + 0.039999999105930328369140625;
    float _1087 = _1083 + 0.039999999105930328369140625;
    float _1088 = _1084 + 0.039999999105930328369140625;
    vec4 _1097 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1023, cbSceneParam._m0[86u].y * _1024));
    float _1101 = ((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * TEXCOORD_5.w) * _1097.x;
    float _1102 = dot(vec3(_924, _925, _926), vec3(_1003, _1004, _1005));
    float _1105 = _1102 * 2.0;
    float _1109 = (_1105 * _924) - _1003;
    float _1110 = (_1105 * _925) - _1004;
    float _1111 = (_1105 * _926) - _1005;
    float _1115 = abs(dot(vec3(_1003, _1004, _1005), vec3(_924, _925, _926)));
    float _4388 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1117 = sqrt(_927);
    float _1130 = exp2((_1117 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1117 * 3.0));
    float _1136 = (1.0 - _1130) * ((_1117 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1137 = _1130 * _1117;
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1502;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1227 = fma(_1173, cbModelParam._m0[26u].z, fma(_1169, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1165));
        float _1231 = fma(_1173, cbModelParam._m0[27u].z, fma(_1169, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1165));
        float _1235 = fma(_1173, cbModelParam._m0[28u].z, fma(_1169, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1165));
        float _1260 = _1165 + _924;
        float _1261 = _1169 + _925;
        float _1262 = _1173 + _926;
        float _1272 = fma(_1262, cbModelParam._m0[26u].z, fma(_1261, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1260)) - _1227;
        float _1273 = fma(_1262, cbModelParam._m0[27u].z, fma(_1261, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1260)) - _1231;
        float _1274 = fma(_1262, cbModelParam._m0[28u].z, fma(_1261, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1260)) - _1235;
        float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
        float _1291 = ((_1278 * _1272) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1227 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1278 * _1273) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1231 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1278 * _1274) / cbModelParam._m0[34u].z) + ((((((_1235 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        float _1330 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1296.x + (-0.5));
        float _1332 = _1330 * (_1296.y + (-0.5));
        float _1333 = _1330 * (_1296.z + (-0.5));
        float _1340 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1303.x + (-0.5));
        float _1342 = _1340 * (_1303.y + (-0.5));
        float _1343 = _1340 * (_1303.z + (-0.5));
        float _1350 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1310.x + (-0.5));
        float _1352 = _1350 * (_1310.y + (-0.5));
        float _1353 = _1350 * (_1310.z + (-0.5));
        float _1360 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1317.x + (-0.5));
        float _1362 = _1360 * (_1317.y + (-0.5));
        float _1363 = _1360 * (_1317.z + (-0.5));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = _1331 * 0.5;
        float _1368 = _1341 * 0.5;
        float _1369 = _1351 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1384 = (dot(vec3(_924, _925, _926), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1394 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4436 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1396 + 1.0))) + _1401) * _1364;
        float _1411 = _1332 * 0.5;
        float _1412 = _1342 * 0.5;
        float _1413 = _1352 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_924, _925, _926), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4447 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4458 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4469 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_1438 + 1.0))) + _1443) * _1365;
        float _1453 = _1333 * 0.5;
        float _1454 = _1343 * 0.5;
        float _1455 = _1353 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_924, _925, _926), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4480 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4491 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4502 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_1480 + 1.0))) + _1485) * _1366;
        _1502 = _1333;
        _1504 = _1332;
        _1505 = _1331;
        _1506 = _1343;
        _1507 = _1342;
        _1508 = _1341;
        _1509 = _1353;
        _1510 = _1352;
        _1511 = _1351;
        _1512 = _1366;
        _1513 = _1365;
        _1514 = _1364;
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1516 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1517 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
    }
    else
    {
        _1502 = _1503;
        _1504 = _1503;
        _1505 = _1503;
        _1506 = _1503;
        _1507 = _1503;
        _1508 = _1503;
        _1509 = _1503;
        _1510 = _1503;
        _1511 = _1503;
        _1512 = _1503;
        _1513 = _1503;
        _1514 = _1503;
        _1515 = 0.0;
        _1516 = 0.0;
        _1517 = 0.0;
    }
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1544 = fma(_1173, cbModelParam._m0[30u].z, fma(_1169, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165));
        float _1548 = fma(_1173, cbModelParam._m0[31u].z, fma(_1169, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165));
        float _1552 = fma(_1173, cbModelParam._m0[32u].z, fma(_1169, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165));
        float _1575 = _1165 + _924;
        float _1576 = _1169 + _925;
        float _1577 = _1173 + _926;
        float _1587 = fma(_1577, cbModelParam._m0[30u].z, fma(_1576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1575)) - _1544;
        float _1588 = fma(_1577, cbModelParam._m0[31u].z, fma(_1576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1575)) - _1548;
        float _1589 = fma(_1577, cbModelParam._m0[32u].z, fma(_1576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1575)) - _1552;
        float _1593 = inversesqrt(dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589)));
        float _1606 = ((_1593 * _1587) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1544 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1607 = ((_1593 * _1588) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1548 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1608 = ((_1593 * _1589) / cbModelParam._m0[35u].z) + ((((((_1552 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1624 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        float _1643 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1610.x + (-0.5));
        float _1645 = _1643 * (_1610.y + (-0.5));
        float _1646 = _1643 * (_1610.z + (-0.5));
        float _1653 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1617.x + (-0.5));
        float _1655 = _1653 * (_1617.y + (-0.5));
        float _1656 = _1653 * (_1617.z + (-0.5));
        float _1663 = exp2((_1624.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1624.x + (-0.5));
        float _1665 = _1663 * (_1624.y + (-0.5));
        float _1666 = _1663 * (_1624.z + (-0.5));
        float _1673 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1631.x + (-0.5));
        float _1675 = _1673 * (_1631.y + (-0.5));
        float _1676 = _1673 * (_1631.z + (-0.5));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = _1644 * 0.5;
        float _1681 = _1654 * 0.5;
        float _1682 = _1664 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_924, _925, _926), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4543 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4554 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4565 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_1707 + 1.0))) + _1712) * _1677;
        float _1722 = _1645 * 0.5;
        float _1723 = _1655 * 0.5;
        float _1724 = _1665 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_924, _925, _926), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4576 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4587 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4598 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_1749 + 1.0))) + _1754) * _1678;
        float _1764 = _1646 * 0.5;
        float _1765 = _1656 * 0.5;
        float _1766 = _1666 * 0.5;
        float _1767 = dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766));
        float _1772 = (_1767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1767);
        float _1780 = (dot(vec3(_924, _925, _926), vec3(_1772 * _1764, _1772 * _1765, _1772 * _1766)) + 1.0) * 0.5;
        float _4609 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4620 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _1791 = _1790 * 2.0;
        float _1795 = (1.0 - _1790) / (_1790 + 1.0);
        float _4631 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _1805 = ((((1.0 - _1796) * (_1791 + 2.0)) * exp2(log2(isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_1791 + 1.0))) + _1796) * _1679;
        _1813 = _1646;
        _1814 = _1645;
        _1815 = _1644;
        _1816 = _1656;
        _1817 = _1655;
        _1818 = _1654;
        _1819 = _1666;
        _1820 = _1665;
        _1821 = _1664;
        _1822 = _1679;
        _1823 = _1678;
        _1824 = _1677;
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
    }
    else
    {
        _1813 = _1503;
        _1814 = _1503;
        _1815 = _1503;
        _1816 = _1503;
        _1817 = _1503;
        _1818 = _1503;
        _1819 = _1503;
        _1820 = _1503;
        _1821 = _1503;
        _1822 = _1503;
        _1823 = _1503;
        _1824 = _1503;
        _1825 = 0.0;
        _1826 = 0.0;
        _1827 = 0.0;
    }
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1515)) + _1515;
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1516)) + _1516;
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1517)) + _1517;
    float _1860 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1838, cbSceneParam._m0[89u].y, _1837 * cbSceneParam._m0[89u].x));
    float _1863 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1838, cbSceneParam._m0[90u].y, _1837 * cbSceneParam._m0[90u].x));
    float _1866 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1838, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1837));
    float _1881 = _1109 * 0.5;
    float _1882 = _1110 * 0.5;
    float _1883 = _1111 * 0.5;
    float _1884 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1887 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1890 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1924;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1897 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1502, _1506, _1509, _1512));
        float _1901 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1504, _1507, _1510, _1513));
        float _1905 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1505, _1508, _1511, _1514));
        float _1912 = dot(vec4(cbModelParam._m0[39u]), vec4(_1881, _1882, _1883, 1.0));
        _1924 = dot(vec3(isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1924 = 1.0;
    }
    float _1935;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1926 = dot(vec4(cbModelParam._m0[40u]), vec4(_1881, _1882, _1883, 1.0));
        _1935 = dot(vec3(isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1926) ? 0.0 : (isnan(0.0) ? _1926 : max(0.0, _1926))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1935 = 1.0;
    }
    float _1939 = (_1935 * cbModelParam._m0[1u].x) + (_1924 * (1.0 - cbModelParam._m0[1u].x));
    float _1949 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _927);
    float _1950 = isnan(_1949) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1949 : min(cbModelParam._m0[25u].z, _1949));
    float _2032;
    float _2034;
    float _2036;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1999 = fma(_1173, cbModelParam._m0[13u].z, fma(_1169, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1165)) + cbModelParam._m0[13u].w;
        float _2003 = fma(_1173, cbModelParam._m0[14u].z, fma(_1169, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1165)) + cbModelParam._m0[14u].w;
        float _2007 = fma(_1173, cbModelParam._m0[15u].z, fma(_1169, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1165)) + cbModelParam._m0[15u].w;
        float _2010 = fma(_1111, cbModelParam._m0[13u].z, fma(_1110, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1109));
        float _2013 = fma(_1111, cbModelParam._m0[14u].z, fma(_1110, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1109));
        float _2016 = fma(_1111, cbModelParam._m0[15u].z, fma(_1110, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1109));
        float _2044;
        if (_2010 > 0.0)
        {
            _2044 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2044 = frontier_phi_17_15_ladder;
        }
        float _2216;
        if (_2013 > 0.0)
        {
            _2216 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2216 = frontier_phi_26_22_ladder;
        }
        float _2511;
        if (_2016 > 0.0)
        {
            _2511 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2511 = frontier_phi_38_33_ladder;
        }
        float _2513 = isnan(_2216) ? _2044 : (isnan(_2044) ? _2216 : min(_2044, _2216));
        float _2514 = isnan(_2511) ? _2513 : (isnan(_2513) ? _2511 : min(_2513, _2511));
        float _2518 = (_2514 * _2010) + _1999;
        float _2519 = (_2514 * _2013) + _2003;
        float _2520 = (_2514 * _2016) + _2007;
        float _2521 = _2514 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2521;
        float _2525 = _2521 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 > _2525) || ((_2519 < _2523) || ((_2518 < _2523) || (_2518 > _2525))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2665 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2520, cbModelParam._m0[9u].z, fma(_2519, cbModelParam._m0[9u].y, _2518 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2520, cbModelParam._m0[10u].z, fma(_2519, cbModelParam._m0[10u].y, _2518 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2520, cbModelParam._m0[11u].z, fma(_2519, cbModelParam._m0[11u].y, _2518 * cbModelParam._m0[11u].x))), _1950);
            frontier_phi_16_38_ladder = _2665.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2665.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2665.x * cbModelParam._m0[1u].y;
        }
        _2032 = frontier_phi_16_38_ladder_2;
        _2034 = frontier_phi_16_38_ladder_1;
        _2036 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1109, _1110, _1111), _1950);
        _2032 = _2020.x * cbModelParam._m0[1u].y;
        _2034 = _2020.y * cbModelParam._m0[1u].y;
        _2036 = _2020.z * cbModelParam._m0[1u].y;
    }
    float _2040 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _927);
    float _2041 = isnan(_2040) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2040 : min(cbModelParam._m0[25u].w, _2040));
    float _2131;
    float _2133;
    float _2135;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2095 = fma(_1173, cbModelParam._m0[21u].z, fma(_1169, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1165)) + cbModelParam._m0[21u].w;
        float _2099 = fma(_1173, cbModelParam._m0[22u].z, fma(_1169, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1165)) + cbModelParam._m0[22u].w;
        float _2103 = fma(_1173, cbModelParam._m0[23u].z, fma(_1169, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1165)) + cbModelParam._m0[23u].w;
        float _2106 = fma(_1111, cbModelParam._m0[21u].z, fma(_1110, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1109));
        float _2109 = fma(_1111, cbModelParam._m0[22u].z, fma(_1110, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1109));
        float _2112 = fma(_1111, cbModelParam._m0[23u].z, fma(_1110, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1109));
        float _2221;
        if (_2106 > 0.0)
        {
            _2221 = abs((1.0 - _2095) / _2106);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2095 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2221 = frontier_phi_28_24_ladder;
        }
        float _2538;
        if (_2109 > 0.0)
        {
            _2538 = abs((1.0 - _2099) / _2109);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2099 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2538 = frontier_phi_40_35_ladder;
        }
        float _2876;
        if (_2112 > 0.0)
        {
            _2876 = abs((1.0 - _2103) / _2112);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2103 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2876 = frontier_phi_50_47_ladder;
        }
        float _2878 = isnan(_2538) ? _2221 : (isnan(_2221) ? _2538 : min(_2221, _2538));
        float _2879 = isnan(_2876) ? _2878 : (isnan(_2878) ? _2876 : min(_2878, _2876));
        float _2883 = (_2879 * _2106) + _2095;
        float _2884 = (_2879 * _2109) + _2099;
        float _2885 = (_2879 * _2112) + _2103;
        float _2886 = _2879 * 9.9999997473787516355514526367188e-05;
        float _2887 = (-1.0) - _2886;
        float _2889 = _2886 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2885 > _2889) || ((_2885 < _2887) || ((_2884 > _2889) || ((_2884 < _2887) || ((_2883 < _2887) || (_2883 > _2889))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3007 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2885, cbModelParam._m0[17u].z, fma(_2884, cbModelParam._m0[17u].y, _2883 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2885, cbModelParam._m0[18u].z, fma(_2884, cbModelParam._m0[18u].y, _2883 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2885, cbModelParam._m0[19u].z, fma(_2884, cbModelParam._m0[19u].y, _2883 * cbModelParam._m0[19u].x))), _2041);
            frontier_phi_25_50_ladder = _3007.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3007.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3007.x * cbModelParam._m0[1u].z;
        }
        _2131 = frontier_phi_25_50_ladder_2;
        _2133 = frontier_phi_25_50_ladder_1;
        _2135 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2115 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1109, _1110, _1111), _2041);
        _2131 = _2115.x * cbModelParam._m0[1u].z;
        _2133 = _2115.y * cbModelParam._m0[1u].z;
        _2135 = _2115.z * cbModelParam._m0[1u].z;
    }
    float _2148 = (((_1136 * _1085) + _1137) * _1101) * ((cbModelParam._m0[1u].w * (_2131 - _2032)) + _2032);
    float _2150 = (((_1136 * _1087) + _1137) * _1101) * ((cbModelParam._m0[1u].w * (_2133 - _2034)) + _2034);
    float _2152 = (((_1136 * _1088) + _1137) * _1101) * ((cbModelParam._m0[1u].w * (_2135 - _2036)) + _2036);
    float _2155 = fma(_2152, cbSceneParam._m0[89u].z, fma(_2150, cbSceneParam._m0[89u].y, _2148 * cbSceneParam._m0[89u].x));
    float _2158 = fma(_2152, cbSceneParam._m0[90u].z, fma(_2150, cbSceneParam._m0[90u].y, _2148 * cbSceneParam._m0[90u].x));
    float _2161 = fma(_2152, cbSceneParam._m0[91u].z, fma(_2150, cbSceneParam._m0[91u].y, _2148 * cbSceneParam._m0[91u].x));
    float _2195 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2199 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2203 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2207 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2208 = _2195 / _2207;
    float _2209 = _2199 / _2207;
    float _2210 = _2203 / _2207;
    float _2357;
    float _2358;
    float _2359;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2237 = ((uint(_2210 > cbSceneParam._m0[59u].y) + uint(_2210 > cbSceneParam._m0[59u].x)) + uint(_2210 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2238 = _2237 + 43u;
        uint _2246 = _2237 + 44u;
        uint _2254 = _2237 + 45u;
        uint _2262 = _2237 + 46u;
        float _2273 = fma(_2207, cbSceneParam._m0[_2238].w, fma(_2203, cbSceneParam._m0[_2238].z, fma(_2199, cbSceneParam._m0[_2238].y, _2195 * cbSceneParam._m0[_2238].x)));
        float _2277 = fma(_2207, cbSceneParam._m0[_2246].w, fma(_2203, cbSceneParam._m0[_2246].z, fma(_2199, cbSceneParam._m0[_2246].y, _2195 * cbSceneParam._m0[_2246].x)));
        float _2285 = fma(_2207, cbSceneParam._m0[_2262].w, fma(_2203, cbSceneParam._m0[_2262].z, fma(_2199, cbSceneParam._m0[_2262].y, _2195 * cbSceneParam._m0[_2262].x)));
        float _2290 = cbSceneParam._m0[33u].z * _2285;
        float _2292 = cbSceneParam._m0[33u].w * _2285;
        float _2295 = fma(_2207, cbSceneParam._m0[_2254].w, fma(_2203, cbSceneParam._m0[_2254].z, fma(_2199, cbSceneParam._m0[_2254].y, _2195 * cbSceneParam._m0[_2254].x))) / _2285;
        float _2343 = (cbSceneParam._m0[33u].x - sqrt(((_2209 * _2209) + (_2208 * _2208)) + (_2210 * _2210))) * cbSceneParam._m0[33u].y;
        float _4757 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2350 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2290 + _2273) / _2285, (_2292 + _2277) / _2285), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2292 + _2273) / _2285, (_2277 - _2290) / _2285), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2273 - _2290) / _2285, (_2277 - _2292) / _2285), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2273 - _2292) / _2285, (_2290 + _2277) / _2285), _2295), 0.0)).x), vec4(0.25)));
        _2357 = 1.0 - (_2350 * cbSceneParam._m0[34u].x);
        _2358 = 1.0 - (_2350 * cbSceneParam._m0[34u].y);
        _2359 = 1.0 - (_2350 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2357 = 1.0;
        _2358 = 1.0;
        _2359 = 1.0;
    }
    float _2423;
    float _2425;
    float _2427;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2411 = fma(_2207, cbSceneParam._m0[63u].w, fma(_2203, cbSceneParam._m0[63u].z, fma(_2199, cbSceneParam._m0[63u].y, _2195 * cbSceneParam._m0[63u].x)));
        float _2412 = fma(_2207, cbSceneParam._m0[60u].w, fma(_2203, cbSceneParam._m0[60u].z, fma(_2199, cbSceneParam._m0[60u].y, _2195 * cbSceneParam._m0[60u].x))) / _2411;
        float _2413 = fma(_2207, cbSceneParam._m0[61u].w, fma(_2203, cbSceneParam._m0[61u].z, fma(_2199, cbSceneParam._m0[61u].y, _2195 * cbSceneParam._m0[61u].x))) / _2411;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2412 >= cbSceneParam._m0[64u].x) && (_2413 >= cbSceneParam._m0[64u].y)) && (_2412 <= cbSceneParam._m0[64u].z)) && (_2413 <= cbSceneParam._m0[64u].w))
        {
            float _2551 = fma(_2207, cbSceneParam._m0[62u].w, fma(_2203, cbSceneParam._m0[62u].z, fma(_2199, cbSceneParam._m0[62u].y, _2195 * cbSceneParam._m0[62u].x))) / _2411;
            float _2555 = isnan(cbSceneParam._m0[41u].w) ? _2551 : (isnan(_2551) ? cbSceneParam._m0[41u].w : max(_2551, cbSceneParam._m0[41u].w));
            float _2598 = (cbSceneParam._m0[33u].x - sqrt(((_2209 * _2209) + (_2208 * _2208)) + (_2210 * _2210))) * cbSceneParam._m0[33u].y;
            float _4773 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
            float _2605 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2412, cbSceneParam._m0[33u].w + _2413), _2555), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2412, _2413 - cbSceneParam._m0[33u].z), _2555), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2412 - cbSceneParam._m0[33u].z, _2413 - cbSceneParam._m0[33u].w), _2555), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2412 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2413), _2555), 0.0)).x), vec4(0.25)));
            float _2609 = 1.0 - (_2605 * cbSceneParam._m0[34u].x);
            float _2610 = 1.0 - (_2605 * cbSceneParam._m0[34u].y);
            float _2611 = 1.0 - (_2605 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2611) ? _2359 : (isnan(_2359) ? _2611 : min(_2359, _2611));
            frontier_phi_37_36_ladder_1 = isnan(_2610) ? _2358 : (isnan(_2358) ? _2610 : min(_2358, _2610));
            frontier_phi_37_36_ladder_2 = isnan(_2609) ? _2357 : (isnan(_2357) ? _2609 : min(_2357, _2609));
        }
        else
        {
            frontier_phi_37_36_ladder = _2359;
            frontier_phi_37_36_ladder_1 = _2358;
            frontier_phi_37_36_ladder_2 = _2357;
        }
        _2423 = frontier_phi_37_36_ladder_2;
        _2425 = frontier_phi_37_36_ladder_1;
        _2427 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2423 = _2357;
        _2425 = _2358;
        _2427 = _2359;
    }
    uvec4 _2432 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2434 = _2432.x * 14u;
    uint _2435 = _2434 + 13u;
    float _2442 = _1101 + (-1.0);
    float _2447 = (cbLight._m0[_2435].x * _2442) + 1.0;
    float _2448 = (cbLight._m0[_2435].y * _2442) + 1.0;
    float _2449 = (cbLight._m0[_2435].z * _2442) + 1.0;
    float _2450 = (cbLight._m0[_2435].w * _2442) + 1.0;
    uint _2451 = _2434 + 5u;
    float _2457 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
    uint _2461 = _2434 + 4u;
    float _2470 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
    uint _2474 = _2434 | 1u;
    float _2485 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_924, _925, _926));
    float _2488 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_924, _925, _926));
    float _4809 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _4820 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2493 = (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * 0.3183098733425140380859375;
    float _2495 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * 0.3183098733425140380859375;
    float _2502 = ((cbLight._m0[_2451].x * _2457) * _2495) + (((cbLight._m0[_2461].x * _2423) * _2470) * _2493);
    float _2503 = ((_2457 * cbLight._m0[_2451].y) * _2495) + (((cbLight._m0[_2461].y * _2425) * _2470) * _2493);
    float _2504 = ((_2457 * cbLight._m0[_2451].z) * _2495) + (((cbLight._m0[_2461].z * _2427) * _2470) * _2493);
    uvec4 _2508 = floatBitsToUint(cbLight._m0[_2434 + 12u]);
    bool _2510 = _2508.x == 0u;
    float _2612;
    float _2614;
    float _2616;
    if (_2510)
    {
        _2612 = _2502;
        _2614 = _2503;
        _2616 = _2504;
    }
    else
    {
        uint _2620 = _2434 + 6u;
        float _2636 = (dot(vec3(cbLight._m0[_2434 + 2u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2637 = _2636 * _2636;
        float _4831 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2638 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2639 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2612 = (((cbLight._m0[_2620].x * 0.3183098733425140380859375) * _2638) * _2639) + _2502;
        _2614 = (((cbLight._m0[_2620].y * 0.3183098733425140380859375) * _2638) * _2639) + _2503;
        _2616 = (((cbLight._m0[_2620].z * 0.3183098733425140380859375) * _2638) * _2639) + _2504;
    }
    bool _2619 = _2508.y == 0u;
    float _2674;
    float _2676;
    float _2678;
    if (_2619)
    {
        _2674 = _2612;
        _2676 = _2614;
        _2678 = _2616;
    }
    else
    {
        uint _2847 = _2434 + 7u;
        float _2863 = (dot(vec3(cbLight._m0[_2434 + 3u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2864 = _2863 * _2863;
        float _4847 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2865 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
        float _2866 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2674 = (((cbLight._m0[_2847].x * 0.3183098733425140380859375) * _2865) * _2866) + _2612;
        _2676 = (((cbLight._m0[_2847].y * 0.3183098733425140380859375) * _2865) * _2866) + _2614;
        _2678 = (((cbLight._m0[_2847].z * 0.3183098733425140380859375) * _2865) * _2866) + _2616;
    }
    uint _2681 = _2434 + 8u;
    float _2694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _927) * 0.949999988079071044921875);
    float _2695 = _2694 * _2694;
    float _2696 = cbLight._m0[_2434].x + _1003;
    float _2697 = cbLight._m0[_2434].y + _1004;
    float _2698 = cbLight._m0[_2434].z + _1005;
    float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
    float _2703 = _2702 * _2696;
    float _2704 = _2702 * _2697;
    float _2705 = _2702 * _2698;
    float _2706 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2434].xyz));
    float _4863 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2709 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
    float _4874 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _2710 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
    float _2711 = dot(vec3(_924, _925, _926), vec3(_2703, _2704, _2705));
    float _4885 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2714 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
    float _2715 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2703, _2704, _2705));
    float _4896 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2719 = _2695 * _2695;
    float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
    float _2731 = exp2(log2(1.0 - (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) * 5.0);
    float _2732 = 0.959999978542327880859375 - _1082;
    float _2734 = 0.959999978542327880859375 - _1083;
    float _2735 = 0.959999978542327880859375 - _1084;
    float _2742 = 1.0 - _2695;
    float _2753 = (0.5 / (((_2710 * ((_2709 * _2742) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2710 * _2742) + _2695) * _2709))) * _2709;
    float _4907 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2755 = (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
    uint _2769 = _2434 + 9u;
    float _2780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _927) * 0.949999988079071044921875);
    float _2781 = _2780 * _2780;
    float _2782 = cbLight._m0[_2474].x + _1003;
    float _2783 = cbLight._m0[_2474].y + _1004;
    float _2784 = cbLight._m0[_2474].z + _1005;
    float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
    float _2789 = _2788 * _2782;
    float _2790 = _2788 * _2783;
    float _2791 = _2788 * _2784;
    float _2792 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2474].xyz));
    float _4918 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
    float _2795 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
    float _2796 = dot(vec3(_924, _925, _926), vec3(_2789, _2790, _2791));
    float _4929 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2799 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
    float _2800 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2789, _2790, _2791));
    float _4940 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
    float _2804 = _2781 * _2781;
    float _2808 = ((_2799 * _2799) * (_2804 + (-1.0))) + 1.0;
    float _2815 = exp2(log2(1.0 - (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) * 5.0);
    float _2822 = 1.0 - _2781;
    float _2832 = (0.5 / (((_2710 * ((_2795 * _2822) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2710 * _2822) + _2781) * _2795))) * _2795;
    float _4951 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
    float _2834 = (isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_2804 / ((_2808 * _2808) * 3.141590118408203125));
    float _2844 = (((((_2815 * _2732) + _1085) * cbLight._m0[_2769].x) * _2834) * _2457) + ((((cbLight._m0[_2681].x * _2423) * ((_2731 * _2732) + _1085)) * _2755) * _2470);
    float _2845 = (((((_2815 * _2734) + _1087) * cbLight._m0[_2769].y) * _2834) * _2457) + ((((cbLight._m0[_2681].y * _2425) * ((_2731 * _2734) + _1087)) * _2755) * _2470);
    float _2846 = (((((_2815 * _2735) + _1088) * cbLight._m0[_2769].z) * _2834) * _2457) + ((((cbLight._m0[_2681].z * _2427) * ((_2731 * _2735) + _1088)) * _2755) * _2470);
    float _2902;
    float _2904;
    float _2906;
    if (_2510)
    {
        _2902 = _2844;
        _2904 = _2845;
        _2906 = _2846;
    }
    else
    {
        uint _2908 = _2434 + 2u;
        uint _2912 = _2434 + 10u;
        float _2926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2908].w)) * _927) * 0.949999988079071044921875);
        float _2927 = _2926 * _2926;
        float _2928 = cbLight._m0[_2908].x + _1003;
        float _2929 = cbLight._m0[_2908].y + _1004;
        float _2930 = cbLight._m0[_2908].z + _1005;
        float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
        float _2935 = _2934 * _2928;
        float _2936 = _2934 * _2929;
        float _2937 = _2934 * _2930;
        float _2938 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2908].xyz));
        float _4962 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2941 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
        float _2942 = dot(vec3(_924, _925, _926), vec3(_2935, _2936, _2937));
        float _4973 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2945 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
        float _2946 = dot(vec3(cbLight._m0[_2908].xyz), vec3(_2935, _2936, _2937));
        float _4984 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2950 = _2927 * _2927;
        float _2954 = ((_2945 * _2945) * (_2950 + (-1.0))) + 1.0;
        float _2961 = exp2(log2(1.0 - (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0)))) * 5.0);
        float _2968 = 1.0 - _2927;
        float _2978 = (0.5 / (((_2710 * ((_2941 * _2968) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2710 * _2968) + _2927) * _2941))) * _2941;
        float _4995 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2980 = (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_2950 / ((_2954 * _2954) * 3.141590118408203125));
        float _2981 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2902 = (((((_2961 * _2732) + _1085) * cbLight._m0[_2912].x) * _2980) * _2981) + _2844;
        _2904 = (((((_2961 * _2734) + _1087) * cbLight._m0[_2912].y) * _2980) * _2981) + _2845;
        _2906 = (((((_2961 * _2735) + _1088) * cbLight._m0[_2912].z) * _2980) * _2981) + _2846;
    }
    float _3012;
    float _3014;
    float _3016;
    if (_2619)
    {
        _3012 = _2902;
        _3014 = _2904;
        _3016 = _2906;
    }
    else
    {
        uint _3023 = _2434 + 3u;
        uint _3027 = _2434 + 11u;
        float _3041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3023].w)) * _927) * 0.949999988079071044921875);
        float _3042 = _3041 * _3041;
        float _3043 = cbLight._m0[_3023].x + _1003;
        float _3044 = cbLight._m0[_3023].y + _1004;
        float _3045 = cbLight._m0[_3023].z + _1005;
        float _3049 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
        float _3050 = _3049 * _3043;
        float _3051 = _3049 * _3044;
        float _3052 = _3049 * _3045;
        float _3053 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_3023].xyz));
        float _5011 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        float _3056 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
        float _3057 = dot(vec3(_924, _925, _926), vec3(_3050, _3051, _3052));
        float _5022 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
        float _3060 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
        float _3061 = dot(vec3(cbLight._m0[_3023].xyz), vec3(_3050, _3051, _3052));
        float _5033 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3065 = _3042 * _3042;
        float _3069 = ((_3060 * _3060) * (_3065 + (-1.0))) + 1.0;
        float _3076 = exp2(log2(1.0 - (isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0)))) * 5.0);
        float _3083 = 1.0 - _3042;
        float _3093 = (0.5 / (((_2710 * ((_3056 * _3083) + _3042)) + 9.9999999392252902907785028219223e-09) + (((_2710 * _3083) + _3042) * _3056))) * _3056;
        float _5044 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
        float _3095 = (isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0))) * (_3065 / ((_3069 * _3069) * 3.141590118408203125));
        float _3096 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _3012 = (((((_3076 * _2732) + _1085) * cbLight._m0[_3027].x) * _3095) * _3096) + _2902;
        _3014 = (((((_3076 * _2734) + _1087) * cbLight._m0[_3027].y) * _3095) * _3096) + _2904;
        _3016 = (((((_3076 * _2735) + _1088) * cbLight._m0[_3027].z) * _3095) * _3096) + _2906;
    }
    float _3162;
    float _3164;
    float _3166;
    float _3168;
    float _3170;
    float _3172;
    if (_2432.y == 0u)
    {
        uvec4 _3117 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3118 = _3117.x;
        uint _3129 = uint((float(_3117.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1024) / _3118))) + floor(float(uint(cbSceneParam._m0[85u].x * _1023) / _3118)));
        float _3139 = (log2(_2210 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3140 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
        uint _3143 = uint(isnan(14.0) ? _3140 : (isnan(_3140) ? 14.0 : min(_3140, 14.0)));
        uvec4 _3148 = texelFetch(g_lightClusterGridBuffer, int(((_3143 << 2u) + (_3129 << 6u)) >> 2u));
        uint _3149 = _3148.x;
        uint _3150 = _3117.z;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        if (((((1u << ((_3150 >> 4u) & 15u)) + 4294967295u) & _3149) == 0u) || ((_3150 & 240u) == 0u))
        {
            _3229 = 0.0;
            _3231 = 0.0;
            _3233 = 0.0;
            _3235 = 0.0;
            _3237 = 0.0;
            _3239 = 0.0;
        }
        else
        {
            float _3230;
            float _3232;
            float _3234;
            float _3236;
            float _3238;
            float _3240;
            float _3382 = 0.0;
            float _3383 = 0.0;
            float _3384 = 0.0;
            float _3385 = 0.0;
            float _3386 = 0.0;
            float _3387 = 0.0;
            uint _3388 = 0u;
            uint _3397;
            bool _3398;
            for (;;)
            {
                _3397 = texelFetch(g_lightClassification, int((((_3143 << 5u) + (_3129 << 9u)) + (_3388 << 2u)) >> 2u)).x;
                _3398 = _3397 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3398)
                {
                    frontier_phi_71_pred = _3387;
                    frontier_phi_71_pred_1 = _3386;
                    frontier_phi_71_pred_2 = _3385;
                    frontier_phi_71_pred_3 = _3384;
                    frontier_phi_71_pred_4 = _3383;
                    frontier_phi_71_pred_5 = _3382;
                }
                else
                {
                    float _3527;
                    float _3528;
                    float _3529;
                    float _3530;
                    float _3531;
                    float _3532;
                    uint _3533;
                    _3527 = _3382;
                    _3528 = _3383;
                    _3529 = _3384;
                    _3530 = _3385;
                    _3531 = _3386;
                    _3532 = _3387;
                    _3533 = _3397;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    for (;;)
                    {
                        uint _3537 = uint(findLSB(_3533)) + (_3388 << 5u);
                        uint _3534 = (_3533 + 4294967295u) & _3533;
                        uint _3539 = _3537 * 48u;
                        vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3539)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 3u)).x));
                        uint _3559 = (_3537 * 48u) + 4u;
                        vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3559)).x, texelFetch(g_PointLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3559 + 3u)).x));
                        uint _3578 = (_3537 * 48u) + 8u;
                        vec3 _3589 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3578)).x, texelFetch(g_PointLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3578 + 2u)).x));
                        float _3593 = _3553.x - _2208;
                        float _3594 = _3553.y - _2209;
                        float _3595 = _3553.z - _2210;
                        float _3596 = dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595));
                        float _3599 = inversesqrt(_3596);
                        float _3600 = _3599 * _3593;
                        float _3601 = _3599 * _3594;
                        float _3602 = _3599 * _3595;
                        float _3603 = dot(vec3(_1042, _1045, _1048), vec3(_3600, _3601, _3602));
                        float _3608 = 1.0 - (_3596 * _3553.w);
                        float _5070 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                        float _3609 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                        float _3610 = sqrt(_3596) * _3572.w;
                        float _3613 = 1.39999997615814208984375 / (_3610 + 1.39999997615814208984375);
                        float _3614 = _3613 * _3613;
                        float _3617 = ((1.0 - _3614) * _3603) + _3614;
                        float _3620 = _3610 * _3610;
                        float _3624 = ((isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0))) * _3609) / ((_3620 * 0.699999988079071044921875) + 1.0);
                        float _3628 = (-0.0) - _2208;
                        float _3629 = (-0.0) - _2209;
                        float _3630 = (-0.0) - _2210;
                        float _3634 = inversesqrt(dot(vec3(_3628, _3629, _3630), vec3(_3628, _3629, _3630)));
                        float _3635 = _3634 * _3628;
                        float _3636 = _3634 * _3629;
                        float _3637 = _3634 * _3630;
                        float _3644 = exp2(log2(1.0 / ((_3620 * 3.5) + 5.0)) * 0.25);
                        float _3645 = 1.0 - _1117;
                        float _3652 = sqrt(1.0 - ((1.0 - (_3645 * _3645)) * (1.0 - (_3644 * _3644))));
                        float _3653 = _3652 * _3652;
                        float _3654 = _3653 * _3653;
                        float _3655 = _3635 + _3600;
                        float _3656 = _3636 + _3601;
                        float _3657 = _3637 + _3602;
                        float _3661 = inversesqrt(dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657)));
                        float _3665 = dot(vec3(_1042, _1045, _1048), vec3(_3635, _3636, _3637));
                        float _5086 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                        float _3668 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
                        float _3669 = dot(vec3(_1042, _1045, _1048), vec3(_3661 * _3655, _3661 * _3656, _3661 * _3657));
                        float _5097 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                        float _3672 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
                        float _3676 = ((_3672 * _3672) * (_3654 + (-1.0))) + 1.0;
                        float _3677 = _3613 * _3653;
                        float _3678 = _3677 * _3677;
                        float _3681 = ((1.0 - _3678) * _3603) + _3678;
                        float _5108 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                        float _3682 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
                        float _3683 = 1.0 - _3653;
                        float _3693 = (0.5 / (((_3682 * ((_3668 * _3683) + _3653)) + 9.9999999392252902907785028219223e-09) + (((_3682 * _3683) + _3653) * _3668))) * _3682;
                        float _5119 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                        float _3704 = (((_3654 * 3.1415927410125732421875) * (isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0)))) / ((_3676 * _3676) * ((_3620 * 2.1991131305694580078125) + 3.141590118408203125))) * _3609;
                        _3457 = (_3624 * _3572.x) + _3530;
                        _3458 = (_3624 * _3572.y) + _3531;
                        _3459 = (_3624 * _3572.z) + _3532;
                        _3454 = (_3704 * _3589.x) + _3527;
                        _3455 = (_3704 * _3589.y) + _3528;
                        _3456 = (_3704 * _3589.z) + _3529;
                        if (_3534 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3527 = _3454;
                            _3528 = _3455;
                            _3529 = _3456;
                            _3530 = _3457;
                            _3531 = _3458;
                            _3532 = _3459;
                            _3533 = _3534;
                        }
                    }
                    frontier_phi_71_pred = _3459;
                    frontier_phi_71_pred_1 = _3458;
                    frontier_phi_71_pred_2 = _3457;
                    frontier_phi_71_pred_3 = _3456;
                    frontier_phi_71_pred_4 = _3455;
                    frontier_phi_71_pred_5 = _3454;
                }
                _3240 = frontier_phi_71_pred;
                _3238 = frontier_phi_71_pred_1;
                _3236 = frontier_phi_71_pred_2;
                _3234 = frontier_phi_71_pred_3;
                _3232 = frontier_phi_71_pred_4;
                _3230 = frontier_phi_71_pred_5;
                uint _3389 = _3388 + 1u;
                if (_3389 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3382 = _3230;
                    _3383 = _3232;
                    _3384 = _3234;
                    _3385 = _3236;
                    _3386 = _3238;
                    _3387 = _3240;
                    _3388 = _3389;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3229 = _3230;
            _3231 = _3232;
            _3233 = _3234;
            _3235 = _3236;
            _3237 = _3238;
            _3239 = _3240;
        }
        uvec4 _3243 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3244 = _3243.z;
        uint _3246 = (_3244 >> 8u) & 15u;
        float _3350;
        float _3352;
        float _3354;
        float _3356;
        float _3358;
        float _3360;
        if (((4294967295u << _3246) & _3149) == 0u)
        {
            _3350 = _3229;
            _3352 = _3231;
            _3354 = _3233;
            _3356 = _3235;
            _3358 = _3237;
            _3360 = _3239;
        }
        else
        {
            float _3375 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
            float _3376 = _3375 * _2208;
            float _3377 = _3375 * _2209;
            float _3378 = _3375 * _2210;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3246 < ((_3244 >> 12u) & 15u))
            {
                float _3351;
                float _3353;
                float _3355;
                float _3357;
                float _3359;
                float _3361;
                float _3510 = _3229;
                float _3511 = _3231;
                float _3512 = _3233;
                float _3513 = _3235;
                float _3514 = _3237;
                float _3515 = _3239;
                uint _3516 = _3246;
                uint _3525;
                bool _3526;
                for (;;)
                {
                    _3525 = texelFetch(g_lightClassification, int((((_3143 << 5u) + (_3129 << 9u)) + (_3516 << 2u)) >> 2u)).x;
                    _3526 = _3525 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3526)
                    {
                        frontier_phi_82_pred = _3515;
                        frontier_phi_82_pred_1 = _3514;
                        frontier_phi_82_pred_2 = _3513;
                        frontier_phi_82_pred_3 = _3512;
                        frontier_phi_82_pred_4 = _3511;
                        frontier_phi_82_pred_5 = _3510;
                    }
                    else
                    {
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _4011;
                        float _4012;
                        float _4013;
                        float _4014;
                        float _4015;
                        float _4016;
                        float _3731 = _3510;
                        float _3732 = _3511;
                        float _3733 = _3512;
                        float _3734 = _3513;
                        float _3735 = _3514;
                        float _3736 = _3515;
                        uint _3737 = _3525;
                        uint _3738;
                        vec4 _3763;
                        float _3764;
                        vec4 _3779;
                        vec3 _3791;
                        vec4 _3806;
                        vec4 _3821;
                        float _3867;
                        bool _3868;
                        for (;;)
                        {
                            uint _3748 = ((_3516 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3737));
                            _3738 = (_3737 + 4294967295u) & _3737;
                            uint _3750 = _3748 * 40u;
                            _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            _3764 = _3763.w;
                            uint _3766 = (_3748 * 40u) + 4u;
                            _3779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 3u)).x));
                            uint _3781 = (_3748 * 40u) + 8u;
                            _3791 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 2u)).x));
                            uint _3793 = (_3748 * 40u) + 16u;
                            _3806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 3u)).x));
                            uint _3808 = (_3748 * 40u) + 20u;
                            _3821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 3u)).x));
                            uint _3823 = (_3748 * 40u) + 24u;
                            vec4 _3836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 3u)).x));
                            uint _3842 = (_3748 * 40u) + 28u;
                            vec4 _3855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 3u)).x));
                            _3867 = fma(_2210, _3855.z, fma(_2209, _3855.y, _3855.x * _2208)) + _3855.w;
                            _3868 = !((fma(_2210, _3836.z, fma(_2209, _3836.y, _3836.x * _2208)) + _3836.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3868)
                            {
                                float _3895 = _3763.x - _2208;
                                float _3896 = _3763.y - _2209;
                                float _3897 = _3763.z - _2210;
                                float _3898 = dot(vec3(_3895, _3896, _3897), vec3(_3895, _3896, _3897));
                                float _3901 = inversesqrt(_3898);
                                float _3902 = _3901 * _3895;
                                float _3903 = _3901 * _3896;
                                float _3904 = _3901 * _3897;
                                float _3908 = 1.0 - (_3898 / (_3764 * _3764));
                                float _5130 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3909 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
                                float _3913 = sqrt(_3898) * _3779.w;
                                float _3915 = 1.39999997615814208984375 / (_3913 + 1.39999997615814208984375);
                                float _3916 = _3915 * _3915;
                                float _3919 = ((1.0 - _3916) * dot(vec3(_3902, _3903, _3904), vec3(_1042, _1045, _1048))) + _3916;
                                float _3922 = _3913 * _3913;
                                float _3926 = (fma(_2210, _3806.z, fma(_2209, _3806.y, _3806.x * _2208)) + _3806.w) / _3867;
                                float _3927 = (fma(_2210, _3821.z, fma(_2209, _3821.y, _3821.x * _2208)) + _3821.w) / _3867;
                                float _3931 = 1.0 - dot(vec2(_3926, _3927), vec2(_3926, _3927));
                                float _5146 = isnan(0.0) ? _3931 : (isnan(_3931) ? 0.0 : max(_3931, 0.0));
                                float _3932 = isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0));
                                float _3933 = _3932 * (((isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0))) * _3909) / ((_3922 * 0.699999988079071044921875) + 1.0));
                                float _3945 = exp2(log2(1.0 / ((_3922 * 3.5) + 5.0)) * 0.25);
                                float _3946 = 1.0 - _1117;
                                float _3953 = sqrt(1.0 - ((1.0 - (_3946 * _3946)) * (1.0 - (_3945 * _3945))));
                                float _3954 = _3953 * _3953;
                                float _3955 = _3954 * _3954;
                                float _3956 = _3902 - _3376;
                                float _3957 = _3903 - _3377;
                                float _3958 = _3904 - _3378;
                                float _3962 = inversesqrt(dot(vec3(_3956, _3957, _3958), vec3(_3956, _3957, _3958)));
                                float _3966 = dot(vec3(_1042, _1045, _1048), vec3((-0.0) - _3376, (-0.0) - _3377, (-0.0) - _3378));
                                float _5157 = isnan(0.0) ? _3966 : (isnan(_3966) ? 0.0 : max(_3966, 0.0));
                                float _3969 = isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0));
                                float _3970 = dot(vec3(_1042, _1045, _1048), vec3(_3962 * _3956, _3962 * _3957, _3962 * _3958));
                                float _5168 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3973 = isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0));
                                float _3977 = ((_3973 * _3973) * (_3955 + (-1.0))) + 1.0;
                                float _3978 = _3915 * _3954;
                                float _3979 = _3978 * _3978;
                                float _3985 = ((1.0 - _3979) * dot(vec3(_1042, _1045, _1048), vec3(_3902, _3903, _3904))) + _3979;
                                float _5179 = isnan(0.0) ? _3985 : (isnan(_3985) ? 0.0 : max(_3985, 0.0));
                                float _3986 = isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0));
                                float _3987 = 1.0 - _3954;
                                float _3997 = (0.5 / (((_3986 * ((_3969 * _3987) + _3954)) + 9.9999999392252902907785028219223e-09) + (((_3986 * _3987) + _3954) * _3969))) * _3986;
                                float _5190 = isnan(0.0) ? _3997 : (isnan(_3997) ? 0.0 : max(_3997, 0.0));
                                float _4007 = (_3932 * _3909) * (((_3955 * 3.1415927410125732421875) * (isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0)))) / ((_3977 * _3977) * ((_3922 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3933 * _3779.z;
                                frontier_phi_88_pred_1 = _3933 * _3779.y;
                                frontier_phi_88_pred_2 = _3933 * _3779.x;
                                frontier_phi_88_pred_3 = _4007 * _3791.z;
                                frontier_phi_88_pred_4 = _4007 * _3791.y;
                                frontier_phi_88_pred_5 = _4007 * _3791.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4016 = frontier_phi_88_pred;
                            _4015 = frontier_phi_88_pred_1;
                            _4014 = frontier_phi_88_pred_2;
                            _4013 = frontier_phi_88_pred_3;
                            _4012 = frontier_phi_88_pred_4;
                            _4011 = frontier_phi_88_pred_5;
                            _3721 = _4014 + _3734;
                            _3722 = _4015 + _3735;
                            _3723 = _4016 + _3736;
                            _3718 = _4011 + _3731;
                            _3719 = _4012 + _3732;
                            _3720 = _4013 + _3733;
                            if (_3738 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3731 = _3718;
                                _3732 = _3719;
                                _3733 = _3720;
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3738;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3723;
                        frontier_phi_82_pred_1 = _3722;
                        frontier_phi_82_pred_2 = _3721;
                        frontier_phi_82_pred_3 = _3720;
                        frontier_phi_82_pred_4 = _3719;
                        frontier_phi_82_pred_5 = _3718;
                    }
                    _3361 = frontier_phi_82_pred;
                    _3359 = frontier_phi_82_pred_1;
                    _3357 = frontier_phi_82_pred_2;
                    _3355 = frontier_phi_82_pred_3;
                    _3353 = frontier_phi_82_pred_4;
                    _3351 = frontier_phi_82_pred_5;
                    uint _3517 = _3516 + 1u;
                    if (_3517 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3510 = _3351;
                        _3511 = _3353;
                        _3512 = _3355;
                        _3513 = _3357;
                        _3514 = _3359;
                        _3515 = _3361;
                        _3516 = _3517;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3357;
                frontier_phi_63_64_ladder_1 = _3361;
                frontier_phi_63_64_ladder_2 = _3359;
                frontier_phi_63_64_ladder_3 = _3355;
                frontier_phi_63_64_ladder_4 = _3353;
                frontier_phi_63_64_ladder_5 = _3351;
            }
            else
            {
                frontier_phi_63_64_ladder = _3235;
                frontier_phi_63_64_ladder_1 = _3239;
                frontier_phi_63_64_ladder_2 = _3237;
                frontier_phi_63_64_ladder_3 = _3233;
                frontier_phi_63_64_ladder_4 = _3231;
                frontier_phi_63_64_ladder_5 = _3229;
            }
            _3350 = frontier_phi_63_64_ladder_5;
            _3352 = frontier_phi_63_64_ladder_4;
            _3354 = frontier_phi_63_64_ladder_3;
            _3356 = frontier_phi_63_64_ladder;
            _3358 = frontier_phi_63_64_ladder_2;
            _3360 = frontier_phi_63_64_ladder_1;
        }
        float _3365 = isnan(1.0) ? _1101 : (isnan(_1101) ? 1.0 : min(_1101, 1.0));
        _3162 = (_3365 * _3356) + _2674;
        _3164 = (_3365 * _3358) + _2676;
        _3166 = (_3365 * _3360) + _2678;
        _3168 = ((_3350 * _1085) * _3365) + _3012;
        _3170 = ((_3352 * _1087) * _3365) + _3014;
        _3172 = ((_3354 * _1088) * _3365) + _3016;
    }
    else
    {
        _3162 = _2674;
        _3164 = _2676;
        _3166 = _2678;
        _3168 = _3012;
        _3170 = _3014;
        _3172 = _3016;
    }
    float _5206 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _5217 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _5228 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _3189 = ((isnan(1.0) ? _5206 : (isnan(_5206) ? 1.0 : min(_5206, 1.0))) * (_3162 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1101))) + ((_3168 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    float _3190 = ((isnan(1.0) ? _5217 : (isnan(_5217) ? 1.0 : min(_5217, 1.0))) * (_3164 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1101))) + ((_3170 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    float _3191 = ((isnan(1.0) ? _5228 : (isnan(_5228) ? 1.0 : min(_5228, 1.0))) * (_3166 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1101))) + ((_3172 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    uint _3192 = _293 + 6u;
    float _3200 = _1023 / cbSceneParam._m0[86u].x;
    float _3201 = _1024 / cbSceneParam._m0[86u].y;
    vec4 _3215 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3200, _3201, (log2((isnan(cbSceneParam._m0[77u].w) ? _946 : (isnan(_946) ? cbSceneParam._m0[77u].w : min(_946, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3217 = _3215.x;
    float _3218 = _3215.y;
    float _3219 = _3215.z;
    float _3220 = _3215.w;
    float _3292;
    float _3294;
    float _3296;
    float _3298;
    if (_946 > cbSceneParam._m0[78u].w)
    {
        float _3254 = isnan(_946) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _946 : min(cbSceneParam._m0[80u].w, _946));
        float _3255 = _3254 / _946;
        float _3266 = _3255 * _996;
        float _3267 = _997 * _3255;
        float _3268 = (-0.0) - _3267;
        float _3270 = _3255 * _998;
        float _3272 = (cbSceneParam._m0[77u].w * _3268) / _3254;
        float _3273 = _3272 + cbSceneParam._m0[79u].w;
        float _3274 = cbSceneParam._m0[79u].w - _3267;
        float _3280 = sqrt(((_3266 * _3266) + (_3267 * _3267)) + (_3270 * _3270));
        float _3283 = (1.0 - (cbSceneParam._m0[77u].w / _3254)) * _3280;
        float _3288 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3290 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3467;
        if (abs((_3268 - _3272) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3467 = ((((_3273 > 0.0) ? exp2(_3288 * _3273) : (2.0 - exp2(_3290 * _3273))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3283;
        }
        else
        {
            float _3411 = 1.0 / cbSceneParam._m0[80u].x;
            float _3412 = isnan(_3274) ? _3273 : (isnan(_3273) ? _3274 : max(_3273, _3274));
            float _3413 = isnan(_3274) ? _3273 : (isnan(_3273) ? _3274 : min(_3273, _3274));
            float _3422 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : min(_3412, 0.0));
            float _3423 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : min(_3413, 0.0));
            _3467 = ((abs(_3280 / _3268) * cbSceneParam._m0[80u].y) * ((((_3422 - _3423) * 2.0) - ((exp2(_3288 * (isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0)))) - exp2(_3288 * (isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0))))) * _3411)) - ((exp2(_3290 * _3422) - exp2(_3290 * _3423)) * _3411))) + (_3283 * cbSceneParam._m0[80u].z);
        }
        vec4 _3469 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3200, _3201, 1.0), 0.0);
        float _3478 = exp2((_3467 * (-1.44269502162933349609375)) * (1.0 - _3469.w));
        float _3479 = log2(_3478);
        float _3495 = log2(_3220);
        _3292 = (exp2(_3495 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3479 * cbSceneParam._m0[78u].x)) * _3469.x) / cbSceneParam._m0[78u].x)) + _3217;
        _3294 = (exp2(_3495 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3479 * cbSceneParam._m0[78u].y)) * _3469.y) / cbSceneParam._m0[78u].y)) + _3218;
        _3296 = (exp2(_3495 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3479 * cbSceneParam._m0[78u].z)) * _3469.z) / cbSceneParam._m0[78u].z)) + _3219;
        _3298 = _3478 * _3220;
    }
    else
    {
        _3292 = _3217;
        _3294 = _3218;
        _3296 = _3219;
        _3298 = _3220;
    }
    bool _3505;
    vec4 _3308;
    vec4 _3330;
    float _3332;
    float _3336;
    float _3337;
    float _3338;
    float _3339;
    bool _3349;
    for (;;)
    {
        _3308 = cbMatDynParam._m0[0u];
        float _3310 = roundEven(_3308.y);
        bool _3311 = _3310 == 3.0;
        float _3312 = log2(_3298);
        float _3319 = exp2(_3312 * cbSceneParam._m0[78u].x) * _3189;
        float _3320 = exp2(_3312 * cbSceneParam._m0[78u].y) * _3190;
        float _3321 = exp2(_3312 * cbSceneParam._m0[78u].z) * _3191;
        float _3328 = _1012 + (-0.5);
        _3330 = cbMtdParam._m0[1u];
        _3332 = _3330.y * _3328;
        float _3335 = (_3310 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3336 = _3335 * (_3311 ? _3319 : (_3319 + (cbSceneParam._m0[72u].w * _3292)));
        _3337 = _3335 * (_3311 ? _3320 : (_3320 + (cbSceneParam._m0[72u].w * _3294)));
        _3338 = _3335 * (_3311 ? _3321 : (_3321 + (cbSceneParam._m0[72u].w * _3296)));
        _3339 = _3328 * 0.999000012874603271484375;
        _3349 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3349)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3339) < 0.5)
            {
                _3505 = true;
                break;
            }
        }
        uint _3446 = _1061 + uint(_3308.w);
        if ((cbInstanceData._m0[_3446].w < 1.0) && ((cbInstanceData._m0[_3446].w + _3339) < 0.5))
        {
            _3505 = true;
            break;
        }
        if ((_3332 + 1.0) < _3330.x)
        {
            _3505 = true;
            break;
        }
        _3505 = false;
        break;
    }
    float _3709;
    if (_3505)
    {
        discard_state = true;
        _3709 = 0.0;
    }
    else
    {
        _3709 = cbInstanceData._m0[_3192].w;
    }
    SV_Target.x = _3336;
    SV_Target.y = _3337;
    SV_Target.z = _3338;
    SV_Target.w = _3709;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3192].w;
    discard_exit();
}


