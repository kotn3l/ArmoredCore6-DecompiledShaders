#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1359;
float _4022;
float _4023;
float _4024;
float _4025;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _378 = _376.x;
    float _390 = dot(vec4(_378, _376.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _340.x) * 2.0) - ((((_378 - _390) * cbMtdParam._m0[23u].w) + _390) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4034 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _415 = (_408 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _416 = (_408 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _417 = (_408 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _434 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _466 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _480 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _340.y) * 2.0) - ((((_456 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4045 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _488 = (_481 * ((_434.x * cbMtdParam._m0[13u].x) - _415)) + _415;
    float _489 = (_481 * ((_434.y * cbMtdParam._m0[13u].y) - _416)) + _416;
    float _490 = (_481 * ((_434.z * cbMtdParam._m0[13u].z) - _417)) + _417;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _529 = _525.z;
    float _536 = ((_508.x - _527) * _408) + _527;
    float _537 = ((_508.y - _528) * _408) + _528;
    float _538 = ((_508.z - _529) * _408) + _529;
    vec4 _550 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _563 = ((_550.z - _538) * _481) + _538;
    float _566 = ((((_550.x - _536) * _481) + _536) * 2.0) + (-1.0);
    float _568 = ((((_550.y - _537) * _481) + _537) * 2.0) + (-1.0);
    float _569 = dot(vec2(_566, _568), vec2(_566, _568));
    float _4056 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _574 = sqrt(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _615 = _613.x;
    float _616 = 1.0 - _615;
    float _632 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_615 - _616) * cbMtdParam._m0[24u].z) + _616) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4067 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _633 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _640 = (_633 * (cbMtdParam._m0[17u].x - _488)) + _488;
    float _641 = (_633 * (cbMtdParam._m0[17u].y - _489)) + _489;
    float _642 = (_633 * (cbMtdParam._m0[17u].z - _490)) + _490;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _670 = _668.x;
    float _688 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _670) * _408) + _670;
    float _705 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _688) * _481) + _688;
    float _709 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _705) * cbMtdParam._m0[19u].z) + _705;
    float _711 = _709 - (_709 * _633);
    float _715 = (cbMtdParam._m0[19u].w * (_588.z - _563)) + _563;
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _735 = (_728.x * 2.0) + (-1.0);
    float _736 = (_728.y * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _4078 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _745 = (_633 * (_728.z - _715)) + _715;
    float _748 = (((_588.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _566;
    float _749 = (((_588.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _568;
    float _761 = (((_735 - _748) + (cbMtdParam._m0[21u].x * _748)) * _633) + _748;
    float _762 = (((_736 - _749) + (cbMtdParam._m0[21u].x * _749)) * _633) + _749;
    float _763 = (_633 * (sqrt(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) - _574)) + _574;
    float _765 = cbMtdParam._m0[22u].x + _588.w;
    float _768 = fma(_763, _239 * NORMAL.x, fma(_762, _246 * TANGENT.x, (_232 * _224) * _761));
    float _771 = fma(_763, _239 * NORMAL.y, fma(_762, _246 * TANGENT.y, (_232 * _225) * _761));
    float _774 = fma(_763, _239 * NORMAL.z, fma(_762, _246 * TANGENT.z, (_232 * _226) * _761));
    float _778 = inversesqrt(dot(vec3(_768, _771, _774), vec3(_768, _771, _774)));
    float _779 = _778 * _768;
    float _780 = _778 * _771;
    float _781 = _778 * _774;
    float _4089 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _782 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4111 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4122 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4133 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4144 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _787 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _801 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _852 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _842);
    float _853 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _842);
    float _854 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _842);
    float _858 = inversesqrt(dot(vec3(_852, _853, _854), vec3(_852, _853, _854)));
    float _859 = _852 * _858;
    float _860 = _853 * _858;
    float _861 = _854 * _858;
    vec4 _866 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _868 = _866.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1040 = sqrt(((_852 * _852) + (_853 * _853)) + (_854 * _854));
        float _1046 = (cbMatDynParam._m0[5u].x * _1040) + cbMatDynParam._m0[5u].y;
        float _4155 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1051 = (cbMatDynParam._m0[5u].z * _1040) + cbMatDynParam._m0[5u].w;
        float _4166 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) - _1047)) + _1047) < ((_868 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _879 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _880 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _898 = fma(_781, cbSceneParam._m0[5u].z, fma(_780, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _779));
    float _901 = fma(_781, cbSceneParam._m0[6u].z, fma(_780, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _779));
    float _904 = fma(_781, cbSceneParam._m0[7u].z, fma(_780, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _779));
    uint _917 = _252 + 9u;
    uint _918 = _917 + uint(cbMatDynParam._m0[0u].w);
    float _924 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * cbInstanceData._m0[_918].x;
    float _925 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * cbInstanceData._m0[_918].y;
    float _926 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * cbInstanceData._m0[_918].z;
    float _4177 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _4188 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _930 = 1.0 - _787;
    float _931 = _927 * _930;
    float _932 = _928 * _930;
    float _933 = _929 * _930;
    float _938 = (_927 + (-0.039999999105930328369140625)) * _787;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _787;
    float _940 = (_929 + (-0.039999999105930328369140625)) * _787;
    float _941 = _938 + 0.039999999105930328369140625;
    float _943 = _939 + 0.039999999105930328369140625;
    float _944 = _940 + 0.039999999105930328369140625;
    vec4 _953 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _879, cbSceneParam._m0[86u].y * _880));
    float _957 = ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * TEXCOORD_5.w) * _953.x;
    float _958 = dot(vec3(_779, _780, _781), vec3(_859, _860, _861));
    float _961 = _958 * 2.0;
    float _965 = (_961 * _779) - _859;
    float _966 = (_961 * _780) - _860;
    float _967 = (_961 * _781) - _861;
    float _971 = abs(dot(vec3(_859, _860, _861), vec3(_779, _780, _781)));
    float _4210 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _973 = sqrt(_782);
    float _986 = exp2((_973 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_973 * 3.0));
    float _992 = (1.0 - _986) * ((_973 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _993 = _986 * _973;
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1358;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1083 = fma(_1029, cbModelParam._m0[26u].z, fma(_1025, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1021));
        float _1087 = fma(_1029, cbModelParam._m0[27u].z, fma(_1025, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1021));
        float _1091 = fma(_1029, cbModelParam._m0[28u].z, fma(_1025, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1021));
        float _1116 = _1021 + _779;
        float _1117 = _1025 + _780;
        float _1118 = _1029 + _781;
        float _1128 = fma(_1118, cbModelParam._m0[26u].z, fma(_1117, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116)) - _1083;
        float _1129 = fma(_1118, cbModelParam._m0[27u].z, fma(_1117, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116)) - _1087;
        float _1130 = fma(_1118, cbModelParam._m0[28u].z, fma(_1117, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116)) - _1091;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1083 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1087 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[34u].z) + ((((((_1091 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1186 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1152.x + (-0.5));
        float _1188 = _1186 * (_1152.y + (-0.5));
        float _1189 = _1186 * (_1152.z + (-0.5));
        float _1196 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1159.x + (-0.5));
        float _1198 = _1196 * (_1159.y + (-0.5));
        float _1199 = _1196 * (_1159.z + (-0.5));
        float _1206 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1166.x + (-0.5));
        float _1208 = _1206 * (_1166.y + (-0.5));
        float _1209 = _1206 * (_1166.z + (-0.5));
        float _1216 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1173.x + (-0.5));
        float _1218 = _1216 * (_1173.y + (-0.5));
        float _1219 = _1216 * (_1173.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1240 = (dot(vec3(_779, _780, _781), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1250 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4258 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1252 + 1.0))) + _1257) * _1220;
        float _1267 = _1188 * 0.5;
        float _1268 = _1198 * 0.5;
        float _1269 = _1208 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_779, _780, _781), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4291 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1294 + 1.0))) + _1299) * _1221;
        float _1309 = _1189 * 0.5;
        float _1310 = _1199 * 0.5;
        float _1311 = _1209 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_779, _780, _781), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4324 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1336 + 1.0))) + _1341) * _1222;
        _1358 = _1189;
        _1360 = _1188;
        _1361 = _1187;
        _1362 = _1199;
        _1363 = _1198;
        _1364 = _1197;
        _1365 = _1209;
        _1366 = _1208;
        _1367 = _1207;
        _1368 = _1222;
        _1369 = _1221;
        _1370 = _1220;
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1359;
        _1360 = _1359;
        _1361 = _1359;
        _1362 = _1359;
        _1363 = _1359;
        _1364 = _1359;
        _1365 = _1359;
        _1366 = _1359;
        _1367 = _1359;
        _1368 = _1359;
        _1369 = _1359;
        _1370 = _1359;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1400 = fma(_1029, cbModelParam._m0[30u].z, fma(_1025, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1021));
        float _1404 = fma(_1029, cbModelParam._m0[31u].z, fma(_1025, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1021));
        float _1408 = fma(_1029, cbModelParam._m0[32u].z, fma(_1025, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1021));
        float _1431 = _1021 + _779;
        float _1432 = _1025 + _780;
        float _1433 = _1029 + _781;
        float _1443 = fma(_1433, cbModelParam._m0[30u].z, fma(_1432, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1431)) - _1400;
        float _1444 = fma(_1433, cbModelParam._m0[31u].z, fma(_1432, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1431)) - _1404;
        float _1445 = fma(_1433, cbModelParam._m0[32u].z, fma(_1432, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1431)) - _1408;
        float _1449 = inversesqrt(dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445)));
        float _1462 = ((_1449 * _1443) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1400 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1449 * _1444) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1404 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1449 * _1445) / cbModelParam._m0[35u].z) + ((((((_1408 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        float _1499 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1466.x + (-0.5));
        float _1501 = _1499 * (_1466.y + (-0.5));
        float _1502 = _1499 * (_1466.z + (-0.5));
        float _1509 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1473.x + (-0.5));
        float _1511 = _1509 * (_1473.y + (-0.5));
        float _1512 = _1509 * (_1473.z + (-0.5));
        float _1519 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1480.x + (-0.5));
        float _1521 = _1519 * (_1480.y + (-0.5));
        float _1522 = _1519 * (_1480.z + (-0.5));
        float _1529 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1487.x + (-0.5));
        float _1531 = _1529 * (_1487.y + (-0.5));
        float _1532 = _1529 * (_1487.z + (-0.5));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = _1500 * 0.5;
        float _1537 = _1510 * 0.5;
        float _1538 = _1520 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_779, _780, _781), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4387 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1563 + 1.0))) + _1568) * _1533;
        float _1578 = _1501 * 0.5;
        float _1579 = _1511 * 0.5;
        float _1580 = _1521 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_779, _780, _781), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4420 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1605 + 1.0))) + _1610) * _1534;
        float _1620 = _1502 * 0.5;
        float _1621 = _1512 * 0.5;
        float _1622 = _1522 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_779, _780, _781), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4453 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1647 + 1.0))) + _1652) * _1535;
        _1669 = _1502;
        _1670 = _1501;
        _1671 = _1500;
        _1672 = _1512;
        _1673 = _1511;
        _1674 = _1510;
        _1675 = _1522;
        _1676 = _1521;
        _1677 = _1520;
        _1678 = _1535;
        _1679 = _1534;
        _1680 = _1533;
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
    }
    else
    {
        _1669 = _1359;
        _1670 = _1359;
        _1671 = _1359;
        _1672 = _1359;
        _1673 = _1359;
        _1674 = _1359;
        _1675 = _1359;
        _1676 = _1359;
        _1677 = _1359;
        _1678 = _1359;
        _1679 = _1359;
        _1680 = _1359;
        _1681 = 0.0;
        _1682 = 0.0;
        _1683 = 0.0;
    }
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1371)) + _1371;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1372)) + _1372;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1373)) + _1373;
    float _1716 = fma(_1695, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1693 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1695, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1693 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1695, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1693));
    float _1737 = _965 * 0.5;
    float _1738 = _966 * 0.5;
    float _1739 = _967 * 0.5;
    float _1740 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1743 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1746 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1780;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1753 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1358, _1362, _1365, _1368));
        float _1757 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1761 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1768 = dot(vec4(cbModelParam._m0[39u]), vec4(_1737, _1738, _1739, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1768) ? 0.0 : (isnan(0.0) ? _1768 : max(0.0, _1768))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1791;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1782 = dot(vec4(cbModelParam._m0[40u]), vec4(_1737, _1738, _1739, 1.0));
        _1791 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1791 = 1.0;
    }
    float _1795 = (_1791 * cbModelParam._m0[1u].x) + (_1780 * (1.0 - cbModelParam._m0[1u].x));
    float _1805 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _782);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1805 : min(cbModelParam._m0[25u].z, _1805));
    float _1887;
    float _1889;
    float _1891;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1854 = fma(_1029, cbModelParam._m0[13u].z, fma(_1025, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1021)) + cbModelParam._m0[13u].w;
        float _1858 = fma(_1029, cbModelParam._m0[14u].z, fma(_1025, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1021)) + cbModelParam._m0[14u].w;
        float _1862 = fma(_1029, cbModelParam._m0[15u].z, fma(_1025, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1021)) + cbModelParam._m0[15u].w;
        float _1865 = fma(_967, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965));
        float _1868 = fma(_967, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965));
        float _1871 = fma(_967, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965));
        float _1899;
        if (_1865 > 0.0)
        {
            _1899 = abs((1.0 - _1854) / _1865);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1854 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1899 = frontier_phi_17_15_ladder;
        }
        float _2071;
        if (_1868 > 0.0)
        {
            _2071 = abs((1.0 - _1858) / _1868);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1858 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2071 = frontier_phi_26_22_ladder;
        }
        float _2366;
        if (_1871 > 0.0)
        {
            _2366 = abs((1.0 - _1862) / _1871);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1862 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2366 = frontier_phi_38_33_ladder;
        }
        float _2368 = isnan(_2071) ? _1899 : (isnan(_1899) ? _2071 : min(_1899, _2071));
        float _2369 = isnan(_2366) ? _2368 : (isnan(_2368) ? _2366 : min(_2368, _2366));
        float _2373 = (_2369 * _1865) + _1854;
        float _2374 = (_2369 * _1868) + _1858;
        float _2375 = (_2369 * _1871) + _1862;
        float _2376 = _2369 * 9.9999997473787516355514526367188e-05;
        float _2378 = (-1.0) - _2376;
        float _2380 = _2376 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2375 > _2380) || ((_2375 < _2378) || ((_2374 > _2380) || ((_2374 < _2378) || ((_2373 < _2378) || (_2373 > _2380))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2375, cbModelParam._m0[9u].z, fma(_2374, cbModelParam._m0[9u].y, _2373 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2375, cbModelParam._m0[10u].z, fma(_2374, cbModelParam._m0[10u].y, _2373 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2375, cbModelParam._m0[11u].z, fma(_2374, cbModelParam._m0[11u].y, _2373 * cbModelParam._m0[11u].x))), _1806);
            frontier_phi_16_38_ladder = _2520.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2520.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2520.x * cbModelParam._m0[1u].y;
        }
        _1887 = frontier_phi_16_38_ladder_2;
        _1889 = frontier_phi_16_38_ladder_1;
        _1891 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1875 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_965, _966, _967), _1806);
        _1887 = _1875.x * cbModelParam._m0[1u].y;
        _1889 = _1875.y * cbModelParam._m0[1u].y;
        _1891 = _1875.z * cbModelParam._m0[1u].y;
    }
    float _1895 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _782);
    float _1896 = isnan(_1895) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1895 : min(cbModelParam._m0[25u].w, _1895));
    float _1986;
    float _1988;
    float _1990;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1950 = fma(_1029, cbModelParam._m0[21u].z, fma(_1025, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1021)) + cbModelParam._m0[21u].w;
        float _1954 = fma(_1029, cbModelParam._m0[22u].z, fma(_1025, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1021)) + cbModelParam._m0[22u].w;
        float _1958 = fma(_1029, cbModelParam._m0[23u].z, fma(_1025, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1021)) + cbModelParam._m0[23u].w;
        float _1961 = fma(_967, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965));
        float _1964 = fma(_967, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965));
        float _1967 = fma(_967, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965));
        float _2076;
        if (_1961 > 0.0)
        {
            _2076 = abs((1.0 - _1950) / _1961);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1950 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2076 = frontier_phi_28_24_ladder;
        }
        float _2393;
        if (_1964 > 0.0)
        {
            _2393 = abs((1.0 - _1954) / _1964);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1954 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2393 = frontier_phi_40_35_ladder;
        }
        float _2731;
        if (_1967 > 0.0)
        {
            _2731 = abs((1.0 - _1958) / _1967);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1958 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2731 = frontier_phi_50_47_ladder;
        }
        float _2733 = isnan(_2393) ? _2076 : (isnan(_2076) ? _2393 : min(_2076, _2393));
        float _2734 = isnan(_2731) ? _2733 : (isnan(_2733) ? _2731 : min(_2733, _2731));
        float _2738 = (_2734 * _1961) + _1950;
        float _2739 = (_2734 * _1964) + _1954;
        float _2740 = (_2734 * _1967) + _1958;
        float _2741 = _2734 * 9.9999997473787516355514526367188e-05;
        float _2742 = (-1.0) - _2741;
        float _2744 = _2741 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2740 > _2744) || ((_2740 < _2742) || ((_2739 > _2744) || ((_2739 < _2742) || ((_2738 < _2742) || (_2738 > _2744))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2740, cbModelParam._m0[17u].z, fma(_2739, cbModelParam._m0[17u].y, _2738 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2740, cbModelParam._m0[18u].z, fma(_2739, cbModelParam._m0[18u].y, _2738 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2740, cbModelParam._m0[19u].z, fma(_2739, cbModelParam._m0[19u].y, _2738 * cbModelParam._m0[19u].x))), _1896);
            frontier_phi_25_50_ladder = _2862.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2862.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2862.x * cbModelParam._m0[1u].z;
        }
        _1986 = frontier_phi_25_50_ladder_2;
        _1988 = frontier_phi_25_50_ladder_1;
        _1990 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1970 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_965, _966, _967), _1896);
        _1986 = _1970.x * cbModelParam._m0[1u].z;
        _1988 = _1970.y * cbModelParam._m0[1u].z;
        _1990 = _1970.z * cbModelParam._m0[1u].z;
    }
    float _2003 = (((_992 * _941) + _993) * _957) * ((cbModelParam._m0[1u].w * (_1986 - _1887)) + _1887);
    float _2005 = (((_992 * _943) + _993) * _957) * ((cbModelParam._m0[1u].w * (_1988 - _1889)) + _1889);
    float _2007 = (((_992 * _944) + _993) * _957) * ((cbModelParam._m0[1u].w * (_1990 - _1891)) + _1891);
    float _2010 = fma(_2007, cbSceneParam._m0[89u].z, fma(_2005, cbSceneParam._m0[89u].y, _2003 * cbSceneParam._m0[89u].x));
    float _2013 = fma(_2007, cbSceneParam._m0[90u].z, fma(_2005, cbSceneParam._m0[90u].y, _2003 * cbSceneParam._m0[90u].x));
    float _2016 = fma(_2007, cbSceneParam._m0[91u].z, fma(_2005, cbSceneParam._m0[91u].y, _2003 * cbSceneParam._m0[91u].x));
    float _2050 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2063 = _2050 / _2062;
    float _2064 = _2054 / _2062;
    float _2065 = _2058 / _2062;
    float _2212;
    float _2213;
    float _2214;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2092 = ((uint(_2065 > cbSceneParam._m0[59u].y) + uint(_2065 > cbSceneParam._m0[59u].x)) + uint(_2065 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2093 = _2092 + 43u;
        uint _2101 = _2092 + 44u;
        uint _2109 = _2092 + 45u;
        uint _2117 = _2092 + 46u;
        float _2128 = fma(_2062, cbSceneParam._m0[_2093].w, fma(_2058, cbSceneParam._m0[_2093].z, fma(_2054, cbSceneParam._m0[_2093].y, _2050 * cbSceneParam._m0[_2093].x)));
        float _2132 = fma(_2062, cbSceneParam._m0[_2101].w, fma(_2058, cbSceneParam._m0[_2101].z, fma(_2054, cbSceneParam._m0[_2101].y, _2050 * cbSceneParam._m0[_2101].x)));
        float _2140 = fma(_2062, cbSceneParam._m0[_2117].w, fma(_2058, cbSceneParam._m0[_2117].z, fma(_2054, cbSceneParam._m0[_2117].y, _2050 * cbSceneParam._m0[_2117].x)));
        float _2145 = cbSceneParam._m0[33u].z * _2140;
        float _2147 = cbSceneParam._m0[33u].w * _2140;
        float _2150 = fma(_2062, cbSceneParam._m0[_2109].w, fma(_2058, cbSceneParam._m0[_2109].z, fma(_2054, cbSceneParam._m0[_2109].y, _2050 * cbSceneParam._m0[_2109].x))) / _2140;
        float _2198 = (cbSceneParam._m0[33u].x - sqrt(((_2064 * _2064) + (_2063 * _2063)) + (_2065 * _2065))) * cbSceneParam._m0[33u].y;
        float _4579 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2205 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 + _2128) / _2140, (_2147 + _2132) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2147 + _2128) / _2140, (_2132 - _2145) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 - _2145) / _2140, (_2132 - _2147) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 - _2147) / _2140, (_2145 + _2132) / _2140), _2150), 0.0)).x), vec4(0.25)));
        _2212 = 1.0 - (_2205 * cbSceneParam._m0[34u].x);
        _2213 = 1.0 - (_2205 * cbSceneParam._m0[34u].y);
        _2214 = 1.0 - (_2205 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2212 = 1.0;
        _2213 = 1.0;
        _2214 = 1.0;
    }
    float _2278;
    float _2280;
    float _2282;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2266 = fma(_2062, cbSceneParam._m0[63u].w, fma(_2058, cbSceneParam._m0[63u].z, fma(_2054, cbSceneParam._m0[63u].y, _2050 * cbSceneParam._m0[63u].x)));
        float _2267 = fma(_2062, cbSceneParam._m0[60u].w, fma(_2058, cbSceneParam._m0[60u].z, fma(_2054, cbSceneParam._m0[60u].y, _2050 * cbSceneParam._m0[60u].x))) / _2266;
        float _2268 = fma(_2062, cbSceneParam._m0[61u].w, fma(_2058, cbSceneParam._m0[61u].z, fma(_2054, cbSceneParam._m0[61u].y, _2050 * cbSceneParam._m0[61u].x))) / _2266;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2267 >= cbSceneParam._m0[64u].x) && (_2268 >= cbSceneParam._m0[64u].y)) && (_2267 <= cbSceneParam._m0[64u].z)) && (_2268 <= cbSceneParam._m0[64u].w))
        {
            float _2406 = fma(_2062, cbSceneParam._m0[62u].w, fma(_2058, cbSceneParam._m0[62u].z, fma(_2054, cbSceneParam._m0[62u].y, _2050 * cbSceneParam._m0[62u].x))) / _2266;
            float _2410 = isnan(cbSceneParam._m0[41u].w) ? _2406 : (isnan(_2406) ? cbSceneParam._m0[41u].w : max(_2406, cbSceneParam._m0[41u].w));
            float _2453 = (cbSceneParam._m0[33u].x - sqrt(((_2064 * _2064) + (_2063 * _2063)) + (_2065 * _2065))) * cbSceneParam._m0[33u].y;
            float _4595 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
            float _2460 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2267, cbSceneParam._m0[33u].w + _2268), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2267, _2268 - cbSceneParam._m0[33u].z), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2267 - cbSceneParam._m0[33u].z, _2268 - cbSceneParam._m0[33u].w), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2267 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2268), _2410), 0.0)).x), vec4(0.25)));
            float _2464 = 1.0 - (_2460 * cbSceneParam._m0[34u].x);
            float _2465 = 1.0 - (_2460 * cbSceneParam._m0[34u].y);
            float _2466 = 1.0 - (_2460 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2466) ? _2214 : (isnan(_2214) ? _2466 : min(_2214, _2466));
            frontier_phi_37_36_ladder_1 = isnan(_2465) ? _2213 : (isnan(_2213) ? _2465 : min(_2213, _2465));
            frontier_phi_37_36_ladder_2 = isnan(_2464) ? _2212 : (isnan(_2212) ? _2464 : min(_2212, _2464));
        }
        else
        {
            frontier_phi_37_36_ladder = _2214;
            frontier_phi_37_36_ladder_1 = _2213;
            frontier_phi_37_36_ladder_2 = _2212;
        }
        _2278 = frontier_phi_37_36_ladder_2;
        _2280 = frontier_phi_37_36_ladder_1;
        _2282 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2278 = _2212;
        _2280 = _2213;
        _2282 = _2214;
    }
    uvec4 _2287 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2289 = _2287.x * 14u;
    uint _2290 = _2289 + 13u;
    float _2297 = _957 + (-1.0);
    float _2302 = (cbLight._m0[_2290].x * _2297) + 1.0;
    float _2303 = (cbLight._m0[_2290].y * _2297) + 1.0;
    float _2304 = (cbLight._m0[_2290].z * _2297) + 1.0;
    float _2305 = (cbLight._m0[_2290].w * _2297) + 1.0;
    uint _2306 = _2289 + 5u;
    float _2312 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
    uint _2316 = _2289 + 4u;
    float _2325 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
    uint _2329 = _2289 | 1u;
    float _2340 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_779, _780, _781));
    float _2343 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_779, _780, _781));
    float _4631 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _4642 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2348 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * 0.3183098733425140380859375;
    float _2350 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * 0.3183098733425140380859375;
    float _2357 = ((cbLight._m0[_2306].x * _2312) * _2350) + (((cbLight._m0[_2316].x * _2278) * _2325) * _2348);
    float _2358 = ((_2312 * cbLight._m0[_2306].y) * _2350) + (((cbLight._m0[_2316].y * _2280) * _2325) * _2348);
    float _2359 = ((_2312 * cbLight._m0[_2306].z) * _2350) + (((cbLight._m0[_2316].z * _2282) * _2325) * _2348);
    uvec4 _2363 = floatBitsToUint(cbLight._m0[_2289 + 12u]);
    bool _2365 = _2363.x == 0u;
    float _2467;
    float _2469;
    float _2471;
    if (_2365)
    {
        _2467 = _2357;
        _2469 = _2358;
        _2471 = _2359;
    }
    else
    {
        uint _2475 = _2289 + 6u;
        float _2491 = (dot(vec3(cbLight._m0[_2289 + 2u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2492 = _2491 * _2491;
        float _4653 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2493 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2494 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2467 = (((cbLight._m0[_2475].x * 0.3183098733425140380859375) * _2493) * _2494) + _2357;
        _2469 = (((cbLight._m0[_2475].y * 0.3183098733425140380859375) * _2493) * _2494) + _2358;
        _2471 = (((cbLight._m0[_2475].z * 0.3183098733425140380859375) * _2493) * _2494) + _2359;
    }
    bool _2474 = _2363.y == 0u;
    float _2529;
    float _2531;
    float _2533;
    if (_2474)
    {
        _2529 = _2467;
        _2531 = _2469;
        _2533 = _2471;
    }
    else
    {
        uint _2702 = _2289 + 7u;
        float _2718 = (dot(vec3(cbLight._m0[_2289 + 3u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2719 = _2718 * _2718;
        float _4669 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2720 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2721 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2529 = (((cbLight._m0[_2702].x * 0.3183098733425140380859375) * _2720) * _2721) + _2467;
        _2531 = (((cbLight._m0[_2702].y * 0.3183098733425140380859375) * _2720) * _2721) + _2469;
        _2533 = (((cbLight._m0[_2702].z * 0.3183098733425140380859375) * _2720) * _2721) + _2471;
    }
    uint _2536 = _2289 + 8u;
    float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _782) * 0.949999988079071044921875);
    float _2550 = _2549 * _2549;
    float _2551 = cbLight._m0[_2289].x + _859;
    float _2552 = cbLight._m0[_2289].y + _860;
    float _2553 = cbLight._m0[_2289].z + _861;
    float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
    float _2558 = _2557 * _2551;
    float _2559 = _2557 * _2552;
    float _2560 = _2557 * _2553;
    float _2561 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2289].xyz));
    float _4685 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _4696 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _2565 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _2566 = dot(vec3(_779, _780, _781), vec3(_2558, _2559, _2560));
    float _4707 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2569 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2570 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2558, _2559, _2560));
    float _4718 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2574 = _2550 * _2550;
    float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
    float _2586 = exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0);
    float _2587 = 0.959999978542327880859375 - _938;
    float _2589 = 0.959999978542327880859375 - _939;
    float _2590 = 0.959999978542327880859375 - _940;
    float _2597 = 1.0 - _2550;
    float _2608 = (0.5 / (((_2565 * ((_2564 * _2597) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2597) + _2550) * _2564))) * _2564;
    float _4729 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2610 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
    uint _2624 = _2289 + 9u;
    float _2635 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _782) * 0.949999988079071044921875);
    float _2636 = _2635 * _2635;
    float _2637 = cbLight._m0[_2329].x + _859;
    float _2638 = cbLight._m0[_2329].y + _860;
    float _2639 = cbLight._m0[_2329].z + _861;
    float _2643 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
    float _2644 = _2643 * _2637;
    float _2645 = _2643 * _2638;
    float _2646 = _2643 * _2639;
    float _2647 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2329].xyz));
    float _4740 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2650 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _2651 = dot(vec3(_779, _780, _781), vec3(_2644, _2645, _2646));
    float _4751 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2654 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2655 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2644, _2645, _2646));
    float _4762 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2659 = _2636 * _2636;
    float _2663 = ((_2654 * _2654) * (_2659 + (-1.0))) + 1.0;
    float _2670 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
    float _2677 = 1.0 - _2636;
    float _2687 = (0.5 / (((_2565 * ((_2650 * _2677) + _2636)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2677) + _2636) * _2650))) * _2650;
    float _4773 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2689 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2659 / ((_2663 * _2663) * 3.141590118408203125));
    float _2699 = (((((_2670 * _2587) + _941) * cbLight._m0[_2624].x) * _2689) * _2312) + ((((cbLight._m0[_2536].x * _2278) * ((_2586 * _2587) + _941)) * _2610) * _2325);
    float _2700 = (((((_2670 * _2589) + _943) * cbLight._m0[_2624].y) * _2689) * _2312) + ((((cbLight._m0[_2536].y * _2280) * ((_2586 * _2589) + _943)) * _2610) * _2325);
    float _2701 = (((((_2670 * _2590) + _944) * cbLight._m0[_2624].z) * _2689) * _2312) + ((((cbLight._m0[_2536].z * _2282) * ((_2586 * _2590) + _944)) * _2610) * _2325);
    float _2757;
    float _2759;
    float _2761;
    if (_2365)
    {
        _2757 = _2699;
        _2759 = _2700;
        _2761 = _2701;
    }
    else
    {
        uint _2763 = _2289 + 2u;
        uint _2767 = _2289 + 10u;
        float _2781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2763].w)) * _782) * 0.949999988079071044921875);
        float _2782 = _2781 * _2781;
        float _2783 = cbLight._m0[_2763].x + _859;
        float _2784 = cbLight._m0[_2763].y + _860;
        float _2785 = cbLight._m0[_2763].z + _861;
        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
        float _2790 = _2789 * _2783;
        float _2791 = _2789 * _2784;
        float _2792 = _2789 * _2785;
        float _2793 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2763].xyz));
        float _4784 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2797 = dot(vec3(_779, _780, _781), vec3(_2790, _2791, _2792));
        float _4795 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2800 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2801 = dot(vec3(cbLight._m0[_2763].xyz), vec3(_2790, _2791, _2792));
        float _4806 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2805 = _2782 * _2782;
        float _2809 = ((_2800 * _2800) * (_2805 + (-1.0))) + 1.0;
        float _2816 = exp2(log2(1.0 - (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) * 5.0);
        float _2823 = 1.0 - _2782;
        float _2833 = (0.5 / (((_2565 * ((_2796 * _2823) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2823) + _2782) * _2796))) * _2796;
        float _4817 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2835 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2805 / ((_2809 * _2809) * 3.141590118408203125));
        float _2836 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2757 = (((((_2816 * _2587) + _941) * cbLight._m0[_2767].x) * _2835) * _2836) + _2699;
        _2759 = (((((_2816 * _2589) + _943) * cbLight._m0[_2767].y) * _2835) * _2836) + _2700;
        _2761 = (((((_2816 * _2590) + _944) * cbLight._m0[_2767].z) * _2835) * _2836) + _2701;
    }
    float _2867;
    float _2869;
    float _2871;
    if (_2474)
    {
        _2867 = _2757;
        _2869 = _2759;
        _2871 = _2761;
    }
    else
    {
        uint _2878 = _2289 + 3u;
        uint _2882 = _2289 + 11u;
        float _2896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2878].w)) * _782) * 0.949999988079071044921875);
        float _2897 = _2896 * _2896;
        float _2898 = cbLight._m0[_2878].x + _859;
        float _2899 = cbLight._m0[_2878].y + _860;
        float _2900 = cbLight._m0[_2878].z + _861;
        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
        float _2905 = _2904 * _2898;
        float _2906 = _2904 * _2899;
        float _2907 = _2904 * _2900;
        float _2908 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2878].xyz));
        float _4833 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2911 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2912 = dot(vec3(_779, _780, _781), vec3(_2905, _2906, _2907));
        float _4844 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2915 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2916 = dot(vec3(cbLight._m0[_2878].xyz), vec3(_2905, _2906, _2907));
        float _4855 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2920 = _2897 * _2897;
        float _2924 = ((_2915 * _2915) * (_2920 + (-1.0))) + 1.0;
        float _2931 = exp2(log2(1.0 - (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) * 5.0);
        float _2938 = 1.0 - _2897;
        float _2948 = (0.5 / (((_2565 * ((_2911 * _2938) + _2897)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2938) + _2897) * _2911))) * _2911;
        float _4866 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2950 = (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2920 / ((_2924 * _2924) * 3.141590118408203125));
        float _2951 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2867 = (((((_2931 * _2587) + _941) * cbLight._m0[_2882].x) * _2950) * _2951) + _2757;
        _2869 = (((((_2931 * _2589) + _943) * cbLight._m0[_2882].y) * _2950) * _2951) + _2759;
        _2871 = (((((_2931 * _2590) + _944) * cbLight._m0[_2882].z) * _2950) * _2951) + _2761;
    }
    float _3017;
    float _3019;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    if (_2287.y == 0u)
    {
        uvec4 _2972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2973 = _2972.x;
        uint _2984 = uint((float(_2972.y) * floor(float(uint(cbSceneParam._m0[85u].y * _880) / _2973))) + floor(float(uint(cbSceneParam._m0[85u].x * _879) / _2973)));
        float _2994 = (log2(_2065 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2995 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        uint _2998 = uint(isnan(14.0) ? _2995 : (isnan(_2995) ? 14.0 : min(_2995, 14.0)));
        uvec4 _3003 = texelFetch(g_lightClusterGridBuffer, int(((_2998 << 2u) + (_2984 << 6u)) >> 2u));
        uint _3004 = _3003.x;
        uint _3005 = _2972.z;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        if (((((1u << ((_3005 >> 4u) & 15u)) + 4294967295u) & _3004) == 0u) || ((_3005 & 240u) == 0u))
        {
            _3084 = 0.0;
            _3086 = 0.0;
            _3088 = 0.0;
            _3090 = 0.0;
            _3092 = 0.0;
            _3094 = 0.0;
        }
        else
        {
            float _3085;
            float _3087;
            float _3089;
            float _3091;
            float _3093;
            float _3095;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            uint _3243 = 0u;
            uint _3252;
            bool _3253;
            for (;;)
            {
                _3252 = texelFetch(g_lightClassification, int((((_2998 << 5u) + (_2984 << 9u)) + (_3243 << 2u)) >> 2u)).x;
                _3253 = _3252 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3253)
                {
                    frontier_phi_71_pred = _3242;
                    frontier_phi_71_pred_1 = _3241;
                    frontier_phi_71_pred_2 = _3240;
                    frontier_phi_71_pred_3 = _3239;
                    frontier_phi_71_pred_4 = _3238;
                    frontier_phi_71_pred_5 = _3237;
                }
                else
                {
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    uint _3388;
                    _3382 = _3237;
                    _3383 = _3238;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3252;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    for (;;)
                    {
                        uint _3392 = uint(findLSB(_3388)) + (_3243 << 5u);
                        uint _3389 = (_3388 + 4294967295u) & _3388;
                        uint _3394 = _3392 * 48u;
                        vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 3u)).x));
                        uint _3414 = (_3392 * 48u) + 4u;
                        vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3414)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 3u)).x));
                        uint _3433 = (_3392 * 48u) + 8u;
                        vec3 _3444 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3433)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 2u)).x));
                        float _3448 = _3408.x - _2063;
                        float _3449 = _3408.y - _2064;
                        float _3450 = _3408.z - _2065;
                        float _3451 = dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450));
                        float _3454 = inversesqrt(_3451);
                        float _3455 = _3454 * _3448;
                        float _3456 = _3454 * _3449;
                        float _3457 = _3454 * _3450;
                        float _3458 = dot(vec3(_898, _901, _904), vec3(_3455, _3456, _3457));
                        float _3463 = 1.0 - (_3451 * _3408.w);
                        float _4892 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3464 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                        float _3465 = sqrt(_3451) * _3427.w;
                        float _3468 = 1.39999997615814208984375 / (_3465 + 1.39999997615814208984375);
                        float _3469 = _3468 * _3468;
                        float _3472 = ((1.0 - _3469) * _3458) + _3469;
                        float _3475 = _3465 * _3465;
                        float _3479 = ((isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0))) * _3464) / ((_3475 * 0.699999988079071044921875) + 1.0);
                        float _3483 = (-0.0) - _2063;
                        float _3484 = (-0.0) - _2064;
                        float _3485 = (-0.0) - _2065;
                        float _3489 = inversesqrt(dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485)));
                        float _3490 = _3489 * _3483;
                        float _3491 = _3489 * _3484;
                        float _3492 = _3489 * _3485;
                        float _3499 = exp2(log2(1.0 / ((_3475 * 3.5) + 5.0)) * 0.25);
                        float _3500 = 1.0 - _973;
                        float _3507 = sqrt(1.0 - ((1.0 - (_3500 * _3500)) * (1.0 - (_3499 * _3499))));
                        float _3508 = _3507 * _3507;
                        float _3509 = _3508 * _3508;
                        float _3510 = _3490 + _3455;
                        float _3511 = _3491 + _3456;
                        float _3512 = _3492 + _3457;
                        float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                        float _3520 = dot(vec3(_898, _901, _904), vec3(_3490, _3491, _3492));
                        float _4908 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3523 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3524 = dot(vec3(_898, _901, _904), vec3(_3516 * _3510, _3516 * _3511, _3516 * _3512));
                        float _4919 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                        float _3527 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                        float _3531 = ((_3527 * _3527) * (_3509 + (-1.0))) + 1.0;
                        float _3532 = _3468 * _3508;
                        float _3533 = _3532 * _3532;
                        float _3536 = ((1.0 - _3533) * _3458) + _3533;
                        float _4930 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3537 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3538 = 1.0 - _3508;
                        float _3548 = (0.5 / (((_3537 * ((_3523 * _3538) + _3508)) + 9.9999999392252902907785028219223e-09) + (((_3537 * _3538) + _3508) * _3523))) * _3537;
                        float _4941 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3559 = (((_3509 * 3.1415927410125732421875) * (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0)))) / ((_3531 * _3531) * ((_3475 * 2.1991131305694580078125) + 3.141590118408203125))) * _3464;
                        _3312 = (_3479 * _3427.x) + _3385;
                        _3313 = (_3479 * _3427.y) + _3386;
                        _3314 = (_3479 * _3427.z) + _3387;
                        _3309 = (_3559 * _3444.x) + _3382;
                        _3310 = (_3559 * _3444.y) + _3383;
                        _3311 = (_3559 * _3444.z) + _3384;
                        if (_3389 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3382 = _3309;
                            _3383 = _3310;
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3389;
                        }
                    }
                    frontier_phi_71_pred = _3314;
                    frontier_phi_71_pred_1 = _3313;
                    frontier_phi_71_pred_2 = _3312;
                    frontier_phi_71_pred_3 = _3311;
                    frontier_phi_71_pred_4 = _3310;
                    frontier_phi_71_pred_5 = _3309;
                }
                _3095 = frontier_phi_71_pred;
                _3093 = frontier_phi_71_pred_1;
                _3091 = frontier_phi_71_pred_2;
                _3089 = frontier_phi_71_pred_3;
                _3087 = frontier_phi_71_pred_4;
                _3085 = frontier_phi_71_pred_5;
                uint _3244 = _3243 + 1u;
                if (_3244 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3237 = _3085;
                    _3238 = _3087;
                    _3239 = _3089;
                    _3240 = _3091;
                    _3241 = _3093;
                    _3242 = _3095;
                    _3243 = _3244;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3084 = _3085;
            _3086 = _3087;
            _3088 = _3089;
            _3090 = _3091;
            _3092 = _3093;
            _3094 = _3095;
        }
        uvec4 _3098 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3099 = _3098.z;
        uint _3101 = (_3099 >> 8u) & 15u;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        if (((4294967295u << _3101) & _3004) == 0u)
        {
            _3205 = _3084;
            _3207 = _3086;
            _3209 = _3088;
            _3211 = _3090;
            _3213 = _3092;
            _3215 = _3094;
        }
        else
        {
            float _3230 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
            float _3231 = _3230 * _2063;
            float _3232 = _3230 * _2064;
            float _3233 = _3230 * _2065;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3101 < ((_3099 >> 12u) & 15u))
            {
                float _3206;
                float _3208;
                float _3210;
                float _3212;
                float _3214;
                float _3216;
                float _3365 = _3084;
                float _3366 = _3086;
                float _3367 = _3088;
                float _3368 = _3090;
                float _3369 = _3092;
                float _3370 = _3094;
                uint _3371 = _3101;
                uint _3380;
                bool _3381;
                for (;;)
                {
                    _3380 = texelFetch(g_lightClassification, int((((_2998 << 5u) + (_2984 << 9u)) + (_3371 << 2u)) >> 2u)).x;
                    _3381 = _3380 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3381)
                    {
                        frontier_phi_82_pred = _3370;
                        frontier_phi_82_pred_1 = _3369;
                        frontier_phi_82_pred_2 = _3368;
                        frontier_phi_82_pred_3 = _3367;
                        frontier_phi_82_pred_4 = _3366;
                        frontier_phi_82_pred_5 = _3365;
                    }
                    else
                    {
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3586 = _3365;
                        float _3587 = _3366;
                        float _3588 = _3367;
                        float _3589 = _3368;
                        float _3590 = _3369;
                        float _3591 = _3370;
                        uint _3592 = _3380;
                        uint _3593;
                        vec4 _3618;
                        float _3619;
                        vec4 _3634;
                        vec3 _3646;
                        vec4 _3661;
                        vec4 _3676;
                        float _3722;
                        bool _3723;
                        for (;;)
                        {
                            uint _3603 = ((_3371 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3592));
                            _3593 = (_3592 + 4294967295u) & _3592;
                            uint _3605 = _3603 * 40u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            _3619 = _3618.w;
                            uint _3621 = (_3603 * 40u) + 4u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            uint _3636 = (_3603 * 40u) + 8u;
                            _3646 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x));
                            uint _3648 = (_3603 * 40u) + 16u;
                            _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3663 = (_3603 * 40u) + 20u;
                            _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3678 = (_3603 * 40u) + 24u;
                            vec4 _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            uint _3697 = (_3603 * 40u) + 28u;
                            vec4 _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            _3722 = fma(_2065, _3710.z, fma(_2064, _3710.y, _3710.x * _2063)) + _3710.w;
                            _3723 = !((fma(_2065, _3691.z, fma(_2064, _3691.y, _3691.x * _2063)) + _3691.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3723)
                            {
                                float _3750 = _3618.x - _2063;
                                float _3751 = _3618.y - _2064;
                                float _3752 = _3618.z - _2065;
                                float _3753 = dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752));
                                float _3756 = inversesqrt(_3753);
                                float _3757 = _3756 * _3750;
                                float _3758 = _3756 * _3751;
                                float _3759 = _3756 * _3752;
                                float _3763 = 1.0 - (_3753 / (_3619 * _3619));
                                float _4952 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3768 = sqrt(_3753) * _3634.w;
                                float _3770 = 1.39999997615814208984375 / (_3768 + 1.39999997615814208984375);
                                float _3771 = _3770 * _3770;
                                float _3774 = ((1.0 - _3771) * dot(vec3(_3757, _3758, _3759), vec3(_898, _901, _904))) + _3771;
                                float _3777 = _3768 * _3768;
                                float _3781 = (fma(_2065, _3661.z, fma(_2064, _3661.y, _3661.x * _2063)) + _3661.w) / _3722;
                                float _3782 = (fma(_2065, _3676.z, fma(_2064, _3676.y, _3676.x * _2063)) + _3676.w) / _3722;
                                float _3786 = 1.0 - dot(vec2(_3781, _3782), vec2(_3781, _3782));
                                float _4968 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3787 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3788 = _3787 * (((isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0))) * _3764) / ((_3777 * 0.699999988079071044921875) + 1.0));
                                float _3800 = exp2(log2(1.0 / ((_3777 * 3.5) + 5.0)) * 0.25);
                                float _3801 = 1.0 - _973;
                                float _3808 = sqrt(1.0 - ((1.0 - (_3801 * _3801)) * (1.0 - (_3800 * _3800))));
                                float _3809 = _3808 * _3808;
                                float _3810 = _3809 * _3809;
                                float _3811 = _3757 - _3231;
                                float _3812 = _3758 - _3232;
                                float _3813 = _3759 - _3233;
                                float _3817 = inversesqrt(dot(vec3(_3811, _3812, _3813), vec3(_3811, _3812, _3813)));
                                float _3821 = dot(vec3(_898, _901, _904), vec3((-0.0) - _3231, (-0.0) - _3232, (-0.0) - _3233));
                                float _4979 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3824 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3825 = dot(vec3(_898, _901, _904), vec3(_3817 * _3811, _3817 * _3812, _3817 * _3813));
                                float _4990 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3828 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3832 = ((_3828 * _3828) * (_3810 + (-1.0))) + 1.0;
                                float _3833 = _3770 * _3809;
                                float _3834 = _3833 * _3833;
                                float _3840 = ((1.0 - _3834) * dot(vec3(_898, _901, _904), vec3(_3757, _3758, _3759))) + _3834;
                                float _5001 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3841 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3842 = 1.0 - _3809;
                                float _3852 = (0.5 / (((_3841 * ((_3824 * _3842) + _3809)) + 9.9999999392252902907785028219223e-09) + (((_3841 * _3842) + _3809) * _3824))) * _3841;
                                float _5012 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3862 = (_3787 * _3764) * (((_3810 * 3.1415927410125732421875) * (isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0)))) / ((_3832 * _3832) * ((_3777 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3788 * _3634.z;
                                frontier_phi_88_pred_1 = _3788 * _3634.y;
                                frontier_phi_88_pred_2 = _3788 * _3634.x;
                                frontier_phi_88_pred_3 = _3862 * _3646.z;
                                frontier_phi_88_pred_4 = _3862 * _3646.y;
                                frontier_phi_88_pred_5 = _3862 * _3646.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3871 = frontier_phi_88_pred;
                            _3870 = frontier_phi_88_pred_1;
                            _3869 = frontier_phi_88_pred_2;
                            _3868 = frontier_phi_88_pred_3;
                            _3867 = frontier_phi_88_pred_4;
                            _3866 = frontier_phi_88_pred_5;
                            _3576 = _3869 + _3589;
                            _3577 = _3870 + _3590;
                            _3578 = _3871 + _3591;
                            _3573 = _3866 + _3586;
                            _3574 = _3867 + _3587;
                            _3575 = _3868 + _3588;
                            if (_3593 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3593;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3578;
                        frontier_phi_82_pred_1 = _3577;
                        frontier_phi_82_pred_2 = _3576;
                        frontier_phi_82_pred_3 = _3575;
                        frontier_phi_82_pred_4 = _3574;
                        frontier_phi_82_pred_5 = _3573;
                    }
                    _3216 = frontier_phi_82_pred;
                    _3214 = frontier_phi_82_pred_1;
                    _3212 = frontier_phi_82_pred_2;
                    _3210 = frontier_phi_82_pred_3;
                    _3208 = frontier_phi_82_pred_4;
                    _3206 = frontier_phi_82_pred_5;
                    uint _3372 = _3371 + 1u;
                    if (_3372 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3365 = _3206;
                        _3366 = _3208;
                        _3367 = _3210;
                        _3368 = _3212;
                        _3369 = _3214;
                        _3370 = _3216;
                        _3371 = _3372;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3212;
                frontier_phi_63_64_ladder_1 = _3216;
                frontier_phi_63_64_ladder_2 = _3214;
                frontier_phi_63_64_ladder_3 = _3210;
                frontier_phi_63_64_ladder_4 = _3208;
                frontier_phi_63_64_ladder_5 = _3206;
            }
            else
            {
                frontier_phi_63_64_ladder = _3090;
                frontier_phi_63_64_ladder_1 = _3094;
                frontier_phi_63_64_ladder_2 = _3092;
                frontier_phi_63_64_ladder_3 = _3088;
                frontier_phi_63_64_ladder_4 = _3086;
                frontier_phi_63_64_ladder_5 = _3084;
            }
            _3205 = frontier_phi_63_64_ladder_5;
            _3207 = frontier_phi_63_64_ladder_4;
            _3209 = frontier_phi_63_64_ladder_3;
            _3211 = frontier_phi_63_64_ladder;
            _3213 = frontier_phi_63_64_ladder_2;
            _3215 = frontier_phi_63_64_ladder_1;
        }
        float _3220 = isnan(1.0) ? _957 : (isnan(_957) ? 1.0 : min(_957, 1.0));
        _3017 = (_3220 * _3211) + _2529;
        _3019 = (_3220 * _3213) + _2531;
        _3021 = (_3220 * _3215) + _2533;
        _3023 = ((_3205 * _941) * _3220) + _2867;
        _3025 = ((_3207 * _943) * _3220) + _2869;
        _3027 = ((_3209 * _944) * _3220) + _2871;
    }
    else
    {
        _3017 = _2529;
        _3019 = _2531;
        _3021 = _2533;
        _3023 = _2867;
        _3025 = _2869;
        _3027 = _2871;
    }
    float _5028 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _5039 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _5050 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _3044 = ((isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_3017 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _957))) + ((_3023 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1795)) * cbPerFrame._m0[3u].x);
    float _3045 = ((isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0))) * (_3019 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _957))) + ((_3025 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1795)) * cbPerFrame._m0[3u].x);
    float _3046 = ((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_3021 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _957))) + ((_3027 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1795)) * cbPerFrame._m0[3u].x);
    uint _3047 = _252 + 6u;
    float _3055 = _879 / cbSceneParam._m0[86u].x;
    float _3056 = _880 / cbSceneParam._m0[86u].y;
    vec4 _3070 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3055, _3056, (log2((isnan(cbSceneParam._m0[77u].w) ? _801 : (isnan(_801) ? cbSceneParam._m0[77u].w : min(_801, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3072 = _3070.x;
    float _3073 = _3070.y;
    float _3074 = _3070.z;
    float _3075 = _3070.w;
    float _3147;
    float _3149;
    float _3151;
    float _3153;
    if (_801 > cbSceneParam._m0[78u].w)
    {
        float _3109 = isnan(_801) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _801 : min(cbSceneParam._m0[80u].w, _801));
        float _3110 = _3109 / _801;
        float _3121 = _3110 * _852;
        float _3122 = _853 * _3110;
        float _3123 = (-0.0) - _3122;
        float _3125 = _3110 * _854;
        float _3127 = (cbSceneParam._m0[77u].w * _3123) / _3109;
        float _3128 = _3127 + cbSceneParam._m0[79u].w;
        float _3129 = cbSceneParam._m0[79u].w - _3122;
        float _3135 = sqrt(((_3121 * _3121) + (_3122 * _3122)) + (_3125 * _3125));
        float _3138 = (1.0 - (cbSceneParam._m0[77u].w / _3109)) * _3135;
        float _3143 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3145 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3322;
        if (abs((_3123 - _3127) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3322 = ((((_3128 > 0.0) ? exp2(_3143 * _3128) : (2.0 - exp2(_3145 * _3128))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3138;
        }
        else
        {
            float _3266 = 1.0 / cbSceneParam._m0[80u].x;
            float _3267 = isnan(_3129) ? _3128 : (isnan(_3128) ? _3129 : max(_3128, _3129));
            float _3268 = isnan(_3129) ? _3128 : (isnan(_3128) ? _3129 : min(_3128, _3129));
            float _3277 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : min(_3267, 0.0));
            float _3278 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : min(_3268, 0.0));
            _3322 = ((abs(_3135 / _3123) * cbSceneParam._m0[80u].y) * ((((_3277 - _3278) * 2.0) - ((exp2(_3143 * (isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0)))) - exp2(_3143 * (isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0))))) * _3266)) - ((exp2(_3145 * _3277) - exp2(_3145 * _3278)) * _3266))) + (_3138 * cbSceneParam._m0[80u].z);
        }
        vec4 _3324 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3055, _3056, 1.0), 0.0);
        float _3333 = exp2((_3322 * (-1.44269502162933349609375)) * (1.0 - _3324.w));
        float _3334 = log2(_3333);
        float _3350 = log2(_3075);
        _3147 = (exp2(_3350 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3334 * cbSceneParam._m0[78u].x)) * _3324.x) / cbSceneParam._m0[78u].x)) + _3072;
        _3149 = (exp2(_3350 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3334 * cbSceneParam._m0[78u].y)) * _3324.y) / cbSceneParam._m0[78u].y)) + _3073;
        _3151 = (exp2(_3350 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3334 * cbSceneParam._m0[78u].z)) * _3324.z) / cbSceneParam._m0[78u].z)) + _3074;
        _3153 = _3333 * _3075;
    }
    else
    {
        _3147 = _3072;
        _3149 = _3073;
        _3151 = _3074;
        _3153 = _3075;
    }
    bool _3360;
    vec4 _3163;
    vec4 _3185;
    float _3187;
    float _3191;
    float _3192;
    float _3193;
    float _3194;
    bool _3204;
    for (;;)
    {
        _3163 = cbMatDynParam._m0[0u];
        float _3165 = roundEven(_3163.y);
        bool _3166 = _3165 == 3.0;
        float _3167 = log2(_3153);
        float _3174 = exp2(_3167 * cbSceneParam._m0[78u].x) * _3044;
        float _3175 = exp2(_3167 * cbSceneParam._m0[78u].y) * _3045;
        float _3176 = exp2(_3167 * cbSceneParam._m0[78u].z) * _3046;
        float _3183 = _868 + (-0.5);
        _3185 = cbMtdParam._m0[1u];
        _3187 = _3185.y * _3183;
        float _3190 = (_3165 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3191 = _3190 * (_3166 ? _3174 : (_3174 + (cbSceneParam._m0[72u].w * _3147)));
        _3192 = _3190 * (_3166 ? _3175 : (_3175 + (cbSceneParam._m0[72u].w * _3149)));
        _3193 = _3190 * (_3166 ? _3176 : (_3176 + (cbSceneParam._m0[72u].w * _3151)));
        _3194 = _3183 * 0.999000012874603271484375;
        _3204 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3204)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _3194) < 0.5)
            {
                _3360 = true;
                break;
            }
        }
        uint _3301 = _917 + uint(_3163.w);
        if ((cbInstanceData._m0[_3301].w < 1.0) && ((cbInstanceData._m0[_3301].w + _3194) < 0.5))
        {
            _3360 = true;
            break;
        }
        if ((_3187 + 1.0) < _3185.x)
        {
            _3360 = true;
            break;
        }
        _3360 = false;
        break;
    }
    float _3564;
    if (_3360)
    {
        discard_state = true;
        _3564 = 0.0;
    }
    else
    {
        _3564 = cbInstanceData._m0[_3047].w;
    }
    SV_Target.x = _3191;
    SV_Target.y = _3192;
    SV_Target.z = _3193;
    SV_Target.w = _3564;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3047].w;
    discard_exit();
}


