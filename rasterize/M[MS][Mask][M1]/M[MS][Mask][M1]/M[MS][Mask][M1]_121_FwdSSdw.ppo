#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1450;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _233 = _232 * _224;
    float _234 = _232 * _225;
    float _235 = _232 * _226;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _393 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _340.x) * 2.0) - ((((_381 - _393) * cbMtdParam._m0[23u].w) + _393) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3798 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _418 = (_411 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _419 = (_411 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _420 = (_411 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _457 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _459 = _457.x;
    float _469 = dot(vec4(_459, _457.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _483 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _340.y) * 2.0) - ((((_459 - _469) * cbMtdParam._m0[23u].w) + _469) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3809 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _491 = (_484 * ((_437.x * cbMtdParam._m0[13u].x) - _418)) + _418;
    float _492 = (_484 * ((_437.y * cbMtdParam._m0[13u].y) - _419)) + _419;
    float _493 = (_484 * ((_437.z * cbMtdParam._m0[13u].z) - _420)) + _420;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _272) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _273) + cbTextureTilingScale._m0[24u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _531 = _529.x;
    float _541 = dot(vec4(_531, _529.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _553 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _340.z) * 2.0) - ((((_531 - _541) * cbMtdParam._m0[23u].w) + _541) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3820 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _561 = (_554 * ((_512.x * cbMtdParam._m0[14u].x) - _491)) + _491;
    float _562 = (_554 * ((_512.y * cbMtdParam._m0[14u].y) - _492)) + _492;
    float _563 = (_554 * ((_512.z * cbMtdParam._m0[14u].z) - _493)) + _493;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _600 = _598.x;
    float _601 = _598.y;
    float _602 = _598.z;
    float _609 = ((_581.x - _600) * _411) + _600;
    float _610 = ((_581.y - _601) * _411) + _601;
    float _611 = ((_581.z - _602) * _411) + _602;
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _634 = ((_623.x - _609) * _484) + _609;
    float _635 = ((_623.y - _610) * _484) + _610;
    float _636 = ((_623.z - _611) * _484) + _611;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _272) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _273) + cbTextureTilingScale._m0[23u].w));
    float _661 = ((_648.z - _636) * _554) + _636;
    float _664 = ((((_648.x - _634) * _554) + _634) * 2.0) + (-1.0);
    float _666 = ((((_648.y - _635) * _554) + _635) * 2.0) + (-1.0);
    float _667 = dot(vec2(_664, _666), vec2(_664, _666));
    float _3831 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _672 = sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))));
    vec4 _686 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _698 = (((_686.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _664;
    float _699 = (((_686.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _666;
    float _702 = fma(_672, _240, fma(_699, _247, _698 * _233));
    float _705 = fma(_672, _241, fma(_699, _248, _698 * _234));
    float _708 = fma(_672, _242, fma(_699, _249, _698 * _235));
    float _712 = inversesqrt(dot(vec3(_702, _705, _708), vec3(_702, _705, _708)));
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _741 = _739.x;
    float _742 = 1.0 - _741;
    float _750 = (cbMtdParam._m0[19u].x + dot(vec4(_712 * _702, _712 * _705, _712 * _708, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_741 - _742) * cbMtdParam._m0[24u].z) + _742) * cbMtdParam._m0[21u].z);
    float _3842 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _751 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _758 = (_751 * (cbMtdParam._m0[17u].x - _561)) + _561;
    float _759 = (_751 * (cbMtdParam._m0[17u].y - _562)) + _562;
    float _760 = (_751 * (cbMtdParam._m0[17u].z - _563)) + _563;
    vec4 _786 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _788 = _786.x;
    float _806 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _788) * _411) + _788;
    float _823 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _806) * _484) + _806;
    float _841 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _272) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _273) + cbTextureTilingScale._m0[10u].w)).x - _823) * _554) + _823;
    float _845 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _841) * cbMtdParam._m0[19u].z) + _841;
    float _847 = _845 - (_845 * _751);
    float _851 = (cbMtdParam._m0[19u].w * (_686.z - _661)) + _661;
    vec4 _864 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _871 = (_864.x * 2.0) + (-1.0);
    float _872 = (_864.y * 2.0) + (-1.0);
    float _873 = dot(vec2(_871, _872), vec2(_871, _872));
    float _3853 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _881 = ((_864.z - _851) * _751) + _851;
    float _891 = ((sqrt(1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) - _672) * _751) + _672;
    float _894 = (((_871 - _698) * _751) + _698) + (cbMtdParam._m0[21u].x * _698);
    float _895 = (((_872 - _699) * _751) + _699) + (cbMtdParam._m0[21u].x * _699);
    float _897 = cbMtdParam._m0[22u].x + _686.w;
    float _900 = fma(_891, _240, fma(_895, _247, _894 * _233));
    float _903 = fma(_891, _241, fma(_895, _248, _894 * _234));
    float _906 = fma(_891, _242, fma(_895, _249, _894 * _235));
    float _910 = inversesqrt(dot(vec3(_900, _903, _906), vec3(_900, _903, _906)));
    float _911 = _910 * _900;
    float _912 = _910 * _903;
    float _913 = _910 * _906;
    float _3864 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _914 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _3886 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _3897 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _3908 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _3919 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _919 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _933 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _983 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _973);
    float _984 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _973);
    float _985 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _973);
    float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
    float _990 = _983 * _989;
    float _991 = _984 * _989;
    float _992 = _985 * _989;
    float _998 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _999 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1017 = fma(_913, cbSceneParam._m0[5u].z, fma(_912, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _911));
    float _1020 = fma(_913, cbSceneParam._m0[6u].z, fma(_912, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _911));
    float _1023 = fma(_913, cbSceneParam._m0[7u].z, fma(_912, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _911));
    uint _1037 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1043 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_1037].x;
    float _1044 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_1037].y;
    float _1045 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * cbInstanceData._m0[_1037].z;
    float _3930 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _1049 = 1.0 - _919;
    float _1050 = _1046 * _1049;
    float _1051 = _1047 * _1049;
    float _1052 = _1048 * _1049;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _919;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _919;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _919;
    float _1060 = _1057 + 0.039999999105930328369140625;
    float _1062 = _1058 + 0.039999999105930328369140625;
    float _1063 = _1059 + 0.039999999105930328369140625;
    vec4 _1072 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _998, cbSceneParam._m0[86u].y * _999));
    float _1076 = ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * TEXCOORD_5.w) * _1072.x;
    float _1077 = dot(vec3(_911, _912, _913), vec3(_990, _991, _992));
    float _1080 = _1077 * 2.0;
    float _1084 = (_1080 * _911) - _990;
    float _1085 = (_1080 * _912) - _991;
    float _1086 = (_1080 * _913) - _992;
    float _1090 = abs(dot(vec3(_990, _991, _992), vec3(_911, _912, _913)));
    float _3963 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1092 = sqrt(_914);
    float _1105 = exp2((_1092 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1092 * 3.0));
    float _1111 = (1.0 - _1105) * ((_1092 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1112 = _1105 * _1092;
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1449;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1174 = fma(_1148, cbModelParam._m0[26u].z, fma(_1144, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1140));
        float _1178 = fma(_1148, cbModelParam._m0[27u].z, fma(_1144, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1140));
        float _1182 = fma(_1148, cbModelParam._m0[28u].z, fma(_1144, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1140));
        float _1207 = _1140 + _911;
        float _1208 = _1144 + _912;
        float _1209 = _1148 + _913;
        float _1219 = fma(_1209, cbModelParam._m0[26u].z, fma(_1208, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1207)) - _1174;
        float _1220 = fma(_1209, cbModelParam._m0[27u].z, fma(_1208, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1207)) - _1178;
        float _1221 = fma(_1209, cbModelParam._m0[28u].z, fma(_1208, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1207)) - _1182;
        float _1225 = inversesqrt(dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221)));
        float _1238 = ((_1225 * _1219) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1174 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1225 * _1220) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1178 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1225 * _1221) / cbModelParam._m0[34u].z) + ((((((_1182 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        float _1277 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1243.x + (-0.5));
        float _1279 = _1277 * (_1243.y + (-0.5));
        float _1280 = _1277 * (_1243.z + (-0.5));
        float _1287 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1250.x + (-0.5));
        float _1289 = _1287 * (_1250.y + (-0.5));
        float _1290 = _1287 * (_1250.z + (-0.5));
        float _1297 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1257.x + (-0.5));
        float _1299 = _1297 * (_1257.y + (-0.5));
        float _1300 = _1297 * (_1257.z + (-0.5));
        float _1307 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1264.x + (-0.5));
        float _1309 = _1307 * (_1264.y + (-0.5));
        float _1310 = _1307 * (_1264.z + (-0.5));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = _1278 * 0.5;
        float _1315 = _1288 * 0.5;
        float _1316 = _1298 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1331 = (dot(vec3(_911, _912, _913), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1341 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4011 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1343 + 1.0))) + _1348) * _1311;
        float _1358 = _1279 * 0.5;
        float _1359 = _1289 * 0.5;
        float _1360 = _1299 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_911, _912, _913), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4044 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1385 + 1.0))) + _1390) * _1312;
        float _1400 = _1280 * 0.5;
        float _1401 = _1290 * 0.5;
        float _1402 = _1300 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_911, _912, _913), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4077 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1427 + 1.0))) + _1432) * _1313;
        _1449 = _1280;
        _1451 = _1279;
        _1452 = _1278;
        _1453 = _1290;
        _1454 = _1289;
        _1455 = _1288;
        _1456 = _1300;
        _1457 = _1299;
        _1458 = _1298;
        _1459 = _1313;
        _1460 = _1312;
        _1461 = _1311;
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
    }
    else
    {
        _1449 = _1450;
        _1451 = _1450;
        _1452 = _1450;
        _1453 = _1450;
        _1454 = _1450;
        _1455 = _1450;
        _1456 = _1450;
        _1457 = _1450;
        _1458 = _1450;
        _1459 = _1450;
        _1460 = _1450;
        _1461 = _1450;
        _1462 = 0.0;
        _1463 = 0.0;
        _1464 = 0.0;
    }
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1487 = fma(_1148, cbModelParam._m0[30u].z, fma(_1144, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1140));
        float _1491 = fma(_1148, cbModelParam._m0[31u].z, fma(_1144, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1140));
        float _1495 = fma(_1148, cbModelParam._m0[32u].z, fma(_1144, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1140));
        float _1518 = _1140 + _911;
        float _1519 = _1144 + _912;
        float _1520 = _1148 + _913;
        float _1530 = fma(_1520, cbModelParam._m0[30u].z, fma(_1519, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1518)) - _1487;
        float _1531 = fma(_1520, cbModelParam._m0[31u].z, fma(_1519, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1518)) - _1491;
        float _1532 = fma(_1520, cbModelParam._m0[32u].z, fma(_1519, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1518)) - _1495;
        float _1536 = inversesqrt(dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532)));
        float _1549 = ((_1536 * _1530) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1487 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1550 = ((_1536 * _1531) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1491 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1551 = ((_1536 * _1532) / cbModelParam._m0[35u].z) + ((((((_1495 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1549, _1550, _1551), 0.0);
        float _1586 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1553.x + (-0.5));
        float _1588 = _1586 * (_1553.y + (-0.5));
        float _1589 = _1586 * (_1553.z + (-0.5));
        float _1596 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1560.x + (-0.5));
        float _1598 = _1596 * (_1560.y + (-0.5));
        float _1599 = _1596 * (_1560.z + (-0.5));
        float _1606 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1567.x + (-0.5));
        float _1608 = _1606 * (_1567.y + (-0.5));
        float _1609 = _1606 * (_1567.z + (-0.5));
        float _1616 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1574.x + (-0.5));
        float _1618 = _1616 * (_1574.y + (-0.5));
        float _1619 = _1616 * (_1574.z + (-0.5));
        float _1620 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1621 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1622 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1623 = _1587 * 0.5;
        float _1624 = _1597 * 0.5;
        float _1625 = _1607 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_911, _912, _913), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1620 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4140 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1650 + 1.0))) + _1655) * _1620;
        float _1665 = _1588 * 0.5;
        float _1666 = _1598 * 0.5;
        float _1667 = _1608 * 0.5;
        float _1668 = dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667));
        float _1673 = (_1668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1668);
        float _1681 = (dot(vec3(_911, _912, _913), vec3(_1673 * _1665, _1673 * _1666, _1673 * _1667)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1690 = sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667)) / (_1621 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1692 = _1691 * 2.0;
        float _1696 = (1.0 - _1691) / (_1691 + 1.0);
        float _4173 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1706 = ((((1.0 - _1697) * (_1692 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1692 + 1.0))) + _1697) * _1621;
        float _1707 = _1589 * 0.5;
        float _1708 = _1599 * 0.5;
        float _1709 = _1609 * 0.5;
        float _1710 = dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709));
        float _1715 = (_1710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1710);
        float _1723 = (dot(vec3(_911, _912, _913), vec3(_1715 * _1707, _1715 * _1708, _1715 * _1709)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709)) / (_1622 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1734 = _1733 * 2.0;
        float _1738 = (1.0 - _1733) / (_1733 + 1.0);
        float _4206 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1748 = ((((1.0 - _1739) * (_1734 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1734 + 1.0))) + _1739) * _1622;
        _1756 = _1589;
        _1757 = _1588;
        _1758 = _1587;
        _1759 = _1599;
        _1760 = _1598;
        _1761 = _1597;
        _1762 = _1609;
        _1763 = _1608;
        _1764 = _1607;
        _1765 = _1622;
        _1766 = _1621;
        _1767 = _1620;
        _1768 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
        _1769 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)));
        _1770 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)));
    }
    else
    {
        _1756 = _1450;
        _1757 = _1450;
        _1758 = _1450;
        _1759 = _1450;
        _1760 = _1450;
        _1761 = _1450;
        _1762 = _1450;
        _1763 = _1450;
        _1764 = _1450;
        _1765 = _1450;
        _1766 = _1450;
        _1767 = _1450;
        _1768 = 0.0;
        _1769 = 0.0;
        _1770 = 0.0;
    }
    float _1780 = (cbModelParam._m0[1u].x * (_1768 - _1462)) + _1462;
    float _1781 = (cbModelParam._m0[1u].x * (_1769 - _1463)) + _1463;
    float _1782 = (cbModelParam._m0[1u].x * (_1770 - _1464)) + _1464;
    float _1803 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1781, cbSceneParam._m0[89u].y, _1780 * cbSceneParam._m0[89u].x));
    float _1806 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1781, cbSceneParam._m0[90u].y, _1780 * cbSceneParam._m0[90u].x));
    float _1809 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1781, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1780));
    float _1824 = _1084 * 0.5;
    float _1825 = _1085 * 0.5;
    float _1826 = _1086 * 0.5;
    float _1827 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1758, _1761, _1764, _1767));
    float _1830 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1757, _1760, _1763, _1766));
    float _1833 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1756, _1759, _1762, _1765));
    float _1867;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1840 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1449, _1453, _1456, _1459));
        float _1844 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1451, _1454, _1457, _1460));
        float _1848 = dot(vec4(_1824, _1825, _1826, 1.0), vec4(_1452, _1455, _1458, _1461));
        float _1855 = dot(vec4(cbModelParam._m0[39u]), vec4(_1824, _1825, _1826, 1.0));
        _1867 = dot(vec3(isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1855) ? 0.0 : (isnan(0.0) ? _1855 : max(0.0, _1855))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1867 = 1.0;
    }
    float _1878;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1869 = dot(vec4(cbModelParam._m0[40u]), vec4(_1824, _1825, _1826, 1.0));
        _1878 = dot(vec3(isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1869) ? 0.0 : (isnan(0.0) ? _1869 : max(0.0, _1869))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1878 = 1.0;
    }
    float _1882 = (_1878 * cbModelParam._m0[1u].x) + (_1867 * (1.0 - cbModelParam._m0[1u].x));
    float _1892 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _914);
    float _1893 = isnan(_1892) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1892 : min(cbModelParam._m0[25u].z, _1892));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1940 = fma(_1148, cbModelParam._m0[13u].z, fma(_1144, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140)) + cbModelParam._m0[13u].w;
        float _1944 = fma(_1148, cbModelParam._m0[14u].z, fma(_1144, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140)) + cbModelParam._m0[14u].w;
        float _1948 = fma(_1148, cbModelParam._m0[15u].z, fma(_1144, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140)) + cbModelParam._m0[15u].w;
        float _1951 = fma(_1086, cbModelParam._m0[13u].z, fma(_1085, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1084));
        float _1954 = fma(_1086, cbModelParam._m0[14u].z, fma(_1085, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1084));
        float _1957 = fma(_1086, cbModelParam._m0[15u].z, fma(_1085, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1084));
        float _1985;
        if (_1951 > 0.0)
        {
            _1985 = abs((1.0 - _1940) / _1951);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1940 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1985 = frontier_phi_14_12_ladder;
        }
        float _2209;
        if (_1954 > 0.0)
        {
            _2209 = abs((1.0 - _1944) / _1954);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1944 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2209 = frontier_phi_23_19_ladder;
        }
        float _2466;
        if (_1957 > 0.0)
        {
            _2466 = abs((1.0 - _1948) / _1957);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1948 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2466 = frontier_phi_35_30_ladder;
        }
        float _2468 = isnan(_2209) ? _1985 : (isnan(_1985) ? _2209 : min(_1985, _2209));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1951) + _1940;
        float _2474 = (_2469 * _1954) + _1944;
        float _2475 = (_2469 * _1957) + _1948;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2478 = (-1.0) - _2476;
        float _2480 = _2476 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2475 > _2480) || ((_2475 < _2478) || ((_2474 > _2480) || ((_2474 < _2478) || ((_2473 < _2478) || (_2473 > _2480))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2475, cbModelParam._m0[9u].z, fma(_2474, cbModelParam._m0[9u].y, _2473 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2475, cbModelParam._m0[10u].z, fma(_2474, cbModelParam._m0[10u].y, _2473 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2475, cbModelParam._m0[11u].z, fma(_2474, cbModelParam._m0[11u].y, _2473 * cbModelParam._m0[11u].x))), _1893);
            frontier_phi_13_35_ladder = _2603.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2603.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2603.x * cbModelParam._m0[1u].y;
        }
        _1973 = frontier_phi_13_35_ladder_2;
        _1975 = frontier_phi_13_35_ladder_1;
        _1977 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1961 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1084, _1085, _1086), _1893);
        _1973 = _1961.x * cbModelParam._m0[1u].y;
        _1975 = _1961.y * cbModelParam._m0[1u].y;
        _1977 = _1961.z * cbModelParam._m0[1u].y;
    }
    float _1981 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _914);
    float _1982 = isnan(_1981) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1981 : min(cbModelParam._m0[25u].w, _1981));
    float _2072;
    float _2074;
    float _2076;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2036 = fma(_1148, cbModelParam._m0[21u].z, fma(_1144, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140)) + cbModelParam._m0[21u].w;
        float _2040 = fma(_1148, cbModelParam._m0[22u].z, fma(_1144, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140)) + cbModelParam._m0[22u].w;
        float _2044 = fma(_1148, cbModelParam._m0[23u].z, fma(_1144, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140)) + cbModelParam._m0[23u].w;
        float _2047 = fma(_1086, cbModelParam._m0[21u].z, fma(_1085, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1084));
        float _2050 = fma(_1086, cbModelParam._m0[22u].z, fma(_1085, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1084));
        float _2053 = fma(_1086, cbModelParam._m0[23u].z, fma(_1085, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1084));
        float _2214;
        if (_2047 > 0.0)
        {
            _2214 = abs((1.0 - _2036) / _2047);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2036 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2214 = frontier_phi_25_21_ladder;
        }
        float _2493;
        if (_2050 > 0.0)
        {
            _2493 = abs((1.0 - _2040) / _2050);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2040 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2493 = frontier_phi_37_32_ladder;
        }
        float _2706;
        if (_2053 > 0.0)
        {
            _2706 = abs((1.0 - _2044) / _2053);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2044 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2706 = frontier_phi_46_43_ladder;
        }
        float _2708 = isnan(_2493) ? _2214 : (isnan(_2214) ? _2493 : min(_2214, _2493));
        float _2709 = isnan(_2706) ? _2708 : (isnan(_2708) ? _2706 : min(_2708, _2706));
        float _2713 = (_2709 * _2047) + _2036;
        float _2714 = (_2709 * _2050) + _2040;
        float _2715 = (_2709 * _2053) + _2044;
        float _2716 = _2709 * 9.9999997473787516355514526367188e-05;
        float _2717 = (-1.0) - _2716;
        float _2719 = _2716 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2715 > _2719) || ((_2715 < _2717) || ((_2714 > _2719) || ((_2714 < _2717) || ((_2713 < _2717) || (_2713 > _2719))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2715, cbModelParam._m0[17u].z, fma(_2714, cbModelParam._m0[17u].y, _2713 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2715, cbModelParam._m0[18u].z, fma(_2714, cbModelParam._m0[18u].y, _2713 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2715, cbModelParam._m0[19u].z, fma(_2714, cbModelParam._m0[19u].y, _2713 * cbModelParam._m0[19u].x))), _1982);
            frontier_phi_22_46_ladder = _2914.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2914.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2914.x * cbModelParam._m0[1u].z;
        }
        _2072 = frontier_phi_22_46_ladder_2;
        _2074 = frontier_phi_22_46_ladder_1;
        _2076 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2056 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1084, _1085, _1086), _1982);
        _2072 = _2056.x * cbModelParam._m0[1u].z;
        _2074 = _2056.y * cbModelParam._m0[1u].z;
        _2076 = _2056.z * cbModelParam._m0[1u].z;
    }
    float _2089 = (((_1111 * _1060) + _1112) * _1076) * ((cbModelParam._m0[1u].w * (_2072 - _1973)) + _1973);
    float _2091 = (((_1111 * _1062) + _1112) * _1076) * ((cbModelParam._m0[1u].w * (_2074 - _1975)) + _1975);
    float _2093 = (((_1111 * _1063) + _1112) * _1076) * ((cbModelParam._m0[1u].w * (_2076 - _1977)) + _1977);
    float _2096 = fma(_2093, cbSceneParam._m0[89u].z, fma(_2091, cbSceneParam._m0[89u].y, _2089 * cbSceneParam._m0[89u].x));
    float _2099 = fma(_2093, cbSceneParam._m0[90u].z, fma(_2091, cbSceneParam._m0[90u].y, _2089 * cbSceneParam._m0[90u].x));
    float _2102 = fma(_2093, cbSceneParam._m0[91u].z, fma(_2091, cbSceneParam._m0[91u].y, _2089 * cbSceneParam._m0[91u].x));
    vec4 _2110 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_998, _999));
    float _2112 = _2110.w;
    float _2124 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2112);
    float _2125 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2112);
    float _2126 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2112);
    uvec4 _2130 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2132 = _2130.x * 14u;
    uint _2133 = _2132 + 13u;
    float _2140 = _1076 + (-1.0);
    float _2145 = (cbLight._m0[_2133].x * _2140) + 1.0;
    float _2146 = (cbLight._m0[_2133].y * _2140) + 1.0;
    float _2147 = (cbLight._m0[_2133].z * _2140) + 1.0;
    float _2148 = (cbLight._m0[_2133].w * _2140) + 1.0;
    uint _2149 = _2132 + 5u;
    float _2155 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
    uint _2159 = _2132 + 4u;
    float _2168 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
    uint _2172 = _2132 | 1u;
    float _2183 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_911, _912, _913));
    float _2186 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_911, _912, _913));
    float _4342 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _4353 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2191 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * 0.3183098733425140380859375;
    float _2193 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * 0.3183098733425140380859375;
    float _2200 = ((cbLight._m0[_2149].x * _2155) * _2193) + (((cbLight._m0[_2159].x * _2124) * _2168) * _2191);
    float _2201 = ((_2155 * cbLight._m0[_2149].y) * _2193) + (((cbLight._m0[_2159].y * _2125) * _2168) * _2191);
    float _2202 = ((_2155 * cbLight._m0[_2149].z) * _2193) + (((cbLight._m0[_2159].z * _2126) * _2168) * _2191);
    uvec4 _2206 = floatBitsToUint(cbLight._m0[_2132 + 12u]);
    bool _2208 = _2206.x == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2208)
    {
        _2219 = _2200;
        _2221 = _2201;
        _2223 = _2202;
    }
    else
    {
        uint _2227 = _2132 + 6u;
        float _2243 = (dot(vec3(cbLight._m0[_2132 + 2u].xyz), vec3(_911, _912, _913)) * 0.5) + 0.5;
        float _2244 = _2243 * _2243;
        float _4364 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2245 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2246 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2219 = (((cbLight._m0[_2227].x * 0.3183098733425140380859375) * _2245) * _2246) + _2200;
        _2221 = (((cbLight._m0[_2227].y * 0.3183098733425140380859375) * _2245) * _2246) + _2201;
        _2223 = (((cbLight._m0[_2227].z * 0.3183098733425140380859375) * _2245) * _2246) + _2202;
    }
    bool _2226 = _2206.y == 0u;
    float _2264;
    float _2266;
    float _2268;
    if (_2226)
    {
        _2264 = _2219;
        _2266 = _2221;
        _2268 = _2223;
    }
    else
    {
        uint _2437 = _2132 + 7u;
        float _2453 = (dot(vec3(cbLight._m0[_2132 + 3u].xyz), vec3(_911, _912, _913)) * 0.5) + 0.5;
        float _2454 = _2453 * _2453;
        float _4380 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2455 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2456 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2264 = (((cbLight._m0[_2437].x * 0.3183098733425140380859375) * _2455) * _2456) + _2219;
        _2266 = (((cbLight._m0[_2437].y * 0.3183098733425140380859375) * _2455) * _2456) + _2221;
        _2268 = (((cbLight._m0[_2437].z * 0.3183098733425140380859375) * _2455) * _2456) + _2223;
    }
    uint _2271 = _2132 + 8u;
    float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _914) * 0.949999988079071044921875);
    float _2285 = _2284 * _2284;
    float _2286 = cbLight._m0[_2132].x + _990;
    float _2287 = cbLight._m0[_2132].y + _991;
    float _2288 = cbLight._m0[_2132].z + _992;
    float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
    float _2293 = _2292 * _2286;
    float _2294 = _2292 * _2287;
    float _2295 = _2292 * _2288;
    float _2296 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2132].xyz));
    float _4396 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2299 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _4407 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _2300 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2301 = dot(vec3(_911, _912, _913), vec3(_2293, _2294, _2295));
    float _4418 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2305 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2293, _2294, _2295));
    float _4429 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2309 = _2285 * _2285;
    float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
    float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0);
    float _2322 = 0.959999978542327880859375 - _1057;
    float _2324 = 0.959999978542327880859375 - _1058;
    float _2325 = 0.959999978542327880859375 - _1059;
    float _2332 = 1.0 - _2285;
    float _2343 = (0.5 / (((_2300 * ((_2299 * _2332) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2332) + _2285) * _2299))) * _2299;
    float _4440 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2345 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
    uint _2359 = _2132 + 9u;
    float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _914) * 0.949999988079071044921875);
    float _2371 = _2370 * _2370;
    float _2372 = cbLight._m0[_2172].x + _990;
    float _2373 = cbLight._m0[_2172].y + _991;
    float _2374 = cbLight._m0[_2172].z + _992;
    float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
    float _2379 = _2378 * _2372;
    float _2380 = _2378 * _2373;
    float _2381 = _2378 * _2374;
    float _2382 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2172].xyz));
    float _4451 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2386 = dot(vec3(_911, _912, _913), vec3(_2379, _2380, _2381));
    float _4462 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2379, _2380, _2381));
    float _4473 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2371 * _2371;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2405 = exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0);
    float _2412 = 1.0 - _2371;
    float _2422 = (0.5 / (((_2300 * ((_2385 * _2412) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2412) + _2371) * _2385))) * _2385;
    float _4484 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2424 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    float _2434 = (((((_2405 * _2322) + _1060) * cbLight._m0[_2359].x) * _2424) * _2155) + ((((cbLight._m0[_2271].x * _2124) * ((_2321 * _2322) + _1060)) * _2345) * _2168);
    float _2435 = (((((_2405 * _2324) + _1062) * cbLight._m0[_2359].y) * _2424) * _2155) + ((((cbLight._m0[_2271].y * _2125) * ((_2321 * _2324) + _1062)) * _2345) * _2168);
    float _2436 = (((((_2405 * _2325) + _1063) * cbLight._m0[_2359].z) * _2424) * _2155) + ((((cbLight._m0[_2271].z * _2126) * ((_2321 * _2325) + _1063)) * _2345) * _2168);
    float _2498;
    float _2500;
    float _2502;
    if (_2208)
    {
        _2498 = _2434;
        _2500 = _2435;
        _2502 = _2436;
    }
    else
    {
        uint _2504 = _2132 + 2u;
        uint _2508 = _2132 + 10u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _914) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _990;
        float _2525 = cbLight._m0[_2504].y + _991;
        float _2526 = cbLight._m0[_2504].z + _992;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2504].xyz));
        float _4495 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2538 = dot(vec3(_911, _912, _913), vec3(_2531, _2532, _2533));
        float _4506 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4517 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2557 = exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0);
        float _2564 = 1.0 - _2523;
        float _2574 = (0.5 / (((_2300 * ((_2537 * _2564) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2564) + _2523) * _2537))) * _2537;
        float _4528 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2576 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2577 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2498 = (((((_2557 * _2322) + _1060) * cbLight._m0[_2508].x) * _2576) * _2577) + _2434;
        _2500 = (((((_2557 * _2324) + _1062) * cbLight._m0[_2508].y) * _2576) * _2577) + _2435;
        _2502 = (((((_2557 * _2325) + _1063) * cbLight._m0[_2508].z) * _2576) * _2577) + _2436;
    }
    float _2612;
    float _2614;
    float _2616;
    if (_2226)
    {
        _2612 = _2498;
        _2614 = _2500;
        _2616 = _2502;
    }
    else
    {
        uint _2623 = _2132 + 3u;
        uint _2627 = _2132 + 11u;
        float _2641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2623].w)) * _914) * 0.949999988079071044921875);
        float _2642 = _2641 * _2641;
        float _2643 = cbLight._m0[_2623].x + _990;
        float _2644 = cbLight._m0[_2623].y + _991;
        float _2645 = cbLight._m0[_2623].z + _992;
        float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
        float _2650 = _2649 * _2643;
        float _2651 = _2649 * _2644;
        float _2652 = _2649 * _2645;
        float _2653 = dot(vec3(_911, _912, _913), vec3(cbLight._m0[_2623].xyz));
        float _4544 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2657 = dot(vec3(_911, _912, _913), vec3(_2650, _2651, _2652));
        float _4555 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2660 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2661 = dot(vec3(cbLight._m0[_2623].xyz), vec3(_2650, _2651, _2652));
        float _4566 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2665 = _2642 * _2642;
        float _2669 = ((_2660 * _2660) * (_2665 + (-1.0))) + 1.0;
        float _2676 = exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0);
        float _2683 = 1.0 - _2642;
        float _2693 = (0.5 / (((_2300 * ((_2656 * _2683) + _2642)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2683) + _2642) * _2656))) * _2656;
        float _4577 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2695 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2665 / ((_2669 * _2669) * 3.141590118408203125));
        float _2696 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2612 = (((((_2676 * _2322) + _1060) * cbLight._m0[_2627].x) * _2695) * _2696) + _2498;
        _2614 = (((((_2676 * _2324) + _1062) * cbLight._m0[_2627].y) * _2695) * _2696) + _2500;
        _2616 = (((((_2676 * _2325) + _1063) * cbLight._m0[_2627].z) * _2695) * _2696) + _2502;
    }
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    if (_2130.y == 0u)
    {
        float _2771 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2771;
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2771;
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2771;
        uvec4 _2786 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2787 = _2786.x;
        uint _2798 = uint((float(_2786.y) * floor(float(uint(cbSceneParam._m0[85u].y * _999) / _2787))) + floor(float(uint(cbSceneParam._m0[85u].x * _998) / _2787)));
        float _2808 = (log2(_2774 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2809 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        uint _2812 = uint(isnan(14.0) ? _2809 : (isnan(_2809) ? 14.0 : min(_2809, 14.0)));
        uvec4 _2817 = texelFetch(g_lightClusterGridBuffer, int(((_2812 << 2u) + (_2798 << 6u)) >> 2u));
        uint _2818 = _2817.x;
        uint _2819 = _2786.z;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((((1u << ((_2819 >> 4u) & 15u)) + 4294967295u) & _2818) == 0u) || ((_2819 & 240u) == 0u))
        {
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
        }
        else
        {
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            uint _3070 = 0u;
            uint _3079;
            bool _3080;
            for (;;)
            {
                _3079 = texelFetch(g_lightClassification, int((((_2812 << 5u) + (_2798 << 9u)) + (_3070 << 2u)) >> 2u)).x;
                _3080 = _3079 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3080)
                {
                    frontier_phi_61_pred = _3064;
                    frontier_phi_61_pred_1 = _3069;
                    frontier_phi_61_pred_2 = _3068;
                    frontier_phi_61_pred_3 = _3067;
                    frontier_phi_61_pred_4 = _3066;
                    frontier_phi_61_pred_5 = _3065;
                }
                else
                {
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    uint _3194;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3079;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    for (;;)
                    {
                        uint _3198 = uint(findLSB(_3194)) + (_3070 << 5u);
                        uint _3195 = (_3194 + 4294967295u) & _3194;
                        uint _3200 = _3198 * 48u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3200)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3200 + 3u)).x));
                        uint _3220 = (_3198 * 48u) + 4u;
                        vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 3u)).x));
                        uint _3239 = (_3198 * 48u) + 8u;
                        vec3 _3250 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x));
                        float _3254 = _3214.x - _2772;
                        float _3255 = _3214.y - _2773;
                        float _3256 = _3214.z - _2774;
                        float _3257 = dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256));
                        float _3260 = inversesqrt(_3257);
                        float _3261 = _3260 * _3254;
                        float _3262 = _3260 * _3255;
                        float _3263 = _3260 * _3256;
                        float _3264 = dot(vec3(_1017, _1020, _1023), vec3(_3261, _3262, _3263));
                        float _3269 = 1.0 - (_3257 * _3214.w);
                        float _4603 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3270 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3271 = sqrt(_3257) * _3233.w;
                        float _3274 = 1.39999997615814208984375 / (_3271 + 1.39999997615814208984375);
                        float _3275 = _3274 * _3274;
                        float _3278 = ((1.0 - _3275) * _3264) + _3275;
                        float _3281 = _3271 * _3271;
                        float _3285 = ((isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))) * _3270) / ((_3281 * 0.699999988079071044921875) + 1.0);
                        float _3289 = (-0.0) - _2772;
                        float _3290 = (-0.0) - _2773;
                        float _3291 = (-0.0) - _2774;
                        float _3295 = inversesqrt(dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291)));
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3306 = exp2(log2(1.0 / ((_3281 * 3.5) + 5.0)) * 0.25);
                        float _3307 = 1.0 - _1092;
                        float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                        float _3315 = _3314 * _3314;
                        float _3316 = _3315 * _3315;
                        float _3317 = _3296 + _3261;
                        float _3318 = _3297 + _3262;
                        float _3319 = _3298 + _3263;
                        float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                        float _3327 = dot(vec3(_1017, _1020, _1023), vec3(_3296, _3297, _3298));
                        float _4619 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3330 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3331 = dot(vec3(_1017, _1020, _1023), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                        float _4630 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3334 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                        float _3339 = _3274 * _3315;
                        float _3340 = _3339 * _3339;
                        float _3343 = ((1.0 - _3340) * _3264) + _3340;
                        float _4641 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3345 = 1.0 - _3315;
                        float _3355 = (0.5 / (((_3344 * ((_3330 * _3345) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3315) * _3330))) * _3344;
                        float _4652 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3366 = (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) / ((_3338 * _3338) * ((_3281 * 2.1991131305694580078125) + 3.141590118408203125))) * _3270;
                        _3123 = (_3285 * _3233.x) + _3191;
                        _3124 = (_3285 * _3233.y) + _3192;
                        _3125 = (_3285 * _3233.z) + _3193;
                        _3120 = (_3366 * _3250.x) + _3188;
                        _3121 = (_3366 * _3250.y) + _3189;
                        _3122 = (_3366 * _3250.z) + _3190;
                        if (_3195 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3195;
                        }
                    }
                    frontier_phi_61_pred = _3120;
                    frontier_phi_61_pred_1 = _3125;
                    frontier_phi_61_pred_2 = _3124;
                    frontier_phi_61_pred_3 = _3123;
                    frontier_phi_61_pred_4 = _3122;
                    frontier_phi_61_pred_5 = _3121;
                }
                _2920 = frontier_phi_61_pred;
                _2930 = frontier_phi_61_pred_1;
                _2928 = frontier_phi_61_pred_2;
                _2926 = frontier_phi_61_pred_3;
                _2924 = frontier_phi_61_pred_4;
                _2922 = frontier_phi_61_pred_5;
                uint _3071 = _3070 + 1u;
                if (_3071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3064 = _2920;
                    _3065 = _2922;
                    _3066 = _2924;
                    _3067 = _2926;
                    _3068 = _2928;
                    _3069 = _2930;
                    _3070 = _3071;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
        }
        uvec4 _2933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2934 = _2933.z;
        uint _2936 = (_2934 >> 8u) & 15u;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        if (((4294967295u << _2936) & _2818) == 0u)
        {
            _3032 = _2919;
            _3034 = _2921;
            _3036 = _2923;
            _3038 = _2925;
            _3040 = _2927;
            _3042 = _2929;
        }
        else
        {
            float _3057 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
            float _3058 = _3057 * _2772;
            float _3059 = _3057 * _2773;
            float _3060 = _3057 * _2774;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2936 < ((_2934 >> 12u) & 15u))
            {
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3171 = _2919;
                float _3172 = _2921;
                float _3173 = _2923;
                float _3174 = _2925;
                float _3175 = _2927;
                float _3176 = _2929;
                uint _3177 = _2936;
                uint _3186;
                bool _3187;
                for (;;)
                {
                    _3186 = texelFetch(g_lightClassification, int((((_2812 << 5u) + (_2798 << 9u)) + (_3177 << 2u)) >> 2u)).x;
                    _3187 = _3186 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3187)
                    {
                        frontier_phi_67_pred = _3174;
                        frontier_phi_67_pred_1 = _3175;
                        frontier_phi_67_pred_2 = _3176;
                        frontier_phi_67_pred_3 = _3173;
                        frontier_phi_67_pred_4 = _3172;
                        frontier_phi_67_pred_5 = _3171;
                    }
                    else
                    {
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3384 = _3171;
                        float _3385 = _3172;
                        float _3386 = _3173;
                        float _3387 = _3174;
                        float _3388 = _3175;
                        float _3389 = _3176;
                        uint _3390 = _3186;
                        uint _3391;
                        vec4 _3416;
                        float _3417;
                        vec4 _3432;
                        vec3 _3444;
                        vec4 _3459;
                        vec4 _3474;
                        float _3520;
                        bool _3521;
                        for (;;)
                        {
                            uint _3401 = ((_3177 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3390));
                            _3391 = (_3390 + 4294967295u) & _3390;
                            uint _3403 = _3401 * 40u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3417 = _3416.w;
                            uint _3419 = (_3401 * 40u) + 4u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3401 * 40u) + 8u;
                            _3444 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x));
                            uint _3446 = (_3401 * 40u) + 16u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3401 * 40u) + 20u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3476 = (_3401 * 40u) + 24u;
                            vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3495 = (_3401 * 40u) + 28u;
                            vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            _3520 = fma(_2774, _3508.z, fma(_2773, _3508.y, _3508.x * _2772)) + _3508.w;
                            _3521 = !((fma(_2774, _3489.z, fma(_2773, _3489.y, _3489.x * _2772)) + _3489.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3521)
                            {
                                float _3548 = _3416.x - _2772;
                                float _3549 = _3416.y - _2773;
                                float _3550 = _3416.z - _2774;
                                float _3551 = dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550));
                                float _3554 = inversesqrt(_3551);
                                float _3555 = _3554 * _3548;
                                float _3556 = _3554 * _3549;
                                float _3557 = _3554 * _3550;
                                float _3561 = 1.0 - (_3551 / (_3417 * _3417));
                                float _4663 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3566 = sqrt(_3551) * _3432.w;
                                float _3568 = 1.39999997615814208984375 / (_3566 + 1.39999997615814208984375);
                                float _3569 = _3568 * _3568;
                                float _3572 = ((1.0 - _3569) * dot(vec3(_3555, _3556, _3557), vec3(_1017, _1020, _1023))) + _3569;
                                float _3575 = _3566 * _3566;
                                float _3579 = (fma(_2774, _3459.z, fma(_2773, _3459.y, _3459.x * _2772)) + _3459.w) / _3520;
                                float _3580 = (fma(_2774, _3474.z, fma(_2773, _3474.y, _3474.x * _2772)) + _3474.w) / _3520;
                                float _3584 = 1.0 - dot(vec2(_3579, _3580), vec2(_3579, _3580));
                                float _4679 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3586 = _3585 * (((isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0))) * _3562) / ((_3575 * 0.699999988079071044921875) + 1.0));
                                float _3598 = exp2(log2(1.0 / ((_3575 * 3.5) + 5.0)) * 0.25);
                                float _3599 = 1.0 - _1092;
                                float _3606 = sqrt(1.0 - ((1.0 - (_3599 * _3599)) * (1.0 - (_3598 * _3598))));
                                float _3607 = _3606 * _3606;
                                float _3608 = _3607 * _3607;
                                float _3609 = _3555 - _3058;
                                float _3610 = _3556 - _3059;
                                float _3611 = _3557 - _3060;
                                float _3615 = inversesqrt(dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611)));
                                float _3619 = dot(vec3(_1017, _1020, _1023), vec3((-0.0) - _3058, (-0.0) - _3059, (-0.0) - _3060));
                                float _4690 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3622 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3623 = dot(vec3(_1017, _1020, _1023), vec3(_3615 * _3609, _3615 * _3610, _3615 * _3611));
                                float _4701 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3626 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3630 = ((_3626 * _3626) * (_3608 + (-1.0))) + 1.0;
                                float _3631 = _3568 * _3607;
                                float _3632 = _3631 * _3631;
                                float _3638 = ((1.0 - _3632) * dot(vec3(_1017, _1020, _1023), vec3(_3555, _3556, _3557))) + _3632;
                                float _4712 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3640 = 1.0 - _3607;
                                float _3650 = (0.5 / (((_3639 * ((_3622 * _3640) + _3607)) + 9.9999999392252902907785028219223e-09) + (((_3639 * _3640) + _3607) * _3622))) * _3639;
                                float _4723 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3660 = (_3585 * _3562) * (((_3608 * 3.1415927410125732421875) * (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) / ((_3630 * _3630) * ((_3575 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3660 * _3444.x;
                                frontier_phi_73_pred_1 = _3660 * _3444.y;
                                frontier_phi_73_pred_2 = _3586 * _3432.z;
                                frontier_phi_73_pred_3 = _3586 * _3432.y;
                                frontier_phi_73_pred_4 = _3586 * _3432.x;
                                frontier_phi_73_pred_5 = _3660 * _3444.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3664 = frontier_phi_73_pred;
                            _3665 = frontier_phi_73_pred_1;
                            _3669 = frontier_phi_73_pred_2;
                            _3668 = frontier_phi_73_pred_3;
                            _3667 = frontier_phi_73_pred_4;
                            _3666 = frontier_phi_73_pred_5;
                            _3374 = _3667 + _3387;
                            _3375 = _3668 + _3388;
                            _3376 = _3669 + _3389;
                            _3371 = _3664 + _3384;
                            _3372 = _3665 + _3385;
                            _3373 = _3666 + _3386;
                            if (_3391 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3391;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3374;
                        frontier_phi_67_pred_1 = _3375;
                        frontier_phi_67_pred_2 = _3376;
                        frontier_phi_67_pred_3 = _3373;
                        frontier_phi_67_pred_4 = _3372;
                        frontier_phi_67_pred_5 = _3371;
                    }
                    _3039 = frontier_phi_67_pred;
                    _3041 = frontier_phi_67_pred_1;
                    _3043 = frontier_phi_67_pred_2;
                    _3037 = frontier_phi_67_pred_3;
                    _3035 = frontier_phi_67_pred_4;
                    _3033 = frontier_phi_67_pred_5;
                    uint _3178 = _3177 + 1u;
                    if (_3178 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3171 = _3033;
                        _3172 = _3035;
                        _3173 = _3037;
                        _3174 = _3039;
                        _3175 = _3041;
                        _3176 = _3043;
                        _3177 = _3178;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3041;
                frontier_phi_55_56_ladder_1 = _3043;
                frontier_phi_55_56_ladder_2 = _3039;
                frontier_phi_55_56_ladder_3 = _3037;
                frontier_phi_55_56_ladder_4 = _3035;
                frontier_phi_55_56_ladder_5 = _3033;
            }
            else
            {
                frontier_phi_55_56_ladder = _2927;
                frontier_phi_55_56_ladder_1 = _2929;
                frontier_phi_55_56_ladder_2 = _2925;
                frontier_phi_55_56_ladder_3 = _2923;
                frontier_phi_55_56_ladder_4 = _2921;
                frontier_phi_55_56_ladder_5 = _2919;
            }
            _3032 = frontier_phi_55_56_ladder_5;
            _3034 = frontier_phi_55_56_ladder_4;
            _3036 = frontier_phi_55_56_ladder_3;
            _3038 = frontier_phi_55_56_ladder_2;
            _3040 = frontier_phi_55_56_ladder;
            _3042 = frontier_phi_55_56_ladder_1;
        }
        float _3047 = isnan(1.0) ? _1076 : (isnan(_1076) ? 1.0 : min(_1076, 1.0));
        _2831 = (_3047 * _3038) + _2264;
        _2833 = (_3047 * _3040) + _2266;
        _2835 = (_3047 * _3042) + _2268;
        _2837 = ((_3032 * _1060) * _3047) + _2612;
        _2839 = ((_3034 * _1062) * _3047) + _2614;
        _2841 = ((_3036 * _1063) * _3047) + _2616;
    }
    else
    {
        _2831 = _2264;
        _2833 = _2266;
        _2835 = _2268;
        _2837 = _2612;
        _2839 = _2614;
        _2841 = _2616;
    }
    float _4739 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _4750 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _4761 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    uint _2861 = _252 + 6u;
    float _2869 = _998 / cbSceneParam._m0[86u].x;
    float _2870 = _999 / cbSceneParam._m0[86u].y;
    vec4 _2884 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2869, _2870, (log2((isnan(cbSceneParam._m0[77u].w) ? _933 : (isnan(_933) ? cbSceneParam._m0[77u].w : min(_933, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2886 = _2884.x;
    float _2887 = _2884.y;
    float _2888 = _2884.z;
    float _2889 = _2884.w;
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    if (_933 > cbSceneParam._m0[78u].w)
    {
        float _2944 = isnan(_933) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _933 : min(cbSceneParam._m0[80u].w, _933));
        float _2945 = _2944 / _933;
        float _2956 = _2945 * _983;
        float _2957 = _984 * _2945;
        float _2958 = (-0.0) - _2957;
        float _2960 = _2945 * _985;
        float _2962 = (cbSceneParam._m0[77u].w * _2958) / _2944;
        float _2963 = _2962 + cbSceneParam._m0[79u].w;
        float _2964 = cbSceneParam._m0[79u].w - _2957;
        float _2970 = sqrt(((_2956 * _2956) + (_2957 * _2957)) + (_2960 * _2960));
        float _2973 = (1.0 - (cbSceneParam._m0[77u].w / _2944)) * _2970;
        float _2978 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2980 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3133;
        if (abs((_2958 - _2962) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3133 = ((((_2963 > 0.0) ? exp2(_2978 * _2963) : (2.0 - exp2(_2980 * _2963))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2973;
        }
        else
        {
            float _3093 = 1.0 / cbSceneParam._m0[80u].x;
            float _3094 = isnan(_2964) ? _2963 : (isnan(_2963) ? _2964 : max(_2963, _2964));
            float _3095 = isnan(_2964) ? _2963 : (isnan(_2963) ? _2964 : min(_2963, _2964));
            float _3104 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : min(_3094, 0.0));
            float _3105 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : min(_3095, 0.0));
            _3133 = ((abs(_2970 / _2958) * cbSceneParam._m0[80u].y) * ((((_3104 - _3105) * 2.0) - ((exp2(_2978 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0)))) - exp2(_2978 * (isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))))) * _3093)) - ((exp2(_2980 * _3104) - exp2(_2980 * _3105)) * _3093))) + (_2973 * cbSceneParam._m0[80u].z);
        }
        vec4 _3135 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2869, _2870, 1.0), 0.0);
        float _3144 = exp2((_3133 * (-1.44269502162933349609375)) * (1.0 - _3135.w));
        float _3145 = log2(_3144);
        float _3161 = log2(_2889);
        _2982 = (exp2(_3161 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].x)) * _3135.x) / cbSceneParam._m0[78u].x)) + _2886;
        _2984 = (exp2(_3161 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].y)) * _3135.y) / cbSceneParam._m0[78u].y)) + _2887;
        _2986 = (exp2(_3161 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3145 * cbSceneParam._m0[78u].z)) * _3135.z) / cbSceneParam._m0[78u].z)) + _2888;
        _2988 = _3144 * _2889;
    }
    else
    {
        _2982 = _2886;
        _2984 = _2887;
        _2986 = _2888;
        _2988 = _2889;
    }
    float _3000 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3001 = _3000 == 3.0;
    float _3002 = log2(_2988);
    float _3009 = exp2(_3002 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2831 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1076))) + ((_2837 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1882)) * cbPerFrame._m0[3u].x));
    float _3010 = exp2(_3002 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2833 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1076))) + ((_2839 + ((isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))) * _1882)) * cbPerFrame._m0[3u].x));
    float _3011 = exp2(_3002 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2835 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1076))) + ((_2841 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1882)) * cbPerFrame._m0[3u].x));
    float _3020 = (_3000 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3020 * (_3001 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2982)));
    SV_Target.y = _3020 * (_3001 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2984)));
    SV_Target.z = _3020 * (_3001 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2986)));
    SV_Target.w = cbInstanceData._m0[_2861].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2861].w;
}


