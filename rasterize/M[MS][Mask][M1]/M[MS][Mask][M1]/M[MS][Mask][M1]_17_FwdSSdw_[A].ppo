#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1385;
float _3791;
float _3792;
float _3793;
float _3794;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[23u].w) + _414) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3803 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _445 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_432 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327);
    float _448 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_432 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328);
    float _451 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_432 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329);
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _486 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _488 = _486.x;
    float _489 = _486.y;
    float _490 = _486.z;
    float _499 = ((_469.z - _490) * _432) + _490;
    float _502 = ((((_469.x - _488) * _432) + _488) * 2.0) + (-1.0);
    float _504 = ((((_469.y - _489) * _432) + _489) * 2.0) + (-1.0);
    float _505 = dot(vec2(_502, _504), vec2(_502, _504));
    float _3814 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _510 = sqrt(1.0 - (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))));
    vec4 _526 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _553 = _551.x;
    float _554 = 1.0 - _553;
    float _563 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _566 = ((isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : min(_563, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _575 = (_566 - ((((((_553 - _554) * cbMtdParam._m0[24u].z) + _554) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _566))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3835 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _583 = (_576 * (cbMtdParam._m0[17u].x - _445)) + _445;
    float _584 = (_576 * (cbMtdParam._m0[17u].y - _448)) + _448;
    float _585 = (_576 * (cbMtdParam._m0[17u].z - _451)) + _451;
    vec4 _597 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _599 = _597.x;
    float _600 = 1.0 - _599;
    float _625 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_599 - _600) * cbMtdParam._m0[24u].w) + _600) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3846 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _634 = ((((cbMtdParam._m0[10u].x - _583) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _626) + _583;
    float _635 = ((((cbMtdParam._m0[10u].y - _584) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _626) + _584;
    float _636 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _585)) * _626) + _585;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _662 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _664 = _662.x;
    float _681 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _664) * _432) + _664;
    float _685 = ((_648.x - _681) * cbMtdParam._m0[19u].z) + _681;
    float _687 = _685 - (_685 * _576);
    float _689 = _687 - (_687 * _626);
    float _693 = (cbMtdParam._m0[19u].w * (_526.z - _499)) + _499;
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _714 = (_707.x * 2.0) + (-1.0);
    float _715 = (_707.y * 2.0) + (-1.0);
    float _716 = dot(vec2(_714, _715), vec2(_714, _715));
    float _3857 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _724 = (_576 * (_707.z - _693)) + _693;
    float _727 = ((cbMtdParam._m0[23u].x - _724) * _626) + _724;
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _752 = (_746.x * 2.0) + (-1.0);
    float _753 = (_746.y * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _3868 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _762 = (((_526.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _502;
    float _763 = (((_526.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _504;
    float _775 = (((_714 - _762) + (cbMtdParam._m0[21u].x * _762)) * _576) + _762;
    float _776 = (((_715 - _763) + (cbMtdParam._m0[21u].x * _763)) * _576) + _763;
    float _777 = (_576 * (sqrt(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) - _510)) + _510;
    float _788 = (((_752 - _775) + (_775 * cbMtdParam._m0[22u].z)) * _626) + _775;
    float _789 = (((_753 - _776) + (_776 * cbMtdParam._m0[22u].z)) * _626) + _776;
    float _790 = ((sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) - _777) * _626) + _777;
    float _792 = cbMtdParam._m0[22u].x + _526.w;
    float _795 = fma(_790, _246 * NORMAL.x, fma(_789, _253 * TANGENT.x, (_239 * _231) * _788));
    float _798 = fma(_790, _246 * NORMAL.y, fma(_789, _253 * TANGENT.y, (_239 * _232) * _788));
    float _801 = fma(_790, _246 * NORMAL.z, fma(_789, _253 * TANGENT.z, (_239 * _233) * _788));
    float _805 = inversesqrt(dot(vec3(_795, _798, _801), vec3(_795, _798, _801)));
    float _806 = _805 * _795;
    float _807 = _805 * _798;
    float _808 = _805 * _801;
    float _3879 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _809 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _3901 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3912 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3923 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3934 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _814 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _828 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _878 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _868);
    float _879 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _868);
    float _880 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _868);
    float _884 = inversesqrt(dot(vec3(_878, _879, _880), vec3(_878, _879, _880)));
    float _885 = _878 * _884;
    float _886 = _879 * _884;
    float _887 = _880 * _884;
    vec4 _892 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _894 = _892.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1066 = sqrt(((_878 * _878) + (_879 * _879)) + (_880 * _880));
        float _1072 = (cbMatDynParam._m0[5u].x * _1066) + cbMatDynParam._m0[5u].y;
        float _3945 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1077 = (cbMatDynParam._m0[5u].z * _1066) + cbMatDynParam._m0[5u].w;
        float _3956 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) - _1073)) + _1073) < ((_894 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _905 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _906 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _924 = fma(_808, cbSceneParam._m0[5u].z, fma(_807, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _806));
    float _927 = fma(_808, cbSceneParam._m0[6u].z, fma(_807, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _806));
    float _930 = fma(_808, cbSceneParam._m0[7u].z, fma(_807, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _806));
    uint _943 = _259 + 9u;
    uint _944 = _943 + uint(cbMatDynParam._m0[0u].w);
    float _950 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_944].x;
    float _951 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_944].y;
    float _952 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_944].z;
    float _3967 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _956 = 1.0 - _814;
    float _957 = _953 * _956;
    float _958 = _954 * _956;
    float _959 = _955 * _956;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _814;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _814;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _814;
    float _967 = _964 + 0.039999999105930328369140625;
    float _969 = _965 + 0.039999999105930328369140625;
    float _970 = _966 + 0.039999999105930328369140625;
    vec4 _979 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _905, cbSceneParam._m0[86u].y * _906));
    float _983 = ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * TEXCOORD_5.w) * _979.x;
    float _984 = dot(vec3(_806, _807, _808), vec3(_885, _886, _887));
    float _987 = _984 * 2.0;
    float _991 = (_987 * _806) - _885;
    float _992 = (_987 * _807) - _886;
    float _993 = (_987 * _808) - _887;
    float _997 = abs(dot(vec3(_885, _886, _887), vec3(_806, _807, _808)));
    float _4000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _999 = sqrt(_809);
    float _1012 = exp2((_999 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_999 * 3.0));
    float _1018 = (1.0 - _1012) * ((_999 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1019 = _1012 * _999;
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1384;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1109 = fma(_1055, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047));
        float _1113 = fma(_1055, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047));
        float _1117 = fma(_1055, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047));
        float _1142 = _1047 + _806;
        float _1143 = _1051 + _807;
        float _1144 = _1055 + _808;
        float _1154 = fma(_1144, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1142)) - _1109;
        float _1155 = fma(_1144, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1142)) - _1113;
        float _1156 = fma(_1144, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1142)) - _1117;
        float _1160 = inversesqrt(dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156)));
        float _1173 = ((_1160 * _1154) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1109 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1160 * _1155) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1113 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1160 * _1156) / cbModelParam._m0[34u].z) + ((((((_1117 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        float _1212 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1178.x + (-0.5));
        float _1214 = _1212 * (_1178.y + (-0.5));
        float _1215 = _1212 * (_1178.z + (-0.5));
        float _1222 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1185.x + (-0.5));
        float _1224 = _1222 * (_1185.y + (-0.5));
        float _1225 = _1222 * (_1185.z + (-0.5));
        float _1232 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1192.x + (-0.5));
        float _1234 = _1232 * (_1192.y + (-0.5));
        float _1235 = _1232 * (_1192.z + (-0.5));
        float _1242 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1199.x + (-0.5));
        float _1244 = _1242 * (_1199.y + (-0.5));
        float _1245 = _1242 * (_1199.z + (-0.5));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = _1213 * 0.5;
        float _1250 = _1223 * 0.5;
        float _1251 = _1233 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1266 = (dot(vec3(_806, _807, _808), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1276 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4048 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1278 + 1.0))) + _1283) * _1246;
        float _1293 = _1214 * 0.5;
        float _1294 = _1224 * 0.5;
        float _1295 = _1234 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_806, _807, _808), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4081 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1320 + 1.0))) + _1325) * _1247;
        float _1335 = _1215 * 0.5;
        float _1336 = _1225 * 0.5;
        float _1337 = _1235 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_806, _807, _808), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4114 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1362 + 1.0))) + _1367) * _1248;
        _1384 = _1215;
        _1386 = _1214;
        _1387 = _1213;
        _1388 = _1225;
        _1389 = _1224;
        _1390 = _1223;
        _1391 = _1235;
        _1392 = _1234;
        _1393 = _1233;
        _1394 = _1248;
        _1395 = _1247;
        _1396 = _1246;
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
    }
    else
    {
        _1384 = _1385;
        _1386 = _1385;
        _1387 = _1385;
        _1388 = _1385;
        _1389 = _1385;
        _1390 = _1385;
        _1391 = _1385;
        _1392 = _1385;
        _1393 = _1385;
        _1394 = _1385;
        _1395 = _1385;
        _1396 = _1385;
        _1397 = 0.0;
        _1398 = 0.0;
        _1399 = 0.0;
    }
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1427 = fma(_1055, cbModelParam._m0[30u].z, fma(_1051, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047));
        float _1431 = fma(_1055, cbModelParam._m0[31u].z, fma(_1051, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047));
        float _1435 = fma(_1055, cbModelParam._m0[32u].z, fma(_1051, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047));
        float _1458 = _1047 + _806;
        float _1459 = _1051 + _807;
        float _1460 = _1055 + _808;
        float _1470 = fma(_1460, cbModelParam._m0[30u].z, fma(_1459, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1458)) - _1427;
        float _1471 = fma(_1460, cbModelParam._m0[31u].z, fma(_1459, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1458)) - _1431;
        float _1472 = fma(_1460, cbModelParam._m0[32u].z, fma(_1459, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1458)) - _1435;
        float _1476 = inversesqrt(dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472)));
        float _1489 = ((_1476 * _1470) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1427 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1476 * _1471) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1431 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1491 = ((_1476 * _1472) / cbModelParam._m0[35u].z) + ((((((_1435 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1489, _1490, _1491), 0.0);
        float _1526 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1493.x + (-0.5));
        float _1528 = _1526 * (_1493.y + (-0.5));
        float _1529 = _1526 * (_1493.z + (-0.5));
        float _1536 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1500.x + (-0.5));
        float _1538 = _1536 * (_1500.y + (-0.5));
        float _1539 = _1536 * (_1500.z + (-0.5));
        float _1546 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1507.x + (-0.5));
        float _1548 = _1546 * (_1507.y + (-0.5));
        float _1549 = _1546 * (_1507.z + (-0.5));
        float _1556 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1514.x + (-0.5));
        float _1558 = _1556 * (_1514.y + (-0.5));
        float _1559 = _1556 * (_1514.z + (-0.5));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = _1527 * 0.5;
        float _1564 = _1537 * 0.5;
        float _1565 = _1547 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_806, _807, _808), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4177 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1590 + 1.0))) + _1595) * _1560;
        float _1605 = _1528 * 0.5;
        float _1606 = _1538 * 0.5;
        float _1607 = _1548 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_806, _807, _808), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4210 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1632 + 1.0))) + _1637) * _1561;
        float _1647 = _1529 * 0.5;
        float _1648 = _1539 * 0.5;
        float _1649 = _1549 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_806, _807, _808), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4243 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1674 + 1.0))) + _1679) * _1562;
        _1696 = _1529;
        _1697 = _1528;
        _1698 = _1527;
        _1699 = _1539;
        _1700 = _1538;
        _1701 = _1537;
        _1702 = _1549;
        _1703 = _1548;
        _1704 = _1547;
        _1705 = _1562;
        _1706 = _1561;
        _1707 = _1560;
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
    }
    else
    {
        _1696 = _1385;
        _1697 = _1385;
        _1698 = _1385;
        _1699 = _1385;
        _1700 = _1385;
        _1701 = _1385;
        _1702 = _1385;
        _1703 = _1385;
        _1704 = _1385;
        _1705 = _1385;
        _1706 = _1385;
        _1707 = _1385;
        _1708 = 0.0;
        _1709 = 0.0;
        _1710 = 0.0;
    }
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1397)) + _1397;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1398)) + _1398;
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1399)) + _1399;
    float _1743 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1721, cbSceneParam._m0[89u].y, _1720 * cbSceneParam._m0[89u].x));
    float _1746 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1721, cbSceneParam._m0[90u].y, _1720 * cbSceneParam._m0[90u].x));
    float _1749 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1721, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1720));
    float _1764 = _991 * 0.5;
    float _1765 = _992 * 0.5;
    float _1766 = _993 * 0.5;
    float _1767 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1770 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1773 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1807;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1780 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1384, _1388, _1391, _1394));
        float _1784 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1386, _1389, _1392, _1395));
        float _1788 = dot(vec4(_1764, _1765, _1766, 1.0), vec4(_1387, _1390, _1393, _1396));
        float _1795 = dot(vec4(cbModelParam._m0[39u]), vec4(_1764, _1765, _1766, 1.0));
        _1807 = dot(vec3(isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1795) ? 0.0 : (isnan(0.0) ? _1795 : max(0.0, _1795))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1807 = 1.0;
    }
    float _1818;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1809 = dot(vec4(cbModelParam._m0[40u]), vec4(_1764, _1765, _1766, 1.0));
        _1818 = dot(vec3(isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1809) ? 0.0 : (isnan(0.0) ? _1809 : max(0.0, _1809))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1818 = 1.0;
    }
    float _1822 = (_1818 * cbModelParam._m0[1u].x) + (_1807 * (1.0 - cbModelParam._m0[1u].x));
    float _1832 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _809);
    float _1833 = isnan(_1832) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1832 : min(cbModelParam._m0[25u].z, _1832));
    float _1914;
    float _1916;
    float _1918;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1881 = fma(_1055, cbModelParam._m0[13u].z, fma(_1051, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047)) + cbModelParam._m0[13u].w;
        float _1885 = fma(_1055, cbModelParam._m0[14u].z, fma(_1051, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047)) + cbModelParam._m0[14u].w;
        float _1889 = fma(_1055, cbModelParam._m0[15u].z, fma(_1051, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047)) + cbModelParam._m0[15u].w;
        float _1892 = fma(_993, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991));
        float _1895 = fma(_993, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991));
        float _1898 = fma(_993, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991));
        float _1926;
        if (_1892 > 0.0)
        {
            _1926 = abs((1.0 - _1881) / _1892);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1881 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1926 = frontier_phi_17_15_ladder;
        }
        float _2150;
        if (_1895 > 0.0)
        {
            _2150 = abs((1.0 - _1885) / _1895);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1885 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2150 = frontier_phi_26_22_ladder;
        }
        float _2407;
        if (_1898 > 0.0)
        {
            _2407 = abs((1.0 - _1889) / _1898);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1889 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2407 = frontier_phi_38_33_ladder;
        }
        float _2409 = isnan(_2150) ? _1926 : (isnan(_1926) ? _2150 : min(_1926, _2150));
        float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
        float _2414 = (_2410 * _1892) + _1881;
        float _2415 = (_2410 * _1895) + _1885;
        float _2416 = (_2410 * _1898) + _1889;
        float _2417 = _2410 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2417;
        float _2421 = _2417 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 > _2421) || ((_2415 < _2419) || ((_2414 < _2419) || (_2414 > _2421))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2416, cbModelParam._m0[9u].z, fma(_2415, cbModelParam._m0[9u].y, _2414 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2416, cbModelParam._m0[10u].z, fma(_2415, cbModelParam._m0[10u].y, _2414 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2416, cbModelParam._m0[11u].z, fma(_2415, cbModelParam._m0[11u].y, _2414 * cbModelParam._m0[11u].x))), _1833);
            frontier_phi_16_38_ladder = _2544.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2544.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2544.x * cbModelParam._m0[1u].y;
        }
        _1914 = frontier_phi_16_38_ladder_2;
        _1916 = frontier_phi_16_38_ladder_1;
        _1918 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_991, _992, _993), _1833);
        _1914 = _1902.x * cbModelParam._m0[1u].y;
        _1916 = _1902.y * cbModelParam._m0[1u].y;
        _1918 = _1902.z * cbModelParam._m0[1u].y;
    }
    float _1922 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _809);
    float _1923 = isnan(_1922) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1922 : min(cbModelParam._m0[25u].w, _1922));
    float _2013;
    float _2015;
    float _2017;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1977 = fma(_1055, cbModelParam._m0[21u].z, fma(_1051, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047)) + cbModelParam._m0[21u].w;
        float _1981 = fma(_1055, cbModelParam._m0[22u].z, fma(_1051, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047)) + cbModelParam._m0[22u].w;
        float _1985 = fma(_1055, cbModelParam._m0[23u].z, fma(_1051, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047)) + cbModelParam._m0[23u].w;
        float _1988 = fma(_993, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991));
        float _1991 = fma(_993, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991));
        float _1994 = fma(_993, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991));
        float _2155;
        if (_1988 > 0.0)
        {
            _2155 = abs((1.0 - _1977) / _1988);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1977 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2155 = frontier_phi_28_24_ladder;
        }
        float _2434;
        if (_1991 > 0.0)
        {
            _2434 = abs((1.0 - _1981) / _1991);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1981 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2434 = frontier_phi_40_35_ladder;
        }
        float _2647;
        if (_1994 > 0.0)
        {
            _2647 = abs((1.0 - _1985) / _1994);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1985 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2647 = frontier_phi_49_46_ladder;
        }
        float _2649 = isnan(_2434) ? _2155 : (isnan(_2155) ? _2434 : min(_2155, _2434));
        float _2650 = isnan(_2647) ? _2649 : (isnan(_2649) ? _2647 : min(_2649, _2647));
        float _2654 = (_2650 * _1988) + _1977;
        float _2655 = (_2650 * _1991) + _1981;
        float _2656 = (_2650 * _1994) + _1985;
        float _2657 = _2650 * 9.9999997473787516355514526367188e-05;
        float _2658 = (-1.0) - _2657;
        float _2660 = _2657 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2656 > _2660) || ((_2656 < _2658) || ((_2655 > _2660) || ((_2655 < _2658) || ((_2654 < _2658) || (_2654 > _2660))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2656, cbModelParam._m0[17u].z, fma(_2655, cbModelParam._m0[17u].y, _2654 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2656, cbModelParam._m0[18u].z, fma(_2655, cbModelParam._m0[18u].y, _2654 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2656, cbModelParam._m0[19u].z, fma(_2655, cbModelParam._m0[19u].y, _2654 * cbModelParam._m0[19u].x))), _1923);
            frontier_phi_25_49_ladder = _2855.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2855.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2855.x * cbModelParam._m0[1u].z;
        }
        _2013 = frontier_phi_25_49_ladder_2;
        _2015 = frontier_phi_25_49_ladder_1;
        _2017 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1997 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_991, _992, _993), _1923);
        _2013 = _1997.x * cbModelParam._m0[1u].z;
        _2015 = _1997.y * cbModelParam._m0[1u].z;
        _2017 = _1997.z * cbModelParam._m0[1u].z;
    }
    float _2030 = (((_1018 * _967) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_2013 - _1914)) + _1914);
    float _2032 = (((_1018 * _969) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_2015 - _1916)) + _1916);
    float _2034 = (((_1018 * _970) + _1019) * _983) * ((cbModelParam._m0[1u].w * (_2017 - _1918)) + _1918);
    float _2037 = fma(_2034, cbSceneParam._m0[89u].z, fma(_2032, cbSceneParam._m0[89u].y, _2030 * cbSceneParam._m0[89u].x));
    float _2040 = fma(_2034, cbSceneParam._m0[90u].z, fma(_2032, cbSceneParam._m0[90u].y, _2030 * cbSceneParam._m0[90u].x));
    float _2043 = fma(_2034, cbSceneParam._m0[91u].z, fma(_2032, cbSceneParam._m0[91u].y, _2030 * cbSceneParam._m0[91u].x));
    vec4 _2051 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_905, _906));
    float _2053 = _2051.w;
    float _2065 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2053);
    float _2066 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2053);
    float _2067 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2053);
    uvec4 _2071 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2073 = _2071.x * 14u;
    uint _2074 = _2073 + 13u;
    float _2081 = _983 + (-1.0);
    float _2086 = (cbLight._m0[_2074].x * _2081) + 1.0;
    float _2087 = (cbLight._m0[_2074].y * _2081) + 1.0;
    float _2088 = (cbLight._m0[_2074].z * _2081) + 1.0;
    float _2089 = (cbLight._m0[_2074].w * _2081) + 1.0;
    uint _2090 = _2073 + 5u;
    float _2096 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
    uint _2100 = _2073 + 4u;
    float _2109 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
    uint _2113 = _2073 | 1u;
    float _2124 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_806, _807, _808));
    float _2127 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_806, _807, _808));
    float _4379 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _4390 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2132 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * 0.3183098733425140380859375;
    float _2134 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.3183098733425140380859375;
    float _2141 = ((cbLight._m0[_2090].x * _2096) * _2134) + (((cbLight._m0[_2100].x * _2065) * _2109) * _2132);
    float _2142 = ((_2096 * cbLight._m0[_2090].y) * _2134) + (((cbLight._m0[_2100].y * _2066) * _2109) * _2132);
    float _2143 = ((_2096 * cbLight._m0[_2090].z) * _2134) + (((cbLight._m0[_2100].z * _2067) * _2109) * _2132);
    uvec4 _2147 = floatBitsToUint(cbLight._m0[_2073 + 12u]);
    bool _2149 = _2147.x == 0u;
    float _2160;
    float _2162;
    float _2164;
    if (_2149)
    {
        _2160 = _2141;
        _2162 = _2142;
        _2164 = _2143;
    }
    else
    {
        uint _2168 = _2073 + 6u;
        float _2184 = (dot(vec3(cbLight._m0[_2073 + 2u].xyz), vec3(_806, _807, _808)) * 0.5) + 0.5;
        float _2185 = _2184 * _2184;
        float _4401 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2186 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2187 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2160 = (((cbLight._m0[_2168].x * 0.3183098733425140380859375) * _2186) * _2187) + _2141;
        _2162 = (((cbLight._m0[_2168].y * 0.3183098733425140380859375) * _2186) * _2187) + _2142;
        _2164 = (((cbLight._m0[_2168].z * 0.3183098733425140380859375) * _2186) * _2187) + _2143;
    }
    bool _2167 = _2147.y == 0u;
    float _2205;
    float _2207;
    float _2209;
    if (_2167)
    {
        _2205 = _2160;
        _2207 = _2162;
        _2209 = _2164;
    }
    else
    {
        uint _2378 = _2073 + 7u;
        float _2394 = (dot(vec3(cbLight._m0[_2073 + 3u].xyz), vec3(_806, _807, _808)) * 0.5) + 0.5;
        float _2395 = _2394 * _2394;
        float _4417 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2396 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2397 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2205 = (((cbLight._m0[_2378].x * 0.3183098733425140380859375) * _2396) * _2397) + _2160;
        _2207 = (((cbLight._m0[_2378].y * 0.3183098733425140380859375) * _2396) * _2397) + _2162;
        _2209 = (((cbLight._m0[_2378].z * 0.3183098733425140380859375) * _2396) * _2397) + _2164;
    }
    uint _2212 = _2073 + 8u;
    float _2225 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _809) * 0.949999988079071044921875);
    float _2226 = _2225 * _2225;
    float _2227 = cbLight._m0[_2073].x + _885;
    float _2228 = cbLight._m0[_2073].y + _886;
    float _2229 = cbLight._m0[_2073].z + _887;
    float _2233 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
    float _2234 = _2233 * _2227;
    float _2235 = _2233 * _2228;
    float _2236 = _2233 * _2229;
    float _2237 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2073].xyz));
    float _4433 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2240 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _4444 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _2241 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2242 = dot(vec3(_806, _807, _808), vec3(_2234, _2235, _2236));
    float _4455 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2246 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2234, _2235, _2236));
    float _4466 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2250 = _2226 * _2226;
    float _2254 = ((_2245 * _2245) * (_2250 + (-1.0))) + 1.0;
    float _2262 = exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0);
    float _2263 = 0.959999978542327880859375 - _964;
    float _2265 = 0.959999978542327880859375 - _965;
    float _2266 = 0.959999978542327880859375 - _966;
    float _2273 = 1.0 - _2226;
    float _2284 = (0.5 / (((_2241 * ((_2240 * _2273) + _2226)) + 9.9999999392252902907785028219223e-09) + (((_2241 * _2273) + _2226) * _2240))) * _2240;
    float _4477 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2286 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2250 / ((_2254 * _2254) * 3.141590118408203125));
    uint _2300 = _2073 + 9u;
    float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _809) * 0.949999988079071044921875);
    float _2312 = _2311 * _2311;
    float _2313 = cbLight._m0[_2113].x + _885;
    float _2314 = cbLight._m0[_2113].y + _886;
    float _2315 = cbLight._m0[_2113].z + _887;
    float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
    float _2320 = _2319 * _2313;
    float _2321 = _2319 * _2314;
    float _2322 = _2319 * _2315;
    float _2323 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2113].xyz));
    float _4488 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2326 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2327 = dot(vec3(_806, _807, _808), vec3(_2320, _2321, _2322));
    float _4499 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2331 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2320, _2321, _2322));
    float _4510 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2335 = _2312 * _2312;
    float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
    float _2346 = exp2(log2(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * 5.0);
    float _2353 = 1.0 - _2312;
    float _2363 = (0.5 / (((_2241 * ((_2326 * _2353) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_2241 * _2353) + _2312) * _2326))) * _2326;
    float _4521 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2365 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
    float _2375 = (((((_2346 * _2263) + _967) * cbLight._m0[_2300].x) * _2365) * _2096) + ((((cbLight._m0[_2212].x * _2065) * ((_2262 * _2263) + _967)) * _2286) * _2109);
    float _2376 = (((((_2346 * _2265) + _969) * cbLight._m0[_2300].y) * _2365) * _2096) + ((((cbLight._m0[_2212].y * _2066) * ((_2262 * _2265) + _969)) * _2286) * _2109);
    float _2377 = (((((_2346 * _2266) + _970) * cbLight._m0[_2300].z) * _2365) * _2096) + ((((cbLight._m0[_2212].z * _2067) * ((_2262 * _2266) + _970)) * _2286) * _2109);
    float _2439;
    float _2441;
    float _2443;
    if (_2149)
    {
        _2439 = _2375;
        _2441 = _2376;
        _2443 = _2377;
    }
    else
    {
        uint _2445 = _2073 + 2u;
        uint _2449 = _2073 + 10u;
        float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _809) * 0.949999988079071044921875);
        float _2464 = _2463 * _2463;
        float _2465 = cbLight._m0[_2445].x + _885;
        float _2466 = cbLight._m0[_2445].y + _886;
        float _2467 = cbLight._m0[_2445].z + _887;
        float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
        float _2472 = _2471 * _2465;
        float _2473 = _2471 * _2466;
        float _2474 = _2471 * _2467;
        float _2475 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2445].xyz));
        float _4532 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2479 = dot(vec3(_806, _807, _808), vec3(_2472, _2473, _2474));
        float _4543 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2483 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2472, _2473, _2474));
        float _4554 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2487 = _2464 * _2464;
        float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
        float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0);
        float _2505 = 1.0 - _2464;
        float _2515 = (0.5 / (((_2241 * ((_2478 * _2505) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2241 * _2505) + _2464) * _2478))) * _2478;
        float _4565 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2517 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
        float _2518 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2439 = (((((_2498 * _2263) + _967) * cbLight._m0[_2449].x) * _2517) * _2518) + _2375;
        _2441 = (((((_2498 * _2265) + _969) * cbLight._m0[_2449].y) * _2517) * _2518) + _2376;
        _2443 = (((((_2498 * _2266) + _970) * cbLight._m0[_2449].z) * _2517) * _2518) + _2377;
    }
    float _2553;
    float _2555;
    float _2557;
    if (_2167)
    {
        _2553 = _2439;
        _2555 = _2441;
        _2557 = _2443;
    }
    else
    {
        uint _2564 = _2073 + 3u;
        uint _2568 = _2073 + 11u;
        float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2564].w)) * _809) * 0.949999988079071044921875);
        float _2583 = _2582 * _2582;
        float _2584 = cbLight._m0[_2564].x + _885;
        float _2585 = cbLight._m0[_2564].y + _886;
        float _2586 = cbLight._m0[_2564].z + _887;
        float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
        float _2591 = _2590 * _2584;
        float _2592 = _2590 * _2585;
        float _2593 = _2590 * _2586;
        float _2594 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2564].xyz));
        float _4581 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2598 = dot(vec3(_806, _807, _808), vec3(_2591, _2592, _2593));
        float _4592 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2602 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_2591, _2592, _2593));
        float _4603 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2606 = _2583 * _2583;
        float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
        float _2617 = exp2(log2(1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * 5.0);
        float _2624 = 1.0 - _2583;
        float _2634 = (0.5 / (((_2241 * ((_2597 * _2624) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2241 * _2624) + _2583) * _2597))) * _2597;
        float _4614 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2636 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
        float _2637 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2553 = (((((_2617 * _2263) + _967) * cbLight._m0[_2568].x) * _2636) * _2637) + _2439;
        _2555 = (((((_2617 * _2265) + _969) * cbLight._m0[_2568].y) * _2636) * _2637) + _2441;
        _2557 = (((((_2617 * _2266) + _970) * cbLight._m0[_2568].z) * _2636) * _2637) + _2443;
    }
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    if (_2071.y == 0u)
    {
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2713 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2712;
        float _2714 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2712;
        float _2715 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2712;
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.x;
        uint _2739 = uint((float(_2727.y) * floor(float(uint(cbSceneParam._m0[85u].y * _906) / _2728))) + floor(float(uint(cbSceneParam._m0[85u].x * _905) / _2728)));
        float _2749 = (log2(_2715 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2750 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        uint _2753 = uint(isnan(14.0) ? _2750 : (isnan(_2750) ? 14.0 : min(_2750, 14.0)));
        uvec4 _2758 = texelFetch(g_lightClusterGridBuffer, int(((_2753 << 2u) + (_2739 << 6u)) >> 2u));
        uint _2759 = _2758.x;
        uint _2760 = _2727.z;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        if (((((1u << ((_2760 >> 4u) & 15u)) + 4294967295u) & _2759) == 0u) || ((_2760 & 240u) == 0u))
        {
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
        }
        else
        {
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            uint _3019 = 0u;
            uint _3028;
            bool _3029;
            for (;;)
            {
                _3028 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_3019 << 2u)) >> 2u)).x;
                _3029 = _3028 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3029)
                {
                    frontier_phi_66_pred = _3013;
                    frontier_phi_66_pred_1 = _3018;
                    frontier_phi_66_pred_2 = _3017;
                    frontier_phi_66_pred_3 = _3016;
                    frontier_phi_66_pred_4 = _3015;
                    frontier_phi_66_pred_5 = _3014;
                }
                else
                {
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    uint _3164;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3028;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    for (;;)
                    {
                        uint _3168 = uint(findLSB(_3164)) + (_3019 << 5u);
                        uint _3165 = (_3164 + 4294967295u) & _3164;
                        uint _3170 = _3168 * 48u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 3u)).x));
                        uint _3190 = (_3168 * 48u) + 4u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 3u)).x));
                        uint _3209 = (_3168 * 48u) + 8u;
                        vec3 _3220 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x));
                        float _3224 = _3184.x - _2713;
                        float _3225 = _3184.y - _2714;
                        float _3226 = _3184.z - _2715;
                        float _3227 = dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226));
                        float _3230 = inversesqrt(_3227);
                        float _3231 = _3230 * _3224;
                        float _3232 = _3230 * _3225;
                        float _3233 = _3230 * _3226;
                        float _3234 = dot(vec3(_924, _927, _930), vec3(_3231, _3232, _3233));
                        float _3239 = 1.0 - (_3227 * _3184.w);
                        float _4640 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3240 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3241 = sqrt(_3227) * _3203.w;
                        float _3244 = 1.39999997615814208984375 / (_3241 + 1.39999997615814208984375);
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3234) + _3245;
                        float _3251 = _3241 * _3241;
                        float _3255 = ((isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))) * _3240) / ((_3251 * 0.699999988079071044921875) + 1.0);
                        float _3259 = (-0.0) - _2713;
                        float _3260 = (-0.0) - _2714;
                        float _3261 = (-0.0) - _2715;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3266 = _3265 * _3259;
                        float _3267 = _3265 * _3260;
                        float _3268 = _3265 * _3261;
                        float _3276 = exp2(log2(1.0 / ((_3251 * 3.5) + 5.0)) * 0.25);
                        float _3277 = 1.0 - _999;
                        float _3284 = sqrt(1.0 - ((1.0 - (_3277 * _3277)) * (1.0 - (_3276 * _3276))));
                        float _3285 = _3284 * _3284;
                        float _3286 = _3285 * _3285;
                        float _3287 = _3266 + _3231;
                        float _3288 = _3267 + _3232;
                        float _3289 = _3268 + _3233;
                        float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
                        float _3297 = dot(vec3(_924, _927, _930), vec3(_3266, _3267, _3268));
                        float _4656 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3300 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3301 = dot(vec3(_924, _927, _930), vec3(_3293 * _3287, _3293 * _3288, _3293 * _3289));
                        float _4667 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3304 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3308 = ((_3304 * _3304) * (_3286 + (-1.0))) + 1.0;
                        float _3309 = _3244 * _3285;
                        float _3310 = _3309 * _3309;
                        float _3313 = ((1.0 - _3310) * _3234) + _3310;
                        float _4678 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3314 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3315 = 1.0 - _3285;
                        float _3325 = (0.5 / (((_3314 * ((_3300 * _3315) + _3285)) + 9.9999999392252902907785028219223e-09) + (((_3314 * _3315) + _3285) * _3300))) * _3314;
                        float _4689 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3336 = (((_3286 * 3.1415927410125732421875) * (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) / ((_3308 * _3308) * ((_3251 * 2.1991131305694580078125) + 3.141590118408203125))) * _3240;
                        _3088 = (_3255 * _3203.x) + _3161;
                        _3089 = (_3255 * _3203.y) + _3162;
                        _3090 = (_3255 * _3203.z) + _3163;
                        _3085 = (_3336 * _3220.x) + _3158;
                        _3086 = (_3336 * _3220.y) + _3159;
                        _3087 = (_3336 * _3220.z) + _3160;
                        if (_3165 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3165;
                        }
                    }
                    frontier_phi_66_pred = _3085;
                    frontier_phi_66_pred_1 = _3090;
                    frontier_phi_66_pred_2 = _3089;
                    frontier_phi_66_pred_3 = _3088;
                    frontier_phi_66_pred_4 = _3087;
                    frontier_phi_66_pred_5 = _3086;
                }
                _2861 = frontier_phi_66_pred;
                _2871 = frontier_phi_66_pred_1;
                _2869 = frontier_phi_66_pred_2;
                _2867 = frontier_phi_66_pred_3;
                _2865 = frontier_phi_66_pred_4;
                _2863 = frontier_phi_66_pred_5;
                uint _3020 = _3019 + 1u;
                if (_3020 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3013 = _2861;
                    _3014 = _2863;
                    _3015 = _2865;
                    _3016 = _2867;
                    _3017 = _2869;
                    _3018 = _2871;
                    _3019 = _3020;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
        }
        uvec4 _2874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2875 = _2874.z;
        uint _2877 = (_2875 >> 8u) & 15u;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        if (((4294967295u << _2877) & _2759) == 0u)
        {
            _2981 = _2860;
            _2983 = _2862;
            _2985 = _2864;
            _2987 = _2866;
            _2989 = _2868;
            _2991 = _2870;
        }
        else
        {
            float _3006 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
            float _3007 = _3006 * _2713;
            float _3008 = _3006 * _2714;
            float _3009 = _3006 * _2715;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2877 < ((_2875 >> 12u) & 15u))
            {
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _3141 = _2860;
                float _3142 = _2862;
                float _3143 = _2864;
                float _3144 = _2866;
                float _3145 = _2868;
                float _3146 = _2870;
                uint _3147 = _2877;
                uint _3156;
                bool _3157;
                for (;;)
                {
                    _3156 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                    _3157 = _3156 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3157)
                    {
                        frontier_phi_77_pred = _3146;
                        frontier_phi_77_pred_1 = _3145;
                        frontier_phi_77_pred_2 = _3144;
                        frontier_phi_77_pred_3 = _3143;
                        frontier_phi_77_pred_4 = _3142;
                        frontier_phi_77_pred_5 = _3141;
                    }
                    else
                    {
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3363 = _3141;
                        float _3364 = _3142;
                        float _3365 = _3143;
                        float _3366 = _3144;
                        float _3367 = _3145;
                        float _3368 = _3146;
                        uint _3369 = _3156;
                        uint _3370;
                        vec4 _3395;
                        float _3396;
                        vec4 _3411;
                        vec3 _3423;
                        vec4 _3438;
                        vec4 _3454;
                        float _3500;
                        bool _3501;
                        for (;;)
                        {
                            uint _3380 = ((_3147 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3369));
                            _3370 = (_3369 + 4294967295u) & _3369;
                            uint _3382 = _3380 * 40u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3396 = _3395.w;
                            uint _3398 = (_3380 * 40u) + 4u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3380 * 40u) + 8u;
                            _3423 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x));
                            uint _3425 = (_3380 * 40u) + 16u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3441 = (_3380 * 40u) + 20u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3380 * 40u) + 24u;
                            vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3475 = (_3380 * 40u) + 28u;
                            vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            _3500 = fma(_2715, _3488.z, fma(_2714, _3488.y, _3488.x * _2713)) + _3488.w;
                            _3501 = !((fma(_2715, _3469.z, fma(_2714, _3469.y, _3469.x * _2713)) + _3469.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3501)
                            {
                                float _3528 = _3395.x - _2713;
                                float _3529 = _3395.y - _2714;
                                float _3530 = _3395.z - _2715;
                                float _3531 = dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530));
                                float _3534 = inversesqrt(_3531);
                                float _3535 = _3534 * _3528;
                                float _3536 = _3534 * _3529;
                                float _3537 = _3534 * _3530;
                                float _3541 = 1.0 - (_3531 / (_3396 * _3396));
                                float _4700 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3546 = sqrt(_3531) * _3411.w;
                                float _3548 = 1.39999997615814208984375 / (_3546 + 1.39999997615814208984375);
                                float _3549 = _3548 * _3548;
                                float _3552 = ((1.0 - _3549) * dot(vec3(_3535, _3536, _3537), vec3(_924, _927, _930))) + _3549;
                                float _3555 = _3546 * _3546;
                                float _3559 = (fma(_2715, _3438.z, fma(_2714, _3438.y, _3438.x * _2713)) + _3438.w) / _3500;
                                float _3560 = (fma(_2715, _3454.z, fma(_2714, _3454.y, _3454.x * _2713)) + _3454.w) / _3500;
                                float _3564 = 1.0 - dot(vec2(_3559, _3560), vec2(_3559, _3560));
                                float _4716 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3566 = _3565 * (((isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0))) * _3542) / ((_3555 * 0.699999988079071044921875) + 1.0));
                                float _3578 = exp2(log2(1.0 / ((_3555 * 3.5) + 5.0)) * 0.25);
                                float _3579 = 1.0 - _999;
                                float _3586 = sqrt(1.0 - ((1.0 - (_3579 * _3579)) * (1.0 - (_3578 * _3578))));
                                float _3587 = _3586 * _3586;
                                float _3588 = _3587 * _3587;
                                float _3589 = _3535 - _3007;
                                float _3590 = _3536 - _3008;
                                float _3591 = _3537 - _3009;
                                float _3595 = inversesqrt(dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591)));
                                float _3599 = dot(vec3(_924, _927, _930), vec3((-0.0) - _3007, (-0.0) - _3008, (-0.0) - _3009));
                                float _4727 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3602 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3603 = dot(vec3(_924, _927, _930), vec3(_3595 * _3589, _3595 * _3590, _3595 * _3591));
                                float _4738 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3606 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3610 = ((_3606 * _3606) * (_3588 + (-1.0))) + 1.0;
                                float _3611 = _3548 * _3587;
                                float _3612 = _3611 * _3611;
                                float _3618 = ((1.0 - _3612) * dot(vec3(_924, _927, _930), vec3(_3535, _3536, _3537))) + _3612;
                                float _4749 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3620 = 1.0 - _3587;
                                float _3630 = (0.5 / (((_3619 * ((_3602 * _3620) + _3587)) + 9.9999999392252902907785028219223e-09) + (((_3619 * _3620) + _3587) * _3602))) * _3619;
                                float _4760 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3640 = (_3565 * _3542) * (((_3588 * 3.1415927410125732421875) * (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) / ((_3610 * _3610) * ((_3555 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3566 * _3411.y;
                                frontier_phi_83_pred_1 = _3566 * _3411.x;
                                frontier_phi_83_pred_2 = _3640 * _3423.z;
                                frontier_phi_83_pred_3 = _3640 * _3423.y;
                                frontier_phi_83_pred_4 = _3640 * _3423.x;
                                frontier_phi_83_pred_5 = _3566 * _3411.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3648 = frontier_phi_83_pred;
                            _3647 = frontier_phi_83_pred_1;
                            _3646 = frontier_phi_83_pred_2;
                            _3645 = frontier_phi_83_pred_3;
                            _3644 = frontier_phi_83_pred_4;
                            _3649 = frontier_phi_83_pred_5;
                            _3353 = _3647 + _3366;
                            _3354 = _3648 + _3367;
                            _3355 = _3649 + _3368;
                            _3350 = _3644 + _3363;
                            _3351 = _3645 + _3364;
                            _3352 = _3646 + _3365;
                            if (_3370 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3370;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3355;
                        frontier_phi_77_pred_1 = _3354;
                        frontier_phi_77_pred_2 = _3353;
                        frontier_phi_77_pred_3 = _3352;
                        frontier_phi_77_pred_4 = _3351;
                        frontier_phi_77_pred_5 = _3350;
                    }
                    _2992 = frontier_phi_77_pred;
                    _2990 = frontier_phi_77_pred_1;
                    _2988 = frontier_phi_77_pred_2;
                    _2986 = frontier_phi_77_pred_3;
                    _2984 = frontier_phi_77_pred_4;
                    _2982 = frontier_phi_77_pred_5;
                    uint _3148 = _3147 + 1u;
                    if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3141 = _2982;
                        _3142 = _2984;
                        _3143 = _2986;
                        _3144 = _2988;
                        _3145 = _2990;
                        _3146 = _2992;
                        _3147 = _3148;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2986;
                frontier_phi_58_59_ladder_1 = _2992;
                frontier_phi_58_59_ladder_2 = _2990;
                frontier_phi_58_59_ladder_3 = _2988;
                frontier_phi_58_59_ladder_4 = _2984;
                frontier_phi_58_59_ladder_5 = _2982;
            }
            else
            {
                frontier_phi_58_59_ladder = _2864;
                frontier_phi_58_59_ladder_1 = _2870;
                frontier_phi_58_59_ladder_2 = _2868;
                frontier_phi_58_59_ladder_3 = _2866;
                frontier_phi_58_59_ladder_4 = _2862;
                frontier_phi_58_59_ladder_5 = _2860;
            }
            _2981 = frontier_phi_58_59_ladder_5;
            _2983 = frontier_phi_58_59_ladder_4;
            _2985 = frontier_phi_58_59_ladder;
            _2987 = frontier_phi_58_59_ladder_3;
            _2989 = frontier_phi_58_59_ladder_2;
            _2991 = frontier_phi_58_59_ladder_1;
        }
        float _2996 = isnan(1.0) ? _983 : (isnan(_983) ? 1.0 : min(_983, 1.0));
        _2772 = (_2996 * _2987) + _2205;
        _2774 = (_2996 * _2989) + _2207;
        _2776 = (_2996 * _2991) + _2209;
        _2778 = ((_2981 * _967) * _2996) + _2553;
        _2780 = ((_2983 * _969) * _2996) + _2555;
        _2782 = ((_2985 * _970) * _2996) + _2557;
    }
    else
    {
        _2772 = _2205;
        _2774 = _2207;
        _2776 = _2209;
        _2778 = _2553;
        _2780 = _2555;
        _2782 = _2557;
    }
    float _4776 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4787 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4798 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _2799 = ((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2772 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _983))) + ((_2778 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1822)) * cbPerFrame._m0[3u].x);
    float _2800 = ((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2774 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _983))) + ((_2780 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1822)) * cbPerFrame._m0[3u].x);
    float _2801 = ((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2776 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _983))) + ((_2782 + ((isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))) * _1822)) * cbPerFrame._m0[3u].x);
    uint _2802 = _259 + 6u;
    float _2810 = _905 / cbSceneParam._m0[86u].x;
    float _2811 = _906 / cbSceneParam._m0[86u].y;
    vec4 _2825 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, (log2((isnan(cbSceneParam._m0[77u].w) ? _828 : (isnan(_828) ? cbSceneParam._m0[77u].w : min(_828, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2827 = _2825.x;
    float _2828 = _2825.y;
    float _2829 = _2825.z;
    float _2830 = _2825.w;
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    if (_828 > cbSceneParam._m0[78u].w)
    {
        float _2885 = isnan(_828) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _828 : min(cbSceneParam._m0[80u].w, _828));
        float _2886 = _2885 / _828;
        float _2897 = _2886 * _878;
        float _2898 = _879 * _2886;
        float _2899 = (-0.0) - _2898;
        float _2901 = _2886 * _880;
        float _2903 = (cbSceneParam._m0[77u].w * _2899) / _2885;
        float _2904 = _2903 + cbSceneParam._m0[79u].w;
        float _2905 = cbSceneParam._m0[79u].w - _2898;
        float _2911 = sqrt(((_2897 * _2897) + (_2898 * _2898)) + (_2901 * _2901));
        float _2914 = (1.0 - (cbSceneParam._m0[77u].w / _2885)) * _2911;
        float _2919 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2921 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3098;
        if (abs((_2899 - _2903) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3098 = ((((_2904 > 0.0) ? exp2(_2919 * _2904) : (2.0 - exp2(_2921 * _2904))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2914;
        }
        else
        {
            float _3042 = 1.0 / cbSceneParam._m0[80u].x;
            float _3043 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : max(_2904, _2905));
            float _3044 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : min(_2904, _2905));
            float _3053 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : min(_3043, 0.0));
            float _3054 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : min(_3044, 0.0));
            _3098 = ((abs(_2911 / _2899) * cbSceneParam._m0[80u].y) * ((((_3053 - _3054) * 2.0) - ((exp2(_2919 * (isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0)))) - exp2(_2919 * (isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))))) * _3042)) - ((exp2(_2921 * _3053) - exp2(_2921 * _3054)) * _3042))) + (_2914 * cbSceneParam._m0[80u].z);
        }
        vec4 _3100 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, 1.0), 0.0);
        float _3109 = exp2((_3098 * (-1.44269502162933349609375)) * (1.0 - _3100.w));
        float _3110 = log2(_3109);
        float _3126 = log2(_2830);
        _2923 = (exp2(_3126 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].x)) * _3100.x) / cbSceneParam._m0[78u].x)) + _2827;
        _2925 = (exp2(_3126 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].y)) * _3100.y) / cbSceneParam._m0[78u].y)) + _2828;
        _2927 = (exp2(_3126 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].z)) * _3100.z) / cbSceneParam._m0[78u].z)) + _2829;
        _2929 = _3109 * _2830;
    }
    else
    {
        _2923 = _2827;
        _2925 = _2828;
        _2927 = _2829;
        _2929 = _2830;
    }
    bool _3136;
    vec4 _2939;
    vec4 _2961;
    float _2963;
    float _2967;
    float _2968;
    float _2969;
    float _2970;
    bool _2980;
    for (;;)
    {
        _2939 = cbMatDynParam._m0[0u];
        float _2941 = roundEven(_2939.y);
        bool _2942 = _2941 == 3.0;
        float _2943 = log2(_2929);
        float _2950 = exp2(_2943 * cbSceneParam._m0[78u].x) * _2799;
        float _2951 = exp2(_2943 * cbSceneParam._m0[78u].y) * _2800;
        float _2952 = exp2(_2943 * cbSceneParam._m0[78u].z) * _2801;
        float _2959 = _894 + (-0.5);
        _2961 = cbMtdParam._m0[1u];
        _2963 = _2961.y * _2959;
        float _2966 = (_2941 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2967 = _2966 * (_2942 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2923)));
        _2968 = _2966 * (_2942 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2925)));
        _2969 = _2966 * (_2942 ? _2952 : (_2952 + (cbSceneParam._m0[72u].w * _2927)));
        _2970 = _2959 * 0.999000012874603271484375;
        _2980 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2980)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _2970) < 0.5)
            {
                _3136 = true;
                break;
            }
        }
        uint _3077 = _943 + uint(_2939.w);
        if ((cbInstanceData._m0[_3077].w < 1.0) && ((cbInstanceData._m0[_3077].w + _2970) < 0.5))
        {
            _3136 = true;
            break;
        }
        if ((_2963 + 1.0) < _2961.x)
        {
            _3136 = true;
            break;
        }
        _3136 = false;
        break;
    }
    float _3341;
    if (_3136)
    {
        discard_state = true;
        _3341 = 0.0;
    }
    else
    {
        _3341 = cbInstanceData._m0[_2802].w;
    }
    SV_Target.x = _2967;
    SV_Target.y = _2968;
    SV_Target.z = _2969;
    SV_Target.w = _3341;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2802].w;
    discard_exit();
}


