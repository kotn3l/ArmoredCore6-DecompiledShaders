#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1260;
float _3668;
float _3669;
float _3670;
float _3671;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3680 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3691 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3702 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _428 = _426.x;
    float _440 = dot(vec4(_428, _426.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _457 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_428 - _440) * cbMtdParam._m0[23u].w) + _440) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3713 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _468 = (_326.x * cbMtdParam._m0[9u].x) * ((_458 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357);
    float _469 = (_326.y * cbMtdParam._m0[9u].y) * ((_458 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358);
    float _470 = (_326.z * cbMtdParam._m0[9u].z) * ((_458 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359);
    float _474 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _468;
    float _477 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _469;
    float _480 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _470;
    float _488 = (((_468 - _474) * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) + _474) * 4.55000019073486328125;
    float _490 = (((_469 - _477) * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) + _477) * 4.55000019073486328125;
    float _492 = (((_470 - _480) * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) + _480) * 4.55000019073486328125;
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _549 = _547.x;
    float _550 = _547.y;
    float _551 = _547.z;
    float _560 = ((_530.z - _551) * _458) + _551;
    float _563 = ((((_530.x - _549) * _458) + _549) * 2.0) + (-1.0);
    float _564 = ((((_530.y - _550) * _458) + _550) * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _3724 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _604 = (_563 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_505.x * 2.0) + (-1.0)))) + (((_592.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _605 = (_564 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_505.y * 2.0) + (-1.0)))) + (((_592.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _633 = _631.x;
    float _650 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _289) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _290) + cbTextureTilingScale._m0[9u].w)).x - _633) * _458) + _633;
    float _654 = ((_617.x - _650) * cbMtdParam._m0[19u].z) + _650;
    float _659 = (((_505.z - _560) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _560;
    float _663 = ((_592.z - _659) * cbMtdParam._m0[19u].w) + _659;
    float _665 = cbMtdParam._m0[22u].x + _592.w;
    float _668 = fma(_570, _236 * NORMAL.x, fma(_605, _243 * TANGENT.x, (_229 * _221) * _604));
    float _671 = fma(_570, _236 * NORMAL.y, fma(_605, _243 * TANGENT.y, (_229 * _222) * _604));
    float _674 = fma(_570, _236 * NORMAL.z, fma(_605, _243 * TANGENT.z, (_229 * _223) * _604));
    float _678 = inversesqrt(dot(vec3(_668, _671, _674), vec3(_668, _671, _674)));
    float _679 = _678 * _668;
    float _680 = _678 * _671;
    float _681 = _678 * _674;
    float _3735 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _682 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _3757 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3768 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3779 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3790 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _687 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _701 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _752 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _742);
    float _753 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _742);
    float _754 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _742);
    float _758 = inversesqrt(dot(vec3(_752, _753, _754), vec3(_752, _753, _754)));
    float _759 = _752 * _758;
    float _760 = _753 * _758;
    float _761 = _754 * _758;
    vec4 _766 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _768 = _766.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _940 = sqrt(((_752 * _752) + (_753 * _753)) + (_754 * _754));
        float _946 = (cbMatDynParam._m0[5u].x * _940) + cbMatDynParam._m0[5u].y;
        float _3801 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _951 = (cbMatDynParam._m0[5u].z * _940) + cbMatDynParam._m0[5u].w;
        float _3812 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) - _947)) + _947) < ((_768 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _779 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _780 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _798 = fma(_681, cbSceneParam._m0[5u].z, fma(_680, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _679));
    float _801 = fma(_681, cbSceneParam._m0[6u].z, fma(_680, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _679));
    float _804 = fma(_681, cbSceneParam._m0[7u].z, fma(_680, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _679));
    uint _817 = _270 + 9u;
    uint _818 = _817 + uint(cbMatDynParam._m0[0u].w);
    float _824 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * cbInstanceData._m0[_818].x;
    float _825 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_818].y;
    float _826 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_818].z;
    float _3823 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _830 = 1.0 - _687;
    float _831 = _827 * _830;
    float _832 = _828 * _830;
    float _833 = _829 * _830;
    float _838 = (_827 + (-0.039999999105930328369140625)) * _687;
    float _839 = (_828 + (-0.039999999105930328369140625)) * _687;
    float _840 = (_829 + (-0.039999999105930328369140625)) * _687;
    float _841 = _838 + 0.039999999105930328369140625;
    float _843 = _839 + 0.039999999105930328369140625;
    float _844 = _840 + 0.039999999105930328369140625;
    vec4 _853 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _779, cbSceneParam._m0[86u].y * _780));
    float _857 = ((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * TEXCOORD_5.w) * _853.x;
    float _858 = dot(vec3(_679, _680, _681), vec3(_759, _760, _761));
    float _861 = _858 * 2.0;
    float _865 = (_861 * _679) - _759;
    float _866 = (_861 * _680) - _760;
    float _867 = (_861 * _681) - _761;
    float _871 = abs(dot(vec3(_759, _760, _761), vec3(_679, _680, _681)));
    float _3856 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _873 = sqrt(_682);
    float _886 = exp2((_873 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_873 * 3.0));
    float _892 = (1.0 - _886) * ((_873 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _893 = _886 * _873;
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1259;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _984 = fma(_929, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _921));
        float _988 = fma(_929, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _921));
        float _992 = fma(_929, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _921));
        float _1017 = _921 + _679;
        float _1018 = _925 + _680;
        float _1019 = _929 + _681;
        float _1029 = fma(_1019, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017)) - _984;
        float _1030 = fma(_1019, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017)) - _988;
        float _1031 = fma(_1019, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017)) - _992;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_984 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_988 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[34u].z) + ((((((_992 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1087 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1053.x + (-0.5));
        float _1089 = _1087 * (_1053.y + (-0.5));
        float _1090 = _1087 * (_1053.z + (-0.5));
        float _1097 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1060.x + (-0.5));
        float _1099 = _1097 * (_1060.y + (-0.5));
        float _1100 = _1097 * (_1060.z + (-0.5));
        float _1107 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1067.x + (-0.5));
        float _1109 = _1107 * (_1067.y + (-0.5));
        float _1110 = _1107 * (_1067.z + (-0.5));
        float _1117 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1074.x + (-0.5));
        float _1119 = _1117 * (_1074.y + (-0.5));
        float _1120 = _1117 * (_1074.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1141 = (dot(vec3(_679, _680, _681), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1151 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3904 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1153 + 1.0))) + _1158) * _1121;
        float _1168 = _1089 * 0.5;
        float _1169 = _1099 * 0.5;
        float _1170 = _1109 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_679, _680, _681), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3937 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1195 + 1.0))) + _1200) * _1122;
        float _1210 = _1090 * 0.5;
        float _1211 = _1100 * 0.5;
        float _1212 = _1110 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_679, _680, _681), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3970 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1237 + 1.0))) + _1242) * _1123;
        _1259 = _1090;
        _1261 = _1089;
        _1262 = _1088;
        _1263 = _1100;
        _1264 = _1099;
        _1265 = _1098;
        _1266 = _1110;
        _1267 = _1109;
        _1268 = _1108;
        _1269 = _1123;
        _1270 = _1122;
        _1271 = _1121;
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _1260;
        _1261 = _1260;
        _1262 = _1260;
        _1263 = _1260;
        _1264 = _1260;
        _1265 = _1260;
        _1266 = _1260;
        _1267 = _1260;
        _1268 = _1260;
        _1269 = _1260;
        _1270 = _1260;
        _1271 = _1260;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1302 = fma(_929, cbModelParam._m0[30u].z, fma(_925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _921));
        float _1306 = fma(_929, cbModelParam._m0[31u].z, fma(_925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _921));
        float _1310 = fma(_929, cbModelParam._m0[32u].z, fma(_925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _921));
        float _1333 = _921 + _679;
        float _1334 = _925 + _680;
        float _1335 = _929 + _681;
        float _1345 = fma(_1335, cbModelParam._m0[30u].z, fma(_1334, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1333)) - _1302;
        float _1346 = fma(_1335, cbModelParam._m0[31u].z, fma(_1334, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1333)) - _1306;
        float _1347 = fma(_1335, cbModelParam._m0[32u].z, fma(_1334, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1333)) - _1310;
        float _1351 = inversesqrt(dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347)));
        float _1364 = ((_1351 * _1345) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1302 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1351 * _1346) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1306 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1351 * _1347) / cbModelParam._m0[35u].z) + ((((((_1310 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        float _1401 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1368.x + (-0.5));
        float _1403 = _1401 * (_1368.y + (-0.5));
        float _1404 = _1401 * (_1368.z + (-0.5));
        float _1411 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1375.x + (-0.5));
        float _1413 = _1411 * (_1375.y + (-0.5));
        float _1414 = _1411 * (_1375.z + (-0.5));
        float _1421 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1382.x + (-0.5));
        float _1423 = _1421 * (_1382.y + (-0.5));
        float _1424 = _1421 * (_1382.z + (-0.5));
        float _1431 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1389.x + (-0.5));
        float _1433 = _1431 * (_1389.y + (-0.5));
        float _1434 = _1431 * (_1389.z + (-0.5));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = _1402 * 0.5;
        float _1439 = _1412 * 0.5;
        float _1440 = _1422 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_679, _680, _681), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4033 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1465 + 1.0))) + _1470) * _1435;
        float _1480 = _1403 * 0.5;
        float _1481 = _1413 * 0.5;
        float _1482 = _1423 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_679, _680, _681), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4066 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1507 + 1.0))) + _1512) * _1436;
        float _1522 = _1404 * 0.5;
        float _1523 = _1414 * 0.5;
        float _1524 = _1424 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_679, _680, _681), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4099 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1549 + 1.0))) + _1554) * _1437;
        _1571 = _1404;
        _1572 = _1403;
        _1573 = _1402;
        _1574 = _1414;
        _1575 = _1413;
        _1576 = _1412;
        _1577 = _1424;
        _1578 = _1423;
        _1579 = _1422;
        _1580 = _1437;
        _1581 = _1436;
        _1582 = _1435;
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
    }
    else
    {
        _1571 = _1260;
        _1572 = _1260;
        _1573 = _1260;
        _1574 = _1260;
        _1575 = _1260;
        _1576 = _1260;
        _1577 = _1260;
        _1578 = _1260;
        _1579 = _1260;
        _1580 = _1260;
        _1581 = _1260;
        _1582 = _1260;
        _1583 = 0.0;
        _1584 = 0.0;
        _1585 = 0.0;
    }
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1272)) + _1272;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1273)) + _1273;
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1274)) + _1274;
    float _1618 = fma(_1597, cbSceneParam._m0[89u].z, fma(_1596, cbSceneParam._m0[89u].y, _1595 * cbSceneParam._m0[89u].x));
    float _1621 = fma(_1597, cbSceneParam._m0[90u].z, fma(_1596, cbSceneParam._m0[90u].y, _1595 * cbSceneParam._m0[90u].x));
    float _1624 = fma(_1597, cbSceneParam._m0[91u].z, fma(_1596, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1595));
    float _1639 = _865 * 0.5;
    float _1640 = _866 * 0.5;
    float _1641 = _867 * 0.5;
    float _1642 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1645 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1648 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1682;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1655 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1259, _1263, _1266, _1269));
        float _1659 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1663 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1670 = dot(vec4(cbModelParam._m0[39u]), vec4(_1639, _1640, _1641, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1693;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1684 = dot(vec4(cbModelParam._m0[40u]), vec4(_1639, _1640, _1641, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1697 = (_1693 * cbModelParam._m0[1u].x) + (_1682 * (1.0 - cbModelParam._m0[1u].x));
    float _1707 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _682);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1707 : min(cbModelParam._m0[25u].z, _1707));
    float _1790;
    float _1792;
    float _1794;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1757 = fma(_929, cbModelParam._m0[13u].z, fma(_925, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _921)) + cbModelParam._m0[13u].w;
        float _1761 = fma(_929, cbModelParam._m0[14u].z, fma(_925, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _921)) + cbModelParam._m0[14u].w;
        float _1765 = fma(_929, cbModelParam._m0[15u].z, fma(_925, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _921)) + cbModelParam._m0[15u].w;
        float _1768 = fma(_867, cbModelParam._m0[13u].z, fma(_866, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865));
        float _1771 = fma(_867, cbModelParam._m0[14u].z, fma(_866, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865));
        float _1774 = fma(_867, cbModelParam._m0[15u].z, fma(_866, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865));
        float _1802;
        if (_1768 > 0.0)
        {
            _1802 = abs((1.0 - _1757) / _1768);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1757 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1802 = frontier_phi_17_15_ladder;
        }
        float _2027;
        if (_1771 > 0.0)
        {
            _2027 = abs((1.0 - _1761) / _1771);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1761 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2027 = frontier_phi_26_22_ladder;
        }
        float _2284;
        if (_1774 > 0.0)
        {
            _2284 = abs((1.0 - _1765) / _1774);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1765 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2284 = frontier_phi_38_33_ladder;
        }
        float _2286 = isnan(_2027) ? _1802 : (isnan(_1802) ? _2027 : min(_1802, _2027));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1768) + _1757;
        float _2292 = (_2287 * _1771) + _1761;
        float _2293 = (_2287 * _1774) + _1765;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2294;
        float _2298 = _2294 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 > _2298) || ((_2292 < _2296) || ((_2291 < _2296) || (_2291 > _2298))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2421 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2293, cbModelParam._m0[9u].z, fma(_2292, cbModelParam._m0[9u].y, _2291 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2293, cbModelParam._m0[10u].z, fma(_2292, cbModelParam._m0[10u].y, _2291 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2293, cbModelParam._m0[11u].z, fma(_2292, cbModelParam._m0[11u].y, _2291 * cbModelParam._m0[11u].x))), _1708);
            frontier_phi_16_38_ladder = _2421.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2421.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2421.x * cbModelParam._m0[1u].y;
        }
        _1790 = frontier_phi_16_38_ladder_2;
        _1792 = frontier_phi_16_38_ladder_1;
        _1794 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_865, _866, _867), _1708);
        _1790 = _1778.x * cbModelParam._m0[1u].y;
        _1792 = _1778.y * cbModelParam._m0[1u].y;
        _1794 = _1778.z * cbModelParam._m0[1u].y;
    }
    float _1798 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _682);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1798 : min(cbModelParam._m0[25u].w, _1798));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1854 = fma(_929, cbModelParam._m0[21u].z, fma(_925, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _921)) + cbModelParam._m0[21u].w;
        float _1858 = fma(_929, cbModelParam._m0[22u].z, fma(_925, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _921)) + cbModelParam._m0[22u].w;
        float _1862 = fma(_929, cbModelParam._m0[23u].z, fma(_925, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _921)) + cbModelParam._m0[23u].w;
        float _1865 = fma(_867, cbModelParam._m0[21u].z, fma(_866, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865));
        float _1868 = fma(_867, cbModelParam._m0[22u].z, fma(_866, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865));
        float _1871 = fma(_867, cbModelParam._m0[23u].z, fma(_866, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865));
        float _2032;
        if (_1865 > 0.0)
        {
            _2032 = abs((1.0 - _1854) / _1865);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1854 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2032 = frontier_phi_28_24_ladder;
        }
        float _2311;
        if (_1868 > 0.0)
        {
            _2311 = abs((1.0 - _1858) / _1868);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1858 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2311 = frontier_phi_40_35_ladder;
        }
        float _2524;
        if (_1871 > 0.0)
        {
            _2524 = abs((1.0 - _1862) / _1871);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1862 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2524 = frontier_phi_49_46_ladder;
        }
        float _2526 = isnan(_2311) ? _2032 : (isnan(_2032) ? _2311 : min(_2032, _2311));
        float _2527 = isnan(_2524) ? _2526 : (isnan(_2526) ? _2524 : min(_2526, _2524));
        float _2531 = (_2527 * _1865) + _1854;
        float _2532 = (_2527 * _1868) + _1858;
        float _2533 = (_2527 * _1871) + _1862;
        float _2534 = _2527 * 9.9999997473787516355514526367188e-05;
        float _2535 = (-1.0) - _2534;
        float _2537 = _2534 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2533 > _2537) || ((_2533 < _2535) || ((_2532 > _2537) || ((_2532 < _2535) || ((_2531 < _2535) || (_2531 > _2537))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2732 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2533, cbModelParam._m0[17u].z, fma(_2532, cbModelParam._m0[17u].y, _2531 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2533, cbModelParam._m0[18u].z, fma(_2532, cbModelParam._m0[18u].y, _2531 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2533, cbModelParam._m0[19u].z, fma(_2532, cbModelParam._m0[19u].y, _2531 * cbModelParam._m0[19u].x))), _1799);
            frontier_phi_25_49_ladder = _2732.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2732.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2732.x * cbModelParam._m0[1u].z;
        }
        _1890 = frontier_phi_25_49_ladder_2;
        _1892 = frontier_phi_25_49_ladder_1;
        _1894 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_865, _866, _867), _1799);
        _1890 = _1874.x * cbModelParam._m0[1u].z;
        _1892 = _1874.y * cbModelParam._m0[1u].z;
        _1894 = _1874.z * cbModelParam._m0[1u].z;
    }
    float _1907 = (((_892 * _841) + _893) * _857) * ((cbModelParam._m0[1u].w * (_1890 - _1790)) + _1790);
    float _1909 = (((_892 * _843) + _893) * _857) * ((cbModelParam._m0[1u].w * (_1892 - _1792)) + _1792);
    float _1911 = (((_892 * _844) + _893) * _857) * ((cbModelParam._m0[1u].w * (_1894 - _1794)) + _1794);
    float _1914 = fma(_1911, cbSceneParam._m0[89u].z, fma(_1909, cbSceneParam._m0[89u].y, _1907 * cbSceneParam._m0[89u].x));
    float _1917 = fma(_1911, cbSceneParam._m0[90u].z, fma(_1909, cbSceneParam._m0[90u].y, _1907 * cbSceneParam._m0[90u].x));
    float _1920 = fma(_1911, cbSceneParam._m0[91u].z, fma(_1909, cbSceneParam._m0[91u].y, _1907 * cbSceneParam._m0[91u].x));
    vec4 _1928 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_779, _780));
    float _1930 = _1928.w;
    float _1942 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1930);
    float _1943 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1930);
    float _1944 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1930);
    uvec4 _1948 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1950 = _1948.x * 14u;
    uint _1951 = _1950 + 13u;
    float _1958 = _857 + (-1.0);
    float _1963 = (cbLight._m0[_1951].x * _1958) + 1.0;
    float _1964 = (cbLight._m0[_1951].y * _1958) + 1.0;
    float _1965 = (cbLight._m0[_1951].z * _1958) + 1.0;
    float _1966 = (cbLight._m0[_1951].w * _1958) + 1.0;
    uint _1967 = _1950 + 5u;
    float _1973 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
    uint _1977 = _1950 + 4u;
    float _1986 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
    uint _1990 = _1950 | 1u;
    float _2001 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_679, _680, _681));
    float _2004 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_679, _680, _681));
    float _4235 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _4246 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2009 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _2011 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.3183098733425140380859375;
    float _2018 = ((cbLight._m0[_1967].x * _1973) * _2011) + (((cbLight._m0[_1977].x * _1942) * _1986) * _2009);
    float _2019 = ((_1973 * cbLight._m0[_1967].y) * _2011) + (((cbLight._m0[_1977].y * _1943) * _1986) * _2009);
    float _2020 = ((_1973 * cbLight._m0[_1967].z) * _2011) + (((cbLight._m0[_1977].z * _1944) * _1986) * _2009);
    uvec4 _2024 = floatBitsToUint(cbLight._m0[_1950 + 12u]);
    bool _2026 = _2024.x == 0u;
    float _2037;
    float _2039;
    float _2041;
    if (_2026)
    {
        _2037 = _2018;
        _2039 = _2019;
        _2041 = _2020;
    }
    else
    {
        uint _2045 = _1950 + 6u;
        float _2061 = (dot(vec3(cbLight._m0[_1950 + 2u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _2062 = _2061 * _2061;
        float _4257 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2063 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2064 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2037 = (((cbLight._m0[_2045].x * 0.3183098733425140380859375) * _2063) * _2064) + _2018;
        _2039 = (((cbLight._m0[_2045].y * 0.3183098733425140380859375) * _2063) * _2064) + _2019;
        _2041 = (((cbLight._m0[_2045].z * 0.3183098733425140380859375) * _2063) * _2064) + _2020;
    }
    bool _2044 = _2024.y == 0u;
    float _2082;
    float _2084;
    float _2086;
    if (_2044)
    {
        _2082 = _2037;
        _2084 = _2039;
        _2086 = _2041;
    }
    else
    {
        uint _2255 = _1950 + 7u;
        float _2271 = (dot(vec3(cbLight._m0[_1950 + 3u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _2272 = _2271 * _2271;
        float _4273 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2273 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2274 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2082 = (((cbLight._m0[_2255].x * 0.3183098733425140380859375) * _2273) * _2274) + _2037;
        _2084 = (((cbLight._m0[_2255].y * 0.3183098733425140380859375) * _2273) * _2274) + _2039;
        _2086 = (((cbLight._m0[_2255].z * 0.3183098733425140380859375) * _2273) * _2274) + _2041;
    }
    uint _2089 = _1950 + 8u;
    float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _682) * 0.949999988079071044921875);
    float _2103 = _2102 * _2102;
    float _2104 = cbLight._m0[_1950].x + _759;
    float _2105 = cbLight._m0[_1950].y + _760;
    float _2106 = cbLight._m0[_1950].z + _761;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2111 = _2110 * _2104;
    float _2112 = _2110 * _2105;
    float _2113 = _2110 * _2106;
    float _2114 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_1950].xyz));
    float _4289 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _4300 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _2118 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2119 = dot(vec3(_679, _680, _681), vec3(_2111, _2112, _2113));
    float _4311 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2123 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_2111, _2112, _2113));
    float _4322 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2127 = _2103 * _2103;
    float _2131 = ((_2122 * _2122) * (_2127 + (-1.0))) + 1.0;
    float _2139 = exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0);
    float _2140 = 0.959999978542327880859375 - _838;
    float _2142 = 0.959999978542327880859375 - _839;
    float _2143 = 0.959999978542327880859375 - _840;
    float _2150 = 1.0 - _2103;
    float _2161 = (0.5 / (((_2118 * ((_2117 * _2150) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2150) + _2103) * _2117))) * _2117;
    float _4333 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2163 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2127 / ((_2131 * _2131) * 3.141590118408203125));
    uint _2177 = _1950 + 9u;
    float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1990].w)) * _682) * 0.949999988079071044921875);
    float _2189 = _2188 * _2188;
    float _2190 = cbLight._m0[_1990].x + _759;
    float _2191 = cbLight._m0[_1990].y + _760;
    float _2192 = cbLight._m0[_1990].z + _761;
    float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
    float _2197 = _2196 * _2190;
    float _2198 = _2196 * _2191;
    float _2199 = _2196 * _2192;
    float _2200 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_1990].xyz));
    float _4344 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2204 = dot(vec3(_679, _680, _681), vec3(_2197, _2198, _2199));
    float _4355 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2208 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2197, _2198, _2199));
    float _4366 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = _2189 * _2189;
    float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
    float _2223 = exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0);
    float _2230 = 1.0 - _2189;
    float _2240 = (0.5 / (((_2118 * ((_2203 * _2230) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2230) + _2189) * _2203))) * _2203;
    float _4377 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2242 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
    float _2252 = (((((_2223 * _2140) + _841) * cbLight._m0[_2177].x) * _2242) * _1973) + ((((cbLight._m0[_2089].x * _1942) * ((_2139 * _2140) + _841)) * _2163) * _1986);
    float _2253 = (((((_2223 * _2142) + _843) * cbLight._m0[_2177].y) * _2242) * _1973) + ((((cbLight._m0[_2089].y * _1943) * ((_2139 * _2142) + _843)) * _2163) * _1986);
    float _2254 = (((((_2223 * _2143) + _844) * cbLight._m0[_2177].z) * _2242) * _1973) + ((((cbLight._m0[_2089].z * _1944) * ((_2139 * _2143) + _844)) * _2163) * _1986);
    float _2316;
    float _2318;
    float _2320;
    if (_2026)
    {
        _2316 = _2252;
        _2318 = _2253;
        _2320 = _2254;
    }
    else
    {
        uint _2322 = _1950 + 2u;
        uint _2326 = _1950 + 10u;
        float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _682) * 0.949999988079071044921875);
        float _2341 = _2340 * _2340;
        float _2342 = cbLight._m0[_2322].x + _759;
        float _2343 = cbLight._m0[_2322].y + _760;
        float _2344 = cbLight._m0[_2322].z + _761;
        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
        float _2349 = _2348 * _2342;
        float _2350 = _2348 * _2343;
        float _2351 = _2348 * _2344;
        float _2352 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2322].xyz));
        float _4388 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2356 = dot(vec3(_679, _680, _681), vec3(_2349, _2350, _2351));
        float _4399 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2360 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2349, _2350, _2351));
        float _4410 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2364 = _2341 * _2341;
        float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
        float _2375 = exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0);
        float _2382 = 1.0 - _2341;
        float _2392 = (0.5 / (((_2118 * ((_2355 * _2382) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2382) + _2341) * _2355))) * _2355;
        float _4421 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2394 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
        float _2395 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2316 = (((((_2375 * _2140) + _841) * cbLight._m0[_2326].x) * _2394) * _2395) + _2252;
        _2318 = (((((_2375 * _2142) + _843) * cbLight._m0[_2326].y) * _2394) * _2395) + _2253;
        _2320 = (((((_2375 * _2143) + _844) * cbLight._m0[_2326].z) * _2394) * _2395) + _2254;
    }
    float _2430;
    float _2432;
    float _2434;
    if (_2044)
    {
        _2430 = _2316;
        _2432 = _2318;
        _2434 = _2320;
    }
    else
    {
        uint _2441 = _1950 + 3u;
        uint _2445 = _1950 + 11u;
        float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2441].w)) * _682) * 0.949999988079071044921875);
        float _2460 = _2459 * _2459;
        float _2461 = cbLight._m0[_2441].x + _759;
        float _2462 = cbLight._m0[_2441].y + _760;
        float _2463 = cbLight._m0[_2441].z + _761;
        float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
        float _2468 = _2467 * _2461;
        float _2469 = _2467 * _2462;
        float _2470 = _2467 * _2463;
        float _2471 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2441].xyz));
        float _4437 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2475 = dot(vec3(_679, _680, _681), vec3(_2468, _2469, _2470));
        float _4448 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2479 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_2468, _2469, _2470));
        float _4459 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2483 = _2460 * _2460;
        float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
        float _2494 = exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0);
        float _2501 = 1.0 - _2460;
        float _2511 = (0.5 / (((_2118 * ((_2474 * _2501) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2501) + _2460) * _2474))) * _2474;
        float _4470 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2513 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
        float _2514 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2430 = (((((_2494 * _2140) + _841) * cbLight._m0[_2445].x) * _2513) * _2514) + _2316;
        _2432 = (((((_2494 * _2142) + _843) * cbLight._m0[_2445].y) * _2513) * _2514) + _2318;
        _2434 = (((((_2494 * _2143) + _844) * cbLight._m0[_2445].z) * _2513) * _2514) + _2320;
    }
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    if (_1948.y == 0u)
    {
        float _2589 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2590 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2589;
        float _2591 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2589;
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2589;
        uvec4 _2604 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2605 = _2604.x;
        uint _2616 = uint((float(_2604.y) * floor(float(uint(cbSceneParam._m0[85u].y * _780) / _2605))) + floor(float(uint(cbSceneParam._m0[85u].x * _779) / _2605)));
        float _2626 = (log2(_2592 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2627 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        uint _2630 = uint(isnan(14.0) ? _2627 : (isnan(_2627) ? 14.0 : min(_2627, 14.0)));
        uvec4 _2635 = texelFetch(g_lightClusterGridBuffer, int(((_2630 << 2u) + (_2616 << 6u)) >> 2u));
        uint _2636 = _2635.x;
        uint _2637 = _2604.z;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        if (((((1u << ((_2637 >> 4u) & 15u)) + 4294967295u) & _2636) == 0u) || ((_2637 & 240u) == 0u))
        {
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
        }
        else
        {
            float _2738;
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2748;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            uint _2896 = 0u;
            uint _2905;
            bool _2906;
            for (;;)
            {
                _2905 = texelFetch(g_lightClassification, int((((_2630 << 5u) + (_2616 << 9u)) + (_2896 << 2u)) >> 2u)).x;
                _2906 = _2905 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2906)
                {
                    frontier_phi_66_pred = _2890;
                    frontier_phi_66_pred_1 = _2895;
                    frontier_phi_66_pred_2 = _2894;
                    frontier_phi_66_pred_3 = _2893;
                    frontier_phi_66_pred_4 = _2892;
                    frontier_phi_66_pred_5 = _2891;
                }
                else
                {
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    uint _3041;
                    _3035 = _2890;
                    _3036 = _2891;
                    _3037 = _2892;
                    _3038 = _2893;
                    _3039 = _2894;
                    _3040 = _2895;
                    _3041 = _2905;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    for (;;)
                    {
                        uint _3045 = uint(findLSB(_3041)) + (_2896 << 5u);
                        uint _3042 = (_3041 + 4294967295u) & _3041;
                        uint _3047 = _3045 * 48u;
                        vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 3u)).x));
                        uint _3067 = (_3045 * 48u) + 4u;
                        vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 3u)).x));
                        uint _3086 = (_3045 * 48u) + 8u;
                        vec3 _3097 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x));
                        float _3101 = _3061.x - _2590;
                        float _3102 = _3061.y - _2591;
                        float _3103 = _3061.z - _2592;
                        float _3104 = dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103));
                        float _3107 = inversesqrt(_3104);
                        float _3108 = _3107 * _3101;
                        float _3109 = _3107 * _3102;
                        float _3110 = _3107 * _3103;
                        float _3111 = dot(vec3(_798, _801, _804), vec3(_3108, _3109, _3110));
                        float _3116 = 1.0 - (_3104 * _3061.w);
                        float _4496 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3117 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3118 = sqrt(_3104) * _3080.w;
                        float _3121 = 1.39999997615814208984375 / (_3118 + 1.39999997615814208984375);
                        float _3122 = _3121 * _3121;
                        float _3125 = ((1.0 - _3122) * _3111) + _3122;
                        float _3128 = _3118 * _3118;
                        float _3132 = ((isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))) * _3117) / ((_3128 * 0.699999988079071044921875) + 1.0);
                        float _3136 = (-0.0) - _2590;
                        float _3137 = (-0.0) - _2591;
                        float _3138 = (-0.0) - _2592;
                        float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                        float _3143 = _3142 * _3136;
                        float _3144 = _3142 * _3137;
                        float _3145 = _3142 * _3138;
                        float _3153 = exp2(log2(1.0 / ((_3128 * 3.5) + 5.0)) * 0.25);
                        float _3154 = 1.0 - _873;
                        float _3161 = sqrt(1.0 - ((1.0 - (_3154 * _3154)) * (1.0 - (_3153 * _3153))));
                        float _3162 = _3161 * _3161;
                        float _3163 = _3162 * _3162;
                        float _3164 = _3143 + _3108;
                        float _3165 = _3144 + _3109;
                        float _3166 = _3145 + _3110;
                        float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                        float _3174 = dot(vec3(_798, _801, _804), vec3(_3143, _3144, _3145));
                        float _4512 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3177 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3178 = dot(vec3(_798, _801, _804), vec3(_3170 * _3164, _3170 * _3165, _3170 * _3166));
                        float _4523 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3181 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3185 = ((_3181 * _3181) * (_3163 + (-1.0))) + 1.0;
                        float _3186 = _3121 * _3162;
                        float _3187 = _3186 * _3186;
                        float _3190 = ((1.0 - _3187) * _3111) + _3187;
                        float _4534 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3191 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3192 = 1.0 - _3162;
                        float _3202 = (0.5 / (((_3191 * ((_3177 * _3192) + _3162)) + 9.9999999392252902907785028219223e-09) + (((_3191 * _3192) + _3162) * _3177))) * _3191;
                        float _4545 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3213 = (((_3163 * 3.1415927410125732421875) * (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) / ((_3185 * _3185) * ((_3128 * 2.1991131305694580078125) + 3.141590118408203125))) * _3117;
                        _2965 = (_3132 * _3080.x) + _3038;
                        _2966 = (_3132 * _3080.y) + _3039;
                        _2967 = (_3132 * _3080.z) + _3040;
                        _2962 = (_3213 * _3097.x) + _3035;
                        _2963 = (_3213 * _3097.y) + _3036;
                        _2964 = (_3213 * _3097.z) + _3037;
                        if (_3042 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3035 = _2962;
                            _3036 = _2963;
                            _3037 = _2964;
                            _3038 = _2965;
                            _3039 = _2966;
                            _3040 = _2967;
                            _3041 = _3042;
                        }
                    }
                    frontier_phi_66_pred = _2962;
                    frontier_phi_66_pred_1 = _2967;
                    frontier_phi_66_pred_2 = _2966;
                    frontier_phi_66_pred_3 = _2965;
                    frontier_phi_66_pred_4 = _2964;
                    frontier_phi_66_pred_5 = _2963;
                }
                _2738 = frontier_phi_66_pred;
                _2748 = frontier_phi_66_pred_1;
                _2746 = frontier_phi_66_pred_2;
                _2744 = frontier_phi_66_pred_3;
                _2742 = frontier_phi_66_pred_4;
                _2740 = frontier_phi_66_pred_5;
                uint _2897 = _2896 + 1u;
                if (_2897 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2890 = _2738;
                    _2891 = _2740;
                    _2892 = _2742;
                    _2893 = _2744;
                    _2894 = _2746;
                    _2895 = _2748;
                    _2896 = _2897;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
        }
        uvec4 _2751 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2752 = _2751.z;
        uint _2754 = (_2752 >> 8u) & 15u;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        if (((4294967295u << _2754) & _2636) == 0u)
        {
            _2858 = _2737;
            _2860 = _2739;
            _2862 = _2741;
            _2864 = _2743;
            _2866 = _2745;
            _2868 = _2747;
        }
        else
        {
            float _2883 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
            float _2884 = _2883 * _2590;
            float _2885 = _2883 * _2591;
            float _2886 = _2883 * _2592;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2754 < ((_2752 >> 12u) & 15u))
            {
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _3018 = _2737;
                float _3019 = _2739;
                float _3020 = _2741;
                float _3021 = _2743;
                float _3022 = _2745;
                float _3023 = _2747;
                uint _3024 = _2754;
                uint _3033;
                bool _3034;
                for (;;)
                {
                    _3033 = texelFetch(g_lightClassification, int((((_2630 << 5u) + (_2616 << 9u)) + (_3024 << 2u)) >> 2u)).x;
                    _3034 = _3033 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3034)
                    {
                        frontier_phi_77_pred = _3023;
                        frontier_phi_77_pred_1 = _3022;
                        frontier_phi_77_pred_2 = _3021;
                        frontier_phi_77_pred_3 = _3020;
                        frontier_phi_77_pred_4 = _3019;
                        frontier_phi_77_pred_5 = _3018;
                    }
                    else
                    {
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3240 = _3018;
                        float _3241 = _3019;
                        float _3242 = _3020;
                        float _3243 = _3021;
                        float _3244 = _3022;
                        float _3245 = _3023;
                        uint _3246 = _3033;
                        uint _3247;
                        vec4 _3272;
                        float _3273;
                        vec4 _3288;
                        vec3 _3300;
                        vec4 _3315;
                        vec4 _3330;
                        float _3377;
                        bool _3378;
                        for (;;)
                        {
                            uint _3257 = ((_3024 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3246));
                            _3247 = (_3246 + 4294967295u) & _3246;
                            uint _3259 = _3257 * 40u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            _3273 = _3272.w;
                            uint _3275 = (_3257 * 40u) + 4u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            uint _3290 = (_3257 * 40u) + 8u;
                            _3300 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x));
                            uint _3302 = (_3257 * 40u) + 16u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3317 = (_3257 * 40u) + 20u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3333 = (_3257 * 40u) + 24u;
                            vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3352 = (_3257 * 40u) + 28u;
                            vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            _3377 = fma(_2592, _3365.z, fma(_2591, _3365.y, _3365.x * _2590)) + _3365.w;
                            _3378 = !((fma(_2592, _3346.z, fma(_2591, _3346.y, _3346.x * _2590)) + _3346.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3378)
                            {
                                float _3405 = _3272.x - _2590;
                                float _3406 = _3272.y - _2591;
                                float _3407 = _3272.z - _2592;
                                float _3408 = dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407));
                                float _3411 = inversesqrt(_3408);
                                float _3412 = _3411 * _3405;
                                float _3413 = _3411 * _3406;
                                float _3414 = _3411 * _3407;
                                float _3418 = 1.0 - (_3408 / (_3273 * _3273));
                                float _4556 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3419 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3423 = sqrt(_3408) * _3288.w;
                                float _3425 = 1.39999997615814208984375 / (_3423 + 1.39999997615814208984375);
                                float _3426 = _3425 * _3425;
                                float _3429 = ((1.0 - _3426) * dot(vec3(_3412, _3413, _3414), vec3(_798, _801, _804))) + _3426;
                                float _3432 = _3423 * _3423;
                                float _3436 = (fma(_2592, _3315.z, fma(_2591, _3315.y, _3315.x * _2590)) + _3315.w) / _3377;
                                float _3437 = (fma(_2592, _3330.z, fma(_2591, _3330.y, _3330.x * _2590)) + _3330.w) / _3377;
                                float _3441 = 1.0 - dot(vec2(_3436, _3437), vec2(_3436, _3437));
                                float _4572 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3443 = _3442 * (((isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0))) * _3419) / ((_3432 * 0.699999988079071044921875) + 1.0));
                                float _3455 = exp2(log2(1.0 / ((_3432 * 3.5) + 5.0)) * 0.25);
                                float _3456 = 1.0 - _873;
                                float _3463 = sqrt(1.0 - ((1.0 - (_3456 * _3456)) * (1.0 - (_3455 * _3455))));
                                float _3464 = _3463 * _3463;
                                float _3465 = _3464 * _3464;
                                float _3466 = _3412 - _2884;
                                float _3467 = _3413 - _2885;
                                float _3468 = _3414 - _2886;
                                float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                                float _3476 = dot(vec3(_798, _801, _804), vec3((-0.0) - _2884, (-0.0) - _2885, (-0.0) - _2886));
                                float _4583 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3479 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3480 = dot(vec3(_798, _801, _804), vec3(_3472 * _3466, _3472 * _3467, _3472 * _3468));
                                float _4594 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3487 = ((_3483 * _3483) * (_3465 + (-1.0))) + 1.0;
                                float _3488 = _3425 * _3464;
                                float _3489 = _3488 * _3488;
                                float _3495 = ((1.0 - _3489) * dot(vec3(_798, _801, _804), vec3(_3412, _3413, _3414))) + _3489;
                                float _4605 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3497 = 1.0 - _3464;
                                float _3507 = (0.5 / (((_3496 * ((_3479 * _3497) + _3464)) + 9.9999999392252902907785028219223e-09) + (((_3496 * _3497) + _3464) * _3479))) * _3496;
                                float _4616 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3517 = (_3442 * _3419) * (((_3465 * 3.1415927410125732421875) * (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) / ((_3487 * _3487) * ((_3432 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3443 * _3288.y;
                                frontier_phi_83_pred_1 = _3443 * _3288.x;
                                frontier_phi_83_pred_2 = _3517 * _3300.z;
                                frontier_phi_83_pred_3 = _3517 * _3300.y;
                                frontier_phi_83_pred_4 = _3517 * _3300.x;
                                frontier_phi_83_pred_5 = _3443 * _3288.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3525 = frontier_phi_83_pred;
                            _3524 = frontier_phi_83_pred_1;
                            _3523 = frontier_phi_83_pred_2;
                            _3522 = frontier_phi_83_pred_3;
                            _3521 = frontier_phi_83_pred_4;
                            _3526 = frontier_phi_83_pred_5;
                            _3230 = _3524 + _3243;
                            _3231 = _3525 + _3244;
                            _3232 = _3526 + _3245;
                            _3227 = _3521 + _3240;
                            _3228 = _3522 + _3241;
                            _3229 = _3523 + _3242;
                            if (_3247 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3247;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3232;
                        frontier_phi_77_pred_1 = _3231;
                        frontier_phi_77_pred_2 = _3230;
                        frontier_phi_77_pred_3 = _3229;
                        frontier_phi_77_pred_4 = _3228;
                        frontier_phi_77_pred_5 = _3227;
                    }
                    _2869 = frontier_phi_77_pred;
                    _2867 = frontier_phi_77_pred_1;
                    _2865 = frontier_phi_77_pred_2;
                    _2863 = frontier_phi_77_pred_3;
                    _2861 = frontier_phi_77_pred_4;
                    _2859 = frontier_phi_77_pred_5;
                    uint _3025 = _3024 + 1u;
                    if (_3025 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3018 = _2859;
                        _3019 = _2861;
                        _3020 = _2863;
                        _3021 = _2865;
                        _3022 = _2867;
                        _3023 = _2869;
                        _3024 = _3025;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2863;
                frontier_phi_58_59_ladder_1 = _2869;
                frontier_phi_58_59_ladder_2 = _2867;
                frontier_phi_58_59_ladder_3 = _2865;
                frontier_phi_58_59_ladder_4 = _2861;
                frontier_phi_58_59_ladder_5 = _2859;
            }
            else
            {
                frontier_phi_58_59_ladder = _2741;
                frontier_phi_58_59_ladder_1 = _2747;
                frontier_phi_58_59_ladder_2 = _2745;
                frontier_phi_58_59_ladder_3 = _2743;
                frontier_phi_58_59_ladder_4 = _2739;
                frontier_phi_58_59_ladder_5 = _2737;
            }
            _2858 = frontier_phi_58_59_ladder_5;
            _2860 = frontier_phi_58_59_ladder_4;
            _2862 = frontier_phi_58_59_ladder;
            _2864 = frontier_phi_58_59_ladder_3;
            _2866 = frontier_phi_58_59_ladder_2;
            _2868 = frontier_phi_58_59_ladder_1;
        }
        float _2873 = isnan(1.0) ? _857 : (isnan(_857) ? 1.0 : min(_857, 1.0));
        _2649 = (_2873 * _2864) + _2082;
        _2651 = (_2873 * _2866) + _2084;
        _2653 = (_2873 * _2868) + _2086;
        _2655 = ((_2858 * _841) * _2873) + _2430;
        _2657 = ((_2860 * _843) * _2873) + _2432;
        _2659 = ((_2862 * _844) * _2873) + _2434;
    }
    else
    {
        _2649 = _2082;
        _2651 = _2084;
        _2653 = _2086;
        _2655 = _2430;
        _2657 = _2432;
        _2659 = _2434;
    }
    float _4632 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4643 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4654 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _2676 = ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2649 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _857))) + ((_2655 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1697)) * cbPerFrame._m0[3u].x);
    float _2677 = ((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2651 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _857))) + ((_2657 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1697)) * cbPerFrame._m0[3u].x);
    float _2678 = ((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2653 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _857))) + ((_2659 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1697)) * cbPerFrame._m0[3u].x);
    uint _2679 = _270 + 6u;
    float _2687 = _779 / cbSceneParam._m0[86u].x;
    float _2688 = _780 / cbSceneParam._m0[86u].y;
    vec4 _2702 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2687, _2688, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2704 = _2702.x;
    float _2705 = _2702.y;
    float _2706 = _2702.z;
    float _2707 = _2702.w;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _2762 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _2763 = _2762 / _701;
        float _2774 = _2763 * _752;
        float _2775 = _753 * _2763;
        float _2776 = (-0.0) - _2775;
        float _2778 = _2763 * _754;
        float _2780 = (cbSceneParam._m0[77u].w * _2776) / _2762;
        float _2781 = _2780 + cbSceneParam._m0[79u].w;
        float _2782 = cbSceneParam._m0[79u].w - _2775;
        float _2788 = sqrt(((_2774 * _2774) + (_2775 * _2775)) + (_2778 * _2778));
        float _2791 = (1.0 - (cbSceneParam._m0[77u].w / _2762)) * _2788;
        float _2796 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2798 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2975;
        if (abs((_2776 - _2780) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2975 = ((((_2781 > 0.0) ? exp2(_2796 * _2781) : (2.0 - exp2(_2798 * _2781))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2791;
        }
        else
        {
            float _2919 = 1.0 / cbSceneParam._m0[80u].x;
            float _2920 = isnan(_2782) ? _2781 : (isnan(_2781) ? _2782 : max(_2781, _2782));
            float _2921 = isnan(_2782) ? _2781 : (isnan(_2781) ? _2782 : min(_2781, _2782));
            float _2930 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : min(_2920, 0.0));
            float _2931 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : min(_2921, 0.0));
            _2975 = ((abs(_2788 / _2776) * cbSceneParam._m0[80u].y) * ((((_2930 - _2931) * 2.0) - ((exp2(_2796 * (isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0)))) - exp2(_2796 * (isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0))))) * _2919)) - ((exp2(_2798 * _2930) - exp2(_2798 * _2931)) * _2919))) + (_2791 * cbSceneParam._m0[80u].z);
        }
        vec4 _2977 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2687, _2688, 1.0), 0.0);
        float _2986 = exp2((_2975 * (-1.44269502162933349609375)) * (1.0 - _2977.w));
        float _2987 = log2(_2986);
        float _3003 = log2(_2707);
        _2800 = (exp2(_3003 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2987 * cbSceneParam._m0[78u].x)) * _2977.x) / cbSceneParam._m0[78u].x)) + _2704;
        _2802 = (exp2(_3003 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2987 * cbSceneParam._m0[78u].y)) * _2977.y) / cbSceneParam._m0[78u].y)) + _2705;
        _2804 = (exp2(_3003 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2987 * cbSceneParam._m0[78u].z)) * _2977.z) / cbSceneParam._m0[78u].z)) + _2706;
        _2806 = _2986 * _2707;
    }
    else
    {
        _2800 = _2704;
        _2802 = _2705;
        _2804 = _2706;
        _2806 = _2707;
    }
    bool _3013;
    vec4 _2816;
    vec4 _2838;
    float _2840;
    float _2844;
    float _2845;
    float _2846;
    float _2847;
    bool _2857;
    for (;;)
    {
        _2816 = cbMatDynParam._m0[0u];
        float _2818 = roundEven(_2816.y);
        bool _2819 = _2818 == 3.0;
        float _2820 = log2(_2806);
        float _2827 = exp2(_2820 * cbSceneParam._m0[78u].x) * _2676;
        float _2828 = exp2(_2820 * cbSceneParam._m0[78u].y) * _2677;
        float _2829 = exp2(_2820 * cbSceneParam._m0[78u].z) * _2678;
        float _2836 = _768 + (-0.5);
        _2838 = cbMtdParam._m0[1u];
        _2840 = _2838.y * _2836;
        float _2843 = (_2818 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2844 = _2843 * (_2819 ? _2827 : (_2827 + (cbSceneParam._m0[72u].w * _2800)));
        _2845 = _2843 * (_2819 ? _2828 : (_2828 + (cbSceneParam._m0[72u].w * _2802)));
        _2846 = _2843 * (_2819 ? _2829 : (_2829 + (cbSceneParam._m0[72u].w * _2804)));
        _2847 = _2836 * 0.999000012874603271484375;
        _2857 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2857)
        {
            if ((cbInstanceData._m0[_270 + 7u].x + _2847) < 0.5)
            {
                _3013 = true;
                break;
            }
        }
        uint _2954 = _817 + uint(_2816.w);
        if ((cbInstanceData._m0[_2954].w < 1.0) && ((cbInstanceData._m0[_2954].w + _2847) < 0.5))
        {
            _3013 = true;
            break;
        }
        if ((_2840 + 1.0) < _2838.x)
        {
            _3013 = true;
            break;
        }
        _3013 = false;
        break;
    }
    float _3218;
    if (_3013)
    {
        discard_state = true;
        _3218 = 0.0;
    }
    else
    {
        _3218 = cbInstanceData._m0[_2679].w;
    }
    SV_Target.x = _2844;
    SV_Target.y = _2845;
    SV_Target.z = _2846;
    SV_Target.w = _3218;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2679].w;
    discard_exit();
}


