#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1413;
float _3815;
float _3816;
float _3817;
float _3818;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _364.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[23u].w) + _414) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3827 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _439 = (_432 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _440 = (_432 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _441 = (_432 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _458 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _364.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[23u].w) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3838 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _518 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439);
    float _521 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440);
    float _524 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441);
    vec4 _543 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _582 = _580.x;
    float _583 = _580.y;
    float _584 = _580.z;
    float _591 = ((_563.x - _582) * _432) + _582;
    float _592 = ((_563.y - _583) * _432) + _583;
    float _593 = ((_563.z - _584) * _432) + _584;
    vec4 _605 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _618 = ((_605.z - _593) * _505) + _593;
    float _621 = ((((_605.x - _591) * _505) + _591) * 2.0) + (-1.0);
    float _623 = ((((_605.y - _592) * _505) + _592) * 2.0) + (-1.0);
    float _624 = dot(vec2(_621, _623), vec2(_621, _623));
    float _3849 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _670 = _668.x;
    float _671 = 1.0 - _670;
    float _687 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_670 - _671) * cbMtdParam._m0[24u].z) + _671) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3860 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _688 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _695 = (_688 * ((_543.x * cbMtdParam._m0[18u].x) - _518)) + _518;
    float _696 = (_688 * ((_543.y * cbMtdParam._m0[18u].y) - _521)) + _521;
    float _697 = (_688 * ((_543.z * cbMtdParam._m0[18u].z) - _524)) + _524;
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _725 = _723.x;
    float _742 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _725) * _432) + _725;
    float _759 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _742) * _505) + _742;
    float _763 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _759) * cbMtdParam._m0[19u].z) + _759;
    float _765 = _763 - (_763 * _688);
    float _769 = (cbMtdParam._m0[19u].w * (_643.z - _618)) + _618;
    vec4 _782 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _789 = (_782.x * 2.0) + (-1.0);
    float _790 = (_782.y * 2.0) + (-1.0);
    float _791 = dot(vec2(_789, _790), vec2(_789, _790));
    float _3871 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _799 = (_688 * (_782.z - _769)) + _769;
    float _802 = (((_643.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _621;
    float _803 = (((_643.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _623;
    float _815 = (((_789 - _802) + (cbMtdParam._m0[21u].x * _802)) * _688) + _802;
    float _816 = (((_790 - _803) + (cbMtdParam._m0[21u].x * _803)) * _688) + _803;
    float _817 = (_688 * (sqrt(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) - _629)) + _629;
    float _819 = cbMtdParam._m0[22u].x + _643.w;
    float _822 = fma(_817, _241 * NORMAL.x, fma(_816, _248 * TANGENT.x, (_234 * _226) * _815));
    float _825 = fma(_817, _241 * NORMAL.y, fma(_816, _248 * TANGENT.y, (_234 * _227) * _815));
    float _828 = fma(_817, _241 * NORMAL.z, fma(_816, _248 * TANGENT.z, (_234 * _228) * _815));
    float _832 = inversesqrt(dot(vec3(_822, _825, _828), vec3(_822, _825, _828)));
    float _833 = _832 * _822;
    float _834 = _832 * _825;
    float _835 = _832 * _828;
    float _3882 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _836 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _3904 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3915 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _3926 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _3937 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _841 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _855 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _906 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _896);
    float _907 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _896);
    float _908 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _896);
    float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
    float _913 = _906 * _912;
    float _914 = _907 * _912;
    float _915 = _908 * _912;
    vec4 _920 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _922 = _920.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1094 = sqrt(((_906 * _906) + (_907 * _907)) + (_908 * _908));
        float _1100 = (cbMatDynParam._m0[5u].x * _1094) + cbMatDynParam._m0[5u].y;
        float _3948 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1105 = (cbMatDynParam._m0[5u].z * _1094) + cbMatDynParam._m0[5u].w;
        float _3959 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) - _1101)) + _1101) < ((_922 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _933 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _934 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _952 = fma(_835, cbSceneParam._m0[5u].z, fma(_834, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _833));
    float _955 = fma(_835, cbSceneParam._m0[6u].z, fma(_834, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _833));
    float _958 = fma(_835, cbSceneParam._m0[7u].z, fma(_834, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _833));
    uint _971 = _254 + 9u;
    uint _972 = _971 + uint(cbMatDynParam._m0[0u].w);
    float _978 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_972].x;
    float _979 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_972].y;
    float _980 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_972].z;
    float _3970 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _984 = 1.0 - _841;
    float _985 = _981 * _984;
    float _986 = _982 * _984;
    float _987 = _983 * _984;
    float _992 = (_981 + (-0.039999999105930328369140625)) * _841;
    float _993 = (_982 + (-0.039999999105930328369140625)) * _841;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _841;
    float _995 = _992 + 0.039999999105930328369140625;
    float _997 = _993 + 0.039999999105930328369140625;
    float _998 = _994 + 0.039999999105930328369140625;
    vec4 _1007 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _933, cbSceneParam._m0[86u].y * _934));
    float _1011 = ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * TEXCOORD_5.w) * _1007.x;
    float _1012 = dot(vec3(_833, _834, _835), vec3(_913, _914, _915));
    float _1015 = _1012 * 2.0;
    float _1019 = (_1015 * _833) - _913;
    float _1020 = (_1015 * _834) - _914;
    float _1021 = (_1015 * _835) - _915;
    float _1025 = abs(dot(vec3(_913, _914, _915), vec3(_833, _834, _835)));
    float _4003 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1027 = sqrt(_836);
    float _1040 = exp2((_1027 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1027 * 3.0));
    float _1046 = (1.0 - _1040) * ((_1027 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1047 = _1040 * _1027;
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1412;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1137 = fma(_1083, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075));
        float _1141 = fma(_1083, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075));
        float _1145 = fma(_1083, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075));
        float _1170 = _1075 + _833;
        float _1171 = _1079 + _834;
        float _1172 = _1083 + _835;
        float _1182 = fma(_1172, cbModelParam._m0[26u].z, fma(_1171, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1170)) - _1137;
        float _1183 = fma(_1172, cbModelParam._m0[27u].z, fma(_1171, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1170)) - _1141;
        float _1184 = fma(_1172, cbModelParam._m0[28u].z, fma(_1171, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1170)) - _1145;
        float _1188 = inversesqrt(dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184)));
        float _1201 = ((_1188 * _1182) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1137 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1188 * _1183) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1141 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1188 * _1184) / cbModelParam._m0[34u].z) + ((((((_1145 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1201, _1202, _1203), 0.0);
        float _1240 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1206.x + (-0.5));
        float _1242 = _1240 * (_1206.y + (-0.5));
        float _1243 = _1240 * (_1206.z + (-0.5));
        float _1250 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1213.x + (-0.5));
        float _1252 = _1250 * (_1213.y + (-0.5));
        float _1253 = _1250 * (_1213.z + (-0.5));
        float _1260 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1220.x + (-0.5));
        float _1262 = _1260 * (_1220.y + (-0.5));
        float _1263 = _1260 * (_1220.z + (-0.5));
        float _1270 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1227.x + (-0.5));
        float _1272 = _1270 * (_1227.y + (-0.5));
        float _1273 = _1270 * (_1227.z + (-0.5));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = _1241 * 0.5;
        float _1278 = _1251 * 0.5;
        float _1279 = _1261 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1294 = (dot(vec3(_833, _834, _835), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1304 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4051 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1306 + 1.0))) + _1311) * _1274;
        float _1321 = _1242 * 0.5;
        float _1322 = _1252 * 0.5;
        float _1323 = _1262 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_833, _834, _835), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4084 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1348 + 1.0))) + _1353) * _1275;
        float _1363 = _1243 * 0.5;
        float _1364 = _1253 * 0.5;
        float _1365 = _1263 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_833, _834, _835), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4117 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1390 + 1.0))) + _1395) * _1276;
        _1412 = _1243;
        _1414 = _1242;
        _1415 = _1241;
        _1416 = _1253;
        _1417 = _1252;
        _1418 = _1251;
        _1419 = _1263;
        _1420 = _1262;
        _1421 = _1261;
        _1422 = _1276;
        _1423 = _1275;
        _1424 = _1274;
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
    }
    else
    {
        _1412 = _1413;
        _1414 = _1413;
        _1415 = _1413;
        _1416 = _1413;
        _1417 = _1413;
        _1418 = _1413;
        _1419 = _1413;
        _1420 = _1413;
        _1421 = _1413;
        _1422 = _1413;
        _1423 = _1413;
        _1424 = _1413;
        _1425 = 0.0;
        _1426 = 0.0;
        _1427 = 0.0;
    }
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1454 = fma(_1083, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1075));
        float _1458 = fma(_1083, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1075));
        float _1462 = fma(_1083, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1075));
        float _1485 = _1075 + _833;
        float _1486 = _1079 + _834;
        float _1487 = _1083 + _835;
        float _1497 = fma(_1487, cbModelParam._m0[30u].z, fma(_1486, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1485)) - _1454;
        float _1498 = fma(_1487, cbModelParam._m0[31u].z, fma(_1486, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1485)) - _1458;
        float _1499 = fma(_1487, cbModelParam._m0[32u].z, fma(_1486, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1485)) - _1462;
        float _1503 = inversesqrt(dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499)));
        float _1516 = ((_1503 * _1497) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1454 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1503 * _1498) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1458 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1503 * _1499) / cbModelParam._m0[35u].z) + ((((((_1462 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        float _1553 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1520.x + (-0.5));
        float _1555 = _1553 * (_1520.y + (-0.5));
        float _1556 = _1553 * (_1520.z + (-0.5));
        float _1563 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1527.x + (-0.5));
        float _1565 = _1563 * (_1527.y + (-0.5));
        float _1566 = _1563 * (_1527.z + (-0.5));
        float _1573 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1534.x + (-0.5));
        float _1575 = _1573 * (_1534.y + (-0.5));
        float _1576 = _1573 * (_1534.z + (-0.5));
        float _1583 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1541.x + (-0.5));
        float _1585 = _1583 * (_1541.y + (-0.5));
        float _1586 = _1583 * (_1541.z + (-0.5));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = _1554 * 0.5;
        float _1591 = _1564 * 0.5;
        float _1592 = _1574 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_833, _834, _835), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4180 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1617 + 1.0))) + _1622) * _1587;
        float _1632 = _1555 * 0.5;
        float _1633 = _1565 * 0.5;
        float _1634 = _1575 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_833, _834, _835), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4213 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1659 + 1.0))) + _1664) * _1588;
        float _1674 = _1556 * 0.5;
        float _1675 = _1566 * 0.5;
        float _1676 = _1576 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_833, _834, _835), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4246 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1701 + 1.0))) + _1706) * _1589;
        _1723 = _1556;
        _1724 = _1555;
        _1725 = _1554;
        _1726 = _1566;
        _1727 = _1565;
        _1728 = _1564;
        _1729 = _1576;
        _1730 = _1575;
        _1731 = _1574;
        _1732 = _1589;
        _1733 = _1588;
        _1734 = _1587;
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
    }
    else
    {
        _1723 = _1413;
        _1724 = _1413;
        _1725 = _1413;
        _1726 = _1413;
        _1727 = _1413;
        _1728 = _1413;
        _1729 = _1413;
        _1730 = _1413;
        _1731 = _1413;
        _1732 = _1413;
        _1733 = _1413;
        _1734 = _1413;
        _1735 = 0.0;
        _1736 = 0.0;
        _1737 = 0.0;
    }
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1425)) + _1425;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1426)) + _1426;
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1427)) + _1427;
    float _1770 = fma(_1749, cbSceneParam._m0[89u].z, fma(_1748, cbSceneParam._m0[89u].y, _1747 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1749, cbSceneParam._m0[90u].z, fma(_1748, cbSceneParam._m0[90u].y, _1747 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1749, cbSceneParam._m0[91u].z, fma(_1748, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1747));
    float _1791 = _1019 * 0.5;
    float _1792 = _1020 * 0.5;
    float _1793 = _1021 * 0.5;
    float _1794 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1797 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1800 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1834;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1807 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1412, _1416, _1419, _1422));
        float _1811 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1414, _1417, _1420, _1423));
        float _1815 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1415, _1418, _1421, _1424));
        float _1822 = dot(vec4(cbModelParam._m0[39u]), vec4(_1791, _1792, _1793, 1.0));
        _1834 = dot(vec3(isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1834 = 1.0;
    }
    float _1845;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1836 = dot(vec4(cbModelParam._m0[40u]), vec4(_1791, _1792, _1793, 1.0));
        _1845 = dot(vec3(isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1836) ? 0.0 : (isnan(0.0) ? _1836 : max(0.0, _1836))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1845 = 1.0;
    }
    float _1849 = (_1845 * cbModelParam._m0[1u].x) + (_1834 * (1.0 - cbModelParam._m0[1u].x));
    float _1859 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _836);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1859 : min(cbModelParam._m0[25u].z, _1859));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1907 = fma(_1083, cbModelParam._m0[13u].z, fma(_1079, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1075)) + cbModelParam._m0[13u].w;
        float _1911 = fma(_1083, cbModelParam._m0[14u].z, fma(_1079, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1075)) + cbModelParam._m0[14u].w;
        float _1915 = fma(_1083, cbModelParam._m0[15u].z, fma(_1079, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1075)) + cbModelParam._m0[15u].w;
        float _1918 = fma(_1021, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1019));
        float _1921 = fma(_1021, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1019));
        float _1924 = fma(_1021, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1019));
        float _1952;
        if (_1918 > 0.0)
        {
            _1952 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1952 = frontier_phi_17_15_ladder;
        }
        float _2175;
        if (_1921 > 0.0)
        {
            _2175 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2175 = frontier_phi_26_22_ladder;
        }
        float _2432;
        if (_1924 > 0.0)
        {
            _2432 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2432 = frontier_phi_38_33_ladder;
        }
        float _2434 = isnan(_2175) ? _1952 : (isnan(_1952) ? _2175 : min(_1952, _2175));
        float _2435 = isnan(_2432) ? _2434 : (isnan(_2434) ? _2432 : min(_2434, _2432));
        float _2439 = (_2435 * _1918) + _1907;
        float _2440 = (_2435 * _1921) + _1911;
        float _2441 = (_2435 * _1924) + _1915;
        float _2442 = _2435 * 9.9999997473787516355514526367188e-05;
        float _2444 = (-1.0) - _2442;
        float _2446 = _2442 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2441 > _2446) || ((_2441 < _2444) || ((_2440 > _2446) || ((_2440 < _2444) || ((_2439 < _2444) || (_2439 > _2446))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2441, cbModelParam._m0[9u].z, fma(_2440, cbModelParam._m0[9u].y, _2439 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2441, cbModelParam._m0[10u].z, fma(_2440, cbModelParam._m0[10u].y, _2439 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2441, cbModelParam._m0[11u].z, fma(_2440, cbModelParam._m0[11u].y, _2439 * cbModelParam._m0[11u].x))), _1860);
            frontier_phi_16_38_ladder = _2569.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2569.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2569.x * cbModelParam._m0[1u].y;
        }
        _1940 = frontier_phi_16_38_ladder_2;
        _1942 = frontier_phi_16_38_ladder_1;
        _1944 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1019, _1020, _1021), _1860);
        _1940 = _1928.x * cbModelParam._m0[1u].y;
        _1942 = _1928.y * cbModelParam._m0[1u].y;
        _1944 = _1928.z * cbModelParam._m0[1u].y;
    }
    float _1948 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _836);
    float _1949 = isnan(_1948) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1948 : min(cbModelParam._m0[25u].w, _1948));
    float _2038;
    float _2040;
    float _2042;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2002 = fma(_1083, cbModelParam._m0[21u].z, fma(_1079, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1075)) + cbModelParam._m0[21u].w;
        float _2006 = fma(_1083, cbModelParam._m0[22u].z, fma(_1079, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1075)) + cbModelParam._m0[22u].w;
        float _2010 = fma(_1083, cbModelParam._m0[23u].z, fma(_1079, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1075)) + cbModelParam._m0[23u].w;
        float _2013 = fma(_1021, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1019));
        float _2016 = fma(_1021, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1019));
        float _2019 = fma(_1021, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1019));
        float _2180;
        if (_2013 > 0.0)
        {
            _2180 = abs((1.0 - _2002) / _2013);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2002 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2180 = frontier_phi_28_24_ladder;
        }
        float _2459;
        if (_2016 > 0.0)
        {
            _2459 = abs((1.0 - _2006) / _2016);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2006 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2459 = frontier_phi_40_35_ladder;
        }
        float _2672;
        if (_2019 > 0.0)
        {
            _2672 = abs((1.0 - _2010) / _2019);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2010 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2672 = frontier_phi_49_46_ladder;
        }
        float _2674 = isnan(_2459) ? _2180 : (isnan(_2180) ? _2459 : min(_2180, _2459));
        float _2675 = isnan(_2672) ? _2674 : (isnan(_2674) ? _2672 : min(_2674, _2672));
        float _2679 = (_2675 * _2013) + _2002;
        float _2680 = (_2675 * _2016) + _2006;
        float _2681 = (_2675 * _2019) + _2010;
        float _2682 = _2675 * 9.9999997473787516355514526367188e-05;
        float _2683 = (-1.0) - _2682;
        float _2685 = _2682 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2681 > _2685) || ((_2681 < _2683) || ((_2680 > _2685) || ((_2680 < _2683) || ((_2679 < _2683) || (_2679 > _2685))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2681, cbModelParam._m0[17u].z, fma(_2680, cbModelParam._m0[17u].y, _2679 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2681, cbModelParam._m0[18u].z, fma(_2680, cbModelParam._m0[18u].y, _2679 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2681, cbModelParam._m0[19u].z, fma(_2680, cbModelParam._m0[19u].y, _2679 * cbModelParam._m0[19u].x))), _1949);
            frontier_phi_25_49_ladder = _2880.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2880.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2880.x * cbModelParam._m0[1u].z;
        }
        _2038 = frontier_phi_25_49_ladder_2;
        _2040 = frontier_phi_25_49_ladder_1;
        _2042 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2022 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1019, _1020, _1021), _1949);
        _2038 = _2022.x * cbModelParam._m0[1u].z;
        _2040 = _2022.y * cbModelParam._m0[1u].z;
        _2042 = _2022.z * cbModelParam._m0[1u].z;
    }
    float _2055 = (((_1046 * _995) + _1047) * _1011) * ((cbModelParam._m0[1u].w * (_2038 - _1940)) + _1940);
    float _2057 = (((_1046 * _997) + _1047) * _1011) * ((cbModelParam._m0[1u].w * (_2040 - _1942)) + _1942);
    float _2059 = (((_1046 * _998) + _1047) * _1011) * ((cbModelParam._m0[1u].w * (_2042 - _1944)) + _1944);
    float _2062 = fma(_2059, cbSceneParam._m0[89u].z, fma(_2057, cbSceneParam._m0[89u].y, _2055 * cbSceneParam._m0[89u].x));
    float _2065 = fma(_2059, cbSceneParam._m0[90u].z, fma(_2057, cbSceneParam._m0[90u].y, _2055 * cbSceneParam._m0[90u].x));
    float _2068 = fma(_2059, cbSceneParam._m0[91u].z, fma(_2057, cbSceneParam._m0[91u].y, _2055 * cbSceneParam._m0[91u].x));
    vec4 _2076 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_933, _934));
    float _2078 = _2076.w;
    float _2090 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2078);
    float _2091 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2078);
    float _2092 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2078);
    uvec4 _2096 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2098 = _2096.x * 14u;
    uint _2099 = _2098 + 13u;
    float _2106 = _1011 + (-1.0);
    float _2111 = (cbLight._m0[_2099].x * _2106) + 1.0;
    float _2112 = (cbLight._m0[_2099].y * _2106) + 1.0;
    float _2113 = (cbLight._m0[_2099].z * _2106) + 1.0;
    float _2114 = (cbLight._m0[_2099].w * _2106) + 1.0;
    uint _2115 = _2098 + 5u;
    float _2121 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2125 = _2098 + 4u;
    float _2134 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
    uint _2138 = _2098 | 1u;
    float _2149 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_833, _834, _835));
    float _2152 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_833, _834, _835));
    float _4382 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _4393 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2157 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2159 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * 0.3183098733425140380859375;
    float _2166 = ((cbLight._m0[_2115].x * _2121) * _2159) + (((cbLight._m0[_2125].x * _2090) * _2134) * _2157);
    float _2167 = ((_2121 * cbLight._m0[_2115].y) * _2159) + (((cbLight._m0[_2125].y * _2091) * _2134) * _2157);
    float _2168 = ((_2121 * cbLight._m0[_2115].z) * _2159) + (((cbLight._m0[_2125].z * _2092) * _2134) * _2157);
    uvec4 _2172 = floatBitsToUint(cbLight._m0[_2098 + 12u]);
    bool _2174 = _2172.x == 0u;
    float _2185;
    float _2187;
    float _2189;
    if (_2174)
    {
        _2185 = _2166;
        _2187 = _2167;
        _2189 = _2168;
    }
    else
    {
        uint _2193 = _2098 + 6u;
        float _2209 = (dot(vec3(cbLight._m0[_2098 + 2u].xyz), vec3(_833, _834, _835)) * 0.5) + 0.5;
        float _2210 = _2209 * _2209;
        float _4404 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2211 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2212 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2185 = (((cbLight._m0[_2193].x * 0.3183098733425140380859375) * _2211) * _2212) + _2166;
        _2187 = (((cbLight._m0[_2193].y * 0.3183098733425140380859375) * _2211) * _2212) + _2167;
        _2189 = (((cbLight._m0[_2193].z * 0.3183098733425140380859375) * _2211) * _2212) + _2168;
    }
    bool _2192 = _2172.y == 0u;
    float _2230;
    float _2232;
    float _2234;
    if (_2192)
    {
        _2230 = _2185;
        _2232 = _2187;
        _2234 = _2189;
    }
    else
    {
        uint _2403 = _2098 + 7u;
        float _2419 = (dot(vec3(cbLight._m0[_2098 + 3u].xyz), vec3(_833, _834, _835)) * 0.5) + 0.5;
        float _2420 = _2419 * _2419;
        float _4420 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2421 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2422 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2230 = (((cbLight._m0[_2403].x * 0.3183098733425140380859375) * _2421) * _2422) + _2185;
        _2232 = (((cbLight._m0[_2403].y * 0.3183098733425140380859375) * _2421) * _2422) + _2187;
        _2234 = (((cbLight._m0[_2403].z * 0.3183098733425140380859375) * _2421) * _2422) + _2189;
    }
    uint _2237 = _2098 + 8u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _836) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_2098].x + _913;
    float _2253 = cbLight._m0[_2098].y + _914;
    float _2254 = cbLight._m0[_2098].z + _915;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2098].xyz));
    float _4436 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _4447 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _2266 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2267 = dot(vec3(_833, _834, _835), vec3(_2259, _2260, _2261));
    float _4458 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2259, _2260, _2261));
    float _4469 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2251 * _2251;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2287 = exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0);
    float _2288 = 0.959999978542327880859375 - _992;
    float _2290 = 0.959999978542327880859375 - _993;
    float _2291 = 0.959999978542327880859375 - _994;
    float _2298 = 1.0 - _2251;
    float _2309 = (0.5 / (((_2266 * ((_2265 * _2298) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2298) + _2251) * _2265))) * _2265;
    float _4480 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    uint _2325 = _2098 + 9u;
    float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _836) * 0.949999988079071044921875);
    float _2337 = _2336 * _2336;
    float _2338 = cbLight._m0[_2138].x + _913;
    float _2339 = cbLight._m0[_2138].y + _914;
    float _2340 = cbLight._m0[_2138].z + _915;
    float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
    float _2345 = _2344 * _2338;
    float _2346 = _2344 * _2339;
    float _2347 = _2344 * _2340;
    float _2348 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2138].xyz));
    float _4491 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2352 = dot(vec3(_833, _834, _835), vec3(_2345, _2346, _2347));
    float _4502 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2356 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2345, _2346, _2347));
    float _4513 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2360 = _2337 * _2337;
    float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
    float _2371 = exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0);
    float _2378 = 1.0 - _2337;
    float _2388 = (0.5 / (((_2266 * ((_2351 * _2378) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2378) + _2337) * _2351))) * _2351;
    float _4524 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2390 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
    float _2400 = (((((_2371 * _2288) + _995) * cbLight._m0[_2325].x) * _2390) * _2121) + ((((cbLight._m0[_2237].x * _2090) * ((_2287 * _2288) + _995)) * _2311) * _2134);
    float _2401 = (((((_2371 * _2290) + _997) * cbLight._m0[_2325].y) * _2390) * _2121) + ((((cbLight._m0[_2237].y * _2091) * ((_2287 * _2290) + _997)) * _2311) * _2134);
    float _2402 = (((((_2371 * _2291) + _998) * cbLight._m0[_2325].z) * _2390) * _2121) + ((((cbLight._m0[_2237].z * _2092) * ((_2287 * _2291) + _998)) * _2311) * _2134);
    float _2464;
    float _2466;
    float _2468;
    if (_2174)
    {
        _2464 = _2400;
        _2466 = _2401;
        _2468 = _2402;
    }
    else
    {
        uint _2470 = _2098 + 2u;
        uint _2474 = _2098 + 10u;
        float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _836) * 0.949999988079071044921875);
        float _2489 = _2488 * _2488;
        float _2490 = cbLight._m0[_2470].x + _913;
        float _2491 = cbLight._m0[_2470].y + _914;
        float _2492 = cbLight._m0[_2470].z + _915;
        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
        float _2497 = _2496 * _2490;
        float _2498 = _2496 * _2491;
        float _2499 = _2496 * _2492;
        float _2500 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2470].xyz));
        float _4535 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2504 = dot(vec3(_833, _834, _835), vec3(_2497, _2498, _2499));
        float _4546 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2508 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2497, _2498, _2499));
        float _4557 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2512 = _2489 * _2489;
        float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
        float _2523 = exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0);
        float _2530 = 1.0 - _2489;
        float _2540 = (0.5 / (((_2266 * ((_2503 * _2530) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2530) + _2489) * _2503))) * _2503;
        float _4568 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2542 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
        float _2543 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2464 = (((((_2523 * _2288) + _995) * cbLight._m0[_2474].x) * _2542) * _2543) + _2400;
        _2466 = (((((_2523 * _2290) + _997) * cbLight._m0[_2474].y) * _2542) * _2543) + _2401;
        _2468 = (((((_2523 * _2291) + _998) * cbLight._m0[_2474].z) * _2542) * _2543) + _2402;
    }
    float _2578;
    float _2580;
    float _2582;
    if (_2192)
    {
        _2578 = _2464;
        _2580 = _2466;
        _2582 = _2468;
    }
    else
    {
        uint _2589 = _2098 + 3u;
        uint _2593 = _2098 + 11u;
        float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2589].w)) * _836) * 0.949999988079071044921875);
        float _2608 = _2607 * _2607;
        float _2609 = cbLight._m0[_2589].x + _913;
        float _2610 = cbLight._m0[_2589].y + _914;
        float _2611 = cbLight._m0[_2589].z + _915;
        float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
        float _2616 = _2615 * _2609;
        float _2617 = _2615 * _2610;
        float _2618 = _2615 * _2611;
        float _2619 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2589].xyz));
        float _4584 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2623 = dot(vec3(_833, _834, _835), vec3(_2616, _2617, _2618));
        float _4595 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2627 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_2616, _2617, _2618));
        float _4606 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2631 = _2608 * _2608;
        float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
        float _2642 = exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0);
        float _2649 = 1.0 - _2608;
        float _2659 = (0.5 / (((_2266 * ((_2622 * _2649) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2649) + _2608) * _2622))) * _2622;
        float _4617 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2661 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
        float _2662 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2578 = (((((_2642 * _2288) + _995) * cbLight._m0[_2593].x) * _2661) * _2662) + _2464;
        _2580 = (((((_2642 * _2290) + _997) * cbLight._m0[_2593].y) * _2661) * _2662) + _2466;
        _2582 = (((((_2642 * _2291) + _998) * cbLight._m0[_2593].z) * _2661) * _2662) + _2468;
    }
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    if (_2096.y == 0u)
    {
        float _2737 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2737;
        float _2739 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2737;
        float _2740 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2737;
        uvec4 _2752 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2753 = _2752.x;
        uint _2764 = uint((float(_2752.y) * floor(float(uint(cbSceneParam._m0[85u].y * _934) / _2753))) + floor(float(uint(cbSceneParam._m0[85u].x * _933) / _2753)));
        float _2774 = (log2(_2740 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2775 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        uint _2778 = uint(isnan(14.0) ? _2775 : (isnan(_2775) ? 14.0 : min(_2775, 14.0)));
        uvec4 _2783 = texelFetch(g_lightClusterGridBuffer, int(((_2778 << 2u) + (_2764 << 6u)) >> 2u));
        uint _2784 = _2783.x;
        uint _2785 = _2752.z;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        if (((((1u << ((_2785 >> 4u) & 15u)) + 4294967295u) & _2784) == 0u) || ((_2785 & 240u) == 0u))
        {
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
        }
        else
        {
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            uint _3044 = 0u;
            uint _3053;
            bool _3054;
            for (;;)
            {
                _3053 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3044 << 2u)) >> 2u)).x;
                _3054 = _3053 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3054)
                {
                    frontier_phi_66_pred = _3038;
                    frontier_phi_66_pred_1 = _3043;
                    frontier_phi_66_pred_2 = _3042;
                    frontier_phi_66_pred_3 = _3041;
                    frontier_phi_66_pred_4 = _3040;
                    frontier_phi_66_pred_5 = _3039;
                }
                else
                {
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    uint _3189;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3041;
                    _3187 = _3042;
                    _3188 = _3043;
                    _3189 = _3053;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    for (;;)
                    {
                        uint _3193 = uint(findLSB(_3189)) + (_3044 << 5u);
                        uint _3190 = (_3189 + 4294967295u) & _3189;
                        uint _3195 = _3193 * 48u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3215 = (_3193 * 48u) + 4u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3234 = (_3193 * 48u) + 8u;
                        vec3 _3245 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x));
                        float _3249 = _3209.x - _2738;
                        float _3250 = _3209.y - _2739;
                        float _3251 = _3209.z - _2740;
                        float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                        float _3255 = inversesqrt(_3252);
                        float _3256 = _3255 * _3249;
                        float _3257 = _3255 * _3250;
                        float _3258 = _3255 * _3251;
                        float _3259 = dot(vec3(_952, _955, _958), vec3(_3256, _3257, _3258));
                        float _3264 = 1.0 - (_3252 * _3209.w);
                        float _4643 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3265 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3266 = sqrt(_3252) * _3228.w;
                        float _3269 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3259) + _3270;
                        float _3276 = _3266 * _3266;
                        float _3280 = ((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3265) / ((_3276 * 0.699999988079071044921875) + 1.0);
                        float _3284 = (-0.0) - _2738;
                        float _3285 = (-0.0) - _2739;
                        float _3286 = (-0.0) - _2740;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3291 = _3290 * _3284;
                        float _3292 = _3290 * _3285;
                        float _3293 = _3290 * _3286;
                        float _3301 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                        float _3302 = 1.0 - _1027;
                        float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                        float _3310 = _3309 * _3309;
                        float _3311 = _3310 * _3310;
                        float _3312 = _3291 + _3256;
                        float _3313 = _3292 + _3257;
                        float _3314 = _3293 + _3258;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3322 = dot(vec3(_952, _955, _958), vec3(_3291, _3292, _3293));
                        float _4659 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3326 = dot(vec3(_952, _955, _958), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                        float _4670 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3329 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                        float _3334 = _3269 * _3310;
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3259) + _3335;
                        float _4681 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3340 = 1.0 - _3310;
                        float _3350 = (0.5 / (((_3339 * ((_3325 * _3340) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3310) * _3325))) * _3339;
                        float _4692 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3361 = (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) / ((_3333 * _3333) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125))) * _3265;
                        _3113 = (_3280 * _3228.x) + _3186;
                        _3114 = (_3280 * _3228.y) + _3187;
                        _3115 = (_3280 * _3228.z) + _3188;
                        _3110 = (_3361 * _3245.x) + _3183;
                        _3111 = (_3361 * _3245.y) + _3184;
                        _3112 = (_3361 * _3245.z) + _3185;
                        if (_3190 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3113;
                            _3187 = _3114;
                            _3188 = _3115;
                            _3189 = _3190;
                        }
                    }
                    frontier_phi_66_pred = _3110;
                    frontier_phi_66_pred_1 = _3115;
                    frontier_phi_66_pred_2 = _3114;
                    frontier_phi_66_pred_3 = _3113;
                    frontier_phi_66_pred_4 = _3112;
                    frontier_phi_66_pred_5 = _3111;
                }
                _2886 = frontier_phi_66_pred;
                _2896 = frontier_phi_66_pred_1;
                _2894 = frontier_phi_66_pred_2;
                _2892 = frontier_phi_66_pred_3;
                _2890 = frontier_phi_66_pred_4;
                _2888 = frontier_phi_66_pred_5;
                uint _3045 = _3044 + 1u;
                if (_3045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3038 = _2886;
                    _3039 = _2888;
                    _3040 = _2890;
                    _3041 = _2892;
                    _3042 = _2894;
                    _3043 = _2896;
                    _3044 = _3045;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
        }
        uvec4 _2899 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2900 = _2899.z;
        uint _2902 = (_2900 >> 8u) & 15u;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        if (((4294967295u << _2902) & _2784) == 0u)
        {
            _3006 = _2885;
            _3008 = _2887;
            _3010 = _2889;
            _3012 = _2891;
            _3014 = _2893;
            _3016 = _2895;
        }
        else
        {
            float _3031 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
            float _3032 = _3031 * _2738;
            float _3033 = _3031 * _2739;
            float _3034 = _3031 * _2740;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2902 < ((_2900 >> 12u) & 15u))
            {
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3166 = _2885;
                float _3167 = _2887;
                float _3168 = _2889;
                float _3169 = _2891;
                float _3170 = _2893;
                float _3171 = _2895;
                uint _3172 = _2902;
                uint _3181;
                bool _3182;
                for (;;)
                {
                    _3181 = texelFetch(g_lightClassification, int((((_2778 << 5u) + (_2764 << 9u)) + (_3172 << 2u)) >> 2u)).x;
                    _3182 = _3181 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3182)
                    {
                        frontier_phi_77_pred = _3171;
                        frontier_phi_77_pred_1 = _3170;
                        frontier_phi_77_pred_2 = _3169;
                        frontier_phi_77_pred_3 = _3168;
                        frontier_phi_77_pred_4 = _3167;
                        frontier_phi_77_pred_5 = _3166;
                    }
                    else
                    {
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3388 = _3166;
                        float _3389 = _3167;
                        float _3390 = _3168;
                        float _3391 = _3169;
                        float _3392 = _3170;
                        float _3393 = _3171;
                        uint _3394 = _3181;
                        uint _3395;
                        vec4 _3420;
                        float _3421;
                        vec4 _3436;
                        vec3 _3448;
                        vec4 _3463;
                        vec4 _3478;
                        float _3524;
                        bool _3525;
                        for (;;)
                        {
                            uint _3405 = ((_3172 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3394));
                            _3395 = (_3394 + 4294967295u) & _3394;
                            uint _3407 = _3405 * 40u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            _3421 = _3420.w;
                            uint _3423 = (_3405 * 40u) + 4u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3438 = (_3405 * 40u) + 8u;
                            _3448 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x));
                            uint _3450 = (_3405 * 40u) + 16u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3405 * 40u) + 20u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3480 = (_3405 * 40u) + 24u;
                            vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3499 = (_3405 * 40u) + 28u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            _3524 = fma(_2740, _3512.z, fma(_2739, _3512.y, _3512.x * _2738)) + _3512.w;
                            _3525 = !((fma(_2740, _3493.z, fma(_2739, _3493.y, _3493.x * _2738)) + _3493.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3525)
                            {
                                float _3552 = _3420.x - _2738;
                                float _3553 = _3420.y - _2739;
                                float _3554 = _3420.z - _2740;
                                float _3555 = dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554));
                                float _3558 = inversesqrt(_3555);
                                float _3559 = _3558 * _3552;
                                float _3560 = _3558 * _3553;
                                float _3561 = _3558 * _3554;
                                float _3565 = 1.0 - (_3555 / (_3421 * _3421));
                                float _4703 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3570 = sqrt(_3555) * _3436.w;
                                float _3572 = 1.39999997615814208984375 / (_3570 + 1.39999997615814208984375);
                                float _3573 = _3572 * _3572;
                                float _3576 = ((1.0 - _3573) * dot(vec3(_3559, _3560, _3561), vec3(_952, _955, _958))) + _3573;
                                float _3579 = _3570 * _3570;
                                float _3583 = (fma(_2740, _3463.z, fma(_2739, _3463.y, _3463.x * _2738)) + _3463.w) / _3524;
                                float _3584 = (fma(_2740, _3478.z, fma(_2739, _3478.y, _3478.x * _2738)) + _3478.w) / _3524;
                                float _3588 = 1.0 - dot(vec2(_3583, _3584), vec2(_3583, _3584));
                                float _4719 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3590 = _3589 * (((isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0))) * _3566) / ((_3579 * 0.699999988079071044921875) + 1.0));
                                float _3602 = exp2(log2(1.0 / ((_3579 * 3.5) + 5.0)) * 0.25);
                                float _3603 = 1.0 - _1027;
                                float _3610 = sqrt(1.0 - ((1.0 - (_3603 * _3603)) * (1.0 - (_3602 * _3602))));
                                float _3611 = _3610 * _3610;
                                float _3612 = _3611 * _3611;
                                float _3613 = _3559 - _3032;
                                float _3614 = _3560 - _3033;
                                float _3615 = _3561 - _3034;
                                float _3619 = inversesqrt(dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615)));
                                float _3623 = dot(vec3(_952, _955, _958), vec3((-0.0) - _3032, (-0.0) - _3033, (-0.0) - _3034));
                                float _4730 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3626 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3627 = dot(vec3(_952, _955, _958), vec3(_3619 * _3613, _3619 * _3614, _3619 * _3615));
                                float _4741 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3630 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3634 = ((_3630 * _3630) * (_3612 + (-1.0))) + 1.0;
                                float _3635 = _3572 * _3611;
                                float _3636 = _3635 * _3635;
                                float _3642 = ((1.0 - _3636) * dot(vec3(_952, _955, _958), vec3(_3559, _3560, _3561))) + _3636;
                                float _4752 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3644 = 1.0 - _3611;
                                float _3654 = (0.5 / (((_3643 * ((_3626 * _3644) + _3611)) + 9.9999999392252902907785028219223e-09) + (((_3643 * _3644) + _3611) * _3626))) * _3643;
                                float _4763 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3664 = (_3589 * _3566) * (((_3612 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3634 * _3634) * ((_3579 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3590 * _3436.y;
                                frontier_phi_83_pred_1 = _3590 * _3436.x;
                                frontier_phi_83_pred_2 = _3664 * _3448.z;
                                frontier_phi_83_pred_3 = _3664 * _3448.y;
                                frontier_phi_83_pred_4 = _3664 * _3448.x;
                                frontier_phi_83_pred_5 = _3590 * _3436.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3672 = frontier_phi_83_pred;
                            _3671 = frontier_phi_83_pred_1;
                            _3670 = frontier_phi_83_pred_2;
                            _3669 = frontier_phi_83_pred_3;
                            _3668 = frontier_phi_83_pred_4;
                            _3673 = frontier_phi_83_pred_5;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            _3375 = _3668 + _3388;
                            _3376 = _3669 + _3389;
                            _3377 = _3670 + _3390;
                            if (_3395 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3395;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3380;
                        frontier_phi_77_pred_1 = _3379;
                        frontier_phi_77_pred_2 = _3378;
                        frontier_phi_77_pred_3 = _3377;
                        frontier_phi_77_pred_4 = _3376;
                        frontier_phi_77_pred_5 = _3375;
                    }
                    _3017 = frontier_phi_77_pred;
                    _3015 = frontier_phi_77_pred_1;
                    _3013 = frontier_phi_77_pred_2;
                    _3011 = frontier_phi_77_pred_3;
                    _3009 = frontier_phi_77_pred_4;
                    _3007 = frontier_phi_77_pred_5;
                    uint _3173 = _3172 + 1u;
                    if (_3173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3166 = _3007;
                        _3167 = _3009;
                        _3168 = _3011;
                        _3169 = _3013;
                        _3170 = _3015;
                        _3171 = _3017;
                        _3172 = _3173;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3011;
                frontier_phi_58_59_ladder_1 = _3017;
                frontier_phi_58_59_ladder_2 = _3015;
                frontier_phi_58_59_ladder_3 = _3013;
                frontier_phi_58_59_ladder_4 = _3009;
                frontier_phi_58_59_ladder_5 = _3007;
            }
            else
            {
                frontier_phi_58_59_ladder = _2889;
                frontier_phi_58_59_ladder_1 = _2895;
                frontier_phi_58_59_ladder_2 = _2893;
                frontier_phi_58_59_ladder_3 = _2891;
                frontier_phi_58_59_ladder_4 = _2887;
                frontier_phi_58_59_ladder_5 = _2885;
            }
            _3006 = frontier_phi_58_59_ladder_5;
            _3008 = frontier_phi_58_59_ladder_4;
            _3010 = frontier_phi_58_59_ladder;
            _3012 = frontier_phi_58_59_ladder_3;
            _3014 = frontier_phi_58_59_ladder_2;
            _3016 = frontier_phi_58_59_ladder_1;
        }
        float _3021 = isnan(1.0) ? _1011 : (isnan(_1011) ? 1.0 : min(_1011, 1.0));
        _2797 = (_3021 * _3012) + _2230;
        _2799 = (_3021 * _3014) + _2232;
        _2801 = (_3021 * _3016) + _2234;
        _2803 = ((_3006 * _995) * _3021) + _2578;
        _2805 = ((_3008 * _997) * _3021) + _2580;
        _2807 = ((_3010 * _998) * _3021) + _2582;
    }
    else
    {
        _2797 = _2230;
        _2799 = _2232;
        _2801 = _2234;
        _2803 = _2578;
        _2805 = _2580;
        _2807 = _2582;
    }
    float _4779 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _4790 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _4801 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _2824 = ((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2797 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1011))) + ((_2803 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1849)) * cbPerFrame._m0[3u].x);
    float _2825 = ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2799 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1011))) + ((_2805 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1849)) * cbPerFrame._m0[3u].x);
    float _2826 = ((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2801 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1011))) + ((_2807 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1849)) * cbPerFrame._m0[3u].x);
    uint _2827 = _254 + 6u;
    float _2835 = _933 / cbSceneParam._m0[86u].x;
    float _2836 = _934 / cbSceneParam._m0[86u].y;
    vec4 _2850 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, (log2((isnan(cbSceneParam._m0[77u].w) ? _855 : (isnan(_855) ? cbSceneParam._m0[77u].w : min(_855, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2852 = _2850.x;
    float _2853 = _2850.y;
    float _2854 = _2850.z;
    float _2855 = _2850.w;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_855 > cbSceneParam._m0[78u].w)
    {
        float _2910 = isnan(_855) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _855 : min(cbSceneParam._m0[80u].w, _855));
        float _2911 = _2910 / _855;
        float _2922 = _2911 * _906;
        float _2923 = _907 * _2911;
        float _2924 = (-0.0) - _2923;
        float _2926 = _2911 * _908;
        float _2928 = (cbSceneParam._m0[77u].w * _2924) / _2910;
        float _2929 = _2928 + cbSceneParam._m0[79u].w;
        float _2930 = cbSceneParam._m0[79u].w - _2923;
        float _2936 = sqrt(((_2922 * _2922) + (_2923 * _2923)) + (_2926 * _2926));
        float _2939 = (1.0 - (cbSceneParam._m0[77u].w / _2910)) * _2936;
        float _2944 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2946 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3123;
        if (abs((_2924 - _2928) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3123 = ((((_2929 > 0.0) ? exp2(_2944 * _2929) : (2.0 - exp2(_2946 * _2929))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2939;
        }
        else
        {
            float _3067 = 1.0 / cbSceneParam._m0[80u].x;
            float _3068 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : max(_2929, _2930));
            float _3069 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : min(_2929, _2930));
            float _3078 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : min(_3068, 0.0));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            _3123 = ((abs(_2936 / _2924) * cbSceneParam._m0[80u].y) * ((((_3078 - _3079) * 2.0) - ((exp2(_2944 * (isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0)))) - exp2(_2944 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))))) * _3067)) - ((exp2(_2946 * _3078) - exp2(_2946 * _3079)) * _3067))) + (_2939 * cbSceneParam._m0[80u].z);
        }
        vec4 _3125 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, 1.0), 0.0);
        float _3134 = exp2((_3123 * (-1.44269502162933349609375)) * (1.0 - _3125.w));
        float _3135 = log2(_3134);
        float _3151 = log2(_2855);
        _2948 = (exp2(_3151 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].x)) * _3125.x) / cbSceneParam._m0[78u].x)) + _2852;
        _2950 = (exp2(_3151 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].y)) * _3125.y) / cbSceneParam._m0[78u].y)) + _2853;
        _2952 = (exp2(_3151 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].z)) * _3125.z) / cbSceneParam._m0[78u].z)) + _2854;
        _2954 = _3134 * _2855;
    }
    else
    {
        _2948 = _2852;
        _2950 = _2853;
        _2952 = _2854;
        _2954 = _2855;
    }
    bool _3161;
    vec4 _2964;
    vec4 _2986;
    float _2988;
    float _2992;
    float _2993;
    float _2994;
    float _2995;
    bool _3005;
    for (;;)
    {
        _2964 = cbMatDynParam._m0[0u];
        float _2966 = roundEven(_2964.y);
        bool _2967 = _2966 == 3.0;
        float _2968 = log2(_2954);
        float _2975 = exp2(_2968 * cbSceneParam._m0[78u].x) * _2824;
        float _2976 = exp2(_2968 * cbSceneParam._m0[78u].y) * _2825;
        float _2977 = exp2(_2968 * cbSceneParam._m0[78u].z) * _2826;
        float _2984 = _922 + (-0.5);
        _2986 = cbMtdParam._m0[1u];
        _2988 = _2986.y * _2984;
        float _2991 = (_2966 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2992 = _2991 * (_2967 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2948)));
        _2993 = _2991 * (_2967 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2950)));
        _2994 = _2991 * (_2967 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2952)));
        _2995 = _2984 * 0.999000012874603271484375;
        _3005 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3005)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _2995) < 0.5)
            {
                _3161 = true;
                break;
            }
        }
        uint _3102 = _971 + uint(_2964.w);
        if ((cbInstanceData._m0[_3102].w < 1.0) && ((cbInstanceData._m0[_3102].w + _2995) < 0.5))
        {
            _3161 = true;
            break;
        }
        if ((_2988 + 1.0) < _2986.x)
        {
            _3161 = true;
            break;
        }
        _3161 = false;
        break;
    }
    float _3366;
    if (_3161)
    {
        discard_state = true;
        _3366 = 0.0;
    }
    else
    {
        _3366 = cbInstanceData._m0[_2827].w;
    }
    SV_Target.x = _2992;
    SV_Target.y = _2993;
    SV_Target.z = _2994;
    SV_Target.w = _3366;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2827].w;
    discard_exit();
}


