#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1132;
float _3541;
float _3542;
float _3543;
float _3544;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _371 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _388 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_359 - _371) * cbMtdParam._m0[23u].w) + _371) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3553 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _396 = (_389 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _397 = (_389 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _398 = (_389 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _428 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _430 = _428.x;
    float _431 = _428.y;
    float _432 = _428.z;
    float _441 = ((_411.z - _432) * _389) + _432;
    float _444 = ((((_411.x - _430) * _389) + _430) * 2.0) + (-1.0);
    float _446 = ((((_411.y - _431) * _389) + _431) * 2.0) + (-1.0);
    float _447 = dot(vec2(_444, _446), vec2(_444, _446));
    float _3564 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _452 = sqrt(1.0 - (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))));
    vec4 _468 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _480 = (((_468.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _444;
    float _481 = (((_468.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _446;
    vec4 _493 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _509 = _507.x;
    float _527 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _509) * _389) + _509;
    float _531 = ((_493.x - _527) * cbMtdParam._m0[19u].z) + _527;
    float _535 = (cbMtdParam._m0[19u].w * (_468.z - _441)) + _441;
    float _537 = cbMtdParam._m0[22u].x + _468.w;
    float _540 = fma(_452, _223 * NORMAL.x, fma(_481, _230 * TANGENT.x, (_216 * _208) * _480));
    float _543 = fma(_452, _223 * NORMAL.y, fma(_481, _230 * TANGENT.y, (_216 * _209) * _480));
    float _546 = fma(_452, _223 * NORMAL.z, fma(_481, _230 * TANGENT.z, (_216 * _210) * _480));
    float _550 = inversesqrt(dot(vec3(_540, _543, _546), vec3(_540, _543, _546)));
    float _551 = _550 * _540;
    float _552 = _550 * _543;
    float _553 = _550 * _546;
    float _3575 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _554 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3597 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _3608 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _3619 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _3630 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _559 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _573 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _624 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _614);
    float _625 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _614);
    float _626 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _614);
    float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
    float _631 = _624 * _630;
    float _632 = _625 * _630;
    float _633 = _626 * _630;
    vec4 _638 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _640 = _638.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _812 = sqrt(((_624 * _624) + (_625 * _625)) + (_626 * _626));
        float _818 = (cbMatDynParam._m0[5u].x * _812) + cbMatDynParam._m0[5u].y;
        float _3641 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _823 = (cbMatDynParam._m0[5u].z * _812) + cbMatDynParam._m0[5u].w;
        float _3652 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) - _819)) + _819) < ((_640 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _651 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _652 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _670 = fma(_553, cbSceneParam._m0[5u].z, fma(_552, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _551));
    float _673 = fma(_553, cbSceneParam._m0[6u].z, fma(_552, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _551));
    float _676 = fma(_553, cbSceneParam._m0[7u].z, fma(_552, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _551));
    uint _689 = _236 + 9u;
    uint _690 = _689 + uint(cbMatDynParam._m0[0u].w);
    float _696 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_690].x;
    float _697 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_690].y;
    float _698 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_690].z;
    float _3663 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _699 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _701 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _702 = 1.0 - _559;
    float _703 = _699 * _702;
    float _704 = _700 * _702;
    float _705 = _701 * _702;
    float _710 = (_699 + (-0.039999999105930328369140625)) * _559;
    float _711 = (_700 + (-0.039999999105930328369140625)) * _559;
    float _712 = (_701 + (-0.039999999105930328369140625)) * _559;
    float _713 = _710 + 0.039999999105930328369140625;
    float _715 = _711 + 0.039999999105930328369140625;
    float _716 = _712 + 0.039999999105930328369140625;
    vec4 _725 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _651, cbSceneParam._m0[86u].y * _652));
    float _729 = ((isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * TEXCOORD_5.w) * _725.x;
    float _730 = dot(vec3(_551, _552, _553), vec3(_631, _632, _633));
    float _733 = _730 * 2.0;
    float _737 = (_733 * _551) - _631;
    float _738 = (_733 * _552) - _632;
    float _739 = (_733 * _553) - _633;
    float _743 = abs(dot(vec3(_631, _632, _633), vec3(_551, _552, _553)));
    float _3696 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _745 = sqrt(_554);
    float _758 = exp2((_745 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_745 * 3.0));
    float _764 = (1.0 - _758) * ((_745 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _765 = _758 * _745;
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1131;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _856 = fma(_801, cbModelParam._m0[26u].z, fma(_797, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _793));
        float _860 = fma(_801, cbModelParam._m0[27u].z, fma(_797, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _793));
        float _864 = fma(_801, cbModelParam._m0[28u].z, fma(_797, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _793));
        float _889 = _793 + _551;
        float _890 = _797 + _552;
        float _891 = _801 + _553;
        float _901 = fma(_891, cbModelParam._m0[26u].z, fma(_890, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _889)) - _856;
        float _902 = fma(_891, cbModelParam._m0[27u].z, fma(_890, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _889)) - _860;
        float _903 = fma(_891, cbModelParam._m0[28u].z, fma(_890, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _889)) - _864;
        float _907 = inversesqrt(dot(vec3(_901, _902, _903), vec3(_901, _902, _903)));
        float _920 = ((_907 * _901) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_856 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_907 * _902) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_860 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_907 * _903) / cbModelParam._m0[34u].z) + ((((((_864 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        float _959 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_925.x + (-0.5));
        float _961 = _959 * (_925.y + (-0.5));
        float _962 = _959 * (_925.z + (-0.5));
        float _969 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_932.x + (-0.5));
        float _971 = _969 * (_932.y + (-0.5));
        float _972 = _969 * (_932.z + (-0.5));
        float _979 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_939.x + (-0.5));
        float _981 = _979 * (_939.y + (-0.5));
        float _982 = _979 * (_939.z + (-0.5));
        float _989 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_946.x + (-0.5));
        float _991 = _989 * (_946.y + (-0.5));
        float _992 = _989 * (_946.z + (-0.5));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = _960 * 0.5;
        float _997 = _970 * 0.5;
        float _998 = _980 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1013 = (dot(vec3(_551, _552, _553), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1023 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3744 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1025 + 1.0))) + _1030) * _993;
        float _1040 = _961 * 0.5;
        float _1041 = _971 * 0.5;
        float _1042 = _981 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_551, _552, _553), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3777 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1067 + 1.0))) + _1072) * _994;
        float _1082 = _962 * 0.5;
        float _1083 = _972 * 0.5;
        float _1084 = _982 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_551, _552, _553), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3810 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1109 + 1.0))) + _1114) * _995;
        _1131 = _962;
        _1133 = _961;
        _1134 = _960;
        _1135 = _972;
        _1136 = _971;
        _1137 = _970;
        _1138 = _982;
        _1139 = _981;
        _1140 = _980;
        _1141 = _995;
        _1142 = _994;
        _1143 = _993;
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
    }
    else
    {
        _1131 = _1132;
        _1133 = _1132;
        _1134 = _1132;
        _1135 = _1132;
        _1136 = _1132;
        _1137 = _1132;
        _1138 = _1132;
        _1139 = _1132;
        _1140 = _1132;
        _1141 = _1132;
        _1142 = _1132;
        _1143 = _1132;
        _1144 = 0.0;
        _1145 = 0.0;
        _1146 = 0.0;
    }
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1174 = fma(_801, cbModelParam._m0[30u].z, fma(_797, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _793));
        float _1178 = fma(_801, cbModelParam._m0[31u].z, fma(_797, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _793));
        float _1182 = fma(_801, cbModelParam._m0[32u].z, fma(_797, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _793));
        float _1205 = _793 + _551;
        float _1206 = _797 + _552;
        float _1207 = _801 + _553;
        float _1217 = fma(_1207, cbModelParam._m0[30u].z, fma(_1206, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1205)) - _1174;
        float _1218 = fma(_1207, cbModelParam._m0[31u].z, fma(_1206, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1205)) - _1178;
        float _1219 = fma(_1207, cbModelParam._m0[32u].z, fma(_1206, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1205)) - _1182;
        float _1223 = inversesqrt(dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219)));
        float _1236 = ((_1223 * _1217) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1174 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1223 * _1218) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1178 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1223 * _1219) / cbModelParam._m0[35u].z) + ((((((_1182 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        float _1273 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1240.x + (-0.5));
        float _1275 = _1273 * (_1240.y + (-0.5));
        float _1276 = _1273 * (_1240.z + (-0.5));
        float _1283 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1247.x + (-0.5));
        float _1285 = _1283 * (_1247.y + (-0.5));
        float _1286 = _1283 * (_1247.z + (-0.5));
        float _1293 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1254.x + (-0.5));
        float _1295 = _1293 * (_1254.y + (-0.5));
        float _1296 = _1293 * (_1254.z + (-0.5));
        float _1303 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1261.x + (-0.5));
        float _1305 = _1303 * (_1261.y + (-0.5));
        float _1306 = _1303 * (_1261.z + (-0.5));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = _1274 * 0.5;
        float _1311 = _1284 * 0.5;
        float _1312 = _1294 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_551, _552, _553), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3873 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1337 + 1.0))) + _1342) * _1307;
        float _1352 = _1275 * 0.5;
        float _1353 = _1285 * 0.5;
        float _1354 = _1295 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_551, _552, _553), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3906 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1379 + 1.0))) + _1384) * _1308;
        float _1394 = _1276 * 0.5;
        float _1395 = _1286 * 0.5;
        float _1396 = _1296 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_551, _552, _553), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _3939 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1421 + 1.0))) + _1426) * _1309;
        _1443 = _1276;
        _1444 = _1275;
        _1445 = _1274;
        _1446 = _1286;
        _1447 = _1285;
        _1448 = _1284;
        _1449 = _1296;
        _1450 = _1295;
        _1451 = _1294;
        _1452 = _1309;
        _1453 = _1308;
        _1454 = _1307;
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
    }
    else
    {
        _1443 = _1132;
        _1444 = _1132;
        _1445 = _1132;
        _1446 = _1132;
        _1447 = _1132;
        _1448 = _1132;
        _1449 = _1132;
        _1450 = _1132;
        _1451 = _1132;
        _1452 = _1132;
        _1453 = _1132;
        _1454 = _1132;
        _1455 = 0.0;
        _1456 = 0.0;
        _1457 = 0.0;
    }
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1144)) + _1144;
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1145)) + _1145;
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1146)) + _1146;
    float _1490 = fma(_1469, cbSceneParam._m0[89u].z, fma(_1468, cbSceneParam._m0[89u].y, _1467 * cbSceneParam._m0[89u].x));
    float _1493 = fma(_1469, cbSceneParam._m0[90u].z, fma(_1468, cbSceneParam._m0[90u].y, _1467 * cbSceneParam._m0[90u].x));
    float _1496 = fma(_1469, cbSceneParam._m0[91u].z, fma(_1468, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1467));
    float _1511 = _737 * 0.5;
    float _1512 = _738 * 0.5;
    float _1513 = _739 * 0.5;
    float _1514 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1517 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1520 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1554;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1527 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1131, _1135, _1138, _1141));
        float _1531 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1133, _1136, _1139, _1142));
        float _1535 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1134, _1137, _1140, _1143));
        float _1542 = dot(vec4(cbModelParam._m0[39u]), vec4(_1511, _1512, _1513, 1.0));
        _1554 = dot(vec3(isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1554 = 1.0;
    }
    float _1565;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1556 = dot(vec4(cbModelParam._m0[40u]), vec4(_1511, _1512, _1513, 1.0));
        _1565 = dot(vec3(isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1556) ? 0.0 : (isnan(0.0) ? _1556 : max(0.0, _1556))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1565 = 1.0;
    }
    float _1569 = (_1565 * cbModelParam._m0[1u].x) + (_1554 * (1.0 - cbModelParam._m0[1u].x));
    float _1579 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _554);
    float _1580 = isnan(_1579) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1579 : min(cbModelParam._m0[25u].z, _1579));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1629 = fma(_801, cbModelParam._m0[13u].z, fma(_797, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _793)) + cbModelParam._m0[13u].w;
        float _1633 = fma(_801, cbModelParam._m0[14u].z, fma(_797, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _793)) + cbModelParam._m0[14u].w;
        float _1637 = fma(_801, cbModelParam._m0[15u].z, fma(_797, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _793)) + cbModelParam._m0[15u].w;
        float _1640 = fma(_739, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _737));
        float _1643 = fma(_739, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _737));
        float _1646 = fma(_739, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _737));
        float _1674;
        if (_1640 > 0.0)
        {
            _1674 = abs((1.0 - _1629) / _1640);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1629 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1674 = frontier_phi_17_15_ladder;
        }
        float _1899;
        if (_1643 > 0.0)
        {
            _1899 = abs((1.0 - _1633) / _1643);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1633 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1899 = frontier_phi_26_22_ladder;
        }
        float _2156;
        if (_1646 > 0.0)
        {
            _2156 = abs((1.0 - _1637) / _1646);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1637 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2156 = frontier_phi_38_33_ladder;
        }
        float _2158 = isnan(_1899) ? _1674 : (isnan(_1674) ? _1899 : min(_1674, _1899));
        float _2159 = isnan(_2156) ? _2158 : (isnan(_2158) ? _2156 : min(_2158, _2156));
        float _2163 = (_2159 * _1640) + _1629;
        float _2164 = (_2159 * _1643) + _1633;
        float _2165 = (_2159 * _1646) + _1637;
        float _2166 = _2159 * 9.9999997473787516355514526367188e-05;
        float _2168 = (-1.0) - _2166;
        float _2170 = _2166 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2165 > _2170) || ((_2165 < _2168) || ((_2164 > _2170) || ((_2164 < _2168) || ((_2163 < _2168) || (_2163 > _2170))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2293 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2165, cbModelParam._m0[9u].z, fma(_2164, cbModelParam._m0[9u].y, _2163 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2165, cbModelParam._m0[10u].z, fma(_2164, cbModelParam._m0[10u].y, _2163 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2165, cbModelParam._m0[11u].z, fma(_2164, cbModelParam._m0[11u].y, _2163 * cbModelParam._m0[11u].x))), _1580);
            frontier_phi_16_38_ladder = _2293.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2293.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2293.x * cbModelParam._m0[1u].y;
        }
        _1662 = frontier_phi_16_38_ladder_2;
        _1664 = frontier_phi_16_38_ladder_1;
        _1666 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_737, _738, _739), _1580);
        _1662 = _1650.x * cbModelParam._m0[1u].y;
        _1664 = _1650.y * cbModelParam._m0[1u].y;
        _1666 = _1650.z * cbModelParam._m0[1u].y;
    }
    float _1670 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _554);
    float _1671 = isnan(_1670) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1670 : min(cbModelParam._m0[25u].w, _1670));
    float _1762;
    float _1764;
    float _1766;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1726 = fma(_801, cbModelParam._m0[21u].z, fma(_797, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _793)) + cbModelParam._m0[21u].w;
        float _1730 = fma(_801, cbModelParam._m0[22u].z, fma(_797, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _793)) + cbModelParam._m0[22u].w;
        float _1734 = fma(_801, cbModelParam._m0[23u].z, fma(_797, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _793)) + cbModelParam._m0[23u].w;
        float _1737 = fma(_739, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _737));
        float _1740 = fma(_739, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _737));
        float _1743 = fma(_739, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _737));
        float _1904;
        if (_1737 > 0.0)
        {
            _1904 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1904 = frontier_phi_28_24_ladder;
        }
        float _2183;
        if (_1740 > 0.0)
        {
            _2183 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2183 = frontier_phi_40_35_ladder;
        }
        float _2396;
        if (_1743 > 0.0)
        {
            _2396 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2396 = frontier_phi_49_46_ladder;
        }
        float _2398 = isnan(_2183) ? _1904 : (isnan(_1904) ? _2183 : min(_1904, _2183));
        float _2399 = isnan(_2396) ? _2398 : (isnan(_2398) ? _2396 : min(_2398, _2396));
        float _2403 = (_2399 * _1737) + _1726;
        float _2404 = (_2399 * _1740) + _1730;
        float _2405 = (_2399 * _1743) + _1734;
        float _2406 = _2399 * 9.9999997473787516355514526367188e-05;
        float _2407 = (-1.0) - _2406;
        float _2409 = _2406 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2405 > _2409) || ((_2405 < _2407) || ((_2404 > _2409) || ((_2404 < _2407) || ((_2403 < _2407) || (_2403 > _2409))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2405, cbModelParam._m0[17u].z, fma(_2404, cbModelParam._m0[17u].y, _2403 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2405, cbModelParam._m0[18u].z, fma(_2404, cbModelParam._m0[18u].y, _2403 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2405, cbModelParam._m0[19u].z, fma(_2404, cbModelParam._m0[19u].y, _2403 * cbModelParam._m0[19u].x))), _1671);
            frontier_phi_25_49_ladder = _2604.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2604.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2604.x * cbModelParam._m0[1u].z;
        }
        _1762 = frontier_phi_25_49_ladder_2;
        _1764 = frontier_phi_25_49_ladder_1;
        _1766 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1746 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_737, _738, _739), _1671);
        _1762 = _1746.x * cbModelParam._m0[1u].z;
        _1764 = _1746.y * cbModelParam._m0[1u].z;
        _1766 = _1746.z * cbModelParam._m0[1u].z;
    }
    float _1779 = (((_764 * _713) + _765) * _729) * ((cbModelParam._m0[1u].w * (_1762 - _1662)) + _1662);
    float _1781 = (((_764 * _715) + _765) * _729) * ((cbModelParam._m0[1u].w * (_1764 - _1664)) + _1664);
    float _1783 = (((_764 * _716) + _765) * _729) * ((cbModelParam._m0[1u].w * (_1766 - _1666)) + _1666);
    float _1786 = fma(_1783, cbSceneParam._m0[89u].z, fma(_1781, cbSceneParam._m0[89u].y, _1779 * cbSceneParam._m0[89u].x));
    float _1789 = fma(_1783, cbSceneParam._m0[90u].z, fma(_1781, cbSceneParam._m0[90u].y, _1779 * cbSceneParam._m0[90u].x));
    float _1792 = fma(_1783, cbSceneParam._m0[91u].z, fma(_1781, cbSceneParam._m0[91u].y, _1779 * cbSceneParam._m0[91u].x));
    vec4 _1800 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_651, _652));
    float _1802 = _1800.w;
    float _1814 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1802);
    float _1815 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1802);
    float _1816 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1802);
    uvec4 _1820 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1822 = _1820.x * 14u;
    uint _1823 = _1822 + 13u;
    float _1830 = _729 + (-1.0);
    float _1835 = (cbLight._m0[_1823].x * _1830) + 1.0;
    float _1836 = (cbLight._m0[_1823].y * _1830) + 1.0;
    float _1837 = (cbLight._m0[_1823].z * _1830) + 1.0;
    float _1838 = (cbLight._m0[_1823].w * _1830) + 1.0;
    uint _1839 = _1822 + 5u;
    float _1845 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
    uint _1849 = _1822 + 4u;
    float _1858 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
    uint _1862 = _1822 | 1u;
    float _1873 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_551, _552, _553));
    float _1876 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_551, _552, _553));
    float _4075 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _4086 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1881 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.3183098733425140380859375;
    float _1883 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.3183098733425140380859375;
    float _1890 = ((cbLight._m0[_1839].x * _1845) * _1883) + (((cbLight._m0[_1849].x * _1814) * _1858) * _1881);
    float _1891 = ((_1845 * cbLight._m0[_1839].y) * _1883) + (((cbLight._m0[_1849].y * _1815) * _1858) * _1881);
    float _1892 = ((_1845 * cbLight._m0[_1839].z) * _1883) + (((cbLight._m0[_1849].z * _1816) * _1858) * _1881);
    uvec4 _1896 = floatBitsToUint(cbLight._m0[_1822 + 12u]);
    bool _1898 = _1896.x == 0u;
    float _1909;
    float _1911;
    float _1913;
    if (_1898)
    {
        _1909 = _1890;
        _1911 = _1891;
        _1913 = _1892;
    }
    else
    {
        uint _1917 = _1822 + 6u;
        float _1933 = (dot(vec3(cbLight._m0[_1822 + 2u].xyz), vec3(_551, _552, _553)) * 0.5) + 0.5;
        float _1934 = _1933 * _1933;
        float _4097 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1936 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _1909 = (((cbLight._m0[_1917].x * 0.3183098733425140380859375) * _1935) * _1936) + _1890;
        _1911 = (((cbLight._m0[_1917].y * 0.3183098733425140380859375) * _1935) * _1936) + _1891;
        _1913 = (((cbLight._m0[_1917].z * 0.3183098733425140380859375) * _1935) * _1936) + _1892;
    }
    bool _1916 = _1896.y == 0u;
    float _1954;
    float _1956;
    float _1958;
    if (_1916)
    {
        _1954 = _1909;
        _1956 = _1911;
        _1958 = _1913;
    }
    else
    {
        uint _2127 = _1822 + 7u;
        float _2143 = (dot(vec3(cbLight._m0[_1822 + 3u].xyz), vec3(_551, _552, _553)) * 0.5) + 0.5;
        float _2144 = _2143 * _2143;
        float _4113 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2145 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2146 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _1954 = (((cbLight._m0[_2127].x * 0.3183098733425140380859375) * _2145) * _2146) + _1909;
        _1956 = (((cbLight._m0[_2127].y * 0.3183098733425140380859375) * _2145) * _2146) + _1911;
        _1958 = (((cbLight._m0[_2127].z * 0.3183098733425140380859375) * _2145) * _2146) + _1913;
    }
    uint _1961 = _1822 + 8u;
    float _1974 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1822].w)) * _554) * 0.949999988079071044921875);
    float _1975 = _1974 * _1974;
    float _1976 = cbLight._m0[_1822].x + _631;
    float _1977 = cbLight._m0[_1822].y + _632;
    float _1978 = cbLight._m0[_1822].z + _633;
    float _1982 = inversesqrt(dot(vec3(_1976, _1977, _1978), vec3(_1976, _1977, _1978)));
    float _1983 = _1982 * _1976;
    float _1984 = _1982 * _1977;
    float _1985 = _1982 * _1978;
    float _1986 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1822].xyz));
    float _4129 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _1990 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _1991 = dot(vec3(_551, _552, _553), vec3(_1983, _1984, _1985));
    float _4151 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _1995 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_1983, _1984, _1985));
    float _4162 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1999 = _1975 * _1975;
    float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
    float _2011 = exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0);
    float _2012 = 0.959999978542327880859375 - _710;
    float _2014 = 0.959999978542327880859375 - _711;
    float _2015 = 0.959999978542327880859375 - _712;
    float _2022 = 1.0 - _1975;
    float _2033 = (0.5 / (((_1990 * ((_1989 * _2022) + _1975)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2022) + _1975) * _1989))) * _1989;
    float _4173 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2035 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
    uint _2049 = _1822 + 9u;
    float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1862].w)) * _554) * 0.949999988079071044921875);
    float _2061 = _2060 * _2060;
    float _2062 = cbLight._m0[_1862].x + _631;
    float _2063 = cbLight._m0[_1862].y + _632;
    float _2064 = cbLight._m0[_1862].z + _633;
    float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
    float _2069 = _2068 * _2062;
    float _2070 = _2068 * _2063;
    float _2071 = _2068 * _2064;
    float _2072 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1862].xyz));
    float _4184 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2076 = dot(vec3(_551, _552, _553), vec3(_2069, _2070, _2071));
    float _4195 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_2069, _2070, _2071));
    float _4206 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2061 * _2061;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2095 = exp2(log2(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * 5.0);
    float _2102 = 1.0 - _2061;
    float _2112 = (0.5 / (((_1990 * ((_2075 * _2102) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2102) + _2061) * _2075))) * _2075;
    float _4217 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    float _2124 = (((((_2095 * _2012) + _713) * cbLight._m0[_2049].x) * _2114) * _1845) + ((((cbLight._m0[_1961].x * _1814) * ((_2011 * _2012) + _713)) * _2035) * _1858);
    float _2125 = (((((_2095 * _2014) + _715) * cbLight._m0[_2049].y) * _2114) * _1845) + ((((cbLight._m0[_1961].y * _1815) * ((_2011 * _2014) + _715)) * _2035) * _1858);
    float _2126 = (((((_2095 * _2015) + _716) * cbLight._m0[_2049].z) * _2114) * _1845) + ((((cbLight._m0[_1961].z * _1816) * ((_2011 * _2015) + _716)) * _2035) * _1858);
    float _2188;
    float _2190;
    float _2192;
    if (_1898)
    {
        _2188 = _2124;
        _2190 = _2125;
        _2192 = _2126;
    }
    else
    {
        uint _2194 = _1822 + 2u;
        uint _2198 = _1822 + 10u;
        float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2194].w)) * _554) * 0.949999988079071044921875);
        float _2213 = _2212 * _2212;
        float _2214 = cbLight._m0[_2194].x + _631;
        float _2215 = cbLight._m0[_2194].y + _632;
        float _2216 = cbLight._m0[_2194].z + _633;
        float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
        float _2221 = _2220 * _2214;
        float _2222 = _2220 * _2215;
        float _2223 = _2220 * _2216;
        float _2224 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_2194].xyz));
        float _4228 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2228 = dot(vec3(_551, _552, _553), vec3(_2221, _2222, _2223));
        float _4239 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2232 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_2221, _2222, _2223));
        float _4250 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2236 = _2213 * _2213;
        float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
        float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0);
        float _2254 = 1.0 - _2213;
        float _2264 = (0.5 / (((_1990 * ((_2227 * _2254) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2254) + _2213) * _2227))) * _2227;
        float _4261 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2266 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
        float _2267 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _2188 = (((((_2247 * _2012) + _713) * cbLight._m0[_2198].x) * _2266) * _2267) + _2124;
        _2190 = (((((_2247 * _2014) + _715) * cbLight._m0[_2198].y) * _2266) * _2267) + _2125;
        _2192 = (((((_2247 * _2015) + _716) * cbLight._m0[_2198].z) * _2266) * _2267) + _2126;
    }
    float _2302;
    float _2304;
    float _2306;
    if (_1916)
    {
        _2302 = _2188;
        _2304 = _2190;
        _2306 = _2192;
    }
    else
    {
        uint _2313 = _1822 + 3u;
        uint _2317 = _1822 + 11u;
        float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _554) * 0.949999988079071044921875);
        float _2332 = _2331 * _2331;
        float _2333 = cbLight._m0[_2313].x + _631;
        float _2334 = cbLight._m0[_2313].y + _632;
        float _2335 = cbLight._m0[_2313].z + _633;
        float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
        float _2340 = _2339 * _2333;
        float _2341 = _2339 * _2334;
        float _2342 = _2339 * _2335;
        float _2343 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_2313].xyz));
        float _4277 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2347 = dot(vec3(_551, _552, _553), vec3(_2340, _2341, _2342));
        float _4288 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2351 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2340, _2341, _2342));
        float _4299 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2355 = _2332 * _2332;
        float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
        float _2366 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
        float _2373 = 1.0 - _2332;
        float _2383 = (0.5 / (((_1990 * ((_2346 * _2373) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_1990 * _2373) + _2332) * _2346))) * _2346;
        float _4310 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2385 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
        float _2386 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _2302 = (((((_2366 * _2012) + _713) * cbLight._m0[_2317].x) * _2385) * _2386) + _2188;
        _2304 = (((((_2366 * _2014) + _715) * cbLight._m0[_2317].y) * _2385) * _2386) + _2190;
        _2306 = (((((_2366 * _2015) + _716) * cbLight._m0[_2317].z) * _2385) * _2386) + _2192;
    }
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    if (_1820.y == 0u)
    {
        float _2461 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2462 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2461;
        float _2463 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2461;
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2461;
        uvec4 _2476 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2477 = _2476.x;
        uint _2488 = uint((float(_2476.y) * floor(float(uint(cbSceneParam._m0[85u].y * _652) / _2477))) + floor(float(uint(cbSceneParam._m0[85u].x * _651) / _2477)));
        float _2498 = (log2(_2464 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2499 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        uint _2502 = uint(isnan(14.0) ? _2499 : (isnan(_2499) ? 14.0 : min(_2499, 14.0)));
        uvec4 _2507 = texelFetch(g_lightClusterGridBuffer, int(((_2502 << 2u) + (_2488 << 6u)) >> 2u));
        uint _2508 = _2507.x;
        uint _2509 = _2476.z;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        if (((((1u << ((_2509 >> 4u) & 15u)) + 4294967295u) & _2508) == 0u) || ((_2509 & 240u) == 0u))
        {
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
        }
        else
        {
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            uint _2768 = 0u;
            uint _2777;
            bool _2778;
            for (;;)
            {
                _2777 = texelFetch(g_lightClassification, int((((_2502 << 5u) + (_2488 << 9u)) + (_2768 << 2u)) >> 2u)).x;
                _2778 = _2777 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2778)
                {
                    frontier_phi_66_pred = _2762;
                    frontier_phi_66_pred_1 = _2767;
                    frontier_phi_66_pred_2 = _2766;
                    frontier_phi_66_pred_3 = _2765;
                    frontier_phi_66_pred_4 = _2764;
                    frontier_phi_66_pred_5 = _2763;
                }
                else
                {
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    uint _2913;
                    _2907 = _2762;
                    _2908 = _2763;
                    _2909 = _2764;
                    _2910 = _2765;
                    _2911 = _2766;
                    _2912 = _2767;
                    _2913 = _2777;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    for (;;)
                    {
                        uint _2917 = uint(findLSB(_2913)) + (_2768 << 5u);
                        uint _2914 = (_2913 + 4294967295u) & _2913;
                        uint _2919 = _2917 * 48u;
                        vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 3u)).x));
                        uint _2939 = (_2917 * 48u) + 4u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2958 = (_2917 * 48u) + 8u;
                        vec3 _2969 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x));
                        float _2973 = _2933.x - _2462;
                        float _2974 = _2933.y - _2463;
                        float _2975 = _2933.z - _2464;
                        float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                        float _2979 = inversesqrt(_2976);
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2983 = dot(vec3(_670, _673, _676), vec3(_2980, _2981, _2982));
                        float _2988 = 1.0 - (_2976 * _2933.w);
                        float _4336 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _2990 = sqrt(_2976) * _2952.w;
                        float _2993 = 1.39999997615814208984375 / (_2990 + 1.39999997615814208984375);
                        float _2994 = _2993 * _2993;
                        float _2997 = ((1.0 - _2994) * _2983) + _2994;
                        float _3000 = _2990 * _2990;
                        float _3004 = ((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2989) / ((_3000 * 0.699999988079071044921875) + 1.0);
                        float _3008 = (-0.0) - _2462;
                        float _3009 = (-0.0) - _2463;
                        float _3010 = (-0.0) - _2464;
                        float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                        float _3015 = _3014 * _3008;
                        float _3016 = _3014 * _3009;
                        float _3017 = _3014 * _3010;
                        float _3025 = exp2(log2(1.0 / ((_3000 * 3.5) + 5.0)) * 0.25);
                        float _3026 = 1.0 - _745;
                        float _3033 = sqrt(1.0 - ((1.0 - (_3026 * _3026)) * (1.0 - (_3025 * _3025))));
                        float _3034 = _3033 * _3033;
                        float _3035 = _3034 * _3034;
                        float _3036 = _3015 + _2980;
                        float _3037 = _3016 + _2981;
                        float _3038 = _3017 + _2982;
                        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                        float _3046 = dot(vec3(_670, _673, _676), vec3(_3015, _3016, _3017));
                        float _4352 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3049 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3050 = dot(vec3(_670, _673, _676), vec3(_3042 * _3036, _3042 * _3037, _3042 * _3038));
                        float _4363 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3053 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3057 = ((_3053 * _3053) * (_3035 + (-1.0))) + 1.0;
                        float _3058 = _2993 * _3034;
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _2983) + _3059;
                        float _4374 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3064 = 1.0 - _3034;
                        float _3074 = (0.5 / (((_3063 * ((_3049 * _3064) + _3034)) + 9.9999999392252902907785028219223e-09) + (((_3063 * _3064) + _3034) * _3049))) * _3063;
                        float _4385 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3085 = (((_3035 * 3.1415927410125732421875) * (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) / ((_3057 * _3057) * ((_3000 * 2.1991131305694580078125) + 3.141590118408203125))) * _2989;
                        _2837 = (_3004 * _2952.x) + _2910;
                        _2838 = (_3004 * _2952.y) + _2911;
                        _2839 = (_3004 * _2952.z) + _2912;
                        _2834 = (_3085 * _2969.x) + _2907;
                        _2835 = (_3085 * _2969.y) + _2908;
                        _2836 = (_3085 * _2969.z) + _2909;
                        if (_2914 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2907 = _2834;
                            _2908 = _2835;
                            _2909 = _2836;
                            _2910 = _2837;
                            _2911 = _2838;
                            _2912 = _2839;
                            _2913 = _2914;
                        }
                    }
                    frontier_phi_66_pred = _2834;
                    frontier_phi_66_pred_1 = _2839;
                    frontier_phi_66_pred_2 = _2838;
                    frontier_phi_66_pred_3 = _2837;
                    frontier_phi_66_pred_4 = _2836;
                    frontier_phi_66_pred_5 = _2835;
                }
                _2610 = frontier_phi_66_pred;
                _2620 = frontier_phi_66_pred_1;
                _2618 = frontier_phi_66_pred_2;
                _2616 = frontier_phi_66_pred_3;
                _2614 = frontier_phi_66_pred_4;
                _2612 = frontier_phi_66_pred_5;
                uint _2769 = _2768 + 1u;
                if (_2769 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2762 = _2610;
                    _2763 = _2612;
                    _2764 = _2614;
                    _2765 = _2616;
                    _2766 = _2618;
                    _2767 = _2620;
                    _2768 = _2769;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
        }
        uvec4 _2623 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2624 = _2623.z;
        uint _2626 = (_2624 >> 8u) & 15u;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        if (((4294967295u << _2626) & _2508) == 0u)
        {
            _2730 = _2609;
            _2732 = _2611;
            _2734 = _2613;
            _2736 = _2615;
            _2738 = _2617;
            _2740 = _2619;
        }
        else
        {
            float _2755 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
            float _2756 = _2755 * _2462;
            float _2757 = _2755 * _2463;
            float _2758 = _2755 * _2464;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2626 < ((_2624 >> 12u) & 15u))
            {
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2890 = _2609;
                float _2891 = _2611;
                float _2892 = _2613;
                float _2893 = _2615;
                float _2894 = _2617;
                float _2895 = _2619;
                uint _2896 = _2626;
                uint _2905;
                bool _2906;
                for (;;)
                {
                    _2905 = texelFetch(g_lightClassification, int((((_2502 << 5u) + (_2488 << 9u)) + (_2896 << 2u)) >> 2u)).x;
                    _2906 = _2905 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2906)
                    {
                        frontier_phi_77_pred = _2895;
                        frontier_phi_77_pred_1 = _2894;
                        frontier_phi_77_pred_2 = _2893;
                        frontier_phi_77_pred_3 = _2892;
                        frontier_phi_77_pred_4 = _2891;
                        frontier_phi_77_pred_5 = _2890;
                    }
                    else
                    {
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3112 = _2890;
                        float _3113 = _2891;
                        float _3114 = _2892;
                        float _3115 = _2893;
                        float _3116 = _2894;
                        float _3117 = _2895;
                        uint _3118 = _2905;
                        uint _3119;
                        vec4 _3144;
                        float _3145;
                        vec4 _3160;
                        vec3 _3172;
                        vec4 _3187;
                        vec4 _3203;
                        float _3250;
                        bool _3251;
                        for (;;)
                        {
                            uint _3129 = ((_2896 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3118));
                            _3119 = (_3118 + 4294967295u) & _3118;
                            uint _3131 = _3129 * 40u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            _3145 = _3144.w;
                            uint _3147 = (_3129 * 40u) + 4u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3162 = (_3129 * 40u) + 8u;
                            _3172 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x));
                            uint _3174 = (_3129 * 40u) + 16u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3190 = (_3129 * 40u) + 20u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3206 = (_3129 * 40u) + 24u;
                            vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3225 = (_3129 * 40u) + 28u;
                            vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            _3250 = fma(_2464, _3238.z, fma(_2463, _3238.y, _3238.x * _2462)) + _3238.w;
                            _3251 = !((fma(_2464, _3219.z, fma(_2463, _3219.y, _3219.x * _2462)) + _3219.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3251)
                            {
                                float _3278 = _3144.x - _2462;
                                float _3279 = _3144.y - _2463;
                                float _3280 = _3144.z - _2464;
                                float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                                float _3284 = inversesqrt(_3281);
                                float _3285 = _3284 * _3278;
                                float _3286 = _3284 * _3279;
                                float _3287 = _3284 * _3280;
                                float _3291 = 1.0 - (_3281 / (_3145 * _3145));
                                float _4396 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3296 = sqrt(_3281) * _3160.w;
                                float _3298 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                                float _3299 = _3298 * _3298;
                                float _3302 = ((1.0 - _3299) * dot(vec3(_3285, _3286, _3287), vec3(_670, _673, _676))) + _3299;
                                float _3305 = _3296 * _3296;
                                float _3309 = (fma(_2464, _3187.z, fma(_2463, _3187.y, _3187.x * _2462)) + _3187.w) / _3250;
                                float _3310 = (fma(_2464, _3203.z, fma(_2463, _3203.y, _3203.x * _2462)) + _3203.w) / _3250;
                                float _3314 = 1.0 - dot(vec2(_3309, _3310), vec2(_3309, _3310));
                                float _4412 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3316 = _3315 * (((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3292) / ((_3305 * 0.699999988079071044921875) + 1.0));
                                float _3328 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                                float _3329 = 1.0 - _745;
                                float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                                float _3337 = _3336 * _3336;
                                float _3338 = _3337 * _3337;
                                float _3339 = _3285 - _2756;
                                float _3340 = _3286 - _2757;
                                float _3341 = _3287 - _2758;
                                float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                                float _3349 = dot(vec3(_670, _673, _676), vec3((-0.0) - _2756, (-0.0) - _2757, (-0.0) - _2758));
                                float _4423 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3353 = dot(vec3(_670, _673, _676), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                                float _4434 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3356 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                                float _3361 = _3298 * _3337;
                                float _3362 = _3361 * _3361;
                                float _3368 = ((1.0 - _3362) * dot(vec3(_670, _673, _676), vec3(_3285, _3286, _3287))) + _3362;
                                float _4445 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3370 = 1.0 - _3337;
                                float _3380 = (0.5 / (((_3369 * ((_3352 * _3370) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3369 * _3370) + _3337) * _3352))) * _3369;
                                float _4456 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3390 = (_3315 * _3292) * (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) / ((_3360 * _3360) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3316 * _3160.y;
                                frontier_phi_83_pred_1 = _3316 * _3160.x;
                                frontier_phi_83_pred_2 = _3390 * _3172.z;
                                frontier_phi_83_pred_3 = _3390 * _3172.y;
                                frontier_phi_83_pred_4 = _3390 * _3172.x;
                                frontier_phi_83_pred_5 = _3316 * _3160.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3398 = frontier_phi_83_pred;
                            _3397 = frontier_phi_83_pred_1;
                            _3396 = frontier_phi_83_pred_2;
                            _3395 = frontier_phi_83_pred_3;
                            _3394 = frontier_phi_83_pred_4;
                            _3399 = frontier_phi_83_pred_5;
                            _3102 = _3397 + _3115;
                            _3103 = _3398 + _3116;
                            _3104 = _3399 + _3117;
                            _3099 = _3394 + _3112;
                            _3100 = _3395 + _3113;
                            _3101 = _3396 + _3114;
                            if (_3119 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3119;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3104;
                        frontier_phi_77_pred_1 = _3103;
                        frontier_phi_77_pred_2 = _3102;
                        frontier_phi_77_pred_3 = _3101;
                        frontier_phi_77_pred_4 = _3100;
                        frontier_phi_77_pred_5 = _3099;
                    }
                    _2741 = frontier_phi_77_pred;
                    _2739 = frontier_phi_77_pred_1;
                    _2737 = frontier_phi_77_pred_2;
                    _2735 = frontier_phi_77_pred_3;
                    _2733 = frontier_phi_77_pred_4;
                    _2731 = frontier_phi_77_pred_5;
                    uint _2897 = _2896 + 1u;
                    if (_2897 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2890 = _2731;
                        _2891 = _2733;
                        _2892 = _2735;
                        _2893 = _2737;
                        _2894 = _2739;
                        _2895 = _2741;
                        _2896 = _2897;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2735;
                frontier_phi_58_59_ladder_1 = _2741;
                frontier_phi_58_59_ladder_2 = _2739;
                frontier_phi_58_59_ladder_3 = _2737;
                frontier_phi_58_59_ladder_4 = _2733;
                frontier_phi_58_59_ladder_5 = _2731;
            }
            else
            {
                frontier_phi_58_59_ladder = _2613;
                frontier_phi_58_59_ladder_1 = _2619;
                frontier_phi_58_59_ladder_2 = _2617;
                frontier_phi_58_59_ladder_3 = _2615;
                frontier_phi_58_59_ladder_4 = _2611;
                frontier_phi_58_59_ladder_5 = _2609;
            }
            _2730 = frontier_phi_58_59_ladder_5;
            _2732 = frontier_phi_58_59_ladder_4;
            _2734 = frontier_phi_58_59_ladder;
            _2736 = frontier_phi_58_59_ladder_3;
            _2738 = frontier_phi_58_59_ladder_2;
            _2740 = frontier_phi_58_59_ladder_1;
        }
        float _2745 = isnan(1.0) ? _729 : (isnan(_729) ? 1.0 : min(_729, 1.0));
        _2521 = (_2745 * _2736) + _1954;
        _2523 = (_2745 * _2738) + _1956;
        _2525 = (_2745 * _2740) + _1958;
        _2527 = ((_2730 * _713) * _2745) + _2302;
        _2529 = ((_2732 * _715) * _2745) + _2304;
        _2531 = ((_2734 * _716) * _2745) + _2306;
    }
    else
    {
        _2521 = _1954;
        _2523 = _1956;
        _2525 = _1958;
        _2527 = _2302;
        _2529 = _2304;
        _2531 = _2306;
    }
    float _4472 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _4483 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4494 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _2548 = ((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2521 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _729))) + ((_2527 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1569)) * cbPerFrame._m0[3u].x);
    float _2549 = ((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2523 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _729))) + ((_2529 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1569)) * cbPerFrame._m0[3u].x);
    float _2550 = ((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2525 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _729))) + ((_2531 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1569)) * cbPerFrame._m0[3u].x);
    uint _2551 = _236 + 6u;
    float _2559 = _651 / cbSceneParam._m0[86u].x;
    float _2560 = _652 / cbSceneParam._m0[86u].y;
    vec4 _2574 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2559, _2560, (log2((isnan(cbSceneParam._m0[77u].w) ? _573 : (isnan(_573) ? cbSceneParam._m0[77u].w : min(_573, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2576 = _2574.x;
    float _2577 = _2574.y;
    float _2578 = _2574.z;
    float _2579 = _2574.w;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    if (_573 > cbSceneParam._m0[78u].w)
    {
        float _2634 = isnan(_573) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _573 : min(cbSceneParam._m0[80u].w, _573));
        float _2635 = _2634 / _573;
        float _2646 = _2635 * _624;
        float _2647 = _625 * _2635;
        float _2648 = (-0.0) - _2647;
        float _2650 = _2635 * _626;
        float _2652 = (cbSceneParam._m0[77u].w * _2648) / _2634;
        float _2653 = _2652 + cbSceneParam._m0[79u].w;
        float _2654 = cbSceneParam._m0[79u].w - _2647;
        float _2660 = sqrt(((_2646 * _2646) + (_2647 * _2647)) + (_2650 * _2650));
        float _2663 = (1.0 - (cbSceneParam._m0[77u].w / _2634)) * _2660;
        float _2668 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2670 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2847;
        if (abs((_2648 - _2652) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2847 = ((((_2653 > 0.0) ? exp2(_2668 * _2653) : (2.0 - exp2(_2670 * _2653))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2663;
        }
        else
        {
            float _2791 = 1.0 / cbSceneParam._m0[80u].x;
            float _2792 = isnan(_2654) ? _2653 : (isnan(_2653) ? _2654 : max(_2653, _2654));
            float _2793 = isnan(_2654) ? _2653 : (isnan(_2653) ? _2654 : min(_2653, _2654));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            float _2803 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : min(_2793, 0.0));
            _2847 = ((abs(_2660 / _2648) * cbSceneParam._m0[80u].y) * ((((_2802 - _2803) * 2.0) - ((exp2(_2668 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0)))) - exp2(_2668 * (isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0))))) * _2791)) - ((exp2(_2670 * _2802) - exp2(_2670 * _2803)) * _2791))) + (_2663 * cbSceneParam._m0[80u].z);
        }
        vec4 _2849 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2559, _2560, 1.0), 0.0);
        float _2858 = exp2((_2847 * (-1.44269502162933349609375)) * (1.0 - _2849.w));
        float _2859 = log2(_2858);
        float _2875 = log2(_2579);
        _2672 = (exp2(_2875 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].x)) * _2849.x) / cbSceneParam._m0[78u].x)) + _2576;
        _2674 = (exp2(_2875 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].y)) * _2849.y) / cbSceneParam._m0[78u].y)) + _2577;
        _2676 = (exp2(_2875 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].z)) * _2849.z) / cbSceneParam._m0[78u].z)) + _2578;
        _2678 = _2858 * _2579;
    }
    else
    {
        _2672 = _2576;
        _2674 = _2577;
        _2676 = _2578;
        _2678 = _2579;
    }
    bool _2885;
    vec4 _2688;
    vec4 _2710;
    float _2712;
    float _2716;
    float _2717;
    float _2718;
    float _2719;
    bool _2729;
    for (;;)
    {
        _2688 = cbMatDynParam._m0[0u];
        float _2690 = roundEven(_2688.y);
        bool _2691 = _2690 == 3.0;
        float _2692 = log2(_2678);
        float _2699 = exp2(_2692 * cbSceneParam._m0[78u].x) * _2548;
        float _2700 = exp2(_2692 * cbSceneParam._m0[78u].y) * _2549;
        float _2701 = exp2(_2692 * cbSceneParam._m0[78u].z) * _2550;
        float _2708 = _640 + (-0.5);
        _2710 = cbMtdParam._m0[1u];
        _2712 = _2710.y * _2708;
        float _2715 = (_2690 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2716 = _2715 * (_2691 ? _2699 : (_2699 + (cbSceneParam._m0[72u].w * _2672)));
        _2717 = _2715 * (_2691 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2674)));
        _2718 = _2715 * (_2691 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2676)));
        _2719 = _2708 * 0.999000012874603271484375;
        _2729 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2729)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2719) < 0.5)
            {
                _2885 = true;
                break;
            }
        }
        uint _2826 = _689 + uint(_2688.w);
        if ((cbInstanceData._m0[_2826].w < 1.0) && ((cbInstanceData._m0[_2826].w + _2719) < 0.5))
        {
            _2885 = true;
            break;
        }
        if ((_2712 + 1.0) < _2710.x)
        {
            _2885 = true;
            break;
        }
        _2885 = false;
        break;
    }
    float _3090;
    if (_2885)
    {
        discard_state = true;
        _3090 = 0.0;
    }
    else
    {
        _3090 = cbInstanceData._m0[_2551].w;
    }
    SV_Target.x = _2716;
    SV_Target.y = _2717;
    SV_Target.z = _2718;
    SV_Target.w = _3090;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2551].w;
    discard_exit();
}


