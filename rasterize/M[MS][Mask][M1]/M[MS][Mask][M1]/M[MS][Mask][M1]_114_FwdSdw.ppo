#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1564;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4171 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4182 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4193 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    uint _290 = uint(roundEven(NORMAL.w)) * 13u;
    uint _295 = _290 + 1u;
    uint _299 = _290 + 2u;
    float _308 = sqrt(((cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x)) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x));
    float _309 = _308 * TEXCOORD.z;
    float _310 = _308 * TEXCOORD.w;
    vec4 _323 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _309) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _310) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _377 = _372.x * cbMtdParam._m0[11u].x;
    float _378 = _372.y * cbMtdParam._m0[11u].y;
    float _379 = _372.z * cbMtdParam._m0[11u].z;
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _309) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _310) + cbTextureTilingScale._m0[5u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _466 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _483 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _417.x) * 2.0) - ((((_454 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4204 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _491 = (_484 * ((_398.x * cbMtdParam._m0[12u].x) - _377)) + _377;
    float _492 = (_484 * ((_398.y * cbMtdParam._m0[12u].y) - _378)) + _378;
    float _493 = (_484 * ((_398.z * cbMtdParam._m0[12u].z) - _379)) + _379;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _309) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _310) + cbTextureTilingScale._m0[3u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _532 = _530.x;
    float _542 = dot(vec4(_532, _530.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _556 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _417.y) * 2.0) - ((((_532 - _542) * cbMtdParam._m0[23u].w) + _542) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4215 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _564 = (_557 * ((_510.x * cbMtdParam._m0[13u].x) - _491)) + _491;
    float _565 = (_557 * ((_510.y * cbMtdParam._m0[13u].y) - _492)) + _492;
    float _566 = (_557 * ((_510.z * cbMtdParam._m0[13u].z) - _493)) + _493;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _309) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _310) + cbTextureTilingScale._m0[24u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _604 = _602.x;
    float _614 = dot(vec4(_604, _602.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _626 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _417.z) * 2.0) - ((((_604 - _614) * cbMtdParam._m0[23u].w) + _614) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4226 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _637 = (_346.x * cbMtdParam._m0[9u].x) * ((_627 * ((_585.x * cbMtdParam._m0[14u].x) - _564)) + _564);
    float _638 = (_346.y * cbMtdParam._m0[9u].y) * ((_627 * ((_585.y * cbMtdParam._m0[14u].y) - _565)) + _565);
    float _639 = (_346.z * cbMtdParam._m0[9u].z) * ((_627 * ((_585.z * cbMtdParam._m0[14u].z) - _566)) + _566);
    float _643 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _323.x) * _637;
    float _646 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _323.y) * _638;
    float _649 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _323.z) * _639;
    float _657 = (((_637 - _643) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) + _643) * 4.55000019073486328125;
    float _659 = (((_638 - _646) * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) + _646) * 4.55000019073486328125;
    float _661 = (((_639 - _649) * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) + _649) * 4.55000019073486328125;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _309) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _310) + cbTextureTilingScale._m0[20u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _309) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _310) + cbTextureTilingScale._m0[4u].w));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _720 = _718.x;
    float _721 = _718.y;
    float _722 = _718.z;
    float _729 = ((_701.x - _720) * _484) + _720;
    float _730 = ((_701.y - _721) * _484) + _721;
    float _731 = ((_701.z - _722) * _484) + _722;
    vec4 _743 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _309) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _310) + cbTextureTilingScale._m0[2u].w));
    float _754 = ((_743.x - _729) * _557) + _729;
    float _755 = ((_743.y - _730) * _557) + _730;
    float _756 = ((_743.z - _731) * _557) + _731;
    vec4 _768 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _309) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _310) + cbTextureTilingScale._m0[23u].w));
    float _781 = ((_768.z - _756) * _627) + _756;
    float _784 = ((((_768.x - _754) * _627) + _754) * 2.0) + (-1.0);
    float _785 = ((((_768.y - _755) * _627) + _755) * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _4237 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))));
    vec4 _805 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _830 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _309) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _310) + cbTextureTilingScale._m0[11u].w));
    float _832 = _830.x;
    float _833 = 1.0 - _832;
    float _848 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_832 - _833) * cbMtdParam._m0[24u].z) + _833) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4248 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _849 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _856 = (_849 * (cbMtdParam._m0[17u].x - _657)) + _657;
    float _857 = (_849 * (cbMtdParam._m0[17u].y - _659)) + _659;
    float _858 = (_849 * (cbMtdParam._m0[17u].z - _661)) + _661;
    vec4 _884 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _886 = _884.x;
    float _903 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _309) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _310) + cbTextureTilingScale._m0[9u].w)).x - _886) * _484) + _886;
    float _920 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _309) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _310) + cbTextureTilingScale._m0[21u].w)).x - _903) * _557) + _903;
    float _938 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _309) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _310) + cbTextureTilingScale._m0[10u].w)).x - _920) * _627) + _920;
    float _942 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _938) * cbMtdParam._m0[19u].z) + _938;
    float _944 = _942 - (_942 * _849);
    float _949 = (((_678.z - _781) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _781;
    float _953 = ((_805.z - _949) * cbMtdParam._m0[19u].w) + _949;
    vec4 _966 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _309) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _310) + cbTextureTilingScale._m0[15u].w));
    float _973 = (_966.x * 2.0) + (-1.0);
    float _974 = (_966.y * 2.0) + (-1.0);
    float _975 = dot(vec2(_973, _974), vec2(_973, _974));
    float _4259 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _983 = (_849 * (_966.z - _953)) + _953;
    float _992 = (_784 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_678.x * 2.0) + (-1.0)))) + (((_805.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _993 = (_785 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_678.y * 2.0) + (-1.0)))) + (((_805.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1005 = (((_973 - _992) + (cbMtdParam._m0[21u].x * _992)) * _849) + _992;
    float _1006 = (((_974 - _993) + (cbMtdParam._m0[21u].x * _993)) * _849) + _993;
    float _1007 = (_849 * (sqrt(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) - _791)) + _791;
    float _1011 = cbMtdParam._m0[22u].x + _805.w;
    float _1014 = fma(_1007, _256 * NORMAL.x, fma(_1006, _263 * TANGENT.x, (_249 * _241) * _1005));
    float _1017 = fma(_1007, _256 * NORMAL.y, fma(_1006, _263 * TANGENT.y, (_249 * _242) * _1005));
    float _1020 = fma(_1007, _256 * NORMAL.z, fma(_1006, _263 * TANGENT.z, (_249 * _243) * _1005));
    float _1024 = inversesqrt(dot(vec3(_1014, _1017, _1020), vec3(_1014, _1017, _1020)));
    float _1025 = _1024 * _1014;
    float _1026 = _1024 * _1017;
    float _1027 = _1024 * _1020;
    float _4270 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _1028 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _4281 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4292 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4303 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4314 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4325 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _1033 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _1047 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1097 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1087);
    float _1098 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1087);
    float _1099 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1087);
    float _1103 = inversesqrt(dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099)));
    float _1104 = _1097 * _1103;
    float _1105 = _1098 * _1103;
    float _1106 = _1099 * _1103;
    float _1112 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1113 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1131 = fma(_1027, cbSceneParam._m0[5u].z, fma(_1026, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1025));
    float _1134 = fma(_1027, cbSceneParam._m0[6u].z, fma(_1026, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1025));
    float _1137 = fma(_1027, cbSceneParam._m0[7u].z, fma(_1026, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1025));
    uint _1151 = (_290 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1157 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * cbInstanceData._m0[_1151].x;
    float _1158 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * cbInstanceData._m0[_1151].y;
    float _1159 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * cbInstanceData._m0[_1151].z;
    float _4336 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _1160 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _4347 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _1161 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _4358 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _1163 = 1.0 - _1033;
    float _1164 = _1160 * _1163;
    float _1165 = _1161 * _1163;
    float _1166 = _1162 * _1163;
    float _1171 = (_1160 + (-0.039999999105930328369140625)) * _1033;
    float _1172 = (_1161 + (-0.039999999105930328369140625)) * _1033;
    float _1173 = (_1162 + (-0.039999999105930328369140625)) * _1033;
    float _1174 = _1171 + 0.039999999105930328369140625;
    float _1176 = _1172 + 0.039999999105930328369140625;
    float _1177 = _1173 + 0.039999999105930328369140625;
    vec4 _1186 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1112, cbSceneParam._m0[86u].y * _1113));
    float _1190 = ((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * TEXCOORD_5.w) * _1186.x;
    float _1191 = dot(vec3(_1025, _1026, _1027), vec3(_1104, _1105, _1106));
    float _1194 = _1191 * 2.0;
    float _1198 = (_1194 * _1025) - _1104;
    float _1199 = (_1194 * _1026) - _1105;
    float _1200 = (_1194 * _1027) - _1106;
    float _1204 = abs(dot(vec3(_1104, _1105, _1106), vec3(_1025, _1026, _1027)));
    float _4369 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _1206 = sqrt(_1028);
    float _1219 = exp2((_1206 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1206 * 3.0));
    float _1225 = (1.0 - _1219) * ((_1206 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1226 = _1219 * _1206;
    float _1254 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1258 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1262 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1563;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1288 = fma(_1262, cbModelParam._m0[26u].z, fma(_1258, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1254));
        float _1292 = fma(_1262, cbModelParam._m0[27u].z, fma(_1258, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1254));
        float _1296 = fma(_1262, cbModelParam._m0[28u].z, fma(_1258, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1254));
        float _1321 = _1254 + _1025;
        float _1322 = _1258 + _1026;
        float _1323 = _1262 + _1027;
        float _1333 = fma(_1323, cbModelParam._m0[26u].z, fma(_1322, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1321)) - _1288;
        float _1334 = fma(_1323, cbModelParam._m0[27u].z, fma(_1322, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1321)) - _1292;
        float _1335 = fma(_1323, cbModelParam._m0[28u].z, fma(_1322, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1321)) - _1296;
        float _1339 = inversesqrt(dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335)));
        float _1352 = ((_1339 * _1333) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1288 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1339 * _1334) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1292 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1354 = ((_1339 * _1335) / cbModelParam._m0[34u].z) + ((((((_1296 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        float _1391 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1357.x + (-0.5));
        float _1393 = _1391 * (_1357.y + (-0.5));
        float _1394 = _1391 * (_1357.z + (-0.5));
        float _1401 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1364.x + (-0.5));
        float _1403 = _1401 * (_1364.y + (-0.5));
        float _1404 = _1401 * (_1364.z + (-0.5));
        float _1411 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1371.x + (-0.5));
        float _1413 = _1411 * (_1371.y + (-0.5));
        float _1414 = _1411 * (_1371.z + (-0.5));
        float _1421 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1378.x + (-0.5));
        float _1423 = _1421 * (_1378.y + (-0.5));
        float _1424 = _1421 * (_1378.z + (-0.5));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = _1392 * 0.5;
        float _1429 = _1402 * 0.5;
        float _1430 = _1412 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1445 = (dot(vec3(_1025, _1026, _1027), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1455 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4417 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1457 + 1.0))) + _1462) * _1425;
        float _1472 = _1393 * 0.5;
        float _1473 = _1403 * 0.5;
        float _1474 = _1413 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_1025, _1026, _1027), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4428 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4439 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4450 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_1499 + 1.0))) + _1504) * _1426;
        float _1514 = _1394 * 0.5;
        float _1515 = _1404 * 0.5;
        float _1516 = _1414 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_1025, _1026, _1027), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4483 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1541 + 1.0))) + _1546) * _1427;
        _1563 = _1394;
        _1565 = _1393;
        _1566 = _1392;
        _1567 = _1404;
        _1568 = _1403;
        _1569 = _1402;
        _1570 = _1414;
        _1571 = _1413;
        _1572 = _1412;
        _1573 = _1427;
        _1574 = _1426;
        _1575 = _1425;
        _1576 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1577 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1578 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
    }
    else
    {
        _1563 = _1564;
        _1565 = _1564;
        _1566 = _1564;
        _1567 = _1564;
        _1568 = _1564;
        _1569 = _1564;
        _1570 = _1564;
        _1571 = _1564;
        _1572 = _1564;
        _1573 = _1564;
        _1574 = _1564;
        _1575 = _1564;
        _1576 = 0.0;
        _1577 = 0.0;
        _1578 = 0.0;
    }
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1601 = fma(_1262, cbModelParam._m0[30u].z, fma(_1258, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1254));
        float _1605 = fma(_1262, cbModelParam._m0[31u].z, fma(_1258, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1254));
        float _1609 = fma(_1262, cbModelParam._m0[32u].z, fma(_1258, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1254));
        float _1632 = _1254 + _1025;
        float _1633 = _1258 + _1026;
        float _1634 = _1262 + _1027;
        float _1644 = fma(_1634, cbModelParam._m0[30u].z, fma(_1633, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1632)) - _1601;
        float _1645 = fma(_1634, cbModelParam._m0[31u].z, fma(_1633, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1632)) - _1605;
        float _1646 = fma(_1634, cbModelParam._m0[32u].z, fma(_1633, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1632)) - _1609;
        float _1650 = inversesqrt(dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646)));
        float _1663 = ((_1650 * _1644) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1601 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1664 = ((_1650 * _1645) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1605 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1665 = ((_1650 * _1646) / cbModelParam._m0[35u].z) + ((((((_1609 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1667 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1663, _1664, _1665), 0.0);
        vec4 _1674 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1663, _1664, _1665), 0.0);
        vec4 _1681 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1663, _1664, _1665), 0.0);
        vec4 _1688 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1663, _1664, _1665), 0.0);
        float _1700 = exp2((_1667.w + (-0.5)) * 20.0) * 2.0;
        float _1701 = _1700 * (_1667.x + (-0.5));
        float _1702 = _1700 * (_1667.y + (-0.5));
        float _1703 = _1700 * (_1667.z + (-0.5));
        float _1710 = exp2((_1674.w + (-0.5)) * 20.0) * 2.0;
        float _1711 = _1710 * (_1674.x + (-0.5));
        float _1712 = _1710 * (_1674.y + (-0.5));
        float _1713 = _1710 * (_1674.z + (-0.5));
        float _1720 = exp2((_1681.w + (-0.5)) * 20.0) * 2.0;
        float _1721 = _1720 * (_1681.x + (-0.5));
        float _1722 = _1720 * (_1681.y + (-0.5));
        float _1723 = _1720 * (_1681.z + (-0.5));
        float _1730 = exp2((_1688.w + (-0.5)) * 20.0) * 2.0;
        float _1731 = _1730 * (_1688.x + (-0.5));
        float _1732 = _1730 * (_1688.y + (-0.5));
        float _1733 = _1730 * (_1688.z + (-0.5));
        float _1734 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1735 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1736 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1737 = _1701 * 0.5;
        float _1738 = _1711 * 0.5;
        float _1739 = _1721 * 0.5;
        float _1740 = dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739));
        float _1745 = (_1740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1740);
        float _1753 = (dot(vec3(_1025, _1026, _1027), vec3(_1745 * _1737, _1745 * _1738, _1745 * _1739)) + 1.0) * 0.5;
        float _4524 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1762 = sqrt(((_1738 * _1738) + (_1737 * _1737)) + (_1739 * _1739)) / (_1734 + 9.9999997473787516355514526367188e-06);
        float _4535 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _1764 = _1763 * 2.0;
        float _1768 = (1.0 - _1763) / (_1763 + 1.0);
        float _4546 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _1778 = ((((1.0 - _1769) * (_1764 + 2.0)) * exp2(log2(isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_1764 + 1.0))) + _1769) * _1734;
        float _1779 = _1702 * 0.5;
        float _1780 = _1712 * 0.5;
        float _1781 = _1722 * 0.5;
        float _1782 = dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781));
        float _1787 = (_1782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1782);
        float _1795 = (dot(vec3(_1025, _1026, _1027), vec3(_1787 * _1779, _1787 * _1780, _1787 * _1781)) + 1.0) * 0.5;
        float _4557 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1804 = sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781)) / (_1735 + 9.9999997473787516355514526367188e-06);
        float _4568 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _1806 = _1805 * 2.0;
        float _1810 = (1.0 - _1805) / (_1805 + 1.0);
        float _4579 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1820 = ((((1.0 - _1811) * (_1806 + 2.0)) * exp2(log2(isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_1806 + 1.0))) + _1811) * _1735;
        float _1821 = _1703 * 0.5;
        float _1822 = _1713 * 0.5;
        float _1823 = _1723 * 0.5;
        float _1824 = dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823));
        float _1829 = (_1824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1824);
        float _1837 = (dot(vec3(_1025, _1026, _1027), vec3(_1829 * _1821, _1829 * _1822, _1829 * _1823)) + 1.0) * 0.5;
        float _4590 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1846 = sqrt(((_1822 * _1822) + (_1821 * _1821)) + (_1823 * _1823)) / (_1736 + 9.9999997473787516355514526367188e-06);
        float _4601 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _1848 = _1847 * 2.0;
        float _1852 = (1.0 - _1847) / (_1847 + 1.0);
        float _4612 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1862 = ((((1.0 - _1853) * (_1848 + 2.0)) * exp2(log2(isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_1848 + 1.0))) + _1853) * _1736;
        _1870 = _1703;
        _1871 = _1702;
        _1872 = _1701;
        _1873 = _1713;
        _1874 = _1712;
        _1875 = _1711;
        _1876 = _1723;
        _1877 = _1722;
        _1878 = _1721;
        _1879 = _1736;
        _1880 = _1735;
        _1881 = _1734;
        _1882 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)));
        _1883 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)));
        _1884 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)));
    }
    else
    {
        _1870 = _1564;
        _1871 = _1564;
        _1872 = _1564;
        _1873 = _1564;
        _1874 = _1564;
        _1875 = _1564;
        _1876 = _1564;
        _1877 = _1564;
        _1878 = _1564;
        _1879 = _1564;
        _1880 = _1564;
        _1881 = _1564;
        _1882 = 0.0;
        _1883 = 0.0;
        _1884 = 0.0;
    }
    float _1894 = (cbModelParam._m0[1u].x * (_1882 - _1576)) + _1576;
    float _1895 = (cbModelParam._m0[1u].x * (_1883 - _1577)) + _1577;
    float _1896 = (cbModelParam._m0[1u].x * (_1884 - _1578)) + _1578;
    float _1917 = fma(_1896, cbSceneParam._m0[89u].z, fma(_1895, cbSceneParam._m0[89u].y, _1894 * cbSceneParam._m0[89u].x));
    float _1920 = fma(_1896, cbSceneParam._m0[90u].z, fma(_1895, cbSceneParam._m0[90u].y, _1894 * cbSceneParam._m0[90u].x));
    float _1923 = fma(_1896, cbSceneParam._m0[91u].z, fma(_1895, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1894));
    float _1938 = _1198 * 0.5;
    float _1939 = _1199 * 0.5;
    float _1940 = _1200 * 0.5;
    float _1941 = dot(vec4(_1938, _1939, _1940, 1.0), vec4(_1872, _1875, _1878, _1881));
    float _1944 = dot(vec4(_1938, _1939, _1940, 1.0), vec4(_1871, _1874, _1877, _1880));
    float _1947 = dot(vec4(_1938, _1939, _1940, 1.0), vec4(_1870, _1873, _1876, _1879));
    float _1981;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1954 = dot(vec4(_1938, _1939, _1940, 1.0), vec4(_1563, _1567, _1570, _1573));
        float _1958 = dot(vec4(_1938, _1939, _1940, 1.0), vec4(_1565, _1568, _1571, _1574));
        float _1962 = dot(vec4(_1938, _1939, _1940, 1.0), vec4(_1566, _1569, _1572, _1575));
        float _1969 = dot(vec4(cbModelParam._m0[39u]), vec4(_1938, _1939, _1940, 1.0));
        _1981 = dot(vec3(isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0)), isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)), isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1969) ? 0.0 : (isnan(0.0) ? _1969 : max(0.0, _1969))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1981 = 1.0;
    }
    float _1992;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1983 = dot(vec4(cbModelParam._m0[40u]), vec4(_1938, _1939, _1940, 1.0));
        _1992 = dot(vec3(isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0)), isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0)), isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1983) ? 0.0 : (isnan(0.0) ? _1983 : max(0.0, _1983))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1992 = 1.0;
    }
    float _1996 = (_1992 * cbModelParam._m0[1u].x) + (_1981 * (1.0 - cbModelParam._m0[1u].x));
    float _2006 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1028);
    float _2007 = isnan(_2006) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2006 : min(cbModelParam._m0[25u].z, _2006));
    float _2087;
    float _2089;
    float _2091;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2054 = fma(_1262, cbModelParam._m0[13u].z, fma(_1258, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1254)) + cbModelParam._m0[13u].w;
        float _2058 = fma(_1262, cbModelParam._m0[14u].z, fma(_1258, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1254)) + cbModelParam._m0[14u].w;
        float _2062 = fma(_1262, cbModelParam._m0[15u].z, fma(_1258, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1254)) + cbModelParam._m0[15u].w;
        float _2065 = fma(_1200, cbModelParam._m0[13u].z, fma(_1199, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1198));
        float _2068 = fma(_1200, cbModelParam._m0[14u].z, fma(_1199, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1198));
        float _2071 = fma(_1200, cbModelParam._m0[15u].z, fma(_1199, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1198));
        float _2099;
        if (_2065 > 0.0)
        {
            _2099 = abs((1.0 - _2054) / _2065);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2054 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2099 = frontier_phi_14_12_ladder;
        }
        float _2271;
        if (_2068 > 0.0)
        {
            _2271 = abs((1.0 - _2058) / _2068);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2058 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2271 = frontier_phi_23_19_ladder;
        }
        float _2566;
        if (_2071 > 0.0)
        {
            _2566 = abs((1.0 - _2062) / _2071);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2062 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2566 = frontier_phi_35_30_ladder;
        }
        float _2568 = isnan(_2271) ? _2099 : (isnan(_2099) ? _2271 : min(_2099, _2271));
        float _2569 = isnan(_2566) ? _2568 : (isnan(_2568) ? _2566 : min(_2568, _2566));
        float _2573 = (_2569 * _2065) + _2054;
        float _2574 = (_2569 * _2068) + _2058;
        float _2575 = (_2569 * _2071) + _2062;
        float _2576 = _2569 * 9.9999997473787516355514526367188e-05;
        float _2578 = (-1.0) - _2576;
        float _2580 = _2576 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2575 > _2580) || ((_2575 < _2578) || ((_2574 > _2580) || ((_2574 < _2578) || ((_2573 < _2578) || (_2573 > _2580))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2575, cbModelParam._m0[9u].z, fma(_2574, cbModelParam._m0[9u].y, _2573 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2575, cbModelParam._m0[10u].z, fma(_2574, cbModelParam._m0[10u].y, _2573 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2575, cbModelParam._m0[11u].z, fma(_2574, cbModelParam._m0[11u].y, _2573 * cbModelParam._m0[11u].x))), _2007);
            frontier_phi_13_35_ladder = _2720.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2720.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2720.x * cbModelParam._m0[1u].y;
        }
        _2087 = frontier_phi_13_35_ladder_2;
        _2089 = frontier_phi_13_35_ladder_1;
        _2091 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2075 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1198, _1199, _1200), _2007);
        _2087 = _2075.x * cbModelParam._m0[1u].y;
        _2089 = _2075.y * cbModelParam._m0[1u].y;
        _2091 = _2075.z * cbModelParam._m0[1u].y;
    }
    float _2095 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1028);
    float _2096 = isnan(_2095) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2095 : min(cbModelParam._m0[25u].w, _2095));
    float _2186;
    float _2188;
    float _2190;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2150 = fma(_1262, cbModelParam._m0[21u].z, fma(_1258, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1254)) + cbModelParam._m0[21u].w;
        float _2154 = fma(_1262, cbModelParam._m0[22u].z, fma(_1258, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1254)) + cbModelParam._m0[22u].w;
        float _2158 = fma(_1262, cbModelParam._m0[23u].z, fma(_1258, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1254)) + cbModelParam._m0[23u].w;
        float _2161 = fma(_1200, cbModelParam._m0[21u].z, fma(_1199, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1198));
        float _2164 = fma(_1200, cbModelParam._m0[22u].z, fma(_1199, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1198));
        float _2167 = fma(_1200, cbModelParam._m0[23u].z, fma(_1199, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1198));
        float _2276;
        if (_2161 > 0.0)
        {
            _2276 = abs((1.0 - _2150) / _2161);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2161 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2150 + 1.0) / _2161);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2276 = frontier_phi_25_21_ladder;
        }
        float _2593;
        if (_2164 > 0.0)
        {
            _2593 = abs((1.0 - _2154) / _2164);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2164 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2154 + 1.0) / _2164);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2593 = frontier_phi_37_32_ladder;
        }
        float _2931;
        if (_2167 > 0.0)
        {
            _2931 = abs((1.0 - _2158) / _2167);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2167 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2158 + 1.0) / _2167);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2931 = frontier_phi_47_44_ladder;
        }
        float _2933 = isnan(_2593) ? _2276 : (isnan(_2276) ? _2593 : min(_2276, _2593));
        float _2934 = isnan(_2931) ? _2933 : (isnan(_2933) ? _2931 : min(_2933, _2931));
        float _2938 = (_2934 * _2161) + _2150;
        float _2939 = (_2934 * _2164) + _2154;
        float _2940 = (_2934 * _2167) + _2158;
        float _2941 = _2934 * 9.9999997473787516355514526367188e-05;
        float _2942 = (-1.0) - _2941;
        float _2944 = _2941 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2940 > _2944) || ((_2940 < _2942) || ((_2939 > _2944) || ((_2939 < _2942) || ((_2938 < _2942) || (_2938 > _2944))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3062 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2940, cbModelParam._m0[17u].z, fma(_2939, cbModelParam._m0[17u].y, _2938 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2940, cbModelParam._m0[18u].z, fma(_2939, cbModelParam._m0[18u].y, _2938 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2940, cbModelParam._m0[19u].z, fma(_2939, cbModelParam._m0[19u].y, _2938 * cbModelParam._m0[19u].x))), _2096);
            frontier_phi_22_47_ladder = _3062.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3062.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3062.x * cbModelParam._m0[1u].z;
        }
        _2186 = frontier_phi_22_47_ladder_2;
        _2188 = frontier_phi_22_47_ladder_1;
        _2190 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2170 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1198, _1199, _1200), _2096);
        _2186 = _2170.x * cbModelParam._m0[1u].z;
        _2188 = _2170.y * cbModelParam._m0[1u].z;
        _2190 = _2170.z * cbModelParam._m0[1u].z;
    }
    float _2203 = (((_1225 * _1174) + _1226) * _1190) * ((cbModelParam._m0[1u].w * (_2186 - _2087)) + _2087);
    float _2205 = (((_1225 * _1176) + _1226) * _1190) * ((cbModelParam._m0[1u].w * (_2188 - _2089)) + _2089);
    float _2207 = (((_1225 * _1177) + _1226) * _1190) * ((cbModelParam._m0[1u].w * (_2190 - _2091)) + _2091);
    float _2210 = fma(_2207, cbSceneParam._m0[89u].z, fma(_2205, cbSceneParam._m0[89u].y, _2203 * cbSceneParam._m0[89u].x));
    float _2213 = fma(_2207, cbSceneParam._m0[90u].z, fma(_2205, cbSceneParam._m0[90u].y, _2203 * cbSceneParam._m0[90u].x));
    float _2216 = fma(_2207, cbSceneParam._m0[91u].z, fma(_2205, cbSceneParam._m0[91u].y, _2203 * cbSceneParam._m0[91u].x));
    float _2250 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2254 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2258 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2262 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2263 = _2250 / _2262;
    float _2264 = _2254 / _2262;
    float _2265 = _2258 / _2262;
    float _2412;
    float _2413;
    float _2414;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2292 = ((uint(_2265 > cbSceneParam._m0[59u].y) + uint(_2265 > cbSceneParam._m0[59u].x)) + uint(_2265 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2293 = _2292 + 43u;
        uint _2301 = _2292 + 44u;
        uint _2309 = _2292 + 45u;
        uint _2317 = _2292 + 46u;
        float _2328 = fma(_2262, cbSceneParam._m0[_2293].w, fma(_2258, cbSceneParam._m0[_2293].z, fma(_2254, cbSceneParam._m0[_2293].y, _2250 * cbSceneParam._m0[_2293].x)));
        float _2332 = fma(_2262, cbSceneParam._m0[_2301].w, fma(_2258, cbSceneParam._m0[_2301].z, fma(_2254, cbSceneParam._m0[_2301].y, _2250 * cbSceneParam._m0[_2301].x)));
        float _2340 = fma(_2262, cbSceneParam._m0[_2317].w, fma(_2258, cbSceneParam._m0[_2317].z, fma(_2254, cbSceneParam._m0[_2317].y, _2250 * cbSceneParam._m0[_2317].x)));
        float _2345 = cbSceneParam._m0[33u].z * _2340;
        float _2347 = cbSceneParam._m0[33u].w * _2340;
        float _2350 = fma(_2262, cbSceneParam._m0[_2309].w, fma(_2258, cbSceneParam._m0[_2309].z, fma(_2254, cbSceneParam._m0[_2309].y, _2250 * cbSceneParam._m0[_2309].x))) / _2340;
        float _2398 = (cbSceneParam._m0[33u].x - sqrt(((_2264 * _2264) + (_2263 * _2263)) + (_2265 * _2265))) * cbSceneParam._m0[33u].y;
        float _4738 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2405 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2345 + _2328) / _2340, (_2347 + _2332) / _2340), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2347 + _2328) / _2340, (_2332 - _2345) / _2340), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2328 - _2345) / _2340, (_2332 - _2347) / _2340), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2328 - _2347) / _2340, (_2345 + _2332) / _2340), _2350), 0.0)).x), vec4(0.25)));
        _2412 = 1.0 - (_2405 * cbSceneParam._m0[34u].x);
        _2413 = 1.0 - (_2405 * cbSceneParam._m0[34u].y);
        _2414 = 1.0 - (_2405 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2412 = 1.0;
        _2413 = 1.0;
        _2414 = 1.0;
    }
    float _2478;
    float _2480;
    float _2482;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2466 = fma(_2262, cbSceneParam._m0[63u].w, fma(_2258, cbSceneParam._m0[63u].z, fma(_2254, cbSceneParam._m0[63u].y, _2250 * cbSceneParam._m0[63u].x)));
        float _2467 = fma(_2262, cbSceneParam._m0[60u].w, fma(_2258, cbSceneParam._m0[60u].z, fma(_2254, cbSceneParam._m0[60u].y, _2250 * cbSceneParam._m0[60u].x))) / _2466;
        float _2468 = fma(_2262, cbSceneParam._m0[61u].w, fma(_2258, cbSceneParam._m0[61u].z, fma(_2254, cbSceneParam._m0[61u].y, _2250 * cbSceneParam._m0[61u].x))) / _2466;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2467 >= cbSceneParam._m0[64u].x) && (_2468 >= cbSceneParam._m0[64u].y)) && (_2467 <= cbSceneParam._m0[64u].z)) && (_2468 <= cbSceneParam._m0[64u].w))
        {
            float _2606 = fma(_2262, cbSceneParam._m0[62u].w, fma(_2258, cbSceneParam._m0[62u].z, fma(_2254, cbSceneParam._m0[62u].y, _2250 * cbSceneParam._m0[62u].x))) / _2466;
            float _2610 = isnan(cbSceneParam._m0[41u].w) ? _2606 : (isnan(_2606) ? cbSceneParam._m0[41u].w : max(_2606, cbSceneParam._m0[41u].w));
            float _2653 = (cbSceneParam._m0[33u].x - sqrt(((_2264 * _2264) + (_2263 * _2263)) + (_2265 * _2265))) * cbSceneParam._m0[33u].y;
            float _4754 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
            float _2660 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2467, cbSceneParam._m0[33u].w + _2468), _2610), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2467, _2468 - cbSceneParam._m0[33u].z), _2610), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2467 - cbSceneParam._m0[33u].z, _2468 - cbSceneParam._m0[33u].w), _2610), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2467 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2468), _2610), 0.0)).x), vec4(0.25)));
            float _2664 = 1.0 - (_2660 * cbSceneParam._m0[34u].x);
            float _2665 = 1.0 - (_2660 * cbSceneParam._m0[34u].y);
            float _2666 = 1.0 - (_2660 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2666) ? _2414 : (isnan(_2414) ? _2666 : min(_2414, _2666));
            frontier_phi_34_33_ladder_1 = isnan(_2665) ? _2413 : (isnan(_2413) ? _2665 : min(_2413, _2665));
            frontier_phi_34_33_ladder_2 = isnan(_2664) ? _2412 : (isnan(_2412) ? _2664 : min(_2412, _2664));
        }
        else
        {
            frontier_phi_34_33_ladder = _2414;
            frontier_phi_34_33_ladder_1 = _2413;
            frontier_phi_34_33_ladder_2 = _2412;
        }
        _2478 = frontier_phi_34_33_ladder_2;
        _2480 = frontier_phi_34_33_ladder_1;
        _2482 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2478 = _2412;
        _2480 = _2413;
        _2482 = _2414;
    }
    uvec4 _2487 = floatBitsToUint(cbInstanceData._m0[_290 + 5u]);
    uint _2489 = _2487.x * 14u;
    uint _2490 = _2489 + 13u;
    float _2497 = _1190 + (-1.0);
    float _2502 = (cbLight._m0[_2490].x * _2497) + 1.0;
    float _2503 = (cbLight._m0[_2490].y * _2497) + 1.0;
    float _2504 = (cbLight._m0[_2490].z * _2497) + 1.0;
    float _2505 = (cbLight._m0[_2490].w * _2497) + 1.0;
    uint _2506 = _2489 + 5u;
    float _2512 = isnan(1.0) ? _2503 : (isnan(_2503) ? 1.0 : min(_2503, 1.0));
    uint _2516 = _2489 + 4u;
    float _2525 = isnan(1.0) ? _2502 : (isnan(_2502) ? 1.0 : min(_2502, 1.0));
    uint _2529 = _2489 | 1u;
    float _2540 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_1025, _1026, _1027));
    float _2543 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_1025, _1026, _1027));
    float _4790 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _4801 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2548 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * 0.3183098733425140380859375;
    float _2550 = (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * 0.3183098733425140380859375;
    float _2557 = ((cbLight._m0[_2506].x * _2512) * _2550) + (((cbLight._m0[_2516].x * _2478) * _2525) * _2548);
    float _2558 = ((_2512 * cbLight._m0[_2506].y) * _2550) + (((cbLight._m0[_2516].y * _2480) * _2525) * _2548);
    float _2559 = ((_2512 * cbLight._m0[_2506].z) * _2550) + (((cbLight._m0[_2516].z * _2482) * _2525) * _2548);
    uvec4 _2563 = floatBitsToUint(cbLight._m0[_2489 + 12u]);
    bool _2565 = _2563.x == 0u;
    float _2667;
    float _2669;
    float _2671;
    if (_2565)
    {
        _2667 = _2557;
        _2669 = _2558;
        _2671 = _2559;
    }
    else
    {
        uint _2675 = _2489 + 6u;
        float _2691 = (dot(vec3(cbLight._m0[_2489 + 2u].xyz), vec3(_1025, _1026, _1027)) * 0.5) + 0.5;
        float _2692 = _2691 * _2691;
        float _4812 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2693 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2694 = isnan(1.0) ? _2504 : (isnan(_2504) ? 1.0 : min(_2504, 1.0));
        _2667 = (((cbLight._m0[_2675].x * 0.3183098733425140380859375) * _2693) * _2694) + _2557;
        _2669 = (((cbLight._m0[_2675].y * 0.3183098733425140380859375) * _2693) * _2694) + _2558;
        _2671 = (((cbLight._m0[_2675].z * 0.3183098733425140380859375) * _2693) * _2694) + _2559;
    }
    bool _2674 = _2563.y == 0u;
    float _2729;
    float _2731;
    float _2733;
    if (_2674)
    {
        _2729 = _2667;
        _2731 = _2669;
        _2733 = _2671;
    }
    else
    {
        uint _2902 = _2489 + 7u;
        float _2918 = (dot(vec3(cbLight._m0[_2489 + 3u].xyz), vec3(_1025, _1026, _1027)) * 0.5) + 0.5;
        float _2919 = _2918 * _2918;
        float _4828 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2920 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2921 = isnan(1.0) ? _2505 : (isnan(_2505) ? 1.0 : min(_2505, 1.0));
        _2729 = (((cbLight._m0[_2902].x * 0.3183098733425140380859375) * _2920) * _2921) + _2667;
        _2731 = (((cbLight._m0[_2902].y * 0.3183098733425140380859375) * _2920) * _2921) + _2669;
        _2733 = (((cbLight._m0[_2902].z * 0.3183098733425140380859375) * _2920) * _2921) + _2671;
    }
    uint _2736 = _2489 + 8u;
    float _2749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _1028) * 0.949999988079071044921875);
    float _2750 = _2749 * _2749;
    float _2751 = cbLight._m0[_2489].x + _1104;
    float _2752 = cbLight._m0[_2489].y + _1105;
    float _2753 = cbLight._m0[_2489].z + _1106;
    float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
    float _2758 = _2757 * _2751;
    float _2759 = _2757 * _2752;
    float _2760 = _2757 * _2753;
    float _2761 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_2489].xyz));
    float _4844 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2764 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
    float _4855 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _2765 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
    float _2766 = dot(vec3(_1025, _1026, _1027), vec3(_2758, _2759, _2760));
    float _4866 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2769 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
    float _2770 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2758, _2759, _2760));
    float _4877 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2774 = _2750 * _2750;
    float _2778 = ((_2769 * _2769) * (_2774 + (-1.0))) + 1.0;
    float _2786 = exp2(log2(1.0 - (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) * 5.0);
    float _2787 = 0.959999978542327880859375 - _1171;
    float _2789 = 0.959999978542327880859375 - _1172;
    float _2790 = 0.959999978542327880859375 - _1173;
    float _2797 = 1.0 - _2750;
    float _2808 = (0.5 / (((_2765 * ((_2764 * _2797) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _2797) + _2750) * _2764))) * _2764;
    float _4888 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2810 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2774 / ((_2778 * _2778) * 3.141590118408203125));
    uint _2824 = _2489 + 9u;
    float _2835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2529].w)) * _1028) * 0.949999988079071044921875);
    float _2836 = _2835 * _2835;
    float _2837 = cbLight._m0[_2529].x + _1104;
    float _2838 = cbLight._m0[_2529].y + _1105;
    float _2839 = cbLight._m0[_2529].z + _1106;
    float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
    float _2844 = _2843 * _2837;
    float _2845 = _2843 * _2838;
    float _2846 = _2843 * _2839;
    float _2847 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_2529].xyz));
    float _4899 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
    float _2850 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
    float _2851 = dot(vec3(_1025, _1026, _1027), vec3(_2844, _2845, _2846));
    float _4910 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2854 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
    float _2855 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_2844, _2845, _2846));
    float _4921 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
    float _2859 = _2836 * _2836;
    float _2863 = ((_2854 * _2854) * (_2859 + (-1.0))) + 1.0;
    float _2870 = exp2(log2(1.0 - (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) * 5.0);
    float _2877 = 1.0 - _2836;
    float _2887 = (0.5 / (((_2765 * ((_2850 * _2877) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _2877) + _2836) * _2850))) * _2850;
    float _4932 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
    float _2889 = (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2859 / ((_2863 * _2863) * 3.141590118408203125));
    float _2899 = (((((_2870 * _2787) + _1174) * cbLight._m0[_2824].x) * _2889) * _2512) + ((((cbLight._m0[_2736].x * _2478) * ((_2786 * _2787) + _1174)) * _2810) * _2525);
    float _2900 = (((((_2870 * _2789) + _1176) * cbLight._m0[_2824].y) * _2889) * _2512) + ((((cbLight._m0[_2736].y * _2480) * ((_2786 * _2789) + _1176)) * _2810) * _2525);
    float _2901 = (((((_2870 * _2790) + _1177) * cbLight._m0[_2824].z) * _2889) * _2512) + ((((cbLight._m0[_2736].z * _2482) * ((_2786 * _2790) + _1177)) * _2810) * _2525);
    float _2957;
    float _2959;
    float _2961;
    if (_2565)
    {
        _2957 = _2899;
        _2959 = _2900;
        _2961 = _2901;
    }
    else
    {
        uint _2963 = _2489 + 2u;
        uint _2967 = _2489 + 10u;
        float _2981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2963].w)) * _1028) * 0.949999988079071044921875);
        float _2982 = _2981 * _2981;
        float _2983 = cbLight._m0[_2963].x + _1104;
        float _2984 = cbLight._m0[_2963].y + _1105;
        float _2985 = cbLight._m0[_2963].z + _1106;
        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
        float _2990 = _2989 * _2983;
        float _2991 = _2989 * _2984;
        float _2992 = _2989 * _2985;
        float _2993 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_2963].xyz));
        float _4943 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2996 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
        float _2997 = dot(vec3(_1025, _1026, _1027), vec3(_2990, _2991, _2992));
        float _4954 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _3000 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
        float _3001 = dot(vec3(cbLight._m0[_2963].xyz), vec3(_2990, _2991, _2992));
        float _4965 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        float _3005 = _2982 * _2982;
        float _3009 = ((_3000 * _3000) * (_3005 + (-1.0))) + 1.0;
        float _3016 = exp2(log2(1.0 - (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0)))) * 5.0);
        float _3023 = 1.0 - _2982;
        float _3033 = (0.5 / (((_2765 * ((_2996 * _3023) + _2982)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _3023) + _2982) * _2996))) * _2996;
        float _4976 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3035 = (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_3005 / ((_3009 * _3009) * 3.141590118408203125));
        float _3036 = isnan(1.0) ? _2504 : (isnan(_2504) ? 1.0 : min(_2504, 1.0));
        _2957 = (((((_3016 * _2787) + _1174) * cbLight._m0[_2967].x) * _3035) * _3036) + _2899;
        _2959 = (((((_3016 * _2789) + _1176) * cbLight._m0[_2967].y) * _3035) * _3036) + _2900;
        _2961 = (((((_3016 * _2790) + _1177) * cbLight._m0[_2967].z) * _3035) * _3036) + _2901;
    }
    float _3067;
    float _3069;
    float _3071;
    if (_2674)
    {
        _3067 = _2957;
        _3069 = _2959;
        _3071 = _2961;
    }
    else
    {
        uint _3078 = _2489 + 3u;
        uint _3082 = _2489 + 11u;
        float _3096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3078].w)) * _1028) * 0.949999988079071044921875);
        float _3097 = _3096 * _3096;
        float _3098 = cbLight._m0[_3078].x + _1104;
        float _3099 = cbLight._m0[_3078].y + _1105;
        float _3100 = cbLight._m0[_3078].z + _1106;
        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
        float _3105 = _3104 * _3098;
        float _3106 = _3104 * _3099;
        float _3107 = _3104 * _3100;
        float _3108 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_3078].xyz));
        float _4992 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
        float _3111 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
        float _3112 = dot(vec3(_1025, _1026, _1027), vec3(_3105, _3106, _3107));
        float _5003 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
        float _3115 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
        float _3116 = dot(vec3(cbLight._m0[_3078].xyz), vec3(_3105, _3106, _3107));
        float _5014 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
        float _3120 = _3097 * _3097;
        float _3124 = ((_3115 * _3115) * (_3120 + (-1.0))) + 1.0;
        float _3131 = exp2(log2(1.0 - (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0)))) * 5.0);
        float _3138 = 1.0 - _3097;
        float _3148 = (0.5 / (((_2765 * ((_3111 * _3138) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _3138) + _3097) * _3111))) * _3111;
        float _5025 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
        float _3150 = (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_3120 / ((_3124 * _3124) * 3.141590118408203125));
        float _3151 = isnan(1.0) ? _2505 : (isnan(_2505) ? 1.0 : min(_2505, 1.0));
        _3067 = (((((_3131 * _2787) + _1174) * cbLight._m0[_3082].x) * _3150) * _3151) + _2957;
        _3069 = (((((_3131 * _2789) + _1176) * cbLight._m0[_3082].y) * _3150) * _3151) + _2959;
        _3071 = (((((_3131 * _2790) + _1177) * cbLight._m0[_3082].z) * _3150) * _3151) + _2961;
    }
    float _3217;
    float _3219;
    float _3221;
    float _3223;
    float _3225;
    float _3227;
    if (_2487.y == 0u)
    {
        uvec4 _3172 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3173 = _3172.x;
        uint _3184 = uint((float(_3172.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1113) / _3173))) + floor(float(uint(cbSceneParam._m0[85u].x * _1112) / _3173)));
        float _3194 = (log2(_2265 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3195 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
        uint _3198 = uint(isnan(14.0) ? _3195 : (isnan(_3195) ? 14.0 : min(_3195, 14.0)));
        uvec4 _3203 = texelFetch(g_lightClusterGridBuffer, int(((_3198 << 2u) + (_3184 << 6u)) >> 2u));
        uint _3204 = _3203.x;
        uint _3205 = _3172.z;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        if (((((1u << ((_3205 >> 4u) & 15u)) + 4294967295u) & _3204) == 0u) || ((_3205 & 240u) == 0u))
        {
            _3284 = 0.0;
            _3286 = 0.0;
            _3288 = 0.0;
            _3290 = 0.0;
            _3292 = 0.0;
            _3294 = 0.0;
        }
        else
        {
            float _3285;
            float _3287;
            float _3289;
            float _3291;
            float _3293;
            float _3295;
            float _3429 = 0.0;
            float _3430 = 0.0;
            float _3431 = 0.0;
            float _3432 = 0.0;
            float _3433 = 0.0;
            float _3434 = 0.0;
            uint _3435 = 0u;
            uint _3444;
            bool _3445;
            for (;;)
            {
                _3444 = texelFetch(g_lightClassification, int((((_3198 << 5u) + (_3184 << 9u)) + (_3435 << 2u)) >> 2u)).x;
                _3445 = _3444 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3445)
                {
                    frontier_phi_66_pred = _3434;
                    frontier_phi_66_pred_1 = _3433;
                    frontier_phi_66_pred_2 = _3432;
                    frontier_phi_66_pred_3 = _3431;
                    frontier_phi_66_pred_4 = _3430;
                    frontier_phi_66_pred_5 = _3429;
                }
                else
                {
                    float _3553;
                    float _3554;
                    float _3555;
                    float _3556;
                    float _3557;
                    float _3558;
                    uint _3559;
                    _3553 = _3429;
                    _3554 = _3430;
                    _3555 = _3431;
                    _3556 = _3432;
                    _3557 = _3433;
                    _3558 = _3434;
                    _3559 = _3444;
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    float _3490;
                    for (;;)
                    {
                        uint _3563 = uint(findLSB(_3559)) + (_3435 << 5u);
                        uint _3560 = (_3559 + 4294967295u) & _3559;
                        uint _3565 = _3563 * 48u;
                        vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3565)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 3u)).x));
                        uint _3585 = (_3563 * 48u) + 4u;
                        vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3585)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 3u)).x));
                        uint _3604 = (_3563 * 48u) + 8u;
                        vec3 _3615 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3604)).x, texelFetch(g_PointLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3604 + 2u)).x));
                        float _3619 = _3579.x - _2263;
                        float _3620 = _3579.y - _2264;
                        float _3621 = _3579.z - _2265;
                        float _3622 = dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621));
                        float _3625 = inversesqrt(_3622);
                        float _3626 = _3625 * _3619;
                        float _3627 = _3625 * _3620;
                        float _3628 = _3625 * _3621;
                        float _3629 = dot(vec3(_1131, _1134, _1137), vec3(_3626, _3627, _3628));
                        float _3634 = 1.0 - (_3622 * _3579.w);
                        float _5051 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                        float _3635 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                        float _3636 = sqrt(_3622) * _3598.w;
                        float _3639 = 1.39999997615814208984375 / (_3636 + 1.39999997615814208984375);
                        float _3640 = _3639 * _3639;
                        float _3643 = ((1.0 - _3640) * _3629) + _3640;
                        float _3646 = _3636 * _3636;
                        float _3650 = ((isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0))) * _3635) / ((_3646 * 0.699999988079071044921875) + 1.0);
                        float _3654 = (-0.0) - _2263;
                        float _3655 = (-0.0) - _2264;
                        float _3656 = (-0.0) - _2265;
                        float _3660 = inversesqrt(dot(vec3(_3654, _3655, _3656), vec3(_3654, _3655, _3656)));
                        float _3661 = _3660 * _3654;
                        float _3662 = _3660 * _3655;
                        float _3663 = _3660 * _3656;
                        float _3670 = exp2(log2(1.0 / ((_3646 * 3.5) + 5.0)) * 0.25);
                        float _3671 = 1.0 - _1206;
                        float _3678 = sqrt(1.0 - ((1.0 - (_3671 * _3671)) * (1.0 - (_3670 * _3670))));
                        float _3679 = _3678 * _3678;
                        float _3680 = _3679 * _3679;
                        float _3681 = _3661 + _3626;
                        float _3682 = _3662 + _3627;
                        float _3683 = _3663 + _3628;
                        float _3687 = inversesqrt(dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683)));
                        float _3691 = dot(vec3(_1131, _1134, _1137), vec3(_3661, _3662, _3663));
                        float _5067 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                        float _3694 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                        float _3695 = dot(vec3(_1131, _1134, _1137), vec3(_3687 * _3681, _3687 * _3682, _3687 * _3683));
                        float _5078 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                        float _3698 = isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0));
                        float _3702 = ((_3698 * _3698) * (_3680 + (-1.0))) + 1.0;
                        float _3703 = _3639 * _3679;
                        float _3704 = _3703 * _3703;
                        float _3707 = ((1.0 - _3704) * _3629) + _3704;
                        float _5089 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                        float _3708 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
                        float _3709 = 1.0 - _3679;
                        float _3719 = (0.5 / (((_3708 * ((_3694 * _3709) + _3679)) + 9.9999999392252902907785028219223e-09) + (((_3708 * _3709) + _3679) * _3694))) * _3708;
                        float _5100 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                        float _3730 = (((_3680 * 3.1415927410125732421875) * (isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0)))) / ((_3702 * _3702) * ((_3646 * 2.1991131305694580078125) + 3.141590118408203125))) * _3635;
                        _3488 = (_3650 * _3598.x) + _3556;
                        _3489 = (_3650 * _3598.y) + _3557;
                        _3490 = (_3650 * _3598.z) + _3558;
                        _3485 = (_3730 * _3615.x) + _3553;
                        _3486 = (_3730 * _3615.y) + _3554;
                        _3487 = (_3730 * _3615.z) + _3555;
                        if (_3560 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3553 = _3485;
                            _3554 = _3486;
                            _3555 = _3487;
                            _3556 = _3488;
                            _3557 = _3489;
                            _3558 = _3490;
                            _3559 = _3560;
                        }
                    }
                    frontier_phi_66_pred = _3490;
                    frontier_phi_66_pred_1 = _3489;
                    frontier_phi_66_pred_2 = _3488;
                    frontier_phi_66_pred_3 = _3487;
                    frontier_phi_66_pred_4 = _3486;
                    frontier_phi_66_pred_5 = _3485;
                }
                _3295 = frontier_phi_66_pred;
                _3293 = frontier_phi_66_pred_1;
                _3291 = frontier_phi_66_pred_2;
                _3289 = frontier_phi_66_pred_3;
                _3287 = frontier_phi_66_pred_4;
                _3285 = frontier_phi_66_pred_5;
                uint _3436 = _3435 + 1u;
                if (_3436 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3429 = _3285;
                    _3430 = _3287;
                    _3431 = _3289;
                    _3432 = _3291;
                    _3433 = _3293;
                    _3434 = _3295;
                    _3435 = _3436;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3284 = _3285;
            _3286 = _3287;
            _3288 = _3289;
            _3290 = _3291;
            _3292 = _3293;
            _3294 = _3295;
        }
        uvec4 _3298 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3299 = _3298.z;
        uint _3301 = (_3299 >> 8u) & 15u;
        float _3397;
        float _3399;
        float _3401;
        float _3403;
        float _3405;
        float _3407;
        if (((4294967295u << _3301) & _3204) == 0u)
        {
            _3397 = _3284;
            _3399 = _3286;
            _3401 = _3288;
            _3403 = _3290;
            _3405 = _3292;
            _3407 = _3294;
        }
        else
        {
            float _3422 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
            float _3423 = _3422 * _2263;
            float _3424 = _3422 * _2264;
            float _3425 = _3422 * _2265;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3301 < ((_3299 >> 12u) & 15u))
            {
                float _3398;
                float _3400;
                float _3402;
                float _3404;
                float _3406;
                float _3408;
                float _3536 = _3284;
                float _3537 = _3286;
                float _3538 = _3288;
                float _3539 = _3290;
                float _3540 = _3292;
                float _3541 = _3294;
                uint _3542 = _3301;
                uint _3551;
                bool _3552;
                for (;;)
                {
                    _3551 = texelFetch(g_lightClassification, int((((_3198 << 5u) + (_3184 << 9u)) + (_3542 << 2u)) >> 2u)).x;
                    _3552 = _3551 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3552)
                    {
                        frontier_phi_72_pred = _3541;
                        frontier_phi_72_pred_1 = _3540;
                        frontier_phi_72_pred_2 = _3539;
                        frontier_phi_72_pred_3 = _3538;
                        frontier_phi_72_pred_4 = _3537;
                        frontier_phi_72_pred_5 = _3536;
                    }
                    else
                    {
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _4028;
                        float _4029;
                        float _4030;
                        float _4031;
                        float _4032;
                        float _4033;
                        float _3748 = _3536;
                        float _3749 = _3537;
                        float _3750 = _3538;
                        float _3751 = _3539;
                        float _3752 = _3540;
                        float _3753 = _3541;
                        uint _3754 = _3551;
                        uint _3755;
                        vec4 _3780;
                        float _3781;
                        vec4 _3796;
                        vec3 _3808;
                        vec4 _3823;
                        vec4 _3838;
                        float _3884;
                        bool _3885;
                        for (;;)
                        {
                            uint _3765 = ((_3542 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3754));
                            _3755 = (_3754 + 4294967295u) & _3754;
                            uint _3767 = _3765 * 40u;
                            _3780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 3u)).x));
                            _3781 = _3780.w;
                            uint _3783 = (_3765 * 40u) + 4u;
                            _3796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 3u)).x));
                            uint _3798 = (_3765 * 40u) + 8u;
                            _3808 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x));
                            uint _3810 = (_3765 * 40u) + 16u;
                            _3823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 3u)).x));
                            uint _3825 = (_3765 * 40u) + 20u;
                            _3838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 3u)).x));
                            uint _3840 = (_3765 * 40u) + 24u;
                            vec4 _3853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 3u)).x));
                            uint _3859 = (_3765 * 40u) + 28u;
                            vec4 _3872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 3u)).x));
                            _3884 = fma(_2265, _3872.z, fma(_2264, _3872.y, _3872.x * _2263)) + _3872.w;
                            _3885 = !((fma(_2265, _3853.z, fma(_2264, _3853.y, _3853.x * _2263)) + _3853.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3885)
                            {
                                float _3912 = _3780.x - _2263;
                                float _3913 = _3780.y - _2264;
                                float _3914 = _3780.z - _2265;
                                float _3915 = dot(vec3(_3912, _3913, _3914), vec3(_3912, _3913, _3914));
                                float _3918 = inversesqrt(_3915);
                                float _3919 = _3918 * _3912;
                                float _3920 = _3918 * _3913;
                                float _3921 = _3918 * _3914;
                                float _3925 = 1.0 - (_3915 / (_3781 * _3781));
                                float _5111 = isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0));
                                float _3926 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                                float _3930 = sqrt(_3915) * _3796.w;
                                float _3932 = 1.39999997615814208984375 / (_3930 + 1.39999997615814208984375);
                                float _3933 = _3932 * _3932;
                                float _3936 = ((1.0 - _3933) * dot(vec3(_3919, _3920, _3921), vec3(_1131, _1134, _1137))) + _3933;
                                float _3939 = _3930 * _3930;
                                float _3943 = (fma(_2265, _3823.z, fma(_2264, _3823.y, _3823.x * _2263)) + _3823.w) / _3884;
                                float _3944 = (fma(_2265, _3838.z, fma(_2264, _3838.y, _3838.x * _2263)) + _3838.w) / _3884;
                                float _3948 = 1.0 - dot(vec2(_3943, _3944), vec2(_3943, _3944));
                                float _5127 = isnan(0.0) ? _3948 : (isnan(_3948) ? 0.0 : max(_3948, 0.0));
                                float _3949 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
                                float _3950 = _3949 * (((isnan(0.0) ? _3936 : (isnan(_3936) ? 0.0 : max(_3936, 0.0))) * _3926) / ((_3939 * 0.699999988079071044921875) + 1.0));
                                float _3962 = exp2(log2(1.0 / ((_3939 * 3.5) + 5.0)) * 0.25);
                                float _3963 = 1.0 - _1206;
                                float _3970 = sqrt(1.0 - ((1.0 - (_3963 * _3963)) * (1.0 - (_3962 * _3962))));
                                float _3971 = _3970 * _3970;
                                float _3972 = _3971 * _3971;
                                float _3973 = _3919 - _3423;
                                float _3974 = _3920 - _3424;
                                float _3975 = _3921 - _3425;
                                float _3979 = inversesqrt(dot(vec3(_3973, _3974, _3975), vec3(_3973, _3974, _3975)));
                                float _3983 = dot(vec3(_1131, _1134, _1137), vec3((-0.0) - _3423, (-0.0) - _3424, (-0.0) - _3425));
                                float _5138 = isnan(0.0) ? _3983 : (isnan(_3983) ? 0.0 : max(_3983, 0.0));
                                float _3986 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
                                float _3987 = dot(vec3(_1131, _1134, _1137), vec3(_3979 * _3973, _3979 * _3974, _3979 * _3975));
                                float _5149 = isnan(0.0) ? _3987 : (isnan(_3987) ? 0.0 : max(_3987, 0.0));
                                float _3990 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
                                float _3994 = ((_3990 * _3990) * (_3972 + (-1.0))) + 1.0;
                                float _3995 = _3932 * _3971;
                                float _3996 = _3995 * _3995;
                                float _4002 = ((1.0 - _3996) * dot(vec3(_1131, _1134, _1137), vec3(_3919, _3920, _3921))) + _3996;
                                float _5160 = isnan(0.0) ? _4002 : (isnan(_4002) ? 0.0 : max(_4002, 0.0));
                                float _4003 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
                                float _4004 = 1.0 - _3971;
                                float _4014 = (0.5 / (((_4003 * ((_3986 * _4004) + _3971)) + 9.9999999392252902907785028219223e-09) + (((_4003 * _4004) + _3971) * _3986))) * _4003;
                                float _5171 = isnan(0.0) ? _4014 : (isnan(_4014) ? 0.0 : max(_4014, 0.0));
                                float _4024 = (_3949 * _3926) * (((_3972 * 3.1415927410125732421875) * (isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0)))) / ((_3994 * _3994) * ((_3939 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3950 * _3796.y;
                                frontier_phi_78_pred_1 = _3950 * _3796.x;
                                frontier_phi_78_pred_2 = _4024 * _3808.z;
                                frontier_phi_78_pred_3 = _4024 * _3808.y;
                                frontier_phi_78_pred_4 = _4024 * _3808.x;
                                frontier_phi_78_pred_5 = _3950 * _3796.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4032 = frontier_phi_78_pred;
                            _4031 = frontier_phi_78_pred_1;
                            _4030 = frontier_phi_78_pred_2;
                            _4029 = frontier_phi_78_pred_3;
                            _4028 = frontier_phi_78_pred_4;
                            _4033 = frontier_phi_78_pred_5;
                            _3738 = _4031 + _3751;
                            _3739 = _4032 + _3752;
                            _3740 = _4033 + _3753;
                            _3735 = _4028 + _3748;
                            _3736 = _4029 + _3749;
                            _3737 = _4030 + _3750;
                            if (_3755 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3748 = _3735;
                                _3749 = _3736;
                                _3750 = _3737;
                                _3751 = _3738;
                                _3752 = _3739;
                                _3753 = _3740;
                                _3754 = _3755;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3740;
                        frontier_phi_72_pred_1 = _3739;
                        frontier_phi_72_pred_2 = _3738;
                        frontier_phi_72_pred_3 = _3737;
                        frontier_phi_72_pred_4 = _3736;
                        frontier_phi_72_pred_5 = _3735;
                    }
                    _3408 = frontier_phi_72_pred;
                    _3406 = frontier_phi_72_pred_1;
                    _3404 = frontier_phi_72_pred_2;
                    _3402 = frontier_phi_72_pred_3;
                    _3400 = frontier_phi_72_pred_4;
                    _3398 = frontier_phi_72_pred_5;
                    uint _3543 = _3542 + 1u;
                    if (_3543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3536 = _3398;
                        _3537 = _3400;
                        _3538 = _3402;
                        _3539 = _3404;
                        _3540 = _3406;
                        _3541 = _3408;
                        _3542 = _3543;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3408;
                frontier_phi_60_61_ladder_1 = _3406;
                frontier_phi_60_61_ladder_2 = _3402;
                frontier_phi_60_61_ladder_3 = _3400;
                frontier_phi_60_61_ladder_4 = _3398;
                frontier_phi_60_61_ladder_5 = _3404;
            }
            else
            {
                frontier_phi_60_61_ladder = _3294;
                frontier_phi_60_61_ladder_1 = _3292;
                frontier_phi_60_61_ladder_2 = _3288;
                frontier_phi_60_61_ladder_3 = _3286;
                frontier_phi_60_61_ladder_4 = _3284;
                frontier_phi_60_61_ladder_5 = _3290;
            }
            _3397 = frontier_phi_60_61_ladder_4;
            _3399 = frontier_phi_60_61_ladder_3;
            _3401 = frontier_phi_60_61_ladder_2;
            _3403 = frontier_phi_60_61_ladder_5;
            _3405 = frontier_phi_60_61_ladder_1;
            _3407 = frontier_phi_60_61_ladder;
        }
        float _3412 = isnan(1.0) ? _1190 : (isnan(_1190) ? 1.0 : min(_1190, 1.0));
        _3217 = (_3412 * _3403) + _2729;
        _3219 = (_3412 * _3405) + _2731;
        _3221 = (_3412 * _3407) + _2733;
        _3223 = ((_3397 * _1174) * _3412) + _3067;
        _3225 = ((_3399 * _1176) * _3412) + _3069;
        _3227 = ((_3401 * _1177) * _3412) + _3071;
    }
    else
    {
        _3217 = _2729;
        _3219 = _2731;
        _3221 = _2733;
        _3223 = _3067;
        _3225 = _3069;
        _3227 = _3071;
    }
    float _5187 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _5198 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _5209 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    uint _3247 = _290 + 6u;
    float _3255 = _1112 / cbSceneParam._m0[86u].x;
    float _3256 = _1113 / cbSceneParam._m0[86u].y;
    vec4 _3270 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3255, _3256, (log2((isnan(cbSceneParam._m0[77u].w) ? _1047 : (isnan(_1047) ? cbSceneParam._m0[77u].w : min(_1047, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3272 = _3270.x;
    float _3273 = _3270.y;
    float _3274 = _3270.z;
    float _3275 = _3270.w;
    float _3347;
    float _3349;
    float _3351;
    float _3353;
    if (_1047 > cbSceneParam._m0[78u].w)
    {
        float _3309 = isnan(_1047) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1047 : min(cbSceneParam._m0[80u].w, _1047));
        float _3310 = _3309 / _1047;
        float _3321 = _3310 * _1097;
        float _3322 = _1098 * _3310;
        float _3323 = (-0.0) - _3322;
        float _3325 = _3310 * _1099;
        float _3327 = (cbSceneParam._m0[77u].w * _3323) / _3309;
        float _3328 = _3327 + cbSceneParam._m0[79u].w;
        float _3329 = cbSceneParam._m0[79u].w - _3322;
        float _3335 = sqrt(((_3321 * _3321) + (_3322 * _3322)) + (_3325 * _3325));
        float _3338 = (1.0 - (cbSceneParam._m0[77u].w / _3309)) * _3335;
        float _3343 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3345 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3498;
        if (abs((_3323 - _3327) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3498 = ((((_3328 > 0.0) ? exp2(_3343 * _3328) : (2.0 - exp2(_3345 * _3328))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3338;
        }
        else
        {
            float _3458 = 1.0 / cbSceneParam._m0[80u].x;
            float _3459 = isnan(_3329) ? _3328 : (isnan(_3328) ? _3329 : max(_3328, _3329));
            float _3460 = isnan(_3329) ? _3328 : (isnan(_3328) ? _3329 : min(_3328, _3329));
            float _3469 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : min(_3459, 0.0));
            float _3470 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : min(_3460, 0.0));
            _3498 = ((abs(_3335 / _3323) * cbSceneParam._m0[80u].y) * ((((_3469 - _3470) * 2.0) - ((exp2(_3343 * (isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0)))) - exp2(_3343 * (isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))))) * _3458)) - ((exp2(_3345 * _3469) - exp2(_3345 * _3470)) * _3458))) + (_3338 * cbSceneParam._m0[80u].z);
        }
        vec4 _3500 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3255, _3256, 1.0), 0.0);
        float _3509 = exp2((_3498 * (-1.44269502162933349609375)) * (1.0 - _3500.w));
        float _3510 = log2(_3509);
        float _3526 = log2(_3275);
        _3347 = (exp2(_3526 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3510 * cbSceneParam._m0[78u].x)) * _3500.x) / cbSceneParam._m0[78u].x)) + _3272;
        _3349 = (exp2(_3526 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3510 * cbSceneParam._m0[78u].y)) * _3500.y) / cbSceneParam._m0[78u].y)) + _3273;
        _3351 = (exp2(_3526 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3510 * cbSceneParam._m0[78u].z)) * _3500.z) / cbSceneParam._m0[78u].z)) + _3274;
        _3353 = _3509 * _3275;
    }
    else
    {
        _3347 = _3272;
        _3349 = _3273;
        _3351 = _3274;
        _3353 = _3275;
    }
    float _3365 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3366 = _3365 == 3.0;
    float _3367 = log2(_3353);
    float _3374 = exp2(_3367 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0))) * (_3217 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1190))) + ((_3223 + ((isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0))) * _1996)) * cbPerFrame._m0[3u].x));
    float _3375 = exp2(_3367 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0))) * (_3219 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1190))) + ((_3225 + ((isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0))) * _1996)) * cbPerFrame._m0[3u].x));
    float _3376 = exp2(_3367 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0))) * (_3221 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1190))) + ((_3227 + ((isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0))) * _1996)) * cbPerFrame._m0[3u].x));
    float _3385 = (_3365 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3385 * (_3366 ? _3374 : (_3374 + (cbSceneParam._m0[72u].w * _3347)));
    SV_Target.y = _3385 * (_3366 ? _3375 : (_3375 + (cbSceneParam._m0[72u].w * _3349)));
    SV_Target.z = _3385 * (_3366 ? _3376 : (_3376 + (cbSceneParam._m0[72u].w * _3351)));
    SV_Target.w = cbInstanceData._m0[_3247].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3247].w;
}


