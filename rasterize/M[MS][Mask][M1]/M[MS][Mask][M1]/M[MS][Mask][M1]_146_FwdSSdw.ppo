#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1607;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _250 = _249 * _241;
    float _251 = _249 * _242;
    float _252 = _249 * _243;
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = _256 * NORMAL.x;
    float _258 = _256 * NORMAL.y;
    float _259 = _256 * NORMAL.z;
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = _263 * TANGENT.x;
    float _265 = _263 * TANGENT.y;
    float _266 = _263 * TANGENT.z;
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _309.x * cbMtdParam._m0[11u].x;
    float _316 = _309.y * cbMtdParam._m0[11u].y;
    float _317 = _309.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _355.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[23u].w) + _408) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3953 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _433 = (_426 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _434 = (_426 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _435 = (_426 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _355.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[23u].w) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3964 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _506 = (_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433;
    float _507 = (_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434;
    float _508 = (_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435;
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _288) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _289) + cbTextureTilingScale._m0[24u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _546 = _544.x;
    float _556 = dot(vec4(_546, _544.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _568 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _355.z) * 2.0) - ((((_546 - _556) * cbMtdParam._m0[23u].w) + _556) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3975 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _576 = (_569 * ((_527.x * cbMtdParam._m0[14u].x) - _506)) + _506;
    float _577 = (_569 * ((_527.y * cbMtdParam._m0[14u].y) - _507)) + _507;
    float _578 = (_569 * ((_527.z * cbMtdParam._m0[14u].z) - _508)) + _508;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _288) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _289) + cbTextureTilingScale._m0[14u].w));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _635 = _633.x;
    float _636 = _633.y;
    float _637 = _633.z;
    float _644 = ((_616.x - _635) * _426) + _635;
    float _645 = ((_616.y - _636) * _426) + _636;
    float _646 = ((_616.z - _637) * _426) + _637;
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _669 = ((_658.x - _644) * _499) + _644;
    float _670 = ((_658.y - _645) * _499) + _645;
    float _671 = ((_658.z - _646) * _499) + _646;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _288) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _289) + cbTextureTilingScale._m0[23u].w));
    float _696 = ((_683.z - _671) * _569) + _671;
    float _699 = ((((_683.x - _669) * _569) + _669) * 2.0) + (-1.0);
    float _701 = ((((_683.y - _670) * _569) + _670) * 2.0) + (-1.0);
    float _702 = dot(vec2(_699, _701), vec2(_699, _701));
    float _3986 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _707 = sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))));
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _733 = (((_721.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _699;
    float _734 = (((_721.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _701;
    float _737 = fma(_707, _257, fma(_734, _264, _733 * _250));
    float _740 = fma(_707, _258, fma(_734, _265, _733 * _251));
    float _743 = fma(_707, _259, fma(_734, _266, _733 * _252));
    float _747 = inversesqrt(dot(vec3(_737, _740, _743), vec3(_737, _740, _743)));
    vec4 _774 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _776 = _774.x;
    float _777 = 1.0 - _776;
    float _785 = (cbMtdParam._m0[19u].x + dot(vec4(_747 * _737, _747 * _740, _747 * _743, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_776 - _777) * cbMtdParam._m0[24u].z) + _777) * cbMtdParam._m0[21u].z);
    float _3997 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _786 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _788 = (-0.0) - cbMtdParam._m0[24u].x;
    float _790 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _790 : (isnan(_790) ? 1.0 : min(_790, 1.0));
    float _798 = _786 - ((_786 * TEXCOORD_8.x) * _791);
    float _799 = _786 - ((_786 * TEXCOORD_8.y) * _791);
    float _800 = _786 - ((_786 * TEXCOORD_8.z) * _791);
    float _807 = (_798 * ((_596.x * cbMtdParam._m0[18u].x) - _576)) + _576;
    float _808 = (_799 * ((_596.y * cbMtdParam._m0[18u].y) - _577)) + _577;
    float _809 = (_800 * ((_596.z * cbMtdParam._m0[18u].z) - _578)) + _578;
    vec4 _821 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _823 = _821.x;
    float _824 = 1.0 - _823;
    float _850 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_823 - _824) * cbMtdParam._m0[24u].w) + _824) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4018 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _851 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _859 = ((((cbMtdParam._m0[10u].x - _807) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _851) + _807;
    float _860 = ((((cbMtdParam._m0[10u].y - _808) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _851) + _808;
    float _861 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _809)) * _851) + _809;
    vec4 _887 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _889 = _887.x;
    float _907 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _889) * _426) + _889;
    float _924 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _907) * _499) + _907;
    float _941 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _288) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _289) + cbTextureTilingScale._m0[10u].w)).x - _924) * _569) + _924;
    float _945 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _941) * cbMtdParam._m0[19u].z) + _941;
    float _947 = _945 - (_945 * _798);
    float _949 = _947 - (_947 * _851);
    float _953 = (cbMtdParam._m0[19u].w * (_721.z - _696)) + _696;
    vec4 _969 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _976 = (_969.x * 2.0) + (-1.0);
    float _977 = (_969.y * 2.0) + (-1.0);
    float _978 = dot(vec2(_976, _977), vec2(_976, _977));
    float _4029 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _986 = ((_969.z - _953) * _798) + _953;
    float _989 = ((cbMtdParam._m0[23u].x - _986) * _851) + _986;
    vec4 _1012 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1018 = (_1012.x * 2.0) + (-1.0);
    float _1019 = (_1012.y * 2.0) + (-1.0);
    float _1020 = dot(vec2(_1018, _1019), vec2(_1018, _1019));
    float _4040 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1035 = ((sqrt(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) - _707) * _800) + _707;
    float _1038 = (((_976 - _733) * _798) + _733) + (cbMtdParam._m0[21u].x * _733);
    float _1039 = (((_977 - _734) * _799) + _734) + (cbMtdParam._m0[21u].x * _734);
    float _1050 = (((_1018 - _1038) + (_1038 * cbMtdParam._m0[22u].z)) * _851) + _1038;
    float _1051 = (((_1019 - _1039) + (_1039 * cbMtdParam._m0[22u].z)) * _851) + _1039;
    float _1052 = (_851 * (sqrt(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) - _1035)) + _1035;
    float _1054 = cbMtdParam._m0[22u].x + _721.w;
    float _1057 = fma(_1052, _257, fma(_1051, _264, _1050 * _250));
    float _1060 = fma(_1052, _258, fma(_1051, _265, _1050 * _251));
    float _1063 = fma(_1052, _259, fma(_1051, _266, _1050 * _252));
    float _1067 = inversesqrt(dot(vec3(_1057, _1060, _1063), vec3(_1057, _1060, _1063)));
    float _1068 = _1067 * _1057;
    float _1069 = _1067 * _1060;
    float _1070 = _1067 * _1063;
    float _4051 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _1071 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _4073 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4084 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4095 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4106 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _1076 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _1090 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1140 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1130);
    float _1141 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1130);
    float _1142 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1130);
    float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
    float _1147 = _1140 * _1146;
    float _1148 = _1141 * _1146;
    float _1149 = _1142 * _1146;
    float _1155 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1156 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1174 = fma(_1070, cbSceneParam._m0[5u].z, fma(_1069, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1068));
    float _1177 = fma(_1070, cbSceneParam._m0[6u].z, fma(_1069, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1068));
    float _1180 = fma(_1070, cbSceneParam._m0[7u].z, fma(_1069, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1068));
    uint _1194 = (_269 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1200 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * cbInstanceData._m0[_1194].x;
    float _1201 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * cbInstanceData._m0[_1194].y;
    float _1202 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * cbInstanceData._m0[_1194].z;
    float _4117 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _1203 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _1204 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _1205 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _1206 = 1.0 - _1076;
    float _1207 = _1203 * _1206;
    float _1208 = _1204 * _1206;
    float _1209 = _1205 * _1206;
    float _1214 = (_1203 + (-0.039999999105930328369140625)) * _1076;
    float _1215 = (_1204 + (-0.039999999105930328369140625)) * _1076;
    float _1216 = (_1205 + (-0.039999999105930328369140625)) * _1076;
    float _1217 = _1214 + 0.039999999105930328369140625;
    float _1219 = _1215 + 0.039999999105930328369140625;
    float _1220 = _1216 + 0.039999999105930328369140625;
    vec4 _1229 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1155, cbSceneParam._m0[86u].y * _1156));
    float _1233 = ((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * TEXCOORD_5.w) * _1229.x;
    float _1234 = dot(vec3(_1068, _1069, _1070), vec3(_1147, _1148, _1149));
    float _1237 = _1234 * 2.0;
    float _1241 = (_1237 * _1068) - _1147;
    float _1242 = (_1237 * _1069) - _1148;
    float _1243 = (_1237 * _1070) - _1149;
    float _1247 = abs(dot(vec3(_1147, _1148, _1149), vec3(_1068, _1069, _1070)));
    float _4150 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
    float _1249 = sqrt(_1071);
    float _1262 = exp2((_1249 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1249 * 3.0));
    float _1268 = (1.0 - _1262) * ((_1249 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1269 = _1262 * _1249;
    float _1297 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1301 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1305 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1606;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1331 = fma(_1305, cbModelParam._m0[26u].z, fma(_1301, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1297));
        float _1335 = fma(_1305, cbModelParam._m0[27u].z, fma(_1301, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1297));
        float _1339 = fma(_1305, cbModelParam._m0[28u].z, fma(_1301, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1297));
        float _1364 = _1297 + _1068;
        float _1365 = _1301 + _1069;
        float _1366 = _1305 + _1070;
        float _1376 = fma(_1366, cbModelParam._m0[26u].z, fma(_1365, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1364)) - _1331;
        float _1377 = fma(_1366, cbModelParam._m0[27u].z, fma(_1365, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1364)) - _1335;
        float _1378 = fma(_1366, cbModelParam._m0[28u].z, fma(_1365, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1364)) - _1339;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1331 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1335 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[34u].z) + ((((((_1339 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1434 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1400.x + (-0.5));
        float _1436 = _1434 * (_1400.y + (-0.5));
        float _1437 = _1434 * (_1400.z + (-0.5));
        float _1444 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1407.x + (-0.5));
        float _1446 = _1444 * (_1407.y + (-0.5));
        float _1447 = _1444 * (_1407.z + (-0.5));
        float _1454 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1414.x + (-0.5));
        float _1456 = _1454 * (_1414.y + (-0.5));
        float _1457 = _1454 * (_1414.z + (-0.5));
        float _1464 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1421.x + (-0.5));
        float _1466 = _1464 * (_1421.y + (-0.5));
        float _1467 = _1464 * (_1421.z + (-0.5));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = _1435 * 0.5;
        float _1472 = _1445 * 0.5;
        float _1473 = _1455 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1488 = (dot(vec3(_1068, _1069, _1070), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1498 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4198 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1500 + 1.0))) + _1505) * _1468;
        float _1515 = _1436 * 0.5;
        float _1516 = _1446 * 0.5;
        float _1517 = _1456 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_1068, _1069, _1070), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4231 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1542 + 1.0))) + _1547) * _1469;
        float _1557 = _1437 * 0.5;
        float _1558 = _1447 * 0.5;
        float _1559 = _1457 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_1068, _1069, _1070), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4264 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1584 + 1.0))) + _1589) * _1470;
        _1606 = _1437;
        _1608 = _1436;
        _1609 = _1435;
        _1610 = _1447;
        _1611 = _1446;
        _1612 = _1445;
        _1613 = _1457;
        _1614 = _1456;
        _1615 = _1455;
        _1616 = _1470;
        _1617 = _1469;
        _1618 = _1468;
        _1619 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1620 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1621 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    }
    else
    {
        _1606 = _1607;
        _1608 = _1607;
        _1609 = _1607;
        _1610 = _1607;
        _1611 = _1607;
        _1612 = _1607;
        _1613 = _1607;
        _1614 = _1607;
        _1615 = _1607;
        _1616 = _1607;
        _1617 = _1607;
        _1618 = _1607;
        _1619 = 0.0;
        _1620 = 0.0;
        _1621 = 0.0;
    }
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1644 = fma(_1305, cbModelParam._m0[30u].z, fma(_1301, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1297));
        float _1648 = fma(_1305, cbModelParam._m0[31u].z, fma(_1301, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1297));
        float _1652 = fma(_1305, cbModelParam._m0[32u].z, fma(_1301, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1297));
        float _1675 = _1297 + _1068;
        float _1676 = _1301 + _1069;
        float _1677 = _1305 + _1070;
        float _1687 = fma(_1677, cbModelParam._m0[30u].z, fma(_1676, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1675)) - _1644;
        float _1688 = fma(_1677, cbModelParam._m0[31u].z, fma(_1676, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1675)) - _1648;
        float _1689 = fma(_1677, cbModelParam._m0[32u].z, fma(_1676, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1675)) - _1652;
        float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
        float _1706 = ((_1693 * _1687) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1644 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1707 = ((_1693 * _1688) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1648 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1708 = ((_1693 * _1689) / cbModelParam._m0[35u].z) + ((((((_1652 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1724 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1731 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        float _1743 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1710.x + (-0.5));
        float _1745 = _1743 * (_1710.y + (-0.5));
        float _1746 = _1743 * (_1710.z + (-0.5));
        float _1753 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = _1753 * (_1717.x + (-0.5));
        float _1755 = _1753 * (_1717.y + (-0.5));
        float _1756 = _1753 * (_1717.z + (-0.5));
        float _1763 = exp2((_1724.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = _1763 * (_1724.x + (-0.5));
        float _1765 = _1763 * (_1724.y + (-0.5));
        float _1766 = _1763 * (_1724.z + (-0.5));
        float _1773 = exp2((_1731.w + (-0.5)) * 20.0) * 2.0;
        float _1774 = _1773 * (_1731.x + (-0.5));
        float _1775 = _1773 * (_1731.y + (-0.5));
        float _1776 = _1773 * (_1731.z + (-0.5));
        float _1777 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1778 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1779 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1780 = _1744 * 0.5;
        float _1781 = _1754 * 0.5;
        float _1782 = _1764 * 0.5;
        float _1783 = dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782));
        float _1788 = (_1783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1783);
        float _1796 = (dot(vec3(_1068, _1069, _1070), vec3(_1788 * _1780, _1788 * _1781, _1788 * _1782)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1805 = sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782)) / (_1777 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1807 = _1806 * 2.0;
        float _1811 = (1.0 - _1806) / (_1806 + 1.0);
        float _4327 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1821 = ((((1.0 - _1812) * (_1807 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1807 + 1.0))) + _1812) * _1777;
        float _1822 = _1745 * 0.5;
        float _1823 = _1755 * 0.5;
        float _1824 = _1765 * 0.5;
        float _1825 = dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824));
        float _1830 = (_1825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1825);
        float _1838 = (dot(vec3(_1068, _1069, _1070), vec3(_1830 * _1822, _1830 * _1823, _1830 * _1824)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824)) / (_1778 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1849 = _1848 * 2.0;
        float _1853 = (1.0 - _1848) / (_1848 + 1.0);
        float _4360 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1863 = ((((1.0 - _1854) * (_1849 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1849 + 1.0))) + _1854) * _1778;
        float _1864 = _1746 * 0.5;
        float _1865 = _1756 * 0.5;
        float _1866 = _1766 * 0.5;
        float _1867 = dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866));
        float _1872 = (_1867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1867);
        float _1880 = (dot(vec3(_1068, _1069, _1070), vec3(_1872 * _1864, _1872 * _1865, _1872 * _1866)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1889 = sqrt(((_1865 * _1865) + (_1864 * _1864)) + (_1866 * _1866)) / (_1779 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1891 = _1890 * 2.0;
        float _1895 = (1.0 - _1890) / (_1890 + 1.0);
        float _4393 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1905 = ((((1.0 - _1896) * (_1891 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1891 + 1.0))) + _1896) * _1779;
        _1913 = _1746;
        _1914 = _1745;
        _1915 = _1744;
        _1916 = _1756;
        _1917 = _1755;
        _1918 = _1754;
        _1919 = _1766;
        _1920 = _1765;
        _1921 = _1764;
        _1922 = _1779;
        _1923 = _1778;
        _1924 = _1777;
        _1925 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)));
        _1926 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)));
        _1927 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)));
    }
    else
    {
        _1913 = _1607;
        _1914 = _1607;
        _1915 = _1607;
        _1916 = _1607;
        _1917 = _1607;
        _1918 = _1607;
        _1919 = _1607;
        _1920 = _1607;
        _1921 = _1607;
        _1922 = _1607;
        _1923 = _1607;
        _1924 = _1607;
        _1925 = 0.0;
        _1926 = 0.0;
        _1927 = 0.0;
    }
    float _1937 = (cbModelParam._m0[1u].x * (_1925 - _1619)) + _1619;
    float _1938 = (cbModelParam._m0[1u].x * (_1926 - _1620)) + _1620;
    float _1939 = (cbModelParam._m0[1u].x * (_1927 - _1621)) + _1621;
    float _1960 = fma(_1939, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1937 * cbSceneParam._m0[89u].x));
    float _1963 = fma(_1939, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1937 * cbSceneParam._m0[90u].x));
    float _1966 = fma(_1939, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1937));
    float _1981 = _1241 * 0.5;
    float _1982 = _1242 * 0.5;
    float _1983 = _1243 * 0.5;
    float _1984 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1915, _1918, _1921, _1924));
    float _1987 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1914, _1917, _1920, _1923));
    float _1990 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1913, _1916, _1919, _1922));
    float _2024;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1997 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1606, _1610, _1613, _1616));
        float _2001 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1608, _1611, _1614, _1617));
        float _2005 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1609, _1612, _1615, _1618));
        float _2012 = dot(vec4(cbModelParam._m0[39u]), vec4(_1981, _1982, _1983, 1.0));
        _2024 = dot(vec3(isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)), isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0)), isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2012) ? 0.0 : (isnan(0.0) ? _2012 : max(0.0, _2012))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2024 = 1.0;
    }
    float _2035;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2026 = dot(vec4(cbModelParam._m0[40u]), vec4(_1981, _1982, _1983, 1.0));
        _2035 = dot(vec3(isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)), isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0)), isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2026) ? 0.0 : (isnan(0.0) ? _2026 : max(0.0, _2026))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2035 = 1.0;
    }
    float _2039 = (_2035 * cbModelParam._m0[1u].x) + (_2024 * (1.0 - cbModelParam._m0[1u].x));
    float _2049 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1071);
    float _2050 = isnan(_2049) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2049 : min(cbModelParam._m0[25u].z, _2049));
    float _2130;
    float _2132;
    float _2134;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2097 = fma(_1305, cbModelParam._m0[13u].z, fma(_1301, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1297)) + cbModelParam._m0[13u].w;
        float _2101 = fma(_1305, cbModelParam._m0[14u].z, fma(_1301, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1297)) + cbModelParam._m0[14u].w;
        float _2105 = fma(_1305, cbModelParam._m0[15u].z, fma(_1301, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1297)) + cbModelParam._m0[15u].w;
        float _2108 = fma(_1243, cbModelParam._m0[13u].z, fma(_1242, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1241));
        float _2111 = fma(_1243, cbModelParam._m0[14u].z, fma(_1242, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1241));
        float _2114 = fma(_1243, cbModelParam._m0[15u].z, fma(_1242, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1241));
        float _2142;
        if (_2108 > 0.0)
        {
            _2142 = abs((1.0 - _2097) / _2108);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2097 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2142 = frontier_phi_14_12_ladder;
        }
        float _2365;
        if (_2111 > 0.0)
        {
            _2365 = abs((1.0 - _2101) / _2111);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2101 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2365 = frontier_phi_23_19_ladder;
        }
        float _2622;
        if (_2114 > 0.0)
        {
            _2622 = abs((1.0 - _2105) / _2114);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2105 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2622 = frontier_phi_35_30_ladder;
        }
        float _2624 = isnan(_2365) ? _2142 : (isnan(_2142) ? _2365 : min(_2142, _2365));
        float _2625 = isnan(_2622) ? _2624 : (isnan(_2624) ? _2622 : min(_2624, _2622));
        float _2629 = (_2625 * _2108) + _2097;
        float _2630 = (_2625 * _2111) + _2101;
        float _2631 = (_2625 * _2114) + _2105;
        float _2632 = _2625 * 9.9999997473787516355514526367188e-05;
        float _2634 = (-1.0) - _2632;
        float _2636 = _2632 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2631 > _2636) || ((_2631 < _2634) || ((_2630 > _2636) || ((_2630 < _2634) || ((_2629 < _2634) || (_2629 > _2636))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2631, cbModelParam._m0[9u].z, fma(_2630, cbModelParam._m0[9u].y, _2629 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2631, cbModelParam._m0[10u].z, fma(_2630, cbModelParam._m0[10u].y, _2629 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2631, cbModelParam._m0[11u].z, fma(_2630, cbModelParam._m0[11u].y, _2629 * cbModelParam._m0[11u].x))), _2050);
            frontier_phi_13_35_ladder = _2759.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2759.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2759.x * cbModelParam._m0[1u].y;
        }
        _2130 = frontier_phi_13_35_ladder_2;
        _2132 = frontier_phi_13_35_ladder_1;
        _2134 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2118 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1241, _1242, _1243), _2050);
        _2130 = _2118.x * cbModelParam._m0[1u].y;
        _2132 = _2118.y * cbModelParam._m0[1u].y;
        _2134 = _2118.z * cbModelParam._m0[1u].y;
    }
    float _2138 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1071);
    float _2139 = isnan(_2138) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2138 : min(cbModelParam._m0[25u].w, _2138));
    float _2228;
    float _2230;
    float _2232;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2192 = fma(_1305, cbModelParam._m0[21u].z, fma(_1301, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1297)) + cbModelParam._m0[21u].w;
        float _2196 = fma(_1305, cbModelParam._m0[22u].z, fma(_1301, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1297)) + cbModelParam._m0[22u].w;
        float _2200 = fma(_1305, cbModelParam._m0[23u].z, fma(_1301, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1297)) + cbModelParam._m0[23u].w;
        float _2203 = fma(_1243, cbModelParam._m0[21u].z, fma(_1242, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1241));
        float _2206 = fma(_1243, cbModelParam._m0[22u].z, fma(_1242, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1241));
        float _2209 = fma(_1243, cbModelParam._m0[23u].z, fma(_1242, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1241));
        float _2370;
        if (_2203 > 0.0)
        {
            _2370 = abs((1.0 - _2192) / _2203);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2203 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2192 + 1.0) / _2203);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2370 = frontier_phi_25_21_ladder;
        }
        float _2649;
        if (_2206 > 0.0)
        {
            _2649 = abs((1.0 - _2196) / _2206);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2206 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2196 + 1.0) / _2206);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2649 = frontier_phi_37_32_ladder;
        }
        float _2862;
        if (_2209 > 0.0)
        {
            _2862 = abs((1.0 - _2200) / _2209);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2209 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2200 + 1.0) / _2209);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2862 = frontier_phi_46_43_ladder;
        }
        float _2864 = isnan(_2649) ? _2370 : (isnan(_2370) ? _2649 : min(_2370, _2649));
        float _2865 = isnan(_2862) ? _2864 : (isnan(_2864) ? _2862 : min(_2864, _2862));
        float _2869 = (_2865 * _2203) + _2192;
        float _2870 = (_2865 * _2206) + _2196;
        float _2871 = (_2865 * _2209) + _2200;
        float _2872 = _2865 * 9.9999997473787516355514526367188e-05;
        float _2873 = (-1.0) - _2872;
        float _2875 = _2872 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2871 > _2875) || ((_2871 < _2873) || ((_2870 > _2875) || ((_2870 < _2873) || ((_2869 < _2873) || (_2869 > _2875))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2871, cbModelParam._m0[17u].z, fma(_2870, cbModelParam._m0[17u].y, _2869 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2871, cbModelParam._m0[18u].z, fma(_2870, cbModelParam._m0[18u].y, _2869 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2871, cbModelParam._m0[19u].z, fma(_2870, cbModelParam._m0[19u].y, _2869 * cbModelParam._m0[19u].x))), _2139);
            frontier_phi_22_46_ladder = _3070.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3070.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3070.x * cbModelParam._m0[1u].z;
        }
        _2228 = frontier_phi_22_46_ladder_2;
        _2230 = frontier_phi_22_46_ladder_1;
        _2232 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2212 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1241, _1242, _1243), _2139);
        _2228 = _2212.x * cbModelParam._m0[1u].z;
        _2230 = _2212.y * cbModelParam._m0[1u].z;
        _2232 = _2212.z * cbModelParam._m0[1u].z;
    }
    float _2245 = (((_1268 * _1217) + _1269) * _1233) * ((cbModelParam._m0[1u].w * (_2228 - _2130)) + _2130);
    float _2247 = (((_1268 * _1219) + _1269) * _1233) * ((cbModelParam._m0[1u].w * (_2230 - _2132)) + _2132);
    float _2249 = (((_1268 * _1220) + _1269) * _1233) * ((cbModelParam._m0[1u].w * (_2232 - _2134)) + _2134);
    float _2252 = fma(_2249, cbSceneParam._m0[89u].z, fma(_2247, cbSceneParam._m0[89u].y, _2245 * cbSceneParam._m0[89u].x));
    float _2255 = fma(_2249, cbSceneParam._m0[90u].z, fma(_2247, cbSceneParam._m0[90u].y, _2245 * cbSceneParam._m0[90u].x));
    float _2258 = fma(_2249, cbSceneParam._m0[91u].z, fma(_2247, cbSceneParam._m0[91u].y, _2245 * cbSceneParam._m0[91u].x));
    vec4 _2266 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1155, _1156));
    float _2268 = _2266.w;
    float _2280 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2268);
    float _2281 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2268);
    float _2282 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2268);
    uvec4 _2286 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2288 = _2286.x * 14u;
    uint _2289 = _2288 + 13u;
    float _2296 = _1233 + (-1.0);
    float _2301 = (cbLight._m0[_2289].x * _2296) + 1.0;
    float _2302 = (cbLight._m0[_2289].y * _2296) + 1.0;
    float _2303 = (cbLight._m0[_2289].z * _2296) + 1.0;
    float _2304 = (cbLight._m0[_2289].w * _2296) + 1.0;
    uint _2305 = _2288 + 5u;
    float _2311 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
    uint _2315 = _2288 + 4u;
    float _2324 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
    uint _2328 = _2288 | 1u;
    float _2339 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_1068, _1069, _1070));
    float _2342 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_1068, _1069, _1070));
    float _4529 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _4540 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2347 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * 0.3183098733425140380859375;
    float _2349 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * 0.3183098733425140380859375;
    float _2356 = ((cbLight._m0[_2305].x * _2311) * _2349) + (((cbLight._m0[_2315].x * _2280) * _2324) * _2347);
    float _2357 = ((_2311 * cbLight._m0[_2305].y) * _2349) + (((cbLight._m0[_2315].y * _2281) * _2324) * _2347);
    float _2358 = ((_2311 * cbLight._m0[_2305].z) * _2349) + (((cbLight._m0[_2315].z * _2282) * _2324) * _2347);
    uvec4 _2362 = floatBitsToUint(cbLight._m0[_2288 + 12u]);
    bool _2364 = _2362.x == 0u;
    float _2375;
    float _2377;
    float _2379;
    if (_2364)
    {
        _2375 = _2356;
        _2377 = _2357;
        _2379 = _2358;
    }
    else
    {
        uint _2383 = _2288 + 6u;
        float _2399 = (dot(vec3(cbLight._m0[_2288 + 2u].xyz), vec3(_1068, _1069, _1070)) * 0.5) + 0.5;
        float _2400 = _2399 * _2399;
        float _4551 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2401 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2402 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2375 = (((cbLight._m0[_2383].x * 0.3183098733425140380859375) * _2401) * _2402) + _2356;
        _2377 = (((cbLight._m0[_2383].y * 0.3183098733425140380859375) * _2401) * _2402) + _2357;
        _2379 = (((cbLight._m0[_2383].z * 0.3183098733425140380859375) * _2401) * _2402) + _2358;
    }
    bool _2382 = _2362.y == 0u;
    float _2420;
    float _2422;
    float _2424;
    if (_2382)
    {
        _2420 = _2375;
        _2422 = _2377;
        _2424 = _2379;
    }
    else
    {
        uint _2593 = _2288 + 7u;
        float _2609 = (dot(vec3(cbLight._m0[_2288 + 3u].xyz), vec3(_1068, _1069, _1070)) * 0.5) + 0.5;
        float _2610 = _2609 * _2609;
        float _4567 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2611 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2612 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2420 = (((cbLight._m0[_2593].x * 0.3183098733425140380859375) * _2611) * _2612) + _2375;
        _2422 = (((cbLight._m0[_2593].y * 0.3183098733425140380859375) * _2611) * _2612) + _2377;
        _2424 = (((cbLight._m0[_2593].z * 0.3183098733425140380859375) * _2611) * _2612) + _2379;
    }
    uint _2427 = _2288 + 8u;
    float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _1071) * 0.949999988079071044921875);
    float _2441 = _2440 * _2440;
    float _2442 = cbLight._m0[_2288].x + _1147;
    float _2443 = cbLight._m0[_2288].y + _1148;
    float _2444 = cbLight._m0[_2288].z + _1149;
    float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
    float _2449 = _2448 * _2442;
    float _2450 = _2448 * _2443;
    float _2451 = _2448 * _2444;
    float _2452 = dot(vec3(_1068, _1069, _1070), vec3(cbLight._m0[_2288].xyz));
    float _4583 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _4594 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _2456 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2457 = dot(vec3(_1068, _1069, _1070), vec3(_2449, _2450, _2451));
    float _4605 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2461 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2449, _2450, _2451));
    float _4616 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2465 = _2441 * _2441;
    float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
    float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0);
    float _2478 = 0.959999978542327880859375 - _1214;
    float _2480 = 0.959999978542327880859375 - _1215;
    float _2481 = 0.959999978542327880859375 - _1216;
    float _2488 = 1.0 - _2441;
    float _2499 = (0.5 / (((_2456 * ((_2455 * _2488) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2488) + _2441) * _2455))) * _2455;
    float _4627 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2501 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
    uint _2515 = _2288 + 9u;
    float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _1071) * 0.949999988079071044921875);
    float _2527 = _2526 * _2526;
    float _2528 = cbLight._m0[_2328].x + _1147;
    float _2529 = cbLight._m0[_2328].y + _1148;
    float _2530 = cbLight._m0[_2328].z + _1149;
    float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
    float _2535 = _2534 * _2528;
    float _2536 = _2534 * _2529;
    float _2537 = _2534 * _2530;
    float _2538 = dot(vec3(_1068, _1069, _1070), vec3(cbLight._m0[_2328].xyz));
    float _4638 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2542 = dot(vec3(_1068, _1069, _1070), vec3(_2535, _2536, _2537));
    float _4649 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _2546 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2535, _2536, _2537));
    float _4660 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2550 = _2527 * _2527;
    float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
    float _2561 = exp2(log2(1.0 - (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) * 5.0);
    float _2568 = 1.0 - _2527;
    float _2578 = (0.5 / (((_2456 * ((_2541 * _2568) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2568) + _2527) * _2541))) * _2541;
    float _4671 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2580 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
    float _2590 = (((((_2561 * _2478) + _1217) * cbLight._m0[_2515].x) * _2580) * _2311) + ((((cbLight._m0[_2427].x * _2280) * ((_2477 * _2478) + _1217)) * _2501) * _2324);
    float _2591 = (((((_2561 * _2480) + _1219) * cbLight._m0[_2515].y) * _2580) * _2311) + ((((cbLight._m0[_2427].y * _2281) * ((_2477 * _2480) + _1219)) * _2501) * _2324);
    float _2592 = (((((_2561 * _2481) + _1220) * cbLight._m0[_2515].z) * _2580) * _2311) + ((((cbLight._m0[_2427].z * _2282) * ((_2477 * _2481) + _1220)) * _2501) * _2324);
    float _2654;
    float _2656;
    float _2658;
    if (_2364)
    {
        _2654 = _2590;
        _2656 = _2591;
        _2658 = _2592;
    }
    else
    {
        uint _2660 = _2288 + 2u;
        uint _2664 = _2288 + 10u;
        float _2678 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2660].w)) * _1071) * 0.949999988079071044921875);
        float _2679 = _2678 * _2678;
        float _2680 = cbLight._m0[_2660].x + _1147;
        float _2681 = cbLight._m0[_2660].y + _1148;
        float _2682 = cbLight._m0[_2660].z + _1149;
        float _2686 = inversesqrt(dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682)));
        float _2687 = _2686 * _2680;
        float _2688 = _2686 * _2681;
        float _2689 = _2686 * _2682;
        float _2690 = dot(vec3(_1068, _1069, _1070), vec3(cbLight._m0[_2660].xyz));
        float _4682 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2693 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2694 = dot(vec3(_1068, _1069, _1070), vec3(_2687, _2688, _2689));
        float _4693 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2697 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2698 = dot(vec3(cbLight._m0[_2660].xyz), vec3(_2687, _2688, _2689));
        float _4704 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2702 = _2679 * _2679;
        float _2706 = ((_2697 * _2697) * (_2702 + (-1.0))) + 1.0;
        float _2713 = exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0);
        float _2720 = 1.0 - _2679;
        float _2730 = (0.5 / (((_2456 * ((_2693 * _2720) + _2679)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2720) + _2679) * _2693))) * _2693;
        float _4715 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2732 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2702 / ((_2706 * _2706) * 3.141590118408203125));
        float _2733 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2654 = (((((_2713 * _2478) + _1217) * cbLight._m0[_2664].x) * _2732) * _2733) + _2590;
        _2656 = (((((_2713 * _2480) + _1219) * cbLight._m0[_2664].y) * _2732) * _2733) + _2591;
        _2658 = (((((_2713 * _2481) + _1220) * cbLight._m0[_2664].z) * _2732) * _2733) + _2592;
    }
    float _2768;
    float _2770;
    float _2772;
    if (_2382)
    {
        _2768 = _2654;
        _2770 = _2656;
        _2772 = _2658;
    }
    else
    {
        uint _2779 = _2288 + 3u;
        uint _2783 = _2288 + 11u;
        float _2797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2779].w)) * _1071) * 0.949999988079071044921875);
        float _2798 = _2797 * _2797;
        float _2799 = cbLight._m0[_2779].x + _1147;
        float _2800 = cbLight._m0[_2779].y + _1148;
        float _2801 = cbLight._m0[_2779].z + _1149;
        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
        float _2806 = _2805 * _2799;
        float _2807 = _2805 * _2800;
        float _2808 = _2805 * _2801;
        float _2809 = dot(vec3(_1068, _1069, _1070), vec3(cbLight._m0[_2779].xyz));
        float _4731 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2813 = dot(vec3(_1068, _1069, _1070), vec3(_2806, _2807, _2808));
        float _4742 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2817 = dot(vec3(cbLight._m0[_2779].xyz), vec3(_2806, _2807, _2808));
        float _4753 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2821 = _2798 * _2798;
        float _2825 = ((_2816 * _2816) * (_2821 + (-1.0))) + 1.0;
        float _2832 = exp2(log2(1.0 - (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) * 5.0);
        float _2839 = 1.0 - _2798;
        float _2849 = (0.5 / (((_2456 * ((_2812 * _2839) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2456 * _2839) + _2798) * _2812))) * _2812;
        float _4764 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2851 = (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2821 / ((_2825 * _2825) * 3.141590118408203125));
        float _2852 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2768 = (((((_2832 * _2478) + _1217) * cbLight._m0[_2783].x) * _2851) * _2852) + _2654;
        _2770 = (((((_2832 * _2480) + _1219) * cbLight._m0[_2783].y) * _2851) * _2852) + _2656;
        _2772 = (((((_2832 * _2481) + _1220) * cbLight._m0[_2783].z) * _2851) * _2852) + _2658;
    }
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    if (_2286.y == 0u)
    {
        float _2927 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2928 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2927;
        float _2929 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2927;
        float _2930 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2927;
        uvec4 _2942 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2943 = _2942.x;
        uint _2954 = uint((float(_2942.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1156) / _2943))) + floor(float(uint(cbSceneParam._m0[85u].x * _1155) / _2943)));
        float _2964 = (log2(_2930 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2965 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        uint _2968 = uint(isnan(14.0) ? _2965 : (isnan(_2965) ? 14.0 : min(_2965, 14.0)));
        uvec4 _2973 = texelFetch(g_lightClusterGridBuffer, int(((_2968 << 2u) + (_2954 << 6u)) >> 2u));
        uint _2974 = _2973.x;
        uint _2975 = _2942.z;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        if (((((1u << ((_2975 >> 4u) & 15u)) + 4294967295u) & _2974) == 0u) || ((_2975 & 240u) == 0u))
        {
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
        }
        else
        {
            float _3076;
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3086;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            uint _3225 = 0u;
            uint _3234;
            bool _3235;
            for (;;)
            {
                _3234 = texelFetch(g_lightClassification, int((((_2968 << 5u) + (_2954 << 9u)) + (_3225 << 2u)) >> 2u)).x;
                _3235 = _3234 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3235)
                {
                    frontier_phi_61_pred = _3219;
                    frontier_phi_61_pred_1 = _3224;
                    frontier_phi_61_pred_2 = _3223;
                    frontier_phi_61_pred_3 = _3222;
                    frontier_phi_61_pred_4 = _3221;
                    frontier_phi_61_pred_5 = _3220;
                }
                else
                {
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    uint _3349;
                    _3343 = _3219;
                    _3344 = _3220;
                    _3345 = _3221;
                    _3346 = _3222;
                    _3347 = _3223;
                    _3348 = _3224;
                    _3349 = _3234;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    for (;;)
                    {
                        uint _3353 = uint(findLSB(_3349)) + (_3225 << 5u);
                        uint _3350 = (_3349 + 4294967295u) & _3349;
                        uint _3355 = _3353 * 48u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 3u)).x));
                        uint _3375 = (_3353 * 48u) + 4u;
                        vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 3u)).x));
                        uint _3394 = (_3353 * 48u) + 8u;
                        vec3 _3405 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x));
                        float _3409 = _3369.x - _2928;
                        float _3410 = _3369.y - _2929;
                        float _3411 = _3369.z - _2930;
                        float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                        float _3415 = inversesqrt(_3412);
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3419 = dot(vec3(_1174, _1177, _1180), vec3(_3416, _3417, _3418));
                        float _3424 = 1.0 - (_3412 * _3369.w);
                        float _4790 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3425 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3426 = sqrt(_3412) * _3388.w;
                        float _3429 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3419) + _3430;
                        float _3436 = _3426 * _3426;
                        float _3440 = ((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3425) / ((_3436 * 0.699999988079071044921875) + 1.0);
                        float _3444 = (-0.0) - _2928;
                        float _3445 = (-0.0) - _2929;
                        float _3446 = (-0.0) - _2930;
                        float _3450 = inversesqrt(dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446)));
                        float _3451 = _3450 * _3444;
                        float _3452 = _3450 * _3445;
                        float _3453 = _3450 * _3446;
                        float _3461 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                        float _3462 = 1.0 - _1249;
                        float _3469 = sqrt(1.0 - ((1.0 - (_3462 * _3462)) * (1.0 - (_3461 * _3461))));
                        float _3470 = _3469 * _3469;
                        float _3471 = _3470 * _3470;
                        float _3472 = _3451 + _3416;
                        float _3473 = _3452 + _3417;
                        float _3474 = _3453 + _3418;
                        float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                        float _3482 = dot(vec3(_1174, _1177, _1180), vec3(_3451, _3452, _3453));
                        float _4806 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3485 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                        float _3486 = dot(vec3(_1174, _1177, _1180), vec3(_3478 * _3472, _3478 * _3473, _3478 * _3474));
                        float _4817 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3489 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3493 = ((_3489 * _3489) * (_3471 + (-1.0))) + 1.0;
                        float _3494 = _3429 * _3470;
                        float _3495 = _3494 * _3494;
                        float _3498 = ((1.0 - _3495) * _3419) + _3495;
                        float _4828 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3499 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                        float _3500 = 1.0 - _3470;
                        float _3510 = (0.5 / (((_3499 * ((_3485 * _3500) + _3470)) + 9.9999999392252902907785028219223e-09) + (((_3499 * _3500) + _3470) * _3485))) * _3499;
                        float _4839 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3521 = (((_3471 * 3.1415927410125732421875) * (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0)))) / ((_3493 * _3493) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125))) * _3425;
                        _3278 = (_3440 * _3388.x) + _3346;
                        _3279 = (_3440 * _3388.y) + _3347;
                        _3280 = (_3440 * _3388.z) + _3348;
                        _3275 = (_3521 * _3405.x) + _3343;
                        _3276 = (_3521 * _3405.y) + _3344;
                        _3277 = (_3521 * _3405.z) + _3345;
                        if (_3350 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3343 = _3275;
                            _3344 = _3276;
                            _3345 = _3277;
                            _3346 = _3278;
                            _3347 = _3279;
                            _3348 = _3280;
                            _3349 = _3350;
                        }
                    }
                    frontier_phi_61_pred = _3275;
                    frontier_phi_61_pred_1 = _3280;
                    frontier_phi_61_pred_2 = _3279;
                    frontier_phi_61_pred_3 = _3278;
                    frontier_phi_61_pred_4 = _3277;
                    frontier_phi_61_pred_5 = _3276;
                }
                _3076 = frontier_phi_61_pred;
                _3086 = frontier_phi_61_pred_1;
                _3084 = frontier_phi_61_pred_2;
                _3082 = frontier_phi_61_pred_3;
                _3080 = frontier_phi_61_pred_4;
                _3078 = frontier_phi_61_pred_5;
                uint _3226 = _3225 + 1u;
                if (_3226 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3219 = _3076;
                    _3220 = _3078;
                    _3221 = _3080;
                    _3222 = _3082;
                    _3223 = _3084;
                    _3224 = _3086;
                    _3225 = _3226;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
        }
        uvec4 _3089 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3090 = _3089.z;
        uint _3092 = (_3090 >> 8u) & 15u;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        if (((4294967295u << _3092) & _2974) == 0u)
        {
            _3187 = _3075;
            _3189 = _3077;
            _3191 = _3079;
            _3193 = _3081;
            _3195 = _3083;
            _3197 = _3085;
        }
        else
        {
            float _3212 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
            float _3213 = _3212 * _2928;
            float _3214 = _3212 * _2929;
            float _3215 = _3212 * _2930;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3092 < ((_3090 >> 12u) & 15u))
            {
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3326 = _3075;
                float _3327 = _3077;
                float _3328 = _3079;
                float _3329 = _3081;
                float _3330 = _3083;
                float _3331 = _3085;
                uint _3332 = _3092;
                uint _3341;
                bool _3342;
                for (;;)
                {
                    _3341 = texelFetch(g_lightClassification, int((((_2968 << 5u) + (_2954 << 9u)) + (_3332 << 2u)) >> 2u)).x;
                    _3342 = _3341 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3342)
                    {
                        frontier_phi_67_pred = _3329;
                        frontier_phi_67_pred_1 = _3330;
                        frontier_phi_67_pred_2 = _3331;
                        frontier_phi_67_pred_3 = _3328;
                        frontier_phi_67_pred_4 = _3327;
                        frontier_phi_67_pred_5 = _3326;
                    }
                    else
                    {
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3819;
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3539 = _3326;
                        float _3540 = _3327;
                        float _3541 = _3328;
                        float _3542 = _3329;
                        float _3543 = _3330;
                        float _3544 = _3331;
                        uint _3545 = _3341;
                        uint _3546;
                        vec4 _3571;
                        float _3572;
                        vec4 _3587;
                        vec3 _3599;
                        vec4 _3614;
                        vec4 _3629;
                        float _3675;
                        bool _3676;
                        for (;;)
                        {
                            uint _3556 = ((_3332 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3545));
                            _3546 = (_3545 + 4294967295u) & _3545;
                            uint _3558 = _3556 * 40u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            _3572 = _3571.w;
                            uint _3574 = (_3556 * 40u) + 4u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3589 = (_3556 * 40u) + 8u;
                            _3599 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x));
                            uint _3601 = (_3556 * 40u) + 16u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3616 = (_3556 * 40u) + 20u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3556 * 40u) + 24u;
                            vec4 _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3650 = (_3556 * 40u) + 28u;
                            vec4 _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            _3675 = fma(_2930, _3663.z, fma(_2929, _3663.y, _3663.x * _2928)) + _3663.w;
                            _3676 = !((fma(_2930, _3644.z, fma(_2929, _3644.y, _3644.x * _2928)) + _3644.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3676)
                            {
                                float _3703 = _3571.x - _2928;
                                float _3704 = _3571.y - _2929;
                                float _3705 = _3571.z - _2930;
                                float _3706 = dot(vec3(_3703, _3704, _3705), vec3(_3703, _3704, _3705));
                                float _3709 = inversesqrt(_3706);
                                float _3710 = _3709 * _3703;
                                float _3711 = _3709 * _3704;
                                float _3712 = _3709 * _3705;
                                float _3716 = 1.0 - (_3706 / (_3572 * _3572));
                                float _4850 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3717 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3721 = sqrt(_3706) * _3587.w;
                                float _3723 = 1.39999997615814208984375 / (_3721 + 1.39999997615814208984375);
                                float _3724 = _3723 * _3723;
                                float _3727 = ((1.0 - _3724) * dot(vec3(_3710, _3711, _3712), vec3(_1174, _1177, _1180))) + _3724;
                                float _3730 = _3721 * _3721;
                                float _3734 = (fma(_2930, _3614.z, fma(_2929, _3614.y, _3614.x * _2928)) + _3614.w) / _3675;
                                float _3735 = (fma(_2930, _3629.z, fma(_2929, _3629.y, _3629.x * _2928)) + _3629.w) / _3675;
                                float _3739 = 1.0 - dot(vec2(_3734, _3735), vec2(_3734, _3735));
                                float _4866 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3740 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3741 = _3740 * (((isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0))) * _3717) / ((_3730 * 0.699999988079071044921875) + 1.0));
                                float _3753 = exp2(log2(1.0 / ((_3730 * 3.5) + 5.0)) * 0.25);
                                float _3754 = 1.0 - _1249;
                                float _3761 = sqrt(1.0 - ((1.0 - (_3754 * _3754)) * (1.0 - (_3753 * _3753))));
                                float _3762 = _3761 * _3761;
                                float _3763 = _3762 * _3762;
                                float _3764 = _3710 - _3213;
                                float _3765 = _3711 - _3214;
                                float _3766 = _3712 - _3215;
                                float _3770 = inversesqrt(dot(vec3(_3764, _3765, _3766), vec3(_3764, _3765, _3766)));
                                float _3774 = dot(vec3(_1174, _1177, _1180), vec3((-0.0) - _3213, (-0.0) - _3214, (-0.0) - _3215));
                                float _4877 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3777 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3778 = dot(vec3(_1174, _1177, _1180), vec3(_3770 * _3764, _3770 * _3765, _3770 * _3766));
                                float _4888 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3781 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3785 = ((_3781 * _3781) * (_3763 + (-1.0))) + 1.0;
                                float _3786 = _3723 * _3762;
                                float _3787 = _3786 * _3786;
                                float _3793 = ((1.0 - _3787) * dot(vec3(_1174, _1177, _1180), vec3(_3710, _3711, _3712))) + _3787;
                                float _4899 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3794 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                                float _3795 = 1.0 - _3762;
                                float _3805 = (0.5 / (((_3794 * ((_3777 * _3795) + _3762)) + 9.9999999392252902907785028219223e-09) + (((_3794 * _3795) + _3762) * _3777))) * _3794;
                                float _4910 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3815 = (_3740 * _3717) * (((_3763 * 3.1415927410125732421875) * (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0)))) / ((_3785 * _3785) * ((_3730 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3815 * _3599.x;
                                frontier_phi_73_pred_1 = _3815 * _3599.y;
                                frontier_phi_73_pred_2 = _3741 * _3587.z;
                                frontier_phi_73_pred_3 = _3741 * _3587.y;
                                frontier_phi_73_pred_4 = _3741 * _3587.x;
                                frontier_phi_73_pred_5 = _3815 * _3599.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3819 = frontier_phi_73_pred;
                            _3820 = frontier_phi_73_pred_1;
                            _3824 = frontier_phi_73_pred_2;
                            _3823 = frontier_phi_73_pred_3;
                            _3822 = frontier_phi_73_pred_4;
                            _3821 = frontier_phi_73_pred_5;
                            _3529 = _3822 + _3542;
                            _3530 = _3823 + _3543;
                            _3531 = _3824 + _3544;
                            _3526 = _3819 + _3539;
                            _3527 = _3820 + _3540;
                            _3528 = _3821 + _3541;
                            if (_3546 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3539 = _3526;
                                _3540 = _3527;
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3546;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3529;
                        frontier_phi_67_pred_1 = _3530;
                        frontier_phi_67_pred_2 = _3531;
                        frontier_phi_67_pred_3 = _3528;
                        frontier_phi_67_pred_4 = _3527;
                        frontier_phi_67_pred_5 = _3526;
                    }
                    _3194 = frontier_phi_67_pred;
                    _3196 = frontier_phi_67_pred_1;
                    _3198 = frontier_phi_67_pred_2;
                    _3192 = frontier_phi_67_pred_3;
                    _3190 = frontier_phi_67_pred_4;
                    _3188 = frontier_phi_67_pred_5;
                    uint _3333 = _3332 + 1u;
                    if (_3333 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3326 = _3188;
                        _3327 = _3190;
                        _3328 = _3192;
                        _3329 = _3194;
                        _3330 = _3196;
                        _3331 = _3198;
                        _3332 = _3333;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3196;
                frontier_phi_55_56_ladder_1 = _3198;
                frontier_phi_55_56_ladder_2 = _3194;
                frontier_phi_55_56_ladder_3 = _3192;
                frontier_phi_55_56_ladder_4 = _3190;
                frontier_phi_55_56_ladder_5 = _3188;
            }
            else
            {
                frontier_phi_55_56_ladder = _3083;
                frontier_phi_55_56_ladder_1 = _3085;
                frontier_phi_55_56_ladder_2 = _3081;
                frontier_phi_55_56_ladder_3 = _3079;
                frontier_phi_55_56_ladder_4 = _3077;
                frontier_phi_55_56_ladder_5 = _3075;
            }
            _3187 = frontier_phi_55_56_ladder_5;
            _3189 = frontier_phi_55_56_ladder_4;
            _3191 = frontier_phi_55_56_ladder_3;
            _3193 = frontier_phi_55_56_ladder_2;
            _3195 = frontier_phi_55_56_ladder;
            _3197 = frontier_phi_55_56_ladder_1;
        }
        float _3202 = isnan(1.0) ? _1233 : (isnan(_1233) ? 1.0 : min(_1233, 1.0));
        _2987 = (_3202 * _3193) + _2420;
        _2989 = (_3202 * _3195) + _2422;
        _2991 = (_3202 * _3197) + _2424;
        _2993 = ((_3187 * _1217) * _3202) + _2768;
        _2995 = ((_3189 * _1219) * _3202) + _2770;
        _2997 = ((_3191 * _1220) * _3202) + _2772;
    }
    else
    {
        _2987 = _2420;
        _2989 = _2422;
        _2991 = _2424;
        _2993 = _2768;
        _2995 = _2770;
        _2997 = _2772;
    }
    float _4926 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _4937 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _4948 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    uint _3017 = _269 + 6u;
    float _3025 = _1155 / cbSceneParam._m0[86u].x;
    float _3026 = _1156 / cbSceneParam._m0[86u].y;
    vec4 _3040 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3025, _3026, (log2((isnan(cbSceneParam._m0[77u].w) ? _1090 : (isnan(_1090) ? cbSceneParam._m0[77u].w : min(_1090, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3042 = _3040.x;
    float _3043 = _3040.y;
    float _3044 = _3040.z;
    float _3045 = _3040.w;
    float _3137;
    float _3139;
    float _3141;
    float _3143;
    if (_1090 > cbSceneParam._m0[78u].w)
    {
        float _3100 = isnan(_1090) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1090 : min(cbSceneParam._m0[80u].w, _1090));
        float _3101 = _3100 / _1090;
        float _3112 = _3101 * _1140;
        float _3113 = _1141 * _3101;
        float _3114 = (-0.0) - _3113;
        float _3115 = _3101 * _1142;
        float _3117 = (cbSceneParam._m0[77u].w * _3114) / _3100;
        float _3118 = _3117 + cbSceneParam._m0[79u].w;
        float _3119 = cbSceneParam._m0[79u].w - _3113;
        float _3125 = sqrt(((_3112 * _3112) + (_3113 * _3113)) + (_3115 * _3115));
        float _3128 = (1.0 - (cbSceneParam._m0[77u].w / _3100)) * _3125;
        float _3133 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3135 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3288;
        if (abs((_3114 - _3117) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3288 = ((((_3118 > 0.0) ? exp2(_3133 * _3118) : (2.0 - exp2(_3135 * _3118))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3128;
        }
        else
        {
            float _3248 = 1.0 / cbSceneParam._m0[80u].x;
            float _3249 = isnan(_3119) ? _3118 : (isnan(_3118) ? _3119 : max(_3118, _3119));
            float _3250 = isnan(_3119) ? _3118 : (isnan(_3118) ? _3119 : min(_3118, _3119));
            float _3259 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : min(_3249, 0.0));
            float _3260 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : min(_3250, 0.0));
            _3288 = ((abs(_3125 / _3114) * cbSceneParam._m0[80u].y) * ((((_3259 - _3260) * 2.0) - ((exp2(_3133 * (isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0)))) - exp2(_3133 * (isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))))) * _3248)) - ((exp2(_3135 * _3259) - exp2(_3135 * _3260)) * _3248))) + (_3128 * cbSceneParam._m0[80u].z);
        }
        vec4 _3290 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3025, _3026, 1.0), 0.0);
        float _3299 = exp2((_3288 * (-1.44269502162933349609375)) * (1.0 - _3290.w));
        float _3300 = log2(_3299);
        float _3316 = log2(_3045);
        _3137 = (exp2(_3316 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3300 * cbSceneParam._m0[78u].x)) * _3290.x) / cbSceneParam._m0[78u].x)) + _3042;
        _3139 = (exp2(_3316 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3300 * cbSceneParam._m0[78u].y)) * _3290.y) / cbSceneParam._m0[78u].y)) + _3043;
        _3141 = (exp2(_3316 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3300 * cbSceneParam._m0[78u].z)) * _3290.z) / cbSceneParam._m0[78u].z)) + _3044;
        _3143 = _3299 * _3045;
    }
    else
    {
        _3137 = _3042;
        _3139 = _3043;
        _3141 = _3044;
        _3143 = _3045;
    }
    float _3155 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3156 = _3155 == 3.0;
    float _3157 = log2(_3143);
    float _3164 = exp2(_3157 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2987 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1233))) + ((_2993 + ((isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0))) * _2039)) * cbPerFrame._m0[3u].x));
    float _3165 = exp2(_3157 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_2989 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1233))) + ((_2995 + ((isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0))) * _2039)) * cbPerFrame._m0[3u].x));
    float _3166 = exp2(_3157 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0))) * (_2991 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1233))) + ((_2997 + ((isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0))) * _2039)) * cbPerFrame._m0[3u].x));
    float _3175 = (_3155 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3175 * (_3156 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3137)));
    SV_Target.y = _3175 * (_3156 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3139)));
    SV_Target.z = _3175 * (_3156 ? _3166 : (_3166 + (cbSceneParam._m0[72u].w * _3141)));
    SV_Target.w = cbInstanceData._m0[_3017].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3017].w;
}


