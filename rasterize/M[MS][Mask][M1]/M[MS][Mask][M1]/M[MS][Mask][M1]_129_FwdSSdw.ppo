#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1729;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _252 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _253 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _254 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _260 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _261 = _260 * _252;
    float _262 = _260 * _253;
    float _263 = _260 * _254;
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = _267 * NORMAL.x;
    float _269 = _267 * NORMAL.y;
    float _270 = _267 * NORMAL.z;
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = _274 * TANGENT.x;
    float _276 = _274 * TANGENT.y;
    float _277 = _274 * TANGENT.z;
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _289 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4076 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4087 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4098 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _318) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _319) + cbTextureTilingScale._m0[13u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _386 = _381.x * cbMtdParam._m0[11u].x;
    float _387 = _381.y * cbMtdParam._m0[11u].y;
    float _388 = _381.z * cbMtdParam._m0[11u].z;
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _475 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _492 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _426.x) * 2.0) - ((((_463 - _475) * cbMtdParam._m0[23u].w) + _475) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4109 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _493 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _500 = (_493 * ((_407.x * cbMtdParam._m0[12u].x) - _386)) + _386;
    float _501 = (_493 * ((_407.y * cbMtdParam._m0[12u].y) - _387)) + _387;
    float _502 = (_493 * ((_407.z * cbMtdParam._m0[12u].z) - _388)) + _388;
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _318) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _319) + cbTextureTilingScale._m0[3u].w));
    vec4 _539 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _541 = _539.x;
    float _551 = dot(vec4(_541, _539.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _565 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _426.y) * 2.0) - ((((_541 - _551) * cbMtdParam._m0[23u].w) + _551) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4120 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _573 = (_566 * ((_519.x * cbMtdParam._m0[13u].x) - _500)) + _500;
    float _574 = (_566 * ((_519.y * cbMtdParam._m0[13u].y) - _501)) + _501;
    float _575 = (_566 * ((_519.z * cbMtdParam._m0[13u].z) - _502)) + _502;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _318) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _319) + cbTextureTilingScale._m0[24u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _613 = _611.x;
    float _623 = dot(vec4(_613, _611.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _635 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _426.z) * 2.0) - ((((_613 - _623) * cbMtdParam._m0[23u].w) + _623) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4131 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _646 = (_355.x * cbMtdParam._m0[9u].x) * ((_636 * ((_594.x * cbMtdParam._m0[14u].x) - _573)) + _573);
    float _647 = (_355.y * cbMtdParam._m0[9u].y) * ((_636 * ((_594.y * cbMtdParam._m0[14u].y) - _574)) + _574);
    float _648 = (_355.z * cbMtdParam._m0[9u].z) * ((_636 * ((_594.z * cbMtdParam._m0[14u].z) - _575)) + _575);
    float _652 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _332.x) * _646;
    float _655 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _332.y) * _647;
    float _658 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _332.z) * _648;
    float _666 = (((_646 - _652) * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) + _652) * 4.55000019073486328125;
    float _668 = (((_647 - _655) * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) + _655) * 4.55000019073486328125;
    float _670 = (((_648 - _658) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) + _658) * 4.55000019073486328125;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _318) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _319) + cbTextureTilingScale._m0[20u].w));
    vec4 _712 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _318) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _319) + cbTextureTilingScale._m0[4u].w));
    vec4 _729 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _731 = _729.x;
    float _732 = _729.y;
    float _733 = _729.z;
    float _740 = ((_712.x - _731) * _493) + _731;
    float _741 = ((_712.y - _732) * _493) + _732;
    float _742 = ((_712.z - _733) * _493) + _733;
    vec4 _754 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _318) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _319) + cbTextureTilingScale._m0[2u].w));
    float _765 = ((_754.x - _740) * _566) + _740;
    float _766 = ((_754.y - _741) * _566) + _741;
    float _767 = ((_754.z - _742) * _566) + _742;
    vec4 _779 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _318) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _319) + cbTextureTilingScale._m0[23u].w));
    float _792 = ((_779.z - _767) * _636) + _767;
    float _795 = ((((_779.x - _765) * _636) + _765) * 2.0) + (-1.0);
    float _796 = ((((_779.y - _766) * _636) + _766) * 2.0) + (-1.0);
    float _797 = dot(vec2(_795, _796), vec2(_795, _796));
    float _4142 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _802 = sqrt(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))));
    vec4 _820 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _832 = (_795 + ((((_687.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_820.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _833 = (_796 + ((((_687.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_820.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _836 = fma(_802, _268, fma(_833, _275, _832 * _261));
    float _839 = fma(_802, _269, fma(_833, _276, _832 * _262));
    float _842 = fma(_802, _270, fma(_833, _277, _832 * _263));
    float _846 = inversesqrt(dot(vec3(_836, _839, _842), vec3(_836, _839, _842)));
    vec4 _873 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _318) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _319) + cbTextureTilingScale._m0[11u].w));
    float _875 = _873.x;
    float _876 = 1.0 - _875;
    float _884 = (cbMtdParam._m0[19u].x + dot(vec4(_846 * _836, _846 * _839, _846 * _842, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_875 - _876) * cbMtdParam._m0[24u].z) + _876) * cbMtdParam._m0[21u].z);
    float _4153 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _885 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _887 = (-0.0) - cbMtdParam._m0[24u].x;
    float _889 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _889 : (isnan(_889) ? 1.0 : min(_889, 1.0));
    float _897 = _885 - ((_885 * TEXCOORD_8.x) * _890);
    float _898 = _885 - ((_885 * TEXCOORD_8.y) * _890);
    float _899 = _885 - ((_885 * TEXCOORD_8.z) * _890);
    float _906 = (_897 * (cbMtdParam._m0[17u].x - _666)) + _666;
    float _907 = (_898 * (cbMtdParam._m0[17u].y - _668)) + _668;
    float _908 = (_899 * (cbMtdParam._m0[17u].z - _670)) + _670;
    float _923 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _924 = _923 * TEXCOORD.z;
    float _925 = _923 * TEXCOORD.w;
    vec4 _937 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _924) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _925) + cbTextureTilingScale._m0[19u].w));
    float _939 = _937.x;
    float _940 = 1.0 - _939;
    float _966 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_939 - _940) * cbMtdParam._m0[24u].w) + _940) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4174 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _967 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _975 = ((((cbMtdParam._m0[10u].x - _906) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _967) + _906;
    float _976 = ((((cbMtdParam._m0[10u].y - _907) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _967) + _907;
    float _977 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _908)) * _967) + _908;
    vec4 _1003 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _1005 = _1003.x;
    float _1022 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w)).x - _1005) * _493) + _1005;
    float _1039 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _318) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _319) + cbTextureTilingScale._m0[21u].w)).x - _1022) * _566) + _1022;
    float _1056 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _318) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _319) + cbTextureTilingScale._m0[10u].w)).x - _1039) * _636) + _1039;
    float _1062 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1056) * cbMtdParam._m0[19u].z) + _1056;
    float _1064 = _1062 - (_1062 * _897);
    float _1066 = _1064 - (_1064 * _967);
    float _1071 = (((_687.z - _792) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _792;
    float _1075 = ((_820.z - _1071) * cbMtdParam._m0[19u].w) + _1071;
    vec4 _1091 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _318) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _319) + cbTextureTilingScale._m0[15u].w));
    float _1098 = (_1091.x * 2.0) + (-1.0);
    float _1099 = (_1091.y * 2.0) + (-1.0);
    float _1100 = dot(vec2(_1098, _1099), vec2(_1098, _1099));
    float _4185 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1108 = ((_1091.z - _1075) * _897) + _1075;
    float _1111 = ((cbMtdParam._m0[23u].x - _1108) * _967) + _1108;
    vec4 _1134 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _924) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _925) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1140 = (_1134.x * 2.0) + (-1.0);
    float _1141 = (_1134.y * 2.0) + (-1.0);
    float _1142 = dot(vec2(_1140, _1141), vec2(_1140, _1141));
    float _4196 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1157 = ((sqrt(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) - _802) * _899) + _802;
    float _1160 = (((_1098 - _832) * _897) + _832) + (cbMtdParam._m0[21u].x * _832);
    float _1161 = (((_1099 - _833) * _898) + _833) + (cbMtdParam._m0[21u].x * _833);
    float _1172 = (((_1140 - _1160) + (_1160 * cbMtdParam._m0[22u].z)) * _967) + _1160;
    float _1173 = (((_1141 - _1161) + (_1161 * cbMtdParam._m0[22u].z)) * _967) + _1161;
    float _1174 = (_967 * (sqrt(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) - _1157)) + _1157;
    float _1176 = cbMtdParam._m0[22u].x + _820.w;
    float _1179 = fma(_1174, _268, fma(_1173, _275, _1172 * _261));
    float _1182 = fma(_1174, _269, fma(_1173, _276, _1172 * _262));
    float _1185 = fma(_1174, _270, fma(_1173, _277, _1172 * _263));
    float _1189 = inversesqrt(dot(vec3(_1179, _1182, _1185), vec3(_1179, _1182, _1185)));
    float _1190 = _1189 * _1179;
    float _1191 = _1189 * _1182;
    float _1192 = _1189 * _1185;
    float _4207 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1193 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _4229 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _4240 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _4251 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4262 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1198 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _1212 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1252 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1262 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1252);
    float _1263 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1252);
    float _1264 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1252);
    float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
    float _1269 = _1262 * _1268;
    float _1270 = _1263 * _1268;
    float _1271 = _1264 * _1268;
    float _1277 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1278 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1296 = fma(_1192, cbSceneParam._m0[5u].z, fma(_1191, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1190));
    float _1299 = fma(_1192, cbSceneParam._m0[6u].z, fma(_1191, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1190));
    float _1302 = fma(_1192, cbSceneParam._m0[7u].z, fma(_1191, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1190));
    uint _1316 = (_299 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1322 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * cbInstanceData._m0[_1316].x;
    float _1323 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * cbInstanceData._m0[_1316].y;
    float _1324 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * cbInstanceData._m0[_1316].z;
    float _4273 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
    float _1325 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _4284 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
    float _1326 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _4295 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
    float _1327 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _1328 = 1.0 - _1198;
    float _1329 = _1325 * _1328;
    float _1330 = _1326 * _1328;
    float _1331 = _1327 * _1328;
    float _1336 = (_1325 + (-0.039999999105930328369140625)) * _1198;
    float _1337 = (_1326 + (-0.039999999105930328369140625)) * _1198;
    float _1338 = (_1327 + (-0.039999999105930328369140625)) * _1198;
    float _1339 = _1336 + 0.039999999105930328369140625;
    float _1341 = _1337 + 0.039999999105930328369140625;
    float _1342 = _1338 + 0.039999999105930328369140625;
    vec4 _1351 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1277, cbSceneParam._m0[86u].y * _1278));
    float _1355 = ((isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * TEXCOORD_5.w) * _1351.x;
    float _1356 = dot(vec3(_1190, _1191, _1192), vec3(_1269, _1270, _1271));
    float _1359 = _1356 * 2.0;
    float _1363 = (_1359 * _1190) - _1269;
    float _1364 = (_1359 * _1191) - _1270;
    float _1365 = (_1359 * _1192) - _1271;
    float _1369 = abs(dot(vec3(_1269, _1270, _1271), vec3(_1190, _1191, _1192)));
    float _4306 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
    float _1371 = sqrt(_1193);
    float _1384 = exp2((_1371 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1371 * 3.0));
    float _1390 = (1.0 - _1384) * ((_1371 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1391 = _1384 * _1371;
    float _1419 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1423 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1427 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1728;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1453 = fma(_1427, cbModelParam._m0[26u].z, fma(_1423, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1419));
        float _1457 = fma(_1427, cbModelParam._m0[27u].z, fma(_1423, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1419));
        float _1461 = fma(_1427, cbModelParam._m0[28u].z, fma(_1423, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1419));
        float _1486 = _1419 + _1190;
        float _1487 = _1423 + _1191;
        float _1488 = _1427 + _1192;
        float _1498 = fma(_1488, cbModelParam._m0[26u].z, fma(_1487, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1486)) - _1453;
        float _1499 = fma(_1488, cbModelParam._m0[27u].z, fma(_1487, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1486)) - _1457;
        float _1500 = fma(_1488, cbModelParam._m0[28u].z, fma(_1487, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1486)) - _1461;
        float _1504 = inversesqrt(dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500)));
        float _1517 = ((_1504 * _1498) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1453 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1504 * _1499) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1457 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1519 = ((_1504 * _1500) / cbModelParam._m0[34u].z) + ((((((_1461 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        float _1556 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1522.x + (-0.5));
        float _1558 = _1556 * (_1522.y + (-0.5));
        float _1559 = _1556 * (_1522.z + (-0.5));
        float _1566 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1529.x + (-0.5));
        float _1568 = _1566 * (_1529.y + (-0.5));
        float _1569 = _1566 * (_1529.z + (-0.5));
        float _1576 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1536.x + (-0.5));
        float _1578 = _1576 * (_1536.y + (-0.5));
        float _1579 = _1576 * (_1536.z + (-0.5));
        float _1586 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1543.x + (-0.5));
        float _1588 = _1586 * (_1543.y + (-0.5));
        float _1589 = _1586 * (_1543.z + (-0.5));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = _1557 * 0.5;
        float _1594 = _1567 * 0.5;
        float _1595 = _1577 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1610 = (dot(vec3(_1190, _1191, _1192), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1620 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4354 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1622 + 1.0))) + _1627) * _1590;
        float _1637 = _1558 * 0.5;
        float _1638 = _1568 * 0.5;
        float _1639 = _1578 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_1190, _1191, _1192), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1591 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4387 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1664 + 1.0))) + _1669) * _1591;
        float _1679 = _1559 * 0.5;
        float _1680 = _1569 * 0.5;
        float _1681 = _1579 * 0.5;
        float _1682 = dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681));
        float _1687 = (_1682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1682);
        float _1695 = (dot(vec3(_1190, _1191, _1192), vec3(_1687 * _1679, _1687 * _1680, _1687 * _1681)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1704 = sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681)) / (_1592 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1706 = _1705 * 2.0;
        float _1710 = (1.0 - _1705) / (_1705 + 1.0);
        float _4420 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1720 = ((((1.0 - _1711) * (_1706 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1706 + 1.0))) + _1711) * _1592;
        _1728 = _1559;
        _1730 = _1558;
        _1731 = _1557;
        _1732 = _1569;
        _1733 = _1568;
        _1734 = _1567;
        _1735 = _1579;
        _1736 = _1578;
        _1737 = _1577;
        _1738 = _1592;
        _1739 = _1591;
        _1740 = _1590;
        _1741 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
        _1742 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
        _1743 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)));
    }
    else
    {
        _1728 = _1729;
        _1730 = _1729;
        _1731 = _1729;
        _1732 = _1729;
        _1733 = _1729;
        _1734 = _1729;
        _1735 = _1729;
        _1736 = _1729;
        _1737 = _1729;
        _1738 = _1729;
        _1739 = _1729;
        _1740 = _1729;
        _1741 = 0.0;
        _1742 = 0.0;
        _1743 = 0.0;
    }
    float _2035;
    float _2036;
    float _2037;
    float _2038;
    float _2039;
    float _2040;
    float _2041;
    float _2042;
    float _2043;
    float _2044;
    float _2045;
    float _2046;
    float _2047;
    float _2048;
    float _2049;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1766 = fma(_1427, cbModelParam._m0[30u].z, fma(_1423, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1419));
        float _1770 = fma(_1427, cbModelParam._m0[31u].z, fma(_1423, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1419));
        float _1774 = fma(_1427, cbModelParam._m0[32u].z, fma(_1423, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1419));
        float _1797 = _1419 + _1190;
        float _1798 = _1423 + _1191;
        float _1799 = _1427 + _1192;
        float _1809 = fma(_1799, cbModelParam._m0[30u].z, fma(_1798, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1797)) - _1766;
        float _1810 = fma(_1799, cbModelParam._m0[31u].z, fma(_1798, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1797)) - _1770;
        float _1811 = fma(_1799, cbModelParam._m0[32u].z, fma(_1798, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1797)) - _1774;
        float _1815 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
        float _1828 = ((_1815 * _1809) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1766 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1829 = ((_1815 * _1810) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1770 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1830 = ((_1815 * _1811) / cbModelParam._m0[35u].z) + ((((((_1774 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1832 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1828, _1829, _1830), 0.0);
        vec4 _1839 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1828, _1829, _1830), 0.0);
        vec4 _1846 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1828, _1829, _1830), 0.0);
        vec4 _1853 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1828, _1829, _1830), 0.0);
        float _1865 = exp2((_1832.w + (-0.5)) * 20.0) * 2.0;
        float _1866 = _1865 * (_1832.x + (-0.5));
        float _1867 = _1865 * (_1832.y + (-0.5));
        float _1868 = _1865 * (_1832.z + (-0.5));
        float _1875 = exp2((_1839.w + (-0.5)) * 20.0) * 2.0;
        float _1876 = _1875 * (_1839.x + (-0.5));
        float _1877 = _1875 * (_1839.y + (-0.5));
        float _1878 = _1875 * (_1839.z + (-0.5));
        float _1885 = exp2((_1846.w + (-0.5)) * 20.0) * 2.0;
        float _1886 = _1885 * (_1846.x + (-0.5));
        float _1887 = _1885 * (_1846.y + (-0.5));
        float _1888 = _1885 * (_1846.z + (-0.5));
        float _1895 = exp2((_1853.w + (-0.5)) * 20.0) * 2.0;
        float _1896 = _1895 * (_1853.x + (-0.5));
        float _1897 = _1895 * (_1853.y + (-0.5));
        float _1898 = _1895 * (_1853.z + (-0.5));
        float _1899 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1900 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1901 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1902 = _1866 * 0.5;
        float _1903 = _1876 * 0.5;
        float _1904 = _1886 * 0.5;
        float _1905 = dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904));
        float _1910 = (_1905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1905);
        float _1918 = (dot(vec3(_1190, _1191, _1192), vec3(_1910 * _1902, _1910 * _1903, _1910 * _1904)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1927 = sqrt(((_1903 * _1903) + (_1902 * _1902)) + (_1904 * _1904)) / (_1899 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1928 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1929 = _1928 * 2.0;
        float _1933 = (1.0 - _1928) / (_1928 + 1.0);
        float _4483 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1943 = ((((1.0 - _1934) * (_1929 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1929 + 1.0))) + _1934) * _1899;
        float _1944 = _1867 * 0.5;
        float _1945 = _1877 * 0.5;
        float _1946 = _1887 * 0.5;
        float _1947 = dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946));
        float _1952 = (_1947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1947);
        float _1960 = (dot(vec3(_1190, _1191, _1192), vec3(_1952 * _1944, _1952 * _1945, _1952 * _1946)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1969 = sqrt(((_1945 * _1945) + (_1944 * _1944)) + (_1946 * _1946)) / (_1900 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1971 = _1970 * 2.0;
        float _1975 = (1.0 - _1970) / (_1970 + 1.0);
        float _4516 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1976 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1985 = ((((1.0 - _1976) * (_1971 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1971 + 1.0))) + _1976) * _1900;
        float _1986 = _1868 * 0.5;
        float _1987 = _1878 * 0.5;
        float _1988 = _1888 * 0.5;
        float _1989 = dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988));
        float _1994 = (_1989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1989);
        float _2002 = (dot(vec3(_1190, _1191, _1192), vec3(_1994 * _1986, _1994 * _1987, _1994 * _1988)) + 1.0) * 0.5;
        float _4527 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2011 = sqrt(((_1987 * _1987) + (_1986 * _1986)) + (_1988 * _1988)) / (_1901 + 9.9999997473787516355514526367188e-06);
        float _4538 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2012 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2013 = _2012 * 2.0;
        float _2017 = (1.0 - _2012) / (_2012 + 1.0);
        float _4549 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2018 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2027 = ((((1.0 - _2018) * (_2013 + 2.0)) * exp2(log2(isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2013 + 1.0))) + _2018) * _1901;
        _2035 = _1868;
        _2036 = _1867;
        _2037 = _1866;
        _2038 = _1878;
        _2039 = _1877;
        _2040 = _1876;
        _2041 = _1888;
        _2042 = _1887;
        _2043 = _1886;
        _2044 = _1901;
        _2045 = _1900;
        _2046 = _1899;
        _2047 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)));
        _2048 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)));
        _2049 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0)));
    }
    else
    {
        _2035 = _1729;
        _2036 = _1729;
        _2037 = _1729;
        _2038 = _1729;
        _2039 = _1729;
        _2040 = _1729;
        _2041 = _1729;
        _2042 = _1729;
        _2043 = _1729;
        _2044 = _1729;
        _2045 = _1729;
        _2046 = _1729;
        _2047 = 0.0;
        _2048 = 0.0;
        _2049 = 0.0;
    }
    float _2059 = (cbModelParam._m0[1u].x * (_2047 - _1741)) + _1741;
    float _2060 = (cbModelParam._m0[1u].x * (_2048 - _1742)) + _1742;
    float _2061 = (cbModelParam._m0[1u].x * (_2049 - _1743)) + _1743;
    float _2082 = fma(_2061, cbSceneParam._m0[89u].z, fma(_2060, cbSceneParam._m0[89u].y, _2059 * cbSceneParam._m0[89u].x));
    float _2085 = fma(_2061, cbSceneParam._m0[90u].z, fma(_2060, cbSceneParam._m0[90u].y, _2059 * cbSceneParam._m0[90u].x));
    float _2088 = fma(_2061, cbSceneParam._m0[91u].z, fma(_2060, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2059));
    float _2103 = _1363 * 0.5;
    float _2104 = _1364 * 0.5;
    float _2105 = _1365 * 0.5;
    float _2106 = dot(vec4(_2103, _2104, _2105, 1.0), vec4(_2037, _2040, _2043, _2046));
    float _2109 = dot(vec4(_2103, _2104, _2105, 1.0), vec4(_2036, _2039, _2042, _2045));
    float _2112 = dot(vec4(_2103, _2104, _2105, 1.0), vec4(_2035, _2038, _2041, _2044));
    float _2146;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2119 = dot(vec4(_2103, _2104, _2105, 1.0), vec4(_1728, _1732, _1735, _1738));
        float _2123 = dot(vec4(_2103, _2104, _2105, 1.0), vec4(_1730, _1733, _1736, _1739));
        float _2127 = dot(vec4(_2103, _2104, _2105, 1.0), vec4(_1731, _1734, _1737, _1740));
        float _2134 = dot(vec4(cbModelParam._m0[39u]), vec4(_2103, _2104, _2105, 1.0));
        _2146 = dot(vec3(isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0)), isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0)), isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2134) ? 0.0 : (isnan(0.0) ? _2134 : max(0.0, _2134))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2146 = 1.0;
    }
    float _2157;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2148 = dot(vec4(cbModelParam._m0[40u]), vec4(_2103, _2104, _2105, 1.0));
        _2157 = dot(vec3(isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0)), isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0)), isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2148) ? 0.0 : (isnan(0.0) ? _2148 : max(0.0, _2148))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2157 = 1.0;
    }
    float _2161 = (_2157 * cbModelParam._m0[1u].x) + (_2146 * (1.0 - cbModelParam._m0[1u].x));
    float _2171 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1193);
    float _2172 = isnan(_2171) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2171 : min(cbModelParam._m0[25u].z, _2171));
    float _2252;
    float _2254;
    float _2256;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2219 = fma(_1427, cbModelParam._m0[13u].z, fma(_1423, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1419)) + cbModelParam._m0[13u].w;
        float _2223 = fma(_1427, cbModelParam._m0[14u].z, fma(_1423, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1419)) + cbModelParam._m0[14u].w;
        float _2227 = fma(_1427, cbModelParam._m0[15u].z, fma(_1423, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1419)) + cbModelParam._m0[15u].w;
        float _2230 = fma(_1365, cbModelParam._m0[13u].z, fma(_1364, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1363));
        float _2233 = fma(_1365, cbModelParam._m0[14u].z, fma(_1364, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1363));
        float _2236 = fma(_1365, cbModelParam._m0[15u].z, fma(_1364, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1363));
        float _2264;
        if (_2230 > 0.0)
        {
            _2264 = abs((1.0 - _2219) / _2230);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2230 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2219 + 1.0) / _2230);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2264 = frontier_phi_14_12_ladder;
        }
        float _2488;
        if (_2233 > 0.0)
        {
            _2488 = abs((1.0 - _2223) / _2233);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2233 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2223 + 1.0) / _2233);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2488 = frontier_phi_23_19_ladder;
        }
        float _2745;
        if (_2236 > 0.0)
        {
            _2745 = abs((1.0 - _2227) / _2236);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2236 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2227 + 1.0) / _2236);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2745 = frontier_phi_35_30_ladder;
        }
        float _2747 = isnan(_2488) ? _2264 : (isnan(_2264) ? _2488 : min(_2264, _2488));
        float _2748 = isnan(_2745) ? _2747 : (isnan(_2747) ? _2745 : min(_2747, _2745));
        float _2752 = (_2748 * _2230) + _2219;
        float _2753 = (_2748 * _2233) + _2223;
        float _2754 = (_2748 * _2236) + _2227;
        float _2755 = _2748 * 9.9999997473787516355514526367188e-05;
        float _2757 = (-1.0) - _2755;
        float _2759 = _2755 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2754 > _2759) || ((_2754 < _2757) || ((_2753 > _2759) || ((_2753 < _2757) || ((_2752 < _2757) || (_2752 > _2759))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2882 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2754, cbModelParam._m0[9u].z, fma(_2753, cbModelParam._m0[9u].y, _2752 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2754, cbModelParam._m0[10u].z, fma(_2753, cbModelParam._m0[10u].y, _2752 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2754, cbModelParam._m0[11u].z, fma(_2753, cbModelParam._m0[11u].y, _2752 * cbModelParam._m0[11u].x))), _2172);
            frontier_phi_13_35_ladder = _2882.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2882.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2882.x * cbModelParam._m0[1u].y;
        }
        _2252 = frontier_phi_13_35_ladder_2;
        _2254 = frontier_phi_13_35_ladder_1;
        _2256 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2240 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1363, _1364, _1365), _2172);
        _2252 = _2240.x * cbModelParam._m0[1u].y;
        _2254 = _2240.y * cbModelParam._m0[1u].y;
        _2256 = _2240.z * cbModelParam._m0[1u].y;
    }
    float _2260 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1193);
    float _2261 = isnan(_2260) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2260 : min(cbModelParam._m0[25u].w, _2260));
    float _2351;
    float _2353;
    float _2355;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2315 = fma(_1427, cbModelParam._m0[21u].z, fma(_1423, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1419)) + cbModelParam._m0[21u].w;
        float _2319 = fma(_1427, cbModelParam._m0[22u].z, fma(_1423, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1419)) + cbModelParam._m0[22u].w;
        float _2323 = fma(_1427, cbModelParam._m0[23u].z, fma(_1423, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1419)) + cbModelParam._m0[23u].w;
        float _2326 = fma(_1365, cbModelParam._m0[21u].z, fma(_1364, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1363));
        float _2329 = fma(_1365, cbModelParam._m0[22u].z, fma(_1364, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1363));
        float _2332 = fma(_1365, cbModelParam._m0[23u].z, fma(_1364, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1363));
        float _2493;
        if (_2326 > 0.0)
        {
            _2493 = abs((1.0 - _2315) / _2326);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2326 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2315 + 1.0) / _2326);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2493 = frontier_phi_25_21_ladder;
        }
        float _2772;
        if (_2329 > 0.0)
        {
            _2772 = abs((1.0 - _2319) / _2329);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2329 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2319 + 1.0) / _2329);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2772 = frontier_phi_37_32_ladder;
        }
        float _2985;
        if (_2332 > 0.0)
        {
            _2985 = abs((1.0 - _2323) / _2332);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2332 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2323 + 1.0) / _2332);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2985 = frontier_phi_46_43_ladder;
        }
        float _2987 = isnan(_2772) ? _2493 : (isnan(_2493) ? _2772 : min(_2493, _2772));
        float _2988 = isnan(_2985) ? _2987 : (isnan(_2987) ? _2985 : min(_2987, _2985));
        float _2992 = (_2988 * _2326) + _2315;
        float _2993 = (_2988 * _2329) + _2319;
        float _2994 = (_2988 * _2332) + _2323;
        float _2995 = _2988 * 9.9999997473787516355514526367188e-05;
        float _2996 = (-1.0) - _2995;
        float _2998 = _2995 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2994 > _2998) || ((_2994 < _2996) || ((_2993 > _2998) || ((_2993 < _2996) || ((_2992 < _2996) || (_2992 > _2998))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3193 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2994, cbModelParam._m0[17u].z, fma(_2993, cbModelParam._m0[17u].y, _2992 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2994, cbModelParam._m0[18u].z, fma(_2993, cbModelParam._m0[18u].y, _2992 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2994, cbModelParam._m0[19u].z, fma(_2993, cbModelParam._m0[19u].y, _2992 * cbModelParam._m0[19u].x))), _2261);
            frontier_phi_22_46_ladder = _3193.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3193.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3193.x * cbModelParam._m0[1u].z;
        }
        _2351 = frontier_phi_22_46_ladder_2;
        _2353 = frontier_phi_22_46_ladder_1;
        _2355 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2335 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1363, _1364, _1365), _2261);
        _2351 = _2335.x * cbModelParam._m0[1u].z;
        _2353 = _2335.y * cbModelParam._m0[1u].z;
        _2355 = _2335.z * cbModelParam._m0[1u].z;
    }
    float _2368 = (((_1390 * _1339) + _1391) * _1355) * ((cbModelParam._m0[1u].w * (_2351 - _2252)) + _2252);
    float _2370 = (((_1390 * _1341) + _1391) * _1355) * ((cbModelParam._m0[1u].w * (_2353 - _2254)) + _2254);
    float _2372 = (((_1390 * _1342) + _1391) * _1355) * ((cbModelParam._m0[1u].w * (_2355 - _2256)) + _2256);
    float _2375 = fma(_2372, cbSceneParam._m0[89u].z, fma(_2370, cbSceneParam._m0[89u].y, _2368 * cbSceneParam._m0[89u].x));
    float _2378 = fma(_2372, cbSceneParam._m0[90u].z, fma(_2370, cbSceneParam._m0[90u].y, _2368 * cbSceneParam._m0[90u].x));
    float _2381 = fma(_2372, cbSceneParam._m0[91u].z, fma(_2370, cbSceneParam._m0[91u].y, _2368 * cbSceneParam._m0[91u].x));
    vec4 _2389 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1277, _1278));
    float _2391 = _2389.w;
    float _2403 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2391);
    float _2404 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2391);
    float _2405 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2391);
    uvec4 _2409 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _2411 = _2409.x * 14u;
    uint _2412 = _2411 + 13u;
    float _2419 = _1355 + (-1.0);
    float _2424 = (cbLight._m0[_2412].x * _2419) + 1.0;
    float _2425 = (cbLight._m0[_2412].y * _2419) + 1.0;
    float _2426 = (cbLight._m0[_2412].z * _2419) + 1.0;
    float _2427 = (cbLight._m0[_2412].w * _2419) + 1.0;
    uint _2428 = _2411 + 5u;
    float _2434 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
    uint _2438 = _2411 + 4u;
    float _2447 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
    uint _2451 = _2411 | 1u;
    float _2462 = dot(vec3(cbLight._m0[_2411].xyz), vec3(_1190, _1191, _1192));
    float _2465 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_1190, _1191, _1192));
    float _4685 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _4696 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2470 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * 0.3183098733425140380859375;
    float _2472 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * 0.3183098733425140380859375;
    float _2479 = ((cbLight._m0[_2428].x * _2434) * _2472) + (((cbLight._m0[_2438].x * _2403) * _2447) * _2470);
    float _2480 = ((_2434 * cbLight._m0[_2428].y) * _2472) + (((cbLight._m0[_2438].y * _2404) * _2447) * _2470);
    float _2481 = ((_2434 * cbLight._m0[_2428].z) * _2472) + (((cbLight._m0[_2438].z * _2405) * _2447) * _2470);
    uvec4 _2485 = floatBitsToUint(cbLight._m0[_2411 + 12u]);
    bool _2487 = _2485.x == 0u;
    float _2498;
    float _2500;
    float _2502;
    if (_2487)
    {
        _2498 = _2479;
        _2500 = _2480;
        _2502 = _2481;
    }
    else
    {
        uint _2506 = _2411 + 6u;
        float _2522 = (dot(vec3(cbLight._m0[_2411 + 2u].xyz), vec3(_1190, _1191, _1192)) * 0.5) + 0.5;
        float _2523 = _2522 * _2522;
        float _4707 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2524 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2525 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
        _2498 = (((cbLight._m0[_2506].x * 0.3183098733425140380859375) * _2524) * _2525) + _2479;
        _2500 = (((cbLight._m0[_2506].y * 0.3183098733425140380859375) * _2524) * _2525) + _2480;
        _2502 = (((cbLight._m0[_2506].z * 0.3183098733425140380859375) * _2524) * _2525) + _2481;
    }
    bool _2505 = _2485.y == 0u;
    float _2543;
    float _2545;
    float _2547;
    if (_2505)
    {
        _2543 = _2498;
        _2545 = _2500;
        _2547 = _2502;
    }
    else
    {
        uint _2716 = _2411 + 7u;
        float _2732 = (dot(vec3(cbLight._m0[_2411 + 3u].xyz), vec3(_1190, _1191, _1192)) * 0.5) + 0.5;
        float _2733 = _2732 * _2732;
        float _4723 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2734 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2735 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
        _2543 = (((cbLight._m0[_2716].x * 0.3183098733425140380859375) * _2734) * _2735) + _2498;
        _2545 = (((cbLight._m0[_2716].y * 0.3183098733425140380859375) * _2734) * _2735) + _2500;
        _2547 = (((cbLight._m0[_2716].z * 0.3183098733425140380859375) * _2734) * _2735) + _2502;
    }
    uint _2550 = _2411 + 8u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2411].w)) * _1193) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2411].x + _1269;
    float _2566 = cbLight._m0[_2411].y + _1270;
    float _2567 = cbLight._m0[_2411].z + _1271;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_1190, _1191, _1192), vec3(cbLight._m0[_2411].xyz));
    float _4739 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _4750 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
    float _2579 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2580 = dot(vec3(_1190, _1191, _1192), vec3(_2572, _2573, _2574));
    float _4761 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
    float _2584 = dot(vec3(cbLight._m0[_2411].xyz), vec3(_2572, _2573, _2574));
    float _4772 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2588 = _2564 * _2564;
    float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
    float _2600 = exp2(log2(1.0 - (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) * 5.0);
    float _2601 = 0.959999978542327880859375 - _1336;
    float _2603 = 0.959999978542327880859375 - _1337;
    float _2604 = 0.959999978542327880859375 - _1338;
    float _2611 = 1.0 - _2564;
    float _2622 = (0.5 / (((_2579 * ((_2578 * _2611) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2611) + _2564) * _2578))) * _2578;
    float _4783 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2624 = (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
    uint _2638 = _2411 + 9u;
    float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _1193) * 0.949999988079071044921875);
    float _2650 = _2649 * _2649;
    float _2651 = cbLight._m0[_2451].x + _1269;
    float _2652 = cbLight._m0[_2451].y + _1270;
    float _2653 = cbLight._m0[_2451].z + _1271;
    float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
    float _2658 = _2657 * _2651;
    float _2659 = _2657 * _2652;
    float _2660 = _2657 * _2653;
    float _2661 = dot(vec3(_1190, _1191, _1192), vec3(cbLight._m0[_2451].xyz));
    float _4794 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
    float _2665 = dot(vec3(_1190, _1191, _1192), vec3(_2658, _2659, _2660));
    float _4805 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2668 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
    float _2669 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2658, _2659, _2660));
    float _4816 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2673 = _2650 * _2650;
    float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
    float _2684 = exp2(log2(1.0 - (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0)))) * 5.0);
    float _2691 = 1.0 - _2650;
    float _2701 = (0.5 / (((_2579 * ((_2664 * _2691) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2691) + _2650) * _2664))) * _2664;
    float _4827 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2703 = (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
    float _2713 = (((((_2684 * _2601) + _1339) * cbLight._m0[_2638].x) * _2703) * _2434) + ((((cbLight._m0[_2550].x * _2403) * ((_2600 * _2601) + _1339)) * _2624) * _2447);
    float _2714 = (((((_2684 * _2603) + _1341) * cbLight._m0[_2638].y) * _2703) * _2434) + ((((cbLight._m0[_2550].y * _2404) * ((_2600 * _2603) + _1341)) * _2624) * _2447);
    float _2715 = (((((_2684 * _2604) + _1342) * cbLight._m0[_2638].z) * _2703) * _2434) + ((((cbLight._m0[_2550].z * _2405) * ((_2600 * _2604) + _1342)) * _2624) * _2447);
    float _2777;
    float _2779;
    float _2781;
    if (_2487)
    {
        _2777 = _2713;
        _2779 = _2714;
        _2781 = _2715;
    }
    else
    {
        uint _2783 = _2411 + 2u;
        uint _2787 = _2411 + 10u;
        float _2801 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2783].w)) * _1193) * 0.949999988079071044921875);
        float _2802 = _2801 * _2801;
        float _2803 = cbLight._m0[_2783].x + _1269;
        float _2804 = cbLight._m0[_2783].y + _1270;
        float _2805 = cbLight._m0[_2783].z + _1271;
        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
        float _2810 = _2809 * _2803;
        float _2811 = _2809 * _2804;
        float _2812 = _2809 * _2805;
        float _2813 = dot(vec3(_1190, _1191, _1192), vec3(cbLight._m0[_2783].xyz));
        float _4838 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2817 = dot(vec3(_1190, _1191, _1192), vec3(_2810, _2811, _2812));
        float _4849 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2821 = dot(vec3(cbLight._m0[_2783].xyz), vec3(_2810, _2811, _2812));
        float _4860 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2825 = _2802 * _2802;
        float _2829 = ((_2820 * _2820) * (_2825 + (-1.0))) + 1.0;
        float _2836 = exp2(log2(1.0 - (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) * 5.0);
        float _2843 = 1.0 - _2802;
        float _2853 = (0.5 / (((_2579 * ((_2816 * _2843) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2843) + _2802) * _2816))) * _2816;
        float _4871 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2855 = (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2825 / ((_2829 * _2829) * 3.141590118408203125));
        float _2856 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
        _2777 = (((((_2836 * _2601) + _1339) * cbLight._m0[_2787].x) * _2855) * _2856) + _2713;
        _2779 = (((((_2836 * _2603) + _1341) * cbLight._m0[_2787].y) * _2855) * _2856) + _2714;
        _2781 = (((((_2836 * _2604) + _1342) * cbLight._m0[_2787].z) * _2855) * _2856) + _2715;
    }
    float _2891;
    float _2893;
    float _2895;
    if (_2505)
    {
        _2891 = _2777;
        _2893 = _2779;
        _2895 = _2781;
    }
    else
    {
        uint _2902 = _2411 + 3u;
        uint _2906 = _2411 + 11u;
        float _2920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2902].w)) * _1193) * 0.949999988079071044921875);
        float _2921 = _2920 * _2920;
        float _2922 = cbLight._m0[_2902].x + _1269;
        float _2923 = cbLight._m0[_2902].y + _1270;
        float _2924 = cbLight._m0[_2902].z + _1271;
        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
        float _2929 = _2928 * _2922;
        float _2930 = _2928 * _2923;
        float _2931 = _2928 * _2924;
        float _2932 = dot(vec3(_1190, _1191, _1192), vec3(cbLight._m0[_2902].xyz));
        float _4887 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2935 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
        float _2936 = dot(vec3(_1190, _1191, _1192), vec3(_2929, _2930, _2931));
        float _4898 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2939 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
        float _2940 = dot(vec3(cbLight._m0[_2902].xyz), vec3(_2929, _2930, _2931));
        float _4909 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2944 = _2921 * _2921;
        float _2948 = ((_2939 * _2939) * (_2944 + (-1.0))) + 1.0;
        float _2955 = exp2(log2(1.0 - (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) * 5.0);
        float _2962 = 1.0 - _2921;
        float _2972 = (0.5 / (((_2579 * ((_2935 * _2962) + _2921)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2962) + _2921) * _2935))) * _2935;
        float _4920 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2974 = (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2944 / ((_2948 * _2948) * 3.141590118408203125));
        float _2975 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
        _2891 = (((((_2955 * _2601) + _1339) * cbLight._m0[_2906].x) * _2974) * _2975) + _2777;
        _2893 = (((((_2955 * _2603) + _1341) * cbLight._m0[_2906].y) * _2974) * _2975) + _2779;
        _2895 = (((((_2955 * _2604) + _1342) * cbLight._m0[_2906].z) * _2974) * _2975) + _2781;
    }
    float _3110;
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    if (_2409.y == 0u)
    {
        float _3050 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3051 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3050;
        float _3052 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3050;
        float _3053 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3050;
        uvec4 _3065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3066 = _3065.x;
        uint _3077 = uint((float(_3065.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1278) / _3066))) + floor(float(uint(cbSceneParam._m0[85u].x * _1277) / _3066)));
        float _3087 = (log2(_3053 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3088 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
        uint _3091 = uint(isnan(14.0) ? _3088 : (isnan(_3088) ? 14.0 : min(_3088, 14.0)));
        uvec4 _3096 = texelFetch(g_lightClusterGridBuffer, int(((_3091 << 2u) + (_3077 << 6u)) >> 2u));
        uint _3097 = _3096.x;
        uint _3098 = _3065.z;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        if (((((1u << ((_3098 >> 4u) & 15u)) + 4294967295u) & _3097) == 0u) || ((_3098 & 240u) == 0u))
        {
            _3198 = 0.0;
            _3200 = 0.0;
            _3202 = 0.0;
            _3204 = 0.0;
            _3206 = 0.0;
            _3208 = 0.0;
        }
        else
        {
            float _3199;
            float _3201;
            float _3203;
            float _3205;
            float _3207;
            float _3209;
            float _3342 = 0.0;
            float _3343 = 0.0;
            float _3344 = 0.0;
            float _3345 = 0.0;
            float _3346 = 0.0;
            float _3347 = 0.0;
            uint _3348 = 0u;
            uint _3357;
            bool _3358;
            for (;;)
            {
                _3357 = texelFetch(g_lightClassification, int((((_3091 << 5u) + (_3077 << 9u)) + (_3348 << 2u)) >> 2u)).x;
                _3358 = _3357 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3358)
                {
                    frontier_phi_61_pred = _3342;
                    frontier_phi_61_pred_1 = _3347;
                    frontier_phi_61_pred_2 = _3346;
                    frontier_phi_61_pred_3 = _3345;
                    frontier_phi_61_pred_4 = _3344;
                    frontier_phi_61_pred_5 = _3343;
                }
                else
                {
                    float _3466;
                    float _3467;
                    float _3468;
                    float _3469;
                    float _3470;
                    float _3471;
                    uint _3472;
                    _3466 = _3342;
                    _3467 = _3343;
                    _3468 = _3344;
                    _3469 = _3345;
                    _3470 = _3346;
                    _3471 = _3347;
                    _3472 = _3357;
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    for (;;)
                    {
                        uint _3476 = uint(findLSB(_3472)) + (_3348 << 5u);
                        uint _3473 = (_3472 + 4294967295u) & _3472;
                        uint _3478 = _3476 * 48u;
                        vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3478)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 3u)).x));
                        uint _3498 = (_3476 * 48u) + 4u;
                        vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3498)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3498 + 3u)).x));
                        uint _3517 = (_3476 * 48u) + 8u;
                        vec3 _3528 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3517)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 2u)).x));
                        float _3532 = _3492.x - _3051;
                        float _3533 = _3492.y - _3052;
                        float _3534 = _3492.z - _3053;
                        float _3535 = dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534));
                        float _3538 = inversesqrt(_3535);
                        float _3539 = _3538 * _3532;
                        float _3540 = _3538 * _3533;
                        float _3541 = _3538 * _3534;
                        float _3542 = dot(vec3(_1296, _1299, _1302), vec3(_3539, _3540, _3541));
                        float _3547 = 1.0 - (_3535 * _3492.w);
                        float _4946 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3548 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3549 = sqrt(_3535) * _3511.w;
                        float _3552 = 1.39999997615814208984375 / (_3549 + 1.39999997615814208984375);
                        float _3553 = _3552 * _3552;
                        float _3556 = ((1.0 - _3553) * _3542) + _3553;
                        float _3559 = _3549 * _3549;
                        float _3563 = ((isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0))) * _3548) / ((_3559 * 0.699999988079071044921875) + 1.0);
                        float _3567 = (-0.0) - _3051;
                        float _3568 = (-0.0) - _3052;
                        float _3569 = (-0.0) - _3053;
                        float _3573 = inversesqrt(dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569)));
                        float _3574 = _3573 * _3567;
                        float _3575 = _3573 * _3568;
                        float _3576 = _3573 * _3569;
                        float _3584 = exp2(log2(1.0 / ((_3559 * 3.5) + 5.0)) * 0.25);
                        float _3585 = 1.0 - _1371;
                        float _3592 = sqrt(1.0 - ((1.0 - (_3585 * _3585)) * (1.0 - (_3584 * _3584))));
                        float _3593 = _3592 * _3592;
                        float _3594 = _3593 * _3593;
                        float _3595 = _3574 + _3539;
                        float _3596 = _3575 + _3540;
                        float _3597 = _3576 + _3541;
                        float _3601 = inversesqrt(dot(vec3(_3595, _3596, _3597), vec3(_3595, _3596, _3597)));
                        float _3605 = dot(vec3(_1296, _1299, _1302), vec3(_3574, _3575, _3576));
                        float _4962 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                        float _3608 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3609 = dot(vec3(_1296, _1299, _1302), vec3(_3601 * _3595, _3601 * _3596, _3601 * _3597));
                        float _4973 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                        float _3612 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                        float _3616 = ((_3612 * _3612) * (_3594 + (-1.0))) + 1.0;
                        float _3617 = _3552 * _3593;
                        float _3618 = _3617 * _3617;
                        float _3621 = ((1.0 - _3618) * _3542) + _3618;
                        float _4984 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                        float _3622 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                        float _3623 = 1.0 - _3593;
                        float _3633 = (0.5 / (((_3622 * ((_3608 * _3623) + _3593)) + 9.9999999392252902907785028219223e-09) + (((_3622 * _3623) + _3593) * _3608))) * _3622;
                        float _4995 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                        float _3644 = (((_3594 * 3.1415927410125732421875) * (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0)))) / ((_3616 * _3616) * ((_3559 * 2.1991131305694580078125) + 3.141590118408203125))) * _3548;
                        _3401 = (_3563 * _3511.x) + _3469;
                        _3402 = (_3563 * _3511.y) + _3470;
                        _3403 = (_3563 * _3511.z) + _3471;
                        _3398 = (_3644 * _3528.x) + _3466;
                        _3399 = (_3644 * _3528.y) + _3467;
                        _3400 = (_3644 * _3528.z) + _3468;
                        if (_3473 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3466 = _3398;
                            _3467 = _3399;
                            _3468 = _3400;
                            _3469 = _3401;
                            _3470 = _3402;
                            _3471 = _3403;
                            _3472 = _3473;
                        }
                    }
                    frontier_phi_61_pred = _3398;
                    frontier_phi_61_pred_1 = _3403;
                    frontier_phi_61_pred_2 = _3402;
                    frontier_phi_61_pred_3 = _3401;
                    frontier_phi_61_pred_4 = _3400;
                    frontier_phi_61_pred_5 = _3399;
                }
                _3199 = frontier_phi_61_pred;
                _3209 = frontier_phi_61_pred_1;
                _3207 = frontier_phi_61_pred_2;
                _3205 = frontier_phi_61_pred_3;
                _3203 = frontier_phi_61_pred_4;
                _3201 = frontier_phi_61_pred_5;
                uint _3349 = _3348 + 1u;
                if (_3349 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3342 = _3199;
                    _3343 = _3201;
                    _3344 = _3203;
                    _3345 = _3205;
                    _3346 = _3207;
                    _3347 = _3209;
                    _3348 = _3349;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3198 = _3199;
            _3200 = _3201;
            _3202 = _3203;
            _3204 = _3205;
            _3206 = _3207;
            _3208 = _3209;
        }
        uvec4 _3212 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3213 = _3212.z;
        uint _3215 = (_3213 >> 8u) & 15u;
        float _3310;
        float _3312;
        float _3314;
        float _3316;
        float _3318;
        float _3320;
        if (((4294967295u << _3215) & _3097) == 0u)
        {
            _3310 = _3198;
            _3312 = _3200;
            _3314 = _3202;
            _3316 = _3204;
            _3318 = _3206;
            _3320 = _3208;
        }
        else
        {
            float _3335 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
            float _3336 = _3335 * _3051;
            float _3337 = _3335 * _3052;
            float _3338 = _3335 * _3053;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3215 < ((_3213 >> 12u) & 15u))
            {
                float _3311;
                float _3313;
                float _3315;
                float _3317;
                float _3319;
                float _3321;
                float _3449 = _3198;
                float _3450 = _3200;
                float _3451 = _3202;
                float _3452 = _3204;
                float _3453 = _3206;
                float _3454 = _3208;
                uint _3455 = _3215;
                uint _3464;
                bool _3465;
                for (;;)
                {
                    _3464 = texelFetch(g_lightClassification, int((((_3091 << 5u) + (_3077 << 9u)) + (_3455 << 2u)) >> 2u)).x;
                    _3465 = _3464 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3465)
                    {
                        frontier_phi_67_pred = _3452;
                        frontier_phi_67_pred_1 = _3453;
                        frontier_phi_67_pred_2 = _3454;
                        frontier_phi_67_pred_3 = _3451;
                        frontier_phi_67_pred_4 = _3450;
                        frontier_phi_67_pred_5 = _3449;
                    }
                    else
                    {
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3942;
                        float _3943;
                        float _3944;
                        float _3945;
                        float _3946;
                        float _3947;
                        float _3662 = _3449;
                        float _3663 = _3450;
                        float _3664 = _3451;
                        float _3665 = _3452;
                        float _3666 = _3453;
                        float _3667 = _3454;
                        uint _3668 = _3464;
                        uint _3669;
                        vec4 _3694;
                        float _3695;
                        vec4 _3710;
                        vec3 _3722;
                        vec4 _3737;
                        vec4 _3752;
                        float _3798;
                        bool _3799;
                        for (;;)
                        {
                            uint _3679 = ((_3455 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3668));
                            _3669 = (_3668 + 4294967295u) & _3668;
                            uint _3681 = _3679 * 40u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            _3695 = _3694.w;
                            uint _3697 = (_3679 * 40u) + 4u;
                            _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            uint _3712 = (_3679 * 40u) + 8u;
                            _3722 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 2u)).x));
                            uint _3724 = (_3679 * 40u) + 16u;
                            _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            uint _3739 = (_3679 * 40u) + 20u;
                            _3752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 3u)).x));
                            uint _3754 = (_3679 * 40u) + 24u;
                            vec4 _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            uint _3773 = (_3679 * 40u) + 28u;
                            vec4 _3786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 3u)).x));
                            _3798 = fma(_3053, _3786.z, fma(_3052, _3786.y, _3786.x * _3051)) + _3786.w;
                            _3799 = !((fma(_3053, _3767.z, fma(_3052, _3767.y, _3767.x * _3051)) + _3767.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3799)
                            {
                                float _3826 = _3694.x - _3051;
                                float _3827 = _3694.y - _3052;
                                float _3828 = _3694.z - _3053;
                                float _3829 = dot(vec3(_3826, _3827, _3828), vec3(_3826, _3827, _3828));
                                float _3832 = inversesqrt(_3829);
                                float _3833 = _3832 * _3826;
                                float _3834 = _3832 * _3827;
                                float _3835 = _3832 * _3828;
                                float _3839 = 1.0 - (_3829 / (_3695 * _3695));
                                float _5006 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3840 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3844 = sqrt(_3829) * _3710.w;
                                float _3846 = 1.39999997615814208984375 / (_3844 + 1.39999997615814208984375);
                                float _3847 = _3846 * _3846;
                                float _3850 = ((1.0 - _3847) * dot(vec3(_3833, _3834, _3835), vec3(_1296, _1299, _1302))) + _3847;
                                float _3853 = _3844 * _3844;
                                float _3857 = (fma(_3053, _3737.z, fma(_3052, _3737.y, _3737.x * _3051)) + _3737.w) / _3798;
                                float _3858 = (fma(_3053, _3752.z, fma(_3052, _3752.y, _3752.x * _3051)) + _3752.w) / _3798;
                                float _3862 = 1.0 - dot(vec2(_3857, _3858), vec2(_3857, _3858));
                                float _5022 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3863 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3864 = _3863 * (((isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0))) * _3840) / ((_3853 * 0.699999988079071044921875) + 1.0));
                                float _3876 = exp2(log2(1.0 / ((_3853 * 3.5) + 5.0)) * 0.25);
                                float _3877 = 1.0 - _1371;
                                float _3884 = sqrt(1.0 - ((1.0 - (_3877 * _3877)) * (1.0 - (_3876 * _3876))));
                                float _3885 = _3884 * _3884;
                                float _3886 = _3885 * _3885;
                                float _3887 = _3833 - _3336;
                                float _3888 = _3834 - _3337;
                                float _3889 = _3835 - _3338;
                                float _3893 = inversesqrt(dot(vec3(_3887, _3888, _3889), vec3(_3887, _3888, _3889)));
                                float _3897 = dot(vec3(_1296, _1299, _1302), vec3((-0.0) - _3336, (-0.0) - _3337, (-0.0) - _3338));
                                float _5033 = isnan(0.0) ? _3897 : (isnan(_3897) ? 0.0 : max(_3897, 0.0));
                                float _3900 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3901 = dot(vec3(_1296, _1299, _1302), vec3(_3893 * _3887, _3893 * _3888, _3893 * _3889));
                                float _5044 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                                float _3904 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                                float _3908 = ((_3904 * _3904) * (_3886 + (-1.0))) + 1.0;
                                float _3909 = _3846 * _3885;
                                float _3910 = _3909 * _3909;
                                float _3916 = ((1.0 - _3910) * dot(vec3(_1296, _1299, _1302), vec3(_3833, _3834, _3835))) + _3910;
                                float _5055 = isnan(0.0) ? _3916 : (isnan(_3916) ? 0.0 : max(_3916, 0.0));
                                float _3917 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
                                float _3918 = 1.0 - _3885;
                                float _3928 = (0.5 / (((_3917 * ((_3900 * _3918) + _3885)) + 9.9999999392252902907785028219223e-09) + (((_3917 * _3918) + _3885) * _3900))) * _3917;
                                float _5066 = isnan(0.0) ? _3928 : (isnan(_3928) ? 0.0 : max(_3928, 0.0));
                                float _3938 = (_3863 * _3840) * (((_3886 * 3.1415927410125732421875) * (isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0)))) / ((_3908 * _3908) * ((_3853 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3938 * _3722.x;
                                frontier_phi_73_pred_1 = _3938 * _3722.y;
                                frontier_phi_73_pred_2 = _3864 * _3710.z;
                                frontier_phi_73_pred_3 = _3864 * _3710.y;
                                frontier_phi_73_pred_4 = _3864 * _3710.x;
                                frontier_phi_73_pred_5 = _3938 * _3722.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3942 = frontier_phi_73_pred;
                            _3943 = frontier_phi_73_pred_1;
                            _3947 = frontier_phi_73_pred_2;
                            _3946 = frontier_phi_73_pred_3;
                            _3945 = frontier_phi_73_pred_4;
                            _3944 = frontier_phi_73_pred_5;
                            _3652 = _3945 + _3665;
                            _3653 = _3946 + _3666;
                            _3654 = _3947 + _3667;
                            _3649 = _3942 + _3662;
                            _3650 = _3943 + _3663;
                            _3651 = _3944 + _3664;
                            if (_3669 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3662 = _3649;
                                _3663 = _3650;
                                _3664 = _3651;
                                _3665 = _3652;
                                _3666 = _3653;
                                _3667 = _3654;
                                _3668 = _3669;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3652;
                        frontier_phi_67_pred_1 = _3653;
                        frontier_phi_67_pred_2 = _3654;
                        frontier_phi_67_pred_3 = _3651;
                        frontier_phi_67_pred_4 = _3650;
                        frontier_phi_67_pred_5 = _3649;
                    }
                    _3317 = frontier_phi_67_pred;
                    _3319 = frontier_phi_67_pred_1;
                    _3321 = frontier_phi_67_pred_2;
                    _3315 = frontier_phi_67_pred_3;
                    _3313 = frontier_phi_67_pred_4;
                    _3311 = frontier_phi_67_pred_5;
                    uint _3456 = _3455 + 1u;
                    if (_3456 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3449 = _3311;
                        _3450 = _3313;
                        _3451 = _3315;
                        _3452 = _3317;
                        _3453 = _3319;
                        _3454 = _3321;
                        _3455 = _3456;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3319;
                frontier_phi_55_56_ladder_1 = _3321;
                frontier_phi_55_56_ladder_2 = _3317;
                frontier_phi_55_56_ladder_3 = _3315;
                frontier_phi_55_56_ladder_4 = _3313;
                frontier_phi_55_56_ladder_5 = _3311;
            }
            else
            {
                frontier_phi_55_56_ladder = _3206;
                frontier_phi_55_56_ladder_1 = _3208;
                frontier_phi_55_56_ladder_2 = _3204;
                frontier_phi_55_56_ladder_3 = _3202;
                frontier_phi_55_56_ladder_4 = _3200;
                frontier_phi_55_56_ladder_5 = _3198;
            }
            _3310 = frontier_phi_55_56_ladder_5;
            _3312 = frontier_phi_55_56_ladder_4;
            _3314 = frontier_phi_55_56_ladder_3;
            _3316 = frontier_phi_55_56_ladder_2;
            _3318 = frontier_phi_55_56_ladder;
            _3320 = frontier_phi_55_56_ladder_1;
        }
        float _3325 = isnan(1.0) ? _1355 : (isnan(_1355) ? 1.0 : min(_1355, 1.0));
        _3110 = (_3325 * _3316) + _2543;
        _3112 = (_3325 * _3318) + _2545;
        _3114 = (_3325 * _3320) + _2547;
        _3116 = ((_3310 * _1339) * _3325) + _2891;
        _3118 = ((_3312 * _1341) * _3325) + _2893;
        _3120 = ((_3314 * _1342) * _3325) + _2895;
    }
    else
    {
        _3110 = _2543;
        _3112 = _2545;
        _3114 = _2547;
        _3116 = _2891;
        _3118 = _2893;
        _3120 = _2895;
    }
    float _5082 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
    float _5093 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _5104 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
    uint _3140 = _299 + 6u;
    float _3148 = _1277 / cbSceneParam._m0[86u].x;
    float _3149 = _1278 / cbSceneParam._m0[86u].y;
    vec4 _3163 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3148, _3149, (log2((isnan(cbSceneParam._m0[77u].w) ? _1212 : (isnan(_1212) ? cbSceneParam._m0[77u].w : min(_1212, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3165 = _3163.x;
    float _3166 = _3163.y;
    float _3167 = _3163.z;
    float _3168 = _3163.w;
    float _3260;
    float _3262;
    float _3264;
    float _3266;
    if (_1212 > cbSceneParam._m0[78u].w)
    {
        float _3223 = isnan(_1212) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1212 : min(cbSceneParam._m0[80u].w, _1212));
        float _3224 = _3223 / _1212;
        float _3235 = _3224 * _1262;
        float _3236 = _1263 * _3224;
        float _3237 = (-0.0) - _3236;
        float _3238 = _3224 * _1264;
        float _3240 = (cbSceneParam._m0[77u].w * _3237) / _3223;
        float _3241 = _3240 + cbSceneParam._m0[79u].w;
        float _3242 = cbSceneParam._m0[79u].w - _3236;
        float _3248 = sqrt(((_3235 * _3235) + (_3236 * _3236)) + (_3238 * _3238));
        float _3251 = (1.0 - (cbSceneParam._m0[77u].w / _3223)) * _3248;
        float _3256 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3258 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3411;
        if (abs((_3237 - _3240) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3411 = ((((_3241 > 0.0) ? exp2(_3256 * _3241) : (2.0 - exp2(_3258 * _3241))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3251;
        }
        else
        {
            float _3371 = 1.0 / cbSceneParam._m0[80u].x;
            float _3372 = isnan(_3242) ? _3241 : (isnan(_3241) ? _3242 : max(_3241, _3242));
            float _3373 = isnan(_3242) ? _3241 : (isnan(_3241) ? _3242 : min(_3241, _3242));
            float _3382 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : min(_3372, 0.0));
            float _3383 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : min(_3373, 0.0));
            _3411 = ((abs(_3248 / _3237) * cbSceneParam._m0[80u].y) * ((((_3382 - _3383) * 2.0) - ((exp2(_3256 * (isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0)))) - exp2(_3256 * (isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))))) * _3371)) - ((exp2(_3258 * _3382) - exp2(_3258 * _3383)) * _3371))) + (_3251 * cbSceneParam._m0[80u].z);
        }
        vec4 _3413 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3148, _3149, 1.0), 0.0);
        float _3422 = exp2((_3411 * (-1.44269502162933349609375)) * (1.0 - _3413.w));
        float _3423 = log2(_3422);
        float _3439 = log2(_3168);
        _3260 = (exp2(_3439 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3423 * cbSceneParam._m0[78u].x)) * _3413.x) / cbSceneParam._m0[78u].x)) + _3165;
        _3262 = (exp2(_3439 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3423 * cbSceneParam._m0[78u].y)) * _3413.y) / cbSceneParam._m0[78u].y)) + _3166;
        _3264 = (exp2(_3439 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3423 * cbSceneParam._m0[78u].z)) * _3413.z) / cbSceneParam._m0[78u].z)) + _3167;
        _3266 = _3422 * _3168;
    }
    else
    {
        _3260 = _3165;
        _3262 = _3166;
        _3264 = _3167;
        _3266 = _3168;
    }
    float _3278 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3279 = _3278 == 3.0;
    float _3280 = log2(_3266);
    float _3287 = exp2(_3280 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0))) * (_3110 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1355))) + ((_3116 + ((isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0))) * _2161)) * cbPerFrame._m0[3u].x));
    float _3288 = exp2(_3280 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0))) * (_3112 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1355))) + ((_3118 + ((isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0))) * _2161)) * cbPerFrame._m0[3u].x));
    float _3289 = exp2(_3280 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0))) * (_3114 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1355))) + ((_3120 + ((isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0))) * _2161)) * cbPerFrame._m0[3u].x));
    float _3298 = (_3278 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3298 * (_3279 ? _3287 : (_3287 + (cbSceneParam._m0[72u].w * _3260)));
    SV_Target.y = _3298 * (_3279 ? _3288 : (_3288 + (cbSceneParam._m0[72u].w * _3262)));
    SV_Target.z = _3298 * (_3279 ? _3289 : (_3289 + (cbSceneParam._m0[72u].w * _3264)));
    SV_Target.w = cbInstanceData._m0[_3140].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3140].w;
}


