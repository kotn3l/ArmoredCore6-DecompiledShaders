#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1434;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _349.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[23u].w) + _399) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4043 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _424 = (_417 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _425 = (_417 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _426 = (_417 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _475 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _489 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _349.y) * 2.0) - ((((_465 - _475) * cbMtdParam._m0[23u].w) + _475) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4054 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _497 = (_490 * ((_443.x * cbMtdParam._m0[13u].x) - _424)) + _424;
    float _498 = (_490 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425;
    float _499 = (_490 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426;
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    float _545 = ((_517.x - _536) * _417) + _536;
    float _546 = ((_517.y - _537) * _417) + _537;
    float _547 = ((_517.z - _538) * _417) + _538;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _572 = ((_559.z - _547) * _490) + _547;
    float _575 = ((((_559.x - _545) * _490) + _545) * 2.0) + (-1.0);
    float _577 = ((((_559.y - _546) * _490) + _546) * 2.0) + (-1.0);
    float _578 = dot(vec2(_575, _577), vec2(_575, _577));
    float _4065 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _583 = sqrt(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))));
    vec4 _597 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _624 = _622.x;
    float _625 = 1.0 - _624;
    float _634 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _637 = ((isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : min(_634, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _646 = (_637 - ((((((_624 - _625) * cbMtdParam._m0[24u].z) + _625) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _637))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4086 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _647 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _654 = (_647 * (cbMtdParam._m0[17u].x - _497)) + _497;
    float _655 = (_647 * (cbMtdParam._m0[17u].y - _498)) + _498;
    float _656 = (_647 * (cbMtdParam._m0[17u].z - _499)) + _499;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _670 = _668.x;
    float _671 = 1.0 - _670;
    float _696 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_670 - _671) * cbMtdParam._m0[24u].w) + _671) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4097 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _705 = ((((cbMtdParam._m0[10u].x - _654) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _697) + _654;
    float _706 = ((((cbMtdParam._m0[10u].y - _655) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _697) + _655;
    float _707 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _656)) * _697) + _656;
    vec4 _733 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _735 = _733.x;
    float _753 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _735) * _417) + _735;
    float _770 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _753) * _490) + _753;
    float _774 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _770) * cbMtdParam._m0[19u].z) + _770;
    float _776 = _774 - (_774 * _647);
    float _778 = _776 - (_776 * _697);
    float _782 = (cbMtdParam._m0[19u].w * (_597.z - _572)) + _572;
    vec4 _796 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _803 = (_796.x * 2.0) + (-1.0);
    float _804 = (_796.y * 2.0) + (-1.0);
    float _805 = dot(vec2(_803, _804), vec2(_803, _804));
    float _4108 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _813 = (_647 * (_796.z - _782)) + _782;
    float _816 = ((cbMtdParam._m0[23u].x - _813) * _697) + _813;
    vec4 _835 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _841 = (_835.x * 2.0) + (-1.0);
    float _842 = (_835.y * 2.0) + (-1.0);
    float _843 = dot(vec2(_841, _842), vec2(_841, _842));
    float _4119 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _851 = (((_597.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _575;
    float _852 = (((_597.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _577;
    float _864 = (((_803 - _851) + (cbMtdParam._m0[21u].x * _851)) * _647) + _851;
    float _865 = (((_804 - _852) + (cbMtdParam._m0[21u].x * _852)) * _647) + _852;
    float _866 = (_647 * (sqrt(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) - _583)) + _583;
    float _877 = (((_841 - _864) + (_864 * cbMtdParam._m0[22u].z)) * _697) + _864;
    float _878 = (((_842 - _865) + (_865 * cbMtdParam._m0[22u].z)) * _697) + _865;
    float _879 = ((sqrt(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) - _866) * _697) + _866;
    float _881 = cbMtdParam._m0[22u].x + _597.w;
    float _884 = fma(_879, _250 * NORMAL.x, fma(_878, _257 * TANGENT.x, (_243 * _235) * _877));
    float _887 = fma(_879, _250 * NORMAL.y, fma(_878, _257 * TANGENT.y, (_243 * _236) * _877));
    float _890 = fma(_879, _250 * NORMAL.z, fma(_878, _257 * TANGENT.z, (_243 * _237) * _877));
    float _894 = inversesqrt(dot(vec3(_884, _887, _890), vec3(_884, _887, _890)));
    float _895 = _894 * _884;
    float _896 = _894 * _887;
    float _897 = _894 * _890;
    float _4130 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _898 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _4152 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4163 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4174 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4185 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _903 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _917 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _967 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _957);
    float _968 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _957);
    float _969 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _957);
    float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
    float _974 = _967 * _973;
    float _975 = _968 * _973;
    float _976 = _969 * _973;
    float _982 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _983 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1001 = fma(_897, cbSceneParam._m0[5u].z, fma(_896, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _895));
    float _1004 = fma(_897, cbSceneParam._m0[6u].z, fma(_896, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _895));
    float _1007 = fma(_897, cbSceneParam._m0[7u].z, fma(_896, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _895));
    uint _1021 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1027 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * cbInstanceData._m0[_1021].x;
    float _1028 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * cbInstanceData._m0[_1021].y;
    float _1029 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * cbInstanceData._m0[_1021].z;
    float _4196 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1030 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _4207 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _1033 = 1.0 - _903;
    float _1034 = _1030 * _1033;
    float _1035 = _1031 * _1033;
    float _1036 = _1032 * _1033;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _903;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _903;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _903;
    float _1044 = _1041 + 0.039999999105930328369140625;
    float _1046 = _1042 + 0.039999999105930328369140625;
    float _1047 = _1043 + 0.039999999105930328369140625;
    vec4 _1056 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _982, cbSceneParam._m0[86u].y * _983));
    float _1060 = ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * TEXCOORD_5.w) * _1056.x;
    float _1061 = dot(vec3(_895, _896, _897), vec3(_974, _975, _976));
    float _1064 = _1061 * 2.0;
    float _1068 = (_1064 * _895) - _974;
    float _1069 = (_1064 * _896) - _975;
    float _1070 = (_1064 * _897) - _976;
    float _1074 = abs(dot(vec3(_974, _975, _976), vec3(_895, _896, _897)));
    float _4229 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1076 = sqrt(_898);
    float _1089 = exp2((_1076 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1076 * 3.0));
    float _1095 = (1.0 - _1089) * ((_1076 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1096 = _1089 * _1076;
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1433;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1158 = fma(_1132, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124));
        float _1162 = fma(_1132, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124));
        float _1166 = fma(_1132, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124));
        float _1191 = _1124 + _895;
        float _1192 = _1128 + _896;
        float _1193 = _1132 + _897;
        float _1203 = fma(_1193, cbModelParam._m0[26u].z, fma(_1192, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1191)) - _1158;
        float _1204 = fma(_1193, cbModelParam._m0[27u].z, fma(_1192, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1191)) - _1162;
        float _1205 = fma(_1193, cbModelParam._m0[28u].z, fma(_1192, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1191)) - _1166;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1158 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1162 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[34u].z) + ((((((_1166 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1261 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1227.x + (-0.5));
        float _1263 = _1261 * (_1227.y + (-0.5));
        float _1264 = _1261 * (_1227.z + (-0.5));
        float _1271 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1234.x + (-0.5));
        float _1273 = _1271 * (_1234.y + (-0.5));
        float _1274 = _1271 * (_1234.z + (-0.5));
        float _1281 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1241.x + (-0.5));
        float _1283 = _1281 * (_1241.y + (-0.5));
        float _1284 = _1281 * (_1241.z + (-0.5));
        float _1291 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1248.x + (-0.5));
        float _1293 = _1291 * (_1248.y + (-0.5));
        float _1294 = _1291 * (_1248.z + (-0.5));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = _1262 * 0.5;
        float _1299 = _1272 * 0.5;
        float _1300 = _1282 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1315 = (dot(vec3(_895, _896, _897), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1325 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4277 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1327 + 1.0))) + _1332) * _1295;
        float _1342 = _1263 * 0.5;
        float _1343 = _1273 * 0.5;
        float _1344 = _1283 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_895, _896, _897), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4310 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1369 + 1.0))) + _1374) * _1296;
        float _1384 = _1264 * 0.5;
        float _1385 = _1274 * 0.5;
        float _1386 = _1284 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_895, _896, _897), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4343 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1411 + 1.0))) + _1416) * _1297;
        _1433 = _1264;
        _1435 = _1263;
        _1436 = _1262;
        _1437 = _1274;
        _1438 = _1273;
        _1439 = _1272;
        _1440 = _1284;
        _1441 = _1283;
        _1442 = _1282;
        _1443 = _1297;
        _1444 = _1296;
        _1445 = _1295;
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
    }
    else
    {
        _1433 = _1434;
        _1435 = _1434;
        _1436 = _1434;
        _1437 = _1434;
        _1438 = _1434;
        _1439 = _1434;
        _1440 = _1434;
        _1441 = _1434;
        _1442 = _1434;
        _1443 = _1434;
        _1444 = _1434;
        _1445 = _1434;
        _1446 = 0.0;
        _1447 = 0.0;
        _1448 = 0.0;
    }
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1472 = fma(_1132, cbModelParam._m0[30u].z, fma(_1128, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1124));
        float _1476 = fma(_1132, cbModelParam._m0[31u].z, fma(_1128, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1124));
        float _1480 = fma(_1132, cbModelParam._m0[32u].z, fma(_1128, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1124));
        float _1503 = _1124 + _895;
        float _1504 = _1128 + _896;
        float _1505 = _1132 + _897;
        float _1515 = fma(_1505, cbModelParam._m0[30u].z, fma(_1504, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1503)) - _1472;
        float _1516 = fma(_1505, cbModelParam._m0[31u].z, fma(_1504, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1503)) - _1476;
        float _1517 = fma(_1505, cbModelParam._m0[32u].z, fma(_1504, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1503)) - _1480;
        float _1521 = inversesqrt(dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517)));
        float _1534 = ((_1521 * _1515) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1472 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1521 * _1516) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1476 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1536 = ((_1521 * _1517) / cbModelParam._m0[35u].z) + ((((((_1480 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        float _1571 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1538.x + (-0.5));
        float _1573 = _1571 * (_1538.y + (-0.5));
        float _1574 = _1571 * (_1538.z + (-0.5));
        float _1581 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1545.x + (-0.5));
        float _1583 = _1581 * (_1545.y + (-0.5));
        float _1584 = _1581 * (_1545.z + (-0.5));
        float _1591 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1552.x + (-0.5));
        float _1593 = _1591 * (_1552.y + (-0.5));
        float _1594 = _1591 * (_1552.z + (-0.5));
        float _1601 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1559.x + (-0.5));
        float _1603 = _1601 * (_1559.y + (-0.5));
        float _1604 = _1601 * (_1559.z + (-0.5));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = _1572 * 0.5;
        float _1609 = _1582 * 0.5;
        float _1610 = _1592 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_895, _896, _897), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4406 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1635 + 1.0))) + _1640) * _1605;
        float _1650 = _1573 * 0.5;
        float _1651 = _1583 * 0.5;
        float _1652 = _1593 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_895, _896, _897), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4439 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1677 + 1.0))) + _1682) * _1606;
        float _1692 = _1574 * 0.5;
        float _1693 = _1584 * 0.5;
        float _1694 = _1594 * 0.5;
        float _1695 = dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694));
        float _1700 = (_1695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1695);
        float _1708 = (dot(vec3(_895, _896, _897), vec3(_1700 * _1692, _1700 * _1693, _1700 * _1694)) + 1.0) * 0.5;
        float _4450 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1717 = sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4461 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1719 = _1718 * 2.0;
        float _1723 = (1.0 - _1718) / (_1718 + 1.0);
        float _4472 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1733 = ((((1.0 - _1724) * (_1719 + 2.0)) * exp2(log2(isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_1719 + 1.0))) + _1724) * _1607;
        _1741 = _1574;
        _1742 = _1573;
        _1743 = _1572;
        _1744 = _1584;
        _1745 = _1583;
        _1746 = _1582;
        _1747 = _1594;
        _1748 = _1593;
        _1749 = _1592;
        _1750 = _1607;
        _1751 = _1606;
        _1752 = _1605;
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)));
    }
    else
    {
        _1741 = _1434;
        _1742 = _1434;
        _1743 = _1434;
        _1744 = _1434;
        _1745 = _1434;
        _1746 = _1434;
        _1747 = _1434;
        _1748 = _1434;
        _1749 = _1434;
        _1750 = _1434;
        _1751 = _1434;
        _1752 = _1434;
        _1753 = 0.0;
        _1754 = 0.0;
        _1755 = 0.0;
    }
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1446)) + _1446;
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1447)) + _1447;
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1448)) + _1448;
    float _1788 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1766, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1791 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1766, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1794 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1766, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1765));
    float _1809 = _1068 * 0.5;
    float _1810 = _1069 * 0.5;
    float _1811 = _1070 * 0.5;
    float _1812 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1815 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1818 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1852;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1825 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1433, _1437, _1440, _1443));
        float _1829 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1435, _1438, _1441, _1444));
        float _1833 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1436, _1439, _1442, _1445));
        float _1840 = dot(vec4(cbModelParam._m0[39u]), vec4(_1809, _1810, _1811, 1.0));
        _1852 = dot(vec3(isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1840) ? 0.0 : (isnan(0.0) ? _1840 : max(0.0, _1840))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1852 = 1.0;
    }
    float _1863;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1854 = dot(vec4(cbModelParam._m0[40u]), vec4(_1809, _1810, _1811, 1.0));
        _1863 = dot(vec3(isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1854) ? 0.0 : (isnan(0.0) ? _1854 : max(0.0, _1854))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1863 = 1.0;
    }
    float _1867 = (_1863 * cbModelParam._m0[1u].x) + (_1852 * (1.0 - cbModelParam._m0[1u].x));
    float _1877 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _898);
    float _1878 = isnan(_1877) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1877 : min(cbModelParam._m0[25u].z, _1877));
    float _1959;
    float _1961;
    float _1963;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1926 = fma(_1132, cbModelParam._m0[13u].z, fma(_1128, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124)) + cbModelParam._m0[13u].w;
        float _1930 = fma(_1132, cbModelParam._m0[14u].z, fma(_1128, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124)) + cbModelParam._m0[14u].w;
        float _1934 = fma(_1132, cbModelParam._m0[15u].z, fma(_1128, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124)) + cbModelParam._m0[15u].w;
        float _1937 = fma(_1070, cbModelParam._m0[13u].z, fma(_1069, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1068));
        float _1940 = fma(_1070, cbModelParam._m0[14u].z, fma(_1069, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1068));
        float _1943 = fma(_1070, cbModelParam._m0[15u].z, fma(_1069, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1068));
        float _1971;
        if (_1937 > 0.0)
        {
            _1971 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1971 = frontier_phi_14_12_ladder;
        }
        float _2143;
        if (_1940 > 0.0)
        {
            _2143 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2143 = frontier_phi_23_19_ladder;
        }
        float _2438;
        if (_1943 > 0.0)
        {
            _2438 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2438 = frontier_phi_35_30_ladder;
        }
        float _2440 = isnan(_2143) ? _1971 : (isnan(_1971) ? _2143 : min(_1971, _2143));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1937) + _1926;
        float _2446 = (_2441 * _1940) + _1930;
        float _2447 = (_2441 * _1943) + _1934;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2450 = (-1.0) - _2448;
        float _2452 = _2448 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2447 > _2452) || ((_2447 < _2450) || ((_2446 > _2452) || ((_2446 < _2450) || ((_2445 < _2450) || (_2445 > _2452))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2592 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2447, cbModelParam._m0[9u].z, fma(_2446, cbModelParam._m0[9u].y, _2445 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2447, cbModelParam._m0[10u].z, fma(_2446, cbModelParam._m0[10u].y, _2445 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2447, cbModelParam._m0[11u].z, fma(_2446, cbModelParam._m0[11u].y, _2445 * cbModelParam._m0[11u].x))), _1878);
            frontier_phi_13_35_ladder = _2592.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2592.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2592.x * cbModelParam._m0[1u].y;
        }
        _1959 = frontier_phi_13_35_ladder_2;
        _1961 = frontier_phi_13_35_ladder_1;
        _1963 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1947 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1068, _1069, _1070), _1878);
        _1959 = _1947.x * cbModelParam._m0[1u].y;
        _1961 = _1947.y * cbModelParam._m0[1u].y;
        _1963 = _1947.z * cbModelParam._m0[1u].y;
    }
    float _1967 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _898);
    float _1968 = isnan(_1967) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1967 : min(cbModelParam._m0[25u].w, _1967));
    float _2058;
    float _2060;
    float _2062;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2022 = fma(_1132, cbModelParam._m0[21u].z, fma(_1128, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124)) + cbModelParam._m0[21u].w;
        float _2026 = fma(_1132, cbModelParam._m0[22u].z, fma(_1128, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124)) + cbModelParam._m0[22u].w;
        float _2030 = fma(_1132, cbModelParam._m0[23u].z, fma(_1128, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124)) + cbModelParam._m0[23u].w;
        float _2033 = fma(_1070, cbModelParam._m0[21u].z, fma(_1069, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1068));
        float _2036 = fma(_1070, cbModelParam._m0[22u].z, fma(_1069, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1068));
        float _2039 = fma(_1070, cbModelParam._m0[23u].z, fma(_1069, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1068));
        float _2148;
        if (_2033 > 0.0)
        {
            _2148 = abs((1.0 - _2022) / _2033);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2022 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2148 = frontier_phi_25_21_ladder;
        }
        float _2465;
        if (_2036 > 0.0)
        {
            _2465 = abs((1.0 - _2026) / _2036);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2026 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2465 = frontier_phi_37_32_ladder;
        }
        float _2803;
        if (_2039 > 0.0)
        {
            _2803 = abs((1.0 - _2030) / _2039);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2030 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2803 = frontier_phi_47_44_ladder;
        }
        float _2805 = isnan(_2465) ? _2148 : (isnan(_2148) ? _2465 : min(_2148, _2465));
        float _2806 = isnan(_2803) ? _2805 : (isnan(_2805) ? _2803 : min(_2805, _2803));
        float _2810 = (_2806 * _2033) + _2022;
        float _2811 = (_2806 * _2036) + _2026;
        float _2812 = (_2806 * _2039) + _2030;
        float _2813 = _2806 * 9.9999997473787516355514526367188e-05;
        float _2814 = (-1.0) - _2813;
        float _2816 = _2813 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2812 > _2816) || ((_2812 < _2814) || ((_2811 > _2816) || ((_2811 < _2814) || ((_2810 < _2814) || (_2810 > _2816))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2934 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2812, cbModelParam._m0[17u].z, fma(_2811, cbModelParam._m0[17u].y, _2810 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2812, cbModelParam._m0[18u].z, fma(_2811, cbModelParam._m0[18u].y, _2810 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2812, cbModelParam._m0[19u].z, fma(_2811, cbModelParam._m0[19u].y, _2810 * cbModelParam._m0[19u].x))), _1968);
            frontier_phi_22_47_ladder = _2934.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2934.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2934.x * cbModelParam._m0[1u].z;
        }
        _2058 = frontier_phi_22_47_ladder_2;
        _2060 = frontier_phi_22_47_ladder_1;
        _2062 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2042 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1068, _1069, _1070), _1968);
        _2058 = _2042.x * cbModelParam._m0[1u].z;
        _2060 = _2042.y * cbModelParam._m0[1u].z;
        _2062 = _2042.z * cbModelParam._m0[1u].z;
    }
    float _2075 = (((_1095 * _1044) + _1096) * _1060) * ((cbModelParam._m0[1u].w * (_2058 - _1959)) + _1959);
    float _2077 = (((_1095 * _1046) + _1096) * _1060) * ((cbModelParam._m0[1u].w * (_2060 - _1961)) + _1961);
    float _2079 = (((_1095 * _1047) + _1096) * _1060) * ((cbModelParam._m0[1u].w * (_2062 - _1963)) + _1963);
    float _2082 = fma(_2079, cbSceneParam._m0[89u].z, fma(_2077, cbSceneParam._m0[89u].y, _2075 * cbSceneParam._m0[89u].x));
    float _2085 = fma(_2079, cbSceneParam._m0[90u].z, fma(_2077, cbSceneParam._m0[90u].y, _2075 * cbSceneParam._m0[90u].x));
    float _2088 = fma(_2079, cbSceneParam._m0[91u].z, fma(_2077, cbSceneParam._m0[91u].y, _2075 * cbSceneParam._m0[91u].x));
    float _2122 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2126 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2130 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2134 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2135 = _2122 / _2134;
    float _2136 = _2126 / _2134;
    float _2137 = _2130 / _2134;
    float _2284;
    float _2285;
    float _2286;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2164 = ((uint(_2137 > cbSceneParam._m0[59u].y) + uint(_2137 > cbSceneParam._m0[59u].x)) + uint(_2137 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2165 = _2164 + 43u;
        uint _2173 = _2164 + 44u;
        uint _2181 = _2164 + 45u;
        uint _2189 = _2164 + 46u;
        float _2200 = fma(_2134, cbSceneParam._m0[_2165].w, fma(_2130, cbSceneParam._m0[_2165].z, fma(_2126, cbSceneParam._m0[_2165].y, _2122 * cbSceneParam._m0[_2165].x)));
        float _2204 = fma(_2134, cbSceneParam._m0[_2173].w, fma(_2130, cbSceneParam._m0[_2173].z, fma(_2126, cbSceneParam._m0[_2173].y, _2122 * cbSceneParam._m0[_2173].x)));
        float _2212 = fma(_2134, cbSceneParam._m0[_2189].w, fma(_2130, cbSceneParam._m0[_2189].z, fma(_2126, cbSceneParam._m0[_2189].y, _2122 * cbSceneParam._m0[_2189].x)));
        float _2217 = cbSceneParam._m0[33u].z * _2212;
        float _2219 = cbSceneParam._m0[33u].w * _2212;
        float _2222 = fma(_2134, cbSceneParam._m0[_2181].w, fma(_2130, cbSceneParam._m0[_2181].z, fma(_2126, cbSceneParam._m0[_2181].y, _2122 * cbSceneParam._m0[_2181].x))) / _2212;
        float _2270 = (cbSceneParam._m0[33u].x - sqrt(((_2136 * _2136) + (_2135 * _2135)) + (_2137 * _2137))) * cbSceneParam._m0[33u].y;
        float _4598 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2277 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2217 + _2200) / _2212, (_2219 + _2204) / _2212), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2219 + _2200) / _2212, (_2204 - _2217) / _2212), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2200 - _2217) / _2212, (_2204 - _2219) / _2212), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2200 - _2219) / _2212, (_2217 + _2204) / _2212), _2222), 0.0)).x), vec4(0.25)));
        _2284 = 1.0 - (_2277 * cbSceneParam._m0[34u].x);
        _2285 = 1.0 - (_2277 * cbSceneParam._m0[34u].y);
        _2286 = 1.0 - (_2277 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2284 = 1.0;
        _2285 = 1.0;
        _2286 = 1.0;
    }
    float _2350;
    float _2352;
    float _2354;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2338 = fma(_2134, cbSceneParam._m0[63u].w, fma(_2130, cbSceneParam._m0[63u].z, fma(_2126, cbSceneParam._m0[63u].y, _2122 * cbSceneParam._m0[63u].x)));
        float _2339 = fma(_2134, cbSceneParam._m0[60u].w, fma(_2130, cbSceneParam._m0[60u].z, fma(_2126, cbSceneParam._m0[60u].y, _2122 * cbSceneParam._m0[60u].x))) / _2338;
        float _2340 = fma(_2134, cbSceneParam._m0[61u].w, fma(_2130, cbSceneParam._m0[61u].z, fma(_2126, cbSceneParam._m0[61u].y, _2122 * cbSceneParam._m0[61u].x))) / _2338;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2339 >= cbSceneParam._m0[64u].x) && (_2340 >= cbSceneParam._m0[64u].y)) && (_2339 <= cbSceneParam._m0[64u].z)) && (_2340 <= cbSceneParam._m0[64u].w))
        {
            float _2478 = fma(_2134, cbSceneParam._m0[62u].w, fma(_2130, cbSceneParam._m0[62u].z, fma(_2126, cbSceneParam._m0[62u].y, _2122 * cbSceneParam._m0[62u].x))) / _2338;
            float _2482 = isnan(cbSceneParam._m0[41u].w) ? _2478 : (isnan(_2478) ? cbSceneParam._m0[41u].w : max(_2478, cbSceneParam._m0[41u].w));
            float _2525 = (cbSceneParam._m0[33u].x - sqrt(((_2136 * _2136) + (_2135 * _2135)) + (_2137 * _2137))) * cbSceneParam._m0[33u].y;
            float _4614 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
            float _2532 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2339, cbSceneParam._m0[33u].w + _2340), _2482), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2339, _2340 - cbSceneParam._m0[33u].z), _2482), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2339 - cbSceneParam._m0[33u].z, _2340 - cbSceneParam._m0[33u].w), _2482), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2339 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2340), _2482), 0.0)).x), vec4(0.25)));
            float _2536 = 1.0 - (_2532 * cbSceneParam._m0[34u].x);
            float _2537 = 1.0 - (_2532 * cbSceneParam._m0[34u].y);
            float _2538 = 1.0 - (_2532 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2538) ? _2286 : (isnan(_2286) ? _2538 : min(_2286, _2538));
            frontier_phi_34_33_ladder_1 = isnan(_2537) ? _2285 : (isnan(_2285) ? _2537 : min(_2285, _2537));
            frontier_phi_34_33_ladder_2 = isnan(_2536) ? _2284 : (isnan(_2284) ? _2536 : min(_2284, _2536));
        }
        else
        {
            frontier_phi_34_33_ladder = _2286;
            frontier_phi_34_33_ladder_1 = _2285;
            frontier_phi_34_33_ladder_2 = _2284;
        }
        _2350 = frontier_phi_34_33_ladder_2;
        _2352 = frontier_phi_34_33_ladder_1;
        _2354 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2350 = _2284;
        _2352 = _2285;
        _2354 = _2286;
    }
    uvec4 _2359 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2361 = _2359.x * 14u;
    uint _2362 = _2361 + 13u;
    float _2369 = _1060 + (-1.0);
    float _2374 = (cbLight._m0[_2362].x * _2369) + 1.0;
    float _2375 = (cbLight._m0[_2362].y * _2369) + 1.0;
    float _2376 = (cbLight._m0[_2362].z * _2369) + 1.0;
    float _2377 = (cbLight._m0[_2362].w * _2369) + 1.0;
    uint _2378 = _2361 + 5u;
    float _2384 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
    uint _2388 = _2361 + 4u;
    float _2397 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
    uint _2401 = _2361 | 1u;
    float _2412 = dot(vec3(cbLight._m0[_2361].xyz), vec3(_895, _896, _897));
    float _2415 = dot(vec3(cbLight._m0[_2401].xyz), vec3(_895, _896, _897));
    float _4650 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _4661 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2420 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * 0.3183098733425140380859375;
    float _2422 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * 0.3183098733425140380859375;
    float _2429 = ((cbLight._m0[_2378].x * _2384) * _2422) + (((cbLight._m0[_2388].x * _2350) * _2397) * _2420);
    float _2430 = ((_2384 * cbLight._m0[_2378].y) * _2422) + (((cbLight._m0[_2388].y * _2352) * _2397) * _2420);
    float _2431 = ((_2384 * cbLight._m0[_2378].z) * _2422) + (((cbLight._m0[_2388].z * _2354) * _2397) * _2420);
    uvec4 _2435 = floatBitsToUint(cbLight._m0[_2361 + 12u]);
    bool _2437 = _2435.x == 0u;
    float _2539;
    float _2541;
    float _2543;
    if (_2437)
    {
        _2539 = _2429;
        _2541 = _2430;
        _2543 = _2431;
    }
    else
    {
        uint _2547 = _2361 + 6u;
        float _2563 = (dot(vec3(cbLight._m0[_2361 + 2u].xyz), vec3(_895, _896, _897)) * 0.5) + 0.5;
        float _2564 = _2563 * _2563;
        float _4672 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2565 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2566 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
        _2539 = (((cbLight._m0[_2547].x * 0.3183098733425140380859375) * _2565) * _2566) + _2429;
        _2541 = (((cbLight._m0[_2547].y * 0.3183098733425140380859375) * _2565) * _2566) + _2430;
        _2543 = (((cbLight._m0[_2547].z * 0.3183098733425140380859375) * _2565) * _2566) + _2431;
    }
    bool _2546 = _2435.y == 0u;
    float _2601;
    float _2603;
    float _2605;
    if (_2546)
    {
        _2601 = _2539;
        _2603 = _2541;
        _2605 = _2543;
    }
    else
    {
        uint _2774 = _2361 + 7u;
        float _2790 = (dot(vec3(cbLight._m0[_2361 + 3u].xyz), vec3(_895, _896, _897)) * 0.5) + 0.5;
        float _2791 = _2790 * _2790;
        float _4688 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2792 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2793 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2601 = (((cbLight._m0[_2774].x * 0.3183098733425140380859375) * _2792) * _2793) + _2539;
        _2603 = (((cbLight._m0[_2774].y * 0.3183098733425140380859375) * _2792) * _2793) + _2541;
        _2605 = (((cbLight._m0[_2774].z * 0.3183098733425140380859375) * _2792) * _2793) + _2543;
    }
    uint _2608 = _2361 + 8u;
    float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2361].w)) * _898) * 0.949999988079071044921875);
    float _2622 = _2621 * _2621;
    float _2623 = cbLight._m0[_2361].x + _974;
    float _2624 = cbLight._m0[_2361].y + _975;
    float _2625 = cbLight._m0[_2361].z + _976;
    float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
    float _2630 = _2629 * _2623;
    float _2631 = _2629 * _2624;
    float _2632 = _2629 * _2625;
    float _2633 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2361].xyz));
    float _4704 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _4715 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _2637 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2638 = dot(vec3(_895, _896, _897), vec3(_2630, _2631, _2632));
    float _4726 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2641 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2642 = dot(vec3(cbLight._m0[_2361].xyz), vec3(_2630, _2631, _2632));
    float _4737 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2646 = _2622 * _2622;
    float _2650 = ((_2641 * _2641) * (_2646 + (-1.0))) + 1.0;
    float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0);
    float _2659 = 0.959999978542327880859375 - _1041;
    float _2661 = 0.959999978542327880859375 - _1042;
    float _2662 = 0.959999978542327880859375 - _1043;
    float _2669 = 1.0 - _2622;
    float _2680 = (0.5 / (((_2637 * ((_2636 * _2669) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2637 * _2669) + _2622) * _2636))) * _2636;
    float _4748 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2682 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2646 / ((_2650 * _2650) * 3.141590118408203125));
    uint _2696 = _2361 + 9u;
    float _2707 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2401].w)) * _898) * 0.949999988079071044921875);
    float _2708 = _2707 * _2707;
    float _2709 = cbLight._m0[_2401].x + _974;
    float _2710 = cbLight._m0[_2401].y + _975;
    float _2711 = cbLight._m0[_2401].z + _976;
    float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
    float _2716 = _2715 * _2709;
    float _2717 = _2715 * _2710;
    float _2718 = _2715 * _2711;
    float _2719 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2401].xyz));
    float _4759 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2722 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2723 = dot(vec3(_895, _896, _897), vec3(_2716, _2717, _2718));
    float _4770 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2726 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
    float _2727 = dot(vec3(cbLight._m0[_2401].xyz), vec3(_2716, _2717, _2718));
    float _4781 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _2731 = _2708 * _2708;
    float _2735 = ((_2726 * _2726) * (_2731 + (-1.0))) + 1.0;
    float _2742 = exp2(log2(1.0 - (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) * 5.0);
    float _2749 = 1.0 - _2708;
    float _2759 = (0.5 / (((_2637 * ((_2722 * _2749) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2637 * _2749) + _2708) * _2722))) * _2722;
    float _4792 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
    float _2761 = (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2731 / ((_2735 * _2735) * 3.141590118408203125));
    float _2771 = (((((_2742 * _2659) + _1044) * cbLight._m0[_2696].x) * _2761) * _2384) + ((((cbLight._m0[_2608].x * _2350) * ((_2658 * _2659) + _1044)) * _2682) * _2397);
    float _2772 = (((((_2742 * _2661) + _1046) * cbLight._m0[_2696].y) * _2761) * _2384) + ((((cbLight._m0[_2608].y * _2352) * ((_2658 * _2661) + _1046)) * _2682) * _2397);
    float _2773 = (((((_2742 * _2662) + _1047) * cbLight._m0[_2696].z) * _2761) * _2384) + ((((cbLight._m0[_2608].z * _2354) * ((_2658 * _2662) + _1047)) * _2682) * _2397);
    float _2829;
    float _2831;
    float _2833;
    if (_2437)
    {
        _2829 = _2771;
        _2831 = _2772;
        _2833 = _2773;
    }
    else
    {
        uint _2835 = _2361 + 2u;
        uint _2839 = _2361 + 10u;
        float _2853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2835].w)) * _898) * 0.949999988079071044921875);
        float _2854 = _2853 * _2853;
        float _2855 = cbLight._m0[_2835].x + _974;
        float _2856 = cbLight._m0[_2835].y + _975;
        float _2857 = cbLight._m0[_2835].z + _976;
        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
        float _2862 = _2861 * _2855;
        float _2863 = _2861 * _2856;
        float _2864 = _2861 * _2857;
        float _2865 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2835].xyz));
        float _4803 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2868 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2869 = dot(vec3(_895, _896, _897), vec3(_2862, _2863, _2864));
        float _4814 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2872 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2873 = dot(vec3(cbLight._m0[_2835].xyz), vec3(_2862, _2863, _2864));
        float _4825 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2877 = _2854 * _2854;
        float _2881 = ((_2872 * _2872) * (_2877 + (-1.0))) + 1.0;
        float _2888 = exp2(log2(1.0 - (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) * 5.0);
        float _2895 = 1.0 - _2854;
        float _2905 = (0.5 / (((_2637 * ((_2868 * _2895) + _2854)) + 9.9999999392252902907785028219223e-09) + (((_2637 * _2895) + _2854) * _2868))) * _2868;
        float _4836 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2907 = (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2877 / ((_2881 * _2881) * 3.141590118408203125));
        float _2908 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
        _2829 = (((((_2888 * _2659) + _1044) * cbLight._m0[_2839].x) * _2907) * _2908) + _2771;
        _2831 = (((((_2888 * _2661) + _1046) * cbLight._m0[_2839].y) * _2907) * _2908) + _2772;
        _2833 = (((((_2888 * _2662) + _1047) * cbLight._m0[_2839].z) * _2907) * _2908) + _2773;
    }
    float _2939;
    float _2941;
    float _2943;
    if (_2546)
    {
        _2939 = _2829;
        _2941 = _2831;
        _2943 = _2833;
    }
    else
    {
        uint _2950 = _2361 + 3u;
        uint _2954 = _2361 + 11u;
        float _2968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2950].w)) * _898) * 0.949999988079071044921875);
        float _2969 = _2968 * _2968;
        float _2970 = cbLight._m0[_2950].x + _974;
        float _2971 = cbLight._m0[_2950].y + _975;
        float _2972 = cbLight._m0[_2950].z + _976;
        float _2976 = inversesqrt(dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972)));
        float _2977 = _2976 * _2970;
        float _2978 = _2976 * _2971;
        float _2979 = _2976 * _2972;
        float _2980 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2950].xyz));
        float _4852 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2983 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2984 = dot(vec3(_895, _896, _897), vec3(_2977, _2978, _2979));
        float _4863 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        float _2987 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2988 = dot(vec3(cbLight._m0[_2950].xyz), vec3(_2977, _2978, _2979));
        float _4874 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        float _2992 = _2969 * _2969;
        float _2996 = ((_2987 * _2987) * (_2992 + (-1.0))) + 1.0;
        float _3003 = exp2(log2(1.0 - (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) * 5.0);
        float _3010 = 1.0 - _2969;
        float _3020 = (0.5 / (((_2637 * ((_2983 * _3010) + _2969)) + 9.9999999392252902907785028219223e-09) + (((_2637 * _3010) + _2969) * _2983))) * _2983;
        float _4885 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
        float _3022 = (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2992 / ((_2996 * _2996) * 3.141590118408203125));
        float _3023 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2939 = (((((_3003 * _2659) + _1044) * cbLight._m0[_2954].x) * _3022) * _3023) + _2829;
        _2941 = (((((_3003 * _2661) + _1046) * cbLight._m0[_2954].y) * _3022) * _3023) + _2831;
        _2943 = (((((_3003 * _2662) + _1047) * cbLight._m0[_2954].z) * _3022) * _3023) + _2833;
    }
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    float _3097;
    float _3099;
    if (_2359.y == 0u)
    {
        uvec4 _3044 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3045 = _3044.x;
        uint _3056 = uint((float(_3044.y) * floor(float(uint(cbSceneParam._m0[85u].y * _983) / _3045))) + floor(float(uint(cbSceneParam._m0[85u].x * _982) / _3045)));
        float _3066 = (log2(_2137 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3067 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
        uint _3070 = uint(isnan(14.0) ? _3067 : (isnan(_3067) ? 14.0 : min(_3067, 14.0)));
        uvec4 _3075 = texelFetch(g_lightClusterGridBuffer, int(((_3070 << 2u) + (_3056 << 6u)) >> 2u));
        uint _3076 = _3075.x;
        uint _3077 = _3044.z;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        float _3166;
        if (((((1u << ((_3077 >> 4u) & 15u)) + 4294967295u) & _3076) == 0u) || ((_3077 & 240u) == 0u))
        {
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
            _3162 = 0.0;
            _3164 = 0.0;
            _3166 = 0.0;
        }
        else
        {
            float _3157;
            float _3159;
            float _3161;
            float _3163;
            float _3165;
            float _3167;
            float _3301 = 0.0;
            float _3302 = 0.0;
            float _3303 = 0.0;
            float _3304 = 0.0;
            float _3305 = 0.0;
            float _3306 = 0.0;
            uint _3307 = 0u;
            uint _3316;
            bool _3317;
            for (;;)
            {
                _3316 = texelFetch(g_lightClassification, int((((_3070 << 5u) + (_3056 << 9u)) + (_3307 << 2u)) >> 2u)).x;
                _3317 = _3316 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3317)
                {
                    frontier_phi_66_pred = _3306;
                    frontier_phi_66_pred_1 = _3305;
                    frontier_phi_66_pred_2 = _3304;
                    frontier_phi_66_pred_3 = _3303;
                    frontier_phi_66_pred_4 = _3302;
                    frontier_phi_66_pred_5 = _3301;
                }
                else
                {
                    float _3425;
                    float _3426;
                    float _3427;
                    float _3428;
                    float _3429;
                    float _3430;
                    uint _3431;
                    _3425 = _3301;
                    _3426 = _3302;
                    _3427 = _3303;
                    _3428 = _3304;
                    _3429 = _3305;
                    _3430 = _3306;
                    _3431 = _3316;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    for (;;)
                    {
                        uint _3435 = uint(findLSB(_3431)) + (_3307 << 5u);
                        uint _3432 = (_3431 + 4294967295u) & _3431;
                        uint _3437 = _3435 * 48u;
                        vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3437)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 3u)).x));
                        uint _3457 = (_3435 * 48u) + 4u;
                        vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3457)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 3u)).x));
                        uint _3476 = (_3435 * 48u) + 8u;
                        vec3 _3487 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3476)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 2u)).x));
                        float _3491 = _3451.x - _2135;
                        float _3492 = _3451.y - _2136;
                        float _3493 = _3451.z - _2137;
                        float _3494 = dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493));
                        float _3497 = inversesqrt(_3494);
                        float _3498 = _3497 * _3491;
                        float _3499 = _3497 * _3492;
                        float _3500 = _3497 * _3493;
                        float _3501 = dot(vec3(_1001, _1004, _1007), vec3(_3498, _3499, _3500));
                        float _3506 = 1.0 - (_3494 * _3451.w);
                        float _4911 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3507 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3508 = sqrt(_3494) * _3470.w;
                        float _3511 = 1.39999997615814208984375 / (_3508 + 1.39999997615814208984375);
                        float _3512 = _3511 * _3511;
                        float _3515 = ((1.0 - _3512) * _3501) + _3512;
                        float _3518 = _3508 * _3508;
                        float _3522 = ((isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0))) * _3507) / ((_3518 * 0.699999988079071044921875) + 1.0);
                        float _3526 = (-0.0) - _2135;
                        float _3527 = (-0.0) - _2136;
                        float _3528 = (-0.0) - _2137;
                        float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                        float _3533 = _3532 * _3526;
                        float _3534 = _3532 * _3527;
                        float _3535 = _3532 * _3528;
                        float _3542 = exp2(log2(1.0 / ((_3518 * 3.5) + 5.0)) * 0.25);
                        float _3543 = 1.0 - _1076;
                        float _3550 = sqrt(1.0 - ((1.0 - (_3543 * _3543)) * (1.0 - (_3542 * _3542))));
                        float _3551 = _3550 * _3550;
                        float _3552 = _3551 * _3551;
                        float _3553 = _3533 + _3498;
                        float _3554 = _3534 + _3499;
                        float _3555 = _3535 + _3500;
                        float _3559 = inversesqrt(dot(vec3(_3553, _3554, _3555), vec3(_3553, _3554, _3555)));
                        float _3563 = dot(vec3(_1001, _1004, _1007), vec3(_3533, _3534, _3535));
                        float _4927 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3566 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                        float _3567 = dot(vec3(_1001, _1004, _1007), vec3(_3559 * _3553, _3559 * _3554, _3559 * _3555));
                        float _4938 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3570 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3574 = ((_3570 * _3570) * (_3552 + (-1.0))) + 1.0;
                        float _3575 = _3511 * _3551;
                        float _3576 = _3575 * _3575;
                        float _3579 = ((1.0 - _3576) * _3501) + _3576;
                        float _4949 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                        float _3580 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                        float _3581 = 1.0 - _3551;
                        float _3591 = (0.5 / (((_3580 * ((_3566 * _3581) + _3551)) + 9.9999999392252902907785028219223e-09) + (((_3580 * _3581) + _3551) * _3566))) * _3580;
                        float _4960 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                        float _3602 = (((_3552 * 3.1415927410125732421875) * (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)))) / ((_3574 * _3574) * ((_3518 * 2.1991131305694580078125) + 3.141590118408203125))) * _3507;
                        _3360 = (_3522 * _3470.x) + _3428;
                        _3361 = (_3522 * _3470.y) + _3429;
                        _3362 = (_3522 * _3470.z) + _3430;
                        _3357 = (_3602 * _3487.x) + _3425;
                        _3358 = (_3602 * _3487.y) + _3426;
                        _3359 = (_3602 * _3487.z) + _3427;
                        if (_3432 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3425 = _3357;
                            _3426 = _3358;
                            _3427 = _3359;
                            _3428 = _3360;
                            _3429 = _3361;
                            _3430 = _3362;
                            _3431 = _3432;
                        }
                    }
                    frontier_phi_66_pred = _3362;
                    frontier_phi_66_pred_1 = _3361;
                    frontier_phi_66_pred_2 = _3360;
                    frontier_phi_66_pred_3 = _3359;
                    frontier_phi_66_pred_4 = _3358;
                    frontier_phi_66_pred_5 = _3357;
                }
                _3167 = frontier_phi_66_pred;
                _3165 = frontier_phi_66_pred_1;
                _3163 = frontier_phi_66_pred_2;
                _3161 = frontier_phi_66_pred_3;
                _3159 = frontier_phi_66_pred_4;
                _3157 = frontier_phi_66_pred_5;
                uint _3308 = _3307 + 1u;
                if (_3308 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3301 = _3157;
                    _3302 = _3159;
                    _3303 = _3161;
                    _3304 = _3163;
                    _3305 = _3165;
                    _3306 = _3167;
                    _3307 = _3308;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
            _3162 = _3163;
            _3164 = _3165;
            _3166 = _3167;
        }
        uvec4 _3170 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3171 = _3170.z;
        uint _3173 = (_3171 >> 8u) & 15u;
        float _3269;
        float _3271;
        float _3273;
        float _3275;
        float _3277;
        float _3279;
        if (((4294967295u << _3173) & _3076) == 0u)
        {
            _3269 = _3156;
            _3271 = _3158;
            _3273 = _3160;
            _3275 = _3162;
            _3277 = _3164;
            _3279 = _3166;
        }
        else
        {
            float _3294 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
            float _3295 = _3294 * _2135;
            float _3296 = _3294 * _2136;
            float _3297 = _3294 * _2137;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3173 < ((_3171 >> 12u) & 15u))
            {
                float _3270;
                float _3272;
                float _3274;
                float _3276;
                float _3278;
                float _3280;
                float _3408 = _3156;
                float _3409 = _3158;
                float _3410 = _3160;
                float _3411 = _3162;
                float _3412 = _3164;
                float _3413 = _3166;
                uint _3414 = _3173;
                uint _3423;
                bool _3424;
                for (;;)
                {
                    _3423 = texelFetch(g_lightClassification, int((((_3070 << 5u) + (_3056 << 9u)) + (_3414 << 2u)) >> 2u)).x;
                    _3424 = _3423 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3424)
                    {
                        frontier_phi_72_pred = _3413;
                        frontier_phi_72_pred_1 = _3412;
                        frontier_phi_72_pred_2 = _3411;
                        frontier_phi_72_pred_3 = _3410;
                        frontier_phi_72_pred_4 = _3409;
                        frontier_phi_72_pred_5 = _3408;
                    }
                    else
                    {
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3900;
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3904;
                        float _3905;
                        float _3620 = _3408;
                        float _3621 = _3409;
                        float _3622 = _3410;
                        float _3623 = _3411;
                        float _3624 = _3412;
                        float _3625 = _3413;
                        uint _3626 = _3423;
                        uint _3627;
                        vec4 _3652;
                        float _3653;
                        vec4 _3668;
                        vec3 _3680;
                        vec4 _3695;
                        vec4 _3710;
                        float _3756;
                        bool _3757;
                        for (;;)
                        {
                            uint _3637 = ((_3414 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3626));
                            _3627 = (_3626 + 4294967295u) & _3626;
                            uint _3639 = _3637 * 40u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            _3653 = _3652.w;
                            uint _3655 = (_3637 * 40u) + 4u;
                            _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3670 = (_3637 * 40u) + 8u;
                            _3680 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x));
                            uint _3682 = (_3637 * 40u) + 16u;
                            _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            uint _3697 = (_3637 * 40u) + 20u;
                            _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            uint _3712 = (_3637 * 40u) + 24u;
                            vec4 _3725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 3u)).x));
                            uint _3731 = (_3637 * 40u) + 28u;
                            vec4 _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            _3756 = fma(_2137, _3744.z, fma(_2136, _3744.y, _3744.x * _2135)) + _3744.w;
                            _3757 = !((fma(_2137, _3725.z, fma(_2136, _3725.y, _3725.x * _2135)) + _3725.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3757)
                            {
                                float _3784 = _3652.x - _2135;
                                float _3785 = _3652.y - _2136;
                                float _3786 = _3652.z - _2137;
                                float _3787 = dot(vec3(_3784, _3785, _3786), vec3(_3784, _3785, _3786));
                                float _3790 = inversesqrt(_3787);
                                float _3791 = _3790 * _3784;
                                float _3792 = _3790 * _3785;
                                float _3793 = _3790 * _3786;
                                float _3797 = 1.0 - (_3787 / (_3653 * _3653));
                                float _4971 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3798 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3802 = sqrt(_3787) * _3668.w;
                                float _3804 = 1.39999997615814208984375 / (_3802 + 1.39999997615814208984375);
                                float _3805 = _3804 * _3804;
                                float _3808 = ((1.0 - _3805) * dot(vec3(_3791, _3792, _3793), vec3(_1001, _1004, _1007))) + _3805;
                                float _3811 = _3802 * _3802;
                                float _3815 = (fma(_2137, _3695.z, fma(_2136, _3695.y, _3695.x * _2135)) + _3695.w) / _3756;
                                float _3816 = (fma(_2137, _3710.z, fma(_2136, _3710.y, _3710.x * _2135)) + _3710.w) / _3756;
                                float _3820 = 1.0 - dot(vec2(_3815, _3816), vec2(_3815, _3816));
                                float _4987 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3821 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3822 = _3821 * (((isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0))) * _3798) / ((_3811 * 0.699999988079071044921875) + 1.0));
                                float _3834 = exp2(log2(1.0 / ((_3811 * 3.5) + 5.0)) * 0.25);
                                float _3835 = 1.0 - _1076;
                                float _3842 = sqrt(1.0 - ((1.0 - (_3835 * _3835)) * (1.0 - (_3834 * _3834))));
                                float _3843 = _3842 * _3842;
                                float _3844 = _3843 * _3843;
                                float _3845 = _3791 - _3295;
                                float _3846 = _3792 - _3296;
                                float _3847 = _3793 - _3297;
                                float _3851 = inversesqrt(dot(vec3(_3845, _3846, _3847), vec3(_3845, _3846, _3847)));
                                float _3855 = dot(vec3(_1001, _1004, _1007), vec3((-0.0) - _3295, (-0.0) - _3296, (-0.0) - _3297));
                                float _4998 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3858 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3859 = dot(vec3(_1001, _1004, _1007), vec3(_3851 * _3845, _3851 * _3846, _3851 * _3847));
                                float _5009 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3862 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3866 = ((_3862 * _3862) * (_3844 + (-1.0))) + 1.0;
                                float _3867 = _3804 * _3843;
                                float _3868 = _3867 * _3867;
                                float _3874 = ((1.0 - _3868) * dot(vec3(_1001, _1004, _1007), vec3(_3791, _3792, _3793))) + _3868;
                                float _5020 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3875 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3876 = 1.0 - _3843;
                                float _3886 = (0.5 / (((_3875 * ((_3858 * _3876) + _3843)) + 9.9999999392252902907785028219223e-09) + (((_3875 * _3876) + _3843) * _3858))) * _3875;
                                float _5031 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3896 = (_3821 * _3798) * (((_3844 * 3.1415927410125732421875) * (isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0)))) / ((_3866 * _3866) * ((_3811 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3822 * _3668.y;
                                frontier_phi_78_pred_1 = _3822 * _3668.x;
                                frontier_phi_78_pred_2 = _3896 * _3680.z;
                                frontier_phi_78_pred_3 = _3896 * _3680.y;
                                frontier_phi_78_pred_4 = _3896 * _3680.x;
                                frontier_phi_78_pred_5 = _3822 * _3668.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3904 = frontier_phi_78_pred;
                            _3903 = frontier_phi_78_pred_1;
                            _3902 = frontier_phi_78_pred_2;
                            _3901 = frontier_phi_78_pred_3;
                            _3900 = frontier_phi_78_pred_4;
                            _3905 = frontier_phi_78_pred_5;
                            _3610 = _3903 + _3623;
                            _3611 = _3904 + _3624;
                            _3612 = _3905 + _3625;
                            _3607 = _3900 + _3620;
                            _3608 = _3901 + _3621;
                            _3609 = _3902 + _3622;
                            if (_3627 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3620 = _3607;
                                _3621 = _3608;
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3611;
                                _3625 = _3612;
                                _3626 = _3627;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3612;
                        frontier_phi_72_pred_1 = _3611;
                        frontier_phi_72_pred_2 = _3610;
                        frontier_phi_72_pred_3 = _3609;
                        frontier_phi_72_pred_4 = _3608;
                        frontier_phi_72_pred_5 = _3607;
                    }
                    _3280 = frontier_phi_72_pred;
                    _3278 = frontier_phi_72_pred_1;
                    _3276 = frontier_phi_72_pred_2;
                    _3274 = frontier_phi_72_pred_3;
                    _3272 = frontier_phi_72_pred_4;
                    _3270 = frontier_phi_72_pred_5;
                    uint _3415 = _3414 + 1u;
                    if (_3415 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3408 = _3270;
                        _3409 = _3272;
                        _3410 = _3274;
                        _3411 = _3276;
                        _3412 = _3278;
                        _3413 = _3280;
                        _3414 = _3415;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3280;
                frontier_phi_60_61_ladder_1 = _3278;
                frontier_phi_60_61_ladder_2 = _3274;
                frontier_phi_60_61_ladder_3 = _3272;
                frontier_phi_60_61_ladder_4 = _3270;
                frontier_phi_60_61_ladder_5 = _3276;
            }
            else
            {
                frontier_phi_60_61_ladder = _3166;
                frontier_phi_60_61_ladder_1 = _3164;
                frontier_phi_60_61_ladder_2 = _3160;
                frontier_phi_60_61_ladder_3 = _3158;
                frontier_phi_60_61_ladder_4 = _3156;
                frontier_phi_60_61_ladder_5 = _3162;
            }
            _3269 = frontier_phi_60_61_ladder_4;
            _3271 = frontier_phi_60_61_ladder_3;
            _3273 = frontier_phi_60_61_ladder_2;
            _3275 = frontier_phi_60_61_ladder_5;
            _3277 = frontier_phi_60_61_ladder_1;
            _3279 = frontier_phi_60_61_ladder;
        }
        float _3284 = isnan(1.0) ? _1060 : (isnan(_1060) ? 1.0 : min(_1060, 1.0));
        _3089 = (_3284 * _3275) + _2601;
        _3091 = (_3284 * _3277) + _2603;
        _3093 = (_3284 * _3279) + _2605;
        _3095 = ((_3269 * _1044) * _3284) + _2939;
        _3097 = ((_3271 * _1046) * _3284) + _2941;
        _3099 = ((_3273 * _1047) * _3284) + _2943;
    }
    else
    {
        _3089 = _2601;
        _3091 = _2603;
        _3093 = _2605;
        _3095 = _2939;
        _3097 = _2941;
        _3099 = _2943;
    }
    float _5047 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _5058 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _5069 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    uint _3119 = _263 + 6u;
    float _3127 = _982 / cbSceneParam._m0[86u].x;
    float _3128 = _983 / cbSceneParam._m0[86u].y;
    vec4 _3142 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3127, _3128, (log2((isnan(cbSceneParam._m0[77u].w) ? _917 : (isnan(_917) ? cbSceneParam._m0[77u].w : min(_917, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3144 = _3142.x;
    float _3145 = _3142.y;
    float _3146 = _3142.z;
    float _3147 = _3142.w;
    float _3219;
    float _3221;
    float _3223;
    float _3225;
    if (_917 > cbSceneParam._m0[78u].w)
    {
        float _3181 = isnan(_917) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _917 : min(cbSceneParam._m0[80u].w, _917));
        float _3182 = _3181 / _917;
        float _3193 = _3182 * _967;
        float _3194 = _968 * _3182;
        float _3195 = (-0.0) - _3194;
        float _3197 = _3182 * _969;
        float _3199 = (cbSceneParam._m0[77u].w * _3195) / _3181;
        float _3200 = _3199 + cbSceneParam._m0[79u].w;
        float _3201 = cbSceneParam._m0[79u].w - _3194;
        float _3207 = sqrt(((_3193 * _3193) + (_3194 * _3194)) + (_3197 * _3197));
        float _3210 = (1.0 - (cbSceneParam._m0[77u].w / _3181)) * _3207;
        float _3215 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3217 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3370;
        if (abs((_3195 - _3199) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3370 = ((((_3200 > 0.0) ? exp2(_3215 * _3200) : (2.0 - exp2(_3217 * _3200))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3210;
        }
        else
        {
            float _3330 = 1.0 / cbSceneParam._m0[80u].x;
            float _3331 = isnan(_3201) ? _3200 : (isnan(_3200) ? _3201 : max(_3200, _3201));
            float _3332 = isnan(_3201) ? _3200 : (isnan(_3200) ? _3201 : min(_3200, _3201));
            float _3341 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : min(_3331, 0.0));
            float _3342 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : min(_3332, 0.0));
            _3370 = ((abs(_3207 / _3195) * cbSceneParam._m0[80u].y) * ((((_3341 - _3342) * 2.0) - ((exp2(_3215 * (isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0)))) - exp2(_3215 * (isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0))))) * _3330)) - ((exp2(_3217 * _3341) - exp2(_3217 * _3342)) * _3330))) + (_3210 * cbSceneParam._m0[80u].z);
        }
        vec4 _3372 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3127, _3128, 1.0), 0.0);
        float _3381 = exp2((_3370 * (-1.44269502162933349609375)) * (1.0 - _3372.w));
        float _3382 = log2(_3381);
        float _3398 = log2(_3147);
        _3219 = (exp2(_3398 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3382 * cbSceneParam._m0[78u].x)) * _3372.x) / cbSceneParam._m0[78u].x)) + _3144;
        _3221 = (exp2(_3398 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3382 * cbSceneParam._m0[78u].y)) * _3372.y) / cbSceneParam._m0[78u].y)) + _3145;
        _3223 = (exp2(_3398 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3382 * cbSceneParam._m0[78u].z)) * _3372.z) / cbSceneParam._m0[78u].z)) + _3146;
        _3225 = _3381 * _3147;
    }
    else
    {
        _3219 = _3144;
        _3221 = _3145;
        _3223 = _3146;
        _3225 = _3147;
    }
    float _3237 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3238 = _3237 == 3.0;
    float _3239 = log2(_3225);
    float _3246 = exp2(_3239 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_3089 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1060))) + ((_3095 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1867)) * cbPerFrame._m0[3u].x));
    float _3247 = exp2(_3239 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_3091 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1060))) + ((_3097 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1867)) * cbPerFrame._m0[3u].x));
    float _3248 = exp2(_3239 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3093 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1060))) + ((_3099 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1867)) * cbPerFrame._m0[3u].x));
    float _3257 = (_3237 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3257 * (_3238 ? _3246 : (_3246 + (cbSceneParam._m0[72u].w * _3219)));
    SV_Target.y = _3257 * (_3238 ? _3247 : (_3247 + (cbSceneParam._m0[72u].w * _3221)));
    SV_Target.z = _3257 * (_3238 ? _3248 : (_3248 + (cbSceneParam._m0[72u].w * _3223)));
    SV_Target.w = cbInstanceData._m0[_3119].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3119].w;
}


