#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1452;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3776 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3787 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3798 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _414 = _412.x;
    float _426 = dot(vec4(_414, _412.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _443 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_414 - _426) * cbMtdParam._m0[23u].w) + _426) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3809 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _451 = (_444 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _452 = (_444 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _453 = (_444 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _457 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _451;
    float _460 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _452;
    float _463 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _453;
    float _470 = ((_451 - _457) * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) + _457;
    float _471 = ((_452 - _460) * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) + _460;
    float _472 = ((_453 - _463) * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) + _463;
    vec4 _491 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _300) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _301) + cbTextureTilingScale._m0[14u].w));
    vec4 _511 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _557 = _555.x;
    float _558 = _555.y;
    float _559 = _555.z;
    float _568 = ((_538.z - _559) * _444) + _559;
    float _571 = ((((_538.x - _557) * _444) + _557) * 2.0) + (-1.0);
    float _572 = ((((_538.y - _558) * _444) + _558) * 2.0) + (-1.0);
    float _573 = dot(vec2(_571, _572), vec2(_571, _572));
    float _3820 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _578 = sqrt(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _610 = (_571 + ((((_511.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_598.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _611 = (_572 + ((((_511.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_598.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _614 = fma(_578, _250, fma(_611, _257, _610 * _243));
    float _617 = fma(_578, _251, fma(_611, _258, _610 * _244));
    float _620 = fma(_578, _252, fma(_611, _259, _610 * _245));
    float _624 = inversesqrt(dot(vec3(_614, _617, _620), vec3(_614, _617, _620)));
    vec4 _651 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _653 = _651.x;
    float _654 = 1.0 - _653;
    float _663 = (cbMtdParam._m0[19u].x + dot(vec4(_624 * _614, _624 * _617, _624 * _620, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_653 - _654) * cbMtdParam._m0[24u].z) + _654) * cbMtdParam._m0[21u].z);
    float _3831 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _664 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _666 = (-0.0) - cbMtdParam._m0[24u].x;
    float _668 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _668 : (isnan(_668) ? 1.0 : min(_668, 1.0));
    float _676 = _664 - ((_664 * TEXCOORD_8.x) * _669);
    float _677 = _664 - ((_664 * TEXCOORD_8.y) * _669);
    float _678 = _664 - ((_664 * TEXCOORD_8.z) * _669);
    float _685 = (_676 * ((_491.x * cbMtdParam._m0[18u].x) - _470)) + _470;
    float _686 = (_677 * ((_491.y * cbMtdParam._m0[18u].y) - _471)) + _471;
    float _687 = (_678 * ((_491.z * cbMtdParam._m0[18u].z) - _472)) + _472;
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _701 = _699.x;
    float _702 = 1.0 - _701;
    float _728 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_701 - _702) * cbMtdParam._m0[24u].w) + _702) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3852 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _729 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _737 = ((((cbMtdParam._m0[10u].x - _685) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _729) + _685;
    float _738 = ((((cbMtdParam._m0[10u].y - _686) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _729) + _686;
    float _739 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _687)) * _729) + _687;
    vec4 _751 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _765 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _767 = _765.x;
    float _785 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w)).x - _767) * _444) + _767;
    float _789 = ((_751.x - _785) * cbMtdParam._m0[19u].z) + _785;
    float _791 = _789 - (_789 * _676);
    float _793 = _791 - (_791 * _729);
    float _798 = (((_511.z - _568) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _568;
    float _802 = ((_598.z - _798) * cbMtdParam._m0[19u].w) + _798;
    vec4 _816 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _823 = (_816.x * 2.0) + (-1.0);
    float _824 = (_816.y * 2.0) + (-1.0);
    float _825 = dot(vec2(_823, _824), vec2(_823, _824));
    float _3863 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _833 = ((_816.z - _802) * _676) + _802;
    float _836 = ((cbMtdParam._m0[23u].x - _833) * _729) + _833;
    vec4 _857 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _863 = (_857.x * 2.0) + (-1.0);
    float _864 = (_857.y * 2.0) + (-1.0);
    float _865 = dot(vec2(_863, _864), vec2(_863, _864));
    float _3874 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _880 = ((sqrt(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) - _578) * _678) + _578;
    float _883 = (((_823 - _610) * _676) + _610) + (cbMtdParam._m0[21u].x * _610);
    float _884 = (((_824 - _611) * _677) + _611) + (cbMtdParam._m0[21u].x * _611);
    float _895 = (((_863 - _883) + (_883 * cbMtdParam._m0[22u].z)) * _729) + _883;
    float _896 = (((_864 - _884) + (_884 * cbMtdParam._m0[22u].z)) * _729) + _884;
    float _897 = (_729 * (sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) - _880)) + _880;
    float _899 = cbMtdParam._m0[22u].x + _598.w;
    float _902 = fma(_897, _250, fma(_896, _257, _895 * _243));
    float _905 = fma(_897, _251, fma(_896, _258, _895 * _244));
    float _908 = fma(_897, _252, fma(_896, _259, _895 * _245));
    float _912 = inversesqrt(dot(vec3(_902, _905, _908), vec3(_902, _905, _908)));
    float _913 = _912 * _902;
    float _914 = _912 * _905;
    float _915 = _912 * _908;
    float _3885 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _916 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _3907 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3918 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _3929 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3940 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _921 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _935 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _985 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _975);
    float _986 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _975);
    float _987 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _975);
    float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
    float _992 = _985 * _991;
    float _993 = _986 * _991;
    float _994 = _987 * _991;
    float _1000 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1001 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1019 = fma(_915, cbSceneParam._m0[5u].z, fma(_914, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _913));
    float _1022 = fma(_915, cbSceneParam._m0[6u].z, fma(_914, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _913));
    float _1025 = fma(_915, cbSceneParam._m0[7u].z, fma(_914, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _913));
    uint _1039 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1045 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_1039].x;
    float _1046 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_1039].y;
    float _1047 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_1039].z;
    float _3951 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1051 = 1.0 - _921;
    float _1052 = _1048 * _1051;
    float _1053 = _1049 * _1051;
    float _1054 = _1050 * _1051;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _921;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _921;
    float _1061 = (_1050 + (-0.039999999105930328369140625)) * _921;
    float _1062 = _1059 + 0.039999999105930328369140625;
    float _1064 = _1060 + 0.039999999105930328369140625;
    float _1065 = _1061 + 0.039999999105930328369140625;
    vec4 _1074 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1000, cbSceneParam._m0[86u].y * _1001));
    float _1078 = ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * TEXCOORD_5.w) * _1074.x;
    float _1079 = dot(vec3(_913, _914, _915), vec3(_992, _993, _994));
    float _1082 = _1079 * 2.0;
    float _1086 = (_1082 * _913) - _992;
    float _1087 = (_1082 * _914) - _993;
    float _1088 = (_1082 * _915) - _994;
    float _1092 = abs(dot(vec3(_992, _993, _994), vec3(_913, _914, _915)));
    float _3984 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1094 = sqrt(_916);
    float _1107 = exp2((_1094 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1094 * 3.0));
    float _1113 = (1.0 - _1107) * ((_1094 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1114 = _1107 * _1094;
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1451;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1176 = fma(_1150, cbModelParam._m0[26u].z, fma(_1146, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1142));
        float _1180 = fma(_1150, cbModelParam._m0[27u].z, fma(_1146, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1142));
        float _1184 = fma(_1150, cbModelParam._m0[28u].z, fma(_1146, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1142));
        float _1209 = _1142 + _913;
        float _1210 = _1146 + _914;
        float _1211 = _1150 + _915;
        float _1221 = fma(_1211, cbModelParam._m0[26u].z, fma(_1210, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1209)) - _1176;
        float _1222 = fma(_1211, cbModelParam._m0[27u].z, fma(_1210, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1209)) - _1180;
        float _1223 = fma(_1211, cbModelParam._m0[28u].z, fma(_1210, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1209)) - _1184;
        float _1227 = inversesqrt(dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223)));
        float _1240 = ((_1227 * _1221) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1176 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1227 * _1222) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1180 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1227 * _1223) / cbModelParam._m0[34u].z) + ((((((_1184 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        float _1279 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1245.x + (-0.5));
        float _1281 = _1279 * (_1245.y + (-0.5));
        float _1282 = _1279 * (_1245.z + (-0.5));
        float _1289 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1252.x + (-0.5));
        float _1291 = _1289 * (_1252.y + (-0.5));
        float _1292 = _1289 * (_1252.z + (-0.5));
        float _1299 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1259.x + (-0.5));
        float _1301 = _1299 * (_1259.y + (-0.5));
        float _1302 = _1299 * (_1259.z + (-0.5));
        float _1309 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1266.x + (-0.5));
        float _1311 = _1309 * (_1266.y + (-0.5));
        float _1312 = _1309 * (_1266.z + (-0.5));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = _1280 * 0.5;
        float _1317 = _1290 * 0.5;
        float _1318 = _1300 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1333 = (dot(vec3(_913, _914, _915), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1343 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4032 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1345 + 1.0))) + _1350) * _1313;
        float _1360 = _1281 * 0.5;
        float _1361 = _1291 * 0.5;
        float _1362 = _1301 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_913, _914, _915), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4065 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1387 + 1.0))) + _1392) * _1314;
        float _1402 = _1282 * 0.5;
        float _1403 = _1292 * 0.5;
        float _1404 = _1302 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_913, _914, _915), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4098 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1429 + 1.0))) + _1434) * _1315;
        _1451 = _1282;
        _1453 = _1281;
        _1454 = _1280;
        _1455 = _1292;
        _1456 = _1291;
        _1457 = _1290;
        _1458 = _1302;
        _1459 = _1301;
        _1460 = _1300;
        _1461 = _1315;
        _1462 = _1314;
        _1463 = _1313;
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
    }
    else
    {
        _1451 = _1452;
        _1453 = _1452;
        _1454 = _1452;
        _1455 = _1452;
        _1456 = _1452;
        _1457 = _1452;
        _1458 = _1452;
        _1459 = _1452;
        _1460 = _1452;
        _1461 = _1452;
        _1462 = _1452;
        _1463 = _1452;
        _1464 = 0.0;
        _1465 = 0.0;
        _1466 = 0.0;
    }
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1491 = fma(_1150, cbModelParam._m0[30u].z, fma(_1146, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1142));
        float _1495 = fma(_1150, cbModelParam._m0[31u].z, fma(_1146, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1142));
        float _1499 = fma(_1150, cbModelParam._m0[32u].z, fma(_1146, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1142));
        float _1522 = _1142 + _913;
        float _1523 = _1146 + _914;
        float _1524 = _1150 + _915;
        float _1534 = fma(_1524, cbModelParam._m0[30u].z, fma(_1523, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1522)) - _1491;
        float _1535 = fma(_1524, cbModelParam._m0[31u].z, fma(_1523, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1522)) - _1495;
        float _1536 = fma(_1524, cbModelParam._m0[32u].z, fma(_1523, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1522)) - _1499;
        float _1540 = inversesqrt(dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536)));
        float _1553 = ((_1540 * _1534) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1491 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1540 * _1535) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1495 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1555 = ((_1540 * _1536) / cbModelParam._m0[35u].z) + ((((((_1499 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        float _1590 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1557.x + (-0.5));
        float _1592 = _1590 * (_1557.y + (-0.5));
        float _1593 = _1590 * (_1557.z + (-0.5));
        float _1600 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1564.x + (-0.5));
        float _1602 = _1600 * (_1564.y + (-0.5));
        float _1603 = _1600 * (_1564.z + (-0.5));
        float _1610 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1571.x + (-0.5));
        float _1612 = _1610 * (_1571.y + (-0.5));
        float _1613 = _1610 * (_1571.z + (-0.5));
        float _1620 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1578.x + (-0.5));
        float _1622 = _1620 * (_1578.y + (-0.5));
        float _1623 = _1620 * (_1578.z + (-0.5));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = _1591 * 0.5;
        float _1628 = _1601 * 0.5;
        float _1629 = _1611 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_913, _914, _915), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4161 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1654 + 1.0))) + _1659) * _1624;
        float _1669 = _1592 * 0.5;
        float _1670 = _1602 * 0.5;
        float _1671 = _1612 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_913, _914, _915), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4194 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1696 + 1.0))) + _1701) * _1625;
        float _1711 = _1593 * 0.5;
        float _1712 = _1603 * 0.5;
        float _1713 = _1613 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_913, _914, _915), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4227 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1738 + 1.0))) + _1743) * _1626;
        _1760 = _1593;
        _1761 = _1592;
        _1762 = _1591;
        _1763 = _1603;
        _1764 = _1602;
        _1765 = _1601;
        _1766 = _1613;
        _1767 = _1612;
        _1768 = _1611;
        _1769 = _1626;
        _1770 = _1625;
        _1771 = _1624;
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
    }
    else
    {
        _1760 = _1452;
        _1761 = _1452;
        _1762 = _1452;
        _1763 = _1452;
        _1764 = _1452;
        _1765 = _1452;
        _1766 = _1452;
        _1767 = _1452;
        _1768 = _1452;
        _1769 = _1452;
        _1770 = _1452;
        _1771 = _1452;
        _1772 = 0.0;
        _1773 = 0.0;
        _1774 = 0.0;
    }
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1464)) + _1464;
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1465)) + _1465;
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1466)) + _1466;
    float _1807 = fma(_1786, cbSceneParam._m0[89u].z, fma(_1785, cbSceneParam._m0[89u].y, _1784 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1786, cbSceneParam._m0[90u].z, fma(_1785, cbSceneParam._m0[90u].y, _1784 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1786, cbSceneParam._m0[91u].z, fma(_1785, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1784));
    float _1828 = _1086 * 0.5;
    float _1829 = _1087 * 0.5;
    float _1830 = _1088 * 0.5;
    float _1831 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1834 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1837 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1871;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1844 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1451, _1455, _1458, _1461));
        float _1848 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1453, _1456, _1459, _1462));
        float _1852 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1454, _1457, _1460, _1463));
        float _1859 = dot(vec4(cbModelParam._m0[39u]), vec4(_1828, _1829, _1830, 1.0));
        _1871 = dot(vec3(isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1859) ? 0.0 : (isnan(0.0) ? _1859 : max(0.0, _1859))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1871 = 1.0;
    }
    float _1882;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1873 = dot(vec4(cbModelParam._m0[40u]), vec4(_1828, _1829, _1830, 1.0));
        _1882 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1873) ? 0.0 : (isnan(0.0) ? _1873 : max(0.0, _1873))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1882 = 1.0;
    }
    float _1886 = (_1882 * cbModelParam._m0[1u].x) + (_1871 * (1.0 - cbModelParam._m0[1u].x));
    float _1896 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _916);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1896 : min(cbModelParam._m0[25u].z, _1896));
    float _1977;
    float _1979;
    float _1981;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1944 = fma(_1150, cbModelParam._m0[13u].z, fma(_1146, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1142)) + cbModelParam._m0[13u].w;
        float _1948 = fma(_1150, cbModelParam._m0[14u].z, fma(_1146, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1142)) + cbModelParam._m0[14u].w;
        float _1952 = fma(_1150, cbModelParam._m0[15u].z, fma(_1146, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1142)) + cbModelParam._m0[15u].w;
        float _1955 = fma(_1088, cbModelParam._m0[13u].z, fma(_1087, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1086));
        float _1958 = fma(_1088, cbModelParam._m0[14u].z, fma(_1087, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1086));
        float _1961 = fma(_1088, cbModelParam._m0[15u].z, fma(_1087, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1086));
        float _1989;
        if (_1955 > 0.0)
        {
            _1989 = abs((1.0 - _1944) / _1955);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1944 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1989 = frontier_phi_14_12_ladder;
        }
        float _2191;
        if (_1958 > 0.0)
        {
            _2191 = abs((1.0 - _1948) / _1958);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1948 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2191 = frontier_phi_23_19_ladder;
        }
        float _2445;
        if (_1961 > 0.0)
        {
            _2445 = abs((1.0 - _1952) / _1961);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1952 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2445 = frontier_phi_35_30_ladder;
        }
        float _2447 = isnan(_2191) ? _1989 : (isnan(_1989) ? _2191 : min(_1989, _2191));
        float _2448 = isnan(_2445) ? _2447 : (isnan(_2447) ? _2445 : min(_2447, _2445));
        float _2452 = (_2448 * _1955) + _1944;
        float _2453 = (_2448 * _1958) + _1948;
        float _2454 = (_2448 * _1961) + _1952;
        float _2455 = _2448 * 9.9999997473787516355514526367188e-05;
        float _2457 = (-1.0) - _2455;
        float _2459 = _2455 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2454 > _2459) || ((_2454 < _2457) || ((_2453 > _2459) || ((_2453 < _2457) || ((_2452 < _2457) || (_2452 > _2459))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2582 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2454, cbModelParam._m0[9u].z, fma(_2453, cbModelParam._m0[9u].y, _2452 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2454, cbModelParam._m0[10u].z, fma(_2453, cbModelParam._m0[10u].y, _2452 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2454, cbModelParam._m0[11u].z, fma(_2453, cbModelParam._m0[11u].y, _2452 * cbModelParam._m0[11u].x))), _1897);
            frontier_phi_13_35_ladder = _2582.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2582.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2582.x * cbModelParam._m0[1u].y;
        }
        _1977 = frontier_phi_13_35_ladder_2;
        _1979 = frontier_phi_13_35_ladder_1;
        _1981 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1086, _1087, _1088), _1897);
        _1977 = _1965.x * cbModelParam._m0[1u].y;
        _1979 = _1965.y * cbModelParam._m0[1u].y;
        _1981 = _1965.z * cbModelParam._m0[1u].y;
    }
    float _1985 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _916);
    float _1986 = isnan(_1985) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1985 : min(cbModelParam._m0[25u].w, _1985));
    float _2075;
    float _2077;
    float _2079;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2039 = fma(_1150, cbModelParam._m0[21u].z, fma(_1146, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1142)) + cbModelParam._m0[21u].w;
        float _2043 = fma(_1150, cbModelParam._m0[22u].z, fma(_1146, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1142)) + cbModelParam._m0[22u].w;
        float _2047 = fma(_1150, cbModelParam._m0[23u].z, fma(_1146, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1142)) + cbModelParam._m0[23u].w;
        float _2050 = fma(_1088, cbModelParam._m0[21u].z, fma(_1087, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1086));
        float _2053 = fma(_1088, cbModelParam._m0[22u].z, fma(_1087, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1086));
        float _2056 = fma(_1088, cbModelParam._m0[23u].z, fma(_1087, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1086));
        float _2196;
        if (_2050 > 0.0)
        {
            _2196 = abs((1.0 - _2039) / _2050);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2039 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2196 = frontier_phi_25_21_ladder;
        }
        float _2472;
        if (_2053 > 0.0)
        {
            _2472 = abs((1.0 - _2043) / _2053);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2043 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2472 = frontier_phi_37_32_ladder;
        }
        float _2685;
        if (_2056 > 0.0)
        {
            _2685 = abs((1.0 - _2047) / _2056);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2047 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2685 = frontier_phi_46_43_ladder;
        }
        float _2687 = isnan(_2472) ? _2196 : (isnan(_2196) ? _2472 : min(_2196, _2472));
        float _2688 = isnan(_2685) ? _2687 : (isnan(_2687) ? _2685 : min(_2687, _2685));
        float _2692 = (_2688 * _2050) + _2039;
        float _2693 = (_2688 * _2053) + _2043;
        float _2694 = (_2688 * _2056) + _2047;
        float _2695 = _2688 * 9.9999997473787516355514526367188e-05;
        float _2696 = (-1.0) - _2695;
        float _2698 = _2695 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2694 > _2698) || ((_2694 < _2696) || ((_2693 > _2698) || ((_2693 < _2696) || ((_2692 < _2696) || (_2692 > _2698))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2694, cbModelParam._m0[17u].z, fma(_2693, cbModelParam._m0[17u].y, _2692 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2694, cbModelParam._m0[18u].z, fma(_2693, cbModelParam._m0[18u].y, _2692 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2694, cbModelParam._m0[19u].z, fma(_2693, cbModelParam._m0[19u].y, _2692 * cbModelParam._m0[19u].x))), _1986);
            frontier_phi_22_46_ladder = _2893.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2893.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2893.x * cbModelParam._m0[1u].z;
        }
        _2075 = frontier_phi_22_46_ladder_2;
        _2077 = frontier_phi_22_46_ladder_1;
        _2079 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2059 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1086, _1087, _1088), _1986);
        _2075 = _2059.x * cbModelParam._m0[1u].z;
        _2077 = _2059.y * cbModelParam._m0[1u].z;
        _2079 = _2059.z * cbModelParam._m0[1u].z;
    }
    float _2092 = (((_1113 * _1062) + _1114) * _1078) * ((cbModelParam._m0[1u].w * (_2075 - _1977)) + _1977);
    float _2094 = (((_1113 * _1064) + _1114) * _1078) * ((cbModelParam._m0[1u].w * (_2077 - _1979)) + _1979);
    float _2096 = (((_1113 * _1065) + _1114) * _1078) * ((cbModelParam._m0[1u].w * (_2079 - _1981)) + _1981);
    float _2099 = fma(_2096, cbSceneParam._m0[89u].z, fma(_2094, cbSceneParam._m0[89u].y, _2092 * cbSceneParam._m0[89u].x));
    float _2102 = fma(_2096, cbSceneParam._m0[90u].z, fma(_2094, cbSceneParam._m0[90u].y, _2092 * cbSceneParam._m0[90u].x));
    float _2105 = fma(_2096, cbSceneParam._m0[91u].z, fma(_2094, cbSceneParam._m0[91u].y, _2092 * cbSceneParam._m0[91u].x));
    uvec4 _2115 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2117 = _2115.x * 14u;
    uint _2118 = _2117 + 13u;
    float _2125 = _1078 + (-1.0);
    float _2130 = (cbLight._m0[_2118].x * _2125) + 1.0;
    float _2131 = (cbLight._m0[_2118].y * _2125) + 1.0;
    float _2132 = (cbLight._m0[_2118].z * _2125) + 1.0;
    float _2133 = (cbLight._m0[_2118].w * _2125) + 1.0;
    uint _2134 = _2117 + 5u;
    float _2140 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
    uint _2144 = _2117 + 4u;
    float _2150 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
    uint _2154 = _2117 | 1u;
    float _2165 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_913, _914, _915));
    float _2168 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_913, _914, _915));
    float _4363 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _4374 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2173 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * 0.3183098733425140380859375;
    float _2175 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * 0.3183098733425140380859375;
    float _2182 = ((cbLight._m0[_2134].x * _2140) * _2175) + ((cbLight._m0[_2144].x * _2150) * _2173);
    float _2183 = ((_2140 * cbLight._m0[_2134].y) * _2175) + ((_2150 * cbLight._m0[_2144].y) * _2173);
    float _2184 = ((_2140 * cbLight._m0[_2134].z) * _2175) + ((_2150 * cbLight._m0[_2144].z) * _2173);
    uvec4 _2188 = floatBitsToUint(cbLight._m0[_2117 + 12u]);
    bool _2190 = _2188.x == 0u;
    float _2201;
    float _2203;
    float _2205;
    if (_2190)
    {
        _2201 = _2182;
        _2203 = _2183;
        _2205 = _2184;
    }
    else
    {
        uint _2209 = _2117 + 6u;
        float _2225 = (dot(vec3(cbLight._m0[_2117 + 2u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2226 = _2225 * _2225;
        float _4385 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2227 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2228 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2201 = (((cbLight._m0[_2209].x * 0.3183098733425140380859375) * _2227) * _2228) + _2182;
        _2203 = (((cbLight._m0[_2209].y * 0.3183098733425140380859375) * _2227) * _2228) + _2183;
        _2205 = (((cbLight._m0[_2209].z * 0.3183098733425140380859375) * _2227) * _2228) + _2184;
    }
    bool _2208 = _2188.y == 0u;
    float _2246;
    float _2248;
    float _2250;
    if (_2208)
    {
        _2246 = _2201;
        _2248 = _2203;
        _2250 = _2205;
    }
    else
    {
        uint _2416 = _2117 + 7u;
        float _2432 = (dot(vec3(cbLight._m0[_2117 + 3u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2433 = _2432 * _2432;
        float _4401 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2434 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2435 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2246 = (((cbLight._m0[_2416].x * 0.3183098733425140380859375) * _2434) * _2435) + _2201;
        _2248 = (((cbLight._m0[_2416].y * 0.3183098733425140380859375) * _2434) * _2435) + _2203;
        _2250 = (((cbLight._m0[_2416].z * 0.3183098733425140380859375) * _2434) * _2435) + _2205;
    }
    uint _2253 = _2117 + 8u;
    float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _916) * 0.949999988079071044921875);
    float _2267 = _2266 * _2266;
    float _2268 = cbLight._m0[_2117].x + _992;
    float _2269 = cbLight._m0[_2117].y + _993;
    float _2270 = cbLight._m0[_2117].z + _994;
    float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
    float _2275 = _2274 * _2268;
    float _2276 = _2274 * _2269;
    float _2277 = _2274 * _2270;
    float _2278 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2117].xyz));
    float _4417 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _4428 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _2282 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2283 = dot(vec3(_913, _914, _915), vec3(_2275, _2276, _2277));
    float _4439 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2287 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2275, _2276, _2277));
    float _4450 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2291 = _2267 * _2267;
    float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
    float _2303 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
    float _2304 = 0.959999978542327880859375 - _1059;
    float _2306 = 0.959999978542327880859375 - _1060;
    float _2307 = 0.959999978542327880859375 - _1061;
    float _2314 = 1.0 - _2267;
    float _2325 = (0.5 / (((_2282 * ((_2281 * _2314) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2314) + _2267) * _2281))) * _2281;
    float _4461 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2327 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
    uint _2338 = _2117 + 9u;
    float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _916) * 0.949999988079071044921875);
    float _2350 = _2349 * _2349;
    float _2351 = cbLight._m0[_2154].x + _992;
    float _2352 = cbLight._m0[_2154].y + _993;
    float _2353 = cbLight._m0[_2154].z + _994;
    float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
    float _2358 = _2357 * _2351;
    float _2359 = _2357 * _2352;
    float _2360 = _2357 * _2353;
    float _2361 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2154].xyz));
    float _4472 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2365 = dot(vec3(_913, _914, _915), vec3(_2358, _2359, _2360));
    float _4483 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2358, _2359, _2360));
    float _4494 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2350 * _2350;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0);
    float _2391 = 1.0 - _2350;
    float _2401 = (0.5 / (((_2282 * ((_2364 * _2391) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2391) + _2350) * _2364))) * _2364;
    float _4505 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2403 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    float _2413 = (((((_2384 * _2304) + _1062) * cbLight._m0[_2338].x) * _2403) * _2140) + (((((_2303 * _2304) + _1062) * cbLight._m0[_2253].x) * _2327) * _2150);
    float _2414 = (((((_2384 * _2306) + _1064) * cbLight._m0[_2338].y) * _2403) * _2140) + (((((_2303 * _2306) + _1064) * cbLight._m0[_2253].y) * _2327) * _2150);
    float _2415 = (((((_2384 * _2307) + _1065) * cbLight._m0[_2338].z) * _2403) * _2140) + (((((_2303 * _2307) + _1065) * cbLight._m0[_2253].z) * _2327) * _2150);
    float _2477;
    float _2479;
    float _2481;
    if (_2190)
    {
        _2477 = _2413;
        _2479 = _2414;
        _2481 = _2415;
    }
    else
    {
        uint _2483 = _2117 + 2u;
        uint _2487 = _2117 + 10u;
        float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2483].w)) * _916) * 0.949999988079071044921875);
        float _2502 = _2501 * _2501;
        float _2503 = cbLight._m0[_2483].x + _992;
        float _2504 = cbLight._m0[_2483].y + _993;
        float _2505 = cbLight._m0[_2483].z + _994;
        float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
        float _2510 = _2509 * _2503;
        float _2511 = _2509 * _2504;
        float _2512 = _2509 * _2505;
        float _2513 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2483].xyz));
        float _4516 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2517 = dot(vec3(_913, _914, _915), vec3(_2510, _2511, _2512));
        float _4527 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2521 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_2510, _2511, _2512));
        float _4538 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2525 = _2502 * _2502;
        float _2529 = ((_2520 * _2520) * (_2525 + (-1.0))) + 1.0;
        float _2536 = exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0);
        float _2543 = 1.0 - _2502;
        float _2553 = (0.5 / (((_2282 * ((_2516 * _2543) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2543) + _2502) * _2516))) * _2516;
        float _4549 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2555 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2525 / ((_2529 * _2529) * 3.141590118408203125));
        float _2556 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2477 = (((((_2536 * _2304) + _1062) * cbLight._m0[_2487].x) * _2555) * _2556) + _2413;
        _2479 = (((((_2536 * _2306) + _1064) * cbLight._m0[_2487].y) * _2555) * _2556) + _2414;
        _2481 = (((((_2536 * _2307) + _1065) * cbLight._m0[_2487].z) * _2555) * _2556) + _2415;
    }
    float _2591;
    float _2593;
    float _2595;
    if (_2208)
    {
        _2591 = _2477;
        _2593 = _2479;
        _2595 = _2481;
    }
    else
    {
        uint _2602 = _2117 + 3u;
        uint _2606 = _2117 + 11u;
        float _2620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2602].w)) * _916) * 0.949999988079071044921875);
        float _2621 = _2620 * _2620;
        float _2622 = cbLight._m0[_2602].x + _992;
        float _2623 = cbLight._m0[_2602].y + _993;
        float _2624 = cbLight._m0[_2602].z + _994;
        float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
        float _2629 = _2628 * _2622;
        float _2630 = _2628 * _2623;
        float _2631 = _2628 * _2624;
        float _2632 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2602].xyz));
        float _4565 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2636 = dot(vec3(_913, _914, _915), vec3(_2629, _2630, _2631));
        float _4576 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2640 = dot(vec3(cbLight._m0[_2602].xyz), vec3(_2629, _2630, _2631));
        float _4587 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2644 = _2621 * _2621;
        float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
        float _2655 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
        float _2662 = 1.0 - _2621;
        float _2672 = (0.5 / (((_2282 * ((_2635 * _2662) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2282 * _2662) + _2621) * _2635))) * _2635;
        float _4598 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2674 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
        float _2675 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2591 = (((((_2655 * _2304) + _1062) * cbLight._m0[_2606].x) * _2674) * _2675) + _2477;
        _2593 = (((((_2655 * _2306) + _1064) * cbLight._m0[_2606].y) * _2674) * _2675) + _2479;
        _2595 = (((((_2655 * _2307) + _1065) * cbLight._m0[_2606].z) * _2674) * _2675) + _2481;
    }
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    if (_2115.y == 0u)
    {
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2750;
        float _2752 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2750;
        float _2753 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2750;
        uvec4 _2765 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2766 = _2765.x;
        uint _2777 = uint((float(_2765.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1001) / _2766))) + floor(float(uint(cbSceneParam._m0[85u].x * _1000) / _2766)));
        float _2787 = (log2(_2753 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2788 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        uint _2791 = uint(isnan(14.0) ? _2788 : (isnan(_2788) ? 14.0 : min(_2788, 14.0)));
        uvec4 _2796 = texelFetch(g_lightClusterGridBuffer, int(((_2791 << 2u) + (_2777 << 6u)) >> 2u));
        uint _2797 = _2796.x;
        uint _2798 = _2765.z;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((((1u << ((_2798 >> 4u) & 15u)) + 4294967295u) & _2797) == 0u) || ((_2798 & 240u) == 0u))
        {
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
        }
        else
        {
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            uint _3048 = 0u;
            uint _3057;
            bool _3058;
            for (;;)
            {
                _3057 = texelFetch(g_lightClassification, int((((_2791 << 5u) + (_2777 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                _3058 = _3057 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3058)
                {
                    frontier_phi_61_pred = _3042;
                    frontier_phi_61_pred_1 = _3047;
                    frontier_phi_61_pred_2 = _3046;
                    frontier_phi_61_pred_3 = _3045;
                    frontier_phi_61_pred_4 = _3044;
                    frontier_phi_61_pred_5 = _3043;
                }
                else
                {
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    uint _3172;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3057;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    for (;;)
                    {
                        uint _3176 = uint(findLSB(_3172)) + (_3048 << 5u);
                        uint _3173 = (_3172 + 4294967295u) & _3172;
                        uint _3178 = _3176 * 48u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3198 = (_3176 * 48u) + 4u;
                        vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 3u)).x));
                        uint _3217 = (_3176 * 48u) + 8u;
                        vec3 _3228 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x));
                        float _3232 = _3192.x - _2751;
                        float _3233 = _3192.y - _2752;
                        float _3234 = _3192.z - _2753;
                        float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                        float _3238 = inversesqrt(_3235);
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3242 = dot(vec3(_1019, _1022, _1025), vec3(_3239, _3240, _3241));
                        float _3247 = 1.0 - (_3235 * _3192.w);
                        float _4624 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3249 = sqrt(_3235) * _3211.w;
                        float _3252 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3242) + _3253;
                        float _3259 = _3249 * _3249;
                        float _3263 = ((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3248) / ((_3259 * 0.699999988079071044921875) + 1.0);
                        float _3267 = (-0.0) - _2751;
                        float _3268 = (-0.0) - _2752;
                        float _3269 = (-0.0) - _2753;
                        float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3284 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                        float _3285 = 1.0 - _1094;
                        float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                        float _3293 = _3292 * _3292;
                        float _3294 = _3293 * _3293;
                        float _3295 = _3274 + _3239;
                        float _3296 = _3275 + _3240;
                        float _3297 = _3276 + _3241;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3305 = dot(vec3(_1019, _1022, _1025), vec3(_3274, _3275, _3276));
                        float _4640 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3309 = dot(vec3(_1019, _1022, _1025), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                        float _4651 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                        float _3317 = _3252 * _3293;
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3242) + _3318;
                        float _4662 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3322 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3323 = 1.0 - _3293;
                        float _3333 = (0.5 / (((_3322 * ((_3308 * _3323) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3293) * _3308))) * _3322;
                        float _4673 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3344 = (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) / ((_3316 * _3316) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125))) * _3248;
                        _3101 = (_3263 * _3211.x) + _3169;
                        _3102 = (_3263 * _3211.y) + _3170;
                        _3103 = (_3263 * _3211.z) + _3171;
                        _3098 = (_3344 * _3228.x) + _3166;
                        _3099 = (_3344 * _3228.y) + _3167;
                        _3100 = (_3344 * _3228.z) + _3168;
                        if (_3173 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3173;
                        }
                    }
                    frontier_phi_61_pred = _3098;
                    frontier_phi_61_pred_1 = _3103;
                    frontier_phi_61_pred_2 = _3102;
                    frontier_phi_61_pred_3 = _3101;
                    frontier_phi_61_pred_4 = _3100;
                    frontier_phi_61_pred_5 = _3099;
                }
                _2899 = frontier_phi_61_pred;
                _2909 = frontier_phi_61_pred_1;
                _2907 = frontier_phi_61_pred_2;
                _2905 = frontier_phi_61_pred_3;
                _2903 = frontier_phi_61_pred_4;
                _2901 = frontier_phi_61_pred_5;
                uint _3049 = _3048 + 1u;
                if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3042 = _2899;
                    _3043 = _2901;
                    _3044 = _2903;
                    _3045 = _2905;
                    _3046 = _2907;
                    _3047 = _2909;
                    _3048 = _3049;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
        }
        uvec4 _2912 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2913 = _2912.z;
        uint _2915 = (_2913 >> 8u) & 15u;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((4294967295u << _2915) & _2797) == 0u)
        {
            _3010 = _2898;
            _3012 = _2900;
            _3014 = _2902;
            _3016 = _2904;
            _3018 = _2906;
            _3020 = _2908;
        }
        else
        {
            float _3035 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
            float _3036 = _3035 * _2751;
            float _3037 = _3035 * _2752;
            float _3038 = _3035 * _2753;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2915 < ((_2913 >> 12u) & 15u))
            {
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3149 = _2898;
                float _3150 = _2900;
                float _3151 = _2902;
                float _3152 = _2904;
                float _3153 = _2906;
                float _3154 = _2908;
                uint _3155 = _2915;
                uint _3164;
                bool _3165;
                for (;;)
                {
                    _3164 = texelFetch(g_lightClassification, int((((_2791 << 5u) + (_2777 << 9u)) + (_3155 << 2u)) >> 2u)).x;
                    _3165 = _3164 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3165)
                    {
                        frontier_phi_67_pred = _3152;
                        frontier_phi_67_pred_1 = _3153;
                        frontier_phi_67_pred_2 = _3154;
                        frontier_phi_67_pred_3 = _3151;
                        frontier_phi_67_pred_4 = _3150;
                        frontier_phi_67_pred_5 = _3149;
                    }
                    else
                    {
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3362 = _3149;
                        float _3363 = _3150;
                        float _3364 = _3151;
                        float _3365 = _3152;
                        float _3366 = _3153;
                        float _3367 = _3154;
                        uint _3368 = _3164;
                        uint _3369;
                        vec4 _3394;
                        float _3395;
                        vec4 _3410;
                        vec3 _3422;
                        vec4 _3437;
                        vec4 _3452;
                        float _3498;
                        bool _3499;
                        for (;;)
                        {
                            uint _3379 = ((_3155 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3368));
                            _3369 = (_3368 + 4294967295u) & _3368;
                            uint _3381 = _3379 * 40u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            _3395 = _3394.w;
                            uint _3397 = (_3379 * 40u) + 4u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3379 * 40u) + 8u;
                            _3422 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x));
                            uint _3424 = (_3379 * 40u) + 16u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3379 * 40u) + 20u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3379 * 40u) + 24u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3473 = (_3379 * 40u) + 28u;
                            vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            _3498 = fma(_2753, _3486.z, fma(_2752, _3486.y, _3486.x * _2751)) + _3486.w;
                            _3499 = !((fma(_2753, _3467.z, fma(_2752, _3467.y, _3467.x * _2751)) + _3467.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3499)
                            {
                                float _3526 = _3394.x - _2751;
                                float _3527 = _3394.y - _2752;
                                float _3528 = _3394.z - _2753;
                                float _3529 = dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528));
                                float _3532 = inversesqrt(_3529);
                                float _3533 = _3532 * _3526;
                                float _3534 = _3532 * _3527;
                                float _3535 = _3532 * _3528;
                                float _3539 = 1.0 - (_3529 / (_3395 * _3395));
                                float _4684 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3544 = sqrt(_3529) * _3410.w;
                                float _3546 = 1.39999997615814208984375 / (_3544 + 1.39999997615814208984375);
                                float _3547 = _3546 * _3546;
                                float _3550 = ((1.0 - _3547) * dot(vec3(_3533, _3534, _3535), vec3(_1019, _1022, _1025))) + _3547;
                                float _3553 = _3544 * _3544;
                                float _3557 = (fma(_2753, _3437.z, fma(_2752, _3437.y, _3437.x * _2751)) + _3437.w) / _3498;
                                float _3558 = (fma(_2753, _3452.z, fma(_2752, _3452.y, _3452.x * _2751)) + _3452.w) / _3498;
                                float _3562 = 1.0 - dot(vec2(_3557, _3558), vec2(_3557, _3558));
                                float _4700 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3564 = _3563 * (((isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0))) * _3540) / ((_3553 * 0.699999988079071044921875) + 1.0));
                                float _3576 = exp2(log2(1.0 / ((_3553 * 3.5) + 5.0)) * 0.25);
                                float _3577 = 1.0 - _1094;
                                float _3584 = sqrt(1.0 - ((1.0 - (_3577 * _3577)) * (1.0 - (_3576 * _3576))));
                                float _3585 = _3584 * _3584;
                                float _3586 = _3585 * _3585;
                                float _3587 = _3533 - _3036;
                                float _3588 = _3534 - _3037;
                                float _3589 = _3535 - _3038;
                                float _3593 = inversesqrt(dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589)));
                                float _3597 = dot(vec3(_1019, _1022, _1025), vec3((-0.0) - _3036, (-0.0) - _3037, (-0.0) - _3038));
                                float _4711 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3600 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3601 = dot(vec3(_1019, _1022, _1025), vec3(_3593 * _3587, _3593 * _3588, _3593 * _3589));
                                float _4722 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3608 = ((_3604 * _3604) * (_3586 + (-1.0))) + 1.0;
                                float _3609 = _3546 * _3585;
                                float _3610 = _3609 * _3609;
                                float _3616 = ((1.0 - _3610) * dot(vec3(_1019, _1022, _1025), vec3(_3533, _3534, _3535))) + _3610;
                                float _4733 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3617 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3618 = 1.0 - _3585;
                                float _3628 = (0.5 / (((_3617 * ((_3600 * _3618) + _3585)) + 9.9999999392252902907785028219223e-09) + (((_3617 * _3618) + _3585) * _3600))) * _3617;
                                float _4744 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3638 = (_3563 * _3540) * (((_3586 * 3.1415927410125732421875) * (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) / ((_3608 * _3608) * ((_3553 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3638 * _3422.x;
                                frontier_phi_73_pred_1 = _3638 * _3422.y;
                                frontier_phi_73_pred_2 = _3564 * _3410.z;
                                frontier_phi_73_pred_3 = _3564 * _3410.y;
                                frontier_phi_73_pred_4 = _3564 * _3410.x;
                                frontier_phi_73_pred_5 = _3638 * _3422.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3642 = frontier_phi_73_pred;
                            _3643 = frontier_phi_73_pred_1;
                            _3647 = frontier_phi_73_pred_2;
                            _3646 = frontier_phi_73_pred_3;
                            _3645 = frontier_phi_73_pred_4;
                            _3644 = frontier_phi_73_pred_5;
                            _3352 = _3645 + _3365;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            if (_3369 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3369;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3352;
                        frontier_phi_67_pred_1 = _3353;
                        frontier_phi_67_pred_2 = _3354;
                        frontier_phi_67_pred_3 = _3351;
                        frontier_phi_67_pred_4 = _3350;
                        frontier_phi_67_pred_5 = _3349;
                    }
                    _3017 = frontier_phi_67_pred;
                    _3019 = frontier_phi_67_pred_1;
                    _3021 = frontier_phi_67_pred_2;
                    _3015 = frontier_phi_67_pred_3;
                    _3013 = frontier_phi_67_pred_4;
                    _3011 = frontier_phi_67_pred_5;
                    uint _3156 = _3155 + 1u;
                    if (_3156 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3149 = _3011;
                        _3150 = _3013;
                        _3151 = _3015;
                        _3152 = _3017;
                        _3153 = _3019;
                        _3154 = _3021;
                        _3155 = _3156;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3019;
                frontier_phi_55_56_ladder_1 = _3021;
                frontier_phi_55_56_ladder_2 = _3017;
                frontier_phi_55_56_ladder_3 = _3015;
                frontier_phi_55_56_ladder_4 = _3013;
                frontier_phi_55_56_ladder_5 = _3011;
            }
            else
            {
                frontier_phi_55_56_ladder = _2906;
                frontier_phi_55_56_ladder_1 = _2908;
                frontier_phi_55_56_ladder_2 = _2904;
                frontier_phi_55_56_ladder_3 = _2902;
                frontier_phi_55_56_ladder_4 = _2900;
                frontier_phi_55_56_ladder_5 = _2898;
            }
            _3010 = frontier_phi_55_56_ladder_5;
            _3012 = frontier_phi_55_56_ladder_4;
            _3014 = frontier_phi_55_56_ladder_3;
            _3016 = frontier_phi_55_56_ladder_2;
            _3018 = frontier_phi_55_56_ladder;
            _3020 = frontier_phi_55_56_ladder_1;
        }
        float _3025 = isnan(1.0) ? _1078 : (isnan(_1078) ? 1.0 : min(_1078, 1.0));
        _2810 = (_3025 * _3016) + _2246;
        _2812 = (_3025 * _3018) + _2248;
        _2814 = (_3025 * _3020) + _2250;
        _2816 = ((_3010 * _1062) * _3025) + _2591;
        _2818 = ((_3012 * _1064) * _3025) + _2593;
        _2820 = ((_3014 * _1065) * _3025) + _2595;
    }
    else
    {
        _2810 = _2246;
        _2812 = _2248;
        _2814 = _2250;
        _2816 = _2591;
        _2818 = _2593;
        _2820 = _2595;
    }
    float _4760 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4771 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _4782 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    uint _2840 = _281 + 6u;
    float _2848 = _1000 / cbSceneParam._m0[86u].x;
    float _2849 = _1001 / cbSceneParam._m0[86u].y;
    vec4 _2863 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2848, _2849, (log2((isnan(cbSceneParam._m0[77u].w) ? _935 : (isnan(_935) ? cbSceneParam._m0[77u].w : min(_935, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2865 = _2863.x;
    float _2866 = _2863.y;
    float _2867 = _2863.z;
    float _2868 = _2863.w;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    if (_935 > cbSceneParam._m0[78u].w)
    {
        float _2923 = isnan(_935) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _935 : min(cbSceneParam._m0[80u].w, _935));
        float _2924 = _2923 / _935;
        float _2935 = _2924 * _985;
        float _2936 = _986 * _2924;
        float _2937 = (-0.0) - _2936;
        float _2938 = _2924 * _987;
        float _2940 = (cbSceneParam._m0[77u].w * _2937) / _2923;
        float _2941 = _2940 + cbSceneParam._m0[79u].w;
        float _2942 = cbSceneParam._m0[79u].w - _2936;
        float _2948 = sqrt(((_2935 * _2935) + (_2936 * _2936)) + (_2938 * _2938));
        float _2951 = (1.0 - (cbSceneParam._m0[77u].w / _2923)) * _2948;
        float _2956 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2958 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3111;
        if (abs((_2937 - _2940) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3111 = ((((_2941 > 0.0) ? exp2(_2956 * _2941) : (2.0 - exp2(_2958 * _2941))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2951;
        }
        else
        {
            float _3071 = 1.0 / cbSceneParam._m0[80u].x;
            float _3072 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : max(_2941, _2942));
            float _3073 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : min(_2941, _2942));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            _3111 = ((abs(_2948 / _2937) * cbSceneParam._m0[80u].y) * ((((_3082 - _3083) * 2.0) - ((exp2(_2956 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0)))) - exp2(_2956 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))))) * _3071)) - ((exp2(_2958 * _3082) - exp2(_2958 * _3083)) * _3071))) + (_2951 * cbSceneParam._m0[80u].z);
        }
        vec4 _3113 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2848, _2849, 1.0), 0.0);
        float _3122 = exp2((_3111 * (-1.44269502162933349609375)) * (1.0 - _3113.w));
        float _3123 = log2(_3122);
        float _3139 = log2(_2868);
        _2960 = (exp2(_3139 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].x)) * _3113.x) / cbSceneParam._m0[78u].x)) + _2865;
        _2962 = (exp2(_3139 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].y)) * _3113.y) / cbSceneParam._m0[78u].y)) + _2866;
        _2964 = (exp2(_3139 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].z)) * _3113.z) / cbSceneParam._m0[78u].z)) + _2867;
        _2966 = _3122 * _2868;
    }
    else
    {
        _2960 = _2865;
        _2962 = _2866;
        _2964 = _2867;
        _2966 = _2868;
    }
    float _2978 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2979 = _2978 == 3.0;
    float _2980 = log2(_2966);
    float _2987 = exp2(_2980 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2810 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1078))) + ((_2816 + ((isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))) * _1886)) * cbPerFrame._m0[3u].x));
    float _2988 = exp2(_2980 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2812 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1078))) + ((_2818 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1886)) * cbPerFrame._m0[3u].x));
    float _2989 = exp2(_2980 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2814 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1078))) + ((_2820 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1886)) * cbPerFrame._m0[3u].x));
    float _2998 = (_2978 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2998 * (_2979 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2960)));
    SV_Target.y = _2998 * (_2979 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2962)));
    SV_Target.z = _2998 * (_2979 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2964)));
    SV_Target.w = cbInstanceData._m0[_2840].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2840].w;
}


