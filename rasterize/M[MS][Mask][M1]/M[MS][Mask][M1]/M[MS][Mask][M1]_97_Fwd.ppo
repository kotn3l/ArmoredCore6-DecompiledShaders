#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1513;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _369.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[23u].w) + _419) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3836 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _444 = (_437 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _445 = (_437 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _446 = (_437 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _369.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[23u].w) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3847 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _523 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444);
    float _526 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445);
    float _529 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446);
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _587 = _585.x;
    float _588 = _585.y;
    float _589 = _585.z;
    float _596 = ((_568.x - _587) * _437) + _587;
    float _597 = ((_568.y - _588) * _437) + _588;
    float _598 = ((_568.z - _589) * _437) + _589;
    vec4 _610 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _623 = ((_610.z - _598) * _510) + _598;
    float _626 = ((((_610.x - _596) * _510) + _596) * 2.0) + (-1.0);
    float _628 = ((((_610.y - _597) * _510) + _597) * 2.0) + (-1.0);
    float _629 = dot(vec2(_626, _628), vec2(_626, _628));
    float _3858 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _634 = sqrt(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))));
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _660 = (((_648.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _626;
    float _661 = (((_648.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _628;
    float _664 = fma(_634, _249, fma(_661, _256, _660 * _242));
    float _667 = fma(_634, _250, fma(_661, _257, _660 * _243));
    float _670 = fma(_634, _251, fma(_661, _258, _660 * _244));
    float _674 = inversesqrt(dot(vec3(_664, _667, _670), vec3(_664, _667, _670)));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _703 = _701.x;
    float _704 = 1.0 - _703;
    float _713 = (cbMtdParam._m0[19u].x + dot(vec4(_674 * _664, _674 * _667, _674 * _670, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_703 - _704) * cbMtdParam._m0[24u].z) + _704) * cbMtdParam._m0[21u].z);
    float _3869 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _714 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _716 = (-0.0) - cbMtdParam._m0[24u].x;
    float _718 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _718 : (isnan(_718) ? 1.0 : min(_718, 1.0));
    float _726 = _714 - ((_714 * TEXCOORD_8.x) * _719);
    float _727 = _714 - ((_714 * TEXCOORD_8.y) * _719);
    float _728 = _714 - ((_714 * TEXCOORD_8.z) * _719);
    float _735 = (_726 * ((_548.x * cbMtdParam._m0[18u].x) - _523)) + _523;
    float _736 = (_727 * ((_548.y * cbMtdParam._m0[18u].y) - _526)) + _526;
    float _737 = (_728 * ((_548.z * cbMtdParam._m0[18u].z) - _529)) + _529;
    vec4 _749 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _751 = _749.x;
    float _752 = 1.0 - _751;
    float _778 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_751 - _752) * cbMtdParam._m0[24u].w) + _752) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3890 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _779 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _787 = ((((cbMtdParam._m0[10u].x - _735) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _779) + _735;
    float _788 = ((((cbMtdParam._m0[10u].y - _736) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _779) + _736;
    float _789 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _737)) * _779) + _737;
    vec4 _815 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _817 = _815.x;
    float _834 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _817) * _437) + _817;
    float _851 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _834) * _510) + _834;
    float _855 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _851) * cbMtdParam._m0[19u].z) + _851;
    float _857 = _855 - (_855 * _726);
    float _859 = _857 - (_857 * _779);
    float _863 = (cbMtdParam._m0[19u].w * (_648.z - _623)) + _623;
    vec4 _877 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _884 = (_877.x * 2.0) + (-1.0);
    float _885 = (_877.y * 2.0) + (-1.0);
    float _886 = dot(vec2(_884, _885), vec2(_884, _885));
    float _3901 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _894 = ((_877.z - _863) * _726) + _863;
    float _897 = ((cbMtdParam._m0[23u].x - _894) * _779) + _894;
    vec4 _916 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _922 = (_916.x * 2.0) + (-1.0);
    float _923 = (_916.y * 2.0) + (-1.0);
    float _924 = dot(vec2(_922, _923), vec2(_922, _923));
    float _3912 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _939 = ((sqrt(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) - _634) * _728) + _634;
    float _942 = (((_884 - _660) * _726) + _660) + (cbMtdParam._m0[21u].x * _660);
    float _943 = (((_885 - _661) * _727) + _661) + (cbMtdParam._m0[21u].x * _661);
    float _954 = (((_922 - _942) + (_942 * cbMtdParam._m0[22u].z)) * _779) + _942;
    float _955 = (((_923 - _943) + (_943 * cbMtdParam._m0[22u].z)) * _779) + _943;
    float _956 = (_779 * (sqrt(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) - _939)) + _939;
    float _960 = cbMtdParam._m0[22u].x + _648.w;
    float _963 = fma(_956, _249, fma(_955, _256, _954 * _242));
    float _966 = fma(_956, _250, fma(_955, _257, _954 * _243));
    float _969 = fma(_956, _251, fma(_955, _258, _954 * _244));
    float _973 = inversesqrt(dot(vec3(_963, _966, _969), vec3(_963, _966, _969)));
    float _974 = _973 * _963;
    float _975 = _973 * _966;
    float _976 = _973 * _969;
    float _3923 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _977 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _3945 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _3956 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _3967 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _3978 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _982 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _996 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1046 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1036);
    float _1047 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1036);
    float _1048 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1036);
    float _1052 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
    float _1053 = _1046 * _1052;
    float _1054 = _1047 * _1052;
    float _1055 = _1048 * _1052;
    float _1061 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1062 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1080 = fma(_976, cbSceneParam._m0[5u].z, fma(_975, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _974));
    float _1083 = fma(_976, cbSceneParam._m0[6u].z, fma(_975, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _974));
    float _1086 = fma(_976, cbSceneParam._m0[7u].z, fma(_975, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _974));
    uint _1100 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1106 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * cbInstanceData._m0[_1100].x;
    float _1107 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) * cbInstanceData._m0[_1100].y;
    float _1108 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * cbInstanceData._m0[_1100].z;
    float _3989 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1109 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1110 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1111 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _1112 = 1.0 - _982;
    float _1113 = _1109 * _1112;
    float _1114 = _1110 * _1112;
    float _1115 = _1111 * _1112;
    float _1120 = (_1109 + (-0.039999999105930328369140625)) * _982;
    float _1121 = (_1110 + (-0.039999999105930328369140625)) * _982;
    float _1122 = (_1111 + (-0.039999999105930328369140625)) * _982;
    float _1123 = _1120 + 0.039999999105930328369140625;
    float _1125 = _1121 + 0.039999999105930328369140625;
    float _1126 = _1122 + 0.039999999105930328369140625;
    vec4 _1135 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1061, cbSceneParam._m0[86u].y * _1062));
    float _1139 = ((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * TEXCOORD_5.w) * _1135.x;
    float _1140 = dot(vec3(_974, _975, _976), vec3(_1053, _1054, _1055));
    float _1143 = _1140 * 2.0;
    float _1147 = (_1143 * _974) - _1053;
    float _1148 = (_1143 * _975) - _1054;
    float _1149 = (_1143 * _976) - _1055;
    float _1153 = abs(dot(vec3(_1053, _1054, _1055), vec3(_974, _975, _976)));
    float _4022 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _1155 = sqrt(_977);
    float _1168 = exp2((_1155 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1155 * 3.0));
    float _1174 = (1.0 - _1168) * ((_1155 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1175 = _1168 * _1155;
    float _1203 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1207 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1211 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1512;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1237 = fma(_1211, cbModelParam._m0[26u].z, fma(_1207, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1203));
        float _1241 = fma(_1211, cbModelParam._m0[27u].z, fma(_1207, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1203));
        float _1245 = fma(_1211, cbModelParam._m0[28u].z, fma(_1207, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1203));
        float _1270 = _1203 + _974;
        float _1271 = _1207 + _975;
        float _1272 = _1211 + _976;
        float _1282 = fma(_1272, cbModelParam._m0[26u].z, fma(_1271, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1270)) - _1237;
        float _1283 = fma(_1272, cbModelParam._m0[27u].z, fma(_1271, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1270)) - _1241;
        float _1284 = fma(_1272, cbModelParam._m0[28u].z, fma(_1271, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1270)) - _1245;
        float _1288 = inversesqrt(dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284)));
        float _1301 = ((_1288 * _1282) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1237 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1288 * _1283) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1241 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1288 * _1284) / cbModelParam._m0[34u].z) + ((((((_1245 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        float _1340 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1306.x + (-0.5));
        float _1342 = _1340 * (_1306.y + (-0.5));
        float _1343 = _1340 * (_1306.z + (-0.5));
        float _1350 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1313.x + (-0.5));
        float _1352 = _1350 * (_1313.y + (-0.5));
        float _1353 = _1350 * (_1313.z + (-0.5));
        float _1360 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1320.x + (-0.5));
        float _1362 = _1360 * (_1320.y + (-0.5));
        float _1363 = _1360 * (_1320.z + (-0.5));
        float _1370 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1327.x + (-0.5));
        float _1372 = _1370 * (_1327.y + (-0.5));
        float _1373 = _1370 * (_1327.z + (-0.5));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = _1341 * 0.5;
        float _1378 = _1351 * 0.5;
        float _1379 = _1361 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1394 = (dot(vec3(_974, _975, _976), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1404 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4070 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1406 + 1.0))) + _1411) * _1374;
        float _1421 = _1342 * 0.5;
        float _1422 = _1352 * 0.5;
        float _1423 = _1362 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_974, _975, _976), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4103 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1448 + 1.0))) + _1453) * _1375;
        float _1463 = _1343 * 0.5;
        float _1464 = _1353 * 0.5;
        float _1465 = _1363 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_974, _975, _976), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4136 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1490 + 1.0))) + _1495) * _1376;
        _1512 = _1343;
        _1514 = _1342;
        _1515 = _1341;
        _1516 = _1353;
        _1517 = _1352;
        _1518 = _1351;
        _1519 = _1363;
        _1520 = _1362;
        _1521 = _1361;
        _1522 = _1376;
        _1523 = _1375;
        _1524 = _1374;
        _1525 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1526 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1527 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
    }
    else
    {
        _1512 = _1513;
        _1514 = _1513;
        _1515 = _1513;
        _1516 = _1513;
        _1517 = _1513;
        _1518 = _1513;
        _1519 = _1513;
        _1520 = _1513;
        _1521 = _1513;
        _1522 = _1513;
        _1523 = _1513;
        _1524 = _1513;
        _1525 = 0.0;
        _1526 = 0.0;
        _1527 = 0.0;
    }
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1551 = fma(_1211, cbModelParam._m0[30u].z, fma(_1207, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1203));
        float _1555 = fma(_1211, cbModelParam._m0[31u].z, fma(_1207, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1203));
        float _1559 = fma(_1211, cbModelParam._m0[32u].z, fma(_1207, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1203));
        float _1582 = _1203 + _974;
        float _1583 = _1207 + _975;
        float _1584 = _1211 + _976;
        float _1594 = fma(_1584, cbModelParam._m0[30u].z, fma(_1583, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1582)) - _1551;
        float _1595 = fma(_1584, cbModelParam._m0[31u].z, fma(_1583, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1582)) - _1555;
        float _1596 = fma(_1584, cbModelParam._m0[32u].z, fma(_1583, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1582)) - _1559;
        float _1600 = inversesqrt(dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596)));
        float _1613 = ((_1600 * _1594) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1551 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1614 = ((_1600 * _1595) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1555 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1615 = ((_1600 * _1596) / cbModelParam._m0[35u].z) + ((((((_1559 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1613, _1614, _1615), 0.0);
        vec4 _1624 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1613, _1614, _1615), 0.0);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1613, _1614, _1615), 0.0);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1613, _1614, _1615), 0.0);
        float _1650 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1651 = _1650 * (_1617.x + (-0.5));
        float _1652 = _1650 * (_1617.y + (-0.5));
        float _1653 = _1650 * (_1617.z + (-0.5));
        float _1660 = exp2((_1624.w + (-0.5)) * 20.0) * 2.0;
        float _1661 = _1660 * (_1624.x + (-0.5));
        float _1662 = _1660 * (_1624.y + (-0.5));
        float _1663 = _1660 * (_1624.z + (-0.5));
        float _1670 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1631.x + (-0.5));
        float _1672 = _1670 * (_1631.y + (-0.5));
        float _1673 = _1670 * (_1631.z + (-0.5));
        float _1680 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1681 = _1680 * (_1638.x + (-0.5));
        float _1682 = _1680 * (_1638.y + (-0.5));
        float _1683 = _1680 * (_1638.z + (-0.5));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1686 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1687 = _1651 * 0.5;
        float _1688 = _1661 * 0.5;
        float _1689 = _1671 * 0.5;
        float _1690 = dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689));
        float _1695 = (_1690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1690);
        float _1703 = (dot(vec3(_974, _975, _976), vec3(_1695 * _1687, _1695 * _1688, _1695 * _1689)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1712 = sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1714 = _1713 * 2.0;
        float _1718 = (1.0 - _1713) / (_1713 + 1.0);
        float _4199 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1728 = ((((1.0 - _1719) * (_1714 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1714 + 1.0))) + _1719) * _1684;
        float _1729 = _1652 * 0.5;
        float _1730 = _1662 * 0.5;
        float _1731 = _1672 * 0.5;
        float _1732 = dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731));
        float _1737 = (_1732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1732);
        float _1745 = (dot(vec3(_974, _975, _976), vec3(_1737 * _1729, _1737 * _1730, _1737 * _1731)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1754 = sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731)) / (_1685 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1756 = _1755 * 2.0;
        float _1760 = (1.0 - _1755) / (_1755 + 1.0);
        float _4232 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1770 = ((((1.0 - _1761) * (_1756 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1756 + 1.0))) + _1761) * _1685;
        float _1771 = _1653 * 0.5;
        float _1772 = _1663 * 0.5;
        float _1773 = _1673 * 0.5;
        float _1774 = dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773));
        float _1779 = (_1774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1774);
        float _1787 = (dot(vec3(_974, _975, _976), vec3(_1779 * _1771, _1779 * _1772, _1779 * _1773)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1796 = sqrt(((_1772 * _1772) + (_1771 * _1771)) + (_1773 * _1773)) / (_1686 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1798 = _1797 * 2.0;
        float _1802 = (1.0 - _1797) / (_1797 + 1.0);
        float _4265 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1812 = ((((1.0 - _1803) * (_1798 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1798 + 1.0))) + _1803) * _1686;
        _1820 = _1653;
        _1821 = _1652;
        _1822 = _1651;
        _1823 = _1663;
        _1824 = _1662;
        _1825 = _1661;
        _1826 = _1673;
        _1827 = _1672;
        _1828 = _1671;
        _1829 = _1686;
        _1830 = _1685;
        _1831 = _1684;
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)));
        _1833 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)));
        _1834 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)));
    }
    else
    {
        _1820 = _1513;
        _1821 = _1513;
        _1822 = _1513;
        _1823 = _1513;
        _1824 = _1513;
        _1825 = _1513;
        _1826 = _1513;
        _1827 = _1513;
        _1828 = _1513;
        _1829 = _1513;
        _1830 = _1513;
        _1831 = _1513;
        _1832 = 0.0;
        _1833 = 0.0;
        _1834 = 0.0;
    }
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1525)) + _1525;
    float _1845 = (cbModelParam._m0[1u].x * (_1833 - _1526)) + _1526;
    float _1846 = (cbModelParam._m0[1u].x * (_1834 - _1527)) + _1527;
    float _1867 = fma(_1846, cbSceneParam._m0[89u].z, fma(_1845, cbSceneParam._m0[89u].y, _1844 * cbSceneParam._m0[89u].x));
    float _1870 = fma(_1846, cbSceneParam._m0[90u].z, fma(_1845, cbSceneParam._m0[90u].y, _1844 * cbSceneParam._m0[90u].x));
    float _1873 = fma(_1846, cbSceneParam._m0[91u].z, fma(_1845, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1844));
    float _1888 = _1147 * 0.5;
    float _1889 = _1148 * 0.5;
    float _1890 = _1149 * 0.5;
    float _1891 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1822, _1825, _1828, _1831));
    float _1894 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1821, _1824, _1827, _1830));
    float _1897 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1931;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1904 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1512, _1516, _1519, _1522));
        float _1908 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1514, _1517, _1520, _1523));
        float _1912 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1515, _1518, _1521, _1524));
        float _1919 = dot(vec4(cbModelParam._m0[39u]), vec4(_1888, _1889, _1890, 1.0));
        _1931 = dot(vec3(isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1919) ? 0.0 : (isnan(0.0) ? _1919 : max(0.0, _1919))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1931 = 1.0;
    }
    float _1942;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1933 = dot(vec4(cbModelParam._m0[40u]), vec4(_1888, _1889, _1890, 1.0));
        _1942 = dot(vec3(isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1933) ? 0.0 : (isnan(0.0) ? _1933 : max(0.0, _1933))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1942 = 1.0;
    }
    float _1946 = (_1942 * cbModelParam._m0[1u].x) + (_1931 * (1.0 - cbModelParam._m0[1u].x));
    float _1956 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _977);
    float _1957 = isnan(_1956) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1956 : min(cbModelParam._m0[25u].z, _1956));
    float _2037;
    float _2039;
    float _2041;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2004 = fma(_1211, cbModelParam._m0[13u].z, fma(_1207, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1203)) + cbModelParam._m0[13u].w;
        float _2008 = fma(_1211, cbModelParam._m0[14u].z, fma(_1207, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1203)) + cbModelParam._m0[14u].w;
        float _2012 = fma(_1211, cbModelParam._m0[15u].z, fma(_1207, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1203)) + cbModelParam._m0[15u].w;
        float _2015 = fma(_1149, cbModelParam._m0[13u].z, fma(_1148, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1147));
        float _2018 = fma(_1149, cbModelParam._m0[14u].z, fma(_1148, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1147));
        float _2021 = fma(_1149, cbModelParam._m0[15u].z, fma(_1148, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1147));
        float _2049;
        if (_2015 > 0.0)
        {
            _2049 = abs((1.0 - _2004) / _2015);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2004 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2049 = frontier_phi_14_12_ladder;
        }
        float _2251;
        if (_2018 > 0.0)
        {
            _2251 = abs((1.0 - _2008) / _2018);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2008 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2251 = frontier_phi_23_19_ladder;
        }
        float _2505;
        if (_2021 > 0.0)
        {
            _2505 = abs((1.0 - _2012) / _2021);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2012 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2505 = frontier_phi_35_30_ladder;
        }
        float _2507 = isnan(_2251) ? _2049 : (isnan(_2049) ? _2251 : min(_2049, _2251));
        float _2508 = isnan(_2505) ? _2507 : (isnan(_2507) ? _2505 : min(_2507, _2505));
        float _2512 = (_2508 * _2015) + _2004;
        float _2513 = (_2508 * _2018) + _2008;
        float _2514 = (_2508 * _2021) + _2012;
        float _2515 = _2508 * 9.9999997473787516355514526367188e-05;
        float _2517 = (-1.0) - _2515;
        float _2519 = _2515 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2514 > _2519) || ((_2514 < _2517) || ((_2513 > _2519) || ((_2513 < _2517) || ((_2512 < _2517) || (_2512 > _2519))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2514, cbModelParam._m0[9u].z, fma(_2513, cbModelParam._m0[9u].y, _2512 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2514, cbModelParam._m0[10u].z, fma(_2513, cbModelParam._m0[10u].y, _2512 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2514, cbModelParam._m0[11u].z, fma(_2513, cbModelParam._m0[11u].y, _2512 * cbModelParam._m0[11u].x))), _1957);
            frontier_phi_13_35_ladder = _2642.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2642.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2642.x * cbModelParam._m0[1u].y;
        }
        _2037 = frontier_phi_13_35_ladder_2;
        _2039 = frontier_phi_13_35_ladder_1;
        _2041 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2025 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1147, _1148, _1149), _1957);
        _2037 = _2025.x * cbModelParam._m0[1u].y;
        _2039 = _2025.y * cbModelParam._m0[1u].y;
        _2041 = _2025.z * cbModelParam._m0[1u].y;
    }
    float _2045 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _977);
    float _2046 = isnan(_2045) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2045 : min(cbModelParam._m0[25u].w, _2045));
    float _2135;
    float _2137;
    float _2139;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2099 = fma(_1211, cbModelParam._m0[21u].z, fma(_1207, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1203)) + cbModelParam._m0[21u].w;
        float _2103 = fma(_1211, cbModelParam._m0[22u].z, fma(_1207, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1203)) + cbModelParam._m0[22u].w;
        float _2107 = fma(_1211, cbModelParam._m0[23u].z, fma(_1207, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1203)) + cbModelParam._m0[23u].w;
        float _2110 = fma(_1149, cbModelParam._m0[21u].z, fma(_1148, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1147));
        float _2113 = fma(_1149, cbModelParam._m0[22u].z, fma(_1148, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1147));
        float _2116 = fma(_1149, cbModelParam._m0[23u].z, fma(_1148, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1147));
        float _2256;
        if (_2110 > 0.0)
        {
            _2256 = abs((1.0 - _2099) / _2110);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2099 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2256 = frontier_phi_25_21_ladder;
        }
        float _2532;
        if (_2113 > 0.0)
        {
            _2532 = abs((1.0 - _2103) / _2113);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2103 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2532 = frontier_phi_37_32_ladder;
        }
        float _2745;
        if (_2116 > 0.0)
        {
            _2745 = abs((1.0 - _2107) / _2116);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2107 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2745 = frontier_phi_46_43_ladder;
        }
        float _2747 = isnan(_2532) ? _2256 : (isnan(_2256) ? _2532 : min(_2256, _2532));
        float _2748 = isnan(_2745) ? _2747 : (isnan(_2747) ? _2745 : min(_2747, _2745));
        float _2752 = (_2748 * _2110) + _2099;
        float _2753 = (_2748 * _2113) + _2103;
        float _2754 = (_2748 * _2116) + _2107;
        float _2755 = _2748 * 9.9999997473787516355514526367188e-05;
        float _2756 = (-1.0) - _2755;
        float _2758 = _2755 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2754 > _2758) || ((_2754 < _2756) || ((_2753 > _2758) || ((_2753 < _2756) || ((_2752 < _2756) || (_2752 > _2758))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2754, cbModelParam._m0[17u].z, fma(_2753, cbModelParam._m0[17u].y, _2752 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2754, cbModelParam._m0[18u].z, fma(_2753, cbModelParam._m0[18u].y, _2752 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2754, cbModelParam._m0[19u].z, fma(_2753, cbModelParam._m0[19u].y, _2752 * cbModelParam._m0[19u].x))), _2046);
            frontier_phi_22_46_ladder = _2953.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2953.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2953.x * cbModelParam._m0[1u].z;
        }
        _2135 = frontier_phi_22_46_ladder_2;
        _2137 = frontier_phi_22_46_ladder_1;
        _2139 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2119 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1147, _1148, _1149), _2046);
        _2135 = _2119.x * cbModelParam._m0[1u].z;
        _2137 = _2119.y * cbModelParam._m0[1u].z;
        _2139 = _2119.z * cbModelParam._m0[1u].z;
    }
    float _2152 = (((_1174 * _1123) + _1175) * _1139) * ((cbModelParam._m0[1u].w * (_2135 - _2037)) + _2037);
    float _2154 = (((_1174 * _1125) + _1175) * _1139) * ((cbModelParam._m0[1u].w * (_2137 - _2039)) + _2039);
    float _2156 = (((_1174 * _1126) + _1175) * _1139) * ((cbModelParam._m0[1u].w * (_2139 - _2041)) + _2041);
    float _2159 = fma(_2156, cbSceneParam._m0[89u].z, fma(_2154, cbSceneParam._m0[89u].y, _2152 * cbSceneParam._m0[89u].x));
    float _2162 = fma(_2156, cbSceneParam._m0[90u].z, fma(_2154, cbSceneParam._m0[90u].y, _2152 * cbSceneParam._m0[90u].x));
    float _2165 = fma(_2156, cbSceneParam._m0[91u].z, fma(_2154, cbSceneParam._m0[91u].y, _2152 * cbSceneParam._m0[91u].x));
    uvec4 _2175 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2177 = _2175.x * 14u;
    uint _2178 = _2177 + 13u;
    float _2185 = _1139 + (-1.0);
    float _2190 = (cbLight._m0[_2178].x * _2185) + 1.0;
    float _2191 = (cbLight._m0[_2178].y * _2185) + 1.0;
    float _2192 = (cbLight._m0[_2178].z * _2185) + 1.0;
    float _2193 = (cbLight._m0[_2178].w * _2185) + 1.0;
    uint _2194 = _2177 + 5u;
    float _2200 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
    uint _2204 = _2177 + 4u;
    float _2210 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
    uint _2214 = _2177 | 1u;
    float _2225 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_974, _975, _976));
    float _2228 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_974, _975, _976));
    float _4401 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _4412 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2233 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2235 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 0.3183098733425140380859375;
    float _2242 = ((cbLight._m0[_2194].x * _2200) * _2235) + ((cbLight._m0[_2204].x * _2210) * _2233);
    float _2243 = ((_2200 * cbLight._m0[_2194].y) * _2235) + ((_2210 * cbLight._m0[_2204].y) * _2233);
    float _2244 = ((_2200 * cbLight._m0[_2194].z) * _2235) + ((_2210 * cbLight._m0[_2204].z) * _2233);
    uvec4 _2248 = floatBitsToUint(cbLight._m0[_2177 + 12u]);
    bool _2250 = _2248.x == 0u;
    float _2261;
    float _2263;
    float _2265;
    if (_2250)
    {
        _2261 = _2242;
        _2263 = _2243;
        _2265 = _2244;
    }
    else
    {
        uint _2269 = _2177 + 6u;
        float _2285 = (dot(vec3(cbLight._m0[_2177 + 2u].xyz), vec3(_974, _975, _976)) * 0.5) + 0.5;
        float _2286 = _2285 * _2285;
        float _4423 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2287 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2288 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
        _2261 = (((cbLight._m0[_2269].x * 0.3183098733425140380859375) * _2287) * _2288) + _2242;
        _2263 = (((cbLight._m0[_2269].y * 0.3183098733425140380859375) * _2287) * _2288) + _2243;
        _2265 = (((cbLight._m0[_2269].z * 0.3183098733425140380859375) * _2287) * _2288) + _2244;
    }
    bool _2268 = _2248.y == 0u;
    float _2306;
    float _2308;
    float _2310;
    if (_2268)
    {
        _2306 = _2261;
        _2308 = _2263;
        _2310 = _2265;
    }
    else
    {
        uint _2476 = _2177 + 7u;
        float _2492 = (dot(vec3(cbLight._m0[_2177 + 3u].xyz), vec3(_974, _975, _976)) * 0.5) + 0.5;
        float _2493 = _2492 * _2492;
        float _4439 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2494 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2495 = isnan(1.0) ? _2193 : (isnan(_2193) ? 1.0 : min(_2193, 1.0));
        _2306 = (((cbLight._m0[_2476].x * 0.3183098733425140380859375) * _2494) * _2495) + _2261;
        _2308 = (((cbLight._m0[_2476].y * 0.3183098733425140380859375) * _2494) * _2495) + _2263;
        _2310 = (((cbLight._m0[_2476].z * 0.3183098733425140380859375) * _2494) * _2495) + _2265;
    }
    uint _2313 = _2177 + 8u;
    float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _977) * 0.949999988079071044921875);
    float _2327 = _2326 * _2326;
    float _2328 = cbLight._m0[_2177].x + _1053;
    float _2329 = cbLight._m0[_2177].y + _1054;
    float _2330 = cbLight._m0[_2177].z + _1055;
    float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
    float _2335 = _2334 * _2328;
    float _2336 = _2334 * _2329;
    float _2337 = _2334 * _2330;
    float _2338 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2177].xyz));
    float _4455 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _4466 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _2342 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2343 = dot(vec3(_974, _975, _976), vec3(_2335, _2336, _2337));
    float _4477 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2347 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2335, _2336, _2337));
    float _4488 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2351 = _2327 * _2327;
    float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
    float _2363 = exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0);
    float _2364 = 0.959999978542327880859375 - _1120;
    float _2366 = 0.959999978542327880859375 - _1121;
    float _2367 = 0.959999978542327880859375 - _1122;
    float _2374 = 1.0 - _2327;
    float _2385 = (0.5 / (((_2342 * ((_2341 * _2374) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2374) + _2327) * _2341))) * _2341;
    float _4499 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2387 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
    uint _2398 = _2177 + 9u;
    float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _977) * 0.949999988079071044921875);
    float _2410 = _2409 * _2409;
    float _2411 = cbLight._m0[_2214].x + _1053;
    float _2412 = cbLight._m0[_2214].y + _1054;
    float _2413 = cbLight._m0[_2214].z + _1055;
    float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
    float _2418 = _2417 * _2411;
    float _2419 = _2417 * _2412;
    float _2420 = _2417 * _2413;
    float _2421 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2214].xyz));
    float _4510 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2425 = dot(vec3(_974, _975, _976), vec3(_2418, _2419, _2420));
    float _4521 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2429 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2418, _2419, _2420));
    float _4532 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2433 = _2410 * _2410;
    float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
    float _2444 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
    float _2451 = 1.0 - _2410;
    float _2461 = (0.5 / (((_2342 * ((_2424 * _2451) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2451) + _2410) * _2424))) * _2424;
    float _4543 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2463 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
    float _2473 = (((((_2444 * _2364) + _1123) * cbLight._m0[_2398].x) * _2463) * _2200) + (((((_2363 * _2364) + _1123) * cbLight._m0[_2313].x) * _2387) * _2210);
    float _2474 = (((((_2444 * _2366) + _1125) * cbLight._m0[_2398].y) * _2463) * _2200) + (((((_2363 * _2366) + _1125) * cbLight._m0[_2313].y) * _2387) * _2210);
    float _2475 = (((((_2444 * _2367) + _1126) * cbLight._m0[_2398].z) * _2463) * _2200) + (((((_2363 * _2367) + _1126) * cbLight._m0[_2313].z) * _2387) * _2210);
    float _2537;
    float _2539;
    float _2541;
    if (_2250)
    {
        _2537 = _2473;
        _2539 = _2474;
        _2541 = _2475;
    }
    else
    {
        uint _2543 = _2177 + 2u;
        uint _2547 = _2177 + 10u;
        float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2543].w)) * _977) * 0.949999988079071044921875);
        float _2562 = _2561 * _2561;
        float _2563 = cbLight._m0[_2543].x + _1053;
        float _2564 = cbLight._m0[_2543].y + _1054;
        float _2565 = cbLight._m0[_2543].z + _1055;
        float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
        float _2570 = _2569 * _2563;
        float _2571 = _2569 * _2564;
        float _2572 = _2569 * _2565;
        float _2573 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2543].xyz));
        float _4554 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2577 = dot(vec3(_974, _975, _976), vec3(_2570, _2571, _2572));
        float _4565 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2581 = dot(vec3(cbLight._m0[_2543].xyz), vec3(_2570, _2571, _2572));
        float _4576 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2585 = _2562 * _2562;
        float _2589 = ((_2580 * _2580) * (_2585 + (-1.0))) + 1.0;
        float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
        float _2603 = 1.0 - _2562;
        float _2613 = (0.5 / (((_2342 * ((_2576 * _2603) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2603) + _2562) * _2576))) * _2576;
        float _4587 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2615 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2585 / ((_2589 * _2589) * 3.141590118408203125));
        float _2616 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
        _2537 = (((((_2596 * _2364) + _1123) * cbLight._m0[_2547].x) * _2615) * _2616) + _2473;
        _2539 = (((((_2596 * _2366) + _1125) * cbLight._m0[_2547].y) * _2615) * _2616) + _2474;
        _2541 = (((((_2596 * _2367) + _1126) * cbLight._m0[_2547].z) * _2615) * _2616) + _2475;
    }
    float _2651;
    float _2653;
    float _2655;
    if (_2268)
    {
        _2651 = _2537;
        _2653 = _2539;
        _2655 = _2541;
    }
    else
    {
        uint _2662 = _2177 + 3u;
        uint _2666 = _2177 + 11u;
        float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2662].w)) * _977) * 0.949999988079071044921875);
        float _2681 = _2680 * _2680;
        float _2682 = cbLight._m0[_2662].x + _1053;
        float _2683 = cbLight._m0[_2662].y + _1054;
        float _2684 = cbLight._m0[_2662].z + _1055;
        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
        float _2689 = _2688 * _2682;
        float _2690 = _2688 * _2683;
        float _2691 = _2688 * _2684;
        float _2692 = dot(vec3(_974, _975, _976), vec3(cbLight._m0[_2662].xyz));
        float _4603 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2696 = dot(vec3(_974, _975, _976), vec3(_2689, _2690, _2691));
        float _4614 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2700 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_2689, _2690, _2691));
        float _4625 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2704 = _2681 * _2681;
        float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
        float _2715 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
        float _2722 = 1.0 - _2681;
        float _2732 = (0.5 / (((_2342 * ((_2695 * _2722) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2722) + _2681) * _2695))) * _2695;
        float _4636 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2734 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
        float _2735 = isnan(1.0) ? _2193 : (isnan(_2193) ? 1.0 : min(_2193, 1.0));
        _2651 = (((((_2715 * _2364) + _1123) * cbLight._m0[_2666].x) * _2734) * _2735) + _2537;
        _2653 = (((((_2715 * _2366) + _1125) * cbLight._m0[_2666].y) * _2734) * _2735) + _2539;
        _2655 = (((((_2715 * _2367) + _1126) * cbLight._m0[_2666].z) * _2734) * _2735) + _2541;
    }
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    if (_2175.y == 0u)
    {
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2811 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2810;
        float _2812 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2810;
        float _2813 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2810;
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.x;
        uint _2837 = uint((float(_2825.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1062) / _2826))) + floor(float(uint(cbSceneParam._m0[85u].x * _1061) / _2826)));
        float _2847 = (log2(_2813 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2848 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        uint _2851 = uint(isnan(14.0) ? _2848 : (isnan(_2848) ? 14.0 : min(_2848, 14.0)));
        uvec4 _2856 = texelFetch(g_lightClusterGridBuffer, int(((_2851 << 2u) + (_2837 << 6u)) >> 2u));
        uint _2857 = _2856.x;
        uint _2858 = _2825.z;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        if (((((1u << ((_2858 >> 4u) & 15u)) + 4294967295u) & _2857) == 0u) || ((_2858 & 240u) == 0u))
        {
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
        }
        else
        {
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            uint _3108 = 0u;
            uint _3117;
            bool _3118;
            for (;;)
            {
                _3117 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3108 << 2u)) >> 2u)).x;
                _3118 = _3117 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3118)
                {
                    frontier_phi_61_pred = _3102;
                    frontier_phi_61_pred_1 = _3107;
                    frontier_phi_61_pred_2 = _3106;
                    frontier_phi_61_pred_3 = _3105;
                    frontier_phi_61_pred_4 = _3104;
                    frontier_phi_61_pred_5 = _3103;
                }
                else
                {
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    uint _3232;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3106;
                    _3231 = _3107;
                    _3232 = _3117;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    for (;;)
                    {
                        uint _3236 = uint(findLSB(_3232)) + (_3108 << 5u);
                        uint _3233 = (_3232 + 4294967295u) & _3232;
                        uint _3238 = _3236 * 48u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 3u)).x));
                        uint _3258 = (_3236 * 48u) + 4u;
                        vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 3u)).x));
                        uint _3277 = (_3236 * 48u) + 8u;
                        vec3 _3288 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x));
                        float _3292 = _3252.x - _2811;
                        float _3293 = _3252.y - _2812;
                        float _3294 = _3252.z - _2813;
                        float _3295 = dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294));
                        float _3298 = inversesqrt(_3295);
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3302 = dot(vec3(_1080, _1083, _1086), vec3(_3299, _3300, _3301));
                        float _3307 = 1.0 - (_3295 * _3252.w);
                        float _4662 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3309 = sqrt(_3295) * _3271.w;
                        float _3312 = 1.39999997615814208984375 / (_3309 + 1.39999997615814208984375);
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3302) + _3313;
                        float _3319 = _3309 * _3309;
                        float _3323 = ((isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))) * _3308) / ((_3319 * 0.699999988079071044921875) + 1.0);
                        float _3327 = (-0.0) - _2811;
                        float _3328 = (-0.0) - _2812;
                        float _3329 = (-0.0) - _2813;
                        float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                        float _3334 = _3333 * _3327;
                        float _3335 = _3333 * _3328;
                        float _3336 = _3333 * _3329;
                        float _3344 = exp2(log2(1.0 / ((_3319 * 3.5) + 5.0)) * 0.25);
                        float _3345 = 1.0 - _1155;
                        float _3352 = sqrt(1.0 - ((1.0 - (_3345 * _3345)) * (1.0 - (_3344 * _3344))));
                        float _3353 = _3352 * _3352;
                        float _3354 = _3353 * _3353;
                        float _3355 = _3334 + _3299;
                        float _3356 = _3335 + _3300;
                        float _3357 = _3336 + _3301;
                        float _3361 = inversesqrt(dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357)));
                        float _3365 = dot(vec3(_1080, _1083, _1086), vec3(_3334, _3335, _3336));
                        float _4678 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3369 = dot(vec3(_1080, _1083, _1086), vec3(_3361 * _3355, _3361 * _3356, _3361 * _3357));
                        float _4689 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3376 = ((_3372 * _3372) * (_3354 + (-1.0))) + 1.0;
                        float _3377 = _3312 * _3353;
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3302) + _3378;
                        float _4700 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3383 = 1.0 - _3353;
                        float _3393 = (0.5 / (((_3382 * ((_3368 * _3383) + _3353)) + 9.9999999392252902907785028219223e-09) + (((_3382 * _3383) + _3353) * _3368))) * _3382;
                        float _4711 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3404 = (((_3354 * 3.1415927410125732421875) * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) / ((_3376 * _3376) * ((_3319 * 2.1991131305694580078125) + 3.141590118408203125))) * _3308;
                        _3161 = (_3323 * _3271.x) + _3229;
                        _3162 = (_3323 * _3271.y) + _3230;
                        _3163 = (_3323 * _3271.z) + _3231;
                        _3158 = (_3404 * _3288.x) + _3226;
                        _3159 = (_3404 * _3288.y) + _3227;
                        _3160 = (_3404 * _3288.z) + _3228;
                        if (_3233 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3162;
                            _3231 = _3163;
                            _3232 = _3233;
                        }
                    }
                    frontier_phi_61_pred = _3158;
                    frontier_phi_61_pred_1 = _3163;
                    frontier_phi_61_pred_2 = _3162;
                    frontier_phi_61_pred_3 = _3161;
                    frontier_phi_61_pred_4 = _3160;
                    frontier_phi_61_pred_5 = _3159;
                }
                _2959 = frontier_phi_61_pred;
                _2969 = frontier_phi_61_pred_1;
                _2967 = frontier_phi_61_pred_2;
                _2965 = frontier_phi_61_pred_3;
                _2963 = frontier_phi_61_pred_4;
                _2961 = frontier_phi_61_pred_5;
                uint _3109 = _3108 + 1u;
                if (_3109 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3102 = _2959;
                    _3103 = _2961;
                    _3104 = _2963;
                    _3105 = _2965;
                    _3106 = _2967;
                    _3107 = _2969;
                    _3108 = _3109;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
        }
        uvec4 _2972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2973 = _2972.z;
        uint _2975 = (_2973 >> 8u) & 15u;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        if (((4294967295u << _2975) & _2857) == 0u)
        {
            _3070 = _2958;
            _3072 = _2960;
            _3074 = _2962;
            _3076 = _2964;
            _3078 = _2966;
            _3080 = _2968;
        }
        else
        {
            float _3095 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
            float _3096 = _3095 * _2811;
            float _3097 = _3095 * _2812;
            float _3098 = _3095 * _2813;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2975 < ((_2973 >> 12u) & 15u))
            {
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3209 = _2958;
                float _3210 = _2960;
                float _3211 = _2962;
                float _3212 = _2964;
                float _3213 = _2966;
                float _3214 = _2968;
                uint _3215 = _2975;
                uint _3224;
                bool _3225;
                for (;;)
                {
                    _3224 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3215 << 2u)) >> 2u)).x;
                    _3225 = _3224 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3225)
                    {
                        frontier_phi_67_pred = _3212;
                        frontier_phi_67_pred_1 = _3213;
                        frontier_phi_67_pred_2 = _3214;
                        frontier_phi_67_pred_3 = _3211;
                        frontier_phi_67_pred_4 = _3210;
                        frontier_phi_67_pred_5 = _3209;
                    }
                    else
                    {
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3422 = _3209;
                        float _3423 = _3210;
                        float _3424 = _3211;
                        float _3425 = _3212;
                        float _3426 = _3213;
                        float _3427 = _3214;
                        uint _3428 = _3224;
                        uint _3429;
                        vec4 _3454;
                        float _3455;
                        vec4 _3470;
                        vec3 _3482;
                        vec4 _3497;
                        vec4 _3512;
                        float _3558;
                        bool _3559;
                        for (;;)
                        {
                            uint _3439 = ((_3215 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3428));
                            _3429 = (_3428 + 4294967295u) & _3428;
                            uint _3441 = _3439 * 40u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3455 = _3454.w;
                            uint _3457 = (_3439 * 40u) + 4u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3439 * 40u) + 8u;
                            _3482 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x));
                            uint _3484 = (_3439 * 40u) + 16u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3439 * 40u) + 20u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3439 * 40u) + 24u;
                            vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3533 = (_3439 * 40u) + 28u;
                            vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3558 = fma(_2813, _3546.z, fma(_2812, _3546.y, _3546.x * _2811)) + _3546.w;
                            _3559 = !((fma(_2813, _3527.z, fma(_2812, _3527.y, _3527.x * _2811)) + _3527.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3559)
                            {
                                float _3586 = _3454.x - _2811;
                                float _3587 = _3454.y - _2812;
                                float _3588 = _3454.z - _2813;
                                float _3589 = dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588));
                                float _3592 = inversesqrt(_3589);
                                float _3593 = _3592 * _3586;
                                float _3594 = _3592 * _3587;
                                float _3595 = _3592 * _3588;
                                float _3599 = 1.0 - (_3589 / (_3455 * _3455));
                                float _4722 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3604 = sqrt(_3589) * _3470.w;
                                float _3606 = 1.39999997615814208984375 / (_3604 + 1.39999997615814208984375);
                                float _3607 = _3606 * _3606;
                                float _3610 = ((1.0 - _3607) * dot(vec3(_3593, _3594, _3595), vec3(_1080, _1083, _1086))) + _3607;
                                float _3613 = _3604 * _3604;
                                float _3617 = (fma(_2813, _3497.z, fma(_2812, _3497.y, _3497.x * _2811)) + _3497.w) / _3558;
                                float _3618 = (fma(_2813, _3512.z, fma(_2812, _3512.y, _3512.x * _2811)) + _3512.w) / _3558;
                                float _3622 = 1.0 - dot(vec2(_3617, _3618), vec2(_3617, _3618));
                                float _4738 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3624 = _3623 * (((isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0))) * _3600) / ((_3613 * 0.699999988079071044921875) + 1.0));
                                float _3636 = exp2(log2(1.0 / ((_3613 * 3.5) + 5.0)) * 0.25);
                                float _3637 = 1.0 - _1155;
                                float _3644 = sqrt(1.0 - ((1.0 - (_3637 * _3637)) * (1.0 - (_3636 * _3636))));
                                float _3645 = _3644 * _3644;
                                float _3646 = _3645 * _3645;
                                float _3647 = _3593 - _3096;
                                float _3648 = _3594 - _3097;
                                float _3649 = _3595 - _3098;
                                float _3653 = inversesqrt(dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649)));
                                float _3657 = dot(vec3(_1080, _1083, _1086), vec3((-0.0) - _3096, (-0.0) - _3097, (-0.0) - _3098));
                                float _4749 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3660 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3661 = dot(vec3(_1080, _1083, _1086), vec3(_3653 * _3647, _3653 * _3648, _3653 * _3649));
                                float _4760 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3664 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3668 = ((_3664 * _3664) * (_3646 + (-1.0))) + 1.0;
                                float _3669 = _3606 * _3645;
                                float _3670 = _3669 * _3669;
                                float _3676 = ((1.0 - _3670) * dot(vec3(_1080, _1083, _1086), vec3(_3593, _3594, _3595))) + _3670;
                                float _4771 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3677 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3678 = 1.0 - _3645;
                                float _3688 = (0.5 / (((_3677 * ((_3660 * _3678) + _3645)) + 9.9999999392252902907785028219223e-09) + (((_3677 * _3678) + _3645) * _3660))) * _3677;
                                float _4782 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3698 = (_3623 * _3600) * (((_3646 * 3.1415927410125732421875) * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) / ((_3668 * _3668) * ((_3613 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3698 * _3482.x;
                                frontier_phi_73_pred_1 = _3698 * _3482.y;
                                frontier_phi_73_pred_2 = _3624 * _3470.z;
                                frontier_phi_73_pred_3 = _3624 * _3470.y;
                                frontier_phi_73_pred_4 = _3624 * _3470.x;
                                frontier_phi_73_pred_5 = _3698 * _3482.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3702 = frontier_phi_73_pred;
                            _3703 = frontier_phi_73_pred_1;
                            _3707 = frontier_phi_73_pred_2;
                            _3706 = frontier_phi_73_pred_3;
                            _3705 = frontier_phi_73_pred_4;
                            _3704 = frontier_phi_73_pred_5;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            _3409 = _3702 + _3422;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            if (_3429 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3429;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3412;
                        frontier_phi_67_pred_1 = _3413;
                        frontier_phi_67_pred_2 = _3414;
                        frontier_phi_67_pred_3 = _3411;
                        frontier_phi_67_pred_4 = _3410;
                        frontier_phi_67_pred_5 = _3409;
                    }
                    _3077 = frontier_phi_67_pred;
                    _3079 = frontier_phi_67_pred_1;
                    _3081 = frontier_phi_67_pred_2;
                    _3075 = frontier_phi_67_pred_3;
                    _3073 = frontier_phi_67_pred_4;
                    _3071 = frontier_phi_67_pred_5;
                    uint _3216 = _3215 + 1u;
                    if (_3216 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3209 = _3071;
                        _3210 = _3073;
                        _3211 = _3075;
                        _3212 = _3077;
                        _3213 = _3079;
                        _3214 = _3081;
                        _3215 = _3216;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3079;
                frontier_phi_55_56_ladder_1 = _3081;
                frontier_phi_55_56_ladder_2 = _3077;
                frontier_phi_55_56_ladder_3 = _3075;
                frontier_phi_55_56_ladder_4 = _3073;
                frontier_phi_55_56_ladder_5 = _3071;
            }
            else
            {
                frontier_phi_55_56_ladder = _2966;
                frontier_phi_55_56_ladder_1 = _2968;
                frontier_phi_55_56_ladder_2 = _2964;
                frontier_phi_55_56_ladder_3 = _2962;
                frontier_phi_55_56_ladder_4 = _2960;
                frontier_phi_55_56_ladder_5 = _2958;
            }
            _3070 = frontier_phi_55_56_ladder_5;
            _3072 = frontier_phi_55_56_ladder_4;
            _3074 = frontier_phi_55_56_ladder_3;
            _3076 = frontier_phi_55_56_ladder_2;
            _3078 = frontier_phi_55_56_ladder;
            _3080 = frontier_phi_55_56_ladder_1;
        }
        float _3085 = isnan(1.0) ? _1139 : (isnan(_1139) ? 1.0 : min(_1139, 1.0));
        _2870 = (_3085 * _3076) + _2306;
        _2872 = (_3085 * _3078) + _2308;
        _2874 = (_3085 * _3080) + _2310;
        _2876 = ((_3070 * _1123) * _3085) + _2651;
        _2878 = ((_3072 * _1125) * _3085) + _2653;
        _2880 = ((_3074 * _1126) * _3085) + _2655;
    }
    else
    {
        _2870 = _2306;
        _2872 = _2308;
        _2874 = _2310;
        _2876 = _2651;
        _2878 = _2653;
        _2880 = _2655;
    }
    float _4798 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _4809 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _4820 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    uint _2900 = _261 + 6u;
    float _2908 = _1061 / cbSceneParam._m0[86u].x;
    float _2909 = _1062 / cbSceneParam._m0[86u].y;
    vec4 _2923 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, (log2((isnan(cbSceneParam._m0[77u].w) ? _996 : (isnan(_996) ? cbSceneParam._m0[77u].w : min(_996, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2925 = _2923.x;
    float _2926 = _2923.y;
    float _2927 = _2923.z;
    float _2928 = _2923.w;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_996 > cbSceneParam._m0[78u].w)
    {
        float _2983 = isnan(_996) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _996 : min(cbSceneParam._m0[80u].w, _996));
        float _2984 = _2983 / _996;
        float _2995 = _2984 * _1046;
        float _2996 = _1047 * _2984;
        float _2997 = (-0.0) - _2996;
        float _2998 = _2984 * _1048;
        float _3000 = (cbSceneParam._m0[77u].w * _2997) / _2983;
        float _3001 = _3000 + cbSceneParam._m0[79u].w;
        float _3002 = cbSceneParam._m0[79u].w - _2996;
        float _3008 = sqrt(((_2995 * _2995) + (_2996 * _2996)) + (_2998 * _2998));
        float _3011 = (1.0 - (cbSceneParam._m0[77u].w / _2983)) * _3008;
        float _3016 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3018 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3171;
        if (abs((_2997 - _3000) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3171 = ((((_3001 > 0.0) ? exp2(_3016 * _3001) : (2.0 - exp2(_3018 * _3001))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3011;
        }
        else
        {
            float _3131 = 1.0 / cbSceneParam._m0[80u].x;
            float _3132 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : max(_3001, _3002));
            float _3133 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : min(_3001, _3002));
            float _3142 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : min(_3132, 0.0));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            _3171 = ((abs(_3008 / _2997) * cbSceneParam._m0[80u].y) * ((((_3142 - _3143) * 2.0) - ((exp2(_3016 * (isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0)))) - exp2(_3016 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0))))) * _3131)) - ((exp2(_3018 * _3142) - exp2(_3018 * _3143)) * _3131))) + (_3011 * cbSceneParam._m0[80u].z);
        }
        vec4 _3173 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, 1.0), 0.0);
        float _3182 = exp2((_3171 * (-1.44269502162933349609375)) * (1.0 - _3173.w));
        float _3183 = log2(_3182);
        float _3199 = log2(_2928);
        _3020 = (exp2(_3199 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].x)) * _3173.x) / cbSceneParam._m0[78u].x)) + _2925;
        _3022 = (exp2(_3199 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].y)) * _3173.y) / cbSceneParam._m0[78u].y)) + _2926;
        _3024 = (exp2(_3199 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].z)) * _3173.z) / cbSceneParam._m0[78u].z)) + _2927;
        _3026 = _3182 * _2928;
    }
    else
    {
        _3020 = _2925;
        _3022 = _2926;
        _3024 = _2927;
        _3026 = _2928;
    }
    float _3038 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3039 = _3038 == 3.0;
    float _3040 = log2(_3026);
    float _3047 = exp2(_3040 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2870 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1139))) + ((_2876 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1946)) * cbPerFrame._m0[3u].x));
    float _3048 = exp2(_3040 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2872 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1139))) + ((_2878 + ((isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0))) * _1946)) * cbPerFrame._m0[3u].x));
    float _3049 = exp2(_3040 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2874 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1139))) + ((_2880 + ((isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0))) * _1946)) * cbPerFrame._m0[3u].x));
    float _3058 = (_3038 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3058 * (_3039 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3020)));
    SV_Target.y = _3058 * (_3039 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3022)));
    SV_Target.z = _3058 * (_3039 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3024)));
    SV_Target.w = cbInstanceData._m0[_2900].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2900].w;
}


