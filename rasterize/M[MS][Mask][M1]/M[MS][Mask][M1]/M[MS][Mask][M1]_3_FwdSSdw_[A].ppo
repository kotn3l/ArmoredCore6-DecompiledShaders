#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1228;
float _3636;
float _3637;
float _3638;
float _3639;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3648 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3659 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3670 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _401 = _399.x;
    float _413 = dot(vec4(_401, _399.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _430 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_401 - _413) * cbMtdParam._m0[23u].w) + _413) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3681 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _438 = (_431 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _439 = (_431 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _440 = (_431 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    float _444 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _438;
    float _447 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _439;
    float _450 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _440;
    float _457 = ((_438 - _444) * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) + _444;
    float _458 = ((_439 - _447) * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) + _447;
    float _459 = ((_440 - _450) * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) + _450;
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _497 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _516 = _514.x;
    float _517 = _514.y;
    float _518 = _514.z;
    float _527 = ((_497.z - _518) * _431) + _518;
    float _530 = ((((_497.x - _516) * _431) + _516) * 2.0) + (-1.0);
    float _531 = ((((_497.y - _517) * _431) + _517) * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3692 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _571 = (_530 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_472.x * 2.0) + (-1.0)))) + (((_559.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _572 = (_531 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_472.y * 2.0) + (-1.0)))) + (((_559.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _584 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _600 = _598.x;
    float _618 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _287) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _288) + cbTextureTilingScale._m0[9u].w)).x - _600) * _431) + _600;
    float _622 = ((_584.x - _618) * cbMtdParam._m0[19u].z) + _618;
    float _627 = (((_472.z - _527) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _527;
    float _631 = ((_559.z - _627) * cbMtdParam._m0[19u].w) + _627;
    float _633 = cbMtdParam._m0[22u].x + _559.w;
    float _636 = fma(_537, _234 * NORMAL.x, fma(_572, _241 * TANGENT.x, (_227 * _219) * _571));
    float _639 = fma(_537, _234 * NORMAL.y, fma(_572, _241 * TANGENT.y, (_227 * _220) * _571));
    float _642 = fma(_537, _234 * NORMAL.z, fma(_572, _241 * TANGENT.z, (_227 * _221) * _571));
    float _646 = inversesqrt(dot(vec3(_636, _639, _642), vec3(_636, _639, _642)));
    float _647 = _646 * _636;
    float _648 = _646 * _639;
    float _649 = _646 * _642;
    float _3703 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _650 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3725 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3736 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3747 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3758 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _655 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _669 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _720 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _710);
    float _721 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _710);
    float _722 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _710);
    float _726 = inversesqrt(dot(vec3(_720, _721, _722), vec3(_720, _721, _722)));
    float _727 = _720 * _726;
    float _728 = _721 * _726;
    float _729 = _722 * _726;
    vec4 _734 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _736 = _734.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _908 = sqrt(((_720 * _720) + (_721 * _721)) + (_722 * _722));
        float _914 = (cbMatDynParam._m0[5u].x * _908) + cbMatDynParam._m0[5u].y;
        float _3769 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _919 = (cbMatDynParam._m0[5u].z * _908) + cbMatDynParam._m0[5u].w;
        float _3780 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) - _915)) + _915) < ((_736 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _747 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _748 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _766 = fma(_649, cbSceneParam._m0[5u].z, fma(_648, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _647));
    float _769 = fma(_649, cbSceneParam._m0[6u].z, fma(_648, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _647));
    float _772 = fma(_649, cbSceneParam._m0[7u].z, fma(_648, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _647));
    uint _785 = _268 + 9u;
    uint _786 = _785 + uint(cbMatDynParam._m0[0u].w);
    float _792 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) * cbInstanceData._m0[_786].x;
    float _793 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_786].y;
    float _794 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_786].z;
    float _3791 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _798 = 1.0 - _655;
    float _799 = _795 * _798;
    float _800 = _796 * _798;
    float _801 = _797 * _798;
    float _806 = (_795 + (-0.039999999105930328369140625)) * _655;
    float _807 = (_796 + (-0.039999999105930328369140625)) * _655;
    float _808 = (_797 + (-0.039999999105930328369140625)) * _655;
    float _809 = _806 + 0.039999999105930328369140625;
    float _811 = _807 + 0.039999999105930328369140625;
    float _812 = _808 + 0.039999999105930328369140625;
    vec4 _821 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _747, cbSceneParam._m0[86u].y * _748));
    float _825 = ((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * TEXCOORD_5.w) * _821.x;
    float _826 = dot(vec3(_647, _648, _649), vec3(_727, _728, _729));
    float _829 = _826 * 2.0;
    float _833 = (_829 * _647) - _727;
    float _834 = (_829 * _648) - _728;
    float _835 = (_829 * _649) - _729;
    float _839 = abs(dot(vec3(_727, _728, _729), vec3(_647, _648, _649)));
    float _3824 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _841 = sqrt(_650);
    float _854 = exp2((_841 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_841 * 3.0));
    float _860 = (1.0 - _854) * ((_841 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _861 = _854 * _841;
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1227;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _952 = fma(_897, cbModelParam._m0[26u].z, fma(_893, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _889));
        float _956 = fma(_897, cbModelParam._m0[27u].z, fma(_893, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _889));
        float _960 = fma(_897, cbModelParam._m0[28u].z, fma(_893, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _889));
        float _985 = _889 + _647;
        float _986 = _893 + _648;
        float _987 = _897 + _649;
        float _997 = fma(_987, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _985)) - _952;
        float _998 = fma(_987, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _985)) - _956;
        float _999 = fma(_987, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _985)) - _960;
        float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
        float _1016 = ((_1003 * _997) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_952 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1003 * _998) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_956 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1003 * _999) / cbModelParam._m0[34u].z) + ((((((_960 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        float _1055 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1021.x + (-0.5));
        float _1057 = _1055 * (_1021.y + (-0.5));
        float _1058 = _1055 * (_1021.z + (-0.5));
        float _1065 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1028.x + (-0.5));
        float _1067 = _1065 * (_1028.y + (-0.5));
        float _1068 = _1065 * (_1028.z + (-0.5));
        float _1075 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1035.x + (-0.5));
        float _1077 = _1075 * (_1035.y + (-0.5));
        float _1078 = _1075 * (_1035.z + (-0.5));
        float _1085 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1042.x + (-0.5));
        float _1087 = _1085 * (_1042.y + (-0.5));
        float _1088 = _1085 * (_1042.z + (-0.5));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = _1056 * 0.5;
        float _1093 = _1066 * 0.5;
        float _1094 = _1076 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1109 = (dot(vec3(_647, _648, _649), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1119 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3872 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1121 + 1.0))) + _1126) * _1089;
        float _1136 = _1057 * 0.5;
        float _1137 = _1067 * 0.5;
        float _1138 = _1077 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_647, _648, _649), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3905 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1163 + 1.0))) + _1168) * _1090;
        float _1178 = _1058 * 0.5;
        float _1179 = _1068 * 0.5;
        float _1180 = _1078 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_647, _648, _649), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3938 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1205 + 1.0))) + _1210) * _1091;
        _1227 = _1058;
        _1229 = _1057;
        _1230 = _1056;
        _1231 = _1068;
        _1232 = _1067;
        _1233 = _1066;
        _1234 = _1078;
        _1235 = _1077;
        _1236 = _1076;
        _1237 = _1091;
        _1238 = _1090;
        _1239 = _1089;
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
    }
    else
    {
        _1227 = _1228;
        _1229 = _1228;
        _1230 = _1228;
        _1231 = _1228;
        _1232 = _1228;
        _1233 = _1228;
        _1234 = _1228;
        _1235 = _1228;
        _1236 = _1228;
        _1237 = _1228;
        _1238 = _1228;
        _1239 = _1228;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1270 = fma(_897, cbModelParam._m0[30u].z, fma(_893, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _889));
        float _1274 = fma(_897, cbModelParam._m0[31u].z, fma(_893, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _889));
        float _1278 = fma(_897, cbModelParam._m0[32u].z, fma(_893, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _889));
        float _1301 = _889 + _647;
        float _1302 = _893 + _648;
        float _1303 = _897 + _649;
        float _1313 = fma(_1303, cbModelParam._m0[30u].z, fma(_1302, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1301)) - _1270;
        float _1314 = fma(_1303, cbModelParam._m0[31u].z, fma(_1302, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1301)) - _1274;
        float _1315 = fma(_1303, cbModelParam._m0[32u].z, fma(_1302, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1301)) - _1278;
        float _1319 = inversesqrt(dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315)));
        float _1332 = ((_1319 * _1313) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1270 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1319 * _1314) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1274 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1319 * _1315) / cbModelParam._m0[35u].z) + ((((((_1278 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        float _1369 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1336.x + (-0.5));
        float _1371 = _1369 * (_1336.y + (-0.5));
        float _1372 = _1369 * (_1336.z + (-0.5));
        float _1379 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1343.x + (-0.5));
        float _1381 = _1379 * (_1343.y + (-0.5));
        float _1382 = _1379 * (_1343.z + (-0.5));
        float _1389 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1350.x + (-0.5));
        float _1391 = _1389 * (_1350.y + (-0.5));
        float _1392 = _1389 * (_1350.z + (-0.5));
        float _1399 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1357.x + (-0.5));
        float _1401 = _1399 * (_1357.y + (-0.5));
        float _1402 = _1399 * (_1357.z + (-0.5));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = _1370 * 0.5;
        float _1407 = _1380 * 0.5;
        float _1408 = _1390 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_647, _648, _649), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4001 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1433 + 1.0))) + _1438) * _1403;
        float _1448 = _1371 * 0.5;
        float _1449 = _1381 * 0.5;
        float _1450 = _1391 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_647, _648, _649), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4034 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1475 + 1.0))) + _1480) * _1404;
        float _1490 = _1372 * 0.5;
        float _1491 = _1382 * 0.5;
        float _1492 = _1392 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_647, _648, _649), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4067 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1517 + 1.0))) + _1522) * _1405;
        _1539 = _1372;
        _1540 = _1371;
        _1541 = _1370;
        _1542 = _1382;
        _1543 = _1381;
        _1544 = _1380;
        _1545 = _1392;
        _1546 = _1391;
        _1547 = _1390;
        _1548 = _1405;
        _1549 = _1404;
        _1550 = _1403;
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
    }
    else
    {
        _1539 = _1228;
        _1540 = _1228;
        _1541 = _1228;
        _1542 = _1228;
        _1543 = _1228;
        _1544 = _1228;
        _1545 = _1228;
        _1546 = _1228;
        _1547 = _1228;
        _1548 = _1228;
        _1549 = _1228;
        _1550 = _1228;
        _1551 = 0.0;
        _1552 = 0.0;
        _1553 = 0.0;
    }
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1240)) + _1240;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1241)) + _1241;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1242)) + _1242;
    float _1586 = fma(_1565, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1563 * cbSceneParam._m0[89u].x));
    float _1589 = fma(_1565, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1563 * cbSceneParam._m0[90u].x));
    float _1592 = fma(_1565, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1563));
    float _1607 = _833 * 0.5;
    float _1608 = _834 * 0.5;
    float _1609 = _835 * 0.5;
    float _1610 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1613 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1616 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1650;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1623 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1227, _1231, _1234, _1237));
        float _1627 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1631 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1230, _1233, _1236, _1239));
        float _1638 = dot(vec4(cbModelParam._m0[39u]), vec4(_1607, _1608, _1609, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1661;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1652 = dot(vec4(cbModelParam._m0[40u]), vec4(_1607, _1608, _1609, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1665 = (_1661 * cbModelParam._m0[1u].x) + (_1650 * (1.0 - cbModelParam._m0[1u].x));
    float _1675 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _650);
    float _1676 = isnan(_1675) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1675 : min(cbModelParam._m0[25u].z, _1675));
    float _1758;
    float _1760;
    float _1762;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1725 = fma(_897, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889)) + cbModelParam._m0[13u].w;
        float _1729 = fma(_897, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889)) + cbModelParam._m0[14u].w;
        float _1733 = fma(_897, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889)) + cbModelParam._m0[15u].w;
        float _1736 = fma(_835, cbModelParam._m0[13u].z, fma(_834, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _833));
        float _1739 = fma(_835, cbModelParam._m0[14u].z, fma(_834, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _833));
        float _1742 = fma(_835, cbModelParam._m0[15u].z, fma(_834, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _833));
        float _1770;
        if (_1736 > 0.0)
        {
            _1770 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1770 = frontier_phi_17_15_ladder;
        }
        float _1995;
        if (_1739 > 0.0)
        {
            _1995 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1995 = frontier_phi_26_22_ladder;
        }
        float _2252;
        if (_1742 > 0.0)
        {
            _2252 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2252 = frontier_phi_38_33_ladder;
        }
        float _2254 = isnan(_1995) ? _1770 : (isnan(_1770) ? _1995 : min(_1770, _1995));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1736) + _1725;
        float _2260 = (_2255 * _1739) + _1729;
        float _2261 = (_2255 * _1742) + _1733;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2264 = (-1.0) - _2262;
        float _2266 = _2262 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2261 > _2266) || ((_2261 < _2264) || ((_2260 > _2266) || ((_2260 < _2264) || ((_2259 < _2264) || (_2259 > _2266))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2261, cbModelParam._m0[9u].z, fma(_2260, cbModelParam._m0[9u].y, _2259 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2261, cbModelParam._m0[10u].z, fma(_2260, cbModelParam._m0[10u].y, _2259 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2261, cbModelParam._m0[11u].z, fma(_2260, cbModelParam._m0[11u].y, _2259 * cbModelParam._m0[11u].x))), _1676);
            frontier_phi_16_38_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1758 = frontier_phi_16_38_ladder_2;
        _1760 = frontier_phi_16_38_ladder_1;
        _1762 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1746 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_833, _834, _835), _1676);
        _1758 = _1746.x * cbModelParam._m0[1u].y;
        _1760 = _1746.y * cbModelParam._m0[1u].y;
        _1762 = _1746.z * cbModelParam._m0[1u].y;
    }
    float _1766 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _650);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1766 : min(cbModelParam._m0[25u].w, _1766));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1822 = fma(_897, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889)) + cbModelParam._m0[21u].w;
        float _1826 = fma(_897, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889)) + cbModelParam._m0[22u].w;
        float _1830 = fma(_897, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889)) + cbModelParam._m0[23u].w;
        float _1833 = fma(_835, cbModelParam._m0[21u].z, fma(_834, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _833));
        float _1836 = fma(_835, cbModelParam._m0[22u].z, fma(_834, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _833));
        float _1839 = fma(_835, cbModelParam._m0[23u].z, fma(_834, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _833));
        float _2000;
        if (_1833 > 0.0)
        {
            _2000 = abs((1.0 - _1822) / _1833);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1822 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2000 = frontier_phi_28_24_ladder;
        }
        float _2279;
        if (_1836 > 0.0)
        {
            _2279 = abs((1.0 - _1826) / _1836);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1826 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2279 = frontier_phi_40_35_ladder;
        }
        float _2492;
        if (_1839 > 0.0)
        {
            _2492 = abs((1.0 - _1830) / _1839);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1830 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2492 = frontier_phi_49_46_ladder;
        }
        float _2494 = isnan(_2279) ? _2000 : (isnan(_2000) ? _2279 : min(_2000, _2279));
        float _2495 = isnan(_2492) ? _2494 : (isnan(_2494) ? _2492 : min(_2494, _2492));
        float _2499 = (_2495 * _1833) + _1822;
        float _2500 = (_2495 * _1836) + _1826;
        float _2501 = (_2495 * _1839) + _1830;
        float _2502 = _2495 * 9.9999997473787516355514526367188e-05;
        float _2503 = (-1.0) - _2502;
        float _2505 = _2502 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2501 > _2505) || ((_2501 < _2503) || ((_2500 > _2505) || ((_2500 < _2503) || ((_2499 < _2503) || (_2499 > _2505))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2700 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2501, cbModelParam._m0[17u].z, fma(_2500, cbModelParam._m0[17u].y, _2499 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2501, cbModelParam._m0[18u].z, fma(_2500, cbModelParam._m0[18u].y, _2499 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2501, cbModelParam._m0[19u].z, fma(_2500, cbModelParam._m0[19u].y, _2499 * cbModelParam._m0[19u].x))), _1767);
            frontier_phi_25_49_ladder = _2700.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2700.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2700.x * cbModelParam._m0[1u].z;
        }
        _1858 = frontier_phi_25_49_ladder_2;
        _1860 = frontier_phi_25_49_ladder_1;
        _1862 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1842 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_833, _834, _835), _1767);
        _1858 = _1842.x * cbModelParam._m0[1u].z;
        _1860 = _1842.y * cbModelParam._m0[1u].z;
        _1862 = _1842.z * cbModelParam._m0[1u].z;
    }
    float _1875 = (((_860 * _809) + _861) * _825) * ((cbModelParam._m0[1u].w * (_1858 - _1758)) + _1758);
    float _1877 = (((_860 * _811) + _861) * _825) * ((cbModelParam._m0[1u].w * (_1860 - _1760)) + _1760);
    float _1879 = (((_860 * _812) + _861) * _825) * ((cbModelParam._m0[1u].w * (_1862 - _1762)) + _1762);
    float _1882 = fma(_1879, cbSceneParam._m0[89u].z, fma(_1877, cbSceneParam._m0[89u].y, _1875 * cbSceneParam._m0[89u].x));
    float _1885 = fma(_1879, cbSceneParam._m0[90u].z, fma(_1877, cbSceneParam._m0[90u].y, _1875 * cbSceneParam._m0[90u].x));
    float _1888 = fma(_1879, cbSceneParam._m0[91u].z, fma(_1877, cbSceneParam._m0[91u].y, _1875 * cbSceneParam._m0[91u].x));
    vec4 _1896 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_747, _748));
    float _1898 = _1896.w;
    float _1910 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1898);
    float _1911 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1898);
    float _1912 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1898);
    uvec4 _1916 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _1918 = _1916.x * 14u;
    uint _1919 = _1918 + 13u;
    float _1926 = _825 + (-1.0);
    float _1931 = (cbLight._m0[_1919].x * _1926) + 1.0;
    float _1932 = (cbLight._m0[_1919].y * _1926) + 1.0;
    float _1933 = (cbLight._m0[_1919].z * _1926) + 1.0;
    float _1934 = (cbLight._m0[_1919].w * _1926) + 1.0;
    uint _1935 = _1918 + 5u;
    float _1941 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1945 = _1918 + 4u;
    float _1954 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1958 = _1918 | 1u;
    float _1969 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_647, _648, _649));
    float _1972 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_647, _648, _649));
    float _4203 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _4214 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1977 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.3183098733425140380859375;
    float _1979 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * 0.3183098733425140380859375;
    float _1986 = ((cbLight._m0[_1935].x * _1941) * _1979) + (((cbLight._m0[_1945].x * _1910) * _1954) * _1977);
    float _1987 = ((_1941 * cbLight._m0[_1935].y) * _1979) + (((cbLight._m0[_1945].y * _1911) * _1954) * _1977);
    float _1988 = ((_1941 * cbLight._m0[_1935].z) * _1979) + (((cbLight._m0[_1945].z * _1912) * _1954) * _1977);
    uvec4 _1992 = floatBitsToUint(cbLight._m0[_1918 + 12u]);
    bool _1994 = _1992.x == 0u;
    float _2005;
    float _2007;
    float _2009;
    if (_1994)
    {
        _2005 = _1986;
        _2007 = _1987;
        _2009 = _1988;
    }
    else
    {
        uint _2013 = _1918 + 6u;
        float _2029 = (dot(vec3(cbLight._m0[_1918 + 2u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _2030 = _2029 * _2029;
        float _4225 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2031 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2032 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2005 = (((cbLight._m0[_2013].x * 0.3183098733425140380859375) * _2031) * _2032) + _1986;
        _2007 = (((cbLight._m0[_2013].y * 0.3183098733425140380859375) * _2031) * _2032) + _1987;
        _2009 = (((cbLight._m0[_2013].z * 0.3183098733425140380859375) * _2031) * _2032) + _1988;
    }
    bool _2012 = _1992.y == 0u;
    float _2050;
    float _2052;
    float _2054;
    if (_2012)
    {
        _2050 = _2005;
        _2052 = _2007;
        _2054 = _2009;
    }
    else
    {
        uint _2223 = _1918 + 7u;
        float _2239 = (dot(vec3(cbLight._m0[_1918 + 3u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4241 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2242 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2050 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _2005;
        _2052 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _2007;
        _2054 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _2009;
    }
    uint _2057 = _1918 + 8u;
    float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1918].w)) * _650) * 0.949999988079071044921875);
    float _2071 = _2070 * _2070;
    float _2072 = cbLight._m0[_1918].x + _727;
    float _2073 = cbLight._m0[_1918].y + _728;
    float _2074 = cbLight._m0[_1918].z + _729;
    float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
    float _2079 = _2078 * _2072;
    float _2080 = _2078 * _2073;
    float _2081 = _2078 * _2074;
    float _2082 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1918].xyz));
    float _4257 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _4268 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _2086 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2087 = dot(vec3(_647, _648, _649), vec3(_2079, _2080, _2081));
    float _4279 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_2079, _2080, _2081));
    float _4290 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2071 * _2071;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2107 = exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0);
    float _2108 = 0.959999978542327880859375 - _806;
    float _2110 = 0.959999978542327880859375 - _807;
    float _2111 = 0.959999978542327880859375 - _808;
    float _2118 = 1.0 - _2071;
    float _2129 = (0.5 / (((_2086 * ((_2085 * _2118) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2118) + _2071) * _2085))) * _2085;
    float _4301 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    uint _2145 = _1918 + 9u;
    float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _650) * 0.949999988079071044921875);
    float _2157 = _2156 * _2156;
    float _2158 = cbLight._m0[_1958].x + _727;
    float _2159 = cbLight._m0[_1958].y + _728;
    float _2160 = cbLight._m0[_1958].z + _729;
    float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
    float _2165 = _2164 * _2158;
    float _2166 = _2164 * _2159;
    float _2167 = _2164 * _2160;
    float _2168 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1958].xyz));
    float _4312 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2172 = dot(vec3(_647, _648, _649), vec3(_2165, _2166, _2167));
    float _4323 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_2165, _2166, _2167));
    float _4334 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2157 * _2157;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0);
    float _2198 = 1.0 - _2157;
    float _2208 = (0.5 / (((_2086 * ((_2171 * _2198) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2198) + _2157) * _2171))) * _2171;
    float _4345 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    float _2220 = (((((_2191 * _2108) + _809) * cbLight._m0[_2145].x) * _2210) * _1941) + ((((cbLight._m0[_2057].x * _1910) * ((_2107 * _2108) + _809)) * _2131) * _1954);
    float _2221 = (((((_2191 * _2110) + _811) * cbLight._m0[_2145].y) * _2210) * _1941) + ((((cbLight._m0[_2057].y * _1911) * ((_2107 * _2110) + _811)) * _2131) * _1954);
    float _2222 = (((((_2191 * _2111) + _812) * cbLight._m0[_2145].z) * _2210) * _1941) + ((((cbLight._m0[_2057].z * _1912) * ((_2107 * _2111) + _812)) * _2131) * _1954);
    float _2284;
    float _2286;
    float _2288;
    if (_1994)
    {
        _2284 = _2220;
        _2286 = _2221;
        _2288 = _2222;
    }
    else
    {
        uint _2290 = _1918 + 2u;
        uint _2294 = _1918 + 10u;
        float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _650) * 0.949999988079071044921875);
        float _2309 = _2308 * _2308;
        float _2310 = cbLight._m0[_2290].x + _727;
        float _2311 = cbLight._m0[_2290].y + _728;
        float _2312 = cbLight._m0[_2290].z + _729;
        float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
        float _2317 = _2316 * _2310;
        float _2318 = _2316 * _2311;
        float _2319 = _2316 * _2312;
        float _2320 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2290].xyz));
        float _4356 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2324 = dot(vec3(_647, _648, _649), vec3(_2317, _2318, _2319));
        float _4367 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2328 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2317, _2318, _2319));
        float _4378 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2332 = _2309 * _2309;
        float _2336 = ((_2327 * _2327) * (_2332 + (-1.0))) + 1.0;
        float _2343 = exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0);
        float _2350 = 1.0 - _2309;
        float _2360 = (0.5 / (((_2086 * ((_2323 * _2350) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2350) + _2309) * _2323))) * _2323;
        float _4389 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2362 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2332 / ((_2336 * _2336) * 3.141590118408203125));
        float _2363 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2284 = (((((_2343 * _2108) + _809) * cbLight._m0[_2294].x) * _2362) * _2363) + _2220;
        _2286 = (((((_2343 * _2110) + _811) * cbLight._m0[_2294].y) * _2362) * _2363) + _2221;
        _2288 = (((((_2343 * _2111) + _812) * cbLight._m0[_2294].z) * _2362) * _2363) + _2222;
    }
    float _2398;
    float _2400;
    float _2402;
    if (_2012)
    {
        _2398 = _2284;
        _2400 = _2286;
        _2402 = _2288;
    }
    else
    {
        uint _2409 = _1918 + 3u;
        uint _2413 = _1918 + 11u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _650) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _727;
        float _2430 = cbLight._m0[_2409].y + _728;
        float _2431 = cbLight._m0[_2409].z + _729;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2409].xyz));
        float _4405 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2443 = dot(vec3(_647, _648, _649), vec3(_2436, _2437, _2438));
        float _4416 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4427 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0);
        float _2469 = 1.0 - _2428;
        float _2479 = (0.5 / (((_2086 * ((_2442 * _2469) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2469) + _2428) * _2442))) * _2442;
        float _4438 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2481 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2482 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2398 = (((((_2462 * _2108) + _809) * cbLight._m0[_2413].x) * _2481) * _2482) + _2284;
        _2400 = (((((_2462 * _2110) + _811) * cbLight._m0[_2413].y) * _2481) * _2482) + _2286;
        _2402 = (((((_2462 * _2111) + _812) * cbLight._m0[_2413].z) * _2481) * _2482) + _2288;
    }
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    if (_1916.y == 0u)
    {
        float _2557 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2558 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2557;
        float _2559 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2557;
        float _2560 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2557;
        uvec4 _2572 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2573 = _2572.x;
        uint _2584 = uint((float(_2572.y) * floor(float(uint(cbSceneParam._m0[85u].y * _748) / _2573))) + floor(float(uint(cbSceneParam._m0[85u].x * _747) / _2573)));
        float _2594 = (log2(_2560 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2595 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        uint _2598 = uint(isnan(14.0) ? _2595 : (isnan(_2595) ? 14.0 : min(_2595, 14.0)));
        uvec4 _2603 = texelFetch(g_lightClusterGridBuffer, int(((_2598 << 2u) + (_2584 << 6u)) >> 2u));
        uint _2604 = _2603.x;
        uint _2605 = _2572.z;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        if (((((1u << ((_2605 >> 4u) & 15u)) + 4294967295u) & _2604) == 0u) || ((_2605 & 240u) == 0u))
        {
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
        }
        else
        {
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            uint _2864 = 0u;
            uint _2873;
            bool _2874;
            for (;;)
            {
                _2873 = texelFetch(g_lightClassification, int((((_2598 << 5u) + (_2584 << 9u)) + (_2864 << 2u)) >> 2u)).x;
                _2874 = _2873 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2874)
                {
                    frontier_phi_66_pred = _2858;
                    frontier_phi_66_pred_1 = _2863;
                    frontier_phi_66_pred_2 = _2862;
                    frontier_phi_66_pred_3 = _2861;
                    frontier_phi_66_pred_4 = _2860;
                    frontier_phi_66_pred_5 = _2859;
                }
                else
                {
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    uint _3009;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2873;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    for (;;)
                    {
                        uint _3013 = uint(findLSB(_3009)) + (_2864 << 5u);
                        uint _3010 = (_3009 + 4294967295u) & _3009;
                        uint _3015 = _3013 * 48u;
                        vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3015)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 3u)).x));
                        uint _3035 = (_3013 * 48u) + 4u;
                        vec4 _3048 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 3u)).x));
                        uint _3054 = (_3013 * 48u) + 8u;
                        vec3 _3065 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3054)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 2u)).x));
                        float _3069 = _3029.x - _2558;
                        float _3070 = _3029.y - _2559;
                        float _3071 = _3029.z - _2560;
                        float _3072 = dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071));
                        float _3075 = inversesqrt(_3072);
                        float _3076 = _3075 * _3069;
                        float _3077 = _3075 * _3070;
                        float _3078 = _3075 * _3071;
                        float _3079 = dot(vec3(_766, _769, _772), vec3(_3076, _3077, _3078));
                        float _3084 = 1.0 - (_3072 * _3029.w);
                        float _4464 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3085 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3086 = sqrt(_3072) * _3048.w;
                        float _3089 = 1.39999997615814208984375 / (_3086 + 1.39999997615814208984375);
                        float _3090 = _3089 * _3089;
                        float _3093 = ((1.0 - _3090) * _3079) + _3090;
                        float _3096 = _3086 * _3086;
                        float _3100 = ((isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0))) * _3085) / ((_3096 * 0.699999988079071044921875) + 1.0);
                        float _3104 = (-0.0) - _2558;
                        float _3105 = (-0.0) - _2559;
                        float _3106 = (-0.0) - _2560;
                        float _3110 = inversesqrt(dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106)));
                        float _3111 = _3110 * _3104;
                        float _3112 = _3110 * _3105;
                        float _3113 = _3110 * _3106;
                        float _3121 = exp2(log2(1.0 / ((_3096 * 3.5) + 5.0)) * 0.25);
                        float _3122 = 1.0 - _841;
                        float _3129 = sqrt(1.0 - ((1.0 - (_3122 * _3122)) * (1.0 - (_3121 * _3121))));
                        float _3130 = _3129 * _3129;
                        float _3131 = _3130 * _3130;
                        float _3132 = _3111 + _3076;
                        float _3133 = _3112 + _3077;
                        float _3134 = _3113 + _3078;
                        float _3138 = inversesqrt(dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134)));
                        float _3142 = dot(vec3(_766, _769, _772), vec3(_3111, _3112, _3113));
                        float _4480 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3145 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3146 = dot(vec3(_766, _769, _772), vec3(_3138 * _3132, _3138 * _3133, _3138 * _3134));
                        float _4491 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3149 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3153 = ((_3149 * _3149) * (_3131 + (-1.0))) + 1.0;
                        float _3154 = _3089 * _3130;
                        float _3155 = _3154 * _3154;
                        float _3158 = ((1.0 - _3155) * _3079) + _3155;
                        float _4502 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3159 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3160 = 1.0 - _3130;
                        float _3170 = (0.5 / (((_3159 * ((_3145 * _3160) + _3130)) + 9.9999999392252902907785028219223e-09) + (((_3159 * _3160) + _3130) * _3145))) * _3159;
                        float _4513 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3181 = (((_3131 * 3.1415927410125732421875) * (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) / ((_3153 * _3153) * ((_3096 * 2.1991131305694580078125) + 3.141590118408203125))) * _3085;
                        _2933 = (_3100 * _3048.x) + _3006;
                        _2934 = (_3100 * _3048.y) + _3007;
                        _2935 = (_3100 * _3048.z) + _3008;
                        _2930 = (_3181 * _3065.x) + _3003;
                        _2931 = (_3181 * _3065.y) + _3004;
                        _2932 = (_3181 * _3065.z) + _3005;
                        if (_3010 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _3010;
                        }
                    }
                    frontier_phi_66_pred = _2930;
                    frontier_phi_66_pred_1 = _2935;
                    frontier_phi_66_pred_2 = _2934;
                    frontier_phi_66_pred_3 = _2933;
                    frontier_phi_66_pred_4 = _2932;
                    frontier_phi_66_pred_5 = _2931;
                }
                _2706 = frontier_phi_66_pred;
                _2716 = frontier_phi_66_pred_1;
                _2714 = frontier_phi_66_pred_2;
                _2712 = frontier_phi_66_pred_3;
                _2710 = frontier_phi_66_pred_4;
                _2708 = frontier_phi_66_pred_5;
                uint _2865 = _2864 + 1u;
                if (_2865 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2858 = _2706;
                    _2859 = _2708;
                    _2860 = _2710;
                    _2861 = _2712;
                    _2862 = _2714;
                    _2863 = _2716;
                    _2864 = _2865;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
        }
        uvec4 _2719 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2720 = _2719.z;
        uint _2722 = (_2720 >> 8u) & 15u;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        if (((4294967295u << _2722) & _2604) == 0u)
        {
            _2826 = _2705;
            _2828 = _2707;
            _2830 = _2709;
            _2832 = _2711;
            _2834 = _2713;
            _2836 = _2715;
        }
        else
        {
            float _2851 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
            float _2852 = _2851 * _2558;
            float _2853 = _2851 * _2559;
            float _2854 = _2851 * _2560;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2722 < ((_2720 >> 12u) & 15u))
            {
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2986 = _2705;
                float _2987 = _2707;
                float _2988 = _2709;
                float _2989 = _2711;
                float _2990 = _2713;
                float _2991 = _2715;
                uint _2992 = _2722;
                uint _3001;
                bool _3002;
                for (;;)
                {
                    _3001 = texelFetch(g_lightClassification, int((((_2598 << 5u) + (_2584 << 9u)) + (_2992 << 2u)) >> 2u)).x;
                    _3002 = _3001 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3002)
                    {
                        frontier_phi_77_pred = _2991;
                        frontier_phi_77_pred_1 = _2990;
                        frontier_phi_77_pred_2 = _2989;
                        frontier_phi_77_pred_3 = _2988;
                        frontier_phi_77_pred_4 = _2987;
                        frontier_phi_77_pred_5 = _2986;
                    }
                    else
                    {
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3208 = _2986;
                        float _3209 = _2987;
                        float _3210 = _2988;
                        float _3211 = _2989;
                        float _3212 = _2990;
                        float _3213 = _2991;
                        uint _3214 = _3001;
                        uint _3215;
                        vec4 _3240;
                        float _3241;
                        vec4 _3256;
                        vec3 _3268;
                        vec4 _3283;
                        vec4 _3298;
                        float _3345;
                        bool _3346;
                        for (;;)
                        {
                            uint _3225 = ((_2992 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3214));
                            _3215 = (_3214 + 4294967295u) & _3214;
                            uint _3227 = _3225 * 40u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            _3241 = _3240.w;
                            uint _3243 = (_3225 * 40u) + 4u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3258 = (_3225 * 40u) + 8u;
                            _3268 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x));
                            uint _3270 = (_3225 * 40u) + 16u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3225 * 40u) + 20u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3301 = (_3225 * 40u) + 24u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3320 = (_3225 * 40u) + 28u;
                            vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            _3345 = fma(_2560, _3333.z, fma(_2559, _3333.y, _3333.x * _2558)) + _3333.w;
                            _3346 = !((fma(_2560, _3314.z, fma(_2559, _3314.y, _3314.x * _2558)) + _3314.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3346)
                            {
                                float _3373 = _3240.x - _2558;
                                float _3374 = _3240.y - _2559;
                                float _3375 = _3240.z - _2560;
                                float _3376 = dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375));
                                float _3379 = inversesqrt(_3376);
                                float _3380 = _3379 * _3373;
                                float _3381 = _3379 * _3374;
                                float _3382 = _3379 * _3375;
                                float _3386 = 1.0 - (_3376 / (_3241 * _3241));
                                float _4524 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3391 = sqrt(_3376) * _3256.w;
                                float _3393 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                                float _3394 = _3393 * _3393;
                                float _3397 = ((1.0 - _3394) * dot(vec3(_3380, _3381, _3382), vec3(_766, _769, _772))) + _3394;
                                float _3400 = _3391 * _3391;
                                float _3404 = (fma(_2560, _3283.z, fma(_2559, _3283.y, _3283.x * _2558)) + _3283.w) / _3345;
                                float _3405 = (fma(_2560, _3298.z, fma(_2559, _3298.y, _3298.x * _2558)) + _3298.w) / _3345;
                                float _3409 = 1.0 - dot(vec2(_3404, _3405), vec2(_3404, _3405));
                                float _4540 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3411 = _3410 * (((isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0))) * _3387) / ((_3400 * 0.699999988079071044921875) + 1.0));
                                float _3423 = exp2(log2(1.0 / ((_3400 * 3.5) + 5.0)) * 0.25);
                                float _3424 = 1.0 - _841;
                                float _3431 = sqrt(1.0 - ((1.0 - (_3424 * _3424)) * (1.0 - (_3423 * _3423))));
                                float _3432 = _3431 * _3431;
                                float _3433 = _3432 * _3432;
                                float _3434 = _3380 - _2852;
                                float _3435 = _3381 - _2853;
                                float _3436 = _3382 - _2854;
                                float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                                float _3444 = dot(vec3(_766, _769, _772), vec3((-0.0) - _2852, (-0.0) - _2853, (-0.0) - _2854));
                                float _4551 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3448 = dot(vec3(_766, _769, _772), vec3(_3440 * _3434, _3440 * _3435, _3440 * _3436));
                                float _4562 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3451 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3455 = ((_3451 * _3451) * (_3433 + (-1.0))) + 1.0;
                                float _3456 = _3393 * _3432;
                                float _3457 = _3456 * _3456;
                                float _3463 = ((1.0 - _3457) * dot(vec3(_766, _769, _772), vec3(_3380, _3381, _3382))) + _3457;
                                float _4573 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3465 = 1.0 - _3432;
                                float _3475 = (0.5 / (((_3464 * ((_3447 * _3465) + _3432)) + 9.9999999392252902907785028219223e-09) + (((_3464 * _3465) + _3432) * _3447))) * _3464;
                                float _4584 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3485 = (_3410 * _3387) * (((_3433 * 3.1415927410125732421875) * (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) / ((_3455 * _3455) * ((_3400 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3411 * _3256.y;
                                frontier_phi_83_pred_1 = _3411 * _3256.x;
                                frontier_phi_83_pred_2 = _3485 * _3268.z;
                                frontier_phi_83_pred_3 = _3485 * _3268.y;
                                frontier_phi_83_pred_4 = _3485 * _3268.x;
                                frontier_phi_83_pred_5 = _3411 * _3256.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3493 = frontier_phi_83_pred;
                            _3492 = frontier_phi_83_pred_1;
                            _3491 = frontier_phi_83_pred_2;
                            _3490 = frontier_phi_83_pred_3;
                            _3489 = frontier_phi_83_pred_4;
                            _3494 = frontier_phi_83_pred_5;
                            _3198 = _3492 + _3211;
                            _3199 = _3493 + _3212;
                            _3200 = _3494 + _3213;
                            _3195 = _3489 + _3208;
                            _3196 = _3490 + _3209;
                            _3197 = _3491 + _3210;
                            if (_3215 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3215;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3200;
                        frontier_phi_77_pred_1 = _3199;
                        frontier_phi_77_pred_2 = _3198;
                        frontier_phi_77_pred_3 = _3197;
                        frontier_phi_77_pred_4 = _3196;
                        frontier_phi_77_pred_5 = _3195;
                    }
                    _2837 = frontier_phi_77_pred;
                    _2835 = frontier_phi_77_pred_1;
                    _2833 = frontier_phi_77_pred_2;
                    _2831 = frontier_phi_77_pred_3;
                    _2829 = frontier_phi_77_pred_4;
                    _2827 = frontier_phi_77_pred_5;
                    uint _2993 = _2992 + 1u;
                    if (_2993 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2986 = _2827;
                        _2987 = _2829;
                        _2988 = _2831;
                        _2989 = _2833;
                        _2990 = _2835;
                        _2991 = _2837;
                        _2992 = _2993;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2831;
                frontier_phi_58_59_ladder_1 = _2837;
                frontier_phi_58_59_ladder_2 = _2835;
                frontier_phi_58_59_ladder_3 = _2833;
                frontier_phi_58_59_ladder_4 = _2829;
                frontier_phi_58_59_ladder_5 = _2827;
            }
            else
            {
                frontier_phi_58_59_ladder = _2709;
                frontier_phi_58_59_ladder_1 = _2715;
                frontier_phi_58_59_ladder_2 = _2713;
                frontier_phi_58_59_ladder_3 = _2711;
                frontier_phi_58_59_ladder_4 = _2707;
                frontier_phi_58_59_ladder_5 = _2705;
            }
            _2826 = frontier_phi_58_59_ladder_5;
            _2828 = frontier_phi_58_59_ladder_4;
            _2830 = frontier_phi_58_59_ladder;
            _2832 = frontier_phi_58_59_ladder_3;
            _2834 = frontier_phi_58_59_ladder_2;
            _2836 = frontier_phi_58_59_ladder_1;
        }
        float _2841 = isnan(1.0) ? _825 : (isnan(_825) ? 1.0 : min(_825, 1.0));
        _2617 = (_2841 * _2832) + _2050;
        _2619 = (_2841 * _2834) + _2052;
        _2621 = (_2841 * _2836) + _2054;
        _2623 = ((_2826 * _809) * _2841) + _2398;
        _2625 = ((_2828 * _811) * _2841) + _2400;
        _2627 = ((_2830 * _812) * _2841) + _2402;
    }
    else
    {
        _2617 = _2050;
        _2619 = _2052;
        _2621 = _2054;
        _2623 = _2398;
        _2625 = _2400;
        _2627 = _2402;
    }
    float _4600 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4611 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _4622 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2644 = ((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2617 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _825))) + ((_2623 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1665)) * cbPerFrame._m0[3u].x);
    float _2645 = ((isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2619 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _825))) + ((_2625 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1665)) * cbPerFrame._m0[3u].x);
    float _2646 = ((isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2621 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _825))) + ((_2627 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1665)) * cbPerFrame._m0[3u].x);
    uint _2647 = _268 + 6u;
    float _2655 = _747 / cbSceneParam._m0[86u].x;
    float _2656 = _748 / cbSceneParam._m0[86u].y;
    vec4 _2670 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, (log2((isnan(cbSceneParam._m0[77u].w) ? _669 : (isnan(_669) ? cbSceneParam._m0[77u].w : min(_669, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2672 = _2670.x;
    float _2673 = _2670.y;
    float _2674 = _2670.z;
    float _2675 = _2670.w;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    if (_669 > cbSceneParam._m0[78u].w)
    {
        float _2730 = isnan(_669) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _669 : min(cbSceneParam._m0[80u].w, _669));
        float _2731 = _2730 / _669;
        float _2742 = _2731 * _720;
        float _2743 = _721 * _2731;
        float _2744 = (-0.0) - _2743;
        float _2746 = _2731 * _722;
        float _2748 = (cbSceneParam._m0[77u].w * _2744) / _2730;
        float _2749 = _2748 + cbSceneParam._m0[79u].w;
        float _2750 = cbSceneParam._m0[79u].w - _2743;
        float _2756 = sqrt(((_2742 * _2742) + (_2743 * _2743)) + (_2746 * _2746));
        float _2759 = (1.0 - (cbSceneParam._m0[77u].w / _2730)) * _2756;
        float _2764 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2766 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2943;
        if (abs((_2744 - _2748) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2943 = ((((_2749 > 0.0) ? exp2(_2764 * _2749) : (2.0 - exp2(_2766 * _2749))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2759;
        }
        else
        {
            float _2887 = 1.0 / cbSceneParam._m0[80u].x;
            float _2888 = isnan(_2750) ? _2749 : (isnan(_2749) ? _2750 : max(_2749, _2750));
            float _2889 = isnan(_2750) ? _2749 : (isnan(_2749) ? _2750 : min(_2749, _2750));
            float _2898 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : min(_2888, 0.0));
            float _2899 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : min(_2889, 0.0));
            _2943 = ((abs(_2756 / _2744) * cbSceneParam._m0[80u].y) * ((((_2898 - _2899) * 2.0) - ((exp2(_2764 * (isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0)))) - exp2(_2764 * (isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0))))) * _2887)) - ((exp2(_2766 * _2898) - exp2(_2766 * _2899)) * _2887))) + (_2759 * cbSceneParam._m0[80u].z);
        }
        vec4 _2945 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2655, _2656, 1.0), 0.0);
        float _2954 = exp2((_2943 * (-1.44269502162933349609375)) * (1.0 - _2945.w));
        float _2955 = log2(_2954);
        float _2971 = log2(_2675);
        _2768 = (exp2(_2971 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].x)) * _2945.x) / cbSceneParam._m0[78u].x)) + _2672;
        _2770 = (exp2(_2971 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].y)) * _2945.y) / cbSceneParam._m0[78u].y)) + _2673;
        _2772 = (exp2(_2971 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].z)) * _2945.z) / cbSceneParam._m0[78u].z)) + _2674;
        _2774 = _2954 * _2675;
    }
    else
    {
        _2768 = _2672;
        _2770 = _2673;
        _2772 = _2674;
        _2774 = _2675;
    }
    bool _2981;
    vec4 _2784;
    vec4 _2806;
    float _2808;
    float _2812;
    float _2813;
    float _2814;
    float _2815;
    bool _2825;
    for (;;)
    {
        _2784 = cbMatDynParam._m0[0u];
        float _2786 = roundEven(_2784.y);
        bool _2787 = _2786 == 3.0;
        float _2788 = log2(_2774);
        float _2795 = exp2(_2788 * cbSceneParam._m0[78u].x) * _2644;
        float _2796 = exp2(_2788 * cbSceneParam._m0[78u].y) * _2645;
        float _2797 = exp2(_2788 * cbSceneParam._m0[78u].z) * _2646;
        float _2804 = _736 + (-0.5);
        _2806 = cbMtdParam._m0[1u];
        _2808 = _2806.y * _2804;
        float _2811 = (_2786 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2812 = _2811 * (_2787 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2768)));
        _2813 = _2811 * (_2787 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2770)));
        _2814 = _2811 * (_2787 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2772)));
        _2815 = _2804 * 0.999000012874603271484375;
        _2825 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2825)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _2815) < 0.5)
            {
                _2981 = true;
                break;
            }
        }
        uint _2922 = _785 + uint(_2784.w);
        if ((cbInstanceData._m0[_2922].w < 1.0) && ((cbInstanceData._m0[_2922].w + _2815) < 0.5))
        {
            _2981 = true;
            break;
        }
        if ((_2808 + 1.0) < _2806.x)
        {
            _2981 = true;
            break;
        }
        _2981 = false;
        break;
    }
    float _3186;
    if (_2981)
    {
        discard_state = true;
        _3186 = 0.0;
    }
    else
    {
        _3186 = cbInstanceData._m0[_2647].w;
    }
    SV_Target.x = _2812;
    SV_Target.y = _2813;
    SV_Target.z = _2814;
    SV_Target.w = _3186;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2647].w;
    discard_exit();
}


