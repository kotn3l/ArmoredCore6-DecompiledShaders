#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1695;
float _4073;
float _4074;
float _4075;
float _4076;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _254 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _255 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _256 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _262 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _269 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _276 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _291 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4085 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4096 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4107 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _301 = uint(roundEven(NORMAL.w)) * 13u;
    uint _306 = _301 + 1u;
    uint _310 = _301 + 2u;
    float _319 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _320 = _319 * TEXCOORD.z;
    float _321 = _319 * TEXCOORD.w;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _320) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _321) + cbTextureTilingScale._m0[13u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _320) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _321) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _438 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _440 = _438.x;
    float _452 = dot(vec4(_440, _438.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _469 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _403.x) * 2.0) - ((((_440 - _452) * cbMtdParam._m0[23u].w) + _452) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4118 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _477 = (_470 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363;
    float _478 = (_470 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _479 = (_470 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _320) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _321) + cbTextureTilingScale._m0[3u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _518 = _516.x;
    float _528 = dot(vec4(_518, _516.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _542 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _403.y) * 2.0) - ((((_518 - _528) * cbMtdParam._m0[23u].w) + _528) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4129 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _550 = (_543 * ((_496.x * cbMtdParam._m0[13u].x) - _477)) + _477;
    float _551 = (_543 * ((_496.y * cbMtdParam._m0[13u].y) - _478)) + _478;
    float _552 = (_543 * ((_496.z * cbMtdParam._m0[13u].z) - _479)) + _479;
    vec4 _571 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _320) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _321) + cbTextureTilingScale._m0[24u].w));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _590 = _588.x;
    float _600 = dot(vec4(_590, _588.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _612 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _403.z) * 2.0) - ((((_590 - _600) * cbMtdParam._m0[23u].w) + _600) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4140 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _620 = (_613 * ((_571.x * cbMtdParam._m0[14u].x) - _550)) + _550;
    float _621 = (_613 * ((_571.y * cbMtdParam._m0[14u].y) - _551)) + _551;
    float _622 = (_613 * ((_571.z * cbMtdParam._m0[14u].z) - _552)) + _552;
    float _626 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _334.x) * _620;
    float _629 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _334.y) * _621;
    float _632 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _334.z) * _622;
    float _639 = ((_620 - _626) * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) + _626;
    float _640 = ((_621 - _629) * (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) + _629;
    float _641 = ((_622 - _632) * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) + _632;
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _320) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _321) + cbTextureTilingScale._m0[20u].w));
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _320) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _321) + cbTextureTilingScale._m0[4u].w));
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _700 = _698.x;
    float _701 = _698.y;
    float _702 = _698.z;
    float _709 = ((_681.x - _700) * _470) + _700;
    float _710 = ((_681.y - _701) * _470) + _701;
    float _711 = ((_681.z - _702) * _470) + _702;
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _320) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _321) + cbTextureTilingScale._m0[2u].w));
    float _734 = ((_723.x - _709) * _543) + _709;
    float _735 = ((_723.y - _710) * _543) + _710;
    float _736 = ((_723.z - _711) * _543) + _711;
    vec4 _748 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _320) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _321) + cbTextureTilingScale._m0[23u].w));
    float _761 = ((_748.z - _736) * _613) + _736;
    float _764 = ((((_748.x - _734) * _613) + _734) * 2.0) + (-1.0);
    float _765 = ((((_748.y - _735) * _613) + _735) * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _4151 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _771 = sqrt(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))));
    vec4 _785 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _810 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _320) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _321) + cbTextureTilingScale._m0[11u].w));
    float _812 = _810.x;
    float _813 = 1.0 - _812;
    float _821 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _824 = ((isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : min(_821, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _833 = (_824 - ((((((_812 - _813) * cbMtdParam._m0[24u].z) + _813) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _824))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4172 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _834 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _841 = (_834 * (cbMtdParam._m0[17u].x - _639)) + _639;
    float _842 = (_834 * (cbMtdParam._m0[17u].y - _640)) + _640;
    float _843 = (_834 * (cbMtdParam._m0[17u].z - _641)) + _641;
    vec4 _855 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _320) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _321) + cbTextureTilingScale._m0[19u].w));
    float _857 = _855.x;
    float _858 = 1.0 - _857;
    float _883 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_857 - _858) * cbMtdParam._m0[24u].w) + _858) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4183 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _884 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _892 = ((((cbMtdParam._m0[10u].x - _841) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _884) + _841;
    float _893 = ((((cbMtdParam._m0[10u].y - _842) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _884) + _842;
    float _894 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _843)) * _884) + _843;
    vec4 _920 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _922 = _920.x;
    float _940 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _320) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _321) + cbTextureTilingScale._m0[9u].w)).x - _922) * _470) + _922;
    float _957 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _320) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _321) + cbTextureTilingScale._m0[21u].w)).x - _940) * _543) + _940;
    float _974 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _320) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _321) + cbTextureTilingScale._m0[10u].w)).x - _957) * _613) + _957;
    float _978 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _974) * cbMtdParam._m0[19u].z) + _974;
    float _980 = _978 - (_978 * _834);
    float _982 = _980 - (_980 * _884);
    float _987 = (((_658.z - _761) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _761;
    float _991 = ((_785.z - _987) * cbMtdParam._m0[19u].w) + _987;
    vec4 _1007 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _320) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _321) + cbTextureTilingScale._m0[15u].w));
    float _1014 = (_1007.x * 2.0) + (-1.0);
    float _1015 = (_1007.y * 2.0) + (-1.0);
    float _1016 = dot(vec2(_1014, _1015), vec2(_1014, _1015));
    float _4194 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1024 = (_834 * (_1007.z - _991)) + _991;
    float _1027 = ((cbMtdParam._m0[23u].x - _1024) * _884) + _1024;
    vec4 _1050 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _320) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _321) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1056 = (_1050.x * 2.0) + (-1.0);
    float _1057 = (_1050.y * 2.0) + (-1.0);
    float _1058 = dot(vec2(_1056, _1057), vec2(_1056, _1057));
    float _4205 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1072 = (_764 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_658.x * 2.0) + (-1.0)))) + (((_785.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1073 = (_765 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_658.y * 2.0) + (-1.0)))) + (((_785.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1085 = (((_1014 - _1072) + (cbMtdParam._m0[21u].x * _1072)) * _834) + _1072;
    float _1086 = (((_1015 - _1073) + (cbMtdParam._m0[21u].x * _1073)) * _834) + _1073;
    float _1087 = (_834 * (sqrt(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) - _771)) + _771;
    float _1098 = (((_1056 - _1085) + (_1085 * cbMtdParam._m0[22u].z)) * _884) + _1085;
    float _1099 = (((_1057 - _1086) + (_1086 * cbMtdParam._m0[22u].z)) * _884) + _1086;
    float _1100 = ((sqrt(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) - _1087) * _884) + _1087;
    float _1102 = cbMtdParam._m0[22u].x + _785.w;
    float _1105 = fma(_1100, _269 * NORMAL.x, fma(_1099, _276 * TANGENT.x, (_262 * _254) * _1098));
    float _1108 = fma(_1100, _269 * NORMAL.y, fma(_1099, _276 * TANGENT.y, (_262 * _255) * _1098));
    float _1111 = fma(_1100, _269 * NORMAL.z, fma(_1099, _276 * TANGENT.z, (_262 * _256) * _1098));
    float _1115 = inversesqrt(dot(vec3(_1105, _1108, _1111), vec3(_1105, _1108, _1111)));
    float _1116 = _1115 * _1105;
    float _1117 = _1115 * _1108;
    float _1118 = _1115 * _1111;
    float _4216 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1119 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _4227 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _4238 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4249 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4260 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4271 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _1124 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _1138 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1188 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1178);
    float _1189 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1178);
    float _1190 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1178);
    float _1194 = inversesqrt(dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190)));
    float _1195 = _1188 * _1194;
    float _1196 = _1189 * _1194;
    float _1197 = _1190 * _1194;
    vec4 _1202 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1204 = _1202.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1376 = sqrt(((_1188 * _1188) + (_1189 * _1189)) + (_1190 * _1190));
        float _1382 = (cbMatDynParam._m0[5u].x * _1376) + cbMatDynParam._m0[5u].y;
        float _4282 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1387 = (cbMatDynParam._m0[5u].z * _1376) + cbMatDynParam._m0[5u].w;
        float _4293 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) - _1383)) + _1383) < ((_1204 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1215 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1216 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1234 = fma(_1118, cbSceneParam._m0[5u].z, fma(_1117, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1116));
    float _1237 = fma(_1118, cbSceneParam._m0[6u].z, fma(_1117, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1116));
    float _1240 = fma(_1118, cbSceneParam._m0[7u].z, fma(_1117, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1116));
    uint _1253 = _301 + 9u;
    uint _1254 = _1253 + uint(cbMatDynParam._m0[0u].w);
    float _1260 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * cbInstanceData._m0[_1254].x;
    float _1261 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * cbInstanceData._m0[_1254].y;
    float _1262 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * cbInstanceData._m0[_1254].z;
    float _4304 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
    float _1263 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _4315 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
    float _1264 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _4326 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
    float _1265 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _1266 = 1.0 - _1124;
    float _1267 = _1263 * _1266;
    float _1268 = _1264 * _1266;
    float _1269 = _1265 * _1266;
    float _1274 = (_1263 + (-0.039999999105930328369140625)) * _1124;
    float _1275 = (_1264 + (-0.039999999105930328369140625)) * _1124;
    float _1276 = (_1265 + (-0.039999999105930328369140625)) * _1124;
    float _1277 = _1274 + 0.039999999105930328369140625;
    float _1279 = _1275 + 0.039999999105930328369140625;
    float _1280 = _1276 + 0.039999999105930328369140625;
    vec4 _1289 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1215, cbSceneParam._m0[86u].y * _1216));
    float _1293 = ((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * TEXCOORD_5.w) * _1289.x;
    float _1294 = dot(vec3(_1116, _1117, _1118), vec3(_1195, _1196, _1197));
    float _1297 = _1294 * 2.0;
    float _1301 = (_1297 * _1116) - _1195;
    float _1302 = (_1297 * _1117) - _1196;
    float _1303 = (_1297 * _1118) - _1197;
    float _1307 = abs(dot(vec3(_1195, _1196, _1197), vec3(_1116, _1117, _1118)));
    float _4337 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
    float _1309 = sqrt(_1119);
    float _1322 = exp2((_1309 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1309 * 3.0));
    float _1328 = (1.0 - _1322) * ((_1309 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1329 = _1322 * _1309;
    float _1357 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1361 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1365 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1694;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1419 = fma(_1365, cbModelParam._m0[26u].z, fma(_1361, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1357));
        float _1423 = fma(_1365, cbModelParam._m0[27u].z, fma(_1361, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1357));
        float _1427 = fma(_1365, cbModelParam._m0[28u].z, fma(_1361, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1357));
        float _1452 = _1357 + _1116;
        float _1453 = _1361 + _1117;
        float _1454 = _1365 + _1118;
        float _1464 = fma(_1454, cbModelParam._m0[26u].z, fma(_1453, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1452)) - _1419;
        float _1465 = fma(_1454, cbModelParam._m0[27u].z, fma(_1453, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1452)) - _1423;
        float _1466 = fma(_1454, cbModelParam._m0[28u].z, fma(_1453, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1452)) - _1427;
        float _1470 = inversesqrt(dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466)));
        float _1483 = ((_1470 * _1464) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1419 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1470 * _1465) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1423 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1470 * _1466) / cbModelParam._m0[34u].z) + ((((((_1427 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        float _1522 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1488.x + (-0.5));
        float _1524 = _1522 * (_1488.y + (-0.5));
        float _1525 = _1522 * (_1488.z + (-0.5));
        float _1532 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1495.x + (-0.5));
        float _1534 = _1532 * (_1495.y + (-0.5));
        float _1535 = _1532 * (_1495.z + (-0.5));
        float _1542 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1502.x + (-0.5));
        float _1544 = _1542 * (_1502.y + (-0.5));
        float _1545 = _1542 * (_1502.z + (-0.5));
        float _1552 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1509.x + (-0.5));
        float _1554 = _1552 * (_1509.y + (-0.5));
        float _1555 = _1552 * (_1509.z + (-0.5));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = _1523 * 0.5;
        float _1560 = _1533 * 0.5;
        float _1561 = _1543 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1576 = (dot(vec3(_1116, _1117, _1118), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1586 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4385 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1588 + 1.0))) + _1593) * _1556;
        float _1603 = _1524 * 0.5;
        float _1604 = _1534 * 0.5;
        float _1605 = _1544 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_1116, _1117, _1118), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4418 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1630 + 1.0))) + _1635) * _1557;
        float _1645 = _1525 * 0.5;
        float _1646 = _1535 * 0.5;
        float _1647 = _1545 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_1116, _1117, _1118), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4451 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1672 + 1.0))) + _1677) * _1558;
        _1694 = _1525;
        _1696 = _1524;
        _1697 = _1523;
        _1698 = _1535;
        _1699 = _1534;
        _1700 = _1533;
        _1701 = _1545;
        _1702 = _1544;
        _1703 = _1543;
        _1704 = _1558;
        _1705 = _1557;
        _1706 = _1556;
        _1707 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1708 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
        _1709 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
    }
    else
    {
        _1694 = _1695;
        _1696 = _1695;
        _1697 = _1695;
        _1698 = _1695;
        _1699 = _1695;
        _1700 = _1695;
        _1701 = _1695;
        _1702 = _1695;
        _1703 = _1695;
        _1704 = _1695;
        _1705 = _1695;
        _1706 = _1695;
        _1707 = 0.0;
        _1708 = 0.0;
        _1709 = 0.0;
    }
    float _2004;
    float _2005;
    float _2006;
    float _2007;
    float _2008;
    float _2009;
    float _2010;
    float _2011;
    float _2012;
    float _2013;
    float _2014;
    float _2015;
    float _2016;
    float _2017;
    float _2018;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1735 = fma(_1365, cbModelParam._m0[30u].z, fma(_1361, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1357));
        float _1739 = fma(_1365, cbModelParam._m0[31u].z, fma(_1361, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1357));
        float _1743 = fma(_1365, cbModelParam._m0[32u].z, fma(_1361, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1357));
        float _1766 = _1357 + _1116;
        float _1767 = _1361 + _1117;
        float _1768 = _1365 + _1118;
        float _1778 = fma(_1768, cbModelParam._m0[30u].z, fma(_1767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1766)) - _1735;
        float _1779 = fma(_1768, cbModelParam._m0[31u].z, fma(_1767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1766)) - _1739;
        float _1780 = fma(_1768, cbModelParam._m0[32u].z, fma(_1767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1766)) - _1743;
        float _1784 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
        float _1797 = ((_1784 * _1778) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1735 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1798 = ((_1784 * _1779) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1739 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1799 = ((_1784 * _1780) / cbModelParam._m0[35u].z) + ((((((_1743 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1801 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1797, _1798, _1799), 0.0);
        vec4 _1808 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1797, _1798, _1799), 0.0);
        vec4 _1815 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1797, _1798, _1799), 0.0);
        vec4 _1822 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1797, _1798, _1799), 0.0);
        float _1834 = exp2((_1801.w + (-0.5)) * 20.0) * 2.0;
        float _1835 = _1834 * (_1801.x + (-0.5));
        float _1836 = _1834 * (_1801.y + (-0.5));
        float _1837 = _1834 * (_1801.z + (-0.5));
        float _1844 = exp2((_1808.w + (-0.5)) * 20.0) * 2.0;
        float _1845 = _1844 * (_1808.x + (-0.5));
        float _1846 = _1844 * (_1808.y + (-0.5));
        float _1847 = _1844 * (_1808.z + (-0.5));
        float _1854 = exp2((_1815.w + (-0.5)) * 20.0) * 2.0;
        float _1855 = _1854 * (_1815.x + (-0.5));
        float _1856 = _1854 * (_1815.y + (-0.5));
        float _1857 = _1854 * (_1815.z + (-0.5));
        float _1864 = exp2((_1822.w + (-0.5)) * 20.0) * 2.0;
        float _1865 = _1864 * (_1822.x + (-0.5));
        float _1866 = _1864 * (_1822.y + (-0.5));
        float _1867 = _1864 * (_1822.z + (-0.5));
        float _1868 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1869 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1870 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1871 = _1835 * 0.5;
        float _1872 = _1845 * 0.5;
        float _1873 = _1855 * 0.5;
        float _1874 = dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873));
        float _1879 = (_1874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1874);
        float _1887 = (dot(vec3(_1116, _1117, _1118), vec3(_1879 * _1871, _1879 * _1872, _1879 * _1873)) + 1.0) * 0.5;
        float _4492 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1896 = sqrt(((_1872 * _1872) + (_1871 * _1871)) + (_1873 * _1873)) / (_1868 + 9.9999997473787516355514526367188e-06);
        float _4503 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1898 = _1897 * 2.0;
        float _1902 = (1.0 - _1897) / (_1897 + 1.0);
        float _4514 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1912 = ((((1.0 - _1903) * (_1898 + 2.0)) * exp2(log2(isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_1898 + 1.0))) + _1903) * _1868;
        float _1913 = _1836 * 0.5;
        float _1914 = _1846 * 0.5;
        float _1915 = _1856 * 0.5;
        float _1916 = dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915));
        float _1921 = (_1916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1916);
        float _1929 = (dot(vec3(_1116, _1117, _1118), vec3(_1921 * _1913, _1921 * _1914, _1921 * _1915)) + 1.0) * 0.5;
        float _4525 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1938 = sqrt(((_1914 * _1914) + (_1913 * _1913)) + (_1915 * _1915)) / (_1869 + 9.9999997473787516355514526367188e-06);
        float _4536 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1939 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1940 = _1939 * 2.0;
        float _1944 = (1.0 - _1939) / (_1939 + 1.0);
        float _4547 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1954 = ((((1.0 - _1945) * (_1940 + 2.0)) * exp2(log2(isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_1940 + 1.0))) + _1945) * _1869;
        float _1955 = _1837 * 0.5;
        float _1956 = _1847 * 0.5;
        float _1957 = _1857 * 0.5;
        float _1958 = dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957));
        float _1963 = (_1958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1958);
        float _1971 = (dot(vec3(_1116, _1117, _1118), vec3(_1963 * _1955, _1963 * _1956, _1963 * _1957)) + 1.0) * 0.5;
        float _4558 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1980 = sqrt(((_1956 * _1956) + (_1955 * _1955)) + (_1957 * _1957)) / (_1870 + 9.9999997473787516355514526367188e-06);
        float _4569 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1981 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1982 = _1981 * 2.0;
        float _1986 = (1.0 - _1981) / (_1981 + 1.0);
        float _4580 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1996 = ((((1.0 - _1987) * (_1982 + 2.0)) * exp2(log2(isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_1982 + 1.0))) + _1987) * _1870;
        _2004 = _1837;
        _2005 = _1836;
        _2006 = _1835;
        _2007 = _1847;
        _2008 = _1846;
        _2009 = _1845;
        _2010 = _1857;
        _2011 = _1856;
        _2012 = _1855;
        _2013 = _1870;
        _2014 = _1869;
        _2015 = _1868;
        _2016 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)));
        _2017 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)));
        _2018 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0)));
    }
    else
    {
        _2004 = _1695;
        _2005 = _1695;
        _2006 = _1695;
        _2007 = _1695;
        _2008 = _1695;
        _2009 = _1695;
        _2010 = _1695;
        _2011 = _1695;
        _2012 = _1695;
        _2013 = _1695;
        _2014 = _1695;
        _2015 = _1695;
        _2016 = 0.0;
        _2017 = 0.0;
        _2018 = 0.0;
    }
    float _2028 = (cbModelParam._m0[1u].x * (_2016 - _1707)) + _1707;
    float _2029 = (cbModelParam._m0[1u].x * (_2017 - _1708)) + _1708;
    float _2030 = (cbModelParam._m0[1u].x * (_2018 - _1709)) + _1709;
    float _2051 = fma(_2030, cbSceneParam._m0[89u].z, fma(_2029, cbSceneParam._m0[89u].y, _2028 * cbSceneParam._m0[89u].x));
    float _2054 = fma(_2030, cbSceneParam._m0[90u].z, fma(_2029, cbSceneParam._m0[90u].y, _2028 * cbSceneParam._m0[90u].x));
    float _2057 = fma(_2030, cbSceneParam._m0[91u].z, fma(_2029, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2028));
    float _2072 = _1301 * 0.5;
    float _2073 = _1302 * 0.5;
    float _2074 = _1303 * 0.5;
    float _2075 = dot(vec4(_2072, _2073, _2074, 1.0), vec4(_2006, _2009, _2012, _2015));
    float _2078 = dot(vec4(_2072, _2073, _2074, 1.0), vec4(_2005, _2008, _2011, _2014));
    float _2081 = dot(vec4(_2072, _2073, _2074, 1.0), vec4(_2004, _2007, _2010, _2013));
    float _2115;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2088 = dot(vec4(_2072, _2073, _2074, 1.0), vec4(_1694, _1698, _1701, _1704));
        float _2092 = dot(vec4(_2072, _2073, _2074, 1.0), vec4(_1696, _1699, _1702, _1705));
        float _2096 = dot(vec4(_2072, _2073, _2074, 1.0), vec4(_1697, _1700, _1703, _1706));
        float _2103 = dot(vec4(cbModelParam._m0[39u]), vec4(_2072, _2073, _2074, 1.0));
        _2115 = dot(vec3(isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0)), isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0)), isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2103) ? 0.0 : (isnan(0.0) ? _2103 : max(0.0, _2103))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2115 = 1.0;
    }
    float _2126;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2117 = dot(vec4(cbModelParam._m0[40u]), vec4(_2072, _2073, _2074, 1.0));
        _2126 = dot(vec3(isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0)), isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0)), isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2117) ? 0.0 : (isnan(0.0) ? _2117 : max(0.0, _2117))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2126 = 1.0;
    }
    float _2130 = (_2126 * cbModelParam._m0[1u].x) + (_2115 * (1.0 - cbModelParam._m0[1u].x));
    float _2140 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1119);
    float _2141 = isnan(_2140) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2140 : min(cbModelParam._m0[25u].z, _2140));
    float _2221;
    float _2223;
    float _2225;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2188 = fma(_1365, cbModelParam._m0[13u].z, fma(_1361, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1357)) + cbModelParam._m0[13u].w;
        float _2192 = fma(_1365, cbModelParam._m0[14u].z, fma(_1361, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1357)) + cbModelParam._m0[14u].w;
        float _2196 = fma(_1365, cbModelParam._m0[15u].z, fma(_1361, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1357)) + cbModelParam._m0[15u].w;
        float _2199 = fma(_1303, cbModelParam._m0[13u].z, fma(_1302, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1301));
        float _2202 = fma(_1303, cbModelParam._m0[14u].z, fma(_1302, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1301));
        float _2205 = fma(_1303, cbModelParam._m0[15u].z, fma(_1302, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1301));
        float _2233;
        if (_2199 > 0.0)
        {
            _2233 = abs((1.0 - _2188) / _2199);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2199 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2188 + 1.0) / _2199);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2233 = frontier_phi_17_15_ladder;
        }
        float _2436;
        if (_2202 > 0.0)
        {
            _2436 = abs((1.0 - _2192) / _2202);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2202 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2192 + 1.0) / _2202);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2436 = frontier_phi_26_22_ladder;
        }
        float _2690;
        if (_2205 > 0.0)
        {
            _2690 = abs((1.0 - _2196) / _2205);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2205 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2196 + 1.0) / _2205);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2690 = frontier_phi_38_33_ladder;
        }
        float _2692 = isnan(_2436) ? _2233 : (isnan(_2233) ? _2436 : min(_2233, _2436));
        float _2693 = isnan(_2690) ? _2692 : (isnan(_2692) ? _2690 : min(_2692, _2690));
        float _2697 = (_2693 * _2199) + _2188;
        float _2698 = (_2693 * _2202) + _2192;
        float _2699 = (_2693 * _2205) + _2196;
        float _2700 = _2693 * 9.9999997473787516355514526367188e-05;
        float _2702 = (-1.0) - _2700;
        float _2704 = _2700 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2699 > _2704) || ((_2699 < _2702) || ((_2698 > _2704) || ((_2698 < _2702) || ((_2697 < _2702) || (_2697 > _2704))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2699, cbModelParam._m0[9u].z, fma(_2698, cbModelParam._m0[9u].y, _2697 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2699, cbModelParam._m0[10u].z, fma(_2698, cbModelParam._m0[10u].y, _2697 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2699, cbModelParam._m0[11u].z, fma(_2698, cbModelParam._m0[11u].y, _2697 * cbModelParam._m0[11u].x))), _2141);
            frontier_phi_16_38_ladder = _2827.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2827.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2827.x * cbModelParam._m0[1u].y;
        }
        _2221 = frontier_phi_16_38_ladder_2;
        _2223 = frontier_phi_16_38_ladder_1;
        _2225 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2209 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1301, _1302, _1303), _2141);
        _2221 = _2209.x * cbModelParam._m0[1u].y;
        _2223 = _2209.y * cbModelParam._m0[1u].y;
        _2225 = _2209.z * cbModelParam._m0[1u].y;
    }
    float _2229 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1119);
    float _2230 = isnan(_2229) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2229 : min(cbModelParam._m0[25u].w, _2229));
    float _2320;
    float _2322;
    float _2324;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2284 = fma(_1365, cbModelParam._m0[21u].z, fma(_1361, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1357)) + cbModelParam._m0[21u].w;
        float _2288 = fma(_1365, cbModelParam._m0[22u].z, fma(_1361, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1357)) + cbModelParam._m0[22u].w;
        float _2292 = fma(_1365, cbModelParam._m0[23u].z, fma(_1361, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1357)) + cbModelParam._m0[23u].w;
        float _2295 = fma(_1303, cbModelParam._m0[21u].z, fma(_1302, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1301));
        float _2298 = fma(_1303, cbModelParam._m0[22u].z, fma(_1302, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1301));
        float _2301 = fma(_1303, cbModelParam._m0[23u].z, fma(_1302, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1301));
        float _2441;
        if (_2295 > 0.0)
        {
            _2441 = abs((1.0 - _2284) / _2295);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2295 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2284 + 1.0) / _2295);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2441 = frontier_phi_28_24_ladder;
        }
        float _2717;
        if (_2298 > 0.0)
        {
            _2717 = abs((1.0 - _2288) / _2298);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2298 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2288 + 1.0) / _2298);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2717 = frontier_phi_40_35_ladder;
        }
        float _2930;
        if (_2301 > 0.0)
        {
            _2930 = abs((1.0 - _2292) / _2301);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2301 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2292 + 1.0) / _2301);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2930 = frontier_phi_49_46_ladder;
        }
        float _2932 = isnan(_2717) ? _2441 : (isnan(_2441) ? _2717 : min(_2441, _2717));
        float _2933 = isnan(_2930) ? _2932 : (isnan(_2932) ? _2930 : min(_2932, _2930));
        float _2937 = (_2933 * _2295) + _2284;
        float _2938 = (_2933 * _2298) + _2288;
        float _2939 = (_2933 * _2301) + _2292;
        float _2940 = _2933 * 9.9999997473787516355514526367188e-05;
        float _2941 = (-1.0) - _2940;
        float _2943 = _2940 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2939 > _2943) || ((_2939 < _2941) || ((_2938 > _2943) || ((_2938 < _2941) || ((_2937 < _2941) || (_2937 > _2943))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3138 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2939, cbModelParam._m0[17u].z, fma(_2938, cbModelParam._m0[17u].y, _2937 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2939, cbModelParam._m0[18u].z, fma(_2938, cbModelParam._m0[18u].y, _2937 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2939, cbModelParam._m0[19u].z, fma(_2938, cbModelParam._m0[19u].y, _2937 * cbModelParam._m0[19u].x))), _2230);
            frontier_phi_25_49_ladder = _3138.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3138.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3138.x * cbModelParam._m0[1u].z;
        }
        _2320 = frontier_phi_25_49_ladder_2;
        _2322 = frontier_phi_25_49_ladder_1;
        _2324 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2304 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1301, _1302, _1303), _2230);
        _2320 = _2304.x * cbModelParam._m0[1u].z;
        _2322 = _2304.y * cbModelParam._m0[1u].z;
        _2324 = _2304.z * cbModelParam._m0[1u].z;
    }
    float _2337 = (((_1328 * _1277) + _1329) * _1293) * ((cbModelParam._m0[1u].w * (_2320 - _2221)) + _2221);
    float _2339 = (((_1328 * _1279) + _1329) * _1293) * ((cbModelParam._m0[1u].w * (_2322 - _2223)) + _2223);
    float _2341 = (((_1328 * _1280) + _1329) * _1293) * ((cbModelParam._m0[1u].w * (_2324 - _2225)) + _2225);
    float _2344 = fma(_2341, cbSceneParam._m0[89u].z, fma(_2339, cbSceneParam._m0[89u].y, _2337 * cbSceneParam._m0[89u].x));
    float _2347 = fma(_2341, cbSceneParam._m0[90u].z, fma(_2339, cbSceneParam._m0[90u].y, _2337 * cbSceneParam._m0[90u].x));
    float _2350 = fma(_2341, cbSceneParam._m0[91u].z, fma(_2339, cbSceneParam._m0[91u].y, _2337 * cbSceneParam._m0[91u].x));
    uvec4 _2360 = floatBitsToUint(cbInstanceData._m0[_301 + 5u]);
    uint _2362 = _2360.x * 14u;
    uint _2363 = _2362 + 13u;
    float _2370 = _1293 + (-1.0);
    float _2375 = (cbLight._m0[_2363].x * _2370) + 1.0;
    float _2376 = (cbLight._m0[_2363].y * _2370) + 1.0;
    float _2377 = (cbLight._m0[_2363].z * _2370) + 1.0;
    float _2378 = (cbLight._m0[_2363].w * _2370) + 1.0;
    uint _2379 = _2362 + 5u;
    float _2385 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
    uint _2389 = _2362 + 4u;
    float _2395 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
    uint _2399 = _2362 | 1u;
    float _2410 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_1116, _1117, _1118));
    float _2413 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_1116, _1117, _1118));
    float _4716 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _4727 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2418 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * 0.3183098733425140380859375;
    float _2420 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * 0.3183098733425140380859375;
    float _2427 = ((cbLight._m0[_2379].x * _2385) * _2420) + ((cbLight._m0[_2389].x * _2395) * _2418);
    float _2428 = ((_2385 * cbLight._m0[_2379].y) * _2420) + ((_2395 * cbLight._m0[_2389].y) * _2418);
    float _2429 = ((_2385 * cbLight._m0[_2379].z) * _2420) + ((_2395 * cbLight._m0[_2389].z) * _2418);
    uvec4 _2433 = floatBitsToUint(cbLight._m0[_2362 + 12u]);
    bool _2435 = _2433.x == 0u;
    float _2446;
    float _2448;
    float _2450;
    if (_2435)
    {
        _2446 = _2427;
        _2448 = _2428;
        _2450 = _2429;
    }
    else
    {
        uint _2454 = _2362 + 6u;
        float _2470 = (dot(vec3(cbLight._m0[_2362 + 2u].xyz), vec3(_1116, _1117, _1118)) * 0.5) + 0.5;
        float _2471 = _2470 * _2470;
        float _4738 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2472 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2473 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2446 = (((cbLight._m0[_2454].x * 0.3183098733425140380859375) * _2472) * _2473) + _2427;
        _2448 = (((cbLight._m0[_2454].y * 0.3183098733425140380859375) * _2472) * _2473) + _2428;
        _2450 = (((cbLight._m0[_2454].z * 0.3183098733425140380859375) * _2472) * _2473) + _2429;
    }
    bool _2453 = _2433.y == 0u;
    float _2491;
    float _2493;
    float _2495;
    if (_2453)
    {
        _2491 = _2446;
        _2493 = _2448;
        _2495 = _2450;
    }
    else
    {
        uint _2661 = _2362 + 7u;
        float _2677 = (dot(vec3(cbLight._m0[_2362 + 3u].xyz), vec3(_1116, _1117, _1118)) * 0.5) + 0.5;
        float _2678 = _2677 * _2677;
        float _4754 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2679 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2680 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
        _2491 = (((cbLight._m0[_2661].x * 0.3183098733425140380859375) * _2679) * _2680) + _2446;
        _2493 = (((cbLight._m0[_2661].y * 0.3183098733425140380859375) * _2679) * _2680) + _2448;
        _2495 = (((cbLight._m0[_2661].z * 0.3183098733425140380859375) * _2679) * _2680) + _2450;
    }
    uint _2498 = _2362 + 8u;
    float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _1119) * 0.949999988079071044921875);
    float _2512 = _2511 * _2511;
    float _2513 = cbLight._m0[_2362].x + _1195;
    float _2514 = cbLight._m0[_2362].y + _1196;
    float _2515 = cbLight._m0[_2362].z + _1197;
    float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
    float _2520 = _2519 * _2513;
    float _2521 = _2519 * _2514;
    float _2522 = _2519 * _2515;
    float _2523 = dot(vec3(_1116, _1117, _1118), vec3(cbLight._m0[_2362].xyz));
    float _4770 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
    float _4781 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
    float _2527 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
    float _2528 = dot(vec3(_1116, _1117, _1118), vec3(_2520, _2521, _2522));
    float _4792 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
    float _2532 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2520, _2521, _2522));
    float _4803 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2536 = _2512 * _2512;
    float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
    float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) * 5.0);
    float _2549 = 0.959999978542327880859375 - _1274;
    float _2551 = 0.959999978542327880859375 - _1275;
    float _2552 = 0.959999978542327880859375 - _1276;
    float _2559 = 1.0 - _2512;
    float _2570 = (0.5 / (((_2527 * ((_2526 * _2559) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2559) + _2512) * _2526))) * _2526;
    float _4814 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2572 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
    uint _2583 = _2362 + 9u;
    float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2399].w)) * _1119) * 0.949999988079071044921875);
    float _2595 = _2594 * _2594;
    float _2596 = cbLight._m0[_2399].x + _1195;
    float _2597 = cbLight._m0[_2399].y + _1196;
    float _2598 = cbLight._m0[_2399].z + _1197;
    float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
    float _2603 = _2602 * _2596;
    float _2604 = _2602 * _2597;
    float _2605 = _2602 * _2598;
    float _2606 = dot(vec3(_1116, _1117, _1118), vec3(cbLight._m0[_2399].xyz));
    float _4825 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
    float _2610 = dot(vec3(_1116, _1117, _1118), vec3(_2603, _2604, _2605));
    float _4836 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
    float _2614 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_2603, _2604, _2605));
    float _4847 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2618 = _2595 * _2595;
    float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
    float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) * 5.0);
    float _2636 = 1.0 - _2595;
    float _2646 = (0.5 / (((_2527 * ((_2609 * _2636) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2636) + _2595) * _2609))) * _2609;
    float _4858 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2648 = (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
    float _2658 = (((((_2629 * _2549) + _1277) * cbLight._m0[_2583].x) * _2648) * _2385) + (((((_2548 * _2549) + _1277) * cbLight._m0[_2498].x) * _2572) * _2395);
    float _2659 = (((((_2629 * _2551) + _1279) * cbLight._m0[_2583].y) * _2648) * _2385) + (((((_2548 * _2551) + _1279) * cbLight._m0[_2498].y) * _2572) * _2395);
    float _2660 = (((((_2629 * _2552) + _1280) * cbLight._m0[_2583].z) * _2648) * _2385) + (((((_2548 * _2552) + _1280) * cbLight._m0[_2498].z) * _2572) * _2395);
    float _2722;
    float _2724;
    float _2726;
    if (_2435)
    {
        _2722 = _2658;
        _2724 = _2659;
        _2726 = _2660;
    }
    else
    {
        uint _2728 = _2362 + 2u;
        uint _2732 = _2362 + 10u;
        float _2746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2728].w)) * _1119) * 0.949999988079071044921875);
        float _2747 = _2746 * _2746;
        float _2748 = cbLight._m0[_2728].x + _1195;
        float _2749 = cbLight._m0[_2728].y + _1196;
        float _2750 = cbLight._m0[_2728].z + _1197;
        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
        float _2755 = _2754 * _2748;
        float _2756 = _2754 * _2749;
        float _2757 = _2754 * _2750;
        float _2758 = dot(vec3(_1116, _1117, _1118), vec3(cbLight._m0[_2728].xyz));
        float _4869 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2762 = dot(vec3(_1116, _1117, _1118), vec3(_2755, _2756, _2757));
        float _4880 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
        float _2766 = dot(vec3(cbLight._m0[_2728].xyz), vec3(_2755, _2756, _2757));
        float _4891 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2770 = _2747 * _2747;
        float _2774 = ((_2765 * _2765) * (_2770 + (-1.0))) + 1.0;
        float _2781 = exp2(log2(1.0 - (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) * 5.0);
        float _2788 = 1.0 - _2747;
        float _2798 = (0.5 / (((_2527 * ((_2761 * _2788) + _2747)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2788) + _2747) * _2761))) * _2761;
        float _4902 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2800 = (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2770 / ((_2774 * _2774) * 3.141590118408203125));
        float _2801 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2722 = (((((_2781 * _2549) + _1277) * cbLight._m0[_2732].x) * _2800) * _2801) + _2658;
        _2724 = (((((_2781 * _2551) + _1279) * cbLight._m0[_2732].y) * _2800) * _2801) + _2659;
        _2726 = (((((_2781 * _2552) + _1280) * cbLight._m0[_2732].z) * _2800) * _2801) + _2660;
    }
    float _2836;
    float _2838;
    float _2840;
    if (_2453)
    {
        _2836 = _2722;
        _2838 = _2724;
        _2840 = _2726;
    }
    else
    {
        uint _2847 = _2362 + 3u;
        uint _2851 = _2362 + 11u;
        float _2865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2847].w)) * _1119) * 0.949999988079071044921875);
        float _2866 = _2865 * _2865;
        float _2867 = cbLight._m0[_2847].x + _1195;
        float _2868 = cbLight._m0[_2847].y + _1196;
        float _2869 = cbLight._m0[_2847].z + _1197;
        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
        float _2874 = _2873 * _2867;
        float _2875 = _2873 * _2868;
        float _2876 = _2873 * _2869;
        float _2877 = dot(vec3(_1116, _1117, _1118), vec3(cbLight._m0[_2847].xyz));
        float _4918 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2880 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
        float _2881 = dot(vec3(_1116, _1117, _1118), vec3(_2874, _2875, _2876));
        float _4929 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2884 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
        float _2885 = dot(vec3(cbLight._m0[_2847].xyz), vec3(_2874, _2875, _2876));
        float _4940 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2889 = _2866 * _2866;
        float _2893 = ((_2884 * _2884) * (_2889 + (-1.0))) + 1.0;
        float _2900 = exp2(log2(1.0 - (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) * 5.0);
        float _2907 = 1.0 - _2866;
        float _2917 = (0.5 / (((_2527 * ((_2880 * _2907) + _2866)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2907) + _2866) * _2880))) * _2880;
        float _4951 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2919 = (isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_2889 / ((_2893 * _2893) * 3.141590118408203125));
        float _2920 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
        _2836 = (((((_2900 * _2549) + _1277) * cbLight._m0[_2851].x) * _2919) * _2920) + _2722;
        _2838 = (((((_2900 * _2551) + _1279) * cbLight._m0[_2851].y) * _2919) * _2920) + _2724;
        _2840 = (((((_2900 * _2552) + _1280) * cbLight._m0[_2851].z) * _2919) * _2920) + _2726;
    }
    float _3055;
    float _3057;
    float _3059;
    float _3061;
    float _3063;
    float _3065;
    if (_2360.y == 0u)
    {
        float _2995 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2996 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2995;
        float _2997 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2995;
        float _2998 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2995;
        uvec4 _3010 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3011 = _3010.x;
        uint _3022 = uint((float(_3010.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1216) / _3011))) + floor(float(uint(cbSceneParam._m0[85u].x * _1215) / _3011)));
        float _3032 = (log2(_2998 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3033 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        uint _3036 = uint(isnan(14.0) ? _3033 : (isnan(_3033) ? 14.0 : min(_3033, 14.0)));
        uvec4 _3041 = texelFetch(g_lightClusterGridBuffer, int(((_3036 << 2u) + (_3022 << 6u)) >> 2u));
        uint _3042 = _3041.x;
        uint _3043 = _3010.z;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        if (((((1u << ((_3043 >> 4u) & 15u)) + 4294967295u) & _3042) == 0u) || ((_3043 & 240u) == 0u))
        {
            _3143 = 0.0;
            _3145 = 0.0;
            _3147 = 0.0;
            _3149 = 0.0;
            _3151 = 0.0;
            _3153 = 0.0;
        }
        else
        {
            float _3144;
            float _3146;
            float _3148;
            float _3150;
            float _3152;
            float _3154;
            float _3296 = 0.0;
            float _3297 = 0.0;
            float _3298 = 0.0;
            float _3299 = 0.0;
            float _3300 = 0.0;
            float _3301 = 0.0;
            uint _3302 = 0u;
            uint _3311;
            bool _3312;
            for (;;)
            {
                _3311 = texelFetch(g_lightClassification, int((((_3036 << 5u) + (_3022 << 9u)) + (_3302 << 2u)) >> 2u)).x;
                _3312 = _3311 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3312)
                {
                    frontier_phi_66_pred = _3296;
                    frontier_phi_66_pred_1 = _3301;
                    frontier_phi_66_pred_2 = _3300;
                    frontier_phi_66_pred_3 = _3299;
                    frontier_phi_66_pred_4 = _3298;
                    frontier_phi_66_pred_5 = _3297;
                }
                else
                {
                    float _3441;
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    float _3446;
                    uint _3447;
                    _3441 = _3296;
                    _3442 = _3297;
                    _3443 = _3298;
                    _3444 = _3299;
                    _3445 = _3300;
                    _3446 = _3301;
                    _3447 = _3311;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    for (;;)
                    {
                        uint _3451 = uint(findLSB(_3447)) + (_3302 << 5u);
                        uint _3448 = (_3447 + 4294967295u) & _3447;
                        uint _3453 = _3451 * 48u;
                        vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3453)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 3u)).x));
                        uint _3473 = (_3451 * 48u) + 4u;
                        vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3473)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 3u)).x));
                        uint _3492 = (_3451 * 48u) + 8u;
                        vec3 _3503 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3492)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3492 + 2u)).x));
                        float _3507 = _3467.x - _2996;
                        float _3508 = _3467.y - _2997;
                        float _3509 = _3467.z - _2998;
                        float _3510 = dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509));
                        float _3513 = inversesqrt(_3510);
                        float _3514 = _3513 * _3507;
                        float _3515 = _3513 * _3508;
                        float _3516 = _3513 * _3509;
                        float _3517 = dot(vec3(_1234, _1237, _1240), vec3(_3514, _3515, _3516));
                        float _3522 = 1.0 - (_3510 * _3467.w);
                        float _4977 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3523 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                        float _3524 = sqrt(_3510) * _3486.w;
                        float _3527 = 1.39999997615814208984375 / (_3524 + 1.39999997615814208984375);
                        float _3528 = _3527 * _3527;
                        float _3531 = ((1.0 - _3528) * _3517) + _3528;
                        float _3534 = _3524 * _3524;
                        float _3538 = ((isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0))) * _3523) / ((_3534 * 0.699999988079071044921875) + 1.0);
                        float _3542 = (-0.0) - _2996;
                        float _3543 = (-0.0) - _2997;
                        float _3544 = (-0.0) - _2998;
                        float _3548 = inversesqrt(dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544)));
                        float _3549 = _3548 * _3542;
                        float _3550 = _3548 * _3543;
                        float _3551 = _3548 * _3544;
                        float _3559 = exp2(log2(1.0 / ((_3534 * 3.5) + 5.0)) * 0.25);
                        float _3560 = 1.0 - _1309;
                        float _3567 = sqrt(1.0 - ((1.0 - (_3560 * _3560)) * (1.0 - (_3559 * _3559))));
                        float _3568 = _3567 * _3567;
                        float _3569 = _3568 * _3568;
                        float _3570 = _3549 + _3514;
                        float _3571 = _3550 + _3515;
                        float _3572 = _3551 + _3516;
                        float _3576 = inversesqrt(dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572)));
                        float _3580 = dot(vec3(_1234, _1237, _1240), vec3(_3549, _3550, _3551));
                        float _4993 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3583 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                        float _3584 = dot(vec3(_1234, _1237, _1240), vec3(_3576 * _3570, _3576 * _3571, _3576 * _3572));
                        float _5004 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3587 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                        float _3591 = ((_3587 * _3587) * (_3569 + (-1.0))) + 1.0;
                        float _3592 = _3527 * _3568;
                        float _3593 = _3592 * _3592;
                        float _3596 = ((1.0 - _3593) * _3517) + _3593;
                        float _5015 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3597 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                        float _3598 = 1.0 - _3568;
                        float _3608 = (0.5 / (((_3597 * ((_3583 * _3598) + _3568)) + 9.9999999392252902907785028219223e-09) + (((_3597 * _3598) + _3568) * _3583))) * _3597;
                        float _5026 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                        float _3619 = (((_3569 * 3.1415927410125732421875) * (isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0)))) / ((_3591 * _3591) * ((_3534 * 2.1991131305694580078125) + 3.141590118408203125))) * _3523;
                        _3371 = (_3538 * _3486.x) + _3444;
                        _3372 = (_3538 * _3486.y) + _3445;
                        _3373 = (_3538 * _3486.z) + _3446;
                        _3368 = (_3619 * _3503.x) + _3441;
                        _3369 = (_3619 * _3503.y) + _3442;
                        _3370 = (_3619 * _3503.z) + _3443;
                        if (_3448 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3441 = _3368;
                            _3442 = _3369;
                            _3443 = _3370;
                            _3444 = _3371;
                            _3445 = _3372;
                            _3446 = _3373;
                            _3447 = _3448;
                        }
                    }
                    frontier_phi_66_pred = _3368;
                    frontier_phi_66_pred_1 = _3373;
                    frontier_phi_66_pred_2 = _3372;
                    frontier_phi_66_pred_3 = _3371;
                    frontier_phi_66_pred_4 = _3370;
                    frontier_phi_66_pred_5 = _3369;
                }
                _3144 = frontier_phi_66_pred;
                _3154 = frontier_phi_66_pred_1;
                _3152 = frontier_phi_66_pred_2;
                _3150 = frontier_phi_66_pred_3;
                _3148 = frontier_phi_66_pred_4;
                _3146 = frontier_phi_66_pred_5;
                uint _3303 = _3302 + 1u;
                if (_3303 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3296 = _3144;
                    _3297 = _3146;
                    _3298 = _3148;
                    _3299 = _3150;
                    _3300 = _3152;
                    _3301 = _3154;
                    _3302 = _3303;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3143 = _3144;
            _3145 = _3146;
            _3147 = _3148;
            _3149 = _3150;
            _3151 = _3152;
            _3153 = _3154;
        }
        uvec4 _3157 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3158 = _3157.z;
        uint _3160 = (_3158 >> 8u) & 15u;
        float _3264;
        float _3266;
        float _3268;
        float _3270;
        float _3272;
        float _3274;
        if (((4294967295u << _3160) & _3042) == 0u)
        {
            _3264 = _3143;
            _3266 = _3145;
            _3268 = _3147;
            _3270 = _3149;
            _3272 = _3151;
            _3274 = _3153;
        }
        else
        {
            float _3289 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
            float _3290 = _3289 * _2996;
            float _3291 = _3289 * _2997;
            float _3292 = _3289 * _2998;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3160 < ((_3158 >> 12u) & 15u))
            {
                float _3265;
                float _3267;
                float _3269;
                float _3271;
                float _3273;
                float _3275;
                float _3424 = _3143;
                float _3425 = _3145;
                float _3426 = _3147;
                float _3427 = _3149;
                float _3428 = _3151;
                float _3429 = _3153;
                uint _3430 = _3160;
                uint _3439;
                bool _3440;
                for (;;)
                {
                    _3439 = texelFetch(g_lightClassification, int((((_3036 << 5u) + (_3022 << 9u)) + (_3430 << 2u)) >> 2u)).x;
                    _3440 = _3439 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3440)
                    {
                        frontier_phi_77_pred = _3429;
                        frontier_phi_77_pred_1 = _3428;
                        frontier_phi_77_pred_2 = _3427;
                        frontier_phi_77_pred_3 = _3426;
                        frontier_phi_77_pred_4 = _3425;
                        frontier_phi_77_pred_5 = _3424;
                    }
                    else
                    {
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3926;
                        float _3927;
                        float _3928;
                        float _3929;
                        float _3930;
                        float _3931;
                        float _3646 = _3424;
                        float _3647 = _3425;
                        float _3648 = _3426;
                        float _3649 = _3427;
                        float _3650 = _3428;
                        float _3651 = _3429;
                        uint _3652 = _3439;
                        uint _3653;
                        vec4 _3678;
                        float _3679;
                        vec4 _3694;
                        vec3 _3706;
                        vec4 _3721;
                        vec4 _3736;
                        float _3782;
                        bool _3783;
                        for (;;)
                        {
                            uint _3663 = ((_3430 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3652));
                            _3653 = (_3652 + 4294967295u) & _3652;
                            uint _3665 = _3663 * 40u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            _3679 = _3678.w;
                            uint _3681 = (_3663 * 40u) + 4u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3696 = (_3663 * 40u) + 8u;
                            _3706 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x));
                            uint _3708 = (_3663 * 40u) + 16u;
                            _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            uint _3723 = (_3663 * 40u) + 20u;
                            _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            uint _3738 = (_3663 * 40u) + 24u;
                            vec4 _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            uint _3757 = (_3663 * 40u) + 28u;
                            vec4 _3770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 3u)).x));
                            _3782 = fma(_2998, _3770.z, fma(_2997, _3770.y, _3770.x * _2996)) + _3770.w;
                            _3783 = !((fma(_2998, _3751.z, fma(_2997, _3751.y, _3751.x * _2996)) + _3751.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3783)
                            {
                                float _3810 = _3678.x - _2996;
                                float _3811 = _3678.y - _2997;
                                float _3812 = _3678.z - _2998;
                                float _3813 = dot(vec3(_3810, _3811, _3812), vec3(_3810, _3811, _3812));
                                float _3816 = inversesqrt(_3813);
                                float _3817 = _3816 * _3810;
                                float _3818 = _3816 * _3811;
                                float _3819 = _3816 * _3812;
                                float _3823 = 1.0 - (_3813 / (_3679 * _3679));
                                float _5037 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3824 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                                float _3828 = sqrt(_3813) * _3694.w;
                                float _3830 = 1.39999997615814208984375 / (_3828 + 1.39999997615814208984375);
                                float _3831 = _3830 * _3830;
                                float _3834 = ((1.0 - _3831) * dot(vec3(_3817, _3818, _3819), vec3(_1234, _1237, _1240))) + _3831;
                                float _3837 = _3828 * _3828;
                                float _3841 = (fma(_2998, _3721.z, fma(_2997, _3721.y, _3721.x * _2996)) + _3721.w) / _3782;
                                float _3842 = (fma(_2998, _3736.z, fma(_2997, _3736.y, _3736.x * _2996)) + _3736.w) / _3782;
                                float _3846 = 1.0 - dot(vec2(_3841, _3842), vec2(_3841, _3842));
                                float _5053 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3847 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
                                float _3848 = _3847 * (((isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0))) * _3824) / ((_3837 * 0.699999988079071044921875) + 1.0));
                                float _3860 = exp2(log2(1.0 / ((_3837 * 3.5) + 5.0)) * 0.25);
                                float _3861 = 1.0 - _1309;
                                float _3868 = sqrt(1.0 - ((1.0 - (_3861 * _3861)) * (1.0 - (_3860 * _3860))));
                                float _3869 = _3868 * _3868;
                                float _3870 = _3869 * _3869;
                                float _3871 = _3817 - _3290;
                                float _3872 = _3818 - _3291;
                                float _3873 = _3819 - _3292;
                                float _3877 = inversesqrt(dot(vec3(_3871, _3872, _3873), vec3(_3871, _3872, _3873)));
                                float _3881 = dot(vec3(_1234, _1237, _1240), vec3((-0.0) - _3290, (-0.0) - _3291, (-0.0) - _3292));
                                float _5064 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3884 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
                                float _3885 = dot(vec3(_1234, _1237, _1240), vec3(_3877 * _3871, _3877 * _3872, _3877 * _3873));
                                float _5075 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3888 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
                                float _3892 = ((_3888 * _3888) * (_3870 + (-1.0))) + 1.0;
                                float _3893 = _3830 * _3869;
                                float _3894 = _3893 * _3893;
                                float _3900 = ((1.0 - _3894) * dot(vec3(_1234, _1237, _1240), vec3(_3817, _3818, _3819))) + _3894;
                                float _5086 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3901 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
                                float _3902 = 1.0 - _3869;
                                float _3912 = (0.5 / (((_3901 * ((_3884 * _3902) + _3869)) + 9.9999999392252902907785028219223e-09) + (((_3901 * _3902) + _3869) * _3884))) * _3901;
                                float _5097 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3922 = (_3847 * _3824) * (((_3870 * 3.1415927410125732421875) * (isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0)))) / ((_3892 * _3892) * ((_3837 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3848 * _3694.y;
                                frontier_phi_83_pred_1 = _3848 * _3694.x;
                                frontier_phi_83_pred_2 = _3922 * _3706.z;
                                frontier_phi_83_pred_3 = _3922 * _3706.y;
                                frontier_phi_83_pred_4 = _3922 * _3706.x;
                                frontier_phi_83_pred_5 = _3848 * _3694.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3930 = frontier_phi_83_pred;
                            _3929 = frontier_phi_83_pred_1;
                            _3928 = frontier_phi_83_pred_2;
                            _3927 = frontier_phi_83_pred_3;
                            _3926 = frontier_phi_83_pred_4;
                            _3931 = frontier_phi_83_pred_5;
                            _3636 = _3929 + _3649;
                            _3637 = _3930 + _3650;
                            _3638 = _3931 + _3651;
                            _3633 = _3926 + _3646;
                            _3634 = _3927 + _3647;
                            _3635 = _3928 + _3648;
                            if (_3653 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3646 = _3633;
                                _3647 = _3634;
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3653;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3638;
                        frontier_phi_77_pred_1 = _3637;
                        frontier_phi_77_pred_2 = _3636;
                        frontier_phi_77_pred_3 = _3635;
                        frontier_phi_77_pred_4 = _3634;
                        frontier_phi_77_pred_5 = _3633;
                    }
                    _3275 = frontier_phi_77_pred;
                    _3273 = frontier_phi_77_pred_1;
                    _3271 = frontier_phi_77_pred_2;
                    _3269 = frontier_phi_77_pred_3;
                    _3267 = frontier_phi_77_pred_4;
                    _3265 = frontier_phi_77_pred_5;
                    uint _3431 = _3430 + 1u;
                    if (_3431 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3424 = _3265;
                        _3425 = _3267;
                        _3426 = _3269;
                        _3427 = _3271;
                        _3428 = _3273;
                        _3429 = _3275;
                        _3430 = _3431;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3269;
                frontier_phi_58_59_ladder_1 = _3275;
                frontier_phi_58_59_ladder_2 = _3273;
                frontier_phi_58_59_ladder_3 = _3271;
                frontier_phi_58_59_ladder_4 = _3267;
                frontier_phi_58_59_ladder_5 = _3265;
            }
            else
            {
                frontier_phi_58_59_ladder = _3147;
                frontier_phi_58_59_ladder_1 = _3153;
                frontier_phi_58_59_ladder_2 = _3151;
                frontier_phi_58_59_ladder_3 = _3149;
                frontier_phi_58_59_ladder_4 = _3145;
                frontier_phi_58_59_ladder_5 = _3143;
            }
            _3264 = frontier_phi_58_59_ladder_5;
            _3266 = frontier_phi_58_59_ladder_4;
            _3268 = frontier_phi_58_59_ladder;
            _3270 = frontier_phi_58_59_ladder_3;
            _3272 = frontier_phi_58_59_ladder_2;
            _3274 = frontier_phi_58_59_ladder_1;
        }
        float _3279 = isnan(1.0) ? _1293 : (isnan(_1293) ? 1.0 : min(_1293, 1.0));
        _3055 = (_3279 * _3270) + _2491;
        _3057 = (_3279 * _3272) + _2493;
        _3059 = (_3279 * _3274) + _2495;
        _3061 = ((_3264 * _1277) * _3279) + _2836;
        _3063 = ((_3266 * _1279) * _3279) + _2838;
        _3065 = ((_3268 * _1280) * _3279) + _2840;
    }
    else
    {
        _3055 = _2491;
        _3057 = _2493;
        _3059 = _2495;
        _3061 = _2836;
        _3063 = _2838;
        _3065 = _2840;
    }
    float _5113 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
    float _5124 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
    float _5135 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
    float _3082 = ((isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0))) * (_3055 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1293))) + ((_3061 + ((isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0))) * _2130)) * cbPerFrame._m0[3u].x);
    float _3083 = ((isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0))) * (_3057 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1293))) + ((_3063 + ((isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0))) * _2130)) * cbPerFrame._m0[3u].x);
    float _3084 = ((isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0))) * (_3059 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1293))) + ((_3065 + ((isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0))) * _2130)) * cbPerFrame._m0[3u].x);
    uint _3085 = _301 + 6u;
    float _3093 = _1215 / cbSceneParam._m0[86u].x;
    float _3094 = _1216 / cbSceneParam._m0[86u].y;
    vec4 _3108 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3093, _3094, (log2((isnan(cbSceneParam._m0[77u].w) ? _1138 : (isnan(_1138) ? cbSceneParam._m0[77u].w : min(_1138, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3110 = _3108.x;
    float _3111 = _3108.y;
    float _3112 = _3108.z;
    float _3113 = _3108.w;
    float _3206;
    float _3208;
    float _3210;
    float _3212;
    if (_1138 > cbSceneParam._m0[78u].w)
    {
        float _3168 = isnan(_1138) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1138 : min(cbSceneParam._m0[80u].w, _1138));
        float _3169 = _3168 / _1138;
        float _3180 = _3169 * _1188;
        float _3181 = _1189 * _3169;
        float _3182 = (-0.0) - _3181;
        float _3184 = _3169 * _1190;
        float _3186 = (cbSceneParam._m0[77u].w * _3182) / _3168;
        float _3187 = _3186 + cbSceneParam._m0[79u].w;
        float _3188 = cbSceneParam._m0[79u].w - _3181;
        float _3194 = sqrt(((_3180 * _3180) + (_3181 * _3181)) + (_3184 * _3184));
        float _3197 = (1.0 - (cbSceneParam._m0[77u].w / _3168)) * _3194;
        float _3202 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3204 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3381;
        if (abs((_3182 - _3186) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3381 = ((((_3187 > 0.0) ? exp2(_3202 * _3187) : (2.0 - exp2(_3204 * _3187))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3197;
        }
        else
        {
            float _3325 = 1.0 / cbSceneParam._m0[80u].x;
            float _3326 = isnan(_3188) ? _3187 : (isnan(_3187) ? _3188 : max(_3187, _3188));
            float _3327 = isnan(_3188) ? _3187 : (isnan(_3187) ? _3188 : min(_3187, _3188));
            float _3336 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : min(_3326, 0.0));
            float _3337 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : min(_3327, 0.0));
            _3381 = ((abs(_3194 / _3182) * cbSceneParam._m0[80u].y) * ((((_3336 - _3337) * 2.0) - ((exp2(_3202 * (isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0)))) - exp2(_3202 * (isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0))))) * _3325)) - ((exp2(_3204 * _3336) - exp2(_3204 * _3337)) * _3325))) + (_3197 * cbSceneParam._m0[80u].z);
        }
        vec4 _3383 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3093, _3094, 1.0), 0.0);
        float _3392 = exp2((_3381 * (-1.44269502162933349609375)) * (1.0 - _3383.w));
        float _3393 = log2(_3392);
        float _3409 = log2(_3113);
        _3206 = (exp2(_3409 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3393 * cbSceneParam._m0[78u].x)) * _3383.x) / cbSceneParam._m0[78u].x)) + _3110;
        _3208 = (exp2(_3409 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3393 * cbSceneParam._m0[78u].y)) * _3383.y) / cbSceneParam._m0[78u].y)) + _3111;
        _3210 = (exp2(_3409 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3393 * cbSceneParam._m0[78u].z)) * _3383.z) / cbSceneParam._m0[78u].z)) + _3112;
        _3212 = _3392 * _3113;
    }
    else
    {
        _3206 = _3110;
        _3208 = _3111;
        _3210 = _3112;
        _3212 = _3113;
    }
    bool _3419;
    vec4 _3222;
    vec4 _3244;
    float _3246;
    float _3250;
    float _3251;
    float _3252;
    float _3253;
    bool _3263;
    for (;;)
    {
        _3222 = cbMatDynParam._m0[0u];
        float _3224 = roundEven(_3222.y);
        bool _3225 = _3224 == 3.0;
        float _3226 = log2(_3212);
        float _3233 = exp2(_3226 * cbSceneParam._m0[78u].x) * _3082;
        float _3234 = exp2(_3226 * cbSceneParam._m0[78u].y) * _3083;
        float _3235 = exp2(_3226 * cbSceneParam._m0[78u].z) * _3084;
        float _3242 = _1204 + (-0.5);
        _3244 = cbMtdParam._m0[1u];
        _3246 = _3244.y * _3242;
        float _3249 = (_3224 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3250 = _3249 * (_3225 ? _3233 : (_3233 + (cbSceneParam._m0[72u].w * _3206)));
        _3251 = _3249 * (_3225 ? _3234 : (_3234 + (cbSceneParam._m0[72u].w * _3208)));
        _3252 = _3249 * (_3225 ? _3235 : (_3235 + (cbSceneParam._m0[72u].w * _3210)));
        _3253 = _3242 * 0.999000012874603271484375;
        _3263 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3263)
        {
            if ((cbInstanceData._m0[_301 + 7u].x + _3253) < 0.5)
            {
                _3419 = true;
                break;
            }
        }
        uint _3360 = _1253 + uint(_3222.w);
        if ((cbInstanceData._m0[_3360].w < 1.0) && ((cbInstanceData._m0[_3360].w + _3253) < 0.5))
        {
            _3419 = true;
            break;
        }
        if ((_3246 + 1.0) < _3244.x)
        {
            _3419 = true;
            break;
        }
        _3419 = false;
        break;
    }
    float _3624;
    if (_3419)
    {
        discard_state = true;
        _3624 = 0.0;
    }
    else
    {
        _3624 = cbInstanceData._m0[_3085].w;
    }
    SV_Target.x = _3250;
    SV_Target.y = _3251;
    SV_Target.z = _3252;
    SV_Target.w = _3624;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3085].w;
    discard_exit();
}


