#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1579;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4186 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4197 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4208 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _288 = uint(roundEven(NORMAL.w)) * 13u;
    uint _293 = _288 + 1u;
    uint _297 = _288 + 2u;
    float _306 = sqrt(((cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x)) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x));
    float _307 = _306 * TEXCOORD.z;
    float _308 = _306 * TEXCOORD.w;
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _307) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _308) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _375 = _370.x * cbMtdParam._m0[11u].x;
    float _376 = _370.y * cbMtdParam._m0[11u].y;
    float _377 = _370.z * cbMtdParam._m0[11u].z;
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _307) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _308) + cbTextureTilingScale._m0[5u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _464 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _481 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _415.x) * 2.0) - ((((_452 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4219 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _489 = (_482 * ((_396.x * cbMtdParam._m0[12u].x) - _375)) + _375;
    float _490 = (_482 * ((_396.y * cbMtdParam._m0[12u].y) - _376)) + _376;
    float _491 = (_482 * ((_396.z * cbMtdParam._m0[12u].z) - _377)) + _377;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _307) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _308) + cbTextureTilingScale._m0[3u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _530 = _528.x;
    float _540 = dot(vec4(_530, _528.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _554 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _415.y) * 2.0) - ((((_530 - _540) * cbMtdParam._m0[23u].w) + _540) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4230 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _562 = (_555 * ((_508.x * cbMtdParam._m0[13u].x) - _489)) + _489;
    float _563 = (_555 * ((_508.y * cbMtdParam._m0[13u].y) - _490)) + _490;
    float _564 = (_555 * ((_508.z * cbMtdParam._m0[13u].z) - _491)) + _491;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _307) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _308) + cbTextureTilingScale._m0[24u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _602 = _600.x;
    float _612 = dot(vec4(_602, _600.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _624 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _415.z) * 2.0) - ((((_602 - _612) * cbMtdParam._m0[23u].w) + _612) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4241 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _635 = (_344.x * cbMtdParam._m0[9u].x) * ((_625 * ((_583.x * cbMtdParam._m0[14u].x) - _562)) + _562);
    float _636 = (_344.y * cbMtdParam._m0[9u].y) * ((_625 * ((_583.y * cbMtdParam._m0[14u].y) - _563)) + _563);
    float _637 = (_344.z * cbMtdParam._m0[9u].z) * ((_625 * ((_583.z * cbMtdParam._m0[14u].z) - _564)) + _564);
    float _641 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _321.x) * _635;
    float _644 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _321.y) * _636;
    float _647 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _321.z) * _637;
    float _655 = (((_635 - _641) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) + _641) * 4.55000019073486328125;
    float _657 = (((_636 - _644) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) + _644) * 4.55000019073486328125;
    float _659 = (((_637 - _647) * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) + _647) * 4.55000019073486328125;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _307) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _308) + cbTextureTilingScale._m0[20u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _307) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _308) + cbTextureTilingScale._m0[4u].w));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _720 = _718.x;
    float _721 = _718.y;
    float _722 = _718.z;
    float _729 = ((_701.x - _720) * _482) + _720;
    float _730 = ((_701.y - _721) * _482) + _721;
    float _731 = ((_701.z - _722) * _482) + _722;
    vec4 _743 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _307) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _308) + cbTextureTilingScale._m0[2u].w));
    float _754 = ((_743.x - _729) * _555) + _729;
    float _755 = ((_743.y - _730) * _555) + _730;
    float _756 = ((_743.z - _731) * _555) + _731;
    vec4 _768 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _307) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _308) + cbTextureTilingScale._m0[23u].w));
    float _781 = ((_768.z - _756) * _625) + _756;
    float _784 = ((((_768.x - _754) * _625) + _754) * 2.0) + (-1.0);
    float _785 = ((((_768.y - _755) * _625) + _755) * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _4252 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))));
    vec4 _809 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _821 = (_784 + ((((_676.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_809.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _822 = (_785 + ((((_676.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_809.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _825 = fma(_791, _255, fma(_822, _262, _821 * _248));
    float _828 = fma(_791, _256, fma(_822, _263, _821 * _249));
    float _831 = fma(_791, _257, fma(_822, _264, _821 * _250));
    float _835 = inversesqrt(dot(vec3(_825, _828, _831), vec3(_825, _828, _831)));
    vec4 _862 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _307) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _308) + cbTextureTilingScale._m0[11u].w));
    float _864 = _862.x;
    float _865 = 1.0 - _864;
    float _873 = (cbMtdParam._m0[19u].x + dot(vec4(_835 * _825, _835 * _828, _835 * _831, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_864 - _865) * cbMtdParam._m0[24u].z) + _865) * cbMtdParam._m0[21u].z);
    float _4263 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _874 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _881 = (_874 * (cbMtdParam._m0[17u].x - _655)) + _655;
    float _882 = (_874 * (cbMtdParam._m0[17u].y - _657)) + _657;
    float _883 = (_874 * (cbMtdParam._m0[17u].z - _659)) + _659;
    vec4 _909 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _911 = _909.x;
    float _928 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w)).x - _911) * _482) + _911;
    float _945 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _307) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _308) + cbTextureTilingScale._m0[21u].w)).x - _928) * _555) + _928;
    float _963 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _307) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _308) + cbTextureTilingScale._m0[10u].w)).x - _945) * _625) + _945;
    float _967 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _963) * cbMtdParam._m0[19u].z) + _963;
    float _969 = _967 - (_967 * _874);
    float _974 = (((_676.z - _781) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _781;
    float _978 = ((_809.z - _974) * cbMtdParam._m0[19u].w) + _974;
    vec4 _991 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _307) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _308) + cbTextureTilingScale._m0[15u].w));
    float _998 = (_991.x * 2.0) + (-1.0);
    float _999 = (_991.y * 2.0) + (-1.0);
    float _1000 = dot(vec2(_998, _999), vec2(_998, _999));
    float _4274 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1008 = ((_991.z - _978) * _874) + _978;
    float _1018 = ((sqrt(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) - _791) * _874) + _791;
    float _1021 = (((_998 - _821) * _874) + _821) + (cbMtdParam._m0[21u].x * _821);
    float _1022 = (((_999 - _822) * _874) + _822) + (cbMtdParam._m0[21u].x * _822);
    float _1026 = cbMtdParam._m0[22u].x + _809.w;
    float _1029 = fma(_1018, _255, fma(_1022, _262, _1021 * _248));
    float _1032 = fma(_1018, _256, fma(_1022, _263, _1021 * _249));
    float _1035 = fma(_1018, _257, fma(_1022, _264, _1021 * _250));
    float _1039 = inversesqrt(dot(vec3(_1029, _1032, _1035), vec3(_1029, _1032, _1035)));
    float _1040 = _1039 * _1029;
    float _1041 = _1039 * _1032;
    float _1042 = _1039 * _1035;
    float _4285 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1043 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _4296 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _4307 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _4318 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4329 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4340 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _1048 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _1062 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1112 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1102);
    float _1113 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1102);
    float _1114 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1102);
    float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
    float _1119 = _1112 * _1118;
    float _1120 = _1113 * _1118;
    float _1121 = _1114 * _1118;
    float _1127 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1128 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1146 = fma(_1042, cbSceneParam._m0[5u].z, fma(_1041, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1040));
    float _1149 = fma(_1042, cbSceneParam._m0[6u].z, fma(_1041, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1040));
    float _1152 = fma(_1042, cbSceneParam._m0[7u].z, fma(_1041, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1040));
    uint _1166 = (_288 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1172 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * cbInstanceData._m0[_1166].x;
    float _1173 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * cbInstanceData._m0[_1166].y;
    float _1174 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * cbInstanceData._m0[_1166].z;
    float _4351 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _1175 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _4362 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _1176 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _4373 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _1177 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _1178 = 1.0 - _1048;
    float _1179 = _1175 * _1178;
    float _1180 = _1176 * _1178;
    float _1181 = _1177 * _1178;
    float _1186 = (_1175 + (-0.039999999105930328369140625)) * _1048;
    float _1187 = (_1176 + (-0.039999999105930328369140625)) * _1048;
    float _1188 = (_1177 + (-0.039999999105930328369140625)) * _1048;
    float _1189 = _1186 + 0.039999999105930328369140625;
    float _1191 = _1187 + 0.039999999105930328369140625;
    float _1192 = _1188 + 0.039999999105930328369140625;
    vec4 _1201 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1127, cbSceneParam._m0[86u].y * _1128));
    float _1205 = ((isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * TEXCOORD_5.w) * _1201.x;
    float _1206 = dot(vec3(_1040, _1041, _1042), vec3(_1119, _1120, _1121));
    float _1209 = _1206 * 2.0;
    float _1213 = (_1209 * _1040) - _1119;
    float _1214 = (_1209 * _1041) - _1120;
    float _1215 = (_1209 * _1042) - _1121;
    float _1219 = abs(dot(vec3(_1119, _1120, _1121), vec3(_1040, _1041, _1042)));
    float _4384 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _1221 = sqrt(_1043);
    float _1234 = exp2((_1221 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1221 * 3.0));
    float _1240 = (1.0 - _1234) * ((_1221 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1241 = _1234 * _1221;
    float _1269 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1273 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1277 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1578;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1303 = fma(_1277, cbModelParam._m0[26u].z, fma(_1273, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1269));
        float _1307 = fma(_1277, cbModelParam._m0[27u].z, fma(_1273, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1269));
        float _1311 = fma(_1277, cbModelParam._m0[28u].z, fma(_1273, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1269));
        float _1336 = _1269 + _1040;
        float _1337 = _1273 + _1041;
        float _1338 = _1277 + _1042;
        float _1348 = fma(_1338, cbModelParam._m0[26u].z, fma(_1337, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1336)) - _1303;
        float _1349 = fma(_1338, cbModelParam._m0[27u].z, fma(_1337, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1336)) - _1307;
        float _1350 = fma(_1338, cbModelParam._m0[28u].z, fma(_1337, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1336)) - _1311;
        float _1354 = inversesqrt(dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350)));
        float _1367 = ((_1354 * _1348) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1303 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1354 * _1349) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1307 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1354 * _1350) / cbModelParam._m0[34u].z) + ((((((_1311 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        float _1406 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1372.x + (-0.5));
        float _1408 = _1406 * (_1372.y + (-0.5));
        float _1409 = _1406 * (_1372.z + (-0.5));
        float _1416 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1379.x + (-0.5));
        float _1418 = _1416 * (_1379.y + (-0.5));
        float _1419 = _1416 * (_1379.z + (-0.5));
        float _1426 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1386.x + (-0.5));
        float _1428 = _1426 * (_1386.y + (-0.5));
        float _1429 = _1426 * (_1386.z + (-0.5));
        float _1436 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1393.x + (-0.5));
        float _1438 = _1436 * (_1393.y + (-0.5));
        float _1439 = _1436 * (_1393.z + (-0.5));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = _1407 * 0.5;
        float _1444 = _1417 * 0.5;
        float _1445 = _1427 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1460 = (dot(vec3(_1040, _1041, _1042), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4410 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1470 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4421 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4432 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_1472 + 1.0))) + _1477) * _1440;
        float _1487 = _1408 * 0.5;
        float _1488 = _1418 * 0.5;
        float _1489 = _1428 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_1040, _1041, _1042), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4443 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4454 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4465 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_1514 + 1.0))) + _1519) * _1441;
        float _1529 = _1409 * 0.5;
        float _1530 = _1419 * 0.5;
        float _1531 = _1429 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_1040, _1041, _1042), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4476 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4487 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4498 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_1556 + 1.0))) + _1561) * _1442;
        _1578 = _1409;
        _1580 = _1408;
        _1581 = _1407;
        _1582 = _1419;
        _1583 = _1418;
        _1584 = _1417;
        _1585 = _1429;
        _1586 = _1428;
        _1587 = _1427;
        _1588 = _1442;
        _1589 = _1441;
        _1590 = _1440;
        _1591 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1592 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1593 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
    }
    else
    {
        _1578 = _1579;
        _1580 = _1579;
        _1581 = _1579;
        _1582 = _1579;
        _1583 = _1579;
        _1584 = _1579;
        _1585 = _1579;
        _1586 = _1579;
        _1587 = _1579;
        _1588 = _1579;
        _1589 = _1579;
        _1590 = _1579;
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
    }
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1616 = fma(_1277, cbModelParam._m0[30u].z, fma(_1273, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1269));
        float _1620 = fma(_1277, cbModelParam._m0[31u].z, fma(_1273, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1269));
        float _1624 = fma(_1277, cbModelParam._m0[32u].z, fma(_1273, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1269));
        float _1647 = _1269 + _1040;
        float _1648 = _1273 + _1041;
        float _1649 = _1277 + _1042;
        float _1659 = fma(_1649, cbModelParam._m0[30u].z, fma(_1648, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1647)) - _1616;
        float _1660 = fma(_1649, cbModelParam._m0[31u].z, fma(_1648, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1647)) - _1620;
        float _1661 = fma(_1649, cbModelParam._m0[32u].z, fma(_1648, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1647)) - _1624;
        float _1665 = inversesqrt(dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661)));
        float _1678 = ((_1665 * _1659) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1616 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1679 = ((_1665 * _1660) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1620 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1680 = ((_1665 * _1661) / cbModelParam._m0[35u].z) + ((((((_1624 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        vec4 _1689 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        vec4 _1696 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        vec4 _1703 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        float _1715 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1716 = _1715 * (_1682.x + (-0.5));
        float _1717 = _1715 * (_1682.y + (-0.5));
        float _1718 = _1715 * (_1682.z + (-0.5));
        float _1725 = exp2((_1689.w + (-0.5)) * 20.0) * 2.0;
        float _1726 = _1725 * (_1689.x + (-0.5));
        float _1727 = _1725 * (_1689.y + (-0.5));
        float _1728 = _1725 * (_1689.z + (-0.5));
        float _1735 = exp2((_1696.w + (-0.5)) * 20.0) * 2.0;
        float _1736 = _1735 * (_1696.x + (-0.5));
        float _1737 = _1735 * (_1696.y + (-0.5));
        float _1738 = _1735 * (_1696.z + (-0.5));
        float _1745 = exp2((_1703.w + (-0.5)) * 20.0) * 2.0;
        float _1746 = _1745 * (_1703.x + (-0.5));
        float _1747 = _1745 * (_1703.y + (-0.5));
        float _1748 = _1745 * (_1703.z + (-0.5));
        float _1749 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1750 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1751 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1752 = _1716 * 0.5;
        float _1753 = _1726 * 0.5;
        float _1754 = _1736 * 0.5;
        float _1755 = dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754));
        float _1760 = (_1755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1755);
        float _1768 = (dot(vec3(_1040, _1041, _1042), vec3(_1760 * _1752, _1760 * _1753, _1760 * _1754)) + 1.0) * 0.5;
        float _4539 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754)) / (_1749 + 9.9999997473787516355514526367188e-06);
        float _4550 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1779 = _1778 * 2.0;
        float _1783 = (1.0 - _1778) / (_1778 + 1.0);
        float _4561 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _1793 = ((((1.0 - _1784) * (_1779 + 2.0)) * exp2(log2(isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_1779 + 1.0))) + _1784) * _1749;
        float _1794 = _1717 * 0.5;
        float _1795 = _1727 * 0.5;
        float _1796 = _1737 * 0.5;
        float _1797 = dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796));
        float _1802 = (_1797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1797);
        float _1810 = (dot(vec3(_1040, _1041, _1042), vec3(_1802 * _1794, _1802 * _1795, _1802 * _1796)) + 1.0) * 0.5;
        float _4572 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1819 = sqrt(((_1795 * _1795) + (_1794 * _1794)) + (_1796 * _1796)) / (_1750 + 9.9999997473787516355514526367188e-06);
        float _4583 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1821 = _1820 * 2.0;
        float _1825 = (1.0 - _1820) / (_1820 + 1.0);
        float _4594 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _1835 = ((((1.0 - _1826) * (_1821 + 2.0)) * exp2(log2(isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_1821 + 1.0))) + _1826) * _1750;
        float _1836 = _1718 * 0.5;
        float _1837 = _1728 * 0.5;
        float _1838 = _1738 * 0.5;
        float _1839 = dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838));
        float _1844 = (_1839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1839);
        float _1852 = (dot(vec3(_1040, _1041, _1042), vec3(_1844 * _1836, _1844 * _1837, _1844 * _1838)) + 1.0) * 0.5;
        float _4605 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1861 = sqrt(((_1837 * _1837) + (_1836 * _1836)) + (_1838 * _1838)) / (_1751 + 9.9999997473787516355514526367188e-06);
        float _4616 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _1863 = _1862 * 2.0;
        float _1867 = (1.0 - _1862) / (_1862 + 1.0);
        float _4627 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _1877 = ((((1.0 - _1868) * (_1863 + 2.0)) * exp2(log2(isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_1863 + 1.0))) + _1868) * _1751;
        _1885 = _1718;
        _1886 = _1717;
        _1887 = _1716;
        _1888 = _1728;
        _1889 = _1727;
        _1890 = _1726;
        _1891 = _1738;
        _1892 = _1737;
        _1893 = _1736;
        _1894 = _1751;
        _1895 = _1750;
        _1896 = _1749;
        _1897 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)));
        _1898 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)));
        _1899 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)));
    }
    else
    {
        _1885 = _1579;
        _1886 = _1579;
        _1887 = _1579;
        _1888 = _1579;
        _1889 = _1579;
        _1890 = _1579;
        _1891 = _1579;
        _1892 = _1579;
        _1893 = _1579;
        _1894 = _1579;
        _1895 = _1579;
        _1896 = _1579;
        _1897 = 0.0;
        _1898 = 0.0;
        _1899 = 0.0;
    }
    float _1909 = (cbModelParam._m0[1u].x * (_1897 - _1591)) + _1591;
    float _1910 = (cbModelParam._m0[1u].x * (_1898 - _1592)) + _1592;
    float _1911 = (cbModelParam._m0[1u].x * (_1899 - _1593)) + _1593;
    float _1932 = fma(_1911, cbSceneParam._m0[89u].z, fma(_1910, cbSceneParam._m0[89u].y, _1909 * cbSceneParam._m0[89u].x));
    float _1935 = fma(_1911, cbSceneParam._m0[90u].z, fma(_1910, cbSceneParam._m0[90u].y, _1909 * cbSceneParam._m0[90u].x));
    float _1938 = fma(_1911, cbSceneParam._m0[91u].z, fma(_1910, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1909));
    float _1953 = _1213 * 0.5;
    float _1954 = _1214 * 0.5;
    float _1955 = _1215 * 0.5;
    float _1956 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1887, _1890, _1893, _1896));
    float _1959 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1886, _1889, _1892, _1895));
    float _1962 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1885, _1888, _1891, _1894));
    float _1996;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1969 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1578, _1582, _1585, _1588));
        float _1973 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1580, _1583, _1586, _1589));
        float _1977 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1581, _1584, _1587, _1590));
        float _1984 = dot(vec4(cbModelParam._m0[39u]), vec4(_1953, _1954, _1955, 1.0));
        _1996 = dot(vec3(isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)), isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0)), isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1984) ? 0.0 : (isnan(0.0) ? _1984 : max(0.0, _1984))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1996 = 1.0;
    }
    float _2007;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1998 = dot(vec4(cbModelParam._m0[40u]), vec4(_1953, _1954, _1955, 1.0));
        _2007 = dot(vec3(isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1998) ? 0.0 : (isnan(0.0) ? _1998 : max(0.0, _1998))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2007 = 1.0;
    }
    float _2011 = (_2007 * cbModelParam._m0[1u].x) + (_1996 * (1.0 - cbModelParam._m0[1u].x));
    float _2021 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1043);
    float _2022 = isnan(_2021) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2021 : min(cbModelParam._m0[25u].z, _2021));
    float _2102;
    float _2104;
    float _2106;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2069 = fma(_1277, cbModelParam._m0[13u].z, fma(_1273, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1269)) + cbModelParam._m0[13u].w;
        float _2073 = fma(_1277, cbModelParam._m0[14u].z, fma(_1273, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1269)) + cbModelParam._m0[14u].w;
        float _2077 = fma(_1277, cbModelParam._m0[15u].z, fma(_1273, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1269)) + cbModelParam._m0[15u].w;
        float _2080 = fma(_1215, cbModelParam._m0[13u].z, fma(_1214, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1213));
        float _2083 = fma(_1215, cbModelParam._m0[14u].z, fma(_1214, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1213));
        float _2086 = fma(_1215, cbModelParam._m0[15u].z, fma(_1214, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1213));
        float _2114;
        if (_2080 > 0.0)
        {
            _2114 = abs((1.0 - _2069) / _2080);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2069 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2114 = frontier_phi_14_12_ladder;
        }
        float _2286;
        if (_2083 > 0.0)
        {
            _2286 = abs((1.0 - _2073) / _2083);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2073 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2286 = frontier_phi_23_19_ladder;
        }
        float _2581;
        if (_2086 > 0.0)
        {
            _2581 = abs((1.0 - _2077) / _2086);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2077 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2581 = frontier_phi_35_30_ladder;
        }
        float _2583 = isnan(_2286) ? _2114 : (isnan(_2114) ? _2286 : min(_2114, _2286));
        float _2584 = isnan(_2581) ? _2583 : (isnan(_2583) ? _2581 : min(_2583, _2581));
        float _2588 = (_2584 * _2080) + _2069;
        float _2589 = (_2584 * _2083) + _2073;
        float _2590 = (_2584 * _2086) + _2077;
        float _2591 = _2584 * 9.9999997473787516355514526367188e-05;
        float _2593 = (-1.0) - _2591;
        float _2595 = _2591 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2590 > _2595) || ((_2590 < _2593) || ((_2589 > _2595) || ((_2589 < _2593) || ((_2588 < _2593) || (_2588 > _2595))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2735 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2590, cbModelParam._m0[9u].z, fma(_2589, cbModelParam._m0[9u].y, _2588 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2590, cbModelParam._m0[10u].z, fma(_2589, cbModelParam._m0[10u].y, _2588 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2590, cbModelParam._m0[11u].z, fma(_2589, cbModelParam._m0[11u].y, _2588 * cbModelParam._m0[11u].x))), _2022);
            frontier_phi_13_35_ladder = _2735.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2735.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2735.x * cbModelParam._m0[1u].y;
        }
        _2102 = frontier_phi_13_35_ladder_2;
        _2104 = frontier_phi_13_35_ladder_1;
        _2106 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2090 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1213, _1214, _1215), _2022);
        _2102 = _2090.x * cbModelParam._m0[1u].y;
        _2104 = _2090.y * cbModelParam._m0[1u].y;
        _2106 = _2090.z * cbModelParam._m0[1u].y;
    }
    float _2110 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1043);
    float _2111 = isnan(_2110) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2110 : min(cbModelParam._m0[25u].w, _2110));
    float _2201;
    float _2203;
    float _2205;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2165 = fma(_1277, cbModelParam._m0[21u].z, fma(_1273, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1269)) + cbModelParam._m0[21u].w;
        float _2169 = fma(_1277, cbModelParam._m0[22u].z, fma(_1273, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1269)) + cbModelParam._m0[22u].w;
        float _2173 = fma(_1277, cbModelParam._m0[23u].z, fma(_1273, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1269)) + cbModelParam._m0[23u].w;
        float _2176 = fma(_1215, cbModelParam._m0[21u].z, fma(_1214, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1213));
        float _2179 = fma(_1215, cbModelParam._m0[22u].z, fma(_1214, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1213));
        float _2182 = fma(_1215, cbModelParam._m0[23u].z, fma(_1214, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1213));
        float _2291;
        if (_2176 > 0.0)
        {
            _2291 = abs((1.0 - _2165) / _2176);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2176 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2165 + 1.0) / _2176);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2291 = frontier_phi_25_21_ladder;
        }
        float _2608;
        if (_2179 > 0.0)
        {
            _2608 = abs((1.0 - _2169) / _2179);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2179 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2169 + 1.0) / _2179);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2608 = frontier_phi_37_32_ladder;
        }
        float _2946;
        if (_2182 > 0.0)
        {
            _2946 = abs((1.0 - _2173) / _2182);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2182 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2173 + 1.0) / _2182);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2946 = frontier_phi_47_44_ladder;
        }
        float _2948 = isnan(_2608) ? _2291 : (isnan(_2291) ? _2608 : min(_2291, _2608));
        float _2949 = isnan(_2946) ? _2948 : (isnan(_2948) ? _2946 : min(_2948, _2946));
        float _2953 = (_2949 * _2176) + _2165;
        float _2954 = (_2949 * _2179) + _2169;
        float _2955 = (_2949 * _2182) + _2173;
        float _2956 = _2949 * 9.9999997473787516355514526367188e-05;
        float _2957 = (-1.0) - _2956;
        float _2959 = _2956 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2955 > _2959) || ((_2955 < _2957) || ((_2954 > _2959) || ((_2954 < _2957) || ((_2953 < _2957) || (_2953 > _2959))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3077 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2955, cbModelParam._m0[17u].z, fma(_2954, cbModelParam._m0[17u].y, _2953 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2955, cbModelParam._m0[18u].z, fma(_2954, cbModelParam._m0[18u].y, _2953 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2955, cbModelParam._m0[19u].z, fma(_2954, cbModelParam._m0[19u].y, _2953 * cbModelParam._m0[19u].x))), _2111);
            frontier_phi_22_47_ladder = _3077.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3077.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3077.x * cbModelParam._m0[1u].z;
        }
        _2201 = frontier_phi_22_47_ladder_2;
        _2203 = frontier_phi_22_47_ladder_1;
        _2205 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2185 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1213, _1214, _1215), _2111);
        _2201 = _2185.x * cbModelParam._m0[1u].z;
        _2203 = _2185.y * cbModelParam._m0[1u].z;
        _2205 = _2185.z * cbModelParam._m0[1u].z;
    }
    float _2218 = (((_1240 * _1189) + _1241) * _1205) * ((cbModelParam._m0[1u].w * (_2201 - _2102)) + _2102);
    float _2220 = (((_1240 * _1191) + _1241) * _1205) * ((cbModelParam._m0[1u].w * (_2203 - _2104)) + _2104);
    float _2222 = (((_1240 * _1192) + _1241) * _1205) * ((cbModelParam._m0[1u].w * (_2205 - _2106)) + _2106);
    float _2225 = fma(_2222, cbSceneParam._m0[89u].z, fma(_2220, cbSceneParam._m0[89u].y, _2218 * cbSceneParam._m0[89u].x));
    float _2228 = fma(_2222, cbSceneParam._m0[90u].z, fma(_2220, cbSceneParam._m0[90u].y, _2218 * cbSceneParam._m0[90u].x));
    float _2231 = fma(_2222, cbSceneParam._m0[91u].z, fma(_2220, cbSceneParam._m0[91u].y, _2218 * cbSceneParam._m0[91u].x));
    float _2265 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2269 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2273 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2277 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2278 = _2265 / _2277;
    float _2279 = _2269 / _2277;
    float _2280 = _2273 / _2277;
    float _2427;
    float _2428;
    float _2429;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2307 = ((uint(_2280 > cbSceneParam._m0[59u].y) + uint(_2280 > cbSceneParam._m0[59u].x)) + uint(_2280 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2308 = _2307 + 43u;
        uint _2316 = _2307 + 44u;
        uint _2324 = _2307 + 45u;
        uint _2332 = _2307 + 46u;
        float _2343 = fma(_2277, cbSceneParam._m0[_2308].w, fma(_2273, cbSceneParam._m0[_2308].z, fma(_2269, cbSceneParam._m0[_2308].y, _2265 * cbSceneParam._m0[_2308].x)));
        float _2347 = fma(_2277, cbSceneParam._m0[_2316].w, fma(_2273, cbSceneParam._m0[_2316].z, fma(_2269, cbSceneParam._m0[_2316].y, _2265 * cbSceneParam._m0[_2316].x)));
        float _2355 = fma(_2277, cbSceneParam._m0[_2332].w, fma(_2273, cbSceneParam._m0[_2332].z, fma(_2269, cbSceneParam._m0[_2332].y, _2265 * cbSceneParam._m0[_2332].x)));
        float _2360 = cbSceneParam._m0[33u].z * _2355;
        float _2362 = cbSceneParam._m0[33u].w * _2355;
        float _2365 = fma(_2277, cbSceneParam._m0[_2324].w, fma(_2273, cbSceneParam._m0[_2324].z, fma(_2269, cbSceneParam._m0[_2324].y, _2265 * cbSceneParam._m0[_2324].x))) / _2355;
        float _2413 = (cbSceneParam._m0[33u].x - sqrt(((_2279 * _2279) + (_2278 * _2278)) + (_2280 * _2280))) * cbSceneParam._m0[33u].y;
        float _4753 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2420 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2360 + _2343) / _2355, (_2362 + _2347) / _2355), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2362 + _2343) / _2355, (_2347 - _2360) / _2355), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2343 - _2360) / _2355, (_2347 - _2362) / _2355), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2343 - _2362) / _2355, (_2360 + _2347) / _2355), _2365), 0.0)).x), vec4(0.25)));
        _2427 = 1.0 - (_2420 * cbSceneParam._m0[34u].x);
        _2428 = 1.0 - (_2420 * cbSceneParam._m0[34u].y);
        _2429 = 1.0 - (_2420 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2427 = 1.0;
        _2428 = 1.0;
        _2429 = 1.0;
    }
    float _2493;
    float _2495;
    float _2497;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2481 = fma(_2277, cbSceneParam._m0[63u].w, fma(_2273, cbSceneParam._m0[63u].z, fma(_2269, cbSceneParam._m0[63u].y, _2265 * cbSceneParam._m0[63u].x)));
        float _2482 = fma(_2277, cbSceneParam._m0[60u].w, fma(_2273, cbSceneParam._m0[60u].z, fma(_2269, cbSceneParam._m0[60u].y, _2265 * cbSceneParam._m0[60u].x))) / _2481;
        float _2483 = fma(_2277, cbSceneParam._m0[61u].w, fma(_2273, cbSceneParam._m0[61u].z, fma(_2269, cbSceneParam._m0[61u].y, _2265 * cbSceneParam._m0[61u].x))) / _2481;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2482 >= cbSceneParam._m0[64u].x) && (_2483 >= cbSceneParam._m0[64u].y)) && (_2482 <= cbSceneParam._m0[64u].z)) && (_2483 <= cbSceneParam._m0[64u].w))
        {
            float _2621 = fma(_2277, cbSceneParam._m0[62u].w, fma(_2273, cbSceneParam._m0[62u].z, fma(_2269, cbSceneParam._m0[62u].y, _2265 * cbSceneParam._m0[62u].x))) / _2481;
            float _2625 = isnan(cbSceneParam._m0[41u].w) ? _2621 : (isnan(_2621) ? cbSceneParam._m0[41u].w : max(_2621, cbSceneParam._m0[41u].w));
            float _2668 = (cbSceneParam._m0[33u].x - sqrt(((_2279 * _2279) + (_2278 * _2278)) + (_2280 * _2280))) * cbSceneParam._m0[33u].y;
            float _4769 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
            float _2675 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2482, cbSceneParam._m0[33u].w + _2483), _2625), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2482, _2483 - cbSceneParam._m0[33u].z), _2625), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2482 - cbSceneParam._m0[33u].z, _2483 - cbSceneParam._m0[33u].w), _2625), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2482 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2483), _2625), 0.0)).x), vec4(0.25)));
            float _2679 = 1.0 - (_2675 * cbSceneParam._m0[34u].x);
            float _2680 = 1.0 - (_2675 * cbSceneParam._m0[34u].y);
            float _2681 = 1.0 - (_2675 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2681) ? _2429 : (isnan(_2429) ? _2681 : min(_2429, _2681));
            frontier_phi_34_33_ladder_1 = isnan(_2680) ? _2428 : (isnan(_2428) ? _2680 : min(_2428, _2680));
            frontier_phi_34_33_ladder_2 = isnan(_2679) ? _2427 : (isnan(_2427) ? _2679 : min(_2427, _2679));
        }
        else
        {
            frontier_phi_34_33_ladder = _2429;
            frontier_phi_34_33_ladder_1 = _2428;
            frontier_phi_34_33_ladder_2 = _2427;
        }
        _2493 = frontier_phi_34_33_ladder_2;
        _2495 = frontier_phi_34_33_ladder_1;
        _2497 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2493 = _2427;
        _2495 = _2428;
        _2497 = _2429;
    }
    uvec4 _2502 = floatBitsToUint(cbInstanceData._m0[_288 + 5u]);
    uint _2504 = _2502.x * 14u;
    uint _2505 = _2504 + 13u;
    float _2512 = _1205 + (-1.0);
    float _2517 = (cbLight._m0[_2505].x * _2512) + 1.0;
    float _2518 = (cbLight._m0[_2505].y * _2512) + 1.0;
    float _2519 = (cbLight._m0[_2505].z * _2512) + 1.0;
    float _2520 = (cbLight._m0[_2505].w * _2512) + 1.0;
    uint _2521 = _2504 + 5u;
    float _2527 = isnan(1.0) ? _2518 : (isnan(_2518) ? 1.0 : min(_2518, 1.0));
    uint _2531 = _2504 + 4u;
    float _2540 = isnan(1.0) ? _2517 : (isnan(_2517) ? 1.0 : min(_2517, 1.0));
    uint _2544 = _2504 | 1u;
    float _2555 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_1040, _1041, _1042));
    float _2558 = dot(vec3(cbLight._m0[_2544].xyz), vec3(_1040, _1041, _1042));
    float _4805 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _4816 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2563 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * 0.3183098733425140380859375;
    float _2565 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * 0.3183098733425140380859375;
    float _2572 = ((cbLight._m0[_2521].x * _2527) * _2565) + (((cbLight._m0[_2531].x * _2493) * _2540) * _2563);
    float _2573 = ((_2527 * cbLight._m0[_2521].y) * _2565) + (((cbLight._m0[_2531].y * _2495) * _2540) * _2563);
    float _2574 = ((_2527 * cbLight._m0[_2521].z) * _2565) + (((cbLight._m0[_2531].z * _2497) * _2540) * _2563);
    uvec4 _2578 = floatBitsToUint(cbLight._m0[_2504 + 12u]);
    bool _2580 = _2578.x == 0u;
    float _2682;
    float _2684;
    float _2686;
    if (_2580)
    {
        _2682 = _2572;
        _2684 = _2573;
        _2686 = _2574;
    }
    else
    {
        uint _2690 = _2504 + 6u;
        float _2706 = (dot(vec3(cbLight._m0[_2504 + 2u].xyz), vec3(_1040, _1041, _1042)) * 0.5) + 0.5;
        float _2707 = _2706 * _2706;
        float _4827 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2708 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2709 = isnan(1.0) ? _2519 : (isnan(_2519) ? 1.0 : min(_2519, 1.0));
        _2682 = (((cbLight._m0[_2690].x * 0.3183098733425140380859375) * _2708) * _2709) + _2572;
        _2684 = (((cbLight._m0[_2690].y * 0.3183098733425140380859375) * _2708) * _2709) + _2573;
        _2686 = (((cbLight._m0[_2690].z * 0.3183098733425140380859375) * _2708) * _2709) + _2574;
    }
    bool _2689 = _2578.y == 0u;
    float _2744;
    float _2746;
    float _2748;
    if (_2689)
    {
        _2744 = _2682;
        _2746 = _2684;
        _2748 = _2686;
    }
    else
    {
        uint _2917 = _2504 + 7u;
        float _2933 = (dot(vec3(cbLight._m0[_2504 + 3u].xyz), vec3(_1040, _1041, _1042)) * 0.5) + 0.5;
        float _2934 = _2933 * _2933;
        float _4843 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2935 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2936 = isnan(1.0) ? _2520 : (isnan(_2520) ? 1.0 : min(_2520, 1.0));
        _2744 = (((cbLight._m0[_2917].x * 0.3183098733425140380859375) * _2935) * _2936) + _2682;
        _2746 = (((cbLight._m0[_2917].y * 0.3183098733425140380859375) * _2935) * _2936) + _2684;
        _2748 = (((cbLight._m0[_2917].z * 0.3183098733425140380859375) * _2935) * _2936) + _2686;
    }
    uint _2751 = _2504 + 8u;
    float _2764 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _1043) * 0.949999988079071044921875);
    float _2765 = _2764 * _2764;
    float _2766 = cbLight._m0[_2504].x + _1119;
    float _2767 = cbLight._m0[_2504].y + _1120;
    float _2768 = cbLight._m0[_2504].z + _1121;
    float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
    float _2773 = _2772 * _2766;
    float _2774 = _2772 * _2767;
    float _2775 = _2772 * _2768;
    float _2776 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2504].xyz));
    float _4859 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2779 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
    float _4870 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _2780 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
    float _2781 = dot(vec3(_1040, _1041, _1042), vec3(_2773, _2774, _2775));
    float _4881 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
    float _2784 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
    float _2785 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2773, _2774, _2775));
    float _4892 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
    float _2789 = _2765 * _2765;
    float _2793 = ((_2784 * _2784) * (_2789 + (-1.0))) + 1.0;
    float _2801 = exp2(log2(1.0 - (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0)))) * 5.0);
    float _2802 = 0.959999978542327880859375 - _1186;
    float _2804 = 0.959999978542327880859375 - _1187;
    float _2805 = 0.959999978542327880859375 - _1188;
    float _2812 = 1.0 - _2765;
    float _2823 = (0.5 / (((_2780 * ((_2779 * _2812) + _2765)) + 9.9999999392252902907785028219223e-09) + (((_2780 * _2812) + _2765) * _2779))) * _2779;
    float _4903 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2825 = (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2789 / ((_2793 * _2793) * 3.141590118408203125));
    uint _2839 = _2504 + 9u;
    float _2850 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2544].w)) * _1043) * 0.949999988079071044921875);
    float _2851 = _2850 * _2850;
    float _2852 = cbLight._m0[_2544].x + _1119;
    float _2853 = cbLight._m0[_2544].y + _1120;
    float _2854 = cbLight._m0[_2544].z + _1121;
    float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
    float _2859 = _2858 * _2852;
    float _2860 = _2858 * _2853;
    float _2861 = _2858 * _2854;
    float _2862 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2544].xyz));
    float _4914 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
    float _2865 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
    float _2866 = dot(vec3(_1040, _1041, _1042), vec3(_2859, _2860, _2861));
    float _4925 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
    float _2869 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
    float _2870 = dot(vec3(cbLight._m0[_2544].xyz), vec3(_2859, _2860, _2861));
    float _4936 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
    float _2874 = _2851 * _2851;
    float _2878 = ((_2869 * _2869) * (_2874 + (-1.0))) + 1.0;
    float _2885 = exp2(log2(1.0 - (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0)))) * 5.0);
    float _2892 = 1.0 - _2851;
    float _2902 = (0.5 / (((_2780 * ((_2865 * _2892) + _2851)) + 9.9999999392252902907785028219223e-09) + (((_2780 * _2892) + _2851) * _2865))) * _2865;
    float _4947 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
    float _2904 = (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2874 / ((_2878 * _2878) * 3.141590118408203125));
    float _2914 = (((((_2885 * _2802) + _1189) * cbLight._m0[_2839].x) * _2904) * _2527) + ((((cbLight._m0[_2751].x * _2493) * ((_2801 * _2802) + _1189)) * _2825) * _2540);
    float _2915 = (((((_2885 * _2804) + _1191) * cbLight._m0[_2839].y) * _2904) * _2527) + ((((cbLight._m0[_2751].y * _2495) * ((_2801 * _2804) + _1191)) * _2825) * _2540);
    float _2916 = (((((_2885 * _2805) + _1192) * cbLight._m0[_2839].z) * _2904) * _2527) + ((((cbLight._m0[_2751].z * _2497) * ((_2801 * _2805) + _1192)) * _2825) * _2540);
    float _2972;
    float _2974;
    float _2976;
    if (_2580)
    {
        _2972 = _2914;
        _2974 = _2915;
        _2976 = _2916;
    }
    else
    {
        uint _2978 = _2504 + 2u;
        uint _2982 = _2504 + 10u;
        float _2996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2978].w)) * _1043) * 0.949999988079071044921875);
        float _2997 = _2996 * _2996;
        float _2998 = cbLight._m0[_2978].x + _1119;
        float _2999 = cbLight._m0[_2978].y + _1120;
        float _3000 = cbLight._m0[_2978].z + _1121;
        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
        float _3005 = _3004 * _2998;
        float _3006 = _3004 * _2999;
        float _3007 = _3004 * _3000;
        float _3008 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2978].xyz));
        float _4958 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
        float _3011 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
        float _3012 = dot(vec3(_1040, _1041, _1042), vec3(_3005, _3006, _3007));
        float _4969 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        float _3015 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
        float _3016 = dot(vec3(cbLight._m0[_2978].xyz), vec3(_3005, _3006, _3007));
        float _4980 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        float _3020 = _2997 * _2997;
        float _3024 = ((_3015 * _3015) * (_3020 + (-1.0))) + 1.0;
        float _3031 = exp2(log2(1.0 - (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0)))) * 5.0);
        float _3038 = 1.0 - _2997;
        float _3048 = (0.5 / (((_2780 * ((_3011 * _3038) + _2997)) + 9.9999999392252902907785028219223e-09) + (((_2780 * _3038) + _2997) * _3011))) * _3011;
        float _4991 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3050 = (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0))) * (_3020 / ((_3024 * _3024) * 3.141590118408203125));
        float _3051 = isnan(1.0) ? _2519 : (isnan(_2519) ? 1.0 : min(_2519, 1.0));
        _2972 = (((((_3031 * _2802) + _1189) * cbLight._m0[_2982].x) * _3050) * _3051) + _2914;
        _2974 = (((((_3031 * _2804) + _1191) * cbLight._m0[_2982].y) * _3050) * _3051) + _2915;
        _2976 = (((((_3031 * _2805) + _1192) * cbLight._m0[_2982].z) * _3050) * _3051) + _2916;
    }
    float _3082;
    float _3084;
    float _3086;
    if (_2689)
    {
        _3082 = _2972;
        _3084 = _2974;
        _3086 = _2976;
    }
    else
    {
        uint _3093 = _2504 + 3u;
        uint _3097 = _2504 + 11u;
        float _3111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3093].w)) * _1043) * 0.949999988079071044921875);
        float _3112 = _3111 * _3111;
        float _3113 = cbLight._m0[_3093].x + _1119;
        float _3114 = cbLight._m0[_3093].y + _1120;
        float _3115 = cbLight._m0[_3093].z + _1121;
        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
        float _3120 = _3119 * _3113;
        float _3121 = _3119 * _3114;
        float _3122 = _3119 * _3115;
        float _3123 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_3093].xyz));
        float _5007 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
        float _3126 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
        float _3127 = dot(vec3(_1040, _1041, _1042), vec3(_3120, _3121, _3122));
        float _5018 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
        float _3130 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
        float _3131 = dot(vec3(cbLight._m0[_3093].xyz), vec3(_3120, _3121, _3122));
        float _5029 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
        float _3135 = _3112 * _3112;
        float _3139 = ((_3130 * _3130) * (_3135 + (-1.0))) + 1.0;
        float _3146 = exp2(log2(1.0 - (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0)))) * 5.0);
        float _3153 = 1.0 - _3112;
        float _3163 = (0.5 / (((_2780 * ((_3126 * _3153) + _3112)) + 9.9999999392252902907785028219223e-09) + (((_2780 * _3153) + _3112) * _3126))) * _3126;
        float _5040 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
        float _3165 = (isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0))) * (_3135 / ((_3139 * _3139) * 3.141590118408203125));
        float _3166 = isnan(1.0) ? _2520 : (isnan(_2520) ? 1.0 : min(_2520, 1.0));
        _3082 = (((((_3146 * _2802) + _1189) * cbLight._m0[_3097].x) * _3165) * _3166) + _2972;
        _3084 = (((((_3146 * _2804) + _1191) * cbLight._m0[_3097].y) * _3165) * _3166) + _2974;
        _3086 = (((((_3146 * _2805) + _1192) * cbLight._m0[_3097].z) * _3165) * _3166) + _2976;
    }
    float _3232;
    float _3234;
    float _3236;
    float _3238;
    float _3240;
    float _3242;
    if (_2502.y == 0u)
    {
        uvec4 _3187 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3188 = _3187.x;
        uint _3199 = uint((float(_3187.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1128) / _3188))) + floor(float(uint(cbSceneParam._m0[85u].x * _1127) / _3188)));
        float _3209 = (log2(_2280 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3210 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
        uint _3213 = uint(isnan(14.0) ? _3210 : (isnan(_3210) ? 14.0 : min(_3210, 14.0)));
        uvec4 _3218 = texelFetch(g_lightClusterGridBuffer, int(((_3213 << 2u) + (_3199 << 6u)) >> 2u));
        uint _3219 = _3218.x;
        uint _3220 = _3187.z;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        float _3309;
        if (((((1u << ((_3220 >> 4u) & 15u)) + 4294967295u) & _3219) == 0u) || ((_3220 & 240u) == 0u))
        {
            _3299 = 0.0;
            _3301 = 0.0;
            _3303 = 0.0;
            _3305 = 0.0;
            _3307 = 0.0;
            _3309 = 0.0;
        }
        else
        {
            float _3300;
            float _3302;
            float _3304;
            float _3306;
            float _3308;
            float _3310;
            float _3444 = 0.0;
            float _3445 = 0.0;
            float _3446 = 0.0;
            float _3447 = 0.0;
            float _3448 = 0.0;
            float _3449 = 0.0;
            uint _3450 = 0u;
            uint _3459;
            bool _3460;
            for (;;)
            {
                _3459 = texelFetch(g_lightClassification, int((((_3213 << 5u) + (_3199 << 9u)) + (_3450 << 2u)) >> 2u)).x;
                _3460 = _3459 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3460)
                {
                    frontier_phi_66_pred = _3449;
                    frontier_phi_66_pred_1 = _3448;
                    frontier_phi_66_pred_2 = _3447;
                    frontier_phi_66_pred_3 = _3446;
                    frontier_phi_66_pred_4 = _3445;
                    frontier_phi_66_pred_5 = _3444;
                }
                else
                {
                    float _3568;
                    float _3569;
                    float _3570;
                    float _3571;
                    float _3572;
                    float _3573;
                    uint _3574;
                    _3568 = _3444;
                    _3569 = _3445;
                    _3570 = _3446;
                    _3571 = _3447;
                    _3572 = _3448;
                    _3573 = _3449;
                    _3574 = _3459;
                    float _3500;
                    float _3501;
                    float _3502;
                    float _3503;
                    float _3504;
                    float _3505;
                    for (;;)
                    {
                        uint _3578 = uint(findLSB(_3574)) + (_3450 << 5u);
                        uint _3575 = (_3574 + 4294967295u) & _3574;
                        uint _3580 = _3578 * 48u;
                        vec4 _3594 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3580)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 3u)).x));
                        uint _3600 = (_3578 * 48u) + 4u;
                        vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3600)).x, texelFetch(g_PointLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3600 + 3u)).x));
                        uint _3619 = (_3578 * 48u) + 8u;
                        vec3 _3630 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3619)).x, texelFetch(g_PointLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3619 + 2u)).x));
                        float _3634 = _3594.x - _2278;
                        float _3635 = _3594.y - _2279;
                        float _3636 = _3594.z - _2280;
                        float _3637 = dot(vec3(_3634, _3635, _3636), vec3(_3634, _3635, _3636));
                        float _3640 = inversesqrt(_3637);
                        float _3641 = _3640 * _3634;
                        float _3642 = _3640 * _3635;
                        float _3643 = _3640 * _3636;
                        float _3644 = dot(vec3(_1146, _1149, _1152), vec3(_3641, _3642, _3643));
                        float _3649 = 1.0 - (_3637 * _3594.w);
                        float _5066 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                        float _3650 = isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0));
                        float _3651 = sqrt(_3637) * _3613.w;
                        float _3654 = 1.39999997615814208984375 / (_3651 + 1.39999997615814208984375);
                        float _3655 = _3654 * _3654;
                        float _3658 = ((1.0 - _3655) * _3644) + _3655;
                        float _3661 = _3651 * _3651;
                        float _3665 = ((isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0))) * _3650) / ((_3661 * 0.699999988079071044921875) + 1.0);
                        float _3669 = (-0.0) - _2278;
                        float _3670 = (-0.0) - _2279;
                        float _3671 = (-0.0) - _2280;
                        float _3675 = inversesqrt(dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671)));
                        float _3676 = _3675 * _3669;
                        float _3677 = _3675 * _3670;
                        float _3678 = _3675 * _3671;
                        float _3685 = exp2(log2(1.0 / ((_3661 * 3.5) + 5.0)) * 0.25);
                        float _3686 = 1.0 - _1221;
                        float _3693 = sqrt(1.0 - ((1.0 - (_3686 * _3686)) * (1.0 - (_3685 * _3685))));
                        float _3694 = _3693 * _3693;
                        float _3695 = _3694 * _3694;
                        float _3696 = _3676 + _3641;
                        float _3697 = _3677 + _3642;
                        float _3698 = _3678 + _3643;
                        float _3702 = inversesqrt(dot(vec3(_3696, _3697, _3698), vec3(_3696, _3697, _3698)));
                        float _3706 = dot(vec3(_1146, _1149, _1152), vec3(_3676, _3677, _3678));
                        float _5082 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                        float _3709 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                        float _3710 = dot(vec3(_1146, _1149, _1152), vec3(_3702 * _3696, _3702 * _3697, _3702 * _3698));
                        float _5093 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                        float _3713 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
                        float _3717 = ((_3713 * _3713) * (_3695 + (-1.0))) + 1.0;
                        float _3718 = _3654 * _3694;
                        float _3719 = _3718 * _3718;
                        float _3722 = ((1.0 - _3719) * _3644) + _3719;
                        float _5104 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                        float _3723 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
                        float _3724 = 1.0 - _3694;
                        float _3734 = (0.5 / (((_3723 * ((_3709 * _3724) + _3694)) + 9.9999999392252902907785028219223e-09) + (((_3723 * _3724) + _3694) * _3709))) * _3723;
                        float _5115 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                        float _3745 = (((_3695 * 3.1415927410125732421875) * (isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0)))) / ((_3717 * _3717) * ((_3661 * 2.1991131305694580078125) + 3.141590118408203125))) * _3650;
                        _3503 = (_3665 * _3613.x) + _3571;
                        _3504 = (_3665 * _3613.y) + _3572;
                        _3505 = (_3665 * _3613.z) + _3573;
                        _3500 = (_3745 * _3630.x) + _3568;
                        _3501 = (_3745 * _3630.y) + _3569;
                        _3502 = (_3745 * _3630.z) + _3570;
                        if (_3575 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3568 = _3500;
                            _3569 = _3501;
                            _3570 = _3502;
                            _3571 = _3503;
                            _3572 = _3504;
                            _3573 = _3505;
                            _3574 = _3575;
                        }
                    }
                    frontier_phi_66_pred = _3505;
                    frontier_phi_66_pred_1 = _3504;
                    frontier_phi_66_pred_2 = _3503;
                    frontier_phi_66_pred_3 = _3502;
                    frontier_phi_66_pred_4 = _3501;
                    frontier_phi_66_pred_5 = _3500;
                }
                _3310 = frontier_phi_66_pred;
                _3308 = frontier_phi_66_pred_1;
                _3306 = frontier_phi_66_pred_2;
                _3304 = frontier_phi_66_pred_3;
                _3302 = frontier_phi_66_pred_4;
                _3300 = frontier_phi_66_pred_5;
                uint _3451 = _3450 + 1u;
                if (_3451 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3444 = _3300;
                    _3445 = _3302;
                    _3446 = _3304;
                    _3447 = _3306;
                    _3448 = _3308;
                    _3449 = _3310;
                    _3450 = _3451;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3299 = _3300;
            _3301 = _3302;
            _3303 = _3304;
            _3305 = _3306;
            _3307 = _3308;
            _3309 = _3310;
        }
        uvec4 _3313 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3314 = _3313.z;
        uint _3316 = (_3314 >> 8u) & 15u;
        float _3412;
        float _3414;
        float _3416;
        float _3418;
        float _3420;
        float _3422;
        if (((4294967295u << _3316) & _3219) == 0u)
        {
            _3412 = _3299;
            _3414 = _3301;
            _3416 = _3303;
            _3418 = _3305;
            _3420 = _3307;
            _3422 = _3309;
        }
        else
        {
            float _3437 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
            float _3438 = _3437 * _2278;
            float _3439 = _3437 * _2279;
            float _3440 = _3437 * _2280;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3316 < ((_3314 >> 12u) & 15u))
            {
                float _3413;
                float _3415;
                float _3417;
                float _3419;
                float _3421;
                float _3423;
                float _3551 = _3299;
                float _3552 = _3301;
                float _3553 = _3303;
                float _3554 = _3305;
                float _3555 = _3307;
                float _3556 = _3309;
                uint _3557 = _3316;
                uint _3566;
                bool _3567;
                for (;;)
                {
                    _3566 = texelFetch(g_lightClassification, int((((_3213 << 5u) + (_3199 << 9u)) + (_3557 << 2u)) >> 2u)).x;
                    _3567 = _3566 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3567)
                    {
                        frontier_phi_72_pred = _3556;
                        frontier_phi_72_pred_1 = _3555;
                        frontier_phi_72_pred_2 = _3554;
                        frontier_phi_72_pred_3 = _3553;
                        frontier_phi_72_pred_4 = _3552;
                        frontier_phi_72_pred_5 = _3551;
                    }
                    else
                    {
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _4043;
                        float _4044;
                        float _4045;
                        float _4046;
                        float _4047;
                        float _4048;
                        float _3763 = _3551;
                        float _3764 = _3552;
                        float _3765 = _3553;
                        float _3766 = _3554;
                        float _3767 = _3555;
                        float _3768 = _3556;
                        uint _3769 = _3566;
                        uint _3770;
                        vec4 _3795;
                        float _3796;
                        vec4 _3811;
                        vec3 _3823;
                        vec4 _3838;
                        vec4 _3853;
                        float _3899;
                        bool _3900;
                        for (;;)
                        {
                            uint _3780 = ((_3557 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3769));
                            _3770 = (_3769 + 4294967295u) & _3769;
                            uint _3782 = _3780 * 40u;
                            _3795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 3u)).x));
                            _3796 = _3795.w;
                            uint _3798 = (_3780 * 40u) + 4u;
                            _3811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 3u)).x));
                            uint _3813 = (_3780 * 40u) + 8u;
                            _3823 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 2u)).x));
                            uint _3825 = (_3780 * 40u) + 16u;
                            _3838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 3u)).x));
                            uint _3840 = (_3780 * 40u) + 20u;
                            _3853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 3u)).x));
                            uint _3855 = (_3780 * 40u) + 24u;
                            vec4 _3868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 3u)).x));
                            uint _3874 = (_3780 * 40u) + 28u;
                            vec4 _3887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 3u)).x));
                            _3899 = fma(_2280, _3887.z, fma(_2279, _3887.y, _3887.x * _2278)) + _3887.w;
                            _3900 = !((fma(_2280, _3868.z, fma(_2279, _3868.y, _3868.x * _2278)) + _3868.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3900)
                            {
                                float _3927 = _3795.x - _2278;
                                float _3928 = _3795.y - _2279;
                                float _3929 = _3795.z - _2280;
                                float _3930 = dot(vec3(_3927, _3928, _3929), vec3(_3927, _3928, _3929));
                                float _3933 = inversesqrt(_3930);
                                float _3934 = _3933 * _3927;
                                float _3935 = _3933 * _3928;
                                float _3936 = _3933 * _3929;
                                float _3940 = 1.0 - (_3930 / (_3796 * _3796));
                                float _5126 = isnan(0.0) ? _3940 : (isnan(_3940) ? 0.0 : max(_3940, 0.0));
                                float _3941 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
                                float _3945 = sqrt(_3930) * _3811.w;
                                float _3947 = 1.39999997615814208984375 / (_3945 + 1.39999997615814208984375);
                                float _3948 = _3947 * _3947;
                                float _3951 = ((1.0 - _3948) * dot(vec3(_3934, _3935, _3936), vec3(_1146, _1149, _1152))) + _3948;
                                float _3954 = _3945 * _3945;
                                float _3958 = (fma(_2280, _3838.z, fma(_2279, _3838.y, _3838.x * _2278)) + _3838.w) / _3899;
                                float _3959 = (fma(_2280, _3853.z, fma(_2279, _3853.y, _3853.x * _2278)) + _3853.w) / _3899;
                                float _3963 = 1.0 - dot(vec2(_3958, _3959), vec2(_3958, _3959));
                                float _5142 = isnan(0.0) ? _3963 : (isnan(_3963) ? 0.0 : max(_3963, 0.0));
                                float _3964 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
                                float _3965 = _3964 * (((isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0))) * _3941) / ((_3954 * 0.699999988079071044921875) + 1.0));
                                float _3977 = exp2(log2(1.0 / ((_3954 * 3.5) + 5.0)) * 0.25);
                                float _3978 = 1.0 - _1221;
                                float _3985 = sqrt(1.0 - ((1.0 - (_3978 * _3978)) * (1.0 - (_3977 * _3977))));
                                float _3986 = _3985 * _3985;
                                float _3987 = _3986 * _3986;
                                float _3988 = _3934 - _3438;
                                float _3989 = _3935 - _3439;
                                float _3990 = _3936 - _3440;
                                float _3994 = inversesqrt(dot(vec3(_3988, _3989, _3990), vec3(_3988, _3989, _3990)));
                                float _3998 = dot(vec3(_1146, _1149, _1152), vec3((-0.0) - _3438, (-0.0) - _3439, (-0.0) - _3440));
                                float _5153 = isnan(0.0) ? _3998 : (isnan(_3998) ? 0.0 : max(_3998, 0.0));
                                float _4001 = isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0));
                                float _4002 = dot(vec3(_1146, _1149, _1152), vec3(_3994 * _3988, _3994 * _3989, _3994 * _3990));
                                float _5164 = isnan(0.0) ? _4002 : (isnan(_4002) ? 0.0 : max(_4002, 0.0));
                                float _4005 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
                                float _4009 = ((_4005 * _4005) * (_3987 + (-1.0))) + 1.0;
                                float _4010 = _3947 * _3986;
                                float _4011 = _4010 * _4010;
                                float _4017 = ((1.0 - _4011) * dot(vec3(_1146, _1149, _1152), vec3(_3934, _3935, _3936))) + _4011;
                                float _5175 = isnan(0.0) ? _4017 : (isnan(_4017) ? 0.0 : max(_4017, 0.0));
                                float _4018 = isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0));
                                float _4019 = 1.0 - _3986;
                                float _4029 = (0.5 / (((_4018 * ((_4001 * _4019) + _3986)) + 9.9999999392252902907785028219223e-09) + (((_4018 * _4019) + _3986) * _4001))) * _4018;
                                float _5186 = isnan(0.0) ? _4029 : (isnan(_4029) ? 0.0 : max(_4029, 0.0));
                                float _4039 = (_3964 * _3941) * (((_3987 * 3.1415927410125732421875) * (isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0)))) / ((_4009 * _4009) * ((_3954 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3965 * _3811.y;
                                frontier_phi_78_pred_1 = _3965 * _3811.x;
                                frontier_phi_78_pred_2 = _4039 * _3823.z;
                                frontier_phi_78_pred_3 = _4039 * _3823.y;
                                frontier_phi_78_pred_4 = _4039 * _3823.x;
                                frontier_phi_78_pred_5 = _3965 * _3811.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4047 = frontier_phi_78_pred;
                            _4046 = frontier_phi_78_pred_1;
                            _4045 = frontier_phi_78_pred_2;
                            _4044 = frontier_phi_78_pred_3;
                            _4043 = frontier_phi_78_pred_4;
                            _4048 = frontier_phi_78_pred_5;
                            _3753 = _4046 + _3766;
                            _3754 = _4047 + _3767;
                            _3755 = _4048 + _3768;
                            _3750 = _4043 + _3763;
                            _3751 = _4044 + _3764;
                            _3752 = _4045 + _3765;
                            if (_3770 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3763 = _3750;
                                _3764 = _3751;
                                _3765 = _3752;
                                _3766 = _3753;
                                _3767 = _3754;
                                _3768 = _3755;
                                _3769 = _3770;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3755;
                        frontier_phi_72_pred_1 = _3754;
                        frontier_phi_72_pred_2 = _3753;
                        frontier_phi_72_pred_3 = _3752;
                        frontier_phi_72_pred_4 = _3751;
                        frontier_phi_72_pred_5 = _3750;
                    }
                    _3423 = frontier_phi_72_pred;
                    _3421 = frontier_phi_72_pred_1;
                    _3419 = frontier_phi_72_pred_2;
                    _3417 = frontier_phi_72_pred_3;
                    _3415 = frontier_phi_72_pred_4;
                    _3413 = frontier_phi_72_pred_5;
                    uint _3558 = _3557 + 1u;
                    if (_3558 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3551 = _3413;
                        _3552 = _3415;
                        _3553 = _3417;
                        _3554 = _3419;
                        _3555 = _3421;
                        _3556 = _3423;
                        _3557 = _3558;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3423;
                frontier_phi_60_61_ladder_1 = _3421;
                frontier_phi_60_61_ladder_2 = _3417;
                frontier_phi_60_61_ladder_3 = _3415;
                frontier_phi_60_61_ladder_4 = _3413;
                frontier_phi_60_61_ladder_5 = _3419;
            }
            else
            {
                frontier_phi_60_61_ladder = _3309;
                frontier_phi_60_61_ladder_1 = _3307;
                frontier_phi_60_61_ladder_2 = _3303;
                frontier_phi_60_61_ladder_3 = _3301;
                frontier_phi_60_61_ladder_4 = _3299;
                frontier_phi_60_61_ladder_5 = _3305;
            }
            _3412 = frontier_phi_60_61_ladder_4;
            _3414 = frontier_phi_60_61_ladder_3;
            _3416 = frontier_phi_60_61_ladder_2;
            _3418 = frontier_phi_60_61_ladder_5;
            _3420 = frontier_phi_60_61_ladder_1;
            _3422 = frontier_phi_60_61_ladder;
        }
        float _3427 = isnan(1.0) ? _1205 : (isnan(_1205) ? 1.0 : min(_1205, 1.0));
        _3232 = (_3427 * _3418) + _2744;
        _3234 = (_3427 * _3420) + _2746;
        _3236 = (_3427 * _3422) + _2748;
        _3238 = ((_3412 * _1189) * _3427) + _3082;
        _3240 = ((_3414 * _1191) * _3427) + _3084;
        _3242 = ((_3416 * _1192) * _3427) + _3086;
    }
    else
    {
        _3232 = _2744;
        _3234 = _2746;
        _3236 = _2748;
        _3238 = _3082;
        _3240 = _3084;
        _3242 = _3086;
    }
    float _5202 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _5213 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _5224 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    uint _3262 = _288 + 6u;
    float _3270 = _1127 / cbSceneParam._m0[86u].x;
    float _3271 = _1128 / cbSceneParam._m0[86u].y;
    vec4 _3285 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3270, _3271, (log2((isnan(cbSceneParam._m0[77u].w) ? _1062 : (isnan(_1062) ? cbSceneParam._m0[77u].w : min(_1062, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3287 = _3285.x;
    float _3288 = _3285.y;
    float _3289 = _3285.z;
    float _3290 = _3285.w;
    float _3362;
    float _3364;
    float _3366;
    float _3368;
    if (_1062 > cbSceneParam._m0[78u].w)
    {
        float _3324 = isnan(_1062) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1062 : min(cbSceneParam._m0[80u].w, _1062));
        float _3325 = _3324 / _1062;
        float _3336 = _3325 * _1112;
        float _3337 = _1113 * _3325;
        float _3338 = (-0.0) - _3337;
        float _3340 = _3325 * _1114;
        float _3342 = (cbSceneParam._m0[77u].w * _3338) / _3324;
        float _3343 = _3342 + cbSceneParam._m0[79u].w;
        float _3344 = cbSceneParam._m0[79u].w - _3337;
        float _3350 = sqrt(((_3336 * _3336) + (_3337 * _3337)) + (_3340 * _3340));
        float _3353 = (1.0 - (cbSceneParam._m0[77u].w / _3324)) * _3350;
        float _3358 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3360 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3513;
        if (abs((_3338 - _3342) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3513 = ((((_3343 > 0.0) ? exp2(_3358 * _3343) : (2.0 - exp2(_3360 * _3343))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3353;
        }
        else
        {
            float _3473 = 1.0 / cbSceneParam._m0[80u].x;
            float _3474 = isnan(_3344) ? _3343 : (isnan(_3343) ? _3344 : max(_3343, _3344));
            float _3475 = isnan(_3344) ? _3343 : (isnan(_3343) ? _3344 : min(_3343, _3344));
            float _3484 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : min(_3474, 0.0));
            float _3485 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : min(_3475, 0.0));
            _3513 = ((abs(_3350 / _3338) * cbSceneParam._m0[80u].y) * ((((_3484 - _3485) * 2.0) - ((exp2(_3358 * (isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0)))) - exp2(_3358 * (isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0))))) * _3473)) - ((exp2(_3360 * _3484) - exp2(_3360 * _3485)) * _3473))) + (_3353 * cbSceneParam._m0[80u].z);
        }
        vec4 _3515 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3270, _3271, 1.0), 0.0);
        float _3524 = exp2((_3513 * (-1.44269502162933349609375)) * (1.0 - _3515.w));
        float _3525 = log2(_3524);
        float _3541 = log2(_3290);
        _3362 = (exp2(_3541 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3525 * cbSceneParam._m0[78u].x)) * _3515.x) / cbSceneParam._m0[78u].x)) + _3287;
        _3364 = (exp2(_3541 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3525 * cbSceneParam._m0[78u].y)) * _3515.y) / cbSceneParam._m0[78u].y)) + _3288;
        _3366 = (exp2(_3541 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3525 * cbSceneParam._m0[78u].z)) * _3515.z) / cbSceneParam._m0[78u].z)) + _3289;
        _3368 = _3524 * _3290;
    }
    else
    {
        _3362 = _3287;
        _3364 = _3288;
        _3366 = _3289;
        _3368 = _3290;
    }
    float _3380 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3381 = _3380 == 3.0;
    float _3382 = log2(_3368);
    float _3389 = exp2(_3382 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0))) * (_3232 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1205))) + ((_3238 + ((isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0))) * _2011)) * cbPerFrame._m0[3u].x));
    float _3390 = exp2(_3382 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0))) * (_3234 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1205))) + ((_3240 + ((isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0))) * _2011)) * cbPerFrame._m0[3u].x));
    float _3391 = exp2(_3382 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0))) * (_3236 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1205))) + ((_3242 + ((isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0))) * _2011)) * cbPerFrame._m0[3u].x));
    float _3400 = (_3380 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3400 * (_3381 ? _3389 : (_3389 + (cbSceneParam._m0[72u].w * _3362)));
    SV_Target.y = _3400 * (_3381 ? _3390 : (_3390 + (cbSceneParam._m0[72u].w * _3364)));
    SV_Target.z = _3400 * (_3381 ? _3391 : (_3391 + (cbSceneParam._m0[72u].w * _3366)));
    SV_Target.w = cbInstanceData._m0[_3262].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3262].w;
}


