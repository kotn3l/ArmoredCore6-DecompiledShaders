#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1427;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4037 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4048 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4059 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _421 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _435 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _452 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _389.x) * 2.0) - ((((_423 - _435) * cbMtdParam._m0[23u].w) + _435) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4070 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _460 = (_453 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _461 = (_453 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _462 = (_453 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _479 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _499 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _501 = _499.x;
    float _511 = dot(vec4(_501, _499.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _525 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _389.y) * 2.0) - ((((_501 - _511) * cbMtdParam._m0[23u].w) + _511) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4081 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _533 = (_526 * ((_479.x * cbMtdParam._m0[13u].x) - _460)) + _460;
    float _534 = (_526 * ((_479.y * cbMtdParam._m0[13u].y) - _461)) + _461;
    float _535 = (_526 * ((_479.z * cbMtdParam._m0[13u].z) - _462)) + _462;
    float _539 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _533;
    float _542 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _534;
    float _545 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _535;
    float _552 = ((_533 - _539) * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) + _539;
    float _553 = ((_534 - _542) * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) + _542;
    float _554 = ((_535 - _545) * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) + _545;
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _608 = _606.x;
    float _609 = _606.y;
    float _610 = _606.z;
    float _617 = ((_589.x - _608) * _453) + _608;
    float _618 = ((_589.y - _609) * _453) + _609;
    float _619 = ((_589.z - _610) * _453) + _610;
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _644 = ((_631.z - _619) * _526) + _619;
    float _647 = ((((_631.x - _617) * _526) + _617) * 2.0) + (-1.0);
    float _648 = ((((_631.y - _618) * _526) + _618) * 2.0) + (-1.0);
    float _649 = dot(vec2(_647, _648), vec2(_647, _648));
    float _4092 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _654 = sqrt(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))));
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _686 = (_647 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_566.x * 2.0) + (-1.0)))) + (((_674.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _687 = (_648 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_566.y * 2.0) + (-1.0)))) + (((_674.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _701 = _699.x;
    float _702 = 1.0 - _701;
    float _731 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_701 - _702) * cbMtdParam._m0[24u].w) + _702) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4103 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _732 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _740 = ((((cbMtdParam._m0[10u].x - _552) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _732) + _552;
    float _741 = ((((cbMtdParam._m0[10u].y - _553) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _732) + _553;
    float _742 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _554)) * _732) + _554;
    vec4 _768 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _770 = _768.x;
    float _788 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _770) * _453) + _770;
    float _806 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _306) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _307) + cbTextureTilingScale._m0[21u].w)).x - _788) * _526) + _788;
    float _810 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _806) * cbMtdParam._m0[19u].z) + _806;
    float _812 = _810 - (_810 * _732);
    float _817 = (((_566.z - _644) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _644;
    float _821 = ((_674.z - _817) * cbMtdParam._m0[19u].w) + _817;
    float _825 = ((cbMtdParam._m0[23u].x - _821) * _732) + _821;
    vec4 _844 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _850 = (_844.x * 2.0) + (-1.0);
    float _851 = (_844.y * 2.0) + (-1.0);
    float _852 = dot(vec2(_850, _851), vec2(_850, _851));
    float _4114 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _868 = (_732 * (((cbMtdParam._m0[22u].z * _686) - _686) + _850)) + _686;
    float _869 = (_732 * (((cbMtdParam._m0[22u].z * _687) - _687) + _851)) + _687;
    float _870 = (_732 * (sqrt(1.0 - (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) - _654)) + _654;
    float _874 = cbMtdParam._m0[22u].x + _674.w;
    float _877 = fma(_870, _255 * NORMAL.x, fma(_869, _262 * TANGENT.x, (_248 * _240) * _868));
    float _880 = fma(_870, _255 * NORMAL.y, fma(_869, _262 * TANGENT.y, (_248 * _241) * _868));
    float _883 = fma(_870, _255 * NORMAL.z, fma(_869, _262 * TANGENT.z, (_248 * _242) * _868));
    float _887 = inversesqrt(dot(vec3(_877, _880, _883), vec3(_877, _880, _883)));
    float _888 = _887 * _877;
    float _889 = _887 * _880;
    float _890 = _887 * _883;
    float _4125 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _891 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4147 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4158 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4169 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4180 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _896 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _910 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _960 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _950);
    float _961 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _950);
    float _962 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _950);
    float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
    float _967 = _960 * _966;
    float _968 = _961 * _966;
    float _969 = _962 * _966;
    float _975 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _976 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _994 = fma(_890, cbSceneParam._m0[5u].z, fma(_889, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _888));
    float _997 = fma(_890, cbSceneParam._m0[6u].z, fma(_889, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _888));
    float _1000 = fma(_890, cbSceneParam._m0[7u].z, fma(_889, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _888));
    uint _1014 = (_287 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1020 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * cbInstanceData._m0[_1014].x;
    float _1021 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * cbInstanceData._m0[_1014].y;
    float _1022 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * cbInstanceData._m0[_1014].z;
    float _4191 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1023 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _4202 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1024 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _1026 = 1.0 - _896;
    float _1027 = _1023 * _1026;
    float _1028 = _1024 * _1026;
    float _1029 = _1025 * _1026;
    float _1034 = (_1023 + (-0.039999999105930328369140625)) * _896;
    float _1035 = (_1024 + (-0.039999999105930328369140625)) * _896;
    float _1036 = (_1025 + (-0.039999999105930328369140625)) * _896;
    float _1037 = _1034 + 0.039999999105930328369140625;
    float _1039 = _1035 + 0.039999999105930328369140625;
    float _1040 = _1036 + 0.039999999105930328369140625;
    vec4 _1049 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _975, cbSceneParam._m0[86u].y * _976));
    float _1053 = ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * TEXCOORD_5.w) * _1049.x;
    float _1054 = dot(vec3(_888, _889, _890), vec3(_967, _968, _969));
    float _1057 = _1054 * 2.0;
    float _1061 = (_1057 * _888) - _967;
    float _1062 = (_1057 * _889) - _968;
    float _1063 = (_1057 * _890) - _969;
    float _1067 = abs(dot(vec3(_967, _968, _969), vec3(_888, _889, _890)));
    float _4224 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1069 = sqrt(_891);
    float _1082 = exp2((_1069 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1069 * 3.0));
    float _1088 = (1.0 - _1082) * ((_1069 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1089 = _1082 * _1069;
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1426;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1151 = fma(_1125, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1117));
        float _1155 = fma(_1125, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1117));
        float _1159 = fma(_1125, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1117));
        float _1184 = _1117 + _888;
        float _1185 = _1121 + _889;
        float _1186 = _1125 + _890;
        float _1196 = fma(_1186, cbModelParam._m0[26u].z, fma(_1185, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1184)) - _1151;
        float _1197 = fma(_1186, cbModelParam._m0[27u].z, fma(_1185, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1184)) - _1155;
        float _1198 = fma(_1186, cbModelParam._m0[28u].z, fma(_1185, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1184)) - _1159;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1151 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1155 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[34u].z) + ((((((_1159 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1254 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1220.x + (-0.5));
        float _1256 = _1254 * (_1220.y + (-0.5));
        float _1257 = _1254 * (_1220.z + (-0.5));
        float _1264 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1227.x + (-0.5));
        float _1266 = _1264 * (_1227.y + (-0.5));
        float _1267 = _1264 * (_1227.z + (-0.5));
        float _1274 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1234.x + (-0.5));
        float _1276 = _1274 * (_1234.y + (-0.5));
        float _1277 = _1274 * (_1234.z + (-0.5));
        float _1284 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1241.x + (-0.5));
        float _1286 = _1284 * (_1241.y + (-0.5));
        float _1287 = _1284 * (_1241.z + (-0.5));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = _1255 * 0.5;
        float _1292 = _1265 * 0.5;
        float _1293 = _1275 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1308 = (dot(vec3(_888, _889, _890), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1318 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4272 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1320 + 1.0))) + _1325) * _1288;
        float _1335 = _1256 * 0.5;
        float _1336 = _1266 * 0.5;
        float _1337 = _1276 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_888, _889, _890), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4305 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1362 + 1.0))) + _1367) * _1289;
        float _1377 = _1257 * 0.5;
        float _1378 = _1267 * 0.5;
        float _1379 = _1277 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_888, _889, _890), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4338 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1404 + 1.0))) + _1409) * _1290;
        _1426 = _1257;
        _1428 = _1256;
        _1429 = _1255;
        _1430 = _1267;
        _1431 = _1266;
        _1432 = _1265;
        _1433 = _1277;
        _1434 = _1276;
        _1435 = _1275;
        _1436 = _1290;
        _1437 = _1289;
        _1438 = _1288;
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
    }
    else
    {
        _1426 = _1427;
        _1428 = _1427;
        _1429 = _1427;
        _1430 = _1427;
        _1431 = _1427;
        _1432 = _1427;
        _1433 = _1427;
        _1434 = _1427;
        _1435 = _1427;
        _1436 = _1427;
        _1437 = _1427;
        _1438 = _1427;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1465 = fma(_1125, cbModelParam._m0[30u].z, fma(_1121, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1117));
        float _1469 = fma(_1125, cbModelParam._m0[31u].z, fma(_1121, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1117));
        float _1473 = fma(_1125, cbModelParam._m0[32u].z, fma(_1121, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1117));
        float _1496 = _1117 + _888;
        float _1497 = _1121 + _889;
        float _1498 = _1125 + _890;
        float _1508 = fma(_1498, cbModelParam._m0[30u].z, fma(_1497, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1496)) - _1465;
        float _1509 = fma(_1498, cbModelParam._m0[31u].z, fma(_1497, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1496)) - _1469;
        float _1510 = fma(_1498, cbModelParam._m0[32u].z, fma(_1497, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1496)) - _1473;
        float _1514 = inversesqrt(dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510)));
        float _1527 = ((_1514 * _1508) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1465 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1528 = ((_1514 * _1509) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1469 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1529 = ((_1514 * _1510) / cbModelParam._m0[35u].z) + ((((((_1473 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        float _1564 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1531.x + (-0.5));
        float _1566 = _1564 * (_1531.y + (-0.5));
        float _1567 = _1564 * (_1531.z + (-0.5));
        float _1574 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1538.x + (-0.5));
        float _1576 = _1574 * (_1538.y + (-0.5));
        float _1577 = _1574 * (_1538.z + (-0.5));
        float _1584 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1545.x + (-0.5));
        float _1586 = _1584 * (_1545.y + (-0.5));
        float _1587 = _1584 * (_1545.z + (-0.5));
        float _1594 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1552.x + (-0.5));
        float _1596 = _1594 * (_1552.y + (-0.5));
        float _1597 = _1594 * (_1552.z + (-0.5));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = _1565 * 0.5;
        float _1602 = _1575 * 0.5;
        float _1603 = _1585 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_888, _889, _890), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4379 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4390 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4401 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_1628 + 1.0))) + _1633) * _1598;
        float _1643 = _1566 * 0.5;
        float _1644 = _1576 * 0.5;
        float _1645 = _1586 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_888, _889, _890), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4434 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1670 + 1.0))) + _1675) * _1599;
        float _1685 = _1567 * 0.5;
        float _1686 = _1577 * 0.5;
        float _1687 = _1587 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_888, _889, _890), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4445 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4456 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4467 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_1712 + 1.0))) + _1717) * _1600;
        _1734 = _1567;
        _1735 = _1566;
        _1736 = _1565;
        _1737 = _1577;
        _1738 = _1576;
        _1739 = _1575;
        _1740 = _1587;
        _1741 = _1586;
        _1742 = _1585;
        _1743 = _1600;
        _1744 = _1599;
        _1745 = _1598;
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
    }
    else
    {
        _1734 = _1427;
        _1735 = _1427;
        _1736 = _1427;
        _1737 = _1427;
        _1738 = _1427;
        _1739 = _1427;
        _1740 = _1427;
        _1741 = _1427;
        _1742 = _1427;
        _1743 = _1427;
        _1744 = _1427;
        _1745 = _1427;
        _1746 = 0.0;
        _1747 = 0.0;
        _1748 = 0.0;
    }
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1439)) + _1439;
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1440)) + _1440;
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1441)) + _1441;
    float _1781 = fma(_1760, cbSceneParam._m0[89u].z, fma(_1759, cbSceneParam._m0[89u].y, _1758 * cbSceneParam._m0[89u].x));
    float _1784 = fma(_1760, cbSceneParam._m0[90u].z, fma(_1759, cbSceneParam._m0[90u].y, _1758 * cbSceneParam._m0[90u].x));
    float _1787 = fma(_1760, cbSceneParam._m0[91u].z, fma(_1759, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1758));
    float _1802 = _1061 * 0.5;
    float _1803 = _1062 * 0.5;
    float _1804 = _1063 * 0.5;
    float _1805 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1808 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1811 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1845;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1818 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1426, _1430, _1433, _1436));
        float _1822 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1428, _1431, _1434, _1437));
        float _1826 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1429, _1432, _1435, _1438));
        float _1833 = dot(vec4(cbModelParam._m0[39u]), vec4(_1802, _1803, _1804, 1.0));
        _1845 = dot(vec3(isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1833) ? 0.0 : (isnan(0.0) ? _1833 : max(0.0, _1833))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1845 = 1.0;
    }
    float _1856;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1847 = dot(vec4(cbModelParam._m0[40u]), vec4(_1802, _1803, _1804, 1.0));
        _1856 = dot(vec3(isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1847) ? 0.0 : (isnan(0.0) ? _1847 : max(0.0, _1847))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1856 = 1.0;
    }
    float _1860 = (_1856 * cbModelParam._m0[1u].x) + (_1845 * (1.0 - cbModelParam._m0[1u].x));
    float _1870 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _891);
    float _1871 = isnan(_1870) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1870 : min(cbModelParam._m0[25u].z, _1870));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1920 = fma(_1125, cbModelParam._m0[13u].z, fma(_1121, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1117)) + cbModelParam._m0[13u].w;
        float _1924 = fma(_1125, cbModelParam._m0[14u].z, fma(_1121, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1117)) + cbModelParam._m0[14u].w;
        float _1928 = fma(_1125, cbModelParam._m0[15u].z, fma(_1121, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1117)) + cbModelParam._m0[15u].w;
        float _1931 = fma(_1063, cbModelParam._m0[13u].z, fma(_1062, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061));
        float _1934 = fma(_1063, cbModelParam._m0[14u].z, fma(_1062, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061));
        float _1937 = fma(_1063, cbModelParam._m0[15u].z, fma(_1062, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061));
        float _1965;
        if (_1931 > 0.0)
        {
            _1965 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1965 = frontier_phi_14_12_ladder;
        }
        float _2137;
        if (_1934 > 0.0)
        {
            _2137 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2137 = frontier_phi_23_19_ladder;
        }
        float _2432;
        if (_1937 > 0.0)
        {
            _2432 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2432 = frontier_phi_35_30_ladder;
        }
        float _2434 = isnan(_2137) ? _1965 : (isnan(_1965) ? _2137 : min(_1965, _2137));
        float _2435 = isnan(_2432) ? _2434 : (isnan(_2434) ? _2432 : min(_2434, _2432));
        float _2439 = (_2435 * _1931) + _1920;
        float _2440 = (_2435 * _1934) + _1924;
        float _2441 = (_2435 * _1937) + _1928;
        float _2442 = _2435 * 9.9999997473787516355514526367188e-05;
        float _2444 = (-1.0) - _2442;
        float _2446 = _2442 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2441 > _2446) || ((_2441 < _2444) || ((_2440 > _2446) || ((_2440 < _2444) || ((_2439 < _2444) || (_2439 > _2446))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2586 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2441, cbModelParam._m0[9u].z, fma(_2440, cbModelParam._m0[9u].y, _2439 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2441, cbModelParam._m0[10u].z, fma(_2440, cbModelParam._m0[10u].y, _2439 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2441, cbModelParam._m0[11u].z, fma(_2440, cbModelParam._m0[11u].y, _2439 * cbModelParam._m0[11u].x))), _1871);
            frontier_phi_13_35_ladder = _2586.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2586.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2586.x * cbModelParam._m0[1u].y;
        }
        _1953 = frontier_phi_13_35_ladder_2;
        _1955 = frontier_phi_13_35_ladder_1;
        _1957 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1061, _1062, _1063), _1871);
        _1953 = _1941.x * cbModelParam._m0[1u].y;
        _1955 = _1941.y * cbModelParam._m0[1u].y;
        _1957 = _1941.z * cbModelParam._m0[1u].y;
    }
    float _1961 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _891);
    float _1962 = isnan(_1961) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1961 : min(cbModelParam._m0[25u].w, _1961));
    float _2052;
    float _2054;
    float _2056;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2016 = fma(_1125, cbModelParam._m0[21u].z, fma(_1121, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1117)) + cbModelParam._m0[21u].w;
        float _2020 = fma(_1125, cbModelParam._m0[22u].z, fma(_1121, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1117)) + cbModelParam._m0[22u].w;
        float _2024 = fma(_1125, cbModelParam._m0[23u].z, fma(_1121, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1117)) + cbModelParam._m0[23u].w;
        float _2027 = fma(_1063, cbModelParam._m0[21u].z, fma(_1062, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061));
        float _2030 = fma(_1063, cbModelParam._m0[22u].z, fma(_1062, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061));
        float _2033 = fma(_1063, cbModelParam._m0[23u].z, fma(_1062, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061));
        float _2142;
        if (_2027 > 0.0)
        {
            _2142 = abs((1.0 - _2016) / _2027);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2016 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2142 = frontier_phi_25_21_ladder;
        }
        float _2459;
        if (_2030 > 0.0)
        {
            _2459 = abs((1.0 - _2020) / _2030);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2020 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2459 = frontier_phi_37_32_ladder;
        }
        float _2797;
        if (_2033 > 0.0)
        {
            _2797 = abs((1.0 - _2024) / _2033);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2024 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2797 = frontier_phi_47_44_ladder;
        }
        float _2799 = isnan(_2459) ? _2142 : (isnan(_2142) ? _2459 : min(_2142, _2459));
        float _2800 = isnan(_2797) ? _2799 : (isnan(_2799) ? _2797 : min(_2799, _2797));
        float _2804 = (_2800 * _2027) + _2016;
        float _2805 = (_2800 * _2030) + _2020;
        float _2806 = (_2800 * _2033) + _2024;
        float _2807 = _2800 * 9.9999997473787516355514526367188e-05;
        float _2808 = (-1.0) - _2807;
        float _2810 = _2807 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2806 > _2810) || ((_2806 < _2808) || ((_2805 > _2810) || ((_2805 < _2808) || ((_2804 < _2808) || (_2804 > _2810))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2806, cbModelParam._m0[17u].z, fma(_2805, cbModelParam._m0[17u].y, _2804 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2806, cbModelParam._m0[18u].z, fma(_2805, cbModelParam._m0[18u].y, _2804 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2806, cbModelParam._m0[19u].z, fma(_2805, cbModelParam._m0[19u].y, _2804 * cbModelParam._m0[19u].x))), _1962);
            frontier_phi_22_47_ladder = _2928.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2928.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2928.x * cbModelParam._m0[1u].z;
        }
        _2052 = frontier_phi_22_47_ladder_2;
        _2054 = frontier_phi_22_47_ladder_1;
        _2056 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2036 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1061, _1062, _1063), _1962);
        _2052 = _2036.x * cbModelParam._m0[1u].z;
        _2054 = _2036.y * cbModelParam._m0[1u].z;
        _2056 = _2036.z * cbModelParam._m0[1u].z;
    }
    float _2069 = (((_1088 * _1037) + _1089) * _1053) * ((cbModelParam._m0[1u].w * (_2052 - _1953)) + _1953);
    float _2071 = (((_1088 * _1039) + _1089) * _1053) * ((cbModelParam._m0[1u].w * (_2054 - _1955)) + _1955);
    float _2073 = (((_1088 * _1040) + _1089) * _1053) * ((cbModelParam._m0[1u].w * (_2056 - _1957)) + _1957);
    float _2076 = fma(_2073, cbSceneParam._m0[89u].z, fma(_2071, cbSceneParam._m0[89u].y, _2069 * cbSceneParam._m0[89u].x));
    float _2079 = fma(_2073, cbSceneParam._m0[90u].z, fma(_2071, cbSceneParam._m0[90u].y, _2069 * cbSceneParam._m0[90u].x));
    float _2082 = fma(_2073, cbSceneParam._m0[91u].z, fma(_2071, cbSceneParam._m0[91u].y, _2069 * cbSceneParam._m0[91u].x));
    float _2116 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2124 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2128 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2129 = _2116 / _2128;
    float _2130 = _2120 / _2128;
    float _2131 = _2124 / _2128;
    float _2278;
    float _2279;
    float _2280;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2158 = ((uint(_2131 > cbSceneParam._m0[59u].y) + uint(_2131 > cbSceneParam._m0[59u].x)) + uint(_2131 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2159 = _2158 + 43u;
        uint _2167 = _2158 + 44u;
        uint _2175 = _2158 + 45u;
        uint _2183 = _2158 + 46u;
        float _2194 = fma(_2128, cbSceneParam._m0[_2159].w, fma(_2124, cbSceneParam._m0[_2159].z, fma(_2120, cbSceneParam._m0[_2159].y, _2116 * cbSceneParam._m0[_2159].x)));
        float _2198 = fma(_2128, cbSceneParam._m0[_2167].w, fma(_2124, cbSceneParam._m0[_2167].z, fma(_2120, cbSceneParam._m0[_2167].y, _2116 * cbSceneParam._m0[_2167].x)));
        float _2206 = fma(_2128, cbSceneParam._m0[_2183].w, fma(_2124, cbSceneParam._m0[_2183].z, fma(_2120, cbSceneParam._m0[_2183].y, _2116 * cbSceneParam._m0[_2183].x)));
        float _2211 = cbSceneParam._m0[33u].z * _2206;
        float _2213 = cbSceneParam._m0[33u].w * _2206;
        float _2216 = fma(_2128, cbSceneParam._m0[_2175].w, fma(_2124, cbSceneParam._m0[_2175].z, fma(_2120, cbSceneParam._m0[_2175].y, _2116 * cbSceneParam._m0[_2175].x))) / _2206;
        float _2264 = (cbSceneParam._m0[33u].x - sqrt(((_2130 * _2130) + (_2129 * _2129)) + (_2131 * _2131))) * cbSceneParam._m0[33u].y;
        float _4593 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2271 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2211 + _2194) / _2206, (_2213 + _2198) / _2206), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2213 + _2194) / _2206, (_2198 - _2211) / _2206), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 - _2211) / _2206, (_2198 - _2213) / _2206), _2216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 - _2213) / _2206, (_2211 + _2198) / _2206), _2216), 0.0)).x), vec4(0.25)));
        _2278 = 1.0 - (_2271 * cbSceneParam._m0[34u].x);
        _2279 = 1.0 - (_2271 * cbSceneParam._m0[34u].y);
        _2280 = 1.0 - (_2271 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2278 = 1.0;
        _2279 = 1.0;
        _2280 = 1.0;
    }
    float _2344;
    float _2346;
    float _2348;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2332 = fma(_2128, cbSceneParam._m0[63u].w, fma(_2124, cbSceneParam._m0[63u].z, fma(_2120, cbSceneParam._m0[63u].y, _2116 * cbSceneParam._m0[63u].x)));
        float _2333 = fma(_2128, cbSceneParam._m0[60u].w, fma(_2124, cbSceneParam._m0[60u].z, fma(_2120, cbSceneParam._m0[60u].y, _2116 * cbSceneParam._m0[60u].x))) / _2332;
        float _2334 = fma(_2128, cbSceneParam._m0[61u].w, fma(_2124, cbSceneParam._m0[61u].z, fma(_2120, cbSceneParam._m0[61u].y, _2116 * cbSceneParam._m0[61u].x))) / _2332;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2333 >= cbSceneParam._m0[64u].x) && (_2334 >= cbSceneParam._m0[64u].y)) && (_2333 <= cbSceneParam._m0[64u].z)) && (_2334 <= cbSceneParam._m0[64u].w))
        {
            float _2472 = fma(_2128, cbSceneParam._m0[62u].w, fma(_2124, cbSceneParam._m0[62u].z, fma(_2120, cbSceneParam._m0[62u].y, _2116 * cbSceneParam._m0[62u].x))) / _2332;
            float _2476 = isnan(cbSceneParam._m0[41u].w) ? _2472 : (isnan(_2472) ? cbSceneParam._m0[41u].w : max(_2472, cbSceneParam._m0[41u].w));
            float _2519 = (cbSceneParam._m0[33u].x - sqrt(((_2130 * _2130) + (_2129 * _2129)) + (_2131 * _2131))) * cbSceneParam._m0[33u].y;
            float _4609 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
            float _2526 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2333, cbSceneParam._m0[33u].w + _2334), _2476), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2333, _2334 - cbSceneParam._m0[33u].z), _2476), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2333 - cbSceneParam._m0[33u].z, _2334 - cbSceneParam._m0[33u].w), _2476), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2333 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2334), _2476), 0.0)).x), vec4(0.25)));
            float _2530 = 1.0 - (_2526 * cbSceneParam._m0[34u].x);
            float _2531 = 1.0 - (_2526 * cbSceneParam._m0[34u].y);
            float _2532 = 1.0 - (_2526 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2532) ? _2280 : (isnan(_2280) ? _2532 : min(_2280, _2532));
            frontier_phi_34_33_ladder_1 = isnan(_2531) ? _2279 : (isnan(_2279) ? _2531 : min(_2279, _2531));
            frontier_phi_34_33_ladder_2 = isnan(_2530) ? _2278 : (isnan(_2278) ? _2530 : min(_2278, _2530));
        }
        else
        {
            frontier_phi_34_33_ladder = _2280;
            frontier_phi_34_33_ladder_1 = _2279;
            frontier_phi_34_33_ladder_2 = _2278;
        }
        _2344 = frontier_phi_34_33_ladder_2;
        _2346 = frontier_phi_34_33_ladder_1;
        _2348 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2344 = _2278;
        _2346 = _2279;
        _2348 = _2280;
    }
    uvec4 _2353 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2355 = _2353.x * 14u;
    uint _2356 = _2355 + 13u;
    float _2363 = _1053 + (-1.0);
    float _2368 = (cbLight._m0[_2356].x * _2363) + 1.0;
    float _2369 = (cbLight._m0[_2356].y * _2363) + 1.0;
    float _2370 = (cbLight._m0[_2356].z * _2363) + 1.0;
    float _2371 = (cbLight._m0[_2356].w * _2363) + 1.0;
    uint _2372 = _2355 + 5u;
    float _2378 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
    uint _2382 = _2355 + 4u;
    float _2391 = isnan(1.0) ? _2368 : (isnan(_2368) ? 1.0 : min(_2368, 1.0));
    uint _2395 = _2355 | 1u;
    float _2406 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_888, _889, _890));
    float _2409 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_888, _889, _890));
    float _4645 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _4656 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2414 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * 0.3183098733425140380859375;
    float _2416 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * 0.3183098733425140380859375;
    float _2423 = ((cbLight._m0[_2372].x * _2378) * _2416) + (((cbLight._m0[_2382].x * _2344) * _2391) * _2414);
    float _2424 = ((_2378 * cbLight._m0[_2372].y) * _2416) + (((cbLight._m0[_2382].y * _2346) * _2391) * _2414);
    float _2425 = ((_2378 * cbLight._m0[_2372].z) * _2416) + (((cbLight._m0[_2382].z * _2348) * _2391) * _2414);
    uvec4 _2429 = floatBitsToUint(cbLight._m0[_2355 + 12u]);
    bool _2431 = _2429.x == 0u;
    float _2533;
    float _2535;
    float _2537;
    if (_2431)
    {
        _2533 = _2423;
        _2535 = _2424;
        _2537 = _2425;
    }
    else
    {
        uint _2541 = _2355 + 6u;
        float _2557 = (dot(vec3(cbLight._m0[_2355 + 2u].xyz), vec3(_888, _889, _890)) * 0.5) + 0.5;
        float _2558 = _2557 * _2557;
        float _4667 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2559 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2560 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
        _2533 = (((cbLight._m0[_2541].x * 0.3183098733425140380859375) * _2559) * _2560) + _2423;
        _2535 = (((cbLight._m0[_2541].y * 0.3183098733425140380859375) * _2559) * _2560) + _2424;
        _2537 = (((cbLight._m0[_2541].z * 0.3183098733425140380859375) * _2559) * _2560) + _2425;
    }
    bool _2540 = _2429.y == 0u;
    float _2595;
    float _2597;
    float _2599;
    if (_2540)
    {
        _2595 = _2533;
        _2597 = _2535;
        _2599 = _2537;
    }
    else
    {
        uint _2768 = _2355 + 7u;
        float _2784 = (dot(vec3(cbLight._m0[_2355 + 3u].xyz), vec3(_888, _889, _890)) * 0.5) + 0.5;
        float _2785 = _2784 * _2784;
        float _4683 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2786 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2787 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2595 = (((cbLight._m0[_2768].x * 0.3183098733425140380859375) * _2786) * _2787) + _2533;
        _2597 = (((cbLight._m0[_2768].y * 0.3183098733425140380859375) * _2786) * _2787) + _2535;
        _2599 = (((cbLight._m0[_2768].z * 0.3183098733425140380859375) * _2786) * _2787) + _2537;
    }
    uint _2602 = _2355 + 8u;
    float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _891) * 0.949999988079071044921875);
    float _2616 = _2615 * _2615;
    float _2617 = cbLight._m0[_2355].x + _967;
    float _2618 = cbLight._m0[_2355].y + _968;
    float _2619 = cbLight._m0[_2355].z + _969;
    float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
    float _2624 = _2623 * _2617;
    float _2625 = _2623 * _2618;
    float _2626 = _2623 * _2619;
    float _2627 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2355].xyz));
    float _4699 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _4710 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _2631 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2632 = dot(vec3(_888, _889, _890), vec3(_2624, _2625, _2626));
    float _4721 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2635 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2636 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2624, _2625, _2626));
    float _4732 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2640 = _2616 * _2616;
    float _2644 = ((_2635 * _2635) * (_2640 + (-1.0))) + 1.0;
    float _2652 = exp2(log2(1.0 - (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) * 5.0);
    float _2653 = 0.959999978542327880859375 - _1034;
    float _2655 = 0.959999978542327880859375 - _1035;
    float _2656 = 0.959999978542327880859375 - _1036;
    float _2663 = 1.0 - _2616;
    float _2674 = (0.5 / (((_2631 * ((_2630 * _2663) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2631 * _2663) + _2616) * _2630))) * _2630;
    float _4743 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2676 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2640 / ((_2644 * _2644) * 3.141590118408203125));
    uint _2690 = _2355 + 9u;
    float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _891) * 0.949999988079071044921875);
    float _2702 = _2701 * _2701;
    float _2703 = cbLight._m0[_2395].x + _967;
    float _2704 = cbLight._m0[_2395].y + _968;
    float _2705 = cbLight._m0[_2395].z + _969;
    float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
    float _2710 = _2709 * _2703;
    float _2711 = _2709 * _2704;
    float _2712 = _2709 * _2705;
    float _2713 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2395].xyz));
    float _4754 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2716 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
    float _2717 = dot(vec3(_888, _889, _890), vec3(_2710, _2711, _2712));
    float _4765 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2720 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _2721 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2710, _2711, _2712));
    float _4776 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2725 = _2702 * _2702;
    float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
    float _2736 = exp2(log2(1.0 - (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) * 5.0);
    float _2743 = 1.0 - _2702;
    float _2753 = (0.5 / (((_2631 * ((_2716 * _2743) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2631 * _2743) + _2702) * _2716))) * _2716;
    float _4787 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2755 = (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
    float _2765 = (((((_2736 * _2653) + _1037) * cbLight._m0[_2690].x) * _2755) * _2378) + ((((cbLight._m0[_2602].x * _2344) * ((_2652 * _2653) + _1037)) * _2676) * _2391);
    float _2766 = (((((_2736 * _2655) + _1039) * cbLight._m0[_2690].y) * _2755) * _2378) + ((((cbLight._m0[_2602].y * _2346) * ((_2652 * _2655) + _1039)) * _2676) * _2391);
    float _2767 = (((((_2736 * _2656) + _1040) * cbLight._m0[_2690].z) * _2755) * _2378) + ((((cbLight._m0[_2602].z * _2348) * ((_2652 * _2656) + _1040)) * _2676) * _2391);
    float _2823;
    float _2825;
    float _2827;
    if (_2431)
    {
        _2823 = _2765;
        _2825 = _2766;
        _2827 = _2767;
    }
    else
    {
        uint _2829 = _2355 + 2u;
        uint _2833 = _2355 + 10u;
        float _2847 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2829].w)) * _891) * 0.949999988079071044921875);
        float _2848 = _2847 * _2847;
        float _2849 = cbLight._m0[_2829].x + _967;
        float _2850 = cbLight._m0[_2829].y + _968;
        float _2851 = cbLight._m0[_2829].z + _969;
        float _2855 = inversesqrt(dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851)));
        float _2856 = _2855 * _2849;
        float _2857 = _2855 * _2850;
        float _2858 = _2855 * _2851;
        float _2859 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2829].xyz));
        float _4798 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2862 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2863 = dot(vec3(_888, _889, _890), vec3(_2856, _2857, _2858));
        float _4809 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2866 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2867 = dot(vec3(cbLight._m0[_2829].xyz), vec3(_2856, _2857, _2858));
        float _4820 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2871 = _2848 * _2848;
        float _2875 = ((_2866 * _2866) * (_2871 + (-1.0))) + 1.0;
        float _2882 = exp2(log2(1.0 - (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) * 5.0);
        float _2889 = 1.0 - _2848;
        float _2899 = (0.5 / (((_2631 * ((_2862 * _2889) + _2848)) + 9.9999999392252902907785028219223e-09) + (((_2631 * _2889) + _2848) * _2862))) * _2862;
        float _4831 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2901 = (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2871 / ((_2875 * _2875) * 3.141590118408203125));
        float _2902 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
        _2823 = (((((_2882 * _2653) + _1037) * cbLight._m0[_2833].x) * _2901) * _2902) + _2765;
        _2825 = (((((_2882 * _2655) + _1039) * cbLight._m0[_2833].y) * _2901) * _2902) + _2766;
        _2827 = (((((_2882 * _2656) + _1040) * cbLight._m0[_2833].z) * _2901) * _2902) + _2767;
    }
    float _2933;
    float _2935;
    float _2937;
    if (_2540)
    {
        _2933 = _2823;
        _2935 = _2825;
        _2937 = _2827;
    }
    else
    {
        uint _2944 = _2355 + 3u;
        uint _2948 = _2355 + 11u;
        float _2962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2944].w)) * _891) * 0.949999988079071044921875);
        float _2963 = _2962 * _2962;
        float _2964 = cbLight._m0[_2944].x + _967;
        float _2965 = cbLight._m0[_2944].y + _968;
        float _2966 = cbLight._m0[_2944].z + _969;
        float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
        float _2971 = _2970 * _2964;
        float _2972 = _2970 * _2965;
        float _2973 = _2970 * _2966;
        float _2974 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2944].xyz));
        float _4847 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2977 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
        float _2978 = dot(vec3(_888, _889, _890), vec3(_2971, _2972, _2973));
        float _4858 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2981 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
        float _2982 = dot(vec3(cbLight._m0[_2944].xyz), vec3(_2971, _2972, _2973));
        float _4869 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2986 = _2963 * _2963;
        float _2990 = ((_2981 * _2981) * (_2986 + (-1.0))) + 1.0;
        float _2997 = exp2(log2(1.0 - (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) * 5.0);
        float _3004 = 1.0 - _2963;
        float _3014 = (0.5 / (((_2631 * ((_2977 * _3004) + _2963)) + 9.9999999392252902907785028219223e-09) + (((_2631 * _3004) + _2963) * _2977))) * _2977;
        float _4880 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3016 = (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2986 / ((_2990 * _2990) * 3.141590118408203125));
        float _3017 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2933 = (((((_2997 * _2653) + _1037) * cbLight._m0[_2948].x) * _3016) * _3017) + _2823;
        _2935 = (((((_2997 * _2655) + _1039) * cbLight._m0[_2948].y) * _3016) * _3017) + _2825;
        _2937 = (((((_2997 * _2656) + _1040) * cbLight._m0[_2948].z) * _3016) * _3017) + _2827;
    }
    float _3083;
    float _3085;
    float _3087;
    float _3089;
    float _3091;
    float _3093;
    if (_2353.y == 0u)
    {
        uvec4 _3038 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3039 = _3038.x;
        uint _3050 = uint((float(_3038.y) * floor(float(uint(cbSceneParam._m0[85u].y * _976) / _3039))) + floor(float(uint(cbSceneParam._m0[85u].x * _975) / _3039)));
        float _3060 = (log2(_2131 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3061 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
        uint _3064 = uint(isnan(14.0) ? _3061 : (isnan(_3061) ? 14.0 : min(_3061, 14.0)));
        uvec4 _3069 = texelFetch(g_lightClusterGridBuffer, int(((_3064 << 2u) + (_3050 << 6u)) >> 2u));
        uint _3070 = _3069.x;
        uint _3071 = _3038.z;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        if (((((1u << ((_3071 >> 4u) & 15u)) + 4294967295u) & _3070) == 0u) || ((_3071 & 240u) == 0u))
        {
            _3150 = 0.0;
            _3152 = 0.0;
            _3154 = 0.0;
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
        }
        else
        {
            float _3151;
            float _3153;
            float _3155;
            float _3157;
            float _3159;
            float _3161;
            float _3295 = 0.0;
            float _3296 = 0.0;
            float _3297 = 0.0;
            float _3298 = 0.0;
            float _3299 = 0.0;
            float _3300 = 0.0;
            uint _3301 = 0u;
            uint _3310;
            bool _3311;
            for (;;)
            {
                _3310 = texelFetch(g_lightClassification, int((((_3064 << 5u) + (_3050 << 9u)) + (_3301 << 2u)) >> 2u)).x;
                _3311 = _3310 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3311)
                {
                    frontier_phi_66_pred = _3300;
                    frontier_phi_66_pred_1 = _3299;
                    frontier_phi_66_pred_2 = _3298;
                    frontier_phi_66_pred_3 = _3297;
                    frontier_phi_66_pred_4 = _3296;
                    frontier_phi_66_pred_5 = _3295;
                }
                else
                {
                    float _3419;
                    float _3420;
                    float _3421;
                    float _3422;
                    float _3423;
                    float _3424;
                    uint _3425;
                    _3419 = _3295;
                    _3420 = _3296;
                    _3421 = _3297;
                    _3422 = _3298;
                    _3423 = _3299;
                    _3424 = _3300;
                    _3425 = _3310;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    for (;;)
                    {
                        uint _3429 = uint(findLSB(_3425)) + (_3301 << 5u);
                        uint _3426 = (_3425 + 4294967295u) & _3425;
                        uint _3431 = _3429 * 48u;
                        vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3431)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 3u)).x));
                        uint _3451 = (_3429 * 48u) + 4u;
                        vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3451)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 3u)).x));
                        uint _3470 = (_3429 * 48u) + 8u;
                        vec3 _3481 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3470)).x, texelFetch(g_PointLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3470 + 2u)).x));
                        float _3485 = _3445.x - _2129;
                        float _3486 = _3445.y - _2130;
                        float _3487 = _3445.z - _2131;
                        float _3488 = dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487));
                        float _3491 = inversesqrt(_3488);
                        float _3492 = _3491 * _3485;
                        float _3493 = _3491 * _3486;
                        float _3494 = _3491 * _3487;
                        float _3495 = dot(vec3(_994, _997, _1000), vec3(_3492, _3493, _3494));
                        float _3500 = 1.0 - (_3488 * _3445.w);
                        float _4906 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                        float _3501 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                        float _3502 = sqrt(_3488) * _3464.w;
                        float _3505 = 1.39999997615814208984375 / (_3502 + 1.39999997615814208984375);
                        float _3506 = _3505 * _3505;
                        float _3509 = ((1.0 - _3506) * _3495) + _3506;
                        float _3512 = _3502 * _3502;
                        float _3516 = ((isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0))) * _3501) / ((_3512 * 0.699999988079071044921875) + 1.0);
                        float _3520 = (-0.0) - _2129;
                        float _3521 = (-0.0) - _2130;
                        float _3522 = (-0.0) - _2131;
                        float _3526 = inversesqrt(dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522)));
                        float _3527 = _3526 * _3520;
                        float _3528 = _3526 * _3521;
                        float _3529 = _3526 * _3522;
                        float _3536 = exp2(log2(1.0 / ((_3512 * 3.5) + 5.0)) * 0.25);
                        float _3537 = 1.0 - _1069;
                        float _3544 = sqrt(1.0 - ((1.0 - (_3537 * _3537)) * (1.0 - (_3536 * _3536))));
                        float _3545 = _3544 * _3544;
                        float _3546 = _3545 * _3545;
                        float _3547 = _3527 + _3492;
                        float _3548 = _3528 + _3493;
                        float _3549 = _3529 + _3494;
                        float _3553 = inversesqrt(dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549)));
                        float _3557 = dot(vec3(_994, _997, _1000), vec3(_3527, _3528, _3529));
                        float _4922 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                        float _3560 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                        float _3561 = dot(vec3(_994, _997, _1000), vec3(_3553 * _3547, _3553 * _3548, _3553 * _3549));
                        float _4933 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3564 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3568 = ((_3564 * _3564) * (_3546 + (-1.0))) + 1.0;
                        float _3569 = _3505 * _3545;
                        float _3570 = _3569 * _3569;
                        float _3573 = ((1.0 - _3570) * _3495) + _3570;
                        float _4944 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                        float _3574 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3575 = 1.0 - _3545;
                        float _3585 = (0.5 / (((_3574 * ((_3560 * _3575) + _3545)) + 9.9999999392252902907785028219223e-09) + (((_3574 * _3575) + _3545) * _3560))) * _3574;
                        float _4955 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                        float _3596 = (((_3546 * 3.1415927410125732421875) * (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0)))) / ((_3568 * _3568) * ((_3512 * 2.1991131305694580078125) + 3.141590118408203125))) * _3501;
                        _3354 = (_3516 * _3464.x) + _3422;
                        _3355 = (_3516 * _3464.y) + _3423;
                        _3356 = (_3516 * _3464.z) + _3424;
                        _3351 = (_3596 * _3481.x) + _3419;
                        _3352 = (_3596 * _3481.y) + _3420;
                        _3353 = (_3596 * _3481.z) + _3421;
                        if (_3426 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3419 = _3351;
                            _3420 = _3352;
                            _3421 = _3353;
                            _3422 = _3354;
                            _3423 = _3355;
                            _3424 = _3356;
                            _3425 = _3426;
                        }
                    }
                    frontier_phi_66_pred = _3356;
                    frontier_phi_66_pred_1 = _3355;
                    frontier_phi_66_pred_2 = _3354;
                    frontier_phi_66_pred_3 = _3353;
                    frontier_phi_66_pred_4 = _3352;
                    frontier_phi_66_pred_5 = _3351;
                }
                _3161 = frontier_phi_66_pred;
                _3159 = frontier_phi_66_pred_1;
                _3157 = frontier_phi_66_pred_2;
                _3155 = frontier_phi_66_pred_3;
                _3153 = frontier_phi_66_pred_4;
                _3151 = frontier_phi_66_pred_5;
                uint _3302 = _3301 + 1u;
                if (_3302 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3295 = _3151;
                    _3296 = _3153;
                    _3297 = _3155;
                    _3298 = _3157;
                    _3299 = _3159;
                    _3300 = _3161;
                    _3301 = _3302;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3150 = _3151;
            _3152 = _3153;
            _3154 = _3155;
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
        }
        uvec4 _3164 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3165 = _3164.z;
        uint _3167 = (_3165 >> 8u) & 15u;
        float _3263;
        float _3265;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        if (((4294967295u << _3167) & _3070) == 0u)
        {
            _3263 = _3150;
            _3265 = _3152;
            _3267 = _3154;
            _3269 = _3156;
            _3271 = _3158;
            _3273 = _3160;
        }
        else
        {
            float _3288 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
            float _3289 = _3288 * _2129;
            float _3290 = _3288 * _2130;
            float _3291 = _3288 * _2131;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3167 < ((_3165 >> 12u) & 15u))
            {
                float _3264;
                float _3266;
                float _3268;
                float _3270;
                float _3272;
                float _3274;
                float _3402 = _3150;
                float _3403 = _3152;
                float _3404 = _3154;
                float _3405 = _3156;
                float _3406 = _3158;
                float _3407 = _3160;
                uint _3408 = _3167;
                uint _3417;
                bool _3418;
                for (;;)
                {
                    _3417 = texelFetch(g_lightClassification, int((((_3064 << 5u) + (_3050 << 9u)) + (_3408 << 2u)) >> 2u)).x;
                    _3418 = _3417 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3418)
                    {
                        frontier_phi_72_pred = _3407;
                        frontier_phi_72_pred_1 = _3406;
                        frontier_phi_72_pred_2 = _3405;
                        frontier_phi_72_pred_3 = _3404;
                        frontier_phi_72_pred_4 = _3403;
                        frontier_phi_72_pred_5 = _3402;
                    }
                    else
                    {
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3899;
                        float _3614 = _3402;
                        float _3615 = _3403;
                        float _3616 = _3404;
                        float _3617 = _3405;
                        float _3618 = _3406;
                        float _3619 = _3407;
                        uint _3620 = _3417;
                        uint _3621;
                        vec4 _3646;
                        float _3647;
                        vec4 _3662;
                        vec3 _3674;
                        vec4 _3689;
                        vec4 _3704;
                        float _3750;
                        bool _3751;
                        for (;;)
                        {
                            uint _3631 = ((_3408 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3620));
                            _3621 = (_3620 + 4294967295u) & _3620;
                            uint _3633 = _3631 * 40u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            _3647 = _3646.w;
                            uint _3649 = (_3631 * 40u) + 4u;
                            _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            uint _3664 = (_3631 * 40u) + 8u;
                            _3674 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x));
                            uint _3676 = (_3631 * 40u) + 16u;
                            _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3691 = (_3631 * 40u) + 20u;
                            _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            uint _3706 = (_3631 * 40u) + 24u;
                            vec4 _3719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 3u)).x));
                            uint _3725 = (_3631 * 40u) + 28u;
                            vec4 _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            _3750 = fma(_2131, _3738.z, fma(_2130, _3738.y, _3738.x * _2129)) + _3738.w;
                            _3751 = !((fma(_2131, _3719.z, fma(_2130, _3719.y, _3719.x * _2129)) + _3719.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3751)
                            {
                                float _3778 = _3646.x - _2129;
                                float _3779 = _3646.y - _2130;
                                float _3780 = _3646.z - _2131;
                                float _3781 = dot(vec3(_3778, _3779, _3780), vec3(_3778, _3779, _3780));
                                float _3784 = inversesqrt(_3781);
                                float _3785 = _3784 * _3778;
                                float _3786 = _3784 * _3779;
                                float _3787 = _3784 * _3780;
                                float _3791 = 1.0 - (_3781 / (_3647 * _3647));
                                float _4966 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3792 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3796 = sqrt(_3781) * _3662.w;
                                float _3798 = 1.39999997615814208984375 / (_3796 + 1.39999997615814208984375);
                                float _3799 = _3798 * _3798;
                                float _3802 = ((1.0 - _3799) * dot(vec3(_3785, _3786, _3787), vec3(_994, _997, _1000))) + _3799;
                                float _3805 = _3796 * _3796;
                                float _3809 = (fma(_2131, _3689.z, fma(_2130, _3689.y, _3689.x * _2129)) + _3689.w) / _3750;
                                float _3810 = (fma(_2131, _3704.z, fma(_2130, _3704.y, _3704.x * _2129)) + _3704.w) / _3750;
                                float _3814 = 1.0 - dot(vec2(_3809, _3810), vec2(_3809, _3810));
                                float _4982 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3815 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3816 = _3815 * (((isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0))) * _3792) / ((_3805 * 0.699999988079071044921875) + 1.0));
                                float _3828 = exp2(log2(1.0 / ((_3805 * 3.5) + 5.0)) * 0.25);
                                float _3829 = 1.0 - _1069;
                                float _3836 = sqrt(1.0 - ((1.0 - (_3829 * _3829)) * (1.0 - (_3828 * _3828))));
                                float _3837 = _3836 * _3836;
                                float _3838 = _3837 * _3837;
                                float _3839 = _3785 - _3289;
                                float _3840 = _3786 - _3290;
                                float _3841 = _3787 - _3291;
                                float _3845 = inversesqrt(dot(vec3(_3839, _3840, _3841), vec3(_3839, _3840, _3841)));
                                float _3849 = dot(vec3(_994, _997, _1000), vec3((-0.0) - _3289, (-0.0) - _3290, (-0.0) - _3291));
                                float _4993 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3852 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3853 = dot(vec3(_994, _997, _1000), vec3(_3845 * _3839, _3845 * _3840, _3845 * _3841));
                                float _5004 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3856 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3860 = ((_3856 * _3856) * (_3838 + (-1.0))) + 1.0;
                                float _3861 = _3798 * _3837;
                                float _3862 = _3861 * _3861;
                                float _3868 = ((1.0 - _3862) * dot(vec3(_994, _997, _1000), vec3(_3785, _3786, _3787))) + _3862;
                                float _5015 = isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0));
                                float _3869 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3870 = 1.0 - _3837;
                                float _3880 = (0.5 / (((_3869 * ((_3852 * _3870) + _3837)) + 9.9999999392252902907785028219223e-09) + (((_3869 * _3870) + _3837) * _3852))) * _3869;
                                float _5026 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3890 = (_3815 * _3792) * (((_3838 * 3.1415927410125732421875) * (isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0)))) / ((_3860 * _3860) * ((_3805 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3816 * _3662.y;
                                frontier_phi_78_pred_1 = _3816 * _3662.x;
                                frontier_phi_78_pred_2 = _3890 * _3674.z;
                                frontier_phi_78_pred_3 = _3890 * _3674.y;
                                frontier_phi_78_pred_4 = _3890 * _3674.x;
                                frontier_phi_78_pred_5 = _3816 * _3662.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3898 = frontier_phi_78_pred;
                            _3897 = frontier_phi_78_pred_1;
                            _3896 = frontier_phi_78_pred_2;
                            _3895 = frontier_phi_78_pred_3;
                            _3894 = frontier_phi_78_pred_4;
                            _3899 = frontier_phi_78_pred_5;
                            _3604 = _3897 + _3617;
                            _3605 = _3898 + _3618;
                            _3606 = _3899 + _3619;
                            _3601 = _3894 + _3614;
                            _3602 = _3895 + _3615;
                            _3603 = _3896 + _3616;
                            if (_3621 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3621;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3606;
                        frontier_phi_72_pred_1 = _3605;
                        frontier_phi_72_pred_2 = _3604;
                        frontier_phi_72_pred_3 = _3603;
                        frontier_phi_72_pred_4 = _3602;
                        frontier_phi_72_pred_5 = _3601;
                    }
                    _3274 = frontier_phi_72_pred;
                    _3272 = frontier_phi_72_pred_1;
                    _3270 = frontier_phi_72_pred_2;
                    _3268 = frontier_phi_72_pred_3;
                    _3266 = frontier_phi_72_pred_4;
                    _3264 = frontier_phi_72_pred_5;
                    uint _3409 = _3408 + 1u;
                    if (_3409 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3402 = _3264;
                        _3403 = _3266;
                        _3404 = _3268;
                        _3405 = _3270;
                        _3406 = _3272;
                        _3407 = _3274;
                        _3408 = _3409;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3274;
                frontier_phi_60_61_ladder_1 = _3272;
                frontier_phi_60_61_ladder_2 = _3268;
                frontier_phi_60_61_ladder_3 = _3266;
                frontier_phi_60_61_ladder_4 = _3264;
                frontier_phi_60_61_ladder_5 = _3270;
            }
            else
            {
                frontier_phi_60_61_ladder = _3160;
                frontier_phi_60_61_ladder_1 = _3158;
                frontier_phi_60_61_ladder_2 = _3154;
                frontier_phi_60_61_ladder_3 = _3152;
                frontier_phi_60_61_ladder_4 = _3150;
                frontier_phi_60_61_ladder_5 = _3156;
            }
            _3263 = frontier_phi_60_61_ladder_4;
            _3265 = frontier_phi_60_61_ladder_3;
            _3267 = frontier_phi_60_61_ladder_2;
            _3269 = frontier_phi_60_61_ladder_5;
            _3271 = frontier_phi_60_61_ladder_1;
            _3273 = frontier_phi_60_61_ladder;
        }
        float _3278 = isnan(1.0) ? _1053 : (isnan(_1053) ? 1.0 : min(_1053, 1.0));
        _3083 = (_3278 * _3269) + _2595;
        _3085 = (_3278 * _3271) + _2597;
        _3087 = (_3278 * _3273) + _2599;
        _3089 = ((_3263 * _1037) * _3278) + _2933;
        _3091 = ((_3265 * _1039) * _3278) + _2935;
        _3093 = ((_3267 * _1040) * _3278) + _2937;
    }
    else
    {
        _3083 = _2595;
        _3085 = _2597;
        _3087 = _2599;
        _3089 = _2933;
        _3091 = _2935;
        _3093 = _2937;
    }
    float _5042 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _5053 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _5064 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    uint _3113 = _287 + 6u;
    float _3121 = _975 / cbSceneParam._m0[86u].x;
    float _3122 = _976 / cbSceneParam._m0[86u].y;
    vec4 _3136 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3121, _3122, (log2((isnan(cbSceneParam._m0[77u].w) ? _910 : (isnan(_910) ? cbSceneParam._m0[77u].w : min(_910, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3138 = _3136.x;
    float _3139 = _3136.y;
    float _3140 = _3136.z;
    float _3141 = _3136.w;
    float _3213;
    float _3215;
    float _3217;
    float _3219;
    if (_910 > cbSceneParam._m0[78u].w)
    {
        float _3175 = isnan(_910) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _910 : min(cbSceneParam._m0[80u].w, _910));
        float _3176 = _3175 / _910;
        float _3187 = _3176 * _960;
        float _3188 = _961 * _3176;
        float _3189 = (-0.0) - _3188;
        float _3191 = _3176 * _962;
        float _3193 = (cbSceneParam._m0[77u].w * _3189) / _3175;
        float _3194 = _3193 + cbSceneParam._m0[79u].w;
        float _3195 = cbSceneParam._m0[79u].w - _3188;
        float _3201 = sqrt(((_3187 * _3187) + (_3188 * _3188)) + (_3191 * _3191));
        float _3204 = (1.0 - (cbSceneParam._m0[77u].w / _3175)) * _3201;
        float _3209 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3211 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3364;
        if (abs((_3189 - _3193) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3364 = ((((_3194 > 0.0) ? exp2(_3209 * _3194) : (2.0 - exp2(_3211 * _3194))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3204;
        }
        else
        {
            float _3324 = 1.0 / cbSceneParam._m0[80u].x;
            float _3325 = isnan(_3195) ? _3194 : (isnan(_3194) ? _3195 : max(_3194, _3195));
            float _3326 = isnan(_3195) ? _3194 : (isnan(_3194) ? _3195 : min(_3194, _3195));
            float _3335 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : min(_3325, 0.0));
            float _3336 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : min(_3326, 0.0));
            _3364 = ((abs(_3201 / _3189) * cbSceneParam._m0[80u].y) * ((((_3335 - _3336) * 2.0) - ((exp2(_3209 * (isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0)))) - exp2(_3209 * (isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0))))) * _3324)) - ((exp2(_3211 * _3335) - exp2(_3211 * _3336)) * _3324))) + (_3204 * cbSceneParam._m0[80u].z);
        }
        vec4 _3366 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3121, _3122, 1.0), 0.0);
        float _3375 = exp2((_3364 * (-1.44269502162933349609375)) * (1.0 - _3366.w));
        float _3376 = log2(_3375);
        float _3392 = log2(_3141);
        _3213 = (exp2(_3392 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3376 * cbSceneParam._m0[78u].x)) * _3366.x) / cbSceneParam._m0[78u].x)) + _3138;
        _3215 = (exp2(_3392 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3376 * cbSceneParam._m0[78u].y)) * _3366.y) / cbSceneParam._m0[78u].y)) + _3139;
        _3217 = (exp2(_3392 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3376 * cbSceneParam._m0[78u].z)) * _3366.z) / cbSceneParam._m0[78u].z)) + _3140;
        _3219 = _3375 * _3141;
    }
    else
    {
        _3213 = _3138;
        _3215 = _3139;
        _3217 = _3140;
        _3219 = _3141;
    }
    float _3231 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3232 = _3231 == 3.0;
    float _3233 = log2(_3219);
    float _3240 = exp2(_3233 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0))) * (_3083 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1053))) + ((_3089 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1860)) * cbPerFrame._m0[3u].x));
    float _3241 = exp2(_3233 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_3085 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1053))) + ((_3091 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1860)) * cbPerFrame._m0[3u].x));
    float _3242 = exp2(_3233 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3087 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1053))) + ((_3093 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1860)) * cbPerFrame._m0[3u].x));
    float _3251 = (_3231 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3251 * (_3232 ? _3240 : (_3240 + (cbSceneParam._m0[72u].w * _3213)));
    SV_Target.y = _3251 * (_3232 ? _3241 : (_3241 + (cbSceneParam._m0[72u].w * _3215)));
    SV_Target.z = _3251 * (_3232 ? _3242 : (_3242 + (cbSceneParam._m0[72u].w * _3217)));
    SV_Target.w = cbInstanceData._m0[_3113].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3113].w;
}


