#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1423;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3773 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3784 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3795 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _410 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _412 = _410.x;
    float _424 = dot(vec4(_412, _410.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _441 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _378.x) * 2.0) - ((((_412 - _424) * cbMtdParam._m0[23u].w) + _424) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3806 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _449 = (_442 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _450 = (_442 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _451 = (_442 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _468 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _488 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _490 = _488.x;
    float _500 = dot(vec4(_490, _488.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _514 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _378.y) * 2.0) - ((((_490 - _500) * cbMtdParam._m0[23u].w) + _500) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3817 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _522 = (_515 * ((_468.x * cbMtdParam._m0[13u].x) - _449)) + _449;
    float _523 = (_515 * ((_468.y * cbMtdParam._m0[13u].y) - _450)) + _450;
    float _524 = (_515 * ((_468.z * cbMtdParam._m0[13u].z) - _451)) + _451;
    float _528 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _522;
    float _531 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _523;
    float _534 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _524;
    float _541 = ((_522 - _528) * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) + _528;
    float _542 = ((_523 - _531) * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) + _531;
    float _543 = ((_524 - _534) * (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) + _534;
    vec4 _560 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _604 = _602.x;
    float _605 = _602.y;
    float _606 = _602.z;
    float _613 = ((_585.x - _604) * _442) + _604;
    float _614 = ((_585.y - _605) * _442) + _605;
    float _615 = ((_585.z - _606) * _442) + _606;
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _640 = ((_627.z - _615) * _515) + _615;
    float _643 = ((((_627.x - _613) * _515) + _613) * 2.0) + (-1.0);
    float _644 = ((((_627.y - _614) * _515) + _614) * 2.0) + (-1.0);
    float _645 = dot(vec2(_643, _644), vec2(_643, _644));
    float _3828 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _650 = sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _680 = (_643 + ((((_560.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_668.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _681 = (_644 + ((((_560.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_668.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _684 = fma(_650, _243, fma(_681, _250, _680 * _236));
    float _687 = fma(_650, _244, fma(_681, _251, _680 * _237));
    float _690 = fma(_650, _245, fma(_681, _252, _680 * _238));
    float _694 = inversesqrt(dot(vec3(_684, _687, _690), vec3(_684, _687, _690)));
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _723 = _721.x;
    float _724 = 1.0 - _723;
    float _733 = (cbMtdParam._m0[19u].x + dot(vec4(_694 * _684, _694 * _687, _694 * _690, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_723 - _724) * cbMtdParam._m0[24u].z) + _724) * cbMtdParam._m0[21u].z);
    float _3839 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _734 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _741 = (_734 * (cbMtdParam._m0[17u].x - _541)) + _541;
    float _742 = (_734 * (cbMtdParam._m0[17u].y - _542)) + _542;
    float _743 = (_734 * (cbMtdParam._m0[17u].z - _543)) + _543;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _771 = _769.x;
    float _789 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w)).x - _771) * _442) + _771;
    float _806 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _295) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _296) + cbTextureTilingScale._m0[21u].w)).x - _789) * _515) + _789;
    float _810 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _806) * cbMtdParam._m0[19u].z) + _806;
    float _812 = _810 - (_810 * _734);
    float _817 = (((_560.z - _640) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _640;
    float _821 = ((_668.z - _817) * cbMtdParam._m0[19u].w) + _817;
    vec4 _834 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _841 = (_834.x * 2.0) + (-1.0);
    float _842 = (_834.y * 2.0) + (-1.0);
    float _843 = dot(vec2(_841, _842), vec2(_841, _842));
    float _3850 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _851 = ((_834.z - _821) * _734) + _821;
    float _861 = ((sqrt(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) - _650) * _734) + _650;
    float _864 = (((_841 - _680) * _734) + _680) + (cbMtdParam._m0[21u].x * _680);
    float _865 = (((_842 - _681) * _734) + _681) + (cbMtdParam._m0[21u].x * _681);
    float _869 = cbMtdParam._m0[22u].x + _668.w;
    float _872 = fma(_861, _243, fma(_865, _250, _864 * _236));
    float _875 = fma(_861, _244, fma(_865, _251, _864 * _237));
    float _878 = fma(_861, _245, fma(_865, _252, _864 * _238));
    float _882 = inversesqrt(dot(vec3(_872, _875, _878), vec3(_872, _875, _878)));
    float _883 = _882 * _872;
    float _884 = _882 * _875;
    float _885 = _882 * _878;
    float _3861 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _886 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _3883 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3894 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3905 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _3916 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _891 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _905 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _956 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _946);
    float _957 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _946);
    float _958 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _946);
    float _962 = inversesqrt(dot(vec3(_956, _957, _958), vec3(_956, _957, _958)));
    float _963 = _956 * _962;
    float _964 = _957 * _962;
    float _965 = _958 * _962;
    float _971 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _972 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _990 = fma(_885, cbSceneParam._m0[5u].z, fma(_884, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _883));
    float _993 = fma(_885, cbSceneParam._m0[6u].z, fma(_884, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _883));
    float _996 = fma(_885, cbSceneParam._m0[7u].z, fma(_884, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _883));
    uint _1010 = (_276 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1016 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_1010].x;
    float _1017 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_1010].y;
    float _1018 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_1010].z;
    float _3927 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1020 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1021 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _1022 = 1.0 - _891;
    float _1023 = _1019 * _1022;
    float _1024 = _1020 * _1022;
    float _1025 = _1021 * _1022;
    float _1030 = (_1019 + (-0.039999999105930328369140625)) * _891;
    float _1031 = (_1020 + (-0.039999999105930328369140625)) * _891;
    float _1032 = (_1021 + (-0.039999999105930328369140625)) * _891;
    float _1033 = _1030 + 0.039999999105930328369140625;
    float _1035 = _1031 + 0.039999999105930328369140625;
    float _1036 = _1032 + 0.039999999105930328369140625;
    vec4 _1045 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _971, cbSceneParam._m0[86u].y * _972));
    float _1049 = ((isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * TEXCOORD_5.w) * _1045.x;
    float _1050 = dot(vec3(_883, _884, _885), vec3(_963, _964, _965));
    float _1053 = _1050 * 2.0;
    float _1057 = (_1053 * _883) - _963;
    float _1058 = (_1053 * _884) - _964;
    float _1059 = (_1053 * _885) - _965;
    float _1063 = abs(dot(vec3(_963, _964, _965), vec3(_883, _884, _885)));
    float _3960 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1065 = sqrt(_886);
    float _1078 = exp2((_1065 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1065 * 3.0));
    float _1084 = (1.0 - _1078) * ((_1065 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1085 = _1078 * _1065;
    float _1113 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1422;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1147 = fma(_1121, cbModelParam._m0[26u].z, fma(_1117, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1113));
        float _1151 = fma(_1121, cbModelParam._m0[27u].z, fma(_1117, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1113));
        float _1155 = fma(_1121, cbModelParam._m0[28u].z, fma(_1117, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1113));
        float _1180 = _1113 + _883;
        float _1181 = _1117 + _884;
        float _1182 = _1121 + _885;
        float _1192 = fma(_1182, cbModelParam._m0[26u].z, fma(_1181, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1180)) - _1147;
        float _1193 = fma(_1182, cbModelParam._m0[27u].z, fma(_1181, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1180)) - _1151;
        float _1194 = fma(_1182, cbModelParam._m0[28u].z, fma(_1181, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1180)) - _1155;
        float _1198 = inversesqrt(dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194)));
        float _1211 = ((_1198 * _1192) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1147 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1198 * _1193) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1151 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1198 * _1194) / cbModelParam._m0[34u].z) + ((((((_1155 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        float _1250 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1216.x + (-0.5));
        float _1252 = _1250 * (_1216.y + (-0.5));
        float _1253 = _1250 * (_1216.z + (-0.5));
        float _1260 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1223.x + (-0.5));
        float _1262 = _1260 * (_1223.y + (-0.5));
        float _1263 = _1260 * (_1223.z + (-0.5));
        float _1270 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1230.x + (-0.5));
        float _1272 = _1270 * (_1230.y + (-0.5));
        float _1273 = _1270 * (_1230.z + (-0.5));
        float _1280 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1237.x + (-0.5));
        float _1282 = _1280 * (_1237.y + (-0.5));
        float _1283 = _1280 * (_1237.z + (-0.5));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = _1251 * 0.5;
        float _1288 = _1261 * 0.5;
        float _1289 = _1271 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1304 = (dot(vec3(_883, _884, _885), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1314 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4008 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1316 + 1.0))) + _1321) * _1284;
        float _1331 = _1252 * 0.5;
        float _1332 = _1262 * 0.5;
        float _1333 = _1272 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_883, _884, _885), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4041 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1358 + 1.0))) + _1363) * _1285;
        float _1373 = _1253 * 0.5;
        float _1374 = _1263 * 0.5;
        float _1375 = _1273 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_883, _884, _885), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4074 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1400 + 1.0))) + _1405) * _1286;
        _1422 = _1253;
        _1424 = _1252;
        _1425 = _1251;
        _1426 = _1263;
        _1427 = _1262;
        _1428 = _1261;
        _1429 = _1273;
        _1430 = _1272;
        _1431 = _1271;
        _1432 = _1286;
        _1433 = _1285;
        _1434 = _1284;
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _1423;
        _1424 = _1423;
        _1425 = _1423;
        _1426 = _1423;
        _1427 = _1423;
        _1428 = _1423;
        _1429 = _1423;
        _1430 = _1423;
        _1431 = _1423;
        _1432 = _1423;
        _1433 = _1423;
        _1434 = _1423;
        _1435 = 0.0;
        _1436 = 0.0;
        _1437 = 0.0;
    }
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1461 = fma(_1121, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1113));
        float _1465 = fma(_1121, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1113));
        float _1469 = fma(_1121, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1113));
        float _1492 = _1113 + _883;
        float _1493 = _1117 + _884;
        float _1494 = _1121 + _885;
        float _1504 = fma(_1494, cbModelParam._m0[30u].z, fma(_1493, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1492)) - _1461;
        float _1505 = fma(_1494, cbModelParam._m0[31u].z, fma(_1493, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1492)) - _1465;
        float _1506 = fma(_1494, cbModelParam._m0[32u].z, fma(_1493, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1492)) - _1469;
        float _1510 = inversesqrt(dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506)));
        float _1523 = ((_1510 * _1504) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1461 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1510 * _1505) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1465 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1510 * _1506) / cbModelParam._m0[35u].z) + ((((((_1469 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        float _1560 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1527.x + (-0.5));
        float _1562 = _1560 * (_1527.y + (-0.5));
        float _1563 = _1560 * (_1527.z + (-0.5));
        float _1570 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1534.x + (-0.5));
        float _1572 = _1570 * (_1534.y + (-0.5));
        float _1573 = _1570 * (_1534.z + (-0.5));
        float _1580 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1541.x + (-0.5));
        float _1582 = _1580 * (_1541.y + (-0.5));
        float _1583 = _1580 * (_1541.z + (-0.5));
        float _1590 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1548.x + (-0.5));
        float _1592 = _1590 * (_1548.y + (-0.5));
        float _1593 = _1590 * (_1548.z + (-0.5));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = _1561 * 0.5;
        float _1598 = _1571 * 0.5;
        float _1599 = _1581 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_883, _884, _885), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4137 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1624 + 1.0))) + _1629) * _1594;
        float _1639 = _1562 * 0.5;
        float _1640 = _1572 * 0.5;
        float _1641 = _1582 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_883, _884, _885), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4170 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1666 + 1.0))) + _1671) * _1595;
        float _1681 = _1563 * 0.5;
        float _1682 = _1573 * 0.5;
        float _1683 = _1583 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_883, _884, _885), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4203 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1708 + 1.0))) + _1713) * _1596;
        _1730 = _1563;
        _1731 = _1562;
        _1732 = _1561;
        _1733 = _1573;
        _1734 = _1572;
        _1735 = _1571;
        _1736 = _1583;
        _1737 = _1582;
        _1738 = _1581;
        _1739 = _1596;
        _1740 = _1595;
        _1741 = _1594;
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
    }
    else
    {
        _1730 = _1423;
        _1731 = _1423;
        _1732 = _1423;
        _1733 = _1423;
        _1734 = _1423;
        _1735 = _1423;
        _1736 = _1423;
        _1737 = _1423;
        _1738 = _1423;
        _1739 = _1423;
        _1740 = _1423;
        _1741 = _1423;
        _1742 = 0.0;
        _1743 = 0.0;
        _1744 = 0.0;
    }
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1435)) + _1435;
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1436)) + _1436;
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1437)) + _1437;
    float _1777 = fma(_1756, cbSceneParam._m0[89u].z, fma(_1755, cbSceneParam._m0[89u].y, _1754 * cbSceneParam._m0[89u].x));
    float _1780 = fma(_1756, cbSceneParam._m0[90u].z, fma(_1755, cbSceneParam._m0[90u].y, _1754 * cbSceneParam._m0[90u].x));
    float _1783 = fma(_1756, cbSceneParam._m0[91u].z, fma(_1755, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1754));
    float _1798 = _1057 * 0.5;
    float _1799 = _1058 * 0.5;
    float _1800 = _1059 * 0.5;
    float _1801 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1804 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1807 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1841;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1814 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1422, _1426, _1429, _1432));
        float _1818 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1424, _1427, _1430, _1433));
        float _1822 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1425, _1428, _1431, _1434));
        float _1829 = dot(vec4(cbModelParam._m0[39u]), vec4(_1798, _1799, _1800, 1.0));
        _1841 = dot(vec3(isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1841 = 1.0;
    }
    float _1852;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1843 = dot(vec4(cbModelParam._m0[40u]), vec4(_1798, _1799, _1800, 1.0));
        _1852 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1843) ? 0.0 : (isnan(0.0) ? _1843 : max(0.0, _1843))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1852 = 1.0;
    }
    float _1856 = (_1852 * cbModelParam._m0[1u].x) + (_1841 * (1.0 - cbModelParam._m0[1u].x));
    float _1866 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _886);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1866 : min(cbModelParam._m0[25u].z, _1866));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1915 = fma(_1121, cbModelParam._m0[13u].z, fma(_1117, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1113)) + cbModelParam._m0[13u].w;
        float _1919 = fma(_1121, cbModelParam._m0[14u].z, fma(_1117, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1113)) + cbModelParam._m0[14u].w;
        float _1923 = fma(_1121, cbModelParam._m0[15u].z, fma(_1117, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1113)) + cbModelParam._m0[15u].w;
        float _1926 = fma(_1059, cbModelParam._m0[13u].z, fma(_1058, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1057));
        float _1929 = fma(_1059, cbModelParam._m0[14u].z, fma(_1058, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1057));
        float _1932 = fma(_1059, cbModelParam._m0[15u].z, fma(_1058, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1057));
        float _1960;
        if (_1926 > 0.0)
        {
            _1960 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1960 = frontier_phi_14_12_ladder;
        }
        float _2184;
        if (_1929 > 0.0)
        {
            _2184 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2184 = frontier_phi_23_19_ladder;
        }
        float _2441;
        if (_1932 > 0.0)
        {
            _2441 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2441 = frontier_phi_35_30_ladder;
        }
        float _2443 = isnan(_2184) ? _1960 : (isnan(_1960) ? _2184 : min(_1960, _2184));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1926) + _1915;
        float _2449 = (_2444 * _1929) + _1919;
        float _2450 = (_2444 * _1932) + _1923;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2451;
        float _2455 = _2451 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 > _2455) || ((_2449 < _2453) || ((_2448 < _2453) || (_2448 > _2455))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2450, cbModelParam._m0[9u].z, fma(_2449, cbModelParam._m0[9u].y, _2448 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2450, cbModelParam._m0[10u].z, fma(_2449, cbModelParam._m0[10u].y, _2448 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2450, cbModelParam._m0[11u].z, fma(_2449, cbModelParam._m0[11u].y, _2448 * cbModelParam._m0[11u].x))), _1867);
            frontier_phi_13_35_ladder = _2578.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2578.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2578.x * cbModelParam._m0[1u].y;
        }
        _1948 = frontier_phi_13_35_ladder_2;
        _1950 = frontier_phi_13_35_ladder_1;
        _1952 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1936 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1057, _1058, _1059), _1867);
        _1948 = _1936.x * cbModelParam._m0[1u].y;
        _1950 = _1936.y * cbModelParam._m0[1u].y;
        _1952 = _1936.z * cbModelParam._m0[1u].y;
    }
    float _1956 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _886);
    float _1957 = isnan(_1956) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1956 : min(cbModelParam._m0[25u].w, _1956));
    float _2047;
    float _2049;
    float _2051;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2011 = fma(_1121, cbModelParam._m0[21u].z, fma(_1117, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1113)) + cbModelParam._m0[21u].w;
        float _2015 = fma(_1121, cbModelParam._m0[22u].z, fma(_1117, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1113)) + cbModelParam._m0[22u].w;
        float _2019 = fma(_1121, cbModelParam._m0[23u].z, fma(_1117, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1113)) + cbModelParam._m0[23u].w;
        float _2022 = fma(_1059, cbModelParam._m0[21u].z, fma(_1058, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1057));
        float _2025 = fma(_1059, cbModelParam._m0[22u].z, fma(_1058, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1057));
        float _2028 = fma(_1059, cbModelParam._m0[23u].z, fma(_1058, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1057));
        float _2189;
        if (_2022 > 0.0)
        {
            _2189 = abs((1.0 - _2011) / _2022);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2011 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2189 = frontier_phi_25_21_ladder;
        }
        float _2468;
        if (_2025 > 0.0)
        {
            _2468 = abs((1.0 - _2015) / _2025);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2015 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2468 = frontier_phi_37_32_ladder;
        }
        float _2681;
        if (_2028 > 0.0)
        {
            _2681 = abs((1.0 - _2019) / _2028);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2019 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2681 = frontier_phi_46_43_ladder;
        }
        float _2683 = isnan(_2468) ? _2189 : (isnan(_2189) ? _2468 : min(_2189, _2468));
        float _2684 = isnan(_2681) ? _2683 : (isnan(_2683) ? _2681 : min(_2683, _2681));
        float _2688 = (_2684 * _2022) + _2011;
        float _2689 = (_2684 * _2025) + _2015;
        float _2690 = (_2684 * _2028) + _2019;
        float _2691 = _2684 * 9.9999997473787516355514526367188e-05;
        float _2692 = (-1.0) - _2691;
        float _2694 = _2691 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2690 > _2694) || ((_2690 < _2692) || ((_2689 > _2694) || ((_2689 < _2692) || ((_2688 < _2692) || (_2688 > _2694))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2889 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2690, cbModelParam._m0[17u].z, fma(_2689, cbModelParam._m0[17u].y, _2688 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2690, cbModelParam._m0[18u].z, fma(_2689, cbModelParam._m0[18u].y, _2688 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2690, cbModelParam._m0[19u].z, fma(_2689, cbModelParam._m0[19u].y, _2688 * cbModelParam._m0[19u].x))), _1957);
            frontier_phi_22_46_ladder = _2889.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2889.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2889.x * cbModelParam._m0[1u].z;
        }
        _2047 = frontier_phi_22_46_ladder_2;
        _2049 = frontier_phi_22_46_ladder_1;
        _2051 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2031 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1057, _1058, _1059), _1957);
        _2047 = _2031.x * cbModelParam._m0[1u].z;
        _2049 = _2031.y * cbModelParam._m0[1u].z;
        _2051 = _2031.z * cbModelParam._m0[1u].z;
    }
    float _2064 = (((_1084 * _1033) + _1085) * _1049) * ((cbModelParam._m0[1u].w * (_2047 - _1948)) + _1948);
    float _2066 = (((_1084 * _1035) + _1085) * _1049) * ((cbModelParam._m0[1u].w * (_2049 - _1950)) + _1950);
    float _2068 = (((_1084 * _1036) + _1085) * _1049) * ((cbModelParam._m0[1u].w * (_2051 - _1952)) + _1952);
    float _2071 = fma(_2068, cbSceneParam._m0[89u].z, fma(_2066, cbSceneParam._m0[89u].y, _2064 * cbSceneParam._m0[89u].x));
    float _2074 = fma(_2068, cbSceneParam._m0[90u].z, fma(_2066, cbSceneParam._m0[90u].y, _2064 * cbSceneParam._m0[90u].x));
    float _2077 = fma(_2068, cbSceneParam._m0[91u].z, fma(_2066, cbSceneParam._m0[91u].y, _2064 * cbSceneParam._m0[91u].x));
    vec4 _2085 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_971, _972));
    float _2087 = _2085.w;
    float _2099 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2087);
    float _2100 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2087);
    float _2101 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2087);
    uvec4 _2105 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2107 = _2105.x * 14u;
    uint _2108 = _2107 + 13u;
    float _2115 = _1049 + (-1.0);
    float _2120 = (cbLight._m0[_2108].x * _2115) + 1.0;
    float _2121 = (cbLight._m0[_2108].y * _2115) + 1.0;
    float _2122 = (cbLight._m0[_2108].z * _2115) + 1.0;
    float _2123 = (cbLight._m0[_2108].w * _2115) + 1.0;
    uint _2124 = _2107 + 5u;
    float _2130 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2134 = _2107 + 4u;
    float _2143 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2147 = _2107 | 1u;
    float _2158 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_883, _884, _885));
    float _2161 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_883, _884, _885));
    float _4339 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _4350 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2166 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * 0.3183098733425140380859375;
    float _2168 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2175 = ((cbLight._m0[_2124].x * _2130) * _2168) + (((cbLight._m0[_2134].x * _2099) * _2143) * _2166);
    float _2176 = ((_2130 * cbLight._m0[_2124].y) * _2168) + (((cbLight._m0[_2134].y * _2100) * _2143) * _2166);
    float _2177 = ((_2130 * cbLight._m0[_2124].z) * _2168) + (((cbLight._m0[_2134].z * _2101) * _2143) * _2166);
    uvec4 _2181 = floatBitsToUint(cbLight._m0[_2107 + 12u]);
    bool _2183 = _2181.x == 0u;
    float _2194;
    float _2196;
    float _2198;
    if (_2183)
    {
        _2194 = _2175;
        _2196 = _2176;
        _2198 = _2177;
    }
    else
    {
        uint _2202 = _2107 + 6u;
        float _2218 = (dot(vec3(cbLight._m0[_2107 + 2u].xyz), vec3(_883, _884, _885)) * 0.5) + 0.5;
        float _2219 = _2218 * _2218;
        float _4361 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2220 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2221 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2194 = (((cbLight._m0[_2202].x * 0.3183098733425140380859375) * _2220) * _2221) + _2175;
        _2196 = (((cbLight._m0[_2202].y * 0.3183098733425140380859375) * _2220) * _2221) + _2176;
        _2198 = (((cbLight._m0[_2202].z * 0.3183098733425140380859375) * _2220) * _2221) + _2177;
    }
    bool _2201 = _2181.y == 0u;
    float _2239;
    float _2241;
    float _2243;
    if (_2201)
    {
        _2239 = _2194;
        _2241 = _2196;
        _2243 = _2198;
    }
    else
    {
        uint _2412 = _2107 + 7u;
        float _2428 = (dot(vec3(cbLight._m0[_2107 + 3u].xyz), vec3(_883, _884, _885)) * 0.5) + 0.5;
        float _2429 = _2428 * _2428;
        float _4377 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2430 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2431 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2239 = (((cbLight._m0[_2412].x * 0.3183098733425140380859375) * _2430) * _2431) + _2194;
        _2241 = (((cbLight._m0[_2412].y * 0.3183098733425140380859375) * _2430) * _2431) + _2196;
        _2243 = (((cbLight._m0[_2412].z * 0.3183098733425140380859375) * _2430) * _2431) + _2198;
    }
    uint _2246 = _2107 + 8u;
    float _2259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _886) * 0.949999988079071044921875);
    float _2260 = _2259 * _2259;
    float _2261 = cbLight._m0[_2107].x + _963;
    float _2262 = cbLight._m0[_2107].y + _964;
    float _2263 = cbLight._m0[_2107].z + _965;
    float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
    float _2268 = _2267 * _2261;
    float _2269 = _2267 * _2262;
    float _2270 = _2267 * _2263;
    float _2271 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2107].xyz));
    float _4393 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _4404 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _2275 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2276 = dot(vec3(_883, _884, _885), vec3(_2268, _2269, _2270));
    float _4415 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2280 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2268, _2269, _2270));
    float _4426 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2284 = _2260 * _2260;
    float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
    float _2296 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
    float _2297 = 0.959999978542327880859375 - _1030;
    float _2299 = 0.959999978542327880859375 - _1031;
    float _2300 = 0.959999978542327880859375 - _1032;
    float _2307 = 1.0 - _2260;
    float _2318 = (0.5 / (((_2275 * ((_2274 * _2307) + _2260)) + 9.9999999392252902907785028219223e-09) + (((_2275 * _2307) + _2260) * _2274))) * _2274;
    float _4437 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2320 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
    uint _2334 = _2107 + 9u;
    float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _886) * 0.949999988079071044921875);
    float _2346 = _2345 * _2345;
    float _2347 = cbLight._m0[_2147].x + _963;
    float _2348 = cbLight._m0[_2147].y + _964;
    float _2349 = cbLight._m0[_2147].z + _965;
    float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
    float _2354 = _2353 * _2347;
    float _2355 = _2353 * _2348;
    float _2356 = _2353 * _2349;
    float _2357 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2147].xyz));
    float _4448 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2361 = dot(vec3(_883, _884, _885), vec3(_2354, _2355, _2356));
    float _4459 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2354, _2355, _2356));
    float _4470 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2346 * _2346;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2380 = exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0);
    float _2387 = 1.0 - _2346;
    float _2397 = (0.5 / (((_2275 * ((_2360 * _2387) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2275 * _2387) + _2346) * _2360))) * _2360;
    float _4481 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2399 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    float _2409 = (((((_2380 * _2297) + _1033) * cbLight._m0[_2334].x) * _2399) * _2130) + ((((cbLight._m0[_2246].x * _2099) * ((_2296 * _2297) + _1033)) * _2320) * _2143);
    float _2410 = (((((_2380 * _2299) + _1035) * cbLight._m0[_2334].y) * _2399) * _2130) + ((((cbLight._m0[_2246].y * _2100) * ((_2296 * _2299) + _1035)) * _2320) * _2143);
    float _2411 = (((((_2380 * _2300) + _1036) * cbLight._m0[_2334].z) * _2399) * _2130) + ((((cbLight._m0[_2246].z * _2101) * ((_2296 * _2300) + _1036)) * _2320) * _2143);
    float _2473;
    float _2475;
    float _2477;
    if (_2183)
    {
        _2473 = _2409;
        _2475 = _2410;
        _2477 = _2411;
    }
    else
    {
        uint _2479 = _2107 + 2u;
        uint _2483 = _2107 + 10u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _886) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _963;
        float _2500 = cbLight._m0[_2479].y + _964;
        float _2501 = cbLight._m0[_2479].z + _965;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2479].xyz));
        float _4492 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2513 = dot(vec3(_883, _884, _885), vec3(_2506, _2507, _2508));
        float _4503 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4514 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
        float _2539 = 1.0 - _2498;
        float _2549 = (0.5 / (((_2275 * ((_2512 * _2539) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2275 * _2539) + _2498) * _2512))) * _2512;
        float _4525 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2551 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2552 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2473 = (((((_2532 * _2297) + _1033) * cbLight._m0[_2483].x) * _2551) * _2552) + _2409;
        _2475 = (((((_2532 * _2299) + _1035) * cbLight._m0[_2483].y) * _2551) * _2552) + _2410;
        _2477 = (((((_2532 * _2300) + _1036) * cbLight._m0[_2483].z) * _2551) * _2552) + _2411;
    }
    float _2587;
    float _2589;
    float _2591;
    if (_2201)
    {
        _2587 = _2473;
        _2589 = _2475;
        _2591 = _2477;
    }
    else
    {
        uint _2598 = _2107 + 3u;
        uint _2602 = _2107 + 11u;
        float _2616 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2598].w)) * _886) * 0.949999988079071044921875);
        float _2617 = _2616 * _2616;
        float _2618 = cbLight._m0[_2598].x + _963;
        float _2619 = cbLight._m0[_2598].y + _964;
        float _2620 = cbLight._m0[_2598].z + _965;
        float _2624 = inversesqrt(dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620)));
        float _2625 = _2624 * _2618;
        float _2626 = _2624 * _2619;
        float _2627 = _2624 * _2620;
        float _2628 = dot(vec3(_883, _884, _885), vec3(cbLight._m0[_2598].xyz));
        float _4541 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2631 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2632 = dot(vec3(_883, _884, _885), vec3(_2625, _2626, _2627));
        float _4552 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2636 = dot(vec3(cbLight._m0[_2598].xyz), vec3(_2625, _2626, _2627));
        float _4563 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2640 = _2617 * _2617;
        float _2644 = ((_2635 * _2635) * (_2640 + (-1.0))) + 1.0;
        float _2651 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
        float _2658 = 1.0 - _2617;
        float _2668 = (0.5 / (((_2275 * ((_2631 * _2658) + _2617)) + 9.9999999392252902907785028219223e-09) + (((_2275 * _2658) + _2617) * _2631))) * _2631;
        float _4574 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2670 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2640 / ((_2644 * _2644) * 3.141590118408203125));
        float _2671 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2587 = (((((_2651 * _2297) + _1033) * cbLight._m0[_2602].x) * _2670) * _2671) + _2473;
        _2589 = (((((_2651 * _2299) + _1035) * cbLight._m0[_2602].y) * _2670) * _2671) + _2475;
        _2591 = (((((_2651 * _2300) + _1036) * cbLight._m0[_2602].z) * _2670) * _2671) + _2477;
    }
    float _2806;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    if (_2105.y == 0u)
    {
        float _2746 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2747 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2746;
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2746;
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2746;
        uvec4 _2761 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2762 = _2761.x;
        uint _2773 = uint((float(_2761.y) * floor(float(uint(cbSceneParam._m0[85u].y * _972) / _2762))) + floor(float(uint(cbSceneParam._m0[85u].x * _971) / _2762)));
        float _2783 = (log2(_2749 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2784 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        uint _2787 = uint(isnan(14.0) ? _2784 : (isnan(_2784) ? 14.0 : min(_2784, 14.0)));
        uvec4 _2792 = texelFetch(g_lightClusterGridBuffer, int(((_2787 << 2u) + (_2773 << 6u)) >> 2u));
        uint _2793 = _2792.x;
        uint _2794 = _2761.z;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        if (((((1u << ((_2794 >> 4u) & 15u)) + 4294967295u) & _2793) == 0u) || ((_2794 & 240u) == 0u))
        {
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
        }
        else
        {
            float _2895;
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            uint _3045 = 0u;
            uint _3054;
            bool _3055;
            for (;;)
            {
                _3054 = texelFetch(g_lightClassification, int((((_2787 << 5u) + (_2773 << 9u)) + (_3045 << 2u)) >> 2u)).x;
                _3055 = _3054 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3055)
                {
                    frontier_phi_61_pred = _3039;
                    frontier_phi_61_pred_1 = _3044;
                    frontier_phi_61_pred_2 = _3043;
                    frontier_phi_61_pred_3 = _3042;
                    frontier_phi_61_pred_4 = _3041;
                    frontier_phi_61_pred_5 = _3040;
                }
                else
                {
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    uint _3169;
                    _3163 = _3039;
                    _3164 = _3040;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3054;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    for (;;)
                    {
                        uint _3173 = uint(findLSB(_3169)) + (_3045 << 5u);
                        uint _3170 = (_3169 + 4294967295u) & _3169;
                        uint _3175 = _3173 * 48u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 3u)).x));
                        uint _3195 = (_3173 * 48u) + 4u;
                        vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3214 = (_3173 * 48u) + 8u;
                        vec3 _3225 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x));
                        float _3229 = _3189.x - _2747;
                        float _3230 = _3189.y - _2748;
                        float _3231 = _3189.z - _2749;
                        float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                        float _3235 = inversesqrt(_3232);
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3239 = dot(vec3(_990, _993, _996), vec3(_3236, _3237, _3238));
                        float _3244 = 1.0 - (_3232 * _3189.w);
                        float _4600 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3245 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3246 = sqrt(_3232) * _3208.w;
                        float _3249 = 1.39999997615814208984375 / (_3246 + 1.39999997615814208984375);
                        float _3250 = _3249 * _3249;
                        float _3253 = ((1.0 - _3250) * _3239) + _3250;
                        float _3256 = _3246 * _3246;
                        float _3260 = ((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3245) / ((_3256 * 0.699999988079071044921875) + 1.0);
                        float _3264 = (-0.0) - _2747;
                        float _3265 = (-0.0) - _2748;
                        float _3266 = (-0.0) - _2749;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3271 = _3270 * _3264;
                        float _3272 = _3270 * _3265;
                        float _3273 = _3270 * _3266;
                        float _3281 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                        float _3282 = 1.0 - _1065;
                        float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                        float _3290 = _3289 * _3289;
                        float _3291 = _3290 * _3290;
                        float _3292 = _3271 + _3236;
                        float _3293 = _3272 + _3237;
                        float _3294 = _3273 + _3238;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3302 = dot(vec3(_990, _993, _996), vec3(_3271, _3272, _3273));
                        float _4616 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3306 = dot(vec3(_990, _993, _996), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                        float _4627 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3309 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                        float _3314 = _3249 * _3290;
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3239) + _3315;
                        float _4638 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3319 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3320 = 1.0 - _3290;
                        float _3330 = (0.5 / (((_3319 * ((_3305 * _3320) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3319 * _3320) + _3290) * _3305))) * _3319;
                        float _4649 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3341 = (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) / ((_3313 * _3313) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125))) * _3245;
                        _3098 = (_3260 * _3208.x) + _3166;
                        _3099 = (_3260 * _3208.y) + _3167;
                        _3100 = (_3260 * _3208.z) + _3168;
                        _3095 = (_3341 * _3225.x) + _3163;
                        _3096 = (_3341 * _3225.y) + _3164;
                        _3097 = (_3341 * _3225.z) + _3165;
                        if (_3170 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3163 = _3095;
                            _3164 = _3096;
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3170;
                        }
                    }
                    frontier_phi_61_pred = _3095;
                    frontier_phi_61_pred_1 = _3100;
                    frontier_phi_61_pred_2 = _3099;
                    frontier_phi_61_pred_3 = _3098;
                    frontier_phi_61_pred_4 = _3097;
                    frontier_phi_61_pred_5 = _3096;
                }
                _2895 = frontier_phi_61_pred;
                _2905 = frontier_phi_61_pred_1;
                _2903 = frontier_phi_61_pred_2;
                _2901 = frontier_phi_61_pred_3;
                _2899 = frontier_phi_61_pred_4;
                _2897 = frontier_phi_61_pred_5;
                uint _3046 = _3045 + 1u;
                if (_3046 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3039 = _2895;
                    _3040 = _2897;
                    _3041 = _2899;
                    _3042 = _2901;
                    _3043 = _2903;
                    _3044 = _2905;
                    _3045 = _3046;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
        }
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.z;
        uint _2911 = (_2909 >> 8u) & 15u;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        if (((4294967295u << _2911) & _2793) == 0u)
        {
            _3007 = _2894;
            _3009 = _2896;
            _3011 = _2898;
            _3013 = _2900;
            _3015 = _2902;
            _3017 = _2904;
        }
        else
        {
            float _3032 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
            float _3033 = _3032 * _2747;
            float _3034 = _3032 * _2748;
            float _3035 = _3032 * _2749;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2911 < ((_2909 >> 12u) & 15u))
            {
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3146 = _2894;
                float _3147 = _2896;
                float _3148 = _2898;
                float _3149 = _2900;
                float _3150 = _2902;
                float _3151 = _2904;
                uint _3152 = _2911;
                uint _3161;
                bool _3162;
                for (;;)
                {
                    _3161 = texelFetch(g_lightClassification, int((((_2787 << 5u) + (_2773 << 9u)) + (_3152 << 2u)) >> 2u)).x;
                    _3162 = _3161 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3162)
                    {
                        frontier_phi_67_pred = _3149;
                        frontier_phi_67_pred_1 = _3150;
                        frontier_phi_67_pred_2 = _3151;
                        frontier_phi_67_pred_3 = _3148;
                        frontier_phi_67_pred_4 = _3147;
                        frontier_phi_67_pred_5 = _3146;
                    }
                    else
                    {
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3359 = _3146;
                        float _3360 = _3147;
                        float _3361 = _3148;
                        float _3362 = _3149;
                        float _3363 = _3150;
                        float _3364 = _3151;
                        uint _3365 = _3161;
                        uint _3366;
                        vec4 _3391;
                        float _3392;
                        vec4 _3407;
                        vec3 _3419;
                        vec4 _3434;
                        vec4 _3449;
                        float _3495;
                        bool _3496;
                        for (;;)
                        {
                            uint _3376 = ((_3152 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3365));
                            _3366 = (_3365 + 4294967295u) & _3365;
                            uint _3378 = _3376 * 40u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            _3392 = _3391.w;
                            uint _3394 = (_3376 * 40u) + 4u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3376 * 40u) + 8u;
                            _3419 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x));
                            uint _3421 = (_3376 * 40u) + 16u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3376 * 40u) + 20u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3451 = (_3376 * 40u) + 24u;
                            vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3470 = (_3376 * 40u) + 28u;
                            vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            _3495 = fma(_2749, _3483.z, fma(_2748, _3483.y, _3483.x * _2747)) + _3483.w;
                            _3496 = !((fma(_2749, _3464.z, fma(_2748, _3464.y, _3464.x * _2747)) + _3464.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3496)
                            {
                                float _3523 = _3391.x - _2747;
                                float _3524 = _3391.y - _2748;
                                float _3525 = _3391.z - _2749;
                                float _3526 = dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525));
                                float _3529 = inversesqrt(_3526);
                                float _3530 = _3529 * _3523;
                                float _3531 = _3529 * _3524;
                                float _3532 = _3529 * _3525;
                                float _3536 = 1.0 - (_3526 / (_3392 * _3392));
                                float _4660 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3541 = sqrt(_3526) * _3407.w;
                                float _3543 = 1.39999997615814208984375 / (_3541 + 1.39999997615814208984375);
                                float _3544 = _3543 * _3543;
                                float _3547 = ((1.0 - _3544) * dot(vec3(_3530, _3531, _3532), vec3(_990, _993, _996))) + _3544;
                                float _3550 = _3541 * _3541;
                                float _3554 = (fma(_2749, _3434.z, fma(_2748, _3434.y, _3434.x * _2747)) + _3434.w) / _3495;
                                float _3555 = (fma(_2749, _3449.z, fma(_2748, _3449.y, _3449.x * _2747)) + _3449.w) / _3495;
                                float _3559 = 1.0 - dot(vec2(_3554, _3555), vec2(_3554, _3555));
                                float _4676 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3561 = _3560 * (((isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0))) * _3537) / ((_3550 * 0.699999988079071044921875) + 1.0));
                                float _3573 = exp2(log2(1.0 / ((_3550 * 3.5) + 5.0)) * 0.25);
                                float _3574 = 1.0 - _1065;
                                float _3581 = sqrt(1.0 - ((1.0 - (_3574 * _3574)) * (1.0 - (_3573 * _3573))));
                                float _3582 = _3581 * _3581;
                                float _3583 = _3582 * _3582;
                                float _3584 = _3530 - _3033;
                                float _3585 = _3531 - _3034;
                                float _3586 = _3532 - _3035;
                                float _3590 = inversesqrt(dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586)));
                                float _3594 = dot(vec3(_990, _993, _996), vec3((-0.0) - _3033, (-0.0) - _3034, (-0.0) - _3035));
                                float _4687 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3598 = dot(vec3(_990, _993, _996), vec3(_3590 * _3584, _3590 * _3585, _3590 * _3586));
                                float _4698 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3605 = ((_3601 * _3601) * (_3583 + (-1.0))) + 1.0;
                                float _3606 = _3543 * _3582;
                                float _3607 = _3606 * _3606;
                                float _3613 = ((1.0 - _3607) * dot(vec3(_990, _993, _996), vec3(_3530, _3531, _3532))) + _3607;
                                float _4709 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3614 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3615 = 1.0 - _3582;
                                float _3625 = (0.5 / (((_3614 * ((_3597 * _3615) + _3582)) + 9.9999999392252902907785028219223e-09) + (((_3614 * _3615) + _3582) * _3597))) * _3614;
                                float _4720 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3635 = (_3560 * _3537) * (((_3583 * 3.1415927410125732421875) * (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) / ((_3605 * _3605) * ((_3550 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3635 * _3419.x;
                                frontier_phi_73_pred_1 = _3635 * _3419.y;
                                frontier_phi_73_pred_2 = _3561 * _3407.z;
                                frontier_phi_73_pred_3 = _3561 * _3407.y;
                                frontier_phi_73_pred_4 = _3561 * _3407.x;
                                frontier_phi_73_pred_5 = _3635 * _3419.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3639 = frontier_phi_73_pred;
                            _3640 = frontier_phi_73_pred_1;
                            _3644 = frontier_phi_73_pred_2;
                            _3643 = frontier_phi_73_pred_3;
                            _3642 = frontier_phi_73_pred_4;
                            _3641 = frontier_phi_73_pred_5;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            if (_3366 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3366;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3349;
                        frontier_phi_67_pred_1 = _3350;
                        frontier_phi_67_pred_2 = _3351;
                        frontier_phi_67_pred_3 = _3348;
                        frontier_phi_67_pred_4 = _3347;
                        frontier_phi_67_pred_5 = _3346;
                    }
                    _3014 = frontier_phi_67_pred;
                    _3016 = frontier_phi_67_pred_1;
                    _3018 = frontier_phi_67_pred_2;
                    _3012 = frontier_phi_67_pred_3;
                    _3010 = frontier_phi_67_pred_4;
                    _3008 = frontier_phi_67_pred_5;
                    uint _3153 = _3152 + 1u;
                    if (_3153 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3146 = _3008;
                        _3147 = _3010;
                        _3148 = _3012;
                        _3149 = _3014;
                        _3150 = _3016;
                        _3151 = _3018;
                        _3152 = _3153;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3016;
                frontier_phi_55_56_ladder_1 = _3018;
                frontier_phi_55_56_ladder_2 = _3014;
                frontier_phi_55_56_ladder_3 = _3012;
                frontier_phi_55_56_ladder_4 = _3010;
                frontier_phi_55_56_ladder_5 = _3008;
            }
            else
            {
                frontier_phi_55_56_ladder = _2902;
                frontier_phi_55_56_ladder_1 = _2904;
                frontier_phi_55_56_ladder_2 = _2900;
                frontier_phi_55_56_ladder_3 = _2898;
                frontier_phi_55_56_ladder_4 = _2896;
                frontier_phi_55_56_ladder_5 = _2894;
            }
            _3007 = frontier_phi_55_56_ladder_5;
            _3009 = frontier_phi_55_56_ladder_4;
            _3011 = frontier_phi_55_56_ladder_3;
            _3013 = frontier_phi_55_56_ladder_2;
            _3015 = frontier_phi_55_56_ladder;
            _3017 = frontier_phi_55_56_ladder_1;
        }
        float _3022 = isnan(1.0) ? _1049 : (isnan(_1049) ? 1.0 : min(_1049, 1.0));
        _2806 = (_3022 * _3013) + _2239;
        _2808 = (_3022 * _3015) + _2241;
        _2810 = (_3022 * _3017) + _2243;
        _2812 = ((_3007 * _1033) * _3022) + _2587;
        _2814 = ((_3009 * _1035) * _3022) + _2589;
        _2816 = ((_3011 * _1036) * _3022) + _2591;
    }
    else
    {
        _2806 = _2239;
        _2808 = _2241;
        _2810 = _2243;
        _2812 = _2587;
        _2814 = _2589;
        _2816 = _2591;
    }
    float _4736 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _4747 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _4758 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    uint _2836 = _276 + 6u;
    float _2844 = _971 / cbSceneParam._m0[86u].x;
    float _2845 = _972 / cbSceneParam._m0[86u].y;
    vec4 _2859 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2844, _2845, (log2((isnan(cbSceneParam._m0[77u].w) ? _905 : (isnan(_905) ? cbSceneParam._m0[77u].w : min(_905, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2861 = _2859.x;
    float _2862 = _2859.y;
    float _2863 = _2859.z;
    float _2864 = _2859.w;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    if (_905 > cbSceneParam._m0[78u].w)
    {
        float _2919 = isnan(_905) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _905 : min(cbSceneParam._m0[80u].w, _905));
        float _2920 = _2919 / _905;
        float _2931 = _2920 * _956;
        float _2932 = _957 * _2920;
        float _2933 = (-0.0) - _2932;
        float _2935 = _2920 * _958;
        float _2937 = (cbSceneParam._m0[77u].w * _2933) / _2919;
        float _2938 = _2937 + cbSceneParam._m0[79u].w;
        float _2939 = cbSceneParam._m0[79u].w - _2932;
        float _2945 = sqrt(((_2931 * _2931) + (_2932 * _2932)) + (_2935 * _2935));
        float _2948 = (1.0 - (cbSceneParam._m0[77u].w / _2919)) * _2945;
        float _2953 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2955 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3108;
        if (abs((_2933 - _2937) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3108 = ((((_2938 > 0.0) ? exp2(_2953 * _2938) : (2.0 - exp2(_2955 * _2938))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2948;
        }
        else
        {
            float _3068 = 1.0 / cbSceneParam._m0[80u].x;
            float _3069 = isnan(_2939) ? _2938 : (isnan(_2938) ? _2939 : max(_2938, _2939));
            float _3070 = isnan(_2939) ? _2938 : (isnan(_2938) ? _2939 : min(_2938, _2939));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            float _3080 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : min(_3070, 0.0));
            _3108 = ((abs(_2945 / _2933) * cbSceneParam._m0[80u].y) * ((((_3079 - _3080) * 2.0) - ((exp2(_2953 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0)))) - exp2(_2953 * (isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))))) * _3068)) - ((exp2(_2955 * _3079) - exp2(_2955 * _3080)) * _3068))) + (_2948 * cbSceneParam._m0[80u].z);
        }
        vec4 _3110 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2844, _2845, 1.0), 0.0);
        float _3119 = exp2((_3108 * (-1.44269502162933349609375)) * (1.0 - _3110.w));
        float _3120 = log2(_3119);
        float _3136 = log2(_2864);
        _2957 = (exp2(_3136 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].x)) * _3110.x) / cbSceneParam._m0[78u].x)) + _2861;
        _2959 = (exp2(_3136 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].y)) * _3110.y) / cbSceneParam._m0[78u].y)) + _2862;
        _2961 = (exp2(_3136 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3120 * cbSceneParam._m0[78u].z)) * _3110.z) / cbSceneParam._m0[78u].z)) + _2863;
        _2963 = _3119 * _2864;
    }
    else
    {
        _2957 = _2861;
        _2959 = _2862;
        _2961 = _2863;
        _2963 = _2864;
    }
    float _2975 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2976 = _2975 == 3.0;
    float _2977 = log2(_2963);
    float _2984 = exp2(_2977 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2806 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1049))) + ((_2812 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1856)) * cbPerFrame._m0[3u].x));
    float _2985 = exp2(_2977 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2808 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1049))) + ((_2814 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1856)) * cbPerFrame._m0[3u].x));
    float _2986 = exp2(_2977 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2810 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1049))) + ((_2816 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1856)) * cbPerFrame._m0[3u].x));
    float _2995 = (_2975 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2995 * (_2976 ? _2984 : (_2984 + (cbSceneParam._m0[72u].w * _2957)));
    SV_Target.y = _2995 * (_2976 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2959)));
    SV_Target.z = _2995 * (_2976 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2961)));
    SV_Target.w = cbInstanceData._m0[_2836].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2836].w;
}


