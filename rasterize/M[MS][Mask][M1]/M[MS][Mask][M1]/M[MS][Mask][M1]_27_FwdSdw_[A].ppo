#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1412;
float _4076;
float _4077;
float _4078;
float _4079;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[23u].w) + _414) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4088 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _445 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_432 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327);
    float _448 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_432 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328);
    float _451 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_432 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329);
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _486 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _488 = _486.x;
    float _489 = _486.y;
    float _490 = _486.z;
    float _499 = ((_469.z - _490) * _432) + _490;
    float _502 = ((((_469.x - _488) * _432) + _488) * 2.0) + (-1.0);
    float _504 = ((((_469.y - _489) * _432) + _489) * 2.0) + (-1.0);
    float _505 = dot(vec2(_502, _504), vec2(_502, _504));
    float _4099 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _510 = sqrt(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))));
    vec4 _526 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _538 = (((_526.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _502;
    float _539 = (((_526.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _504;
    float _542 = fma(_510, _247, fma(_539, _254, _538 * _240));
    float _545 = fma(_510, _248, fma(_539, _255, _538 * _241));
    float _548 = fma(_510, _249, fma(_539, _256, _538 * _242));
    float _552 = inversesqrt(dot(vec3(_542, _545, _548), vec3(_542, _545, _548)));
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _581 = _579.x;
    float _582 = 1.0 - _581;
    float _591 = (cbMtdParam._m0[19u].x + dot(vec4(_552 * _542, _552 * _545, _552 * _548, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_581 - _582) * cbMtdParam._m0[24u].z) + _582) * cbMtdParam._m0[21u].z);
    float _4110 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _594 = (-0.0) - cbMtdParam._m0[24u].x;
    float _596 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _596 : (isnan(_596) ? 1.0 : min(_596, 1.0));
    float _604 = _592 - ((_592 * TEXCOORD_8.x) * _597);
    float _605 = _592 - ((_592 * TEXCOORD_8.y) * _597);
    float _606 = _592 - ((_592 * TEXCOORD_8.z) * _597);
    float _613 = (_604 * (cbMtdParam._m0[17u].x - _445)) + _445;
    float _614 = (_605 * (cbMtdParam._m0[17u].y - _448)) + _448;
    float _615 = (_606 * (cbMtdParam._m0[17u].z - _451)) + _451;
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _629 = _627.x;
    float _630 = 1.0 - _629;
    float _656 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_629 - _630) * cbMtdParam._m0[24u].w) + _630) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4131 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _665 = ((((cbMtdParam._m0[10u].x - _613) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _657) + _613;
    float _666 = ((((cbMtdParam._m0[10u].y - _614) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _657) + _614;
    float _667 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _615)) * _657) + _615;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _695 = _693.x;
    float _712 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _695) * _432) + _695;
    float _716 = ((_679.x - _712) * cbMtdParam._m0[19u].z) + _712;
    float _718 = _716 - (_716 * _604);
    float _720 = _718 - (_718 * _657);
    float _724 = (cbMtdParam._m0[19u].w * (_526.z - _499)) + _499;
    vec4 _738 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _745 = (_738.x * 2.0) + (-1.0);
    float _746 = (_738.y * 2.0) + (-1.0);
    float _747 = dot(vec2(_745, _746), vec2(_745, _746));
    float _4142 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _755 = ((_738.z - _724) * _604) + _724;
    float _758 = ((cbMtdParam._m0[23u].x - _755) * _657) + _755;
    vec4 _777 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _783 = (_777.x * 2.0) + (-1.0);
    float _784 = (_777.y * 2.0) + (-1.0);
    float _785 = dot(vec2(_783, _784), vec2(_783, _784));
    float _4153 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _800 = ((sqrt(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) - _510) * _606) + _510;
    float _803 = (((_745 - _538) * _604) + _538) + (cbMtdParam._m0[21u].x * _538);
    float _804 = (((_746 - _539) * _605) + _539) + (cbMtdParam._m0[21u].x * _539);
    float _815 = (((_783 - _803) + (_803 * cbMtdParam._m0[22u].z)) * _657) + _803;
    float _816 = (((_784 - _804) + (_804 * cbMtdParam._m0[22u].z)) * _657) + _804;
    float _817 = (_657 * (sqrt(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) - _800)) + _800;
    float _819 = cbMtdParam._m0[22u].x + _526.w;
    float _822 = fma(_817, _247, fma(_816, _254, _815 * _240));
    float _825 = fma(_817, _248, fma(_816, _255, _815 * _241));
    float _828 = fma(_817, _249, fma(_816, _256, _815 * _242));
    float _832 = inversesqrt(dot(vec3(_822, _825, _828), vec3(_822, _825, _828)));
    float _833 = _832 * _822;
    float _834 = _832 * _825;
    float _835 = _832 * _828;
    float _4164 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _836 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4186 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4197 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4208 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4219 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _841 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _855 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _905 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _895);
    float _906 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _895);
    float _907 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _895);
    float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
    float _912 = _905 * _911;
    float _913 = _906 * _911;
    float _914 = _907 * _911;
    vec4 _919 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _921 = _919.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1093 = sqrt(((_905 * _905) + (_906 * _906)) + (_907 * _907));
        float _1099 = (cbMatDynParam._m0[5u].x * _1093) + cbMatDynParam._m0[5u].y;
        float _4230 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1104 = (cbMatDynParam._m0[5u].z * _1093) + cbMatDynParam._m0[5u].w;
        float _4241 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) - _1100)) + _1100) < ((_921 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _932 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _933 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _951 = fma(_835, cbSceneParam._m0[5u].z, fma(_834, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _833));
    float _954 = fma(_835, cbSceneParam._m0[6u].z, fma(_834, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _833));
    float _957 = fma(_835, cbSceneParam._m0[7u].z, fma(_834, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _833));
    uint _970 = _259 + 9u;
    uint _971 = _970 + uint(cbMatDynParam._m0[0u].w);
    float _977 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * cbInstanceData._m0[_971].x;
    float _978 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * cbInstanceData._m0[_971].y;
    float _979 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * cbInstanceData._m0[_971].z;
    float _4252 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _4263 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _4274 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _983 = 1.0 - _841;
    float _984 = _980 * _983;
    float _985 = _981 * _983;
    float _986 = _982 * _983;
    float _991 = (_980 + (-0.039999999105930328369140625)) * _841;
    float _992 = (_981 + (-0.039999999105930328369140625)) * _841;
    float _993 = (_982 + (-0.039999999105930328369140625)) * _841;
    float _994 = _991 + 0.039999999105930328369140625;
    float _996 = _992 + 0.039999999105930328369140625;
    float _997 = _993 + 0.039999999105930328369140625;
    vec4 _1006 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _932, cbSceneParam._m0[86u].y * _933));
    float _1010 = ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * TEXCOORD_5.w) * _1006.x;
    float _1011 = dot(vec3(_833, _834, _835), vec3(_912, _913, _914));
    float _1014 = _1011 * 2.0;
    float _1018 = (_1014 * _833) - _912;
    float _1019 = (_1014 * _834) - _913;
    float _1020 = (_1014 * _835) - _914;
    float _1024 = abs(dot(vec3(_912, _913, _914), vec3(_833, _834, _835)));
    float _4285 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1026 = sqrt(_836);
    float _1039 = exp2((_1026 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1026 * 3.0));
    float _1045 = (1.0 - _1039) * ((_1026 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1046 = _1039 * _1026;
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1411;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1136 = fma(_1082, cbModelParam._m0[26u].z, fma(_1078, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074));
        float _1140 = fma(_1082, cbModelParam._m0[27u].z, fma(_1078, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074));
        float _1144 = fma(_1082, cbModelParam._m0[28u].z, fma(_1078, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074));
        float _1169 = _1074 + _833;
        float _1170 = _1078 + _834;
        float _1171 = _1082 + _835;
        float _1181 = fma(_1171, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1169)) - _1136;
        float _1182 = fma(_1171, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1169)) - _1140;
        float _1183 = fma(_1171, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1169)) - _1144;
        float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
        float _1200 = ((_1187 * _1181) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1136 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1187 * _1182) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1140 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1187 * _1183) / cbModelParam._m0[34u].z) + ((((((_1144 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        float _1239 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1205.x + (-0.5));
        float _1241 = _1239 * (_1205.y + (-0.5));
        float _1242 = _1239 * (_1205.z + (-0.5));
        float _1249 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1212.x + (-0.5));
        float _1251 = _1249 * (_1212.y + (-0.5));
        float _1252 = _1249 * (_1212.z + (-0.5));
        float _1259 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1219.x + (-0.5));
        float _1261 = _1259 * (_1219.y + (-0.5));
        float _1262 = _1259 * (_1219.z + (-0.5));
        float _1269 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1226.x + (-0.5));
        float _1271 = _1269 * (_1226.y + (-0.5));
        float _1272 = _1269 * (_1226.z + (-0.5));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = _1240 * 0.5;
        float _1277 = _1250 * 0.5;
        float _1278 = _1260 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1293 = (dot(vec3(_833, _834, _835), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1303 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4333 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1305 + 1.0))) + _1310) * _1273;
        float _1320 = _1241 * 0.5;
        float _1321 = _1251 * 0.5;
        float _1322 = _1261 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_833, _834, _835), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4344 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4355 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4366 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_1347 + 1.0))) + _1352) * _1274;
        float _1362 = _1242 * 0.5;
        float _1363 = _1252 * 0.5;
        float _1364 = _1262 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_833, _834, _835), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4377 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4388 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4399 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_1389 + 1.0))) + _1394) * _1275;
        _1411 = _1242;
        _1413 = _1241;
        _1414 = _1240;
        _1415 = _1252;
        _1416 = _1251;
        _1417 = _1250;
        _1418 = _1262;
        _1419 = _1261;
        _1420 = _1260;
        _1421 = _1275;
        _1422 = _1274;
        _1423 = _1273;
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1426 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
    }
    else
    {
        _1411 = _1412;
        _1413 = _1412;
        _1414 = _1412;
        _1415 = _1412;
        _1416 = _1412;
        _1417 = _1412;
        _1418 = _1412;
        _1419 = _1412;
        _1420 = _1412;
        _1421 = _1412;
        _1422 = _1412;
        _1423 = _1412;
        _1424 = 0.0;
        _1425 = 0.0;
        _1426 = 0.0;
    }
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1454 = fma(_1082, cbModelParam._m0[30u].z, fma(_1078, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1074));
        float _1458 = fma(_1082, cbModelParam._m0[31u].z, fma(_1078, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1074));
        float _1462 = fma(_1082, cbModelParam._m0[32u].z, fma(_1078, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1074));
        float _1485 = _1074 + _833;
        float _1486 = _1078 + _834;
        float _1487 = _1082 + _835;
        float _1497 = fma(_1487, cbModelParam._m0[30u].z, fma(_1486, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1485)) - _1454;
        float _1498 = fma(_1487, cbModelParam._m0[31u].z, fma(_1486, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1485)) - _1458;
        float _1499 = fma(_1487, cbModelParam._m0[32u].z, fma(_1486, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1485)) - _1462;
        float _1503 = inversesqrt(dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499)));
        float _1516 = ((_1503 * _1497) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1454 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1503 * _1498) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1458 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1503 * _1499) / cbModelParam._m0[35u].z) + ((((((_1462 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        float _1553 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1520.x + (-0.5));
        float _1555 = _1553 * (_1520.y + (-0.5));
        float _1556 = _1553 * (_1520.z + (-0.5));
        float _1563 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1527.x + (-0.5));
        float _1565 = _1563 * (_1527.y + (-0.5));
        float _1566 = _1563 * (_1527.z + (-0.5));
        float _1573 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1534.x + (-0.5));
        float _1575 = _1573 * (_1534.y + (-0.5));
        float _1576 = _1573 * (_1534.z + (-0.5));
        float _1583 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1541.x + (-0.5));
        float _1585 = _1583 * (_1541.y + (-0.5));
        float _1586 = _1583 * (_1541.z + (-0.5));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = _1554 * 0.5;
        float _1591 = _1564 * 0.5;
        float _1592 = _1574 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_833, _834, _835), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4440 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4451 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4462 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_1617 + 1.0))) + _1622) * _1587;
        float _1632 = _1555 * 0.5;
        float _1633 = _1565 * 0.5;
        float _1634 = _1575 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_833, _834, _835), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4473 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4484 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4495 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_1659 + 1.0))) + _1664) * _1588;
        float _1674 = _1556 * 0.5;
        float _1675 = _1566 * 0.5;
        float _1676 = _1576 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_833, _834, _835), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4506 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4517 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4528 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_1701 + 1.0))) + _1706) * _1589;
        _1723 = _1556;
        _1724 = _1555;
        _1725 = _1554;
        _1726 = _1566;
        _1727 = _1565;
        _1728 = _1564;
        _1729 = _1576;
        _1730 = _1575;
        _1731 = _1574;
        _1732 = _1589;
        _1733 = _1588;
        _1734 = _1587;
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
    }
    else
    {
        _1723 = _1412;
        _1724 = _1412;
        _1725 = _1412;
        _1726 = _1412;
        _1727 = _1412;
        _1728 = _1412;
        _1729 = _1412;
        _1730 = _1412;
        _1731 = _1412;
        _1732 = _1412;
        _1733 = _1412;
        _1734 = _1412;
        _1735 = 0.0;
        _1736 = 0.0;
        _1737 = 0.0;
    }
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1424)) + _1424;
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1425)) + _1425;
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1426)) + _1426;
    float _1770 = fma(_1749, cbSceneParam._m0[89u].z, fma(_1748, cbSceneParam._m0[89u].y, _1747 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1749, cbSceneParam._m0[90u].z, fma(_1748, cbSceneParam._m0[90u].y, _1747 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1749, cbSceneParam._m0[91u].z, fma(_1748, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1747));
    float _1791 = _1018 * 0.5;
    float _1792 = _1019 * 0.5;
    float _1793 = _1020 * 0.5;
    float _1794 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1797 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1800 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1834;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1807 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1411, _1415, _1418, _1421));
        float _1811 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1413, _1416, _1419, _1422));
        float _1815 = dot(vec4(_1791, _1792, _1793, 1.0), vec4(_1414, _1417, _1420, _1423));
        float _1822 = dot(vec4(cbModelParam._m0[39u]), vec4(_1791, _1792, _1793, 1.0));
        _1834 = dot(vec3(isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1834 = 1.0;
    }
    float _1845;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1836 = dot(vec4(cbModelParam._m0[40u]), vec4(_1791, _1792, _1793, 1.0));
        _1845 = dot(vec3(isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1836) ? 0.0 : (isnan(0.0) ? _1836 : max(0.0, _1836))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1845 = 1.0;
    }
    float _1849 = (_1845 * cbModelParam._m0[1u].x) + (_1834 * (1.0 - cbModelParam._m0[1u].x));
    float _1859 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _836);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1859 : min(cbModelParam._m0[25u].z, _1859));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1908 = fma(_1082, cbModelParam._m0[13u].z, fma(_1078, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1074)) + cbModelParam._m0[13u].w;
        float _1912 = fma(_1082, cbModelParam._m0[14u].z, fma(_1078, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1074)) + cbModelParam._m0[14u].w;
        float _1916 = fma(_1082, cbModelParam._m0[15u].z, fma(_1078, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1074)) + cbModelParam._m0[15u].w;
        float _1919 = fma(_1020, cbModelParam._m0[13u].z, fma(_1019, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018));
        float _1922 = fma(_1020, cbModelParam._m0[14u].z, fma(_1019, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018));
        float _1925 = fma(_1020, cbModelParam._m0[15u].z, fma(_1019, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018));
        float _1953;
        if (_1919 > 0.0)
        {
            _1953 = abs((1.0 - _1908) / _1919);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1908 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1953 = frontier_phi_17_15_ladder;
        }
        float _2125;
        if (_1922 > 0.0)
        {
            _2125 = abs((1.0 - _1912) / _1922);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1912 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2125 = frontier_phi_26_22_ladder;
        }
        float _2420;
        if (_1925 > 0.0)
        {
            _2420 = abs((1.0 - _1916) / _1925);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1916 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2420 = frontier_phi_38_33_ladder;
        }
        float _2422 = isnan(_2125) ? _1953 : (isnan(_1953) ? _2125 : min(_1953, _2125));
        float _2423 = isnan(_2420) ? _2422 : (isnan(_2422) ? _2420 : min(_2422, _2420));
        float _2427 = (_2423 * _1919) + _1908;
        float _2428 = (_2423 * _1922) + _1912;
        float _2429 = (_2423 * _1925) + _1916;
        float _2430 = _2423 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2430;
        float _2434 = _2430 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 > _2434) || ((_2428 < _2432) || ((_2427 < _2432) || (_2427 > _2434))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2574 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2429, cbModelParam._m0[9u].z, fma(_2428, cbModelParam._m0[9u].y, _2427 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2429, cbModelParam._m0[10u].z, fma(_2428, cbModelParam._m0[10u].y, _2427 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2429, cbModelParam._m0[11u].z, fma(_2428, cbModelParam._m0[11u].y, _2427 * cbModelParam._m0[11u].x))), _1860);
            frontier_phi_16_38_ladder = _2574.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2574.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2574.x * cbModelParam._m0[1u].y;
        }
        _1941 = frontier_phi_16_38_ladder_2;
        _1943 = frontier_phi_16_38_ladder_1;
        _1945 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1018, _1019, _1020), _1860);
        _1941 = _1929.x * cbModelParam._m0[1u].y;
        _1943 = _1929.y * cbModelParam._m0[1u].y;
        _1945 = _1929.z * cbModelParam._m0[1u].y;
    }
    float _1949 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _836);
    float _1950 = isnan(_1949) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1949 : min(cbModelParam._m0[25u].w, _1949));
    float _2040;
    float _2042;
    float _2044;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2004 = fma(_1082, cbModelParam._m0[21u].z, fma(_1078, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1074)) + cbModelParam._m0[21u].w;
        float _2008 = fma(_1082, cbModelParam._m0[22u].z, fma(_1078, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1074)) + cbModelParam._m0[22u].w;
        float _2012 = fma(_1082, cbModelParam._m0[23u].z, fma(_1078, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1074)) + cbModelParam._m0[23u].w;
        float _2015 = fma(_1020, cbModelParam._m0[21u].z, fma(_1019, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018));
        float _2018 = fma(_1020, cbModelParam._m0[22u].z, fma(_1019, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018));
        float _2021 = fma(_1020, cbModelParam._m0[23u].z, fma(_1019, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018));
        float _2130;
        if (_2015 > 0.0)
        {
            _2130 = abs((1.0 - _2004) / _2015);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2004 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2130 = frontier_phi_28_24_ladder;
        }
        float _2447;
        if (_2018 > 0.0)
        {
            _2447 = abs((1.0 - _2008) / _2018);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2008 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2447 = frontier_phi_40_35_ladder;
        }
        float _2785;
        if (_2021 > 0.0)
        {
            _2785 = abs((1.0 - _2012) / _2021);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2012 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2785 = frontier_phi_50_47_ladder;
        }
        float _2787 = isnan(_2447) ? _2130 : (isnan(_2130) ? _2447 : min(_2130, _2447));
        float _2788 = isnan(_2785) ? _2787 : (isnan(_2787) ? _2785 : min(_2787, _2785));
        float _2792 = (_2788 * _2015) + _2004;
        float _2793 = (_2788 * _2018) + _2008;
        float _2794 = (_2788 * _2021) + _2012;
        float _2795 = _2788 * 9.9999997473787516355514526367188e-05;
        float _2796 = (-1.0) - _2795;
        float _2798 = _2795 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2794 > _2798) || ((_2794 < _2796) || ((_2793 > _2798) || ((_2793 < _2796) || ((_2792 < _2796) || (_2792 > _2798))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2916 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2794, cbModelParam._m0[17u].z, fma(_2793, cbModelParam._m0[17u].y, _2792 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2794, cbModelParam._m0[18u].z, fma(_2793, cbModelParam._m0[18u].y, _2792 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2794, cbModelParam._m0[19u].z, fma(_2793, cbModelParam._m0[19u].y, _2792 * cbModelParam._m0[19u].x))), _1950);
            frontier_phi_25_50_ladder = _2916.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2916.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2916.x * cbModelParam._m0[1u].z;
        }
        _2040 = frontier_phi_25_50_ladder_2;
        _2042 = frontier_phi_25_50_ladder_1;
        _2044 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2024 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1018, _1019, _1020), _1950);
        _2040 = _2024.x * cbModelParam._m0[1u].z;
        _2042 = _2024.y * cbModelParam._m0[1u].z;
        _2044 = _2024.z * cbModelParam._m0[1u].z;
    }
    float _2057 = (((_1045 * _994) + _1046) * _1010) * ((cbModelParam._m0[1u].w * (_2040 - _1941)) + _1941);
    float _2059 = (((_1045 * _996) + _1046) * _1010) * ((cbModelParam._m0[1u].w * (_2042 - _1943)) + _1943);
    float _2061 = (((_1045 * _997) + _1046) * _1010) * ((cbModelParam._m0[1u].w * (_2044 - _1945)) + _1945);
    float _2064 = fma(_2061, cbSceneParam._m0[89u].z, fma(_2059, cbSceneParam._m0[89u].y, _2057 * cbSceneParam._m0[89u].x));
    float _2067 = fma(_2061, cbSceneParam._m0[90u].z, fma(_2059, cbSceneParam._m0[90u].y, _2057 * cbSceneParam._m0[90u].x));
    float _2070 = fma(_2061, cbSceneParam._m0[91u].z, fma(_2059, cbSceneParam._m0[91u].y, _2057 * cbSceneParam._m0[91u].x));
    float _2104 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2108 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2112 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2116 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2117 = _2104 / _2116;
    float _2118 = _2108 / _2116;
    float _2119 = _2112 / _2116;
    float _2266;
    float _2267;
    float _2268;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2146 = ((uint(_2119 > cbSceneParam._m0[59u].y) + uint(_2119 > cbSceneParam._m0[59u].x)) + uint(_2119 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2147 = _2146 + 43u;
        uint _2155 = _2146 + 44u;
        uint _2163 = _2146 + 45u;
        uint _2171 = _2146 + 46u;
        float _2182 = fma(_2116, cbSceneParam._m0[_2147].w, fma(_2112, cbSceneParam._m0[_2147].z, fma(_2108, cbSceneParam._m0[_2147].y, _2104 * cbSceneParam._m0[_2147].x)));
        float _2186 = fma(_2116, cbSceneParam._m0[_2155].w, fma(_2112, cbSceneParam._m0[_2155].z, fma(_2108, cbSceneParam._m0[_2155].y, _2104 * cbSceneParam._m0[_2155].x)));
        float _2194 = fma(_2116, cbSceneParam._m0[_2171].w, fma(_2112, cbSceneParam._m0[_2171].z, fma(_2108, cbSceneParam._m0[_2171].y, _2104 * cbSceneParam._m0[_2171].x)));
        float _2199 = cbSceneParam._m0[33u].z * _2194;
        float _2201 = cbSceneParam._m0[33u].w * _2194;
        float _2204 = fma(_2116, cbSceneParam._m0[_2163].w, fma(_2112, cbSceneParam._m0[_2163].z, fma(_2108, cbSceneParam._m0[_2163].y, _2104 * cbSceneParam._m0[_2163].x))) / _2194;
        float _2252 = (cbSceneParam._m0[33u].x - sqrt(((_2118 * _2118) + (_2117 * _2117)) + (_2119 * _2119))) * cbSceneParam._m0[33u].y;
        float _4654 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2259 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2199 + _2182) / _2194, (_2201 + _2186) / _2194), _2204), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2201 + _2182) / _2194, (_2186 - _2199) / _2194), _2204), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2182 - _2199) / _2194, (_2186 - _2201) / _2194), _2204), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2182 - _2201) / _2194, (_2199 + _2186) / _2194), _2204), 0.0)).x), vec4(0.25)));
        _2266 = 1.0 - (_2259 * cbSceneParam._m0[34u].x);
        _2267 = 1.0 - (_2259 * cbSceneParam._m0[34u].y);
        _2268 = 1.0 - (_2259 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2266 = 1.0;
        _2267 = 1.0;
        _2268 = 1.0;
    }
    float _2332;
    float _2334;
    float _2336;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2320 = fma(_2116, cbSceneParam._m0[63u].w, fma(_2112, cbSceneParam._m0[63u].z, fma(_2108, cbSceneParam._m0[63u].y, _2104 * cbSceneParam._m0[63u].x)));
        float _2321 = fma(_2116, cbSceneParam._m0[60u].w, fma(_2112, cbSceneParam._m0[60u].z, fma(_2108, cbSceneParam._m0[60u].y, _2104 * cbSceneParam._m0[60u].x))) / _2320;
        float _2322 = fma(_2116, cbSceneParam._m0[61u].w, fma(_2112, cbSceneParam._m0[61u].z, fma(_2108, cbSceneParam._m0[61u].y, _2104 * cbSceneParam._m0[61u].x))) / _2320;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2321 >= cbSceneParam._m0[64u].x) && (_2322 >= cbSceneParam._m0[64u].y)) && (_2321 <= cbSceneParam._m0[64u].z)) && (_2322 <= cbSceneParam._m0[64u].w))
        {
            float _2460 = fma(_2116, cbSceneParam._m0[62u].w, fma(_2112, cbSceneParam._m0[62u].z, fma(_2108, cbSceneParam._m0[62u].y, _2104 * cbSceneParam._m0[62u].x))) / _2320;
            float _2464 = isnan(cbSceneParam._m0[41u].w) ? _2460 : (isnan(_2460) ? cbSceneParam._m0[41u].w : max(_2460, cbSceneParam._m0[41u].w));
            float _2507 = (cbSceneParam._m0[33u].x - sqrt(((_2118 * _2118) + (_2117 * _2117)) + (_2119 * _2119))) * cbSceneParam._m0[33u].y;
            float _4670 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
            float _2514 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2321, cbSceneParam._m0[33u].w + _2322), _2464), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2321, _2322 - cbSceneParam._m0[33u].z), _2464), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2321 - cbSceneParam._m0[33u].z, _2322 - cbSceneParam._m0[33u].w), _2464), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2321 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2322), _2464), 0.0)).x), vec4(0.25)));
            float _2518 = 1.0 - (_2514 * cbSceneParam._m0[34u].x);
            float _2519 = 1.0 - (_2514 * cbSceneParam._m0[34u].y);
            float _2520 = 1.0 - (_2514 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2520) ? _2268 : (isnan(_2268) ? _2520 : min(_2268, _2520));
            frontier_phi_37_36_ladder_1 = isnan(_2519) ? _2267 : (isnan(_2267) ? _2519 : min(_2267, _2519));
            frontier_phi_37_36_ladder_2 = isnan(_2518) ? _2266 : (isnan(_2266) ? _2518 : min(_2266, _2518));
        }
        else
        {
            frontier_phi_37_36_ladder = _2268;
            frontier_phi_37_36_ladder_1 = _2267;
            frontier_phi_37_36_ladder_2 = _2266;
        }
        _2332 = frontier_phi_37_36_ladder_2;
        _2334 = frontier_phi_37_36_ladder_1;
        _2336 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2332 = _2266;
        _2334 = _2267;
        _2336 = _2268;
    }
    uvec4 _2341 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2343 = _2341.x * 14u;
    uint _2344 = _2343 + 13u;
    float _2351 = _1010 + (-1.0);
    float _2356 = (cbLight._m0[_2344].x * _2351) + 1.0;
    float _2357 = (cbLight._m0[_2344].y * _2351) + 1.0;
    float _2358 = (cbLight._m0[_2344].z * _2351) + 1.0;
    float _2359 = (cbLight._m0[_2344].w * _2351) + 1.0;
    uint _2360 = _2343 + 5u;
    float _2366 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
    uint _2370 = _2343 + 4u;
    float _2379 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
    uint _2383 = _2343 | 1u;
    float _2394 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_833, _834, _835));
    float _2397 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_833, _834, _835));
    float _4706 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _4717 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2402 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * 0.3183098733425140380859375;
    float _2404 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * 0.3183098733425140380859375;
    float _2411 = ((cbLight._m0[_2360].x * _2366) * _2404) + (((cbLight._m0[_2370].x * _2332) * _2379) * _2402);
    float _2412 = ((_2366 * cbLight._m0[_2360].y) * _2404) + (((cbLight._m0[_2370].y * _2334) * _2379) * _2402);
    float _2413 = ((_2366 * cbLight._m0[_2360].z) * _2404) + (((cbLight._m0[_2370].z * _2336) * _2379) * _2402);
    uvec4 _2417 = floatBitsToUint(cbLight._m0[_2343 + 12u]);
    bool _2419 = _2417.x == 0u;
    float _2521;
    float _2523;
    float _2525;
    if (_2419)
    {
        _2521 = _2411;
        _2523 = _2412;
        _2525 = _2413;
    }
    else
    {
        uint _2529 = _2343 + 6u;
        float _2545 = (dot(vec3(cbLight._m0[_2343 + 2u].xyz), vec3(_833, _834, _835)) * 0.5) + 0.5;
        float _2546 = _2545 * _2545;
        float _4728 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2547 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2548 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
        _2521 = (((cbLight._m0[_2529].x * 0.3183098733425140380859375) * _2547) * _2548) + _2411;
        _2523 = (((cbLight._m0[_2529].y * 0.3183098733425140380859375) * _2547) * _2548) + _2412;
        _2525 = (((cbLight._m0[_2529].z * 0.3183098733425140380859375) * _2547) * _2548) + _2413;
    }
    bool _2528 = _2417.y == 0u;
    float _2583;
    float _2585;
    float _2587;
    if (_2528)
    {
        _2583 = _2521;
        _2585 = _2523;
        _2587 = _2525;
    }
    else
    {
        uint _2756 = _2343 + 7u;
        float _2772 = (dot(vec3(cbLight._m0[_2343 + 3u].xyz), vec3(_833, _834, _835)) * 0.5) + 0.5;
        float _2773 = _2772 * _2772;
        float _4744 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2774 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2775 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        _2583 = (((cbLight._m0[_2756].x * 0.3183098733425140380859375) * _2774) * _2775) + _2521;
        _2585 = (((cbLight._m0[_2756].y * 0.3183098733425140380859375) * _2774) * _2775) + _2523;
        _2587 = (((cbLight._m0[_2756].z * 0.3183098733425140380859375) * _2774) * _2775) + _2525;
    }
    uint _2590 = _2343 + 8u;
    float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _836) * 0.949999988079071044921875);
    float _2604 = _2603 * _2603;
    float _2605 = cbLight._m0[_2343].x + _912;
    float _2606 = cbLight._m0[_2343].y + _913;
    float _2607 = cbLight._m0[_2343].z + _914;
    float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
    float _2612 = _2611 * _2605;
    float _2613 = _2611 * _2606;
    float _2614 = _2611 * _2607;
    float _2615 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2343].xyz));
    float _4760 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2618 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
    float _4771 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _2619 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
    float _2620 = dot(vec3(_833, _834, _835), vec3(_2612, _2613, _2614));
    float _4782 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2623 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
    float _2624 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2612, _2613, _2614));
    float _4793 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2628 = _2604 * _2604;
    float _2632 = ((_2623 * _2623) * (_2628 + (-1.0))) + 1.0;
    float _2640 = exp2(log2(1.0 - (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) * 5.0);
    float _2641 = 0.959999978542327880859375 - _991;
    float _2643 = 0.959999978542327880859375 - _992;
    float _2644 = 0.959999978542327880859375 - _993;
    float _2651 = 1.0 - _2604;
    float _2662 = (0.5 / (((_2619 * ((_2618 * _2651) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2619 * _2651) + _2604) * _2618))) * _2618;
    float _4804 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2664 = (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2628 / ((_2632 * _2632) * 3.141590118408203125));
    uint _2678 = _2343 + 9u;
    float _2689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2383].w)) * _836) * 0.949999988079071044921875);
    float _2690 = _2689 * _2689;
    float _2691 = cbLight._m0[_2383].x + _912;
    float _2692 = cbLight._m0[_2383].y + _913;
    float _2693 = cbLight._m0[_2383].z + _914;
    float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
    float _2698 = _2697 * _2691;
    float _2699 = _2697 * _2692;
    float _2700 = _2697 * _2693;
    float _2701 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2383].xyz));
    float _4815 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2704 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
    float _2705 = dot(vec3(_833, _834, _835), vec3(_2698, _2699, _2700));
    float _4826 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2708 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
    float _2709 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_2698, _2699, _2700));
    float _4837 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2713 = _2690 * _2690;
    float _2717 = ((_2708 * _2708) * (_2713 + (-1.0))) + 1.0;
    float _2724 = exp2(log2(1.0 - (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) * 5.0);
    float _2731 = 1.0 - _2690;
    float _2741 = (0.5 / (((_2619 * ((_2704 * _2731) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2619 * _2731) + _2690) * _2704))) * _2704;
    float _4848 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
    float _2743 = (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2713 / ((_2717 * _2717) * 3.141590118408203125));
    float _2753 = (((((_2724 * _2641) + _994) * cbLight._m0[_2678].x) * _2743) * _2366) + ((((cbLight._m0[_2590].x * _2332) * ((_2640 * _2641) + _994)) * _2664) * _2379);
    float _2754 = (((((_2724 * _2643) + _996) * cbLight._m0[_2678].y) * _2743) * _2366) + ((((cbLight._m0[_2590].y * _2334) * ((_2640 * _2643) + _996)) * _2664) * _2379);
    float _2755 = (((((_2724 * _2644) + _997) * cbLight._m0[_2678].z) * _2743) * _2366) + ((((cbLight._m0[_2590].z * _2336) * ((_2640 * _2644) + _997)) * _2664) * _2379);
    float _2811;
    float _2813;
    float _2815;
    if (_2419)
    {
        _2811 = _2753;
        _2813 = _2754;
        _2815 = _2755;
    }
    else
    {
        uint _2817 = _2343 + 2u;
        uint _2821 = _2343 + 10u;
        float _2835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2817].w)) * _836) * 0.949999988079071044921875);
        float _2836 = _2835 * _2835;
        float _2837 = cbLight._m0[_2817].x + _912;
        float _2838 = cbLight._m0[_2817].y + _913;
        float _2839 = cbLight._m0[_2817].z + _914;
        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
        float _2844 = _2843 * _2837;
        float _2845 = _2843 * _2838;
        float _2846 = _2843 * _2839;
        float _2847 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2817].xyz));
        float _4859 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2850 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
        float _2851 = dot(vec3(_833, _834, _835), vec3(_2844, _2845, _2846));
        float _4870 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
        float _2855 = dot(vec3(cbLight._m0[_2817].xyz), vec3(_2844, _2845, _2846));
        float _4881 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2859 = _2836 * _2836;
        float _2863 = ((_2854 * _2854) * (_2859 + (-1.0))) + 1.0;
        float _2870 = exp2(log2(1.0 - (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) * 5.0);
        float _2877 = 1.0 - _2836;
        float _2887 = (0.5 / (((_2619 * ((_2850 * _2877) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2619 * _2877) + _2836) * _2850))) * _2850;
        float _4892 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2889 = (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2859 / ((_2863 * _2863) * 3.141590118408203125));
        float _2890 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
        _2811 = (((((_2870 * _2641) + _994) * cbLight._m0[_2821].x) * _2889) * _2890) + _2753;
        _2813 = (((((_2870 * _2643) + _996) * cbLight._m0[_2821].y) * _2889) * _2890) + _2754;
        _2815 = (((((_2870 * _2644) + _997) * cbLight._m0[_2821].z) * _2889) * _2890) + _2755;
    }
    float _2921;
    float _2923;
    float _2925;
    if (_2528)
    {
        _2921 = _2811;
        _2923 = _2813;
        _2925 = _2815;
    }
    else
    {
        uint _2932 = _2343 + 3u;
        uint _2936 = _2343 + 11u;
        float _2950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2932].w)) * _836) * 0.949999988079071044921875);
        float _2951 = _2950 * _2950;
        float _2952 = cbLight._m0[_2932].x + _912;
        float _2953 = cbLight._m0[_2932].y + _913;
        float _2954 = cbLight._m0[_2932].z + _914;
        float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
        float _2959 = _2958 * _2952;
        float _2960 = _2958 * _2953;
        float _2961 = _2958 * _2954;
        float _2962 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2932].xyz));
        float _4908 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2965 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
        float _2966 = dot(vec3(_833, _834, _835), vec3(_2959, _2960, _2961));
        float _4919 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2969 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
        float _2970 = dot(vec3(cbLight._m0[_2932].xyz), vec3(_2959, _2960, _2961));
        float _4930 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2974 = _2951 * _2951;
        float _2978 = ((_2969 * _2969) * (_2974 + (-1.0))) + 1.0;
        float _2985 = exp2(log2(1.0 - (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0)))) * 5.0);
        float _2992 = 1.0 - _2951;
        float _3002 = (0.5 / (((_2619 * ((_2965 * _2992) + _2951)) + 9.9999999392252902907785028219223e-09) + (((_2619 * _2992) + _2951) * _2965))) * _2965;
        float _4941 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
        float _3004 = (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2974 / ((_2978 * _2978) * 3.141590118408203125));
        float _3005 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        _2921 = (((((_2985 * _2641) + _994) * cbLight._m0[_2936].x) * _3004) * _3005) + _2811;
        _2923 = (((((_2985 * _2643) + _996) * cbLight._m0[_2936].y) * _3004) * _3005) + _2813;
        _2925 = (((((_2985 * _2644) + _997) * cbLight._m0[_2936].z) * _3004) * _3005) + _2815;
    }
    float _3071;
    float _3073;
    float _3075;
    float _3077;
    float _3079;
    float _3081;
    if (_2341.y == 0u)
    {
        uvec4 _3026 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3027 = _3026.x;
        uint _3038 = uint((float(_3026.y) * floor(float(uint(cbSceneParam._m0[85u].y * _933) / _3027))) + floor(float(uint(cbSceneParam._m0[85u].x * _932) / _3027)));
        float _3048 = (log2(_2119 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3049 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        uint _3052 = uint(isnan(14.0) ? _3049 : (isnan(_3049) ? 14.0 : min(_3049, 14.0)));
        uvec4 _3057 = texelFetch(g_lightClusterGridBuffer, int(((_3052 << 2u) + (_3038 << 6u)) >> 2u));
        uint _3058 = _3057.x;
        uint _3059 = _3026.z;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        if (((((1u << ((_3059 >> 4u) & 15u)) + 4294967295u) & _3058) == 0u) || ((_3059 & 240u) == 0u))
        {
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
            _3146 = 0.0;
            _3148 = 0.0;
        }
        else
        {
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3147;
            float _3149;
            float _3290 = 0.0;
            float _3291 = 0.0;
            float _3292 = 0.0;
            float _3293 = 0.0;
            float _3294 = 0.0;
            float _3295 = 0.0;
            uint _3296 = 0u;
            uint _3305;
            bool _3306;
            for (;;)
            {
                _3305 = texelFetch(g_lightClassification, int((((_3052 << 5u) + (_3038 << 9u)) + (_3296 << 2u)) >> 2u)).x;
                _3306 = _3305 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3306)
                {
                    frontier_phi_71_pred = _3295;
                    frontier_phi_71_pred_1 = _3294;
                    frontier_phi_71_pred_2 = _3293;
                    frontier_phi_71_pred_3 = _3292;
                    frontier_phi_71_pred_4 = _3291;
                    frontier_phi_71_pred_5 = _3290;
                }
                else
                {
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    uint _3441;
                    _3435 = _3290;
                    _3436 = _3291;
                    _3437 = _3292;
                    _3438 = _3293;
                    _3439 = _3294;
                    _3440 = _3295;
                    _3441 = _3305;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    for (;;)
                    {
                        uint _3445 = uint(findLSB(_3441)) + (_3296 << 5u);
                        uint _3442 = (_3441 + 4294967295u) & _3441;
                        uint _3447 = _3445 * 48u;
                        vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3447)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 3u)).x));
                        uint _3467 = (_3445 * 48u) + 4u;
                        vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3467)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 3u)).x));
                        uint _3486 = (_3445 * 48u) + 8u;
                        vec3 _3497 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3486)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 2u)).x));
                        float _3501 = _3461.x - _2117;
                        float _3502 = _3461.y - _2118;
                        float _3503 = _3461.z - _2119;
                        float _3504 = dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503));
                        float _3507 = inversesqrt(_3504);
                        float _3508 = _3507 * _3501;
                        float _3509 = _3507 * _3502;
                        float _3510 = _3507 * _3503;
                        float _3511 = dot(vec3(_951, _954, _957), vec3(_3508, _3509, _3510));
                        float _3516 = 1.0 - (_3504 * _3461.w);
                        float _4967 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3517 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                        float _3518 = sqrt(_3504) * _3480.w;
                        float _3521 = 1.39999997615814208984375 / (_3518 + 1.39999997615814208984375);
                        float _3522 = _3521 * _3521;
                        float _3525 = ((1.0 - _3522) * _3511) + _3522;
                        float _3528 = _3518 * _3518;
                        float _3532 = ((isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0))) * _3517) / ((_3528 * 0.699999988079071044921875) + 1.0);
                        float _3536 = (-0.0) - _2117;
                        float _3537 = (-0.0) - _2118;
                        float _3538 = (-0.0) - _2119;
                        float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                        float _3543 = _3542 * _3536;
                        float _3544 = _3542 * _3537;
                        float _3545 = _3542 * _3538;
                        float _3552 = exp2(log2(1.0 / ((_3528 * 3.5) + 5.0)) * 0.25);
                        float _3553 = 1.0 - _1026;
                        float _3560 = sqrt(1.0 - ((1.0 - (_3553 * _3553)) * (1.0 - (_3552 * _3552))));
                        float _3561 = _3560 * _3560;
                        float _3562 = _3561 * _3561;
                        float _3563 = _3543 + _3508;
                        float _3564 = _3544 + _3509;
                        float _3565 = _3545 + _3510;
                        float _3569 = inversesqrt(dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565)));
                        float _3573 = dot(vec3(_951, _954, _957), vec3(_3543, _3544, _3545));
                        float _4983 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                        float _3576 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                        float _3577 = dot(vec3(_951, _954, _957), vec3(_3569 * _3563, _3569 * _3564, _3569 * _3565));
                        float _4994 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                        float _3580 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                        float _3584 = ((_3580 * _3580) * (_3562 + (-1.0))) + 1.0;
                        float _3585 = _3521 * _3561;
                        float _3586 = _3585 * _3585;
                        float _3589 = ((1.0 - _3586) * _3511) + _3586;
                        float _5005 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                        float _3590 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
                        float _3591 = 1.0 - _3561;
                        float _3601 = (0.5 / (((_3590 * ((_3576 * _3591) + _3561)) + 9.9999999392252902907785028219223e-09) + (((_3590 * _3591) + _3561) * _3576))) * _3590;
                        float _5016 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                        float _3612 = (((_3562 * 3.1415927410125732421875) * (isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0)))) / ((_3584 * _3584) * ((_3528 * 2.1991131305694580078125) + 3.141590118408203125))) * _3517;
                        _3365 = (_3532 * _3480.x) + _3438;
                        _3366 = (_3532 * _3480.y) + _3439;
                        _3367 = (_3532 * _3480.z) + _3440;
                        _3362 = (_3612 * _3497.x) + _3435;
                        _3363 = (_3612 * _3497.y) + _3436;
                        _3364 = (_3612 * _3497.z) + _3437;
                        if (_3442 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3435 = _3362;
                            _3436 = _3363;
                            _3437 = _3364;
                            _3438 = _3365;
                            _3439 = _3366;
                            _3440 = _3367;
                            _3441 = _3442;
                        }
                    }
                    frontier_phi_71_pred = _3367;
                    frontier_phi_71_pred_1 = _3366;
                    frontier_phi_71_pred_2 = _3365;
                    frontier_phi_71_pred_3 = _3364;
                    frontier_phi_71_pred_4 = _3363;
                    frontier_phi_71_pred_5 = _3362;
                }
                _3149 = frontier_phi_71_pred;
                _3147 = frontier_phi_71_pred_1;
                _3145 = frontier_phi_71_pred_2;
                _3143 = frontier_phi_71_pred_3;
                _3141 = frontier_phi_71_pred_4;
                _3139 = frontier_phi_71_pred_5;
                uint _3297 = _3296 + 1u;
                if (_3297 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3290 = _3139;
                    _3291 = _3141;
                    _3292 = _3143;
                    _3293 = _3145;
                    _3294 = _3147;
                    _3295 = _3149;
                    _3296 = _3297;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
            _3146 = _3147;
            _3148 = _3149;
        }
        uvec4 _3152 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3153 = _3152.z;
        uint _3155 = (_3153 >> 8u) & 15u;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        float _3268;
        if (((4294967295u << _3155) & _3058) == 0u)
        {
            _3258 = _3138;
            _3260 = _3140;
            _3262 = _3142;
            _3264 = _3144;
            _3266 = _3146;
            _3268 = _3148;
        }
        else
        {
            float _3283 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
            float _3284 = _3283 * _2117;
            float _3285 = _3283 * _2118;
            float _3286 = _3283 * _2119;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3155 < ((_3153 >> 12u) & 15u))
            {
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3269;
                float _3418 = _3138;
                float _3419 = _3140;
                float _3420 = _3142;
                float _3421 = _3144;
                float _3422 = _3146;
                float _3423 = _3148;
                uint _3424 = _3155;
                uint _3433;
                bool _3434;
                for (;;)
                {
                    _3433 = texelFetch(g_lightClassification, int((((_3052 << 5u) + (_3038 << 9u)) + (_3424 << 2u)) >> 2u)).x;
                    _3434 = _3433 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3434)
                    {
                        frontier_phi_82_pred = _3423;
                        frontier_phi_82_pred_1 = _3422;
                        frontier_phi_82_pred_2 = _3421;
                        frontier_phi_82_pred_3 = _3420;
                        frontier_phi_82_pred_4 = _3419;
                        frontier_phi_82_pred_5 = _3418;
                    }
                    else
                    {
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3925;
                        float _3639 = _3418;
                        float _3640 = _3419;
                        float _3641 = _3420;
                        float _3642 = _3421;
                        float _3643 = _3422;
                        float _3644 = _3423;
                        uint _3645 = _3433;
                        uint _3646;
                        vec4 _3671;
                        float _3672;
                        vec4 _3687;
                        vec3 _3699;
                        vec4 _3714;
                        vec4 _3730;
                        float _3776;
                        bool _3777;
                        for (;;)
                        {
                            uint _3656 = ((_3424 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3645));
                            _3646 = (_3645 + 4294967295u) & _3645;
                            uint _3658 = _3656 * 40u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            _3672 = _3671.w;
                            uint _3674 = (_3656 * 40u) + 4u;
                            _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3689 = (_3656 * 40u) + 8u;
                            _3699 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x));
                            uint _3701 = (_3656 * 40u) + 16u;
                            _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            uint _3717 = (_3656 * 40u) + 20u;
                            _3730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 3u)).x));
                            uint _3732 = (_3656 * 40u) + 24u;
                            vec4 _3745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 3u)).x));
                            uint _3751 = (_3656 * 40u) + 28u;
                            vec4 _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            _3776 = fma(_2119, _3764.z, fma(_2118, _3764.y, _3764.x * _2117)) + _3764.w;
                            _3777 = !((fma(_2119, _3745.z, fma(_2118, _3745.y, _3745.x * _2117)) + _3745.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3777)
                            {
                                float _3804 = _3671.x - _2117;
                                float _3805 = _3671.y - _2118;
                                float _3806 = _3671.z - _2119;
                                float _3807 = dot(vec3(_3804, _3805, _3806), vec3(_3804, _3805, _3806));
                                float _3810 = inversesqrt(_3807);
                                float _3811 = _3810 * _3804;
                                float _3812 = _3810 * _3805;
                                float _3813 = _3810 * _3806;
                                float _3817 = 1.0 - (_3807 / (_3672 * _3672));
                                float _5027 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3818 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
                                float _3822 = sqrt(_3807) * _3687.w;
                                float _3824 = 1.39999997615814208984375 / (_3822 + 1.39999997615814208984375);
                                float _3825 = _3824 * _3824;
                                float _3828 = ((1.0 - _3825) * dot(vec3(_3811, _3812, _3813), vec3(_951, _954, _957))) + _3825;
                                float _3831 = _3822 * _3822;
                                float _3835 = (fma(_2119, _3714.z, fma(_2118, _3714.y, _3714.x * _2117)) + _3714.w) / _3776;
                                float _3836 = (fma(_2119, _3730.z, fma(_2118, _3730.y, _3730.x * _2117)) + _3730.w) / _3776;
                                float _3840 = 1.0 - dot(vec2(_3835, _3836), vec2(_3835, _3836));
                                float _5043 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3841 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                                float _3842 = _3841 * (((isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0))) * _3818) / ((_3831 * 0.699999988079071044921875) + 1.0));
                                float _3854 = exp2(log2(1.0 / ((_3831 * 3.5) + 5.0)) * 0.25);
                                float _3855 = 1.0 - _1026;
                                float _3862 = sqrt(1.0 - ((1.0 - (_3855 * _3855)) * (1.0 - (_3854 * _3854))));
                                float _3863 = _3862 * _3862;
                                float _3864 = _3863 * _3863;
                                float _3865 = _3811 - _3284;
                                float _3866 = _3812 - _3285;
                                float _3867 = _3813 - _3286;
                                float _3871 = inversesqrt(dot(vec3(_3865, _3866, _3867), vec3(_3865, _3866, _3867)));
                                float _3875 = dot(vec3(_951, _954, _957), vec3((-0.0) - _3284, (-0.0) - _3285, (-0.0) - _3286));
                                float _5054 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3878 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
                                float _3879 = dot(vec3(_951, _954, _957), vec3(_3871 * _3865, _3871 * _3866, _3871 * _3867));
                                float _5065 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3882 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
                                float _3886 = ((_3882 * _3882) * (_3864 + (-1.0))) + 1.0;
                                float _3887 = _3824 * _3863;
                                float _3888 = _3887 * _3887;
                                float _3894 = ((1.0 - _3888) * dot(vec3(_951, _954, _957), vec3(_3811, _3812, _3813))) + _3888;
                                float _5076 = isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0));
                                float _3895 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
                                float _3896 = 1.0 - _3863;
                                float _3906 = (0.5 / (((_3895 * ((_3878 * _3896) + _3863)) + 9.9999999392252902907785028219223e-09) + (((_3895 * _3896) + _3863) * _3878))) * _3895;
                                float _5087 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3916 = (_3841 * _3818) * (((_3864 * 3.1415927410125732421875) * (isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0)))) / ((_3886 * _3886) * ((_3831 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3842 * _3687.z;
                                frontier_phi_88_pred_1 = _3842 * _3687.y;
                                frontier_phi_88_pred_2 = _3842 * _3687.x;
                                frontier_phi_88_pred_3 = _3916 * _3699.z;
                                frontier_phi_88_pred_4 = _3916 * _3699.y;
                                frontier_phi_88_pred_5 = _3916 * _3699.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3925 = frontier_phi_88_pred;
                            _3924 = frontier_phi_88_pred_1;
                            _3923 = frontier_phi_88_pred_2;
                            _3922 = frontier_phi_88_pred_3;
                            _3921 = frontier_phi_88_pred_4;
                            _3920 = frontier_phi_88_pred_5;
                            _3629 = _3923 + _3642;
                            _3630 = _3924 + _3643;
                            _3631 = _3925 + _3644;
                            _3626 = _3920 + _3639;
                            _3627 = _3921 + _3640;
                            _3628 = _3922 + _3641;
                            if (_3646 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3646;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3631;
                        frontier_phi_82_pred_1 = _3630;
                        frontier_phi_82_pred_2 = _3629;
                        frontier_phi_82_pred_3 = _3628;
                        frontier_phi_82_pred_4 = _3627;
                        frontier_phi_82_pred_5 = _3626;
                    }
                    _3269 = frontier_phi_82_pred;
                    _3267 = frontier_phi_82_pred_1;
                    _3265 = frontier_phi_82_pred_2;
                    _3263 = frontier_phi_82_pred_3;
                    _3261 = frontier_phi_82_pred_4;
                    _3259 = frontier_phi_82_pred_5;
                    uint _3425 = _3424 + 1u;
                    if (_3425 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3418 = _3259;
                        _3419 = _3261;
                        _3420 = _3263;
                        _3421 = _3265;
                        _3422 = _3267;
                        _3423 = _3269;
                        _3424 = _3425;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3265;
                frontier_phi_63_64_ladder_1 = _3269;
                frontier_phi_63_64_ladder_2 = _3267;
                frontier_phi_63_64_ladder_3 = _3263;
                frontier_phi_63_64_ladder_4 = _3261;
                frontier_phi_63_64_ladder_5 = _3259;
            }
            else
            {
                frontier_phi_63_64_ladder = _3144;
                frontier_phi_63_64_ladder_1 = _3148;
                frontier_phi_63_64_ladder_2 = _3146;
                frontier_phi_63_64_ladder_3 = _3142;
                frontier_phi_63_64_ladder_4 = _3140;
                frontier_phi_63_64_ladder_5 = _3138;
            }
            _3258 = frontier_phi_63_64_ladder_5;
            _3260 = frontier_phi_63_64_ladder_4;
            _3262 = frontier_phi_63_64_ladder_3;
            _3264 = frontier_phi_63_64_ladder;
            _3266 = frontier_phi_63_64_ladder_2;
            _3268 = frontier_phi_63_64_ladder_1;
        }
        float _3273 = isnan(1.0) ? _1010 : (isnan(_1010) ? 1.0 : min(_1010, 1.0));
        _3071 = (_3273 * _3264) + _2583;
        _3073 = (_3273 * _3266) + _2585;
        _3075 = (_3273 * _3268) + _2587;
        _3077 = ((_3258 * _994) * _3273) + _2921;
        _3079 = ((_3260 * _996) * _3273) + _2923;
        _3081 = ((_3262 * _997) * _3273) + _2925;
    }
    else
    {
        _3071 = _2583;
        _3073 = _2585;
        _3075 = _2587;
        _3077 = _2921;
        _3079 = _2923;
        _3081 = _2925;
    }
    float _5103 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _5114 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _5125 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _3098 = ((isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0))) * (_3071 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1010))) + ((_3077 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1849)) * cbPerFrame._m0[3u].x);
    float _3099 = ((isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0))) * (_3073 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1010))) + ((_3079 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1849)) * cbPerFrame._m0[3u].x);
    float _3100 = ((isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0))) * (_3075 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1010))) + ((_3081 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1849)) * cbPerFrame._m0[3u].x);
    uint _3101 = _259 + 6u;
    float _3109 = _932 / cbSceneParam._m0[86u].x;
    float _3110 = _933 / cbSceneParam._m0[86u].y;
    vec4 _3124 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3109, _3110, (log2((isnan(cbSceneParam._m0[77u].w) ? _855 : (isnan(_855) ? cbSceneParam._m0[77u].w : min(_855, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3126 = _3124.x;
    float _3127 = _3124.y;
    float _3128 = _3124.z;
    float _3129 = _3124.w;
    float _3200;
    float _3202;
    float _3204;
    float _3206;
    if (_855 > cbSceneParam._m0[78u].w)
    {
        float _3163 = isnan(_855) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _855 : min(cbSceneParam._m0[80u].w, _855));
        float _3164 = _3163 / _855;
        float _3175 = _3164 * _905;
        float _3176 = _906 * _3164;
        float _3177 = (-0.0) - _3176;
        float _3178 = _3164 * _907;
        float _3180 = (cbSceneParam._m0[77u].w * _3177) / _3163;
        float _3181 = _3180 + cbSceneParam._m0[79u].w;
        float _3182 = cbSceneParam._m0[79u].w - _3176;
        float _3188 = sqrt(((_3175 * _3175) + (_3176 * _3176)) + (_3178 * _3178));
        float _3191 = (1.0 - (cbSceneParam._m0[77u].w / _3163)) * _3188;
        float _3196 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3198 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3375;
        if (abs((_3177 - _3180) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3375 = ((((_3181 > 0.0) ? exp2(_3196 * _3181) : (2.0 - exp2(_3198 * _3181))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3191;
        }
        else
        {
            float _3319 = 1.0 / cbSceneParam._m0[80u].x;
            float _3320 = isnan(_3182) ? _3181 : (isnan(_3181) ? _3182 : max(_3181, _3182));
            float _3321 = isnan(_3182) ? _3181 : (isnan(_3181) ? _3182 : min(_3181, _3182));
            float _3330 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : min(_3320, 0.0));
            float _3331 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : min(_3321, 0.0));
            _3375 = ((abs(_3188 / _3177) * cbSceneParam._m0[80u].y) * ((((_3330 - _3331) * 2.0) - ((exp2(_3196 * (isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0)))) - exp2(_3196 * (isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0))))) * _3319)) - ((exp2(_3198 * _3330) - exp2(_3198 * _3331)) * _3319))) + (_3191 * cbSceneParam._m0[80u].z);
        }
        vec4 _3377 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3109, _3110, 1.0), 0.0);
        float _3386 = exp2((_3375 * (-1.44269502162933349609375)) * (1.0 - _3377.w));
        float _3387 = log2(_3386);
        float _3403 = log2(_3129);
        _3200 = (exp2(_3403 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3387 * cbSceneParam._m0[78u].x)) * _3377.x) / cbSceneParam._m0[78u].x)) + _3126;
        _3202 = (exp2(_3403 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3387 * cbSceneParam._m0[78u].y)) * _3377.y) / cbSceneParam._m0[78u].y)) + _3127;
        _3204 = (exp2(_3403 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3387 * cbSceneParam._m0[78u].z)) * _3377.z) / cbSceneParam._m0[78u].z)) + _3128;
        _3206 = _3386 * _3129;
    }
    else
    {
        _3200 = _3126;
        _3202 = _3127;
        _3204 = _3128;
        _3206 = _3129;
    }
    bool _3413;
    vec4 _3216;
    vec4 _3238;
    float _3240;
    float _3244;
    float _3245;
    float _3246;
    float _3247;
    bool _3257;
    for (;;)
    {
        _3216 = cbMatDynParam._m0[0u];
        float _3218 = roundEven(_3216.y);
        bool _3219 = _3218 == 3.0;
        float _3220 = log2(_3206);
        float _3227 = exp2(_3220 * cbSceneParam._m0[78u].x) * _3098;
        float _3228 = exp2(_3220 * cbSceneParam._m0[78u].y) * _3099;
        float _3229 = exp2(_3220 * cbSceneParam._m0[78u].z) * _3100;
        float _3236 = _921 + (-0.5);
        _3238 = cbMtdParam._m0[1u];
        _3240 = _3238.y * _3236;
        float _3243 = (_3218 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3244 = _3243 * (_3219 ? _3227 : (_3227 + (cbSceneParam._m0[72u].w * _3200)));
        _3245 = _3243 * (_3219 ? _3228 : (_3228 + (cbSceneParam._m0[72u].w * _3202)));
        _3246 = _3243 * (_3219 ? _3229 : (_3229 + (cbSceneParam._m0[72u].w * _3204)));
        _3247 = _3236 * 0.999000012874603271484375;
        _3257 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3257)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3247) < 0.5)
            {
                _3413 = true;
                break;
            }
        }
        uint _3354 = _970 + uint(_3216.w);
        if ((cbInstanceData._m0[_3354].w < 1.0) && ((cbInstanceData._m0[_3354].w + _3247) < 0.5))
        {
            _3413 = true;
            break;
        }
        if ((_3240 + 1.0) < _3238.x)
        {
            _3413 = true;
            break;
        }
        _3413 = false;
        break;
    }
    float _3617;
    if (_3413)
    {
        discard_state = true;
        _3617 = 0.0;
    }
    else
    {
        _3617 = cbInstanceData._m0[_3101].w;
    }
    SV_Target.x = _3244;
    SV_Target.y = _3245;
    SV_Target.z = _3246;
    SV_Target.w = _3617;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3101].w;
    discard_exit();
}


