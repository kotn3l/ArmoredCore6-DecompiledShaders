#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1517;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _373.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[23u].w) + _423) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4123 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _448 = (_441 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _449 = (_441 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _450 = (_441 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _373.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[23u].w) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4134 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _527 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _304.x) * ((_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448);
    float _530 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _304.y) * ((_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449);
    float _533 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _304.z) * ((_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450);
    vec4 _552 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _591 = _589.x;
    float _592 = _589.y;
    float _593 = _589.z;
    float _600 = ((_572.x - _591) * _441) + _591;
    float _601 = ((_572.y - _592) * _441) + _592;
    float _602 = ((_572.z - _593) * _441) + _593;
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _627 = ((_614.z - _602) * _514) + _602;
    float _630 = ((((_614.x - _600) * _514) + _600) * 2.0) + (-1.0);
    float _632 = ((((_614.y - _601) * _514) + _601) * 2.0) + (-1.0);
    float _633 = dot(vec2(_630, _632), vec2(_630, _632));
    float _4145 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _638 = sqrt(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _664 = (((_652.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _630;
    float _665 = (((_652.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _632;
    float _668 = fma(_638, _253, fma(_665, _260, _664 * _246));
    float _671 = fma(_638, _254, fma(_665, _261, _664 * _247));
    float _674 = fma(_638, _255, fma(_665, _262, _664 * _248));
    float _678 = inversesqrt(dot(vec3(_668, _671, _674), vec3(_668, _671, _674)));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _707 = _705.x;
    float _708 = 1.0 - _707;
    float _717 = (cbMtdParam._m0[19u].x + dot(vec4(_678 * _668, _678 * _671, _678 * _674, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_707 - _708) * cbMtdParam._m0[24u].z) + _708) * cbMtdParam._m0[21u].z);
    float _4156 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _718 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _720 = (-0.0) - cbMtdParam._m0[24u].x;
    float _722 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _722 : (isnan(_722) ? 1.0 : min(_722, 1.0));
    float _730 = _718 - ((_718 * TEXCOORD_8.x) * _723);
    float _731 = _718 - ((_718 * TEXCOORD_8.y) * _723);
    float _732 = _718 - ((_718 * TEXCOORD_8.z) * _723);
    float _739 = (_730 * ((_552.x * cbMtdParam._m0[18u].x) - _527)) + _527;
    float _740 = (_731 * ((_552.y * cbMtdParam._m0[18u].y) - _530)) + _530;
    float _741 = (_732 * ((_552.z * cbMtdParam._m0[18u].z) - _533)) + _533;
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _755 = _753.x;
    float _756 = 1.0 - _755;
    float _782 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_755 - _756) * cbMtdParam._m0[24u].w) + _756) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4177 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _783 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _791 = ((((cbMtdParam._m0[10u].x - _739) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _783) + _739;
    float _792 = ((((cbMtdParam._m0[10u].y - _740) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _783) + _740;
    float _793 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _741)) * _783) + _741;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _821 = _819.x;
    float _838 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _821) * _441) + _821;
    float _855 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _838) * _514) + _838;
    float _859 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _855) * cbMtdParam._m0[19u].z) + _855;
    float _861 = _859 - (_859 * _730);
    float _863 = _861 - (_861 * _783);
    float _867 = (cbMtdParam._m0[19u].w * (_652.z - _627)) + _627;
    vec4 _881 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _888 = (_881.x * 2.0) + (-1.0);
    float _889 = (_881.y * 2.0) + (-1.0);
    float _890 = dot(vec2(_888, _889), vec2(_888, _889));
    float _4188 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _898 = ((_881.z - _867) * _730) + _867;
    float _901 = ((cbMtdParam._m0[23u].x - _898) * _783) + _898;
    vec4 _920 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _926 = (_920.x * 2.0) + (-1.0);
    float _927 = (_920.y * 2.0) + (-1.0);
    float _928 = dot(vec2(_926, _927), vec2(_926, _927));
    float _4199 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _943 = ((sqrt(1.0 - (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) - _638) * _732) + _638;
    float _946 = (((_888 - _664) * _730) + _664) + (cbMtdParam._m0[21u].x * _664);
    float _947 = (((_889 - _665) * _731) + _665) + (cbMtdParam._m0[21u].x * _665);
    float _958 = (((_926 - _946) + (_946 * cbMtdParam._m0[22u].z)) * _783) + _946;
    float _959 = (((_927 - _947) + (_947 * cbMtdParam._m0[22u].z)) * _783) + _947;
    float _960 = (_783 * (sqrt(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) - _943)) + _943;
    float _964 = cbMtdParam._m0[22u].x + _652.w;
    float _967 = fma(_960, _253, fma(_959, _260, _958 * _246));
    float _970 = fma(_960, _254, fma(_959, _261, _958 * _247));
    float _973 = fma(_960, _255, fma(_959, _262, _958 * _248));
    float _977 = inversesqrt(dot(vec3(_967, _970, _973), vec3(_967, _970, _973)));
    float _978 = _977 * _967;
    float _979 = _977 * _970;
    float _980 = _977 * _973;
    float _4210 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _981 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4232 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4243 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4254 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4265 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _986 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _1000 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1050 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1040);
    float _1051 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1040);
    float _1052 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1040);
    float _1056 = inversesqrt(dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052)));
    float _1057 = _1050 * _1056;
    float _1058 = _1051 * _1056;
    float _1059 = _1052 * _1056;
    float _1065 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1066 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1084 = fma(_980, cbSceneParam._m0[5u].z, fma(_979, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _978));
    float _1087 = fma(_980, cbSceneParam._m0[6u].z, fma(_979, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _978));
    float _1090 = fma(_980, cbSceneParam._m0[7u].z, fma(_979, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _978));
    uint _1104 = (_265 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1110 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) * cbInstanceData._m0[_1104].x;
    float _1111 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * cbInstanceData._m0[_1104].y;
    float _1112 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * cbInstanceData._m0[_1104].z;
    float _4276 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1113 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _4287 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1114 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _4298 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1115 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _1116 = 1.0 - _986;
    float _1117 = _1113 * _1116;
    float _1118 = _1114 * _1116;
    float _1119 = _1115 * _1116;
    float _1124 = (_1113 + (-0.039999999105930328369140625)) * _986;
    float _1125 = (_1114 + (-0.039999999105930328369140625)) * _986;
    float _1126 = (_1115 + (-0.039999999105930328369140625)) * _986;
    float _1127 = _1124 + 0.039999999105930328369140625;
    float _1129 = _1125 + 0.039999999105930328369140625;
    float _1130 = _1126 + 0.039999999105930328369140625;
    vec4 _1139 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1065, cbSceneParam._m0[86u].y * _1066));
    float _1143 = ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * TEXCOORD_5.w) * _1139.x;
    float _1144 = dot(vec3(_978, _979, _980), vec3(_1057, _1058, _1059));
    float _1147 = _1144 * 2.0;
    float _1151 = (_1147 * _978) - _1057;
    float _1152 = (_1147 * _979) - _1058;
    float _1153 = (_1147 * _980) - _1059;
    float _1157 = abs(dot(vec3(_1057, _1058, _1059), vec3(_978, _979, _980)));
    float _4309 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _1159 = sqrt(_981);
    float _1172 = exp2((_1159 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1159 * 3.0));
    float _1178 = (1.0 - _1172) * ((_1159 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1179 = _1172 * _1159;
    float _1207 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1211 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1215 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1516;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1241 = fma(_1215, cbModelParam._m0[26u].z, fma(_1211, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1207));
        float _1245 = fma(_1215, cbModelParam._m0[27u].z, fma(_1211, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1207));
        float _1249 = fma(_1215, cbModelParam._m0[28u].z, fma(_1211, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1207));
        float _1274 = _1207 + _978;
        float _1275 = _1211 + _979;
        float _1276 = _1215 + _980;
        float _1286 = fma(_1276, cbModelParam._m0[26u].z, fma(_1275, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1274)) - _1241;
        float _1287 = fma(_1276, cbModelParam._m0[27u].z, fma(_1275, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1274)) - _1245;
        float _1288 = fma(_1276, cbModelParam._m0[28u].z, fma(_1275, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1274)) - _1249;
        float _1292 = inversesqrt(dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288)));
        float _1305 = ((_1292 * _1286) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1241 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1292 * _1287) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1245 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1292 * _1288) / cbModelParam._m0[34u].z) + ((((((_1249 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        float _1344 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1310.x + (-0.5));
        float _1346 = _1344 * (_1310.y + (-0.5));
        float _1347 = _1344 * (_1310.z + (-0.5));
        float _1354 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1317.x + (-0.5));
        float _1356 = _1354 * (_1317.y + (-0.5));
        float _1357 = _1354 * (_1317.z + (-0.5));
        float _1364 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1324.x + (-0.5));
        float _1366 = _1364 * (_1324.y + (-0.5));
        float _1367 = _1364 * (_1324.z + (-0.5));
        float _1374 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1331.x + (-0.5));
        float _1376 = _1374 * (_1331.y + (-0.5));
        float _1377 = _1374 * (_1331.z + (-0.5));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = _1345 * 0.5;
        float _1382 = _1355 * 0.5;
        float _1383 = _1365 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1398 = (dot(vec3(_978, _979, _980), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1408 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4357 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1410 + 1.0))) + _1415) * _1378;
        float _1425 = _1346 * 0.5;
        float _1426 = _1356 * 0.5;
        float _1427 = _1366 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_978, _979, _980), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4390 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1452 + 1.0))) + _1457) * _1379;
        float _1467 = _1347 * 0.5;
        float _1468 = _1357 * 0.5;
        float _1469 = _1367 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_978, _979, _980), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4423 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1494 + 1.0))) + _1499) * _1380;
        _1516 = _1347;
        _1518 = _1346;
        _1519 = _1345;
        _1520 = _1357;
        _1521 = _1356;
        _1522 = _1355;
        _1523 = _1367;
        _1524 = _1366;
        _1525 = _1365;
        _1526 = _1380;
        _1527 = _1379;
        _1528 = _1378;
        _1529 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1530 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1531 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
    }
    else
    {
        _1516 = _1517;
        _1518 = _1517;
        _1519 = _1517;
        _1520 = _1517;
        _1521 = _1517;
        _1522 = _1517;
        _1523 = _1517;
        _1524 = _1517;
        _1525 = _1517;
        _1526 = _1517;
        _1527 = _1517;
        _1528 = _1517;
        _1529 = 0.0;
        _1530 = 0.0;
        _1531 = 0.0;
    }
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1555 = fma(_1215, cbModelParam._m0[30u].z, fma(_1211, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1207));
        float _1559 = fma(_1215, cbModelParam._m0[31u].z, fma(_1211, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1207));
        float _1563 = fma(_1215, cbModelParam._m0[32u].z, fma(_1211, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1207));
        float _1586 = _1207 + _978;
        float _1587 = _1211 + _979;
        float _1588 = _1215 + _980;
        float _1598 = fma(_1588, cbModelParam._m0[30u].z, fma(_1587, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1586)) - _1555;
        float _1599 = fma(_1588, cbModelParam._m0[31u].z, fma(_1587, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1586)) - _1559;
        float _1600 = fma(_1588, cbModelParam._m0[32u].z, fma(_1587, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1586)) - _1563;
        float _1604 = inversesqrt(dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600)));
        float _1617 = ((_1604 * _1598) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1555 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1618 = ((_1604 * _1599) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1559 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1619 = ((_1604 * _1600) / cbModelParam._m0[35u].z) + ((((((_1563 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        float _1654 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1621.x + (-0.5));
        float _1656 = _1654 * (_1621.y + (-0.5));
        float _1657 = _1654 * (_1621.z + (-0.5));
        float _1664 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1628.x + (-0.5));
        float _1666 = _1664 * (_1628.y + (-0.5));
        float _1667 = _1664 * (_1628.z + (-0.5));
        float _1674 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1635.x + (-0.5));
        float _1676 = _1674 * (_1635.y + (-0.5));
        float _1677 = _1674 * (_1635.z + (-0.5));
        float _1684 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1642.x + (-0.5));
        float _1686 = _1684 * (_1642.y + (-0.5));
        float _1687 = _1684 * (_1642.z + (-0.5));
        float _1688 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1689 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1691 = _1655 * 0.5;
        float _1692 = _1665 * 0.5;
        float _1693 = _1675 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_978, _979, _980), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1688 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4486 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1718 + 1.0))) + _1723) * _1688;
        float _1733 = _1656 * 0.5;
        float _1734 = _1666 * 0.5;
        float _1735 = _1676 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_978, _979, _980), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4497 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1689 + 9.9999997473787516355514526367188e-06);
        float _4508 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4519 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_1760 + 1.0))) + _1765) * _1689;
        float _1775 = _1657 * 0.5;
        float _1776 = _1667 * 0.5;
        float _1777 = _1677 * 0.5;
        float _1778 = dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777));
        float _1783 = (_1778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1778);
        float _1791 = (dot(vec3(_978, _979, _980), vec3(_1783 * _1775, _1783 * _1776, _1783 * _1777)) + 1.0) * 0.5;
        float _4530 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = sqrt(((_1776 * _1776) + (_1775 * _1775)) + (_1777 * _1777)) / (_1690 + 9.9999997473787516355514526367188e-06);
        float _4541 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _1802 = _1801 * 2.0;
        float _1806 = (1.0 - _1801) / (_1801 + 1.0);
        float _4552 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _1816 = ((((1.0 - _1807) * (_1802 + 2.0)) * exp2(log2(isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_1802 + 1.0))) + _1807) * _1690;
        _1824 = _1657;
        _1825 = _1656;
        _1826 = _1655;
        _1827 = _1667;
        _1828 = _1666;
        _1829 = _1665;
        _1830 = _1677;
        _1831 = _1676;
        _1832 = _1675;
        _1833 = _1690;
        _1834 = _1689;
        _1835 = _1688;
        _1836 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
        _1837 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
        _1838 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)));
    }
    else
    {
        _1824 = _1517;
        _1825 = _1517;
        _1826 = _1517;
        _1827 = _1517;
        _1828 = _1517;
        _1829 = _1517;
        _1830 = _1517;
        _1831 = _1517;
        _1832 = _1517;
        _1833 = _1517;
        _1834 = _1517;
        _1835 = _1517;
        _1836 = 0.0;
        _1837 = 0.0;
        _1838 = 0.0;
    }
    float _1848 = (cbModelParam._m0[1u].x * (_1836 - _1529)) + _1529;
    float _1849 = (cbModelParam._m0[1u].x * (_1837 - _1530)) + _1530;
    float _1850 = (cbModelParam._m0[1u].x * (_1838 - _1531)) + _1531;
    float _1871 = fma(_1850, cbSceneParam._m0[89u].z, fma(_1849, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1874 = fma(_1850, cbSceneParam._m0[90u].z, fma(_1849, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1877 = fma(_1850, cbSceneParam._m0[91u].z, fma(_1849, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1848));
    float _1892 = _1151 * 0.5;
    float _1893 = _1152 * 0.5;
    float _1894 = _1153 * 0.5;
    float _1895 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1826, _1829, _1832, _1835));
    float _1898 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1825, _1828, _1831, _1834));
    float _1901 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1824, _1827, _1830, _1833));
    float _1935;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1908 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1516, _1520, _1523, _1526));
        float _1912 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1518, _1521, _1524, _1527));
        float _1916 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1519, _1522, _1525, _1528));
        float _1923 = dot(vec4(cbModelParam._m0[39u]), vec4(_1892, _1893, _1894, 1.0));
        _1935 = dot(vec3(isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1923) ? 0.0 : (isnan(0.0) ? _1923 : max(0.0, _1923))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1935 = 1.0;
    }
    float _1946;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1937 = dot(vec4(cbModelParam._m0[40u]), vec4(_1892, _1893, _1894, 1.0));
        _1946 = dot(vec3(isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1937) ? 0.0 : (isnan(0.0) ? _1937 : max(0.0, _1937))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1946 = 1.0;
    }
    float _1950 = (_1946 * cbModelParam._m0[1u].x) + (_1935 * (1.0 - cbModelParam._m0[1u].x));
    float _1960 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _981);
    float _1961 = isnan(_1960) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1960 : min(cbModelParam._m0[25u].z, _1960));
    float _2041;
    float _2043;
    float _2045;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2008 = fma(_1215, cbModelParam._m0[13u].z, fma(_1211, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1207)) + cbModelParam._m0[13u].w;
        float _2012 = fma(_1215, cbModelParam._m0[14u].z, fma(_1211, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1207)) + cbModelParam._m0[14u].w;
        float _2016 = fma(_1215, cbModelParam._m0[15u].z, fma(_1211, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1207)) + cbModelParam._m0[15u].w;
        float _2019 = fma(_1153, cbModelParam._m0[13u].z, fma(_1152, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1151));
        float _2022 = fma(_1153, cbModelParam._m0[14u].z, fma(_1152, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1151));
        float _2025 = fma(_1153, cbModelParam._m0[15u].z, fma(_1152, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1151));
        float _2053;
        if (_2019 > 0.0)
        {
            _2053 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2053 = frontier_phi_14_12_ladder;
        }
        float _2224;
        if (_2022 > 0.0)
        {
            _2224 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2224 = frontier_phi_23_19_ladder;
        }
        float _2519;
        if (_2025 > 0.0)
        {
            _2519 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2519 = frontier_phi_35_30_ladder;
        }
        float _2521 = isnan(_2224) ? _2053 : (isnan(_2053) ? _2224 : min(_2053, _2224));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _2019) + _2008;
        float _2527 = (_2522 * _2022) + _2012;
        float _2528 = (_2522 * _2025) + _2016;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2531 = (-1.0) - _2529;
        float _2533 = _2529 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2528 > _2533) || ((_2528 < _2531) || ((_2527 > _2533) || ((_2527 < _2531) || ((_2526 < _2531) || (_2526 > _2533))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2673 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2528, cbModelParam._m0[9u].z, fma(_2527, cbModelParam._m0[9u].y, _2526 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2528, cbModelParam._m0[10u].z, fma(_2527, cbModelParam._m0[10u].y, _2526 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2528, cbModelParam._m0[11u].z, fma(_2527, cbModelParam._m0[11u].y, _2526 * cbModelParam._m0[11u].x))), _1961);
            frontier_phi_13_35_ladder = _2673.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2673.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2673.x * cbModelParam._m0[1u].y;
        }
        _2041 = frontier_phi_13_35_ladder_2;
        _2043 = frontier_phi_13_35_ladder_1;
        _2045 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2029 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1151, _1152, _1153), _1961);
        _2041 = _2029.x * cbModelParam._m0[1u].y;
        _2043 = _2029.y * cbModelParam._m0[1u].y;
        _2045 = _2029.z * cbModelParam._m0[1u].y;
    }
    float _2049 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _981);
    float _2050 = isnan(_2049) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2049 : min(cbModelParam._m0[25u].w, _2049));
    float _2139;
    float _2141;
    float _2143;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2103 = fma(_1215, cbModelParam._m0[21u].z, fma(_1211, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1207)) + cbModelParam._m0[21u].w;
        float _2107 = fma(_1215, cbModelParam._m0[22u].z, fma(_1211, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1207)) + cbModelParam._m0[22u].w;
        float _2111 = fma(_1215, cbModelParam._m0[23u].z, fma(_1211, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1207)) + cbModelParam._m0[23u].w;
        float _2114 = fma(_1153, cbModelParam._m0[21u].z, fma(_1152, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1151));
        float _2117 = fma(_1153, cbModelParam._m0[22u].z, fma(_1152, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1151));
        float _2120 = fma(_1153, cbModelParam._m0[23u].z, fma(_1152, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1151));
        float _2229;
        if (_2114 > 0.0)
        {
            _2229 = abs((1.0 - _2103) / _2114);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2103 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2229 = frontier_phi_25_21_ladder;
        }
        float _2546;
        if (_2117 > 0.0)
        {
            _2546 = abs((1.0 - _2107) / _2117);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2107 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2546 = frontier_phi_37_32_ladder;
        }
        float _2884;
        if (_2120 > 0.0)
        {
            _2884 = abs((1.0 - _2111) / _2120);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2120 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2111 + 1.0) / _2120);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2884 = frontier_phi_47_44_ladder;
        }
        float _2886 = isnan(_2546) ? _2229 : (isnan(_2229) ? _2546 : min(_2229, _2546));
        float _2887 = isnan(_2884) ? _2886 : (isnan(_2886) ? _2884 : min(_2886, _2884));
        float _2891 = (_2887 * _2114) + _2103;
        float _2892 = (_2887 * _2117) + _2107;
        float _2893 = (_2887 * _2120) + _2111;
        float _2894 = _2887 * 9.9999997473787516355514526367188e-05;
        float _2895 = (-1.0) - _2894;
        float _2897 = _2894 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2893 > _2897) || ((_2893 < _2895) || ((_2892 > _2897) || ((_2892 < _2895) || ((_2891 < _2895) || (_2891 > _2897))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2893, cbModelParam._m0[17u].z, fma(_2892, cbModelParam._m0[17u].y, _2891 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2893, cbModelParam._m0[18u].z, fma(_2892, cbModelParam._m0[18u].y, _2891 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2893, cbModelParam._m0[19u].z, fma(_2892, cbModelParam._m0[19u].y, _2891 * cbModelParam._m0[19u].x))), _2050);
            frontier_phi_22_47_ladder = _3015.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3015.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3015.x * cbModelParam._m0[1u].z;
        }
        _2139 = frontier_phi_22_47_ladder_2;
        _2141 = frontier_phi_22_47_ladder_1;
        _2143 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2123 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1151, _1152, _1153), _2050);
        _2139 = _2123.x * cbModelParam._m0[1u].z;
        _2141 = _2123.y * cbModelParam._m0[1u].z;
        _2143 = _2123.z * cbModelParam._m0[1u].z;
    }
    float _2156 = (((_1178 * _1127) + _1179) * _1143) * ((cbModelParam._m0[1u].w * (_2139 - _2041)) + _2041);
    float _2158 = (((_1178 * _1129) + _1179) * _1143) * ((cbModelParam._m0[1u].w * (_2141 - _2043)) + _2043);
    float _2160 = (((_1178 * _1130) + _1179) * _1143) * ((cbModelParam._m0[1u].w * (_2143 - _2045)) + _2045);
    float _2163 = fma(_2160, cbSceneParam._m0[89u].z, fma(_2158, cbSceneParam._m0[89u].y, _2156 * cbSceneParam._m0[89u].x));
    float _2166 = fma(_2160, cbSceneParam._m0[90u].z, fma(_2158, cbSceneParam._m0[90u].y, _2156 * cbSceneParam._m0[90u].x));
    float _2169 = fma(_2160, cbSceneParam._m0[91u].z, fma(_2158, cbSceneParam._m0[91u].y, _2156 * cbSceneParam._m0[91u].x));
    float _2203 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2207 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2211 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2215 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2216 = _2203 / _2215;
    float _2217 = _2207 / _2215;
    float _2218 = _2211 / _2215;
    float _2365;
    float _2366;
    float _2367;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2245 = ((uint(_2218 > cbSceneParam._m0[59u].y) + uint(_2218 > cbSceneParam._m0[59u].x)) + uint(_2218 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2246 = _2245 + 43u;
        uint _2254 = _2245 + 44u;
        uint _2262 = _2245 + 45u;
        uint _2270 = _2245 + 46u;
        float _2281 = fma(_2215, cbSceneParam._m0[_2246].w, fma(_2211, cbSceneParam._m0[_2246].z, fma(_2207, cbSceneParam._m0[_2246].y, _2203 * cbSceneParam._m0[_2246].x)));
        float _2285 = fma(_2215, cbSceneParam._m0[_2254].w, fma(_2211, cbSceneParam._m0[_2254].z, fma(_2207, cbSceneParam._m0[_2254].y, _2203 * cbSceneParam._m0[_2254].x)));
        float _2293 = fma(_2215, cbSceneParam._m0[_2270].w, fma(_2211, cbSceneParam._m0[_2270].z, fma(_2207, cbSceneParam._m0[_2270].y, _2203 * cbSceneParam._m0[_2270].x)));
        float _2298 = cbSceneParam._m0[33u].z * _2293;
        float _2300 = cbSceneParam._m0[33u].w * _2293;
        float _2303 = fma(_2215, cbSceneParam._m0[_2262].w, fma(_2211, cbSceneParam._m0[_2262].z, fma(_2207, cbSceneParam._m0[_2262].y, _2203 * cbSceneParam._m0[_2262].x))) / _2293;
        float _2351 = (cbSceneParam._m0[33u].x - sqrt(((_2217 * _2217) + (_2216 * _2216)) + (_2218 * _2218))) * cbSceneParam._m0[33u].y;
        float _4678 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2358 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2298 + _2281) / _2293, (_2300 + _2285) / _2293), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2300 + _2281) / _2293, (_2285 - _2298) / _2293), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2281 - _2298) / _2293, (_2285 - _2300) / _2293), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2281 - _2300) / _2293, (_2298 + _2285) / _2293), _2303), 0.0)).x), vec4(0.25)));
        _2365 = 1.0 - (_2358 * cbSceneParam._m0[34u].x);
        _2366 = 1.0 - (_2358 * cbSceneParam._m0[34u].y);
        _2367 = 1.0 - (_2358 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2365 = 1.0;
        _2366 = 1.0;
        _2367 = 1.0;
    }
    float _2431;
    float _2433;
    float _2435;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2419 = fma(_2215, cbSceneParam._m0[63u].w, fma(_2211, cbSceneParam._m0[63u].z, fma(_2207, cbSceneParam._m0[63u].y, _2203 * cbSceneParam._m0[63u].x)));
        float _2420 = fma(_2215, cbSceneParam._m0[60u].w, fma(_2211, cbSceneParam._m0[60u].z, fma(_2207, cbSceneParam._m0[60u].y, _2203 * cbSceneParam._m0[60u].x))) / _2419;
        float _2421 = fma(_2215, cbSceneParam._m0[61u].w, fma(_2211, cbSceneParam._m0[61u].z, fma(_2207, cbSceneParam._m0[61u].y, _2203 * cbSceneParam._m0[61u].x))) / _2419;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2420 >= cbSceneParam._m0[64u].x) && (_2421 >= cbSceneParam._m0[64u].y)) && (_2420 <= cbSceneParam._m0[64u].z)) && (_2421 <= cbSceneParam._m0[64u].w))
        {
            float _2559 = fma(_2215, cbSceneParam._m0[62u].w, fma(_2211, cbSceneParam._m0[62u].z, fma(_2207, cbSceneParam._m0[62u].y, _2203 * cbSceneParam._m0[62u].x))) / _2419;
            float _2563 = isnan(cbSceneParam._m0[41u].w) ? _2559 : (isnan(_2559) ? cbSceneParam._m0[41u].w : max(_2559, cbSceneParam._m0[41u].w));
            float _2606 = (cbSceneParam._m0[33u].x - sqrt(((_2217 * _2217) + (_2216 * _2216)) + (_2218 * _2218))) * cbSceneParam._m0[33u].y;
            float _4694 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
            float _2613 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2420, cbSceneParam._m0[33u].w + _2421), _2563), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2420, _2421 - cbSceneParam._m0[33u].z), _2563), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2420 - cbSceneParam._m0[33u].z, _2421 - cbSceneParam._m0[33u].w), _2563), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2420 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2421), _2563), 0.0)).x), vec4(0.25)));
            float _2617 = 1.0 - (_2613 * cbSceneParam._m0[34u].x);
            float _2618 = 1.0 - (_2613 * cbSceneParam._m0[34u].y);
            float _2619 = 1.0 - (_2613 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2619) ? _2367 : (isnan(_2367) ? _2619 : min(_2367, _2619));
            frontier_phi_34_33_ladder_1 = isnan(_2618) ? _2366 : (isnan(_2366) ? _2618 : min(_2366, _2618));
            frontier_phi_34_33_ladder_2 = isnan(_2617) ? _2365 : (isnan(_2365) ? _2617 : min(_2365, _2617));
        }
        else
        {
            frontier_phi_34_33_ladder = _2367;
            frontier_phi_34_33_ladder_1 = _2366;
            frontier_phi_34_33_ladder_2 = _2365;
        }
        _2431 = frontier_phi_34_33_ladder_2;
        _2433 = frontier_phi_34_33_ladder_1;
        _2435 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2431 = _2365;
        _2433 = _2366;
        _2435 = _2367;
    }
    uvec4 _2440 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2442 = _2440.x * 14u;
    uint _2443 = _2442 + 13u;
    float _2450 = _1143 + (-1.0);
    float _2455 = (cbLight._m0[_2443].x * _2450) + 1.0;
    float _2456 = (cbLight._m0[_2443].y * _2450) + 1.0;
    float _2457 = (cbLight._m0[_2443].z * _2450) + 1.0;
    float _2458 = (cbLight._m0[_2443].w * _2450) + 1.0;
    uint _2459 = _2442 + 5u;
    float _2465 = isnan(1.0) ? _2456 : (isnan(_2456) ? 1.0 : min(_2456, 1.0));
    uint _2469 = _2442 + 4u;
    float _2478 = isnan(1.0) ? _2455 : (isnan(_2455) ? 1.0 : min(_2455, 1.0));
    uint _2482 = _2442 | 1u;
    float _2493 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_978, _979, _980));
    float _2496 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_978, _979, _980));
    float _4730 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _4741 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2501 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * 0.3183098733425140380859375;
    float _2503 = (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * 0.3183098733425140380859375;
    float _2510 = ((cbLight._m0[_2459].x * _2465) * _2503) + (((cbLight._m0[_2469].x * _2431) * _2478) * _2501);
    float _2511 = ((_2465 * cbLight._m0[_2459].y) * _2503) + (((cbLight._m0[_2469].y * _2433) * _2478) * _2501);
    float _2512 = ((_2465 * cbLight._m0[_2459].z) * _2503) + (((cbLight._m0[_2469].z * _2435) * _2478) * _2501);
    uvec4 _2516 = floatBitsToUint(cbLight._m0[_2442 + 12u]);
    bool _2518 = _2516.x == 0u;
    float _2620;
    float _2622;
    float _2624;
    if (_2518)
    {
        _2620 = _2510;
        _2622 = _2511;
        _2624 = _2512;
    }
    else
    {
        uint _2628 = _2442 + 6u;
        float _2644 = (dot(vec3(cbLight._m0[_2442 + 2u].xyz), vec3(_978, _979, _980)) * 0.5) + 0.5;
        float _2645 = _2644 * _2644;
        float _4752 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2646 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2647 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
        _2620 = (((cbLight._m0[_2628].x * 0.3183098733425140380859375) * _2646) * _2647) + _2510;
        _2622 = (((cbLight._m0[_2628].y * 0.3183098733425140380859375) * _2646) * _2647) + _2511;
        _2624 = (((cbLight._m0[_2628].z * 0.3183098733425140380859375) * _2646) * _2647) + _2512;
    }
    bool _2627 = _2516.y == 0u;
    float _2682;
    float _2684;
    float _2686;
    if (_2627)
    {
        _2682 = _2620;
        _2684 = _2622;
        _2686 = _2624;
    }
    else
    {
        uint _2855 = _2442 + 7u;
        float _2871 = (dot(vec3(cbLight._m0[_2442 + 3u].xyz), vec3(_978, _979, _980)) * 0.5) + 0.5;
        float _2872 = _2871 * _2871;
        float _4768 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2873 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
        float _2874 = isnan(1.0) ? _2458 : (isnan(_2458) ? 1.0 : min(_2458, 1.0));
        _2682 = (((cbLight._m0[_2855].x * 0.3183098733425140380859375) * _2873) * _2874) + _2620;
        _2684 = (((cbLight._m0[_2855].y * 0.3183098733425140380859375) * _2873) * _2874) + _2622;
        _2686 = (((cbLight._m0[_2855].z * 0.3183098733425140380859375) * _2873) * _2874) + _2624;
    }
    uint _2689 = _2442 + 8u;
    float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _981) * 0.949999988079071044921875);
    float _2703 = _2702 * _2702;
    float _2704 = cbLight._m0[_2442].x + _1057;
    float _2705 = cbLight._m0[_2442].y + _1058;
    float _2706 = cbLight._m0[_2442].z + _1059;
    float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
    float _2711 = _2710 * _2704;
    float _2712 = _2710 * _2705;
    float _2713 = _2710 * _2706;
    float _2714 = dot(vec3(_978, _979, _980), vec3(cbLight._m0[_2442].xyz));
    float _4784 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2717 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
    float _4795 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _2718 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
    float _2719 = dot(vec3(_978, _979, _980), vec3(_2711, _2712, _2713));
    float _4806 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2722 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
    float _2723 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2711, _2712, _2713));
    float _4817 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2727 = _2703 * _2703;
    float _2731 = ((_2722 * _2722) * (_2727 + (-1.0))) + 1.0;
    float _2739 = exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0);
    float _2740 = 0.959999978542327880859375 - _1124;
    float _2742 = 0.959999978542327880859375 - _1125;
    float _2743 = 0.959999978542327880859375 - _1126;
    float _2750 = 1.0 - _2703;
    float _2761 = (0.5 / (((_2718 * ((_2717 * _2750) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2718 * _2750) + _2703) * _2717))) * _2717;
    float _4828 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2763 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2727 / ((_2731 * _2731) * 3.141590118408203125));
    uint _2777 = _2442 + 9u;
    float _2788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _981) * 0.949999988079071044921875);
    float _2789 = _2788 * _2788;
    float _2790 = cbLight._m0[_2482].x + _1057;
    float _2791 = cbLight._m0[_2482].y + _1058;
    float _2792 = cbLight._m0[_2482].z + _1059;
    float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
    float _2797 = _2796 * _2790;
    float _2798 = _2796 * _2791;
    float _2799 = _2796 * _2792;
    float _2800 = dot(vec3(_978, _979, _980), vec3(cbLight._m0[_2482].xyz));
    float _4839 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
    float _2803 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
    float _2804 = dot(vec3(_978, _979, _980), vec3(_2797, _2798, _2799));
    float _4850 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
    float _2807 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
    float _2808 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2797, _2798, _2799));
    float _4861 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2812 = _2789 * _2789;
    float _2816 = ((_2807 * _2807) * (_2812 + (-1.0))) + 1.0;
    float _2823 = exp2(log2(1.0 - (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) * 5.0);
    float _2830 = 1.0 - _2789;
    float _2840 = (0.5 / (((_2718 * ((_2803 * _2830) + _2789)) + 9.9999999392252902907785028219223e-09) + (((_2718 * _2830) + _2789) * _2803))) * _2803;
    float _4872 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
    float _2842 = (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2812 / ((_2816 * _2816) * 3.141590118408203125));
    float _2852 = (((((_2823 * _2740) + _1127) * cbLight._m0[_2777].x) * _2842) * _2465) + ((((cbLight._m0[_2689].x * _2431) * ((_2739 * _2740) + _1127)) * _2763) * _2478);
    float _2853 = (((((_2823 * _2742) + _1129) * cbLight._m0[_2777].y) * _2842) * _2465) + ((((cbLight._m0[_2689].y * _2433) * ((_2739 * _2742) + _1129)) * _2763) * _2478);
    float _2854 = (((((_2823 * _2743) + _1130) * cbLight._m0[_2777].z) * _2842) * _2465) + ((((cbLight._m0[_2689].z * _2435) * ((_2739 * _2743) + _1130)) * _2763) * _2478);
    float _2910;
    float _2912;
    float _2914;
    if (_2518)
    {
        _2910 = _2852;
        _2912 = _2853;
        _2914 = _2854;
    }
    else
    {
        uint _2916 = _2442 + 2u;
        uint _2920 = _2442 + 10u;
        float _2934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2916].w)) * _981) * 0.949999988079071044921875);
        float _2935 = _2934 * _2934;
        float _2936 = cbLight._m0[_2916].x + _1057;
        float _2937 = cbLight._m0[_2916].y + _1058;
        float _2938 = cbLight._m0[_2916].z + _1059;
        float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
        float _2943 = _2942 * _2936;
        float _2944 = _2942 * _2937;
        float _2945 = _2942 * _2938;
        float _2946 = dot(vec3(_978, _979, _980), vec3(cbLight._m0[_2916].xyz));
        float _4883 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2949 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
        float _2950 = dot(vec3(_978, _979, _980), vec3(_2943, _2944, _2945));
        float _4894 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2953 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
        float _2954 = dot(vec3(cbLight._m0[_2916].xyz), vec3(_2943, _2944, _2945));
        float _4905 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2958 = _2935 * _2935;
        float _2962 = ((_2953 * _2953) * (_2958 + (-1.0))) + 1.0;
        float _2969 = exp2(log2(1.0 - (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0)))) * 5.0);
        float _2976 = 1.0 - _2935;
        float _2986 = (0.5 / (((_2718 * ((_2949 * _2976) + _2935)) + 9.9999999392252902907785028219223e-09) + (((_2718 * _2976) + _2935) * _2949))) * _2949;
        float _4916 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        float _2988 = (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2958 / ((_2962 * _2962) * 3.141590118408203125));
        float _2989 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
        _2910 = (((((_2969 * _2740) + _1127) * cbLight._m0[_2920].x) * _2988) * _2989) + _2852;
        _2912 = (((((_2969 * _2742) + _1129) * cbLight._m0[_2920].y) * _2988) * _2989) + _2853;
        _2914 = (((((_2969 * _2743) + _1130) * cbLight._m0[_2920].z) * _2988) * _2989) + _2854;
    }
    float _3020;
    float _3022;
    float _3024;
    if (_2627)
    {
        _3020 = _2910;
        _3022 = _2912;
        _3024 = _2914;
    }
    else
    {
        uint _3031 = _2442 + 3u;
        uint _3035 = _2442 + 11u;
        float _3049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3031].w)) * _981) * 0.949999988079071044921875);
        float _3050 = _3049 * _3049;
        float _3051 = cbLight._m0[_3031].x + _1057;
        float _3052 = cbLight._m0[_3031].y + _1058;
        float _3053 = cbLight._m0[_3031].z + _1059;
        float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
        float _3058 = _3057 * _3051;
        float _3059 = _3057 * _3052;
        float _3060 = _3057 * _3053;
        float _3061 = dot(vec3(_978, _979, _980), vec3(cbLight._m0[_3031].xyz));
        float _4932 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3064 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
        float _3065 = dot(vec3(_978, _979, _980), vec3(_3058, _3059, _3060));
        float _4943 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        float _3068 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
        float _3069 = dot(vec3(cbLight._m0[_3031].xyz), vec3(_3058, _3059, _3060));
        float _4954 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        float _3073 = _3050 * _3050;
        float _3077 = ((_3068 * _3068) * (_3073 + (-1.0))) + 1.0;
        float _3084 = exp2(log2(1.0 - (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0)))) * 5.0);
        float _3091 = 1.0 - _3050;
        float _3101 = (0.5 / (((_2718 * ((_3064 * _3091) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_2718 * _3091) + _3050) * _3064))) * _3064;
        float _4965 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
        float _3103 = (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0))) * (_3073 / ((_3077 * _3077) * 3.141590118408203125));
        float _3104 = isnan(1.0) ? _2458 : (isnan(_2458) ? 1.0 : min(_2458, 1.0));
        _3020 = (((((_3084 * _2740) + _1127) * cbLight._m0[_3035].x) * _3103) * _3104) + _2910;
        _3022 = (((((_3084 * _2742) + _1129) * cbLight._m0[_3035].y) * _3103) * _3104) + _2912;
        _3024 = (((((_3084 * _2743) + _1130) * cbLight._m0[_3035].z) * _3103) * _3104) + _2914;
    }
    float _3170;
    float _3172;
    float _3174;
    float _3176;
    float _3178;
    float _3180;
    if (_2440.y == 0u)
    {
        uvec4 _3125 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3126 = _3125.x;
        uint _3137 = uint((float(_3125.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1066) / _3126))) + floor(float(uint(cbSceneParam._m0[85u].x * _1065) / _3126)));
        float _3147 = (log2(_2218 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3148 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
        uint _3151 = uint(isnan(14.0) ? _3148 : (isnan(_3148) ? 14.0 : min(_3148, 14.0)));
        uvec4 _3156 = texelFetch(g_lightClusterGridBuffer, int(((_3151 << 2u) + (_3137 << 6u)) >> 2u));
        uint _3157 = _3156.x;
        uint _3158 = _3125.z;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        float _3245;
        float _3247;
        if (((((1u << ((_3158 >> 4u) & 15u)) + 4294967295u) & _3157) == 0u) || ((_3158 & 240u) == 0u))
        {
            _3237 = 0.0;
            _3239 = 0.0;
            _3241 = 0.0;
            _3243 = 0.0;
            _3245 = 0.0;
            _3247 = 0.0;
        }
        else
        {
            float _3238;
            float _3240;
            float _3242;
            float _3244;
            float _3246;
            float _3248;
            float _3381 = 0.0;
            float _3382 = 0.0;
            float _3383 = 0.0;
            float _3384 = 0.0;
            float _3385 = 0.0;
            float _3386 = 0.0;
            uint _3387 = 0u;
            uint _3396;
            bool _3397;
            for (;;)
            {
                _3396 = texelFetch(g_lightClassification, int((((_3151 << 5u) + (_3137 << 9u)) + (_3387 << 2u)) >> 2u)).x;
                _3397 = _3396 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3397)
                {
                    frontier_phi_66_pred = _3386;
                    frontier_phi_66_pred_1 = _3385;
                    frontier_phi_66_pred_2 = _3384;
                    frontier_phi_66_pred_3 = _3383;
                    frontier_phi_66_pred_4 = _3382;
                    frontier_phi_66_pred_5 = _3381;
                }
                else
                {
                    float _3505;
                    float _3506;
                    float _3507;
                    float _3508;
                    float _3509;
                    float _3510;
                    uint _3511;
                    _3505 = _3381;
                    _3506 = _3382;
                    _3507 = _3383;
                    _3508 = _3384;
                    _3509 = _3385;
                    _3510 = _3386;
                    _3511 = _3396;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    float _3442;
                    for (;;)
                    {
                        uint _3515 = uint(findLSB(_3511)) + (_3387 << 5u);
                        uint _3512 = (_3511 + 4294967295u) & _3511;
                        uint _3517 = _3515 * 48u;
                        vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3517)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 3u)).x));
                        uint _3537 = (_3515 * 48u) + 4u;
                        vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3537)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 3u)).x));
                        uint _3556 = (_3515 * 48u) + 8u;
                        vec3 _3567 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3556)).x, texelFetch(g_PointLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3556 + 2u)).x));
                        float _3571 = _3531.x - _2216;
                        float _3572 = _3531.y - _2217;
                        float _3573 = _3531.z - _2218;
                        float _3574 = dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573));
                        float _3577 = inversesqrt(_3574);
                        float _3578 = _3577 * _3571;
                        float _3579 = _3577 * _3572;
                        float _3580 = _3577 * _3573;
                        float _3581 = dot(vec3(_1084, _1087, _1090), vec3(_3578, _3579, _3580));
                        float _3586 = 1.0 - (_3574 * _3531.w);
                        float _4991 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                        float _3587 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                        float _3588 = sqrt(_3574) * _3550.w;
                        float _3591 = 1.39999997615814208984375 / (_3588 + 1.39999997615814208984375);
                        float _3592 = _3591 * _3591;
                        float _3595 = ((1.0 - _3592) * _3581) + _3592;
                        float _3598 = _3588 * _3588;
                        float _3602 = ((isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0))) * _3587) / ((_3598 * 0.699999988079071044921875) + 1.0);
                        float _3606 = (-0.0) - _2216;
                        float _3607 = (-0.0) - _2217;
                        float _3608 = (-0.0) - _2218;
                        float _3612 = inversesqrt(dot(vec3(_3606, _3607, _3608), vec3(_3606, _3607, _3608)));
                        float _3613 = _3612 * _3606;
                        float _3614 = _3612 * _3607;
                        float _3615 = _3612 * _3608;
                        float _3622 = exp2(log2(1.0 / ((_3598 * 3.5) + 5.0)) * 0.25);
                        float _3623 = 1.0 - _1159;
                        float _3630 = sqrt(1.0 - ((1.0 - (_3623 * _3623)) * (1.0 - (_3622 * _3622))));
                        float _3631 = _3630 * _3630;
                        float _3632 = _3631 * _3631;
                        float _3633 = _3613 + _3578;
                        float _3634 = _3614 + _3579;
                        float _3635 = _3615 + _3580;
                        float _3639 = inversesqrt(dot(vec3(_3633, _3634, _3635), vec3(_3633, _3634, _3635)));
                        float _3643 = dot(vec3(_1084, _1087, _1090), vec3(_3613, _3614, _3615));
                        float _5007 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                        float _3646 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                        float _3647 = dot(vec3(_1084, _1087, _1090), vec3(_3639 * _3633, _3639 * _3634, _3639 * _3635));
                        float _5018 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                        float _3650 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                        float _3654 = ((_3650 * _3650) * (_3632 + (-1.0))) + 1.0;
                        float _3655 = _3591 * _3631;
                        float _3656 = _3655 * _3655;
                        float _3659 = ((1.0 - _3656) * _3581) + _3656;
                        float _5029 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                        float _3660 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                        float _3661 = 1.0 - _3631;
                        float _3671 = (0.5 / (((_3660 * ((_3646 * _3661) + _3631)) + 9.9999999392252902907785028219223e-09) + (((_3660 * _3661) + _3631) * _3646))) * _3660;
                        float _5040 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                        float _3682 = (((_3632 * 3.1415927410125732421875) * (isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0)))) / ((_3654 * _3654) * ((_3598 * 2.1991131305694580078125) + 3.141590118408203125))) * _3587;
                        _3440 = (_3602 * _3550.x) + _3508;
                        _3441 = (_3602 * _3550.y) + _3509;
                        _3442 = (_3602 * _3550.z) + _3510;
                        _3437 = (_3682 * _3567.x) + _3505;
                        _3438 = (_3682 * _3567.y) + _3506;
                        _3439 = (_3682 * _3567.z) + _3507;
                        if (_3512 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3505 = _3437;
                            _3506 = _3438;
                            _3507 = _3439;
                            _3508 = _3440;
                            _3509 = _3441;
                            _3510 = _3442;
                            _3511 = _3512;
                        }
                    }
                    frontier_phi_66_pred = _3442;
                    frontier_phi_66_pred_1 = _3441;
                    frontier_phi_66_pred_2 = _3440;
                    frontier_phi_66_pred_3 = _3439;
                    frontier_phi_66_pred_4 = _3438;
                    frontier_phi_66_pred_5 = _3437;
                }
                _3248 = frontier_phi_66_pred;
                _3246 = frontier_phi_66_pred_1;
                _3244 = frontier_phi_66_pred_2;
                _3242 = frontier_phi_66_pred_3;
                _3240 = frontier_phi_66_pred_4;
                _3238 = frontier_phi_66_pred_5;
                uint _3388 = _3387 + 1u;
                if (_3388 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3381 = _3238;
                    _3382 = _3240;
                    _3383 = _3242;
                    _3384 = _3244;
                    _3385 = _3246;
                    _3386 = _3248;
                    _3387 = _3388;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3237 = _3238;
            _3239 = _3240;
            _3241 = _3242;
            _3243 = _3244;
            _3245 = _3246;
            _3247 = _3248;
        }
        uvec4 _3251 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3252 = _3251.z;
        uint _3254 = (_3252 >> 8u) & 15u;
        float _3349;
        float _3351;
        float _3353;
        float _3355;
        float _3357;
        float _3359;
        if (((4294967295u << _3254) & _3157) == 0u)
        {
            _3349 = _3237;
            _3351 = _3239;
            _3353 = _3241;
            _3355 = _3243;
            _3357 = _3245;
            _3359 = _3247;
        }
        else
        {
            float _3374 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
            float _3375 = _3374 * _2216;
            float _3376 = _3374 * _2217;
            float _3377 = _3374 * _2218;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3254 < ((_3252 >> 12u) & 15u))
            {
                float _3350;
                float _3352;
                float _3354;
                float _3356;
                float _3358;
                float _3360;
                float _3488 = _3237;
                float _3489 = _3239;
                float _3490 = _3241;
                float _3491 = _3243;
                float _3492 = _3245;
                float _3493 = _3247;
                uint _3494 = _3254;
                uint _3503;
                bool _3504;
                for (;;)
                {
                    _3503 = texelFetch(g_lightClassification, int((((_3151 << 5u) + (_3137 << 9u)) + (_3494 << 2u)) >> 2u)).x;
                    _3504 = _3503 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3504)
                    {
                        frontier_phi_72_pred = _3493;
                        frontier_phi_72_pred_1 = _3492;
                        frontier_phi_72_pred_2 = _3491;
                        frontier_phi_72_pred_3 = _3490;
                        frontier_phi_72_pred_4 = _3489;
                        frontier_phi_72_pred_5 = _3488;
                    }
                    else
                    {
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3980;
                        float _3981;
                        float _3982;
                        float _3983;
                        float _3984;
                        float _3985;
                        float _3700 = _3488;
                        float _3701 = _3489;
                        float _3702 = _3490;
                        float _3703 = _3491;
                        float _3704 = _3492;
                        float _3705 = _3493;
                        uint _3706 = _3503;
                        uint _3707;
                        vec4 _3732;
                        float _3733;
                        vec4 _3748;
                        vec3 _3760;
                        vec4 _3775;
                        vec4 _3790;
                        float _3836;
                        bool _3837;
                        for (;;)
                        {
                            uint _3717 = ((_3494 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3706));
                            _3707 = (_3706 + 4294967295u) & _3706;
                            uint _3719 = _3717 * 40u;
                            _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            _3733 = _3732.w;
                            uint _3735 = (_3717 * 40u) + 4u;
                            _3748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 3u)).x));
                            uint _3750 = (_3717 * 40u) + 8u;
                            _3760 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x));
                            uint _3762 = (_3717 * 40u) + 16u;
                            _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            uint _3777 = (_3717 * 40u) + 20u;
                            _3790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 3u)).x));
                            uint _3792 = (_3717 * 40u) + 24u;
                            vec4 _3805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 3u)).x));
                            uint _3811 = (_3717 * 40u) + 28u;
                            vec4 _3824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 3u)).x));
                            _3836 = fma(_2218, _3824.z, fma(_2217, _3824.y, _3824.x * _2216)) + _3824.w;
                            _3837 = !((fma(_2218, _3805.z, fma(_2217, _3805.y, _3805.x * _2216)) + _3805.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3837)
                            {
                                float _3864 = _3732.x - _2216;
                                float _3865 = _3732.y - _2217;
                                float _3866 = _3732.z - _2218;
                                float _3867 = dot(vec3(_3864, _3865, _3866), vec3(_3864, _3865, _3866));
                                float _3870 = inversesqrt(_3867);
                                float _3871 = _3870 * _3864;
                                float _3872 = _3870 * _3865;
                                float _3873 = _3870 * _3866;
                                float _3877 = 1.0 - (_3867 / (_3733 * _3733));
                                float _5051 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3878 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                                float _3882 = sqrt(_3867) * _3748.w;
                                float _3884 = 1.39999997615814208984375 / (_3882 + 1.39999997615814208984375);
                                float _3885 = _3884 * _3884;
                                float _3888 = ((1.0 - _3885) * dot(vec3(_3871, _3872, _3873), vec3(_1084, _1087, _1090))) + _3885;
                                float _3891 = _3882 * _3882;
                                float _3895 = (fma(_2218, _3775.z, fma(_2217, _3775.y, _3775.x * _2216)) + _3775.w) / _3836;
                                float _3896 = (fma(_2218, _3790.z, fma(_2217, _3790.y, _3790.x * _2216)) + _3790.w) / _3836;
                                float _3900 = 1.0 - dot(vec2(_3895, _3896), vec2(_3895, _3896));
                                float _5067 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3901 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                                float _3902 = _3901 * (((isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0))) * _3878) / ((_3891 * 0.699999988079071044921875) + 1.0));
                                float _3914 = exp2(log2(1.0 / ((_3891 * 3.5) + 5.0)) * 0.25);
                                float _3915 = 1.0 - _1159;
                                float _3922 = sqrt(1.0 - ((1.0 - (_3915 * _3915)) * (1.0 - (_3914 * _3914))));
                                float _3923 = _3922 * _3922;
                                float _3924 = _3923 * _3923;
                                float _3925 = _3871 - _3375;
                                float _3926 = _3872 - _3376;
                                float _3927 = _3873 - _3377;
                                float _3931 = inversesqrt(dot(vec3(_3925, _3926, _3927), vec3(_3925, _3926, _3927)));
                                float _3935 = dot(vec3(_1084, _1087, _1090), vec3((-0.0) - _3375, (-0.0) - _3376, (-0.0) - _3377));
                                float _5078 = isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0));
                                float _3938 = isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0));
                                float _3939 = dot(vec3(_1084, _1087, _1090), vec3(_3931 * _3925, _3931 * _3926, _3931 * _3927));
                                float _5089 = isnan(0.0) ? _3939 : (isnan(_3939) ? 0.0 : max(_3939, 0.0));
                                float _3942 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
                                float _3946 = ((_3942 * _3942) * (_3924 + (-1.0))) + 1.0;
                                float _3947 = _3884 * _3923;
                                float _3948 = _3947 * _3947;
                                float _3954 = ((1.0 - _3948) * dot(vec3(_1084, _1087, _1090), vec3(_3871, _3872, _3873))) + _3948;
                                float _5100 = isnan(0.0) ? _3954 : (isnan(_3954) ? 0.0 : max(_3954, 0.0));
                                float _3955 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
                                float _3956 = 1.0 - _3923;
                                float _3966 = (0.5 / (((_3955 * ((_3938 * _3956) + _3923)) + 9.9999999392252902907785028219223e-09) + (((_3955 * _3956) + _3923) * _3938))) * _3955;
                                float _5111 = isnan(0.0) ? _3966 : (isnan(_3966) ? 0.0 : max(_3966, 0.0));
                                float _3976 = (_3901 * _3878) * (((_3924 * 3.1415927410125732421875) * (isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0)))) / ((_3946 * _3946) * ((_3891 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3902 * _3748.y;
                                frontier_phi_78_pred_1 = _3902 * _3748.x;
                                frontier_phi_78_pred_2 = _3976 * _3760.z;
                                frontier_phi_78_pred_3 = _3976 * _3760.y;
                                frontier_phi_78_pred_4 = _3976 * _3760.x;
                                frontier_phi_78_pred_5 = _3902 * _3748.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3984 = frontier_phi_78_pred;
                            _3983 = frontier_phi_78_pred_1;
                            _3982 = frontier_phi_78_pred_2;
                            _3981 = frontier_phi_78_pred_3;
                            _3980 = frontier_phi_78_pred_4;
                            _3985 = frontier_phi_78_pred_5;
                            _3690 = _3983 + _3703;
                            _3691 = _3984 + _3704;
                            _3692 = _3985 + _3705;
                            _3687 = _3980 + _3700;
                            _3688 = _3981 + _3701;
                            _3689 = _3982 + _3702;
                            if (_3707 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3700 = _3687;
                                _3701 = _3688;
                                _3702 = _3689;
                                _3703 = _3690;
                                _3704 = _3691;
                                _3705 = _3692;
                                _3706 = _3707;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3692;
                        frontier_phi_72_pred_1 = _3691;
                        frontier_phi_72_pred_2 = _3690;
                        frontier_phi_72_pred_3 = _3689;
                        frontier_phi_72_pred_4 = _3688;
                        frontier_phi_72_pred_5 = _3687;
                    }
                    _3360 = frontier_phi_72_pred;
                    _3358 = frontier_phi_72_pred_1;
                    _3356 = frontier_phi_72_pred_2;
                    _3354 = frontier_phi_72_pred_3;
                    _3352 = frontier_phi_72_pred_4;
                    _3350 = frontier_phi_72_pred_5;
                    uint _3495 = _3494 + 1u;
                    if (_3495 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3488 = _3350;
                        _3489 = _3352;
                        _3490 = _3354;
                        _3491 = _3356;
                        _3492 = _3358;
                        _3493 = _3360;
                        _3494 = _3495;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3360;
                frontier_phi_60_61_ladder_1 = _3358;
                frontier_phi_60_61_ladder_2 = _3354;
                frontier_phi_60_61_ladder_3 = _3352;
                frontier_phi_60_61_ladder_4 = _3350;
                frontier_phi_60_61_ladder_5 = _3356;
            }
            else
            {
                frontier_phi_60_61_ladder = _3247;
                frontier_phi_60_61_ladder_1 = _3245;
                frontier_phi_60_61_ladder_2 = _3241;
                frontier_phi_60_61_ladder_3 = _3239;
                frontier_phi_60_61_ladder_4 = _3237;
                frontier_phi_60_61_ladder_5 = _3243;
            }
            _3349 = frontier_phi_60_61_ladder_4;
            _3351 = frontier_phi_60_61_ladder_3;
            _3353 = frontier_phi_60_61_ladder_2;
            _3355 = frontier_phi_60_61_ladder_5;
            _3357 = frontier_phi_60_61_ladder_1;
            _3359 = frontier_phi_60_61_ladder;
        }
        float _3364 = isnan(1.0) ? _1143 : (isnan(_1143) ? 1.0 : min(_1143, 1.0));
        _3170 = (_3364 * _3355) + _2682;
        _3172 = (_3364 * _3357) + _2684;
        _3174 = (_3364 * _3359) + _2686;
        _3176 = ((_3349 * _1127) * _3364) + _3020;
        _3178 = ((_3351 * _1129) * _3364) + _3022;
        _3180 = ((_3353 * _1130) * _3364) + _3024;
    }
    else
    {
        _3170 = _2682;
        _3172 = _2684;
        _3174 = _2686;
        _3176 = _3020;
        _3178 = _3022;
        _3180 = _3024;
    }
    float _5127 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _5138 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _5149 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    uint _3200 = _265 + 6u;
    float _3208 = _1065 / cbSceneParam._m0[86u].x;
    float _3209 = _1066 / cbSceneParam._m0[86u].y;
    vec4 _3223 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3208, _3209, (log2((isnan(cbSceneParam._m0[77u].w) ? _1000 : (isnan(_1000) ? cbSceneParam._m0[77u].w : min(_1000, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3225 = _3223.x;
    float _3226 = _3223.y;
    float _3227 = _3223.z;
    float _3228 = _3223.w;
    float _3299;
    float _3301;
    float _3303;
    float _3305;
    if (_1000 > cbSceneParam._m0[78u].w)
    {
        float _3262 = isnan(_1000) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1000 : min(cbSceneParam._m0[80u].w, _1000));
        float _3263 = _3262 / _1000;
        float _3274 = _3263 * _1050;
        float _3275 = _1051 * _3263;
        float _3276 = (-0.0) - _3275;
        float _3277 = _3263 * _1052;
        float _3279 = (cbSceneParam._m0[77u].w * _3276) / _3262;
        float _3280 = _3279 + cbSceneParam._m0[79u].w;
        float _3281 = cbSceneParam._m0[79u].w - _3275;
        float _3287 = sqrt(((_3274 * _3274) + (_3275 * _3275)) + (_3277 * _3277));
        float _3290 = (1.0 - (cbSceneParam._m0[77u].w / _3262)) * _3287;
        float _3295 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3297 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3450;
        if (abs((_3276 - _3279) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3450 = ((((_3280 > 0.0) ? exp2(_3295 * _3280) : (2.0 - exp2(_3297 * _3280))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3290;
        }
        else
        {
            float _3410 = 1.0 / cbSceneParam._m0[80u].x;
            float _3411 = isnan(_3281) ? _3280 : (isnan(_3280) ? _3281 : max(_3280, _3281));
            float _3412 = isnan(_3281) ? _3280 : (isnan(_3280) ? _3281 : min(_3280, _3281));
            float _3421 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : min(_3411, 0.0));
            float _3422 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : min(_3412, 0.0));
            _3450 = ((abs(_3287 / _3276) * cbSceneParam._m0[80u].y) * ((((_3421 - _3422) * 2.0) - ((exp2(_3295 * (isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0)))) - exp2(_3295 * (isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0))))) * _3410)) - ((exp2(_3297 * _3421) - exp2(_3297 * _3422)) * _3410))) + (_3290 * cbSceneParam._m0[80u].z);
        }
        vec4 _3452 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3208, _3209, 1.0), 0.0);
        float _3461 = exp2((_3450 * (-1.44269502162933349609375)) * (1.0 - _3452.w));
        float _3462 = log2(_3461);
        float _3478 = log2(_3228);
        _3299 = (exp2(_3478 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3462 * cbSceneParam._m0[78u].x)) * _3452.x) / cbSceneParam._m0[78u].x)) + _3225;
        _3301 = (exp2(_3478 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3462 * cbSceneParam._m0[78u].y)) * _3452.y) / cbSceneParam._m0[78u].y)) + _3226;
        _3303 = (exp2(_3478 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3462 * cbSceneParam._m0[78u].z)) * _3452.z) / cbSceneParam._m0[78u].z)) + _3227;
        _3305 = _3461 * _3228;
    }
    else
    {
        _3299 = _3225;
        _3301 = _3226;
        _3303 = _3227;
        _3305 = _3228;
    }
    float _3317 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3318 = _3317 == 3.0;
    float _3319 = log2(_3305);
    float _3326 = exp2(_3319 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0))) * (_3170 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1143))) + ((_3176 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1950)) * cbPerFrame._m0[3u].x));
    float _3327 = exp2(_3319 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0))) * (_3172 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1143))) + ((_3178 + ((isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0))) * _1950)) * cbPerFrame._m0[3u].x));
    float _3328 = exp2(_3319 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0))) * (_3174 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1143))) + ((_3180 + ((isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0))) * _1950)) * cbPerFrame._m0[3u].x));
    float _3337 = (_3317 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3337 * (_3318 ? _3326 : (_3326 + (cbSceneParam._m0[72u].w * _3299)));
    SV_Target.y = _3337 * (_3318 ? _3327 : (_3327 + (cbSceneParam._m0[72u].w * _3301)));
    SV_Target.z = _3337 * (_3318 ? _3328 : (_3328 + (cbSceneParam._m0[72u].w * _3303)));
    SV_Target.w = cbInstanceData._m0[_3200].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3200].w;
}


