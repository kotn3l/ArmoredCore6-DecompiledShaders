#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1596;
float _3997;
float _3998;
float _3999;
float _4000;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4009 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4020 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _4031 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    uint _292 = uint(roundEven(NORMAL.w)) * 13u;
    uint _297 = _292 + 1u;
    uint _301 = _292 + 2u;
    float _310 = sqrt(((cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x)) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x));
    float _311 = _310 * TEXCOORD.z;
    float _312 = _310 * TEXCOORD.w;
    vec4 _325 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _311) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _312) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _354 = _349.x * cbMtdParam._m0[11u].x;
    float _355 = _349.y * cbMtdParam._m0[11u].y;
    float _356 = _349.z * cbMtdParam._m0[11u].z;
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _311) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _312) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _394.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[23u].w) + _443) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4042 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _468 = (_461 * ((_375.x * cbMtdParam._m0[12u].x) - _354)) + _354;
    float _469 = (_461 * ((_375.y * cbMtdParam._m0[12u].y) - _355)) + _355;
    float _470 = (_461 * ((_375.z * cbMtdParam._m0[12u].z) - _356)) + _356;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _311) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _312) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _394.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[23u].w) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4053 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _311) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _312) + cbTextureTilingScale._m0[24u].w));
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _581 = _579.x;
    float _591 = dot(vec4(_581, _579.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _603 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _394.z) * 2.0) - ((((_581 - _591) * cbMtdParam._m0[23u].w) + _591) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4064 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _604 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _611 = (_604 * ((_562.x * cbMtdParam._m0[14u].x) - _541)) + _541;
    float _612 = (_604 * ((_562.y * cbMtdParam._m0[14u].y) - _542)) + _542;
    float _613 = (_604 * ((_562.z * cbMtdParam._m0[14u].z) - _543)) + _543;
    float _617 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _325.x) * _611;
    float _620 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _325.y) * _612;
    float _623 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _325.z) * _613;
    float _630 = ((_611 - _617) * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) + _617;
    float _631 = ((_612 - _620) * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) + _620;
    float _632 = ((_613 - _623) * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) + _623;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _311) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _312) + cbTextureTilingScale._m0[14u].w));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _311) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _312) + cbTextureTilingScale._m0[20u].w));
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _311) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _312) + cbTextureTilingScale._m0[4u].w));
    vec4 _709 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _711 = _709.x;
    float _712 = _709.y;
    float _713 = _709.z;
    float _720 = ((_692.x - _711) * _461) + _711;
    float _721 = ((_692.y - _712) * _461) + _712;
    float _722 = ((_692.z - _713) * _461) + _713;
    vec4 _734 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _311) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _312) + cbTextureTilingScale._m0[2u].w));
    float _745 = ((_734.x - _720) * _534) + _720;
    float _746 = ((_734.y - _721) * _534) + _721;
    float _747 = ((_734.z - _722) * _534) + _722;
    vec4 _759 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _311) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _312) + cbTextureTilingScale._m0[23u].w));
    float _772 = ((_759.z - _747) * _604) + _747;
    float _775 = ((((_759.x - _745) * _604) + _745) * 2.0) + (-1.0);
    float _776 = ((((_759.y - _746) * _604) + _746) * 2.0) + (-1.0);
    float _777 = dot(vec2(_775, _776), vec2(_775, _776));
    float _4075 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _782 = sqrt(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))));
    vec4 _796 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _821 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _311) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _312) + cbTextureTilingScale._m0[11u].w));
    float _823 = _821.x;
    float _824 = 1.0 - _823;
    float _839 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_823 - _824) * cbMtdParam._m0[24u].z) + _824) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4086 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _840 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _847 = (_840 * ((_650.x * cbMtdParam._m0[18u].x) - _630)) + _630;
    float _848 = (_840 * ((_650.y * cbMtdParam._m0[18u].y) - _631)) + _631;
    float _849 = (_840 * ((_650.z * cbMtdParam._m0[18u].z) - _632)) + _632;
    vec4 _875 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _877 = _875.x;
    float _895 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _311) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _312) + cbTextureTilingScale._m0[9u].w)).x - _877) * _461) + _877;
    float _912 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _311) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _312) + cbTextureTilingScale._m0[21u].w)).x - _895) * _534) + _895;
    float _930 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _311) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _312) + cbTextureTilingScale._m0[10u].w)).x - _912) * _604) + _912;
    float _934 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _930) * cbMtdParam._m0[19u].z) + _930;
    float _936 = _934 - (_934 * _840);
    float _941 = (((_669.z - _772) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _772;
    float _945 = ((_796.z - _941) * cbMtdParam._m0[19u].w) + _941;
    vec4 _958 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _311) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _312) + cbTextureTilingScale._m0[15u].w));
    float _965 = (_958.x * 2.0) + (-1.0);
    float _966 = (_958.y * 2.0) + (-1.0);
    float _967 = dot(vec2(_965, _966), vec2(_965, _966));
    float _4097 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _975 = (_840 * (_958.z - _945)) + _945;
    float _984 = (_775 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_669.x * 2.0) + (-1.0)))) + (((_796.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _985 = (_776 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_669.y * 2.0) + (-1.0)))) + (((_796.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _997 = (((_965 - _984) + (cbMtdParam._m0[21u].x * _984)) * _840) + _984;
    float _998 = (((_966 - _985) + (cbMtdParam._m0[21u].x * _985)) * _840) + _985;
    float _999 = (_840 * (sqrt(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) - _782)) + _782;
    float _1003 = cbMtdParam._m0[22u].x + _796.w;
    float _1006 = fma(_999, _258 * NORMAL.x, fma(_998, _265 * TANGENT.x, (_251 * _243) * _997));
    float _1009 = fma(_999, _258 * NORMAL.y, fma(_998, _265 * TANGENT.y, (_251 * _244) * _997));
    float _1012 = fma(_999, _258 * NORMAL.z, fma(_998, _265 * TANGENT.z, (_251 * _245) * _997));
    float _1016 = inversesqrt(dot(vec3(_1006, _1009, _1012), vec3(_1006, _1009, _1012)));
    float _1017 = _1016 * _1006;
    float _1018 = _1016 * _1009;
    float _1019 = _1016 * _1012;
    float _4108 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _1020 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4130 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4141 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4152 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4163 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _1025 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _1039 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1089 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1079);
    float _1090 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1079);
    float _1091 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1079);
    float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
    float _1096 = _1089 * _1095;
    float _1097 = _1090 * _1095;
    float _1098 = _1091 * _1095;
    vec4 _1103 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1105 = _1103.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1277 = sqrt(((_1089 * _1089) + (_1090 * _1090)) + (_1091 * _1091));
        float _1283 = (cbMatDynParam._m0[5u].x * _1277) + cbMatDynParam._m0[5u].y;
        float _4174 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1288 = (cbMatDynParam._m0[5u].z * _1277) + cbMatDynParam._m0[5u].w;
        float _4185 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) - _1284)) + _1284) < ((_1105 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1116 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1117 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1135 = fma(_1019, cbSceneParam._m0[5u].z, fma(_1018, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1017));
    float _1138 = fma(_1019, cbSceneParam._m0[6u].z, fma(_1018, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1017));
    float _1141 = fma(_1019, cbSceneParam._m0[7u].z, fma(_1018, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1017));
    uint _1154 = _292 + 9u;
    uint _1155 = _1154 + uint(cbMatDynParam._m0[0u].w);
    float _1161 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * cbInstanceData._m0[_1155].x;
    float _1162 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * cbInstanceData._m0[_1155].y;
    float _1163 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * cbInstanceData._m0[_1155].z;
    float _4196 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1164 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _4207 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _1165 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1166 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _1167 = 1.0 - _1025;
    float _1168 = _1164 * _1167;
    float _1169 = _1165 * _1167;
    float _1170 = _1166 * _1167;
    float _1175 = (_1164 + (-0.039999999105930328369140625)) * _1025;
    float _1176 = (_1165 + (-0.039999999105930328369140625)) * _1025;
    float _1177 = (_1166 + (-0.039999999105930328369140625)) * _1025;
    float _1178 = _1175 + 0.039999999105930328369140625;
    float _1180 = _1176 + 0.039999999105930328369140625;
    float _1181 = _1177 + 0.039999999105930328369140625;
    vec4 _1190 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1116, cbSceneParam._m0[86u].y * _1117));
    float _1194 = ((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * TEXCOORD_5.w) * _1190.x;
    float _1195 = dot(vec3(_1017, _1018, _1019), vec3(_1096, _1097, _1098));
    float _1198 = _1195 * 2.0;
    float _1202 = (_1198 * _1017) - _1096;
    float _1203 = (_1198 * _1018) - _1097;
    float _1204 = (_1198 * _1019) - _1098;
    float _1208 = abs(dot(vec3(_1096, _1097, _1098), vec3(_1017, _1018, _1019)));
    float _4229 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _1210 = sqrt(_1020);
    float _1223 = exp2((_1210 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1210 * 3.0));
    float _1229 = (1.0 - _1223) * ((_1210 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1230 = _1223 * _1210;
    float _1258 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1262 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1266 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1595;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1320 = fma(_1266, cbModelParam._m0[26u].z, fma(_1262, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1258));
        float _1324 = fma(_1266, cbModelParam._m0[27u].z, fma(_1262, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1258));
        float _1328 = fma(_1266, cbModelParam._m0[28u].z, fma(_1262, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1258));
        float _1353 = _1258 + _1017;
        float _1354 = _1262 + _1018;
        float _1355 = _1266 + _1019;
        float _1365 = fma(_1355, cbModelParam._m0[26u].z, fma(_1354, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1353)) - _1320;
        float _1366 = fma(_1355, cbModelParam._m0[27u].z, fma(_1354, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1353)) - _1324;
        float _1367 = fma(_1355, cbModelParam._m0[28u].z, fma(_1354, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1353)) - _1328;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1320 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1324 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[34u].z) + ((((((_1328 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1423 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1389.x + (-0.5));
        float _1425 = _1423 * (_1389.y + (-0.5));
        float _1426 = _1423 * (_1389.z + (-0.5));
        float _1433 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1396.x + (-0.5));
        float _1435 = _1433 * (_1396.y + (-0.5));
        float _1436 = _1433 * (_1396.z + (-0.5));
        float _1443 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1403.x + (-0.5));
        float _1445 = _1443 * (_1403.y + (-0.5));
        float _1446 = _1443 * (_1403.z + (-0.5));
        float _1453 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1410.x + (-0.5));
        float _1455 = _1453 * (_1410.y + (-0.5));
        float _1456 = _1453 * (_1410.z + (-0.5));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = _1424 * 0.5;
        float _1461 = _1434 * 0.5;
        float _1462 = _1444 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1477 = (dot(vec3(_1017, _1018, _1019), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1487 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4277 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1489 + 1.0))) + _1494) * _1457;
        float _1504 = _1425 * 0.5;
        float _1505 = _1435 * 0.5;
        float _1506 = _1445 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_1017, _1018, _1019), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4310 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1531 + 1.0))) + _1536) * _1458;
        float _1546 = _1426 * 0.5;
        float _1547 = _1436 * 0.5;
        float _1548 = _1446 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_1017, _1018, _1019), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4343 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1573 + 1.0))) + _1578) * _1459;
        _1595 = _1426;
        _1597 = _1425;
        _1598 = _1424;
        _1599 = _1436;
        _1600 = _1435;
        _1601 = _1434;
        _1602 = _1446;
        _1603 = _1445;
        _1604 = _1444;
        _1605 = _1459;
        _1606 = _1458;
        _1607 = _1457;
        _1608 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1609 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1610 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
    }
    else
    {
        _1595 = _1596;
        _1597 = _1596;
        _1598 = _1596;
        _1599 = _1596;
        _1600 = _1596;
        _1601 = _1596;
        _1602 = _1596;
        _1603 = _1596;
        _1604 = _1596;
        _1605 = _1596;
        _1606 = _1596;
        _1607 = _1596;
        _1608 = 0.0;
        _1609 = 0.0;
        _1610 = 0.0;
    }
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1636 = fma(_1266, cbModelParam._m0[30u].z, fma(_1262, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1258));
        float _1640 = fma(_1266, cbModelParam._m0[31u].z, fma(_1262, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1258));
        float _1644 = fma(_1266, cbModelParam._m0[32u].z, fma(_1262, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1258));
        float _1667 = _1258 + _1017;
        float _1668 = _1262 + _1018;
        float _1669 = _1266 + _1019;
        float _1679 = fma(_1669, cbModelParam._m0[30u].z, fma(_1668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1667)) - _1636;
        float _1680 = fma(_1669, cbModelParam._m0[31u].z, fma(_1668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1667)) - _1640;
        float _1681 = fma(_1669, cbModelParam._m0[32u].z, fma(_1668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1667)) - _1644;
        float _1685 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
        float _1698 = ((_1685 * _1679) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1636 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1699 = ((_1685 * _1680) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1640 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1700 = ((_1685 * _1681) / cbModelParam._m0[35u].z) + ((((((_1644 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1702 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1698, _1699, _1700), 0.0);
        vec4 _1709 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1698, _1699, _1700), 0.0);
        vec4 _1716 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1698, _1699, _1700), 0.0);
        vec4 _1723 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1698, _1699, _1700), 0.0);
        float _1735 = exp2((_1702.w + (-0.5)) * 20.0) * 2.0;
        float _1736 = _1735 * (_1702.x + (-0.5));
        float _1737 = _1735 * (_1702.y + (-0.5));
        float _1738 = _1735 * (_1702.z + (-0.5));
        float _1745 = exp2((_1709.w + (-0.5)) * 20.0) * 2.0;
        float _1746 = _1745 * (_1709.x + (-0.5));
        float _1747 = _1745 * (_1709.y + (-0.5));
        float _1748 = _1745 * (_1709.z + (-0.5));
        float _1755 = exp2((_1716.w + (-0.5)) * 20.0) * 2.0;
        float _1756 = _1755 * (_1716.x + (-0.5));
        float _1757 = _1755 * (_1716.y + (-0.5));
        float _1758 = _1755 * (_1716.z + (-0.5));
        float _1765 = exp2((_1723.w + (-0.5)) * 20.0) * 2.0;
        float _1766 = _1765 * (_1723.x + (-0.5));
        float _1767 = _1765 * (_1723.y + (-0.5));
        float _1768 = _1765 * (_1723.z + (-0.5));
        float _1769 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1770 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1771 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1772 = _1736 * 0.5;
        float _1773 = _1746 * 0.5;
        float _1774 = _1756 * 0.5;
        float _1775 = dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774));
        float _1780 = (_1775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1775);
        float _1788 = (dot(vec3(_1017, _1018, _1019), vec3(_1780 * _1772, _1780 * _1773, _1780 * _1774)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1797 = sqrt(((_1773 * _1773) + (_1772 * _1772)) + (_1774 * _1774)) / (_1769 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1799 = _1798 * 2.0;
        float _1803 = (1.0 - _1798) / (_1798 + 1.0);
        float _4406 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1813 = ((((1.0 - _1804) * (_1799 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1799 + 1.0))) + _1804) * _1769;
        float _1814 = _1737 * 0.5;
        float _1815 = _1747 * 0.5;
        float _1816 = _1757 * 0.5;
        float _1817 = dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816));
        float _1822 = (_1817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1817);
        float _1830 = (dot(vec3(_1017, _1018, _1019), vec3(_1822 * _1814, _1822 * _1815, _1822 * _1816)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1839 = sqrt(((_1815 * _1815) + (_1814 * _1814)) + (_1816 * _1816)) / (_1770 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1841 = _1840 * 2.0;
        float _1845 = (1.0 - _1840) / (_1840 + 1.0);
        float _4439 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1855 = ((((1.0 - _1846) * (_1841 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1841 + 1.0))) + _1846) * _1770;
        float _1856 = _1738 * 0.5;
        float _1857 = _1748 * 0.5;
        float _1858 = _1758 * 0.5;
        float _1859 = dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858));
        float _1864 = (_1859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1859);
        float _1872 = (dot(vec3(_1017, _1018, _1019), vec3(_1864 * _1856, _1864 * _1857, _1864 * _1858)) + 1.0) * 0.5;
        float _4450 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1881 = sqrt(((_1857 * _1857) + (_1856 * _1856)) + (_1858 * _1858)) / (_1771 + 9.9999997473787516355514526367188e-06);
        float _4461 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1883 = _1882 * 2.0;
        float _1887 = (1.0 - _1882) / (_1882 + 1.0);
        float _4472 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1897 = ((((1.0 - _1888) * (_1883 + 2.0)) * exp2(log2(isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_1883 + 1.0))) + _1888) * _1771;
        _1905 = _1738;
        _1906 = _1737;
        _1907 = _1736;
        _1908 = _1748;
        _1909 = _1747;
        _1910 = _1746;
        _1911 = _1758;
        _1912 = _1757;
        _1913 = _1756;
        _1914 = _1771;
        _1915 = _1770;
        _1916 = _1769;
        _1917 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)));
        _1918 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)));
        _1919 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)));
    }
    else
    {
        _1905 = _1596;
        _1906 = _1596;
        _1907 = _1596;
        _1908 = _1596;
        _1909 = _1596;
        _1910 = _1596;
        _1911 = _1596;
        _1912 = _1596;
        _1913 = _1596;
        _1914 = _1596;
        _1915 = _1596;
        _1916 = _1596;
        _1917 = 0.0;
        _1918 = 0.0;
        _1919 = 0.0;
    }
    float _1929 = (cbModelParam._m0[1u].x * (_1917 - _1608)) + _1608;
    float _1930 = (cbModelParam._m0[1u].x * (_1918 - _1609)) + _1609;
    float _1931 = (cbModelParam._m0[1u].x * (_1919 - _1610)) + _1610;
    float _1952 = fma(_1931, cbSceneParam._m0[89u].z, fma(_1930, cbSceneParam._m0[89u].y, _1929 * cbSceneParam._m0[89u].x));
    float _1955 = fma(_1931, cbSceneParam._m0[90u].z, fma(_1930, cbSceneParam._m0[90u].y, _1929 * cbSceneParam._m0[90u].x));
    float _1958 = fma(_1931, cbSceneParam._m0[91u].z, fma(_1930, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1929));
    float _1973 = _1202 * 0.5;
    float _1974 = _1203 * 0.5;
    float _1975 = _1204 * 0.5;
    float _1976 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1907, _1910, _1913, _1916));
    float _1979 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1906, _1909, _1912, _1915));
    float _1982 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1905, _1908, _1911, _1914));
    float _2016;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1989 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1595, _1599, _1602, _1605));
        float _1993 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1597, _1600, _1603, _1606));
        float _1997 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1598, _1601, _1604, _1607));
        float _2004 = dot(vec4(cbModelParam._m0[39u]), vec4(_1973, _1974, _1975, 1.0));
        _2016 = dot(vec3(isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0)), isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0)), isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2004) ? 0.0 : (isnan(0.0) ? _2004 : max(0.0, _2004))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2016 = 1.0;
    }
    float _2027;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2018 = dot(vec4(cbModelParam._m0[40u]), vec4(_1973, _1974, _1975, 1.0));
        _2027 = dot(vec3(isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)), isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)), isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2018) ? 0.0 : (isnan(0.0) ? _2018 : max(0.0, _2018))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2027 = 1.0;
    }
    float _2031 = (_2027 * cbModelParam._m0[1u].x) + (_2016 * (1.0 - cbModelParam._m0[1u].x));
    float _2041 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1020);
    float _2042 = isnan(_2041) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2041 : min(cbModelParam._m0[25u].z, _2041));
    float _2122;
    float _2124;
    float _2126;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2089 = fma(_1266, cbModelParam._m0[13u].z, fma(_1262, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1258)) + cbModelParam._m0[13u].w;
        float _2093 = fma(_1266, cbModelParam._m0[14u].z, fma(_1262, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1258)) + cbModelParam._m0[14u].w;
        float _2097 = fma(_1266, cbModelParam._m0[15u].z, fma(_1262, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1258)) + cbModelParam._m0[15u].w;
        float _2100 = fma(_1204, cbModelParam._m0[13u].z, fma(_1203, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1202));
        float _2103 = fma(_1204, cbModelParam._m0[14u].z, fma(_1203, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1202));
        float _2106 = fma(_1204, cbModelParam._m0[15u].z, fma(_1203, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1202));
        float _2134;
        if (_2100 > 0.0)
        {
            _2134 = abs((1.0 - _2089) / _2100);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2089 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2134 = frontier_phi_17_15_ladder;
        }
        float _2357;
        if (_2103 > 0.0)
        {
            _2357 = abs((1.0 - _2093) / _2103);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2093 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2357 = frontier_phi_26_22_ladder;
        }
        float _2614;
        if (_2106 > 0.0)
        {
            _2614 = abs((1.0 - _2097) / _2106);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2097 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2614 = frontier_phi_38_33_ladder;
        }
        float _2616 = isnan(_2357) ? _2134 : (isnan(_2134) ? _2357 : min(_2134, _2357));
        float _2617 = isnan(_2614) ? _2616 : (isnan(_2616) ? _2614 : min(_2616, _2614));
        float _2621 = (_2617 * _2100) + _2089;
        float _2622 = (_2617 * _2103) + _2093;
        float _2623 = (_2617 * _2106) + _2097;
        float _2624 = _2617 * 9.9999997473787516355514526367188e-05;
        float _2626 = (-1.0) - _2624;
        float _2628 = _2624 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2623 > _2628) || ((_2623 < _2626) || ((_2622 > _2628) || ((_2622 < _2626) || ((_2621 < _2626) || (_2621 > _2628))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2623, cbModelParam._m0[9u].z, fma(_2622, cbModelParam._m0[9u].y, _2621 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2623, cbModelParam._m0[10u].z, fma(_2622, cbModelParam._m0[10u].y, _2621 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2623, cbModelParam._m0[11u].z, fma(_2622, cbModelParam._m0[11u].y, _2621 * cbModelParam._m0[11u].x))), _2042);
            frontier_phi_16_38_ladder = _2751.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2751.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2751.x * cbModelParam._m0[1u].y;
        }
        _2122 = frontier_phi_16_38_ladder_2;
        _2124 = frontier_phi_16_38_ladder_1;
        _2126 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2110 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1202, _1203, _1204), _2042);
        _2122 = _2110.x * cbModelParam._m0[1u].y;
        _2124 = _2110.y * cbModelParam._m0[1u].y;
        _2126 = _2110.z * cbModelParam._m0[1u].y;
    }
    float _2130 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1020);
    float _2131 = isnan(_2130) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2130 : min(cbModelParam._m0[25u].w, _2130));
    float _2220;
    float _2222;
    float _2224;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2184 = fma(_1266, cbModelParam._m0[21u].z, fma(_1262, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1258)) + cbModelParam._m0[21u].w;
        float _2188 = fma(_1266, cbModelParam._m0[22u].z, fma(_1262, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1258)) + cbModelParam._m0[22u].w;
        float _2192 = fma(_1266, cbModelParam._m0[23u].z, fma(_1262, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1258)) + cbModelParam._m0[23u].w;
        float _2195 = fma(_1204, cbModelParam._m0[21u].z, fma(_1203, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1202));
        float _2198 = fma(_1204, cbModelParam._m0[22u].z, fma(_1203, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1202));
        float _2201 = fma(_1204, cbModelParam._m0[23u].z, fma(_1203, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1202));
        float _2362;
        if (_2195 > 0.0)
        {
            _2362 = abs((1.0 - _2184) / _2195);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2195 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2184 + 1.0) / _2195);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2362 = frontier_phi_28_24_ladder;
        }
        float _2641;
        if (_2198 > 0.0)
        {
            _2641 = abs((1.0 - _2188) / _2198);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2198 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2188 + 1.0) / _2198);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2641 = frontier_phi_40_35_ladder;
        }
        float _2854;
        if (_2201 > 0.0)
        {
            _2854 = abs((1.0 - _2192) / _2201);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2201 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2192 + 1.0) / _2201);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2854 = frontier_phi_49_46_ladder;
        }
        float _2856 = isnan(_2641) ? _2362 : (isnan(_2362) ? _2641 : min(_2362, _2641));
        float _2857 = isnan(_2854) ? _2856 : (isnan(_2856) ? _2854 : min(_2856, _2854));
        float _2861 = (_2857 * _2195) + _2184;
        float _2862 = (_2857 * _2198) + _2188;
        float _2863 = (_2857 * _2201) + _2192;
        float _2864 = _2857 * 9.9999997473787516355514526367188e-05;
        float _2865 = (-1.0) - _2864;
        float _2867 = _2864 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2863 > _2867) || ((_2863 < _2865) || ((_2862 > _2867) || ((_2862 < _2865) || ((_2861 < _2865) || (_2861 > _2867))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3062 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2863, cbModelParam._m0[17u].z, fma(_2862, cbModelParam._m0[17u].y, _2861 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2863, cbModelParam._m0[18u].z, fma(_2862, cbModelParam._m0[18u].y, _2861 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2863, cbModelParam._m0[19u].z, fma(_2862, cbModelParam._m0[19u].y, _2861 * cbModelParam._m0[19u].x))), _2131);
            frontier_phi_25_49_ladder = _3062.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3062.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3062.x * cbModelParam._m0[1u].z;
        }
        _2220 = frontier_phi_25_49_ladder_2;
        _2222 = frontier_phi_25_49_ladder_1;
        _2224 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2204 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1202, _1203, _1204), _2131);
        _2220 = _2204.x * cbModelParam._m0[1u].z;
        _2222 = _2204.y * cbModelParam._m0[1u].z;
        _2224 = _2204.z * cbModelParam._m0[1u].z;
    }
    float _2237 = (((_1229 * _1178) + _1230) * _1194) * ((cbModelParam._m0[1u].w * (_2220 - _2122)) + _2122);
    float _2239 = (((_1229 * _1180) + _1230) * _1194) * ((cbModelParam._m0[1u].w * (_2222 - _2124)) + _2124);
    float _2241 = (((_1229 * _1181) + _1230) * _1194) * ((cbModelParam._m0[1u].w * (_2224 - _2126)) + _2126);
    float _2244 = fma(_2241, cbSceneParam._m0[89u].z, fma(_2239, cbSceneParam._m0[89u].y, _2237 * cbSceneParam._m0[89u].x));
    float _2247 = fma(_2241, cbSceneParam._m0[90u].z, fma(_2239, cbSceneParam._m0[90u].y, _2237 * cbSceneParam._m0[90u].x));
    float _2250 = fma(_2241, cbSceneParam._m0[91u].z, fma(_2239, cbSceneParam._m0[91u].y, _2237 * cbSceneParam._m0[91u].x));
    vec4 _2258 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1116, _1117));
    float _2260 = _2258.w;
    float _2272 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2260);
    float _2273 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2260);
    float _2274 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2260);
    uvec4 _2278 = floatBitsToUint(cbInstanceData._m0[_292 + 5u]);
    uint _2280 = _2278.x * 14u;
    uint _2281 = _2280 + 13u;
    float _2288 = _1194 + (-1.0);
    float _2293 = (cbLight._m0[_2281].x * _2288) + 1.0;
    float _2294 = (cbLight._m0[_2281].y * _2288) + 1.0;
    float _2295 = (cbLight._m0[_2281].z * _2288) + 1.0;
    float _2296 = (cbLight._m0[_2281].w * _2288) + 1.0;
    uint _2297 = _2280 + 5u;
    float _2303 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
    uint _2307 = _2280 + 4u;
    float _2316 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
    uint _2320 = _2280 | 1u;
    float _2331 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_1017, _1018, _1019));
    float _2334 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_1017, _1018, _1019));
    float _4608 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _4619 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2339 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * 0.3183098733425140380859375;
    float _2341 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * 0.3183098733425140380859375;
    float _2348 = ((cbLight._m0[_2297].x * _2303) * _2341) + (((cbLight._m0[_2307].x * _2272) * _2316) * _2339);
    float _2349 = ((_2303 * cbLight._m0[_2297].y) * _2341) + (((cbLight._m0[_2307].y * _2273) * _2316) * _2339);
    float _2350 = ((_2303 * cbLight._m0[_2297].z) * _2341) + (((cbLight._m0[_2307].z * _2274) * _2316) * _2339);
    uvec4 _2354 = floatBitsToUint(cbLight._m0[_2280 + 12u]);
    bool _2356 = _2354.x == 0u;
    float _2367;
    float _2369;
    float _2371;
    if (_2356)
    {
        _2367 = _2348;
        _2369 = _2349;
        _2371 = _2350;
    }
    else
    {
        uint _2375 = _2280 + 6u;
        float _2391 = (dot(vec3(cbLight._m0[_2280 + 2u].xyz), vec3(_1017, _1018, _1019)) * 0.5) + 0.5;
        float _2392 = _2391 * _2391;
        float _4630 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2393 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2394 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2367 = (((cbLight._m0[_2375].x * 0.3183098733425140380859375) * _2393) * _2394) + _2348;
        _2369 = (((cbLight._m0[_2375].y * 0.3183098733425140380859375) * _2393) * _2394) + _2349;
        _2371 = (((cbLight._m0[_2375].z * 0.3183098733425140380859375) * _2393) * _2394) + _2350;
    }
    bool _2374 = _2354.y == 0u;
    float _2412;
    float _2414;
    float _2416;
    if (_2374)
    {
        _2412 = _2367;
        _2414 = _2369;
        _2416 = _2371;
    }
    else
    {
        uint _2585 = _2280 + 7u;
        float _2601 = (dot(vec3(cbLight._m0[_2280 + 3u].xyz), vec3(_1017, _1018, _1019)) * 0.5) + 0.5;
        float _2602 = _2601 * _2601;
        float _4646 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2603 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2604 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2412 = (((cbLight._m0[_2585].x * 0.3183098733425140380859375) * _2603) * _2604) + _2367;
        _2414 = (((cbLight._m0[_2585].y * 0.3183098733425140380859375) * _2603) * _2604) + _2369;
        _2416 = (((cbLight._m0[_2585].z * 0.3183098733425140380859375) * _2603) * _2604) + _2371;
    }
    uint _2419 = _2280 + 8u;
    float _2432 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2280].w)) * _1020) * 0.949999988079071044921875);
    float _2433 = _2432 * _2432;
    float _2434 = cbLight._m0[_2280].x + _1096;
    float _2435 = cbLight._m0[_2280].y + _1097;
    float _2436 = cbLight._m0[_2280].z + _1098;
    float _2440 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
    float _2441 = _2440 * _2434;
    float _2442 = _2440 * _2435;
    float _2443 = _2440 * _2436;
    float _2444 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2280].xyz));
    float _4662 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _4673 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _2448 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
    float _2449 = dot(vec3(_1017, _1018, _1019), vec3(_2441, _2442, _2443));
    float _4684 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2452 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _2453 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_2441, _2442, _2443));
    float _4695 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2457 = _2433 * _2433;
    float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
    float _2469 = exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0);
    float _2470 = 0.959999978542327880859375 - _1175;
    float _2472 = 0.959999978542327880859375 - _1176;
    float _2473 = 0.959999978542327880859375 - _1177;
    float _2480 = 1.0 - _2433;
    float _2491 = (0.5 / (((_2448 * ((_2447 * _2480) + _2433)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2480) + _2433) * _2447))) * _2447;
    float _4706 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2493 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
    uint _2507 = _2280 + 9u;
    float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _1020) * 0.949999988079071044921875);
    float _2519 = _2518 * _2518;
    float _2520 = cbLight._m0[_2320].x + _1096;
    float _2521 = cbLight._m0[_2320].y + _1097;
    float _2522 = cbLight._m0[_2320].z + _1098;
    float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
    float _2527 = _2526 * _2520;
    float _2528 = _2526 * _2521;
    float _2529 = _2526 * _2522;
    float _2530 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2320].xyz));
    float _4717 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
    float _2534 = dot(vec3(_1017, _1018, _1019), vec3(_2527, _2528, _2529));
    float _4728 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2537 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _2538 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2527, _2528, _2529));
    float _4739 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2542 = _2519 * _2519;
    float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
    float _2553 = exp2(log2(1.0 - (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) * 5.0);
    float _2560 = 1.0 - _2519;
    float _2570 = (0.5 / (((_2448 * ((_2533 * _2560) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2560) + _2519) * _2533))) * _2533;
    float _4750 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2572 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
    float _2582 = (((((_2553 * _2470) + _1178) * cbLight._m0[_2507].x) * _2572) * _2303) + ((((cbLight._m0[_2419].x * _2272) * ((_2469 * _2470) + _1178)) * _2493) * _2316);
    float _2583 = (((((_2553 * _2472) + _1180) * cbLight._m0[_2507].y) * _2572) * _2303) + ((((cbLight._m0[_2419].y * _2273) * ((_2469 * _2472) + _1180)) * _2493) * _2316);
    float _2584 = (((((_2553 * _2473) + _1181) * cbLight._m0[_2507].z) * _2572) * _2303) + ((((cbLight._m0[_2419].z * _2274) * ((_2469 * _2473) + _1181)) * _2493) * _2316);
    float _2646;
    float _2648;
    float _2650;
    if (_2356)
    {
        _2646 = _2582;
        _2648 = _2583;
        _2650 = _2584;
    }
    else
    {
        uint _2652 = _2280 + 2u;
        uint _2656 = _2280 + 10u;
        float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2652].w)) * _1020) * 0.949999988079071044921875);
        float _2671 = _2670 * _2670;
        float _2672 = cbLight._m0[_2652].x + _1096;
        float _2673 = cbLight._m0[_2652].y + _1097;
        float _2674 = cbLight._m0[_2652].z + _1098;
        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
        float _2679 = _2678 * _2672;
        float _2680 = _2678 * _2673;
        float _2681 = _2678 * _2674;
        float _2682 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2652].xyz));
        float _4761 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _2686 = dot(vec3(_1017, _1018, _1019), vec3(_2679, _2680, _2681));
        float _4772 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
        float _2690 = dot(vec3(cbLight._m0[_2652].xyz), vec3(_2679, _2680, _2681));
        float _4783 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2694 = _2671 * _2671;
        float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
        float _2705 = exp2(log2(1.0 - (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) * 5.0);
        float _2712 = 1.0 - _2671;
        float _2722 = (0.5 / (((_2448 * ((_2685 * _2712) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2712) + _2671) * _2685))) * _2685;
        float _4794 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2724 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
        float _2725 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2646 = (((((_2705 * _2470) + _1178) * cbLight._m0[_2656].x) * _2724) * _2725) + _2582;
        _2648 = (((((_2705 * _2472) + _1180) * cbLight._m0[_2656].y) * _2724) * _2725) + _2583;
        _2650 = (((((_2705 * _2473) + _1181) * cbLight._m0[_2656].z) * _2724) * _2725) + _2584;
    }
    float _2760;
    float _2762;
    float _2764;
    if (_2374)
    {
        _2760 = _2646;
        _2762 = _2648;
        _2764 = _2650;
    }
    else
    {
        uint _2771 = _2280 + 3u;
        uint _2775 = _2280 + 11u;
        float _2789 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2771].w)) * _1020) * 0.949999988079071044921875);
        float _2790 = _2789 * _2789;
        float _2791 = cbLight._m0[_2771].x + _1096;
        float _2792 = cbLight._m0[_2771].y + _1097;
        float _2793 = cbLight._m0[_2771].z + _1098;
        float _2797 = inversesqrt(dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793)));
        float _2798 = _2797 * _2791;
        float _2799 = _2797 * _2792;
        float _2800 = _2797 * _2793;
        float _2801 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2771].xyz));
        float _4810 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2804 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
        float _2805 = dot(vec3(_1017, _1018, _1019), vec3(_2798, _2799, _2800));
        float _4821 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2808 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
        float _2809 = dot(vec3(cbLight._m0[_2771].xyz), vec3(_2798, _2799, _2800));
        float _4832 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2813 = _2790 * _2790;
        float _2817 = ((_2808 * _2808) * (_2813 + (-1.0))) + 1.0;
        float _2824 = exp2(log2(1.0 - (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) * 5.0);
        float _2831 = 1.0 - _2790;
        float _2841 = (0.5 / (((_2448 * ((_2804 * _2831) + _2790)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2831) + _2790) * _2804))) * _2804;
        float _4843 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2843 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2813 / ((_2817 * _2817) * 3.141590118408203125));
        float _2844 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2760 = (((((_2824 * _2470) + _1178) * cbLight._m0[_2775].x) * _2843) * _2844) + _2646;
        _2762 = (((((_2824 * _2472) + _1180) * cbLight._m0[_2775].y) * _2843) * _2844) + _2648;
        _2764 = (((((_2824 * _2473) + _1181) * cbLight._m0[_2775].z) * _2843) * _2844) + _2650;
    }
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    if (_2278.y == 0u)
    {
        float _2919 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2920 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2919;
        float _2921 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2919;
        float _2922 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2919;
        uvec4 _2934 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2935 = _2934.x;
        uint _2946 = uint((float(_2934.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1117) / _2935))) + floor(float(uint(cbSceneParam._m0[85u].x * _1116) / _2935)));
        float _2956 = (log2(_2922 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2957 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        uint _2960 = uint(isnan(14.0) ? _2957 : (isnan(_2957) ? 14.0 : min(_2957, 14.0)));
        uvec4 _2965 = texelFetch(g_lightClusterGridBuffer, int(((_2960 << 2u) + (_2946 << 6u)) >> 2u));
        uint _2966 = _2965.x;
        uint _2967 = _2934.z;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        if (((((1u << ((_2967 >> 4u) & 15u)) + 4294967295u) & _2966) == 0u) || ((_2967 & 240u) == 0u))
        {
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
        }
        else
        {
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3078;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            uint _3226 = 0u;
            uint _3235;
            bool _3236;
            for (;;)
            {
                _3235 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3226 << 2u)) >> 2u)).x;
                _3236 = _3235 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3236)
                {
                    frontier_phi_66_pred = _3220;
                    frontier_phi_66_pred_1 = _3225;
                    frontier_phi_66_pred_2 = _3224;
                    frontier_phi_66_pred_3 = _3223;
                    frontier_phi_66_pred_4 = _3222;
                    frontier_phi_66_pred_5 = _3221;
                }
                else
                {
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    uint _3371;
                    _3365 = _3220;
                    _3366 = _3221;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3225;
                    _3371 = _3235;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    for (;;)
                    {
                        uint _3375 = uint(findLSB(_3371)) + (_3226 << 5u);
                        uint _3372 = (_3371 + 4294967295u) & _3371;
                        uint _3377 = _3375 * 48u;
                        vec4 _3391 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3377)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 3u)).x));
                        uint _3397 = (_3375 * 48u) + 4u;
                        vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3397)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3397 + 3u)).x));
                        uint _3416 = (_3375 * 48u) + 8u;
                        vec3 _3427 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x));
                        float _3431 = _3391.x - _2920;
                        float _3432 = _3391.y - _2921;
                        float _3433 = _3391.z - _2922;
                        float _3434 = dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433));
                        float _3437 = inversesqrt(_3434);
                        float _3438 = _3437 * _3431;
                        float _3439 = _3437 * _3432;
                        float _3440 = _3437 * _3433;
                        float _3441 = dot(vec3(_1135, _1138, _1141), vec3(_3438, _3439, _3440));
                        float _3446 = 1.0 - (_3434 * _3391.w);
                        float _4869 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3447 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                        float _3448 = sqrt(_3434) * _3410.w;
                        float _3451 = 1.39999997615814208984375 / (_3448 + 1.39999997615814208984375);
                        float _3452 = _3451 * _3451;
                        float _3455 = ((1.0 - _3452) * _3441) + _3452;
                        float _3458 = _3448 * _3448;
                        float _3462 = ((isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0))) * _3447) / ((_3458 * 0.699999988079071044921875) + 1.0);
                        float _3466 = (-0.0) - _2920;
                        float _3467 = (-0.0) - _2921;
                        float _3468 = (-0.0) - _2922;
                        float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                        float _3473 = _3472 * _3466;
                        float _3474 = _3472 * _3467;
                        float _3475 = _3472 * _3468;
                        float _3483 = exp2(log2(1.0 / ((_3458 * 3.5) + 5.0)) * 0.25);
                        float _3484 = 1.0 - _1210;
                        float _3491 = sqrt(1.0 - ((1.0 - (_3484 * _3484)) * (1.0 - (_3483 * _3483))));
                        float _3492 = _3491 * _3491;
                        float _3493 = _3492 * _3492;
                        float _3494 = _3473 + _3438;
                        float _3495 = _3474 + _3439;
                        float _3496 = _3475 + _3440;
                        float _3500 = inversesqrt(dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496)));
                        float _3504 = dot(vec3(_1135, _1138, _1141), vec3(_3473, _3474, _3475));
                        float _4885 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3507 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                        float _3508 = dot(vec3(_1135, _1138, _1141), vec3(_3500 * _3494, _3500 * _3495, _3500 * _3496));
                        float _4896 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3511 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                        float _3515 = ((_3511 * _3511) * (_3493 + (-1.0))) + 1.0;
                        float _3516 = _3451 * _3492;
                        float _3517 = _3516 * _3516;
                        float _3520 = ((1.0 - _3517) * _3441) + _3517;
                        float _4907 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3521 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3522 = 1.0 - _3492;
                        float _3532 = (0.5 / (((_3521 * ((_3507 * _3522) + _3492)) + 9.9999999392252902907785028219223e-09) + (((_3521 * _3522) + _3492) * _3507))) * _3521;
                        float _4918 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3543 = (((_3493 * 3.1415927410125732421875) * (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0)))) / ((_3515 * _3515) * ((_3458 * 2.1991131305694580078125) + 3.141590118408203125))) * _3447;
                        _3295 = (_3462 * _3410.x) + _3368;
                        _3296 = (_3462 * _3410.y) + _3369;
                        _3297 = (_3462 * _3410.z) + _3370;
                        _3292 = (_3543 * _3427.x) + _3365;
                        _3293 = (_3543 * _3427.y) + _3366;
                        _3294 = (_3543 * _3427.z) + _3367;
                        if (_3372 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3365 = _3292;
                            _3366 = _3293;
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3297;
                            _3371 = _3372;
                        }
                    }
                    frontier_phi_66_pred = _3292;
                    frontier_phi_66_pred_1 = _3297;
                    frontier_phi_66_pred_2 = _3296;
                    frontier_phi_66_pred_3 = _3295;
                    frontier_phi_66_pred_4 = _3294;
                    frontier_phi_66_pred_5 = _3293;
                }
                _3068 = frontier_phi_66_pred;
                _3078 = frontier_phi_66_pred_1;
                _3076 = frontier_phi_66_pred_2;
                _3074 = frontier_phi_66_pred_3;
                _3072 = frontier_phi_66_pred_4;
                _3070 = frontier_phi_66_pred_5;
                uint _3227 = _3226 + 1u;
                if (_3227 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3220 = _3068;
                    _3221 = _3070;
                    _3222 = _3072;
                    _3223 = _3074;
                    _3224 = _3076;
                    _3225 = _3078;
                    _3226 = _3227;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
        }
        uvec4 _3081 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3082 = _3081.z;
        uint _3084 = (_3082 >> 8u) & 15u;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        if (((4294967295u << _3084) & _2966) == 0u)
        {
            _3188 = _3067;
            _3190 = _3069;
            _3192 = _3071;
            _3194 = _3073;
            _3196 = _3075;
            _3198 = _3077;
        }
        else
        {
            float _3213 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
            float _3214 = _3213 * _2920;
            float _3215 = _3213 * _2921;
            float _3216 = _3213 * _2922;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3084 < ((_3082 >> 12u) & 15u))
            {
                float _3189;
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3199;
                float _3348 = _3067;
                float _3349 = _3069;
                float _3350 = _3071;
                float _3351 = _3073;
                float _3352 = _3075;
                float _3353 = _3077;
                uint _3354 = _3084;
                uint _3363;
                bool _3364;
                for (;;)
                {
                    _3363 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3354 << 2u)) >> 2u)).x;
                    _3364 = _3363 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3364)
                    {
                        frontier_phi_77_pred = _3353;
                        frontier_phi_77_pred_1 = _3352;
                        frontier_phi_77_pred_2 = _3351;
                        frontier_phi_77_pred_3 = _3350;
                        frontier_phi_77_pred_4 = _3349;
                        frontier_phi_77_pred_5 = _3348;
                    }
                    else
                    {
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3570 = _3348;
                        float _3571 = _3349;
                        float _3572 = _3350;
                        float _3573 = _3351;
                        float _3574 = _3352;
                        float _3575 = _3353;
                        uint _3576 = _3363;
                        uint _3577;
                        vec4 _3602;
                        float _3603;
                        vec4 _3618;
                        vec3 _3630;
                        vec4 _3645;
                        vec4 _3660;
                        float _3706;
                        bool _3707;
                        for (;;)
                        {
                            uint _3587 = ((_3354 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3576));
                            _3577 = (_3576 + 4294967295u) & _3576;
                            uint _3589 = _3587 * 40u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            _3603 = _3602.w;
                            uint _3605 = (_3587 * 40u) + 4u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3620 = (_3587 * 40u) + 8u;
                            _3630 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x));
                            uint _3632 = (_3587 * 40u) + 16u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3587 * 40u) + 20u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3662 = (_3587 * 40u) + 24u;
                            vec4 _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3681 = (_3587 * 40u) + 28u;
                            vec4 _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            _3706 = fma(_2922, _3694.z, fma(_2921, _3694.y, _3694.x * _2920)) + _3694.w;
                            _3707 = !((fma(_2922, _3675.z, fma(_2921, _3675.y, _3675.x * _2920)) + _3675.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3707)
                            {
                                float _3734 = _3602.x - _2920;
                                float _3735 = _3602.y - _2921;
                                float _3736 = _3602.z - _2922;
                                float _3737 = dot(vec3(_3734, _3735, _3736), vec3(_3734, _3735, _3736));
                                float _3740 = inversesqrt(_3737);
                                float _3741 = _3740 * _3734;
                                float _3742 = _3740 * _3735;
                                float _3743 = _3740 * _3736;
                                float _3747 = 1.0 - (_3737 / (_3603 * _3603));
                                float _4929 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3748 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                                float _3752 = sqrt(_3737) * _3618.w;
                                float _3754 = 1.39999997615814208984375 / (_3752 + 1.39999997615814208984375);
                                float _3755 = _3754 * _3754;
                                float _3758 = ((1.0 - _3755) * dot(vec3(_3741, _3742, _3743), vec3(_1135, _1138, _1141))) + _3755;
                                float _3761 = _3752 * _3752;
                                float _3765 = (fma(_2922, _3645.z, fma(_2921, _3645.y, _3645.x * _2920)) + _3645.w) / _3706;
                                float _3766 = (fma(_2922, _3660.z, fma(_2921, _3660.y, _3660.x * _2920)) + _3660.w) / _3706;
                                float _3770 = 1.0 - dot(vec2(_3765, _3766), vec2(_3765, _3766));
                                float _4945 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3771 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                                float _3772 = _3771 * (((isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0))) * _3748) / ((_3761 * 0.699999988079071044921875) + 1.0));
                                float _3784 = exp2(log2(1.0 / ((_3761 * 3.5) + 5.0)) * 0.25);
                                float _3785 = 1.0 - _1210;
                                float _3792 = sqrt(1.0 - ((1.0 - (_3785 * _3785)) * (1.0 - (_3784 * _3784))));
                                float _3793 = _3792 * _3792;
                                float _3794 = _3793 * _3793;
                                float _3795 = _3741 - _3214;
                                float _3796 = _3742 - _3215;
                                float _3797 = _3743 - _3216;
                                float _3801 = inversesqrt(dot(vec3(_3795, _3796, _3797), vec3(_3795, _3796, _3797)));
                                float _3805 = dot(vec3(_1135, _1138, _1141), vec3((-0.0) - _3214, (-0.0) - _3215, (-0.0) - _3216));
                                float _4956 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3808 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                                float _3809 = dot(vec3(_1135, _1138, _1141), vec3(_3801 * _3795, _3801 * _3796, _3801 * _3797));
                                float _4967 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3812 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3816 = ((_3812 * _3812) * (_3794 + (-1.0))) + 1.0;
                                float _3817 = _3754 * _3793;
                                float _3818 = _3817 * _3817;
                                float _3824 = ((1.0 - _3818) * dot(vec3(_1135, _1138, _1141), vec3(_3741, _3742, _3743))) + _3818;
                                float _4978 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3825 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3826 = 1.0 - _3793;
                                float _3836 = (0.5 / (((_3825 * ((_3808 * _3826) + _3793)) + 9.9999999392252902907785028219223e-09) + (((_3825 * _3826) + _3793) * _3808))) * _3825;
                                float _4989 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3846 = (_3771 * _3748) * (((_3794 * 3.1415927410125732421875) * (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0)))) / ((_3816 * _3816) * ((_3761 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3772 * _3618.y;
                                frontier_phi_83_pred_1 = _3772 * _3618.x;
                                frontier_phi_83_pred_2 = _3846 * _3630.z;
                                frontier_phi_83_pred_3 = _3846 * _3630.y;
                                frontier_phi_83_pred_4 = _3846 * _3630.x;
                                frontier_phi_83_pred_5 = _3772 * _3618.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3854 = frontier_phi_83_pred;
                            _3853 = frontier_phi_83_pred_1;
                            _3852 = frontier_phi_83_pred_2;
                            _3851 = frontier_phi_83_pred_3;
                            _3850 = frontier_phi_83_pred_4;
                            _3855 = frontier_phi_83_pred_5;
                            _3560 = _3853 + _3573;
                            _3561 = _3854 + _3574;
                            _3562 = _3855 + _3575;
                            _3557 = _3850 + _3570;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            if (_3577 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3577;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3562;
                        frontier_phi_77_pred_1 = _3561;
                        frontier_phi_77_pred_2 = _3560;
                        frontier_phi_77_pred_3 = _3559;
                        frontier_phi_77_pred_4 = _3558;
                        frontier_phi_77_pred_5 = _3557;
                    }
                    _3199 = frontier_phi_77_pred;
                    _3197 = frontier_phi_77_pred_1;
                    _3195 = frontier_phi_77_pred_2;
                    _3193 = frontier_phi_77_pred_3;
                    _3191 = frontier_phi_77_pred_4;
                    _3189 = frontier_phi_77_pred_5;
                    uint _3355 = _3354 + 1u;
                    if (_3355 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3348 = _3189;
                        _3349 = _3191;
                        _3350 = _3193;
                        _3351 = _3195;
                        _3352 = _3197;
                        _3353 = _3199;
                        _3354 = _3355;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3193;
                frontier_phi_58_59_ladder_1 = _3199;
                frontier_phi_58_59_ladder_2 = _3197;
                frontier_phi_58_59_ladder_3 = _3195;
                frontier_phi_58_59_ladder_4 = _3191;
                frontier_phi_58_59_ladder_5 = _3189;
            }
            else
            {
                frontier_phi_58_59_ladder = _3071;
                frontier_phi_58_59_ladder_1 = _3077;
                frontier_phi_58_59_ladder_2 = _3075;
                frontier_phi_58_59_ladder_3 = _3073;
                frontier_phi_58_59_ladder_4 = _3069;
                frontier_phi_58_59_ladder_5 = _3067;
            }
            _3188 = frontier_phi_58_59_ladder_5;
            _3190 = frontier_phi_58_59_ladder_4;
            _3192 = frontier_phi_58_59_ladder;
            _3194 = frontier_phi_58_59_ladder_3;
            _3196 = frontier_phi_58_59_ladder_2;
            _3198 = frontier_phi_58_59_ladder_1;
        }
        float _3203 = isnan(1.0) ? _1194 : (isnan(_1194) ? 1.0 : min(_1194, 1.0));
        _2979 = (_3203 * _3194) + _2412;
        _2981 = (_3203 * _3196) + _2414;
        _2983 = (_3203 * _3198) + _2416;
        _2985 = ((_3188 * _1178) * _3203) + _2760;
        _2987 = ((_3190 * _1180) * _3203) + _2762;
        _2989 = ((_3192 * _1181) * _3203) + _2764;
    }
    else
    {
        _2979 = _2412;
        _2981 = _2414;
        _2983 = _2416;
        _2985 = _2760;
        _2987 = _2762;
        _2989 = _2764;
    }
    float _5005 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _5016 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _5027 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _3006 = ((isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0))) * (_2979 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1194))) + ((_2985 + ((isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0))) * _2031)) * cbPerFrame._m0[3u].x);
    float _3007 = ((isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0))) * (_2981 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1194))) + ((_2987 + ((isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0))) * _2031)) * cbPerFrame._m0[3u].x);
    float _3008 = ((isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_2983 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1194))) + ((_2989 + ((isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0))) * _2031)) * cbPerFrame._m0[3u].x);
    uint _3009 = _292 + 6u;
    float _3017 = _1116 / cbSceneParam._m0[86u].x;
    float _3018 = _1117 / cbSceneParam._m0[86u].y;
    vec4 _3032 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, (log2((isnan(cbSceneParam._m0[77u].w) ? _1039 : (isnan(_1039) ? cbSceneParam._m0[77u].w : min(_1039, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3034 = _3032.x;
    float _3035 = _3032.y;
    float _3036 = _3032.z;
    float _3037 = _3032.w;
    float _3130;
    float _3132;
    float _3134;
    float _3136;
    if (_1039 > cbSceneParam._m0[78u].w)
    {
        float _3092 = isnan(_1039) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1039 : min(cbSceneParam._m0[80u].w, _1039));
        float _3093 = _3092 / _1039;
        float _3104 = _3093 * _1089;
        float _3105 = _1090 * _3093;
        float _3106 = (-0.0) - _3105;
        float _3108 = _3093 * _1091;
        float _3110 = (cbSceneParam._m0[77u].w * _3106) / _3092;
        float _3111 = _3110 + cbSceneParam._m0[79u].w;
        float _3112 = cbSceneParam._m0[79u].w - _3105;
        float _3118 = sqrt(((_3104 * _3104) + (_3105 * _3105)) + (_3108 * _3108));
        float _3121 = (1.0 - (cbSceneParam._m0[77u].w / _3092)) * _3118;
        float _3126 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3128 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3305;
        if (abs((_3106 - _3110) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3305 = ((((_3111 > 0.0) ? exp2(_3126 * _3111) : (2.0 - exp2(_3128 * _3111))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3121;
        }
        else
        {
            float _3249 = 1.0 / cbSceneParam._m0[80u].x;
            float _3250 = isnan(_3112) ? _3111 : (isnan(_3111) ? _3112 : max(_3111, _3112));
            float _3251 = isnan(_3112) ? _3111 : (isnan(_3111) ? _3112 : min(_3111, _3112));
            float _3260 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : min(_3250, 0.0));
            float _3261 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : min(_3251, 0.0));
            _3305 = ((abs(_3118 / _3106) * cbSceneParam._m0[80u].y) * ((((_3260 - _3261) * 2.0) - ((exp2(_3126 * (isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0)))) - exp2(_3126 * (isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))))) * _3249)) - ((exp2(_3128 * _3260) - exp2(_3128 * _3261)) * _3249))) + (_3121 * cbSceneParam._m0[80u].z);
        }
        vec4 _3307 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, 1.0), 0.0);
        float _3316 = exp2((_3305 * (-1.44269502162933349609375)) * (1.0 - _3307.w));
        float _3317 = log2(_3316);
        float _3333 = log2(_3037);
        _3130 = (exp2(_3333 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3317 * cbSceneParam._m0[78u].x)) * _3307.x) / cbSceneParam._m0[78u].x)) + _3034;
        _3132 = (exp2(_3333 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3317 * cbSceneParam._m0[78u].y)) * _3307.y) / cbSceneParam._m0[78u].y)) + _3035;
        _3134 = (exp2(_3333 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3317 * cbSceneParam._m0[78u].z)) * _3307.z) / cbSceneParam._m0[78u].z)) + _3036;
        _3136 = _3316 * _3037;
    }
    else
    {
        _3130 = _3034;
        _3132 = _3035;
        _3134 = _3036;
        _3136 = _3037;
    }
    bool _3343;
    vec4 _3146;
    vec4 _3168;
    float _3170;
    float _3174;
    float _3175;
    float _3176;
    float _3177;
    bool _3187;
    for (;;)
    {
        _3146 = cbMatDynParam._m0[0u];
        float _3148 = roundEven(_3146.y);
        bool _3149 = _3148 == 3.0;
        float _3150 = log2(_3136);
        float _3157 = exp2(_3150 * cbSceneParam._m0[78u].x) * _3006;
        float _3158 = exp2(_3150 * cbSceneParam._m0[78u].y) * _3007;
        float _3159 = exp2(_3150 * cbSceneParam._m0[78u].z) * _3008;
        float _3166 = _1105 + (-0.5);
        _3168 = cbMtdParam._m0[1u];
        _3170 = _3168.y * _3166;
        float _3173 = (_3148 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3174 = _3173 * (_3149 ? _3157 : (_3157 + (cbSceneParam._m0[72u].w * _3130)));
        _3175 = _3173 * (_3149 ? _3158 : (_3158 + (cbSceneParam._m0[72u].w * _3132)));
        _3176 = _3173 * (_3149 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3134)));
        _3177 = _3166 * 0.999000012874603271484375;
        _3187 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3187)
        {
            if ((cbInstanceData._m0[_292 + 7u].x + _3177) < 0.5)
            {
                _3343 = true;
                break;
            }
        }
        uint _3284 = _1154 + uint(_3146.w);
        if ((cbInstanceData._m0[_3284].w < 1.0) && ((cbInstanceData._m0[_3284].w + _3177) < 0.5))
        {
            _3343 = true;
            break;
        }
        if ((_3170 + 1.0) < _3168.x)
        {
            _3343 = true;
            break;
        }
        _3343 = false;
        break;
    }
    float _3548;
    if (_3343)
    {
        discard_state = true;
        _3548 = 0.0;
    }
    else
    {
        _3548 = cbInstanceData._m0[_3009].w;
    }
    SV_Target.x = _3174;
    SV_Target.y = _3175;
    SV_Target.z = _3176;
    SV_Target.w = _3548;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3009].w;
    discard_exit();
}


