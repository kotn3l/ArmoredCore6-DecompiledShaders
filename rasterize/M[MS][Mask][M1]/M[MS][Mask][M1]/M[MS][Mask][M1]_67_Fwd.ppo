#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1463;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _369.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[23u].w) + _419) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3789 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _444 = (_437 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _445 = (_437 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _446 = (_437 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _369.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[23u].w) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3800 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _523 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444);
    float _526 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445);
    float _529 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446);
    vec4 _547 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _566 = _564.x;
    float _567 = _564.y;
    float _568 = _564.z;
    float _575 = ((_547.x - _566) * _437) + _566;
    float _576 = ((_547.y - _567) * _437) + _567;
    float _577 = ((_547.z - _568) * _437) + _568;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _602 = ((_589.z - _577) * _510) + _577;
    float _605 = ((((_589.x - _575) * _510) + _575) * 2.0) + (-1.0);
    float _607 = ((((_589.y - _576) * _510) + _576) * 2.0) + (-1.0);
    float _608 = dot(vec2(_605, _607), vec2(_605, _607));
    float _3811 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _613 = sqrt(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _654 = _652.x;
    float _655 = 1.0 - _654;
    float _664 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _667 = ((isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : min(_664, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _676 = (_667 - ((((((_654 - _655) * cbMtdParam._m0[24u].z) + _655) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _667))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3832 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _677 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _684 = (_677 * (cbMtdParam._m0[17u].x - _523)) + _523;
    float _685 = (_677 * (cbMtdParam._m0[17u].y - _526)) + _526;
    float _686 = (_677 * (cbMtdParam._m0[17u].z - _529)) + _529;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _700 = _698.x;
    float _701 = 1.0 - _700;
    float _726 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_700 - _701) * cbMtdParam._m0[24u].w) + _701) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3843 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _727 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _735 = ((((cbMtdParam._m0[10u].x - _684) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _727) + _684;
    float _736 = ((((cbMtdParam._m0[10u].y - _685) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _727) + _685;
    float _737 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _686)) * _727) + _686;
    vec4 _763 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _765 = _763.x;
    float _782 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _765) * _437) + _765;
    float _799 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _782) * _510) + _782;
    float _803 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _799) * cbMtdParam._m0[19u].z) + _799;
    float _805 = _803 - (_803 * _677);
    float _807 = _805 - (_805 * _727);
    float _811 = (cbMtdParam._m0[19u].w * (_627.z - _602)) + _602;
    vec4 _825 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _832 = (_825.x * 2.0) + (-1.0);
    float _833 = (_825.y * 2.0) + (-1.0);
    float _834 = dot(vec2(_832, _833), vec2(_832, _833));
    float _3854 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _842 = (_677 * (_825.z - _811)) + _811;
    float _845 = ((cbMtdParam._m0[23u].x - _842) * _727) + _842;
    vec4 _864 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _870 = (_864.x * 2.0) + (-1.0);
    float _871 = (_864.y * 2.0) + (-1.0);
    float _872 = dot(vec2(_870, _871), vec2(_870, _871));
    float _3865 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _880 = (((_627.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _605;
    float _881 = (((_627.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _607;
    float _893 = (((_832 - _880) + (cbMtdParam._m0[21u].x * _880)) * _677) + _880;
    float _894 = (((_833 - _881) + (cbMtdParam._m0[21u].x * _881)) * _677) + _881;
    float _895 = (_677 * (sqrt(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) - _613)) + _613;
    float _906 = (((_870 - _893) + (_893 * cbMtdParam._m0[22u].z)) * _727) + _893;
    float _907 = (((_871 - _894) + (_894 * cbMtdParam._m0[22u].z)) * _727) + _894;
    float _908 = ((sqrt(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) - _895) * _727) + _895;
    float _910 = cbMtdParam._m0[22u].x + _627.w;
    float _913 = fma(_908, _248 * NORMAL.x, fma(_907, _255 * TANGENT.x, (_241 * _233) * _906));
    float _916 = fma(_908, _248 * NORMAL.y, fma(_907, _255 * TANGENT.y, (_241 * _234) * _906));
    float _919 = fma(_908, _248 * NORMAL.z, fma(_907, _255 * TANGENT.z, (_241 * _235) * _906));
    float _923 = inversesqrt(dot(vec3(_913, _916, _919), vec3(_913, _916, _919)));
    float _924 = _923 * _913;
    float _925 = _923 * _916;
    float _926 = _923 * _919;
    float _3876 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _927 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _3898 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _3909 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _3920 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3931 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _932 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _946 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _996 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _986);
    float _997 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _986);
    float _998 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _986);
    float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
    float _1003 = _996 * _1002;
    float _1004 = _997 * _1002;
    float _1005 = _998 * _1002;
    float _1011 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1012 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1030 = fma(_926, cbSceneParam._m0[5u].z, fma(_925, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _924));
    float _1033 = fma(_926, cbSceneParam._m0[6u].z, fma(_925, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _924));
    float _1036 = fma(_926, cbSceneParam._m0[7u].z, fma(_925, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _924));
    uint _1050 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1056 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * cbInstanceData._m0[_1050].x;
    float _1057 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * cbInstanceData._m0[_1050].y;
    float _1058 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * cbInstanceData._m0[_1050].z;
    float _3942 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1059 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1060 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _1062 = 1.0 - _932;
    float _1063 = _1059 * _1062;
    float _1064 = _1060 * _1062;
    float _1065 = _1061 * _1062;
    float _1070 = (_1059 + (-0.039999999105930328369140625)) * _932;
    float _1071 = (_1060 + (-0.039999999105930328369140625)) * _932;
    float _1072 = (_1061 + (-0.039999999105930328369140625)) * _932;
    float _1073 = _1070 + 0.039999999105930328369140625;
    float _1075 = _1071 + 0.039999999105930328369140625;
    float _1076 = _1072 + 0.039999999105930328369140625;
    vec4 _1085 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1011, cbSceneParam._m0[86u].y * _1012));
    float _1089 = ((isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * TEXCOORD_5.w) * _1085.x;
    float _1090 = dot(vec3(_924, _925, _926), vec3(_1003, _1004, _1005));
    float _1093 = _1090 * 2.0;
    float _1097 = (_1093 * _924) - _1003;
    float _1098 = (_1093 * _925) - _1004;
    float _1099 = (_1093 * _926) - _1005;
    float _1103 = abs(dot(vec3(_1003, _1004, _1005), vec3(_924, _925, _926)));
    float _3975 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1105 = sqrt(_927);
    float _1118 = exp2((_1105 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1105 * 3.0));
    float _1124 = (1.0 - _1118) * ((_1105 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1125 = _1118 * _1105;
    float _1153 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1157 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1462;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1187 = fma(_1161, cbModelParam._m0[26u].z, fma(_1157, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1153));
        float _1191 = fma(_1161, cbModelParam._m0[27u].z, fma(_1157, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1153));
        float _1195 = fma(_1161, cbModelParam._m0[28u].z, fma(_1157, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1153));
        float _1220 = _1153 + _924;
        float _1221 = _1157 + _925;
        float _1222 = _1161 + _926;
        float _1232 = fma(_1222, cbModelParam._m0[26u].z, fma(_1221, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1220)) - _1187;
        float _1233 = fma(_1222, cbModelParam._m0[27u].z, fma(_1221, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1220)) - _1191;
        float _1234 = fma(_1222, cbModelParam._m0[28u].z, fma(_1221, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1220)) - _1195;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1187 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1191 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[34u].z) + ((((((_1195 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1290 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1256.x + (-0.5));
        float _1292 = _1290 * (_1256.y + (-0.5));
        float _1293 = _1290 * (_1256.z + (-0.5));
        float _1300 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1263.x + (-0.5));
        float _1302 = _1300 * (_1263.y + (-0.5));
        float _1303 = _1300 * (_1263.z + (-0.5));
        float _1310 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1270.x + (-0.5));
        float _1312 = _1310 * (_1270.y + (-0.5));
        float _1313 = _1310 * (_1270.z + (-0.5));
        float _1320 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1277.x + (-0.5));
        float _1322 = _1320 * (_1277.y + (-0.5));
        float _1323 = _1320 * (_1277.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1344 = (dot(vec3(_924, _925, _926), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1354 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4023 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1356 + 1.0))) + _1361) * _1324;
        float _1371 = _1292 * 0.5;
        float _1372 = _1302 * 0.5;
        float _1373 = _1312 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_924, _925, _926), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4056 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1398 + 1.0))) + _1403) * _1325;
        float _1413 = _1293 * 0.5;
        float _1414 = _1303 * 0.5;
        float _1415 = _1313 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_924, _925, _926), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4089 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1440 + 1.0))) + _1445) * _1326;
        _1462 = _1293;
        _1464 = _1292;
        _1465 = _1291;
        _1466 = _1303;
        _1467 = _1302;
        _1468 = _1301;
        _1469 = _1313;
        _1470 = _1312;
        _1471 = _1311;
        _1472 = _1326;
        _1473 = _1325;
        _1474 = _1324;
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1463;
        _1464 = _1463;
        _1465 = _1463;
        _1466 = _1463;
        _1467 = _1463;
        _1468 = _1463;
        _1469 = _1463;
        _1470 = _1463;
        _1471 = _1463;
        _1472 = _1463;
        _1473 = _1463;
        _1474 = _1463;
        _1475 = 0.0;
        _1476 = 0.0;
        _1477 = 0.0;
    }
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1501 = fma(_1161, cbModelParam._m0[30u].z, fma(_1157, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1153));
        float _1505 = fma(_1161, cbModelParam._m0[31u].z, fma(_1157, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1153));
        float _1509 = fma(_1161, cbModelParam._m0[32u].z, fma(_1157, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1153));
        float _1532 = _1153 + _924;
        float _1533 = _1157 + _925;
        float _1534 = _1161 + _926;
        float _1544 = fma(_1534, cbModelParam._m0[30u].z, fma(_1533, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1532)) - _1501;
        float _1545 = fma(_1534, cbModelParam._m0[31u].z, fma(_1533, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1532)) - _1505;
        float _1546 = fma(_1534, cbModelParam._m0[32u].z, fma(_1533, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1532)) - _1509;
        float _1550 = inversesqrt(dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546)));
        float _1563 = ((_1550 * _1544) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1501 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1564 = ((_1550 * _1545) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1505 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1565 = ((_1550 * _1546) / cbModelParam._m0[35u].z) + ((((((_1509 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1563, _1564, _1565), 0.0);
        float _1600 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1567.x + (-0.5));
        float _1602 = _1600 * (_1567.y + (-0.5));
        float _1603 = _1600 * (_1567.z + (-0.5));
        float _1610 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1574.x + (-0.5));
        float _1612 = _1610 * (_1574.y + (-0.5));
        float _1613 = _1610 * (_1574.z + (-0.5));
        float _1620 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1581.x + (-0.5));
        float _1622 = _1620 * (_1581.y + (-0.5));
        float _1623 = _1620 * (_1581.z + (-0.5));
        float _1630 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1588.x + (-0.5));
        float _1632 = _1630 * (_1588.y + (-0.5));
        float _1633 = _1630 * (_1588.z + (-0.5));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = _1601 * 0.5;
        float _1638 = _1611 * 0.5;
        float _1639 = _1621 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_924, _925, _926), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4152 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1664 + 1.0))) + _1669) * _1634;
        float _1679 = _1602 * 0.5;
        float _1680 = _1612 * 0.5;
        float _1681 = _1622 * 0.5;
        float _1682 = dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681));
        float _1687 = (_1682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1682);
        float _1695 = (dot(vec3(_924, _925, _926), vec3(_1687 * _1679, _1687 * _1680, _1687 * _1681)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1704 = sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1706 = _1705 * 2.0;
        float _1710 = (1.0 - _1705) / (_1705 + 1.0);
        float _4185 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1720 = ((((1.0 - _1711) * (_1706 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1706 + 1.0))) + _1711) * _1635;
        float _1721 = _1603 * 0.5;
        float _1722 = _1613 * 0.5;
        float _1723 = _1623 * 0.5;
        float _1724 = dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723));
        float _1729 = (_1724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1724);
        float _1737 = (dot(vec3(_924, _925, _926), vec3(_1729 * _1721, _1729 * _1722, _1729 * _1723)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1746 = sqrt(((_1722 * _1722) + (_1721 * _1721)) + (_1723 * _1723)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1748 = _1747 * 2.0;
        float _1752 = (1.0 - _1747) / (_1747 + 1.0);
        float _4218 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1762 = ((((1.0 - _1753) * (_1748 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1748 + 1.0))) + _1753) * _1636;
        _1770 = _1603;
        _1771 = _1602;
        _1772 = _1601;
        _1773 = _1613;
        _1774 = _1612;
        _1775 = _1611;
        _1776 = _1623;
        _1777 = _1622;
        _1778 = _1621;
        _1779 = _1636;
        _1780 = _1635;
        _1781 = _1634;
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)));
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)));
    }
    else
    {
        _1770 = _1463;
        _1771 = _1463;
        _1772 = _1463;
        _1773 = _1463;
        _1774 = _1463;
        _1775 = _1463;
        _1776 = _1463;
        _1777 = _1463;
        _1778 = _1463;
        _1779 = _1463;
        _1780 = _1463;
        _1781 = _1463;
        _1782 = 0.0;
        _1783 = 0.0;
        _1784 = 0.0;
    }
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1475)) + _1475;
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1476)) + _1476;
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1477)) + _1477;
    float _1817 = fma(_1796, cbSceneParam._m0[89u].z, fma(_1795, cbSceneParam._m0[89u].y, _1794 * cbSceneParam._m0[89u].x));
    float _1820 = fma(_1796, cbSceneParam._m0[90u].z, fma(_1795, cbSceneParam._m0[90u].y, _1794 * cbSceneParam._m0[90u].x));
    float _1823 = fma(_1796, cbSceneParam._m0[91u].z, fma(_1795, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1794));
    float _1838 = _1097 * 0.5;
    float _1839 = _1098 * 0.5;
    float _1840 = _1099 * 0.5;
    float _1841 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1844 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1847 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1881;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1854 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1462, _1466, _1469, _1472));
        float _1858 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1862 = dot(vec4(_1838, _1839, _1840, 1.0), vec4(_1465, _1468, _1471, _1474));
        float _1869 = dot(vec4(cbModelParam._m0[39u]), vec4(_1838, _1839, _1840, 1.0));
        _1881 = dot(vec3(isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1869) ? 0.0 : (isnan(0.0) ? _1869 : max(0.0, _1869))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1881 = 1.0;
    }
    float _1892;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1883 = dot(vec4(cbModelParam._m0[40u]), vec4(_1838, _1839, _1840, 1.0));
        _1892 = dot(vec3(isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1883) ? 0.0 : (isnan(0.0) ? _1883 : max(0.0, _1883))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1892 = 1.0;
    }
    float _1896 = (_1892 * cbModelParam._m0[1u].x) + (_1881 * (1.0 - cbModelParam._m0[1u].x));
    float _1906 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _927);
    float _1907 = isnan(_1906) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1906 : min(cbModelParam._m0[25u].z, _1906));
    float _1988;
    float _1990;
    float _1992;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1955 = fma(_1161, cbModelParam._m0[13u].z, fma(_1157, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1153)) + cbModelParam._m0[13u].w;
        float _1959 = fma(_1161, cbModelParam._m0[14u].z, fma(_1157, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1153)) + cbModelParam._m0[14u].w;
        float _1963 = fma(_1161, cbModelParam._m0[15u].z, fma(_1157, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1153)) + cbModelParam._m0[15u].w;
        float _1966 = fma(_1099, cbModelParam._m0[13u].z, fma(_1098, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1097));
        float _1969 = fma(_1099, cbModelParam._m0[14u].z, fma(_1098, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1097));
        float _1972 = fma(_1099, cbModelParam._m0[15u].z, fma(_1098, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1097));
        float _2000;
        if (_1966 > 0.0)
        {
            _2000 = abs((1.0 - _1955) / _1966);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1955 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2000 = frontier_phi_14_12_ladder;
        }
        float _2203;
        if (_1969 > 0.0)
        {
            _2203 = abs((1.0 - _1959) / _1969);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1959 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2203 = frontier_phi_23_19_ladder;
        }
        float _2457;
        if (_1972 > 0.0)
        {
            _2457 = abs((1.0 - _1963) / _1972);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1963 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2457 = frontier_phi_35_30_ladder;
        }
        float _2459 = isnan(_2203) ? _2000 : (isnan(_2000) ? _2203 : min(_2000, _2203));
        float _2460 = isnan(_2457) ? _2459 : (isnan(_2459) ? _2457 : min(_2459, _2457));
        float _2464 = (_2460 * _1966) + _1955;
        float _2465 = (_2460 * _1969) + _1959;
        float _2466 = (_2460 * _1972) + _1963;
        float _2467 = _2460 * 9.9999997473787516355514526367188e-05;
        float _2469 = (-1.0) - _2467;
        float _2471 = _2467 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2466 > _2471) || ((_2466 < _2469) || ((_2465 > _2471) || ((_2465 < _2469) || ((_2464 < _2469) || (_2464 > _2471))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2466, cbModelParam._m0[9u].z, fma(_2465, cbModelParam._m0[9u].y, _2464 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2466, cbModelParam._m0[10u].z, fma(_2465, cbModelParam._m0[10u].y, _2464 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2466, cbModelParam._m0[11u].z, fma(_2465, cbModelParam._m0[11u].y, _2464 * cbModelParam._m0[11u].x))), _1907);
            frontier_phi_13_35_ladder = _2594.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2594.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2594.x * cbModelParam._m0[1u].y;
        }
        _1988 = frontier_phi_13_35_ladder_2;
        _1990 = frontier_phi_13_35_ladder_1;
        _1992 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1097, _1098, _1099), _1907);
        _1988 = _1976.x * cbModelParam._m0[1u].y;
        _1990 = _1976.y * cbModelParam._m0[1u].y;
        _1992 = _1976.z * cbModelParam._m0[1u].y;
    }
    float _1996 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _927);
    float _1997 = isnan(_1996) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1996 : min(cbModelParam._m0[25u].w, _1996));
    float _2087;
    float _2089;
    float _2091;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2051 = fma(_1161, cbModelParam._m0[21u].z, fma(_1157, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1153)) + cbModelParam._m0[21u].w;
        float _2055 = fma(_1161, cbModelParam._m0[22u].z, fma(_1157, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1153)) + cbModelParam._m0[22u].w;
        float _2059 = fma(_1161, cbModelParam._m0[23u].z, fma(_1157, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1153)) + cbModelParam._m0[23u].w;
        float _2062 = fma(_1099, cbModelParam._m0[21u].z, fma(_1098, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1097));
        float _2065 = fma(_1099, cbModelParam._m0[22u].z, fma(_1098, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1097));
        float _2068 = fma(_1099, cbModelParam._m0[23u].z, fma(_1098, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1097));
        float _2208;
        if (_2062 > 0.0)
        {
            _2208 = abs((1.0 - _2051) / _2062);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2051 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2208 = frontier_phi_25_21_ladder;
        }
        float _2484;
        if (_2065 > 0.0)
        {
            _2484 = abs((1.0 - _2055) / _2065);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2055 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2484 = frontier_phi_37_32_ladder;
        }
        float _2697;
        if (_2068 > 0.0)
        {
            _2697 = abs((1.0 - _2059) / _2068);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2059 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2697 = frontier_phi_46_43_ladder;
        }
        float _2699 = isnan(_2484) ? _2208 : (isnan(_2208) ? _2484 : min(_2208, _2484));
        float _2700 = isnan(_2697) ? _2699 : (isnan(_2699) ? _2697 : min(_2699, _2697));
        float _2704 = (_2700 * _2062) + _2051;
        float _2705 = (_2700 * _2065) + _2055;
        float _2706 = (_2700 * _2068) + _2059;
        float _2707 = _2700 * 9.9999997473787516355514526367188e-05;
        float _2708 = (-1.0) - _2707;
        float _2710 = _2707 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2706 > _2710) || ((_2706 < _2708) || ((_2705 > _2710) || ((_2705 < _2708) || ((_2704 < _2708) || (_2704 > _2710))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2706, cbModelParam._m0[17u].z, fma(_2705, cbModelParam._m0[17u].y, _2704 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2706, cbModelParam._m0[18u].z, fma(_2705, cbModelParam._m0[18u].y, _2704 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2706, cbModelParam._m0[19u].z, fma(_2705, cbModelParam._m0[19u].y, _2704 * cbModelParam._m0[19u].x))), _1997);
            frontier_phi_22_46_ladder = _2905.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2905.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2905.x * cbModelParam._m0[1u].z;
        }
        _2087 = frontier_phi_22_46_ladder_2;
        _2089 = frontier_phi_22_46_ladder_1;
        _2091 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2071 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1097, _1098, _1099), _1997);
        _2087 = _2071.x * cbModelParam._m0[1u].z;
        _2089 = _2071.y * cbModelParam._m0[1u].z;
        _2091 = _2071.z * cbModelParam._m0[1u].z;
    }
    float _2104 = (((_1124 * _1073) + _1125) * _1089) * ((cbModelParam._m0[1u].w * (_2087 - _1988)) + _1988);
    float _2106 = (((_1124 * _1075) + _1125) * _1089) * ((cbModelParam._m0[1u].w * (_2089 - _1990)) + _1990);
    float _2108 = (((_1124 * _1076) + _1125) * _1089) * ((cbModelParam._m0[1u].w * (_2091 - _1992)) + _1992);
    float _2111 = fma(_2108, cbSceneParam._m0[89u].z, fma(_2106, cbSceneParam._m0[89u].y, _2104 * cbSceneParam._m0[89u].x));
    float _2114 = fma(_2108, cbSceneParam._m0[90u].z, fma(_2106, cbSceneParam._m0[90u].y, _2104 * cbSceneParam._m0[90u].x));
    float _2117 = fma(_2108, cbSceneParam._m0[91u].z, fma(_2106, cbSceneParam._m0[91u].y, _2104 * cbSceneParam._m0[91u].x));
    uvec4 _2127 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2129 = _2127.x * 14u;
    uint _2130 = _2129 + 13u;
    float _2137 = _1089 + (-1.0);
    float _2142 = (cbLight._m0[_2130].x * _2137) + 1.0;
    float _2143 = (cbLight._m0[_2130].y * _2137) + 1.0;
    float _2144 = (cbLight._m0[_2130].z * _2137) + 1.0;
    float _2145 = (cbLight._m0[_2130].w * _2137) + 1.0;
    uint _2146 = _2129 + 5u;
    float _2152 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
    uint _2156 = _2129 + 4u;
    float _2162 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
    uint _2166 = _2129 | 1u;
    float _2177 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_924, _925, _926));
    float _2180 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_924, _925, _926));
    float _4354 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _4365 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2185 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * 0.3183098733425140380859375;
    float _2187 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * 0.3183098733425140380859375;
    float _2194 = ((cbLight._m0[_2146].x * _2152) * _2187) + ((cbLight._m0[_2156].x * _2162) * _2185);
    float _2195 = ((_2152 * cbLight._m0[_2146].y) * _2187) + ((_2162 * cbLight._m0[_2156].y) * _2185);
    float _2196 = ((_2152 * cbLight._m0[_2146].z) * _2187) + ((_2162 * cbLight._m0[_2156].z) * _2185);
    uvec4 _2200 = floatBitsToUint(cbLight._m0[_2129 + 12u]);
    bool _2202 = _2200.x == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2202)
    {
        _2213 = _2194;
        _2215 = _2195;
        _2217 = _2196;
    }
    else
    {
        uint _2221 = _2129 + 6u;
        float _2237 = (dot(vec3(cbLight._m0[_2129 + 2u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2238 = _2237 * _2237;
        float _4376 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2239 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2240 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2213 = (((cbLight._m0[_2221].x * 0.3183098733425140380859375) * _2239) * _2240) + _2194;
        _2215 = (((cbLight._m0[_2221].y * 0.3183098733425140380859375) * _2239) * _2240) + _2195;
        _2217 = (((cbLight._m0[_2221].z * 0.3183098733425140380859375) * _2239) * _2240) + _2196;
    }
    bool _2220 = _2200.y == 0u;
    float _2258;
    float _2260;
    float _2262;
    if (_2220)
    {
        _2258 = _2213;
        _2260 = _2215;
        _2262 = _2217;
    }
    else
    {
        uint _2428 = _2129 + 7u;
        float _2444 = (dot(vec3(cbLight._m0[_2129 + 3u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2445 = _2444 * _2444;
        float _4392 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2446 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2447 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
        _2258 = (((cbLight._m0[_2428].x * 0.3183098733425140380859375) * _2446) * _2447) + _2213;
        _2260 = (((cbLight._m0[_2428].y * 0.3183098733425140380859375) * _2446) * _2447) + _2215;
        _2262 = (((cbLight._m0[_2428].z * 0.3183098733425140380859375) * _2446) * _2447) + _2217;
    }
    uint _2265 = _2129 + 8u;
    float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _927) * 0.949999988079071044921875);
    float _2279 = _2278 * _2278;
    float _2280 = cbLight._m0[_2129].x + _1003;
    float _2281 = cbLight._m0[_2129].y + _1004;
    float _2282 = cbLight._m0[_2129].z + _1005;
    float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
    float _2287 = _2286 * _2280;
    float _2288 = _2286 * _2281;
    float _2289 = _2286 * _2282;
    float _2290 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2129].xyz));
    float _4408 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _4419 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _2294 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _2295 = dot(vec3(_924, _925, _926), vec3(_2287, _2288, _2289));
    float _4430 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2287, _2288, _2289));
    float _4441 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2279 * _2279;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2315 = exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0);
    float _2316 = 0.959999978542327880859375 - _1070;
    float _2318 = 0.959999978542327880859375 - _1071;
    float _2319 = 0.959999978542327880859375 - _1072;
    float _2326 = 1.0 - _2279;
    float _2337 = (0.5 / (((_2294 * ((_2293 * _2326) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2326) + _2279) * _2293))) * _2293;
    float _4452 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    uint _2350 = _2129 + 9u;
    float _2361 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _927) * 0.949999988079071044921875);
    float _2362 = _2361 * _2361;
    float _2363 = cbLight._m0[_2166].x + _1003;
    float _2364 = cbLight._m0[_2166].y + _1004;
    float _2365 = cbLight._m0[_2166].z + _1005;
    float _2369 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
    float _2370 = _2369 * _2363;
    float _2371 = _2369 * _2364;
    float _2372 = _2369 * _2365;
    float _2373 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2166].xyz));
    float _4463 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2377 = dot(vec3(_924, _925, _926), vec3(_2370, _2371, _2372));
    float _4474 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2381 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2370, _2371, _2372));
    float _4485 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2385 = _2362 * _2362;
    float _2389 = ((_2380 * _2380) * (_2385 + (-1.0))) + 1.0;
    float _2396 = exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0);
    float _2403 = 1.0 - _2362;
    float _2413 = (0.5 / (((_2294 * ((_2376 * _2403) + _2362)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2403) + _2362) * _2376))) * _2376;
    float _4496 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2415 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2385 / ((_2389 * _2389) * 3.141590118408203125));
    float _2425 = (((((_2396 * _2316) + _1073) * cbLight._m0[_2350].x) * _2415) * _2152) + (((((_2315 * _2316) + _1073) * cbLight._m0[_2265].x) * _2339) * _2162);
    float _2426 = (((((_2396 * _2318) + _1075) * cbLight._m0[_2350].y) * _2415) * _2152) + (((((_2315 * _2318) + _1075) * cbLight._m0[_2265].y) * _2339) * _2162);
    float _2427 = (((((_2396 * _2319) + _1076) * cbLight._m0[_2350].z) * _2415) * _2152) + (((((_2315 * _2319) + _1076) * cbLight._m0[_2265].z) * _2339) * _2162);
    float _2489;
    float _2491;
    float _2493;
    if (_2202)
    {
        _2489 = _2425;
        _2491 = _2426;
        _2493 = _2427;
    }
    else
    {
        uint _2495 = _2129 + 2u;
        uint _2499 = _2129 + 10u;
        float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2495].w)) * _927) * 0.949999988079071044921875);
        float _2514 = _2513 * _2513;
        float _2515 = cbLight._m0[_2495].x + _1003;
        float _2516 = cbLight._m0[_2495].y + _1004;
        float _2517 = cbLight._m0[_2495].z + _1005;
        float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
        float _2522 = _2521 * _2515;
        float _2523 = _2521 * _2516;
        float _2524 = _2521 * _2517;
        float _2525 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2495].xyz));
        float _4507 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2528 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2529 = dot(vec3(_924, _925, _926), vec3(_2522, _2523, _2524));
        float _4518 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2533 = dot(vec3(cbLight._m0[_2495].xyz), vec3(_2522, _2523, _2524));
        float _4529 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2537 = _2514 * _2514;
        float _2541 = ((_2532 * _2532) * (_2537 + (-1.0))) + 1.0;
        float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0);
        float _2555 = 1.0 - _2514;
        float _2565 = (0.5 / (((_2294 * ((_2528 * _2555) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2555) + _2514) * _2528))) * _2528;
        float _4540 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2567 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2537 / ((_2541 * _2541) * 3.141590118408203125));
        float _2568 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2489 = (((((_2548 * _2316) + _1073) * cbLight._m0[_2499].x) * _2567) * _2568) + _2425;
        _2491 = (((((_2548 * _2318) + _1075) * cbLight._m0[_2499].y) * _2567) * _2568) + _2426;
        _2493 = (((((_2548 * _2319) + _1076) * cbLight._m0[_2499].z) * _2567) * _2568) + _2427;
    }
    float _2603;
    float _2605;
    float _2607;
    if (_2220)
    {
        _2603 = _2489;
        _2605 = _2491;
        _2607 = _2493;
    }
    else
    {
        uint _2614 = _2129 + 3u;
        uint _2618 = _2129 + 11u;
        float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2614].w)) * _927) * 0.949999988079071044921875);
        float _2633 = _2632 * _2632;
        float _2634 = cbLight._m0[_2614].x + _1003;
        float _2635 = cbLight._m0[_2614].y + _1004;
        float _2636 = cbLight._m0[_2614].z + _1005;
        float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
        float _2641 = _2640 * _2634;
        float _2642 = _2640 * _2635;
        float _2643 = _2640 * _2636;
        float _2644 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2614].xyz));
        float _4556 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2648 = dot(vec3(_924, _925, _926), vec3(_2641, _2642, _2643));
        float _4567 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2652 = dot(vec3(cbLight._m0[_2614].xyz), vec3(_2641, _2642, _2643));
        float _4578 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2656 = _2633 * _2633;
        float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
        float _2667 = exp2(log2(1.0 - (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) * 5.0);
        float _2674 = 1.0 - _2633;
        float _2684 = (0.5 / (((_2294 * ((_2647 * _2674) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2674) + _2633) * _2647))) * _2647;
        float _4589 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2686 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
        float _2687 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
        _2603 = (((((_2667 * _2316) + _1073) * cbLight._m0[_2618].x) * _2686) * _2687) + _2489;
        _2605 = (((((_2667 * _2318) + _1075) * cbLight._m0[_2618].y) * _2686) * _2687) + _2491;
        _2607 = (((((_2667 * _2319) + _1076) * cbLight._m0[_2618].z) * _2686) * _2687) + _2493;
    }
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    if (_2127.y == 0u)
    {
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2762;
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2762;
        float _2765 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2762;
        uvec4 _2777 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2778 = _2777.x;
        uint _2789 = uint((float(_2777.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1012) / _2778))) + floor(float(uint(cbSceneParam._m0[85u].x * _1011) / _2778)));
        float _2799 = (log2(_2765 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2800 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        uint _2803 = uint(isnan(14.0) ? _2800 : (isnan(_2800) ? 14.0 : min(_2800, 14.0)));
        uvec4 _2808 = texelFetch(g_lightClusterGridBuffer, int(((_2803 << 2u) + (_2789 << 6u)) >> 2u));
        uint _2809 = _2808.x;
        uint _2810 = _2777.z;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        if (((((1u << ((_2810 >> 4u) & 15u)) + 4294967295u) & _2809) == 0u) || ((_2810 & 240u) == 0u))
        {
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
        }
        else
        {
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            uint _3061 = 0u;
            uint _3070;
            bool _3071;
            for (;;)
            {
                _3070 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3061 << 2u)) >> 2u)).x;
                _3071 = _3070 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3071)
                {
                    frontier_phi_61_pred = _3055;
                    frontier_phi_61_pred_1 = _3060;
                    frontier_phi_61_pred_2 = _3059;
                    frontier_phi_61_pred_3 = _3058;
                    frontier_phi_61_pred_4 = _3057;
                    frontier_phi_61_pred_5 = _3056;
                }
                else
                {
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    uint _3185;
                    _3179 = _3055;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3058;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3070;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    for (;;)
                    {
                        uint _3189 = uint(findLSB(_3185)) + (_3061 << 5u);
                        uint _3186 = (_3185 + 4294967295u) & _3185;
                        uint _3191 = _3189 * 48u;
                        vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3191)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 3u)).x));
                        uint _3211 = (_3189 * 48u) + 4u;
                        vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 3u)).x));
                        uint _3230 = (_3189 * 48u) + 8u;
                        vec3 _3241 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3230)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 2u)).x));
                        float _3245 = _3205.x - _2763;
                        float _3246 = _3205.y - _2764;
                        float _3247 = _3205.z - _2765;
                        float _3248 = dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247));
                        float _3251 = inversesqrt(_3248);
                        float _3252 = _3251 * _3245;
                        float _3253 = _3251 * _3246;
                        float _3254 = _3251 * _3247;
                        float _3255 = dot(vec3(_1030, _1033, _1036), vec3(_3252, _3253, _3254));
                        float _3260 = 1.0 - (_3248 * _3205.w);
                        float _4615 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3261 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3262 = sqrt(_3248) * _3224.w;
                        float _3265 = 1.39999997615814208984375 / (_3262 + 1.39999997615814208984375);
                        float _3266 = _3265 * _3265;
                        float _3269 = ((1.0 - _3266) * _3255) + _3266;
                        float _3272 = _3262 * _3262;
                        float _3276 = ((isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))) * _3261) / ((_3272 * 0.699999988079071044921875) + 1.0);
                        float _3280 = (-0.0) - _2763;
                        float _3281 = (-0.0) - _2764;
                        float _3282 = (-0.0) - _2765;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3287 = _3286 * _3280;
                        float _3288 = _3286 * _3281;
                        float _3289 = _3286 * _3282;
                        float _3297 = exp2(log2(1.0 / ((_3272 * 3.5) + 5.0)) * 0.25);
                        float _3298 = 1.0 - _1105;
                        float _3305 = sqrt(1.0 - ((1.0 - (_3298 * _3298)) * (1.0 - (_3297 * _3297))));
                        float _3306 = _3305 * _3305;
                        float _3307 = _3306 * _3306;
                        float _3308 = _3287 + _3252;
                        float _3309 = _3288 + _3253;
                        float _3310 = _3289 + _3254;
                        float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                        float _3318 = dot(vec3(_1030, _1033, _1036), vec3(_3287, _3288, _3289));
                        float _4631 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3321 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3322 = dot(vec3(_1030, _1033, _1036), vec3(_3314 * _3308, _3314 * _3309, _3314 * _3310));
                        float _4642 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3329 = ((_3325 * _3325) * (_3307 + (-1.0))) + 1.0;
                        float _3330 = _3265 * _3306;
                        float _3331 = _3330 * _3330;
                        float _3334 = ((1.0 - _3331) * _3255) + _3331;
                        float _4653 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3335 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3336 = 1.0 - _3306;
                        float _3346 = (0.5 / (((_3335 * ((_3321 * _3336) + _3306)) + 9.9999999392252902907785028219223e-09) + (((_3335 * _3336) + _3306) * _3321))) * _3335;
                        float _4664 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3357 = (((_3307 * 3.1415927410125732421875) * (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) / ((_3329 * _3329) * ((_3272 * 2.1991131305694580078125) + 3.141590118408203125))) * _3261;
                        _3114 = (_3276 * _3224.x) + _3182;
                        _3115 = (_3276 * _3224.y) + _3183;
                        _3116 = (_3276 * _3224.z) + _3184;
                        _3111 = (_3357 * _3241.x) + _3179;
                        _3112 = (_3357 * _3241.y) + _3180;
                        _3113 = (_3357 * _3241.z) + _3181;
                        if (_3186 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3179 = _3111;
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3114;
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3186;
                        }
                    }
                    frontier_phi_61_pred = _3111;
                    frontier_phi_61_pred_1 = _3116;
                    frontier_phi_61_pred_2 = _3115;
                    frontier_phi_61_pred_3 = _3114;
                    frontier_phi_61_pred_4 = _3113;
                    frontier_phi_61_pred_5 = _3112;
                }
                _2911 = frontier_phi_61_pred;
                _2921 = frontier_phi_61_pred_1;
                _2919 = frontier_phi_61_pred_2;
                _2917 = frontier_phi_61_pred_3;
                _2915 = frontier_phi_61_pred_4;
                _2913 = frontier_phi_61_pred_5;
                uint _3062 = _3061 + 1u;
                if (_3062 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3055 = _2911;
                    _3056 = _2913;
                    _3057 = _2915;
                    _3058 = _2917;
                    _3059 = _2919;
                    _3060 = _2921;
                    _3061 = _3062;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
        }
        uvec4 _2924 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2925 = _2924.z;
        uint _2927 = (_2925 >> 8u) & 15u;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        if (((4294967295u << _2927) & _2809) == 0u)
        {
            _3023 = _2910;
            _3025 = _2912;
            _3027 = _2914;
            _3029 = _2916;
            _3031 = _2918;
            _3033 = _2920;
        }
        else
        {
            float _3048 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
            float _3049 = _3048 * _2763;
            float _3050 = _3048 * _2764;
            float _3051 = _3048 * _2765;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2927 < ((_2925 >> 12u) & 15u))
            {
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3162 = _2910;
                float _3163 = _2912;
                float _3164 = _2914;
                float _3165 = _2916;
                float _3166 = _2918;
                float _3167 = _2920;
                uint _3168 = _2927;
                uint _3177;
                bool _3178;
                for (;;)
                {
                    _3177 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3168 << 2u)) >> 2u)).x;
                    _3178 = _3177 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3178)
                    {
                        frontier_phi_67_pred = _3165;
                        frontier_phi_67_pred_1 = _3166;
                        frontier_phi_67_pred_2 = _3167;
                        frontier_phi_67_pred_3 = _3164;
                        frontier_phi_67_pred_4 = _3163;
                        frontier_phi_67_pred_5 = _3162;
                    }
                    else
                    {
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3375 = _3162;
                        float _3376 = _3163;
                        float _3377 = _3164;
                        float _3378 = _3165;
                        float _3379 = _3166;
                        float _3380 = _3167;
                        uint _3381 = _3177;
                        uint _3382;
                        vec4 _3407;
                        float _3408;
                        vec4 _3423;
                        vec3 _3435;
                        vec4 _3450;
                        vec4 _3465;
                        float _3511;
                        bool _3512;
                        for (;;)
                        {
                            uint _3392 = ((_3168 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3381));
                            _3382 = (_3381 + 4294967295u) & _3381;
                            uint _3394 = _3392 * 40u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            _3408 = _3407.w;
                            uint _3410 = (_3392 * 40u) + 4u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3392 * 40u) + 8u;
                            _3435 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x));
                            uint _3437 = (_3392 * 40u) + 16u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3392 * 40u) + 20u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3392 * 40u) + 24u;
                            vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3486 = (_3392 * 40u) + 28u;
                            vec4 _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3511 = fma(_2765, _3499.z, fma(_2764, _3499.y, _3499.x * _2763)) + _3499.w;
                            _3512 = !((fma(_2765, _3480.z, fma(_2764, _3480.y, _3480.x * _2763)) + _3480.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3512)
                            {
                                float _3539 = _3407.x - _2763;
                                float _3540 = _3407.y - _2764;
                                float _3541 = _3407.z - _2765;
                                float _3542 = dot(vec3(_3539, _3540, _3541), vec3(_3539, _3540, _3541));
                                float _3545 = inversesqrt(_3542);
                                float _3546 = _3545 * _3539;
                                float _3547 = _3545 * _3540;
                                float _3548 = _3545 * _3541;
                                float _3552 = 1.0 - (_3542 / (_3408 * _3408));
                                float _4675 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3557 = sqrt(_3542) * _3423.w;
                                float _3559 = 1.39999997615814208984375 / (_3557 + 1.39999997615814208984375);
                                float _3560 = _3559 * _3559;
                                float _3563 = ((1.0 - _3560) * dot(vec3(_3546, _3547, _3548), vec3(_1030, _1033, _1036))) + _3560;
                                float _3566 = _3557 * _3557;
                                float _3570 = (fma(_2765, _3450.z, fma(_2764, _3450.y, _3450.x * _2763)) + _3450.w) / _3511;
                                float _3571 = (fma(_2765, _3465.z, fma(_2764, _3465.y, _3465.x * _2763)) + _3465.w) / _3511;
                                float _3575 = 1.0 - dot(vec2(_3570, _3571), vec2(_3570, _3571));
                                float _4691 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3577 = _3576 * (((isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0))) * _3553) / ((_3566 * 0.699999988079071044921875) + 1.0));
                                float _3589 = exp2(log2(1.0 / ((_3566 * 3.5) + 5.0)) * 0.25);
                                float _3590 = 1.0 - _1105;
                                float _3597 = sqrt(1.0 - ((1.0 - (_3590 * _3590)) * (1.0 - (_3589 * _3589))));
                                float _3598 = _3597 * _3597;
                                float _3599 = _3598 * _3598;
                                float _3600 = _3546 - _3049;
                                float _3601 = _3547 - _3050;
                                float _3602 = _3548 - _3051;
                                float _3606 = inversesqrt(dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602)));
                                float _3610 = dot(vec3(_1030, _1033, _1036), vec3((-0.0) - _3049, (-0.0) - _3050, (-0.0) - _3051));
                                float _4702 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3613 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3614 = dot(vec3(_1030, _1033, _1036), vec3(_3606 * _3600, _3606 * _3601, _3606 * _3602));
                                float _4713 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3621 = ((_3617 * _3617) * (_3599 + (-1.0))) + 1.0;
                                float _3622 = _3559 * _3598;
                                float _3623 = _3622 * _3622;
                                float _3629 = ((1.0 - _3623) * dot(vec3(_1030, _1033, _1036), vec3(_3546, _3547, _3548))) + _3623;
                                float _4724 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3630 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3631 = 1.0 - _3598;
                                float _3641 = (0.5 / (((_3630 * ((_3613 * _3631) + _3598)) + 9.9999999392252902907785028219223e-09) + (((_3630 * _3631) + _3598) * _3613))) * _3630;
                                float _4735 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3651 = (_3576 * _3553) * (((_3599 * 3.1415927410125732421875) * (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) / ((_3621 * _3621) * ((_3566 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3651 * _3435.x;
                                frontier_phi_73_pred_1 = _3651 * _3435.y;
                                frontier_phi_73_pred_2 = _3577 * _3423.z;
                                frontier_phi_73_pred_3 = _3577 * _3423.y;
                                frontier_phi_73_pred_4 = _3577 * _3423.x;
                                frontier_phi_73_pred_5 = _3651 * _3435.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3655 = frontier_phi_73_pred;
                            _3656 = frontier_phi_73_pred_1;
                            _3660 = frontier_phi_73_pred_2;
                            _3659 = frontier_phi_73_pred_3;
                            _3658 = frontier_phi_73_pred_4;
                            _3657 = frontier_phi_73_pred_5;
                            _3365 = _3658 + _3378;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3362 = _3655 + _3375;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            if (_3382 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3382;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3365;
                        frontier_phi_67_pred_1 = _3366;
                        frontier_phi_67_pred_2 = _3367;
                        frontier_phi_67_pred_3 = _3364;
                        frontier_phi_67_pred_4 = _3363;
                        frontier_phi_67_pred_5 = _3362;
                    }
                    _3030 = frontier_phi_67_pred;
                    _3032 = frontier_phi_67_pred_1;
                    _3034 = frontier_phi_67_pred_2;
                    _3028 = frontier_phi_67_pred_3;
                    _3026 = frontier_phi_67_pred_4;
                    _3024 = frontier_phi_67_pred_5;
                    uint _3169 = _3168 + 1u;
                    if (_3169 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3162 = _3024;
                        _3163 = _3026;
                        _3164 = _3028;
                        _3165 = _3030;
                        _3166 = _3032;
                        _3167 = _3034;
                        _3168 = _3169;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3032;
                frontier_phi_55_56_ladder_1 = _3034;
                frontier_phi_55_56_ladder_2 = _3030;
                frontier_phi_55_56_ladder_3 = _3028;
                frontier_phi_55_56_ladder_4 = _3026;
                frontier_phi_55_56_ladder_5 = _3024;
            }
            else
            {
                frontier_phi_55_56_ladder = _2918;
                frontier_phi_55_56_ladder_1 = _2920;
                frontier_phi_55_56_ladder_2 = _2916;
                frontier_phi_55_56_ladder_3 = _2914;
                frontier_phi_55_56_ladder_4 = _2912;
                frontier_phi_55_56_ladder_5 = _2910;
            }
            _3023 = frontier_phi_55_56_ladder_5;
            _3025 = frontier_phi_55_56_ladder_4;
            _3027 = frontier_phi_55_56_ladder_3;
            _3029 = frontier_phi_55_56_ladder_2;
            _3031 = frontier_phi_55_56_ladder;
            _3033 = frontier_phi_55_56_ladder_1;
        }
        float _3038 = isnan(1.0) ? _1089 : (isnan(_1089) ? 1.0 : min(_1089, 1.0));
        _2822 = (_3038 * _3029) + _2258;
        _2824 = (_3038 * _3031) + _2260;
        _2826 = (_3038 * _3033) + _2262;
        _2828 = ((_3023 * _1073) * _3038) + _2603;
        _2830 = ((_3025 * _1075) * _3038) + _2605;
        _2832 = ((_3027 * _1076) * _3038) + _2607;
    }
    else
    {
        _2822 = _2258;
        _2824 = _2260;
        _2826 = _2262;
        _2828 = _2603;
        _2830 = _2605;
        _2832 = _2607;
    }
    float _4751 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _4762 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _4773 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    uint _2852 = _261 + 6u;
    float _2860 = _1011 / cbSceneParam._m0[86u].x;
    float _2861 = _1012 / cbSceneParam._m0[86u].y;
    vec4 _2875 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2860, _2861, (log2((isnan(cbSceneParam._m0[77u].w) ? _946 : (isnan(_946) ? cbSceneParam._m0[77u].w : min(_946, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2877 = _2875.x;
    float _2878 = _2875.y;
    float _2879 = _2875.z;
    float _2880 = _2875.w;
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    if (_946 > cbSceneParam._m0[78u].w)
    {
        float _2935 = isnan(_946) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _946 : min(cbSceneParam._m0[80u].w, _946));
        float _2936 = _2935 / _946;
        float _2947 = _2936 * _996;
        float _2948 = _997 * _2936;
        float _2949 = (-0.0) - _2948;
        float _2951 = _2936 * _998;
        float _2953 = (cbSceneParam._m0[77u].w * _2949) / _2935;
        float _2954 = _2953 + cbSceneParam._m0[79u].w;
        float _2955 = cbSceneParam._m0[79u].w - _2948;
        float _2961 = sqrt(((_2947 * _2947) + (_2948 * _2948)) + (_2951 * _2951));
        float _2964 = (1.0 - (cbSceneParam._m0[77u].w / _2935)) * _2961;
        float _2969 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2971 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3124;
        if (abs((_2949 - _2953) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3124 = ((((_2954 > 0.0) ? exp2(_2969 * _2954) : (2.0 - exp2(_2971 * _2954))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2964;
        }
        else
        {
            float _3084 = 1.0 / cbSceneParam._m0[80u].x;
            float _3085 = isnan(_2955) ? _2954 : (isnan(_2954) ? _2955 : max(_2954, _2955));
            float _3086 = isnan(_2955) ? _2954 : (isnan(_2954) ? _2955 : min(_2954, _2955));
            float _3095 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : min(_3085, 0.0));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            _3124 = ((abs(_2961 / _2949) * cbSceneParam._m0[80u].y) * ((((_3095 - _3096) * 2.0) - ((exp2(_2969 * (isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0)))) - exp2(_2969 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))))) * _3084)) - ((exp2(_2971 * _3095) - exp2(_2971 * _3096)) * _3084))) + (_2964 * cbSceneParam._m0[80u].z);
        }
        vec4 _3126 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2860, _2861, 1.0), 0.0);
        float _3135 = exp2((_3124 * (-1.44269502162933349609375)) * (1.0 - _3126.w));
        float _3136 = log2(_3135);
        float _3152 = log2(_2880);
        _2973 = (exp2(_3152 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].x)) * _3126.x) / cbSceneParam._m0[78u].x)) + _2877;
        _2975 = (exp2(_3152 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].y)) * _3126.y) / cbSceneParam._m0[78u].y)) + _2878;
        _2977 = (exp2(_3152 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].z)) * _3126.z) / cbSceneParam._m0[78u].z)) + _2879;
        _2979 = _3135 * _2880;
    }
    else
    {
        _2973 = _2877;
        _2975 = _2878;
        _2977 = _2879;
        _2979 = _2880;
    }
    float _2991 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2992 = _2991 == 3.0;
    float _2993 = log2(_2979);
    float _3000 = exp2(_2993 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2822 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1089))) + ((_2828 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1896)) * cbPerFrame._m0[3u].x));
    float _3001 = exp2(_2993 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2824 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1089))) + ((_2830 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1896)) * cbPerFrame._m0[3u].x));
    float _3002 = exp2(_2993 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2826 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1089))) + ((_2832 + ((isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0))) * _1896)) * cbPerFrame._m0[3u].x));
    float _3011 = (_2991 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3011 * (_2992 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2973)));
    SV_Target.y = _3011 * (_2992 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2975)));
    SV_Target.z = _3011 * (_2992 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2977)));
    SV_Target.w = cbInstanceData._m0[_2852].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2852].w;
}


