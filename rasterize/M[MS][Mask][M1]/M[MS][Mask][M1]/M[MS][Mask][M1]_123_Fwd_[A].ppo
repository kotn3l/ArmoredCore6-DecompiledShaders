#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1588;
float _3966;
float _3967;
float _3968;
float _3969;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3978 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3989 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4000 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _348 = _343.x * cbMtdParam._m0[11u].x;
    float _349 = _343.y * cbMtdParam._m0[11u].y;
    float _350 = _343.z * cbMtdParam._m0[11u].z;
    vec4 _369 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _388.x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[23u].w) + _437) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4011 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _462 = (_455 * ((_369.x * cbMtdParam._m0[12u].x) - _348)) + _348;
    float _463 = (_455 * ((_369.y * cbMtdParam._m0[12u].y) - _349)) + _349;
    float _464 = (_455 * ((_369.z * cbMtdParam._m0[12u].z) - _350)) + _350;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _503 = _501.x;
    float _513 = dot(vec4(_503, _501.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _527 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _388.y) * 2.0) - ((((_503 - _513) * cbMtdParam._m0[23u].w) + _513) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4022 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _535 = (_528 * ((_481.x * cbMtdParam._m0[13u].x) - _462)) + _462;
    float _536 = (_528 * ((_481.y * cbMtdParam._m0[13u].y) - _463)) + _463;
    float _537 = (_528 * ((_481.z * cbMtdParam._m0[13u].z) - _464)) + _464;
    vec4 _556 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _305) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _306) + cbTextureTilingScale._m0[24u].w));
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _575 = _573.x;
    float _585 = dot(vec4(_575, _573.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _597 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _388.z) * 2.0) - ((((_575 - _585) * cbMtdParam._m0[23u].w) + _585) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4033 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _605 = (_598 * ((_556.x * cbMtdParam._m0[14u].x) - _535)) + _535;
    float _606 = (_598 * ((_556.y * cbMtdParam._m0[14u].y) - _536)) + _536;
    float _607 = (_598 * ((_556.z * cbMtdParam._m0[14u].z) - _537)) + _537;
    float _611 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _605;
    float _614 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _606;
    float _617 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _607;
    float _624 = ((_605 - _611) * (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) + _611;
    float _625 = ((_606 - _614) * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) + _614;
    float _626 = ((_607 - _617) * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) + _617;
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _687 = _685.x;
    float _688 = _685.y;
    float _689 = _685.z;
    float _696 = ((_668.x - _687) * _455) + _687;
    float _697 = ((_668.y - _688) * _455) + _688;
    float _698 = ((_668.z - _689) * _455) + _689;
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _721 = ((_710.x - _696) * _528) + _696;
    float _722 = ((_710.y - _697) * _528) + _697;
    float _723 = ((_710.z - _698) * _528) + _698;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _305) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _306) + cbTextureTilingScale._m0[23u].w));
    float _748 = ((_735.z - _723) * _598) + _723;
    float _751 = ((((_735.x - _721) * _598) + _721) * 2.0) + (-1.0);
    float _752 = ((((_735.y - _722) * _598) + _722) * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _4044 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _758 = sqrt(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))));
    vec4 _776 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _788 = (_751 + ((((_643.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_776.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _789 = (_752 + ((((_643.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_776.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _792 = fma(_758, _253, fma(_789, _260, _788 * _246));
    float _795 = fma(_758, _254, fma(_789, _261, _788 * _247));
    float _798 = fma(_758, _255, fma(_789, _262, _788 * _248));
    float _802 = inversesqrt(dot(vec3(_792, _795, _798), vec3(_792, _795, _798)));
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _305) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _306) + cbTextureTilingScale._m0[11u].w));
    float _831 = _829.x;
    float _832 = 1.0 - _831;
    float _840 = (cbMtdParam._m0[19u].x + dot(vec4(_802 * _792, _802 * _795, _802 * _798, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_831 - _832) * cbMtdParam._m0[24u].z) + _832) * cbMtdParam._m0[21u].z);
    float _4055 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _841 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _848 = (_841 * (cbMtdParam._m0[17u].x - _624)) + _624;
    float _849 = (_841 * (cbMtdParam._m0[17u].y - _625)) + _625;
    float _850 = (_841 * (cbMtdParam._m0[17u].z - _626)) + _626;
    vec4 _876 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _878 = _876.x;
    float _896 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w)).x - _878) * _455) + _878;
    float _913 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _305) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _306) + cbTextureTilingScale._m0[21u].w)).x - _896) * _528) + _896;
    float _931 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _305) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _306) + cbTextureTilingScale._m0[10u].w)).x - _913) * _598) + _913;
    float _935 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _931) * cbMtdParam._m0[19u].z) + _931;
    float _937 = _935 - (_935 * _841);
    float _942 = (((_643.z - _748) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _748;
    float _946 = ((_776.z - _942) * cbMtdParam._m0[19u].w) + _942;
    vec4 _959 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _305) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _306) + cbTextureTilingScale._m0[15u].w));
    float _966 = (_959.x * 2.0) + (-1.0);
    float _967 = (_959.y * 2.0) + (-1.0);
    float _968 = dot(vec2(_966, _967), vec2(_966, _967));
    float _4066 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _976 = ((_959.z - _946) * _841) + _946;
    float _986 = ((sqrt(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) - _758) * _841) + _758;
    float _989 = (((_966 - _788) * _841) + _788) + (cbMtdParam._m0[21u].x * _788);
    float _990 = (((_967 - _789) * _841) + _789) + (cbMtdParam._m0[21u].x * _789);
    float _994 = cbMtdParam._m0[22u].x + _776.w;
    float _997 = fma(_986, _253, fma(_990, _260, _989 * _246));
    float _1000 = fma(_986, _254, fma(_990, _261, _989 * _247));
    float _1003 = fma(_986, _255, fma(_990, _262, _989 * _248));
    float _1007 = inversesqrt(dot(vec3(_997, _1000, _1003), vec3(_997, _1000, _1003)));
    float _1008 = _1007 * _997;
    float _1009 = _1007 * _1000;
    float _1010 = _1007 * _1003;
    float _4077 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _1011 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _4099 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4110 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4121 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4132 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _1016 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _1030 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1080 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1070);
    float _1081 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1070);
    float _1082 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1070);
    float _1086 = inversesqrt(dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082)));
    float _1087 = _1080 * _1086;
    float _1088 = _1081 * _1086;
    float _1089 = _1082 * _1086;
    vec4 _1094 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1096 = _1094.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1268 = sqrt(((_1080 * _1080) + (_1081 * _1081)) + (_1082 * _1082));
        float _1274 = (cbMatDynParam._m0[5u].x * _1268) + cbMatDynParam._m0[5u].y;
        float _4143 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1279 = (cbMatDynParam._m0[5u].z * _1268) + cbMatDynParam._m0[5u].w;
        float _4154 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) - _1275)) + _1275) < ((_1096 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1107 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1108 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1126 = fma(_1010, cbSceneParam._m0[5u].z, fma(_1009, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1008));
    float _1129 = fma(_1010, cbSceneParam._m0[6u].z, fma(_1009, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1008));
    float _1132 = fma(_1010, cbSceneParam._m0[7u].z, fma(_1009, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1008));
    uint _1145 = _286 + 9u;
    uint _1146 = _1145 + uint(cbMatDynParam._m0[0u].w);
    float _1152 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * cbInstanceData._m0[_1146].x;
    float _1153 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * cbInstanceData._m0[_1146].y;
    float _1154 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * cbInstanceData._m0[_1146].z;
    float _4165 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _1155 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _4176 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _1156 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _1157 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _1158 = 1.0 - _1016;
    float _1159 = _1155 * _1158;
    float _1160 = _1156 * _1158;
    float _1161 = _1157 * _1158;
    float _1166 = (_1155 + (-0.039999999105930328369140625)) * _1016;
    float _1167 = (_1156 + (-0.039999999105930328369140625)) * _1016;
    float _1168 = (_1157 + (-0.039999999105930328369140625)) * _1016;
    float _1169 = _1166 + 0.039999999105930328369140625;
    float _1171 = _1167 + 0.039999999105930328369140625;
    float _1172 = _1168 + 0.039999999105930328369140625;
    vec4 _1181 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1107, cbSceneParam._m0[86u].y * _1108));
    float _1185 = ((isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * TEXCOORD_5.w) * _1181.x;
    float _1186 = dot(vec3(_1008, _1009, _1010), vec3(_1087, _1088, _1089));
    float _1189 = _1186 * 2.0;
    float _1193 = (_1189 * _1008) - _1087;
    float _1194 = (_1189 * _1009) - _1088;
    float _1195 = (_1189 * _1010) - _1089;
    float _1199 = abs(dot(vec3(_1087, _1088, _1089), vec3(_1008, _1009, _1010)));
    float _4198 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _1201 = sqrt(_1011);
    float _1214 = exp2((_1201 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1201 * 3.0));
    float _1220 = (1.0 - _1214) * ((_1201 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1221 = _1214 * _1201;
    float _1249 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1253 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1257 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1587;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1312 = fma(_1257, cbModelParam._m0[26u].z, fma(_1253, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1249));
        float _1316 = fma(_1257, cbModelParam._m0[27u].z, fma(_1253, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1249));
        float _1320 = fma(_1257, cbModelParam._m0[28u].z, fma(_1253, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1249));
        float _1345 = _1249 + _1008;
        float _1346 = _1253 + _1009;
        float _1347 = _1257 + _1010;
        float _1357 = fma(_1347, cbModelParam._m0[26u].z, fma(_1346, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1345)) - _1312;
        float _1358 = fma(_1347, cbModelParam._m0[27u].z, fma(_1346, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1345)) - _1316;
        float _1359 = fma(_1347, cbModelParam._m0[28u].z, fma(_1346, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1345)) - _1320;
        float _1363 = inversesqrt(dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359)));
        float _1376 = ((_1363 * _1357) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1312 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1363 * _1358) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1316 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1378 = ((_1363 * _1359) / cbModelParam._m0[34u].z) + ((((((_1320 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1376, _1377, _1378), 0.0);
        float _1415 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1381.x + (-0.5));
        float _1417 = _1415 * (_1381.y + (-0.5));
        float _1418 = _1415 * (_1381.z + (-0.5));
        float _1425 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1388.x + (-0.5));
        float _1427 = _1425 * (_1388.y + (-0.5));
        float _1428 = _1425 * (_1388.z + (-0.5));
        float _1435 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1395.x + (-0.5));
        float _1437 = _1435 * (_1395.y + (-0.5));
        float _1438 = _1435 * (_1395.z + (-0.5));
        float _1445 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1402.x + (-0.5));
        float _1447 = _1445 * (_1402.y + (-0.5));
        float _1448 = _1445 * (_1402.z + (-0.5));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = _1416 * 0.5;
        float _1453 = _1426 * 0.5;
        float _1454 = _1436 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1469 = (dot(vec3(_1008, _1009, _1010), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1479 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4246 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1481 + 1.0))) + _1486) * _1449;
        float _1496 = _1417 * 0.5;
        float _1497 = _1427 * 0.5;
        float _1498 = _1437 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_1008, _1009, _1010), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4279 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1523 + 1.0))) + _1528) * _1450;
        float _1538 = _1418 * 0.5;
        float _1539 = _1428 * 0.5;
        float _1540 = _1438 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_1008, _1009, _1010), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4312 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1565 + 1.0))) + _1570) * _1451;
        _1587 = _1418;
        _1589 = _1417;
        _1590 = _1416;
        _1591 = _1428;
        _1592 = _1427;
        _1593 = _1426;
        _1594 = _1438;
        _1595 = _1437;
        _1596 = _1436;
        _1597 = _1451;
        _1598 = _1450;
        _1599 = _1449;
        _1600 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1601 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1602 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
    }
    else
    {
        _1587 = _1588;
        _1589 = _1588;
        _1590 = _1588;
        _1591 = _1588;
        _1592 = _1588;
        _1593 = _1588;
        _1594 = _1588;
        _1595 = _1588;
        _1596 = _1588;
        _1597 = _1588;
        _1598 = _1588;
        _1599 = _1588;
        _1600 = 0.0;
        _1601 = 0.0;
        _1602 = 0.0;
    }
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1628 = fma(_1257, cbModelParam._m0[30u].z, fma(_1253, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1249));
        float _1632 = fma(_1257, cbModelParam._m0[31u].z, fma(_1253, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1249));
        float _1636 = fma(_1257, cbModelParam._m0[32u].z, fma(_1253, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1249));
        float _1659 = _1249 + _1008;
        float _1660 = _1253 + _1009;
        float _1661 = _1257 + _1010;
        float _1671 = fma(_1661, cbModelParam._m0[30u].z, fma(_1660, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1659)) - _1628;
        float _1672 = fma(_1661, cbModelParam._m0[31u].z, fma(_1660, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1659)) - _1632;
        float _1673 = fma(_1661, cbModelParam._m0[32u].z, fma(_1660, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1659)) - _1636;
        float _1677 = inversesqrt(dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673)));
        float _1690 = ((_1677 * _1671) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1628 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1691 = ((_1677 * _1672) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1632 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1692 = ((_1677 * _1673) / cbModelParam._m0[35u].z) + ((((((_1636 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1694 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1690, _1691, _1692), 0.0);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1690, _1691, _1692), 0.0);
        vec4 _1708 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1690, _1691, _1692), 0.0);
        vec4 _1715 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1690, _1691, _1692), 0.0);
        float _1727 = exp2((_1694.w + (-0.5)) * 20.0) * 2.0;
        float _1728 = _1727 * (_1694.x + (-0.5));
        float _1729 = _1727 * (_1694.y + (-0.5));
        float _1730 = _1727 * (_1694.z + (-0.5));
        float _1737 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1738 = _1737 * (_1701.x + (-0.5));
        float _1739 = _1737 * (_1701.y + (-0.5));
        float _1740 = _1737 * (_1701.z + (-0.5));
        float _1747 = exp2((_1708.w + (-0.5)) * 20.0) * 2.0;
        float _1748 = _1747 * (_1708.x + (-0.5));
        float _1749 = _1747 * (_1708.y + (-0.5));
        float _1750 = _1747 * (_1708.z + (-0.5));
        float _1757 = exp2((_1715.w + (-0.5)) * 20.0) * 2.0;
        float _1758 = _1757 * (_1715.x + (-0.5));
        float _1759 = _1757 * (_1715.y + (-0.5));
        float _1760 = _1757 * (_1715.z + (-0.5));
        float _1761 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1762 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1763 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1764 = _1728 * 0.5;
        float _1765 = _1738 * 0.5;
        float _1766 = _1748 * 0.5;
        float _1767 = dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766));
        float _1772 = (_1767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1767);
        float _1780 = (dot(vec3(_1008, _1009, _1010), vec3(_1772 * _1764, _1772 * _1765, _1772 * _1766)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766)) / (_1761 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1791 = _1790 * 2.0;
        float _1795 = (1.0 - _1790) / (_1790 + 1.0);
        float _4375 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1805 = ((((1.0 - _1796) * (_1791 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1791 + 1.0))) + _1796) * _1761;
        float _1806 = _1729 * 0.5;
        float _1807 = _1739 * 0.5;
        float _1808 = _1749 * 0.5;
        float _1809 = dot(vec3(_1806, _1807, _1808), vec3(_1806, _1807, _1808));
        float _1814 = (_1809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1809);
        float _1822 = (dot(vec3(_1008, _1009, _1010), vec3(_1814 * _1806, _1814 * _1807, _1814 * _1808)) + 1.0) * 0.5;
        float _4386 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1831 = sqrt(((_1807 * _1807) + (_1806 * _1806)) + (_1808 * _1808)) / (_1762 + 9.9999997473787516355514526367188e-06);
        float _4397 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1833 = _1832 * 2.0;
        float _1837 = (1.0 - _1832) / (_1832 + 1.0);
        float _4408 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1847 = ((((1.0 - _1838) * (_1833 + 2.0)) * exp2(log2(isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_1833 + 1.0))) + _1838) * _1762;
        float _1848 = _1730 * 0.5;
        float _1849 = _1740 * 0.5;
        float _1850 = _1750 * 0.5;
        float _1851 = dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850));
        float _1856 = (_1851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1851);
        float _1864 = (dot(vec3(_1008, _1009, _1010), vec3(_1856 * _1848, _1856 * _1849, _1856 * _1850)) + 1.0) * 0.5;
        float _4419 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1873 = sqrt(((_1849 * _1849) + (_1848 * _1848)) + (_1850 * _1850)) / (_1763 + 9.9999997473787516355514526367188e-06);
        float _4430 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1875 = _1874 * 2.0;
        float _1879 = (1.0 - _1874) / (_1874 + 1.0);
        float _4441 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1889 = ((((1.0 - _1880) * (_1875 + 2.0)) * exp2(log2(isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_1875 + 1.0))) + _1880) * _1763;
        _1897 = _1730;
        _1898 = _1729;
        _1899 = _1728;
        _1900 = _1740;
        _1901 = _1739;
        _1902 = _1738;
        _1903 = _1750;
        _1904 = _1749;
        _1905 = _1748;
        _1906 = _1763;
        _1907 = _1762;
        _1908 = _1761;
        _1909 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
        _1910 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)));
        _1911 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)));
    }
    else
    {
        _1897 = _1588;
        _1898 = _1588;
        _1899 = _1588;
        _1900 = _1588;
        _1901 = _1588;
        _1902 = _1588;
        _1903 = _1588;
        _1904 = _1588;
        _1905 = _1588;
        _1906 = _1588;
        _1907 = _1588;
        _1908 = _1588;
        _1909 = 0.0;
        _1910 = 0.0;
        _1911 = 0.0;
    }
    float _1921 = (cbModelParam._m0[1u].x * (_1909 - _1600)) + _1600;
    float _1922 = (cbModelParam._m0[1u].x * (_1910 - _1601)) + _1601;
    float _1923 = (cbModelParam._m0[1u].x * (_1911 - _1602)) + _1602;
    float _1944 = fma(_1923, cbSceneParam._m0[89u].z, fma(_1922, cbSceneParam._m0[89u].y, _1921 * cbSceneParam._m0[89u].x));
    float _1947 = fma(_1923, cbSceneParam._m0[90u].z, fma(_1922, cbSceneParam._m0[90u].y, _1921 * cbSceneParam._m0[90u].x));
    float _1950 = fma(_1923, cbSceneParam._m0[91u].z, fma(_1922, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1921));
    float _1965 = _1193 * 0.5;
    float _1966 = _1194 * 0.5;
    float _1967 = _1195 * 0.5;
    float _1968 = dot(vec4(_1965, _1966, _1967, 1.0), vec4(_1899, _1902, _1905, _1908));
    float _1971 = dot(vec4(_1965, _1966, _1967, 1.0), vec4(_1898, _1901, _1904, _1907));
    float _1974 = dot(vec4(_1965, _1966, _1967, 1.0), vec4(_1897, _1900, _1903, _1906));
    float _2008;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1981 = dot(vec4(_1965, _1966, _1967, 1.0), vec4(_1587, _1591, _1594, _1597));
        float _1985 = dot(vec4(_1965, _1966, _1967, 1.0), vec4(_1589, _1592, _1595, _1598));
        float _1989 = dot(vec4(_1965, _1966, _1967, 1.0), vec4(_1590, _1593, _1596, _1599));
        float _1996 = dot(vec4(cbModelParam._m0[39u]), vec4(_1965, _1966, _1967, 1.0));
        _2008 = dot(vec3(isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0)), isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)), isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1996) ? 0.0 : (isnan(0.0) ? _1996 : max(0.0, _1996))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2008 = 1.0;
    }
    float _2019;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2010 = dot(vec4(cbModelParam._m0[40u]), vec4(_1965, _1966, _1967, 1.0));
        _2019 = dot(vec3(isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0)), isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0)), isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2010) ? 0.0 : (isnan(0.0) ? _2010 : max(0.0, _2010))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2019 = 1.0;
    }
    float _2023 = (_2019 * cbModelParam._m0[1u].x) + (_2008 * (1.0 - cbModelParam._m0[1u].x));
    float _2033 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1011);
    float _2034 = isnan(_2033) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2033 : min(cbModelParam._m0[25u].z, _2033));
    float _2114;
    float _2116;
    float _2118;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2081 = fma(_1257, cbModelParam._m0[13u].z, fma(_1253, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1249)) + cbModelParam._m0[13u].w;
        float _2085 = fma(_1257, cbModelParam._m0[14u].z, fma(_1253, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1249)) + cbModelParam._m0[14u].w;
        float _2089 = fma(_1257, cbModelParam._m0[15u].z, fma(_1253, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1249)) + cbModelParam._m0[15u].w;
        float _2092 = fma(_1195, cbModelParam._m0[13u].z, fma(_1194, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1193));
        float _2095 = fma(_1195, cbModelParam._m0[14u].z, fma(_1194, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1193));
        float _2098 = fma(_1195, cbModelParam._m0[15u].z, fma(_1194, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1193));
        float _2126;
        if (_2092 > 0.0)
        {
            _2126 = abs((1.0 - _2081) / _2092);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2081 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2126 = frontier_phi_17_15_ladder;
        }
        float _2329;
        if (_2095 > 0.0)
        {
            _2329 = abs((1.0 - _2085) / _2095);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2085 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2329 = frontier_phi_26_22_ladder;
        }
        float _2583;
        if (_2098 > 0.0)
        {
            _2583 = abs((1.0 - _2089) / _2098);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2098 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2089 + 1.0) / _2098);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2583 = frontier_phi_38_33_ladder;
        }
        float _2585 = isnan(_2329) ? _2126 : (isnan(_2126) ? _2329 : min(_2126, _2329));
        float _2586 = isnan(_2583) ? _2585 : (isnan(_2585) ? _2583 : min(_2585, _2583));
        float _2590 = (_2586 * _2092) + _2081;
        float _2591 = (_2586 * _2095) + _2085;
        float _2592 = (_2586 * _2098) + _2089;
        float _2593 = _2586 * 9.9999997473787516355514526367188e-05;
        float _2595 = (-1.0) - _2593;
        float _2597 = _2593 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2592 > _2597) || ((_2592 < _2595) || ((_2591 > _2597) || ((_2591 < _2595) || ((_2590 < _2595) || (_2590 > _2597))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2592, cbModelParam._m0[9u].z, fma(_2591, cbModelParam._m0[9u].y, _2590 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2592, cbModelParam._m0[10u].z, fma(_2591, cbModelParam._m0[10u].y, _2590 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2592, cbModelParam._m0[11u].z, fma(_2591, cbModelParam._m0[11u].y, _2590 * cbModelParam._m0[11u].x))), _2034);
            frontier_phi_16_38_ladder = _2720.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2720.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2720.x * cbModelParam._m0[1u].y;
        }
        _2114 = frontier_phi_16_38_ladder_2;
        _2116 = frontier_phi_16_38_ladder_1;
        _2118 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2102 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1193, _1194, _1195), _2034);
        _2114 = _2102.x * cbModelParam._m0[1u].y;
        _2116 = _2102.y * cbModelParam._m0[1u].y;
        _2118 = _2102.z * cbModelParam._m0[1u].y;
    }
    float _2122 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1011);
    float _2123 = isnan(_2122) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2122 : min(cbModelParam._m0[25u].w, _2122));
    float _2213;
    float _2215;
    float _2217;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2177 = fma(_1257, cbModelParam._m0[21u].z, fma(_1253, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1249)) + cbModelParam._m0[21u].w;
        float _2181 = fma(_1257, cbModelParam._m0[22u].z, fma(_1253, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1249)) + cbModelParam._m0[22u].w;
        float _2185 = fma(_1257, cbModelParam._m0[23u].z, fma(_1253, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1249)) + cbModelParam._m0[23u].w;
        float _2188 = fma(_1195, cbModelParam._m0[21u].z, fma(_1194, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1193));
        float _2191 = fma(_1195, cbModelParam._m0[22u].z, fma(_1194, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1193));
        float _2194 = fma(_1195, cbModelParam._m0[23u].z, fma(_1194, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1193));
        float _2334;
        if (_2188 > 0.0)
        {
            _2334 = abs((1.0 - _2177) / _2188);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2188 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2177 + 1.0) / _2188);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2334 = frontier_phi_28_24_ladder;
        }
        float _2610;
        if (_2191 > 0.0)
        {
            _2610 = abs((1.0 - _2181) / _2191);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2191 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2181 + 1.0) / _2191);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2610 = frontier_phi_40_35_ladder;
        }
        float _2823;
        if (_2194 > 0.0)
        {
            _2823 = abs((1.0 - _2185) / _2194);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2194 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2185 + 1.0) / _2194);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2823 = frontier_phi_49_46_ladder;
        }
        float _2825 = isnan(_2610) ? _2334 : (isnan(_2334) ? _2610 : min(_2334, _2610));
        float _2826 = isnan(_2823) ? _2825 : (isnan(_2825) ? _2823 : min(_2825, _2823));
        float _2830 = (_2826 * _2188) + _2177;
        float _2831 = (_2826 * _2191) + _2181;
        float _2832 = (_2826 * _2194) + _2185;
        float _2833 = _2826 * 9.9999997473787516355514526367188e-05;
        float _2834 = (-1.0) - _2833;
        float _2836 = _2833 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2832 > _2836) || ((_2832 < _2834) || ((_2831 > _2836) || ((_2831 < _2834) || ((_2830 < _2834) || (_2830 > _2836))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3031 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2832, cbModelParam._m0[17u].z, fma(_2831, cbModelParam._m0[17u].y, _2830 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2832, cbModelParam._m0[18u].z, fma(_2831, cbModelParam._m0[18u].y, _2830 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2832, cbModelParam._m0[19u].z, fma(_2831, cbModelParam._m0[19u].y, _2830 * cbModelParam._m0[19u].x))), _2123);
            frontier_phi_25_49_ladder = _3031.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3031.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3031.x * cbModelParam._m0[1u].z;
        }
        _2213 = frontier_phi_25_49_ladder_2;
        _2215 = frontier_phi_25_49_ladder_1;
        _2217 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2197 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1193, _1194, _1195), _2123);
        _2213 = _2197.x * cbModelParam._m0[1u].z;
        _2215 = _2197.y * cbModelParam._m0[1u].z;
        _2217 = _2197.z * cbModelParam._m0[1u].z;
    }
    float _2230 = (((_1220 * _1169) + _1221) * _1185) * ((cbModelParam._m0[1u].w * (_2213 - _2114)) + _2114);
    float _2232 = (((_1220 * _1171) + _1221) * _1185) * ((cbModelParam._m0[1u].w * (_2215 - _2116)) + _2116);
    float _2234 = (((_1220 * _1172) + _1221) * _1185) * ((cbModelParam._m0[1u].w * (_2217 - _2118)) + _2118);
    float _2237 = fma(_2234, cbSceneParam._m0[89u].z, fma(_2232, cbSceneParam._m0[89u].y, _2230 * cbSceneParam._m0[89u].x));
    float _2240 = fma(_2234, cbSceneParam._m0[90u].z, fma(_2232, cbSceneParam._m0[90u].y, _2230 * cbSceneParam._m0[90u].x));
    float _2243 = fma(_2234, cbSceneParam._m0[91u].z, fma(_2232, cbSceneParam._m0[91u].y, _2230 * cbSceneParam._m0[91u].x));
    uvec4 _2253 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2255 = _2253.x * 14u;
    uint _2256 = _2255 + 13u;
    float _2263 = _1185 + (-1.0);
    float _2268 = (cbLight._m0[_2256].x * _2263) + 1.0;
    float _2269 = (cbLight._m0[_2256].y * _2263) + 1.0;
    float _2270 = (cbLight._m0[_2256].z * _2263) + 1.0;
    float _2271 = (cbLight._m0[_2256].w * _2263) + 1.0;
    uint _2272 = _2255 + 5u;
    float _2278 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
    uint _2282 = _2255 + 4u;
    float _2288 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
    uint _2292 = _2255 | 1u;
    float _2303 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_1008, _1009, _1010));
    float _2306 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_1008, _1009, _1010));
    float _4577 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _4588 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2311 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * 0.3183098733425140380859375;
    float _2313 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * 0.3183098733425140380859375;
    float _2320 = ((cbLight._m0[_2272].x * _2278) * _2313) + ((cbLight._m0[_2282].x * _2288) * _2311);
    float _2321 = ((_2278 * cbLight._m0[_2272].y) * _2313) + ((_2288 * cbLight._m0[_2282].y) * _2311);
    float _2322 = ((_2278 * cbLight._m0[_2272].z) * _2313) + ((_2288 * cbLight._m0[_2282].z) * _2311);
    uvec4 _2326 = floatBitsToUint(cbLight._m0[_2255 + 12u]);
    bool _2328 = _2326.x == 0u;
    float _2339;
    float _2341;
    float _2343;
    if (_2328)
    {
        _2339 = _2320;
        _2341 = _2321;
        _2343 = _2322;
    }
    else
    {
        uint _2347 = _2255 + 6u;
        float _2363 = (dot(vec3(cbLight._m0[_2255 + 2u].xyz), vec3(_1008, _1009, _1010)) * 0.5) + 0.5;
        float _2364 = _2363 * _2363;
        float _4599 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2365 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2366 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2339 = (((cbLight._m0[_2347].x * 0.3183098733425140380859375) * _2365) * _2366) + _2320;
        _2341 = (((cbLight._m0[_2347].y * 0.3183098733425140380859375) * _2365) * _2366) + _2321;
        _2343 = (((cbLight._m0[_2347].z * 0.3183098733425140380859375) * _2365) * _2366) + _2322;
    }
    bool _2346 = _2326.y == 0u;
    float _2384;
    float _2386;
    float _2388;
    if (_2346)
    {
        _2384 = _2339;
        _2386 = _2341;
        _2388 = _2343;
    }
    else
    {
        uint _2554 = _2255 + 7u;
        float _2570 = (dot(vec3(cbLight._m0[_2255 + 3u].xyz), vec3(_1008, _1009, _1010)) * 0.5) + 0.5;
        float _2571 = _2570 * _2570;
        float _4615 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2572 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2573 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
        _2384 = (((cbLight._m0[_2554].x * 0.3183098733425140380859375) * _2572) * _2573) + _2339;
        _2386 = (((cbLight._m0[_2554].y * 0.3183098733425140380859375) * _2572) * _2573) + _2341;
        _2388 = (((cbLight._m0[_2554].z * 0.3183098733425140380859375) * _2572) * _2573) + _2343;
    }
    uint _2391 = _2255 + 8u;
    float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2255].w)) * _1011) * 0.949999988079071044921875);
    float _2405 = _2404 * _2404;
    float _2406 = cbLight._m0[_2255].x + _1087;
    float _2407 = cbLight._m0[_2255].y + _1088;
    float _2408 = cbLight._m0[_2255].z + _1089;
    float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
    float _2413 = _2412 * _2406;
    float _2414 = _2412 * _2407;
    float _2415 = _2412 * _2408;
    float _2416 = dot(vec3(_1008, _1009, _1010), vec3(cbLight._m0[_2255].xyz));
    float _4631 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2419 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
    float _4642 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _2420 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _2421 = dot(vec3(_1008, _1009, _1010), vec3(_2413, _2414, _2415));
    float _4653 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _2425 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_2413, _2414, _2415));
    float _4664 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2429 = _2405 * _2405;
    float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
    float _2441 = exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0);
    float _2442 = 0.959999978542327880859375 - _1166;
    float _2444 = 0.959999978542327880859375 - _1167;
    float _2445 = 0.959999978542327880859375 - _1168;
    float _2452 = 1.0 - _2405;
    float _2463 = (0.5 / (((_2420 * ((_2419 * _2452) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2420 * _2452) + _2405) * _2419))) * _2419;
    float _4675 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2465 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
    uint _2476 = _2255 + 9u;
    float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _1011) * 0.949999988079071044921875);
    float _2488 = _2487 * _2487;
    float _2489 = cbLight._m0[_2292].x + _1087;
    float _2490 = cbLight._m0[_2292].y + _1088;
    float _2491 = cbLight._m0[_2292].z + _1089;
    float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
    float _2496 = _2495 * _2489;
    float _2497 = _2495 * _2490;
    float _2498 = _2495 * _2491;
    float _2499 = dot(vec3(_1008, _1009, _1010), vec3(cbLight._m0[_2292].xyz));
    float _4686 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
    float _2503 = dot(vec3(_1008, _1009, _1010), vec3(_2496, _2497, _2498));
    float _4697 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2506 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
    float _2507 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2496, _2497, _2498));
    float _4708 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2511 = _2488 * _2488;
    float _2515 = ((_2506 * _2506) * (_2511 + (-1.0))) + 1.0;
    float _2522 = exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0);
    float _2529 = 1.0 - _2488;
    float _2539 = (0.5 / (((_2420 * ((_2502 * _2529) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2420 * _2529) + _2488) * _2502))) * _2502;
    float _4719 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2541 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2511 / ((_2515 * _2515) * 3.141590118408203125));
    float _2551 = (((((_2522 * _2442) + _1169) * cbLight._m0[_2476].x) * _2541) * _2278) + (((((_2441 * _2442) + _1169) * cbLight._m0[_2391].x) * _2465) * _2288);
    float _2552 = (((((_2522 * _2444) + _1171) * cbLight._m0[_2476].y) * _2541) * _2278) + (((((_2441 * _2444) + _1171) * cbLight._m0[_2391].y) * _2465) * _2288);
    float _2553 = (((((_2522 * _2445) + _1172) * cbLight._m0[_2476].z) * _2541) * _2278) + (((((_2441 * _2445) + _1172) * cbLight._m0[_2391].z) * _2465) * _2288);
    float _2615;
    float _2617;
    float _2619;
    if (_2328)
    {
        _2615 = _2551;
        _2617 = _2552;
        _2619 = _2553;
    }
    else
    {
        uint _2621 = _2255 + 2u;
        uint _2625 = _2255 + 10u;
        float _2639 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2621].w)) * _1011) * 0.949999988079071044921875);
        float _2640 = _2639 * _2639;
        float _2641 = cbLight._m0[_2621].x + _1087;
        float _2642 = cbLight._m0[_2621].y + _1088;
        float _2643 = cbLight._m0[_2621].z + _1089;
        float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
        float _2648 = _2647 * _2641;
        float _2649 = _2647 * _2642;
        float _2650 = _2647 * _2643;
        float _2651 = dot(vec3(_1008, _1009, _1010), vec3(cbLight._m0[_2621].xyz));
        float _4730 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2655 = dot(vec3(_1008, _1009, _1010), vec3(_2648, _2649, _2650));
        float _4741 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2659 = dot(vec3(cbLight._m0[_2621].xyz), vec3(_2648, _2649, _2650));
        float _4752 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2663 = _2640 * _2640;
        float _2667 = ((_2658 * _2658) * (_2663 + (-1.0))) + 1.0;
        float _2674 = exp2(log2(1.0 - (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) * 5.0);
        float _2681 = 1.0 - _2640;
        float _2691 = (0.5 / (((_2420 * ((_2654 * _2681) + _2640)) + 9.9999999392252902907785028219223e-09) + (((_2420 * _2681) + _2640) * _2654))) * _2654;
        float _4763 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2693 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2663 / ((_2667 * _2667) * 3.141590118408203125));
        float _2694 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2615 = (((((_2674 * _2442) + _1169) * cbLight._m0[_2625].x) * _2693) * _2694) + _2551;
        _2617 = (((((_2674 * _2444) + _1171) * cbLight._m0[_2625].y) * _2693) * _2694) + _2552;
        _2619 = (((((_2674 * _2445) + _1172) * cbLight._m0[_2625].z) * _2693) * _2694) + _2553;
    }
    float _2729;
    float _2731;
    float _2733;
    if (_2346)
    {
        _2729 = _2615;
        _2731 = _2617;
        _2733 = _2619;
    }
    else
    {
        uint _2740 = _2255 + 3u;
        uint _2744 = _2255 + 11u;
        float _2758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2740].w)) * _1011) * 0.949999988079071044921875);
        float _2759 = _2758 * _2758;
        float _2760 = cbLight._m0[_2740].x + _1087;
        float _2761 = cbLight._m0[_2740].y + _1088;
        float _2762 = cbLight._m0[_2740].z + _1089;
        float _2766 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
        float _2767 = _2766 * _2760;
        float _2768 = _2766 * _2761;
        float _2769 = _2766 * _2762;
        float _2770 = dot(vec3(_1008, _1009, _1010), vec3(cbLight._m0[_2740].xyz));
        float _4779 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2773 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
        float _2774 = dot(vec3(_1008, _1009, _1010), vec3(_2767, _2768, _2769));
        float _4790 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2777 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2778 = dot(vec3(cbLight._m0[_2740].xyz), vec3(_2767, _2768, _2769));
        float _4801 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2782 = _2759 * _2759;
        float _2786 = ((_2777 * _2777) * (_2782 + (-1.0))) + 1.0;
        float _2793 = exp2(log2(1.0 - (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) * 5.0);
        float _2800 = 1.0 - _2759;
        float _2810 = (0.5 / (((_2420 * ((_2773 * _2800) + _2759)) + 9.9999999392252902907785028219223e-09) + (((_2420 * _2800) + _2759) * _2773))) * _2773;
        float _4812 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2812 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2782 / ((_2786 * _2786) * 3.141590118408203125));
        float _2813 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
        _2729 = (((((_2793 * _2442) + _1169) * cbLight._m0[_2744].x) * _2812) * _2813) + _2615;
        _2731 = (((((_2793 * _2444) + _1171) * cbLight._m0[_2744].y) * _2812) * _2813) + _2617;
        _2733 = (((((_2793 * _2445) + _1172) * cbLight._m0[_2744].z) * _2812) * _2813) + _2619;
    }
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    if (_2253.y == 0u)
    {
        float _2888 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2889 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2888;
        float _2890 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2888;
        float _2891 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2888;
        uvec4 _2903 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2904 = _2903.x;
        uint _2915 = uint((float(_2903.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1108) / _2904))) + floor(float(uint(cbSceneParam._m0[85u].x * _1107) / _2904)));
        float _2925 = (log2(_2891 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2926 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        uint _2929 = uint(isnan(14.0) ? _2926 : (isnan(_2926) ? 14.0 : min(_2926, 14.0)));
        uvec4 _2934 = texelFetch(g_lightClusterGridBuffer, int(((_2929 << 2u) + (_2915 << 6u)) >> 2u));
        uint _2935 = _2934.x;
        uint _2936 = _2903.z;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        if (((((1u << ((_2936 >> 4u) & 15u)) + 4294967295u) & _2935) == 0u) || ((_2936 & 240u) == 0u))
        {
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
        }
        else
        {
            float _3037;
            float _3039;
            float _3041;
            float _3043;
            float _3045;
            float _3047;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            uint _3195 = 0u;
            uint _3204;
            bool _3205;
            for (;;)
            {
                _3204 = texelFetch(g_lightClassification, int((((_2929 << 5u) + (_2915 << 9u)) + (_3195 << 2u)) >> 2u)).x;
                _3205 = _3204 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3205)
                {
                    frontier_phi_66_pred = _3189;
                    frontier_phi_66_pred_1 = _3194;
                    frontier_phi_66_pred_2 = _3193;
                    frontier_phi_66_pred_3 = _3192;
                    frontier_phi_66_pred_4 = _3191;
                    frontier_phi_66_pred_5 = _3190;
                }
                else
                {
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    uint _3340;
                    _3334 = _3189;
                    _3335 = _3190;
                    _3336 = _3191;
                    _3337 = _3192;
                    _3338 = _3193;
                    _3339 = _3194;
                    _3340 = _3204;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    for (;;)
                    {
                        uint _3344 = uint(findLSB(_3340)) + (_3195 << 5u);
                        uint _3341 = (_3340 + 4294967295u) & _3340;
                        uint _3346 = _3344 * 48u;
                        vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3346)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 3u)).x));
                        uint _3366 = (_3344 * 48u) + 4u;
                        vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3366)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 3u)).x));
                        uint _3385 = (_3344 * 48u) + 8u;
                        vec3 _3396 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3385)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 2u)).x));
                        float _3400 = _3360.x - _2889;
                        float _3401 = _3360.y - _2890;
                        float _3402 = _3360.z - _2891;
                        float _3403 = dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402));
                        float _3406 = inversesqrt(_3403);
                        float _3407 = _3406 * _3400;
                        float _3408 = _3406 * _3401;
                        float _3409 = _3406 * _3402;
                        float _3410 = dot(vec3(_1126, _1129, _1132), vec3(_3407, _3408, _3409));
                        float _3415 = 1.0 - (_3403 * _3360.w);
                        float _4838 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3416 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3417 = sqrt(_3403) * _3379.w;
                        float _3420 = 1.39999997615814208984375 / (_3417 + 1.39999997615814208984375);
                        float _3421 = _3420 * _3420;
                        float _3424 = ((1.0 - _3421) * _3410) + _3421;
                        float _3427 = _3417 * _3417;
                        float _3431 = ((isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0))) * _3416) / ((_3427 * 0.699999988079071044921875) + 1.0);
                        float _3435 = (-0.0) - _2889;
                        float _3436 = (-0.0) - _2890;
                        float _3437 = (-0.0) - _2891;
                        float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                        float _3442 = _3441 * _3435;
                        float _3443 = _3441 * _3436;
                        float _3444 = _3441 * _3437;
                        float _3452 = exp2(log2(1.0 / ((_3427 * 3.5) + 5.0)) * 0.25);
                        float _3453 = 1.0 - _1201;
                        float _3460 = sqrt(1.0 - ((1.0 - (_3453 * _3453)) * (1.0 - (_3452 * _3452))));
                        float _3461 = _3460 * _3460;
                        float _3462 = _3461 * _3461;
                        float _3463 = _3442 + _3407;
                        float _3464 = _3443 + _3408;
                        float _3465 = _3444 + _3409;
                        float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                        float _3473 = dot(vec3(_1126, _1129, _1132), vec3(_3442, _3443, _3444));
                        float _4854 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3476 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                        float _3477 = dot(vec3(_1126, _1129, _1132), vec3(_3469 * _3463, _3469 * _3464, _3469 * _3465));
                        float _4865 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3480 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                        float _3484 = ((_3480 * _3480) * (_3462 + (-1.0))) + 1.0;
                        float _3485 = _3420 * _3461;
                        float _3486 = _3485 * _3485;
                        float _3489 = ((1.0 - _3486) * _3410) + _3486;
                        float _4876 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3490 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                        float _3491 = 1.0 - _3461;
                        float _3501 = (0.5 / (((_3490 * ((_3476 * _3491) + _3461)) + 9.9999999392252902907785028219223e-09) + (((_3490 * _3491) + _3461) * _3476))) * _3490;
                        float _4887 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3512 = (((_3462 * 3.1415927410125732421875) * (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)))) / ((_3484 * _3484) * ((_3427 * 2.1991131305694580078125) + 3.141590118408203125))) * _3416;
                        _3264 = (_3431 * _3379.x) + _3337;
                        _3265 = (_3431 * _3379.y) + _3338;
                        _3266 = (_3431 * _3379.z) + _3339;
                        _3261 = (_3512 * _3396.x) + _3334;
                        _3262 = (_3512 * _3396.y) + _3335;
                        _3263 = (_3512 * _3396.z) + _3336;
                        if (_3341 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3334 = _3261;
                            _3335 = _3262;
                            _3336 = _3263;
                            _3337 = _3264;
                            _3338 = _3265;
                            _3339 = _3266;
                            _3340 = _3341;
                        }
                    }
                    frontier_phi_66_pred = _3261;
                    frontier_phi_66_pred_1 = _3266;
                    frontier_phi_66_pred_2 = _3265;
                    frontier_phi_66_pred_3 = _3264;
                    frontier_phi_66_pred_4 = _3263;
                    frontier_phi_66_pred_5 = _3262;
                }
                _3037 = frontier_phi_66_pred;
                _3047 = frontier_phi_66_pred_1;
                _3045 = frontier_phi_66_pred_2;
                _3043 = frontier_phi_66_pred_3;
                _3041 = frontier_phi_66_pred_4;
                _3039 = frontier_phi_66_pred_5;
                uint _3196 = _3195 + 1u;
                if (_3196 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3189 = _3037;
                    _3190 = _3039;
                    _3191 = _3041;
                    _3192 = _3043;
                    _3193 = _3045;
                    _3194 = _3047;
                    _3195 = _3196;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
        }
        uvec4 _3050 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3051 = _3050.z;
        uint _3053 = (_3051 >> 8u) & 15u;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        if (((4294967295u << _3053) & _2935) == 0u)
        {
            _3157 = _3036;
            _3159 = _3038;
            _3161 = _3040;
            _3163 = _3042;
            _3165 = _3044;
            _3167 = _3046;
        }
        else
        {
            float _3182 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
            float _3183 = _3182 * _2889;
            float _3184 = _3182 * _2890;
            float _3185 = _3182 * _2891;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3053 < ((_3051 >> 12u) & 15u))
            {
                float _3158;
                float _3160;
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3317 = _3036;
                float _3318 = _3038;
                float _3319 = _3040;
                float _3320 = _3042;
                float _3321 = _3044;
                float _3322 = _3046;
                uint _3323 = _3053;
                uint _3332;
                bool _3333;
                for (;;)
                {
                    _3332 = texelFetch(g_lightClassification, int((((_2929 << 5u) + (_2915 << 9u)) + (_3323 << 2u)) >> 2u)).x;
                    _3333 = _3332 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3333)
                    {
                        frontier_phi_77_pred = _3322;
                        frontier_phi_77_pred_1 = _3321;
                        frontier_phi_77_pred_2 = _3320;
                        frontier_phi_77_pred_3 = _3319;
                        frontier_phi_77_pred_4 = _3318;
                        frontier_phi_77_pred_5 = _3317;
                    }
                    else
                    {
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3819;
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3539 = _3317;
                        float _3540 = _3318;
                        float _3541 = _3319;
                        float _3542 = _3320;
                        float _3543 = _3321;
                        float _3544 = _3322;
                        uint _3545 = _3332;
                        uint _3546;
                        vec4 _3571;
                        float _3572;
                        vec4 _3587;
                        vec3 _3599;
                        vec4 _3614;
                        vec4 _3629;
                        float _3675;
                        bool _3676;
                        for (;;)
                        {
                            uint _3556 = ((_3323 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3545));
                            _3546 = (_3545 + 4294967295u) & _3545;
                            uint _3558 = _3556 * 40u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            _3572 = _3571.w;
                            uint _3574 = (_3556 * 40u) + 4u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3589 = (_3556 * 40u) + 8u;
                            _3599 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x));
                            uint _3601 = (_3556 * 40u) + 16u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3616 = (_3556 * 40u) + 20u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3556 * 40u) + 24u;
                            vec4 _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3650 = (_3556 * 40u) + 28u;
                            vec4 _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            _3675 = fma(_2891, _3663.z, fma(_2890, _3663.y, _3663.x * _2889)) + _3663.w;
                            _3676 = !((fma(_2891, _3644.z, fma(_2890, _3644.y, _3644.x * _2889)) + _3644.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3676)
                            {
                                float _3703 = _3571.x - _2889;
                                float _3704 = _3571.y - _2890;
                                float _3705 = _3571.z - _2891;
                                float _3706 = dot(vec3(_3703, _3704, _3705), vec3(_3703, _3704, _3705));
                                float _3709 = inversesqrt(_3706);
                                float _3710 = _3709 * _3703;
                                float _3711 = _3709 * _3704;
                                float _3712 = _3709 * _3705;
                                float _3716 = 1.0 - (_3706 / (_3572 * _3572));
                                float _4898 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3717 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3721 = sqrt(_3706) * _3587.w;
                                float _3723 = 1.39999997615814208984375 / (_3721 + 1.39999997615814208984375);
                                float _3724 = _3723 * _3723;
                                float _3727 = ((1.0 - _3724) * dot(vec3(_3710, _3711, _3712), vec3(_1126, _1129, _1132))) + _3724;
                                float _3730 = _3721 * _3721;
                                float _3734 = (fma(_2891, _3614.z, fma(_2890, _3614.y, _3614.x * _2889)) + _3614.w) / _3675;
                                float _3735 = (fma(_2891, _3629.z, fma(_2890, _3629.y, _3629.x * _2889)) + _3629.w) / _3675;
                                float _3739 = 1.0 - dot(vec2(_3734, _3735), vec2(_3734, _3735));
                                float _4914 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3740 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                                float _3741 = _3740 * (((isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0))) * _3717) / ((_3730 * 0.699999988079071044921875) + 1.0));
                                float _3753 = exp2(log2(1.0 / ((_3730 * 3.5) + 5.0)) * 0.25);
                                float _3754 = 1.0 - _1201;
                                float _3761 = sqrt(1.0 - ((1.0 - (_3754 * _3754)) * (1.0 - (_3753 * _3753))));
                                float _3762 = _3761 * _3761;
                                float _3763 = _3762 * _3762;
                                float _3764 = _3710 - _3183;
                                float _3765 = _3711 - _3184;
                                float _3766 = _3712 - _3185;
                                float _3770 = inversesqrt(dot(vec3(_3764, _3765, _3766), vec3(_3764, _3765, _3766)));
                                float _3774 = dot(vec3(_1126, _1129, _1132), vec3((-0.0) - _3183, (-0.0) - _3184, (-0.0) - _3185));
                                float _4925 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3777 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                                float _3778 = dot(vec3(_1126, _1129, _1132), vec3(_3770 * _3764, _3770 * _3765, _3770 * _3766));
                                float _4936 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3781 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                                float _3785 = ((_3781 * _3781) * (_3763 + (-1.0))) + 1.0;
                                float _3786 = _3723 * _3762;
                                float _3787 = _3786 * _3786;
                                float _3793 = ((1.0 - _3787) * dot(vec3(_1126, _1129, _1132), vec3(_3710, _3711, _3712))) + _3787;
                                float _4947 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3794 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3795 = 1.0 - _3762;
                                float _3805 = (0.5 / (((_3794 * ((_3777 * _3795) + _3762)) + 9.9999999392252902907785028219223e-09) + (((_3794 * _3795) + _3762) * _3777))) * _3794;
                                float _4958 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3815 = (_3740 * _3717) * (((_3763 * 3.1415927410125732421875) * (isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0)))) / ((_3785 * _3785) * ((_3730 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3741 * _3587.y;
                                frontier_phi_83_pred_1 = _3741 * _3587.x;
                                frontier_phi_83_pred_2 = _3815 * _3599.z;
                                frontier_phi_83_pred_3 = _3815 * _3599.y;
                                frontier_phi_83_pred_4 = _3815 * _3599.x;
                                frontier_phi_83_pred_5 = _3741 * _3587.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3823 = frontier_phi_83_pred;
                            _3822 = frontier_phi_83_pred_1;
                            _3821 = frontier_phi_83_pred_2;
                            _3820 = frontier_phi_83_pred_3;
                            _3819 = frontier_phi_83_pred_4;
                            _3824 = frontier_phi_83_pred_5;
                            _3529 = _3822 + _3542;
                            _3530 = _3823 + _3543;
                            _3531 = _3824 + _3544;
                            _3526 = _3819 + _3539;
                            _3527 = _3820 + _3540;
                            _3528 = _3821 + _3541;
                            if (_3546 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3539 = _3526;
                                _3540 = _3527;
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3546;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3531;
                        frontier_phi_77_pred_1 = _3530;
                        frontier_phi_77_pred_2 = _3529;
                        frontier_phi_77_pred_3 = _3528;
                        frontier_phi_77_pred_4 = _3527;
                        frontier_phi_77_pred_5 = _3526;
                    }
                    _3168 = frontier_phi_77_pred;
                    _3166 = frontier_phi_77_pred_1;
                    _3164 = frontier_phi_77_pred_2;
                    _3162 = frontier_phi_77_pred_3;
                    _3160 = frontier_phi_77_pred_4;
                    _3158 = frontier_phi_77_pred_5;
                    uint _3324 = _3323 + 1u;
                    if (_3324 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3317 = _3158;
                        _3318 = _3160;
                        _3319 = _3162;
                        _3320 = _3164;
                        _3321 = _3166;
                        _3322 = _3168;
                        _3323 = _3324;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3162;
                frontier_phi_58_59_ladder_1 = _3168;
                frontier_phi_58_59_ladder_2 = _3166;
                frontier_phi_58_59_ladder_3 = _3164;
                frontier_phi_58_59_ladder_4 = _3160;
                frontier_phi_58_59_ladder_5 = _3158;
            }
            else
            {
                frontier_phi_58_59_ladder = _3040;
                frontier_phi_58_59_ladder_1 = _3046;
                frontier_phi_58_59_ladder_2 = _3044;
                frontier_phi_58_59_ladder_3 = _3042;
                frontier_phi_58_59_ladder_4 = _3038;
                frontier_phi_58_59_ladder_5 = _3036;
            }
            _3157 = frontier_phi_58_59_ladder_5;
            _3159 = frontier_phi_58_59_ladder_4;
            _3161 = frontier_phi_58_59_ladder;
            _3163 = frontier_phi_58_59_ladder_3;
            _3165 = frontier_phi_58_59_ladder_2;
            _3167 = frontier_phi_58_59_ladder_1;
        }
        float _3172 = isnan(1.0) ? _1185 : (isnan(_1185) ? 1.0 : min(_1185, 1.0));
        _2948 = (_3172 * _3163) + _2384;
        _2950 = (_3172 * _3165) + _2386;
        _2952 = (_3172 * _3167) + _2388;
        _2954 = ((_3157 * _1169) * _3172) + _2729;
        _2956 = ((_3159 * _1171) * _3172) + _2731;
        _2958 = ((_3161 * _1172) * _3172) + _2733;
    }
    else
    {
        _2948 = _2384;
        _2950 = _2386;
        _2952 = _2388;
        _2954 = _2729;
        _2956 = _2731;
        _2958 = _2733;
    }
    float _4974 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _4985 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _4996 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _2975 = ((isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0))) * (_2948 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1185))) + ((_2954 + ((isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0))) * _2023)) * cbPerFrame._m0[3u].x);
    float _2976 = ((isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0))) * (_2950 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1185))) + ((_2956 + ((isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0))) * _2023)) * cbPerFrame._m0[3u].x);
    float _2977 = ((isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0))) * (_2952 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1185))) + ((_2958 + ((isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0))) * _2023)) * cbPerFrame._m0[3u].x);
    uint _2978 = _286 + 6u;
    float _2986 = _1107 / cbSceneParam._m0[86u].x;
    float _2987 = _1108 / cbSceneParam._m0[86u].y;
    vec4 _3001 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2986, _2987, (log2((isnan(cbSceneParam._m0[77u].w) ? _1030 : (isnan(_1030) ? cbSceneParam._m0[77u].w : min(_1030, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3003 = _3001.x;
    float _3004 = _3001.y;
    float _3005 = _3001.z;
    float _3006 = _3001.w;
    float _3099;
    float _3101;
    float _3103;
    float _3105;
    if (_1030 > cbSceneParam._m0[78u].w)
    {
        float _3061 = isnan(_1030) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1030 : min(cbSceneParam._m0[80u].w, _1030));
        float _3062 = _3061 / _1030;
        float _3073 = _3062 * _1080;
        float _3074 = _1081 * _3062;
        float _3075 = (-0.0) - _3074;
        float _3077 = _3062 * _1082;
        float _3079 = (cbSceneParam._m0[77u].w * _3075) / _3061;
        float _3080 = _3079 + cbSceneParam._m0[79u].w;
        float _3081 = cbSceneParam._m0[79u].w - _3074;
        float _3087 = sqrt(((_3073 * _3073) + (_3074 * _3074)) + (_3077 * _3077));
        float _3090 = (1.0 - (cbSceneParam._m0[77u].w / _3061)) * _3087;
        float _3095 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3097 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3274;
        if (abs((_3075 - _3079) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3274 = ((((_3080 > 0.0) ? exp2(_3095 * _3080) : (2.0 - exp2(_3097 * _3080))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3090;
        }
        else
        {
            float _3218 = 1.0 / cbSceneParam._m0[80u].x;
            float _3219 = isnan(_3081) ? _3080 : (isnan(_3080) ? _3081 : max(_3080, _3081));
            float _3220 = isnan(_3081) ? _3080 : (isnan(_3080) ? _3081 : min(_3080, _3081));
            float _3229 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : min(_3219, 0.0));
            float _3230 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : min(_3220, 0.0));
            _3274 = ((abs(_3087 / _3075) * cbSceneParam._m0[80u].y) * ((((_3229 - _3230) * 2.0) - ((exp2(_3095 * (isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0)))) - exp2(_3095 * (isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0))))) * _3218)) - ((exp2(_3097 * _3229) - exp2(_3097 * _3230)) * _3218))) + (_3090 * cbSceneParam._m0[80u].z);
        }
        vec4 _3276 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2986, _2987, 1.0), 0.0);
        float _3285 = exp2((_3274 * (-1.44269502162933349609375)) * (1.0 - _3276.w));
        float _3286 = log2(_3285);
        float _3302 = log2(_3006);
        _3099 = (exp2(_3302 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3286 * cbSceneParam._m0[78u].x)) * _3276.x) / cbSceneParam._m0[78u].x)) + _3003;
        _3101 = (exp2(_3302 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3286 * cbSceneParam._m0[78u].y)) * _3276.y) / cbSceneParam._m0[78u].y)) + _3004;
        _3103 = (exp2(_3302 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3286 * cbSceneParam._m0[78u].z)) * _3276.z) / cbSceneParam._m0[78u].z)) + _3005;
        _3105 = _3285 * _3006;
    }
    else
    {
        _3099 = _3003;
        _3101 = _3004;
        _3103 = _3005;
        _3105 = _3006;
    }
    bool _3312;
    vec4 _3115;
    vec4 _3137;
    float _3139;
    float _3143;
    float _3144;
    float _3145;
    float _3146;
    bool _3156;
    for (;;)
    {
        _3115 = cbMatDynParam._m0[0u];
        float _3117 = roundEven(_3115.y);
        bool _3118 = _3117 == 3.0;
        float _3119 = log2(_3105);
        float _3126 = exp2(_3119 * cbSceneParam._m0[78u].x) * _2975;
        float _3127 = exp2(_3119 * cbSceneParam._m0[78u].y) * _2976;
        float _3128 = exp2(_3119 * cbSceneParam._m0[78u].z) * _2977;
        float _3135 = _1096 + (-0.5);
        _3137 = cbMtdParam._m0[1u];
        _3139 = _3137.y * _3135;
        float _3142 = (_3117 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3143 = _3142 * (_3118 ? _3126 : (_3126 + (cbSceneParam._m0[72u].w * _3099)));
        _3144 = _3142 * (_3118 ? _3127 : (_3127 + (cbSceneParam._m0[72u].w * _3101)));
        _3145 = _3142 * (_3118 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3103)));
        _3146 = _3135 * 0.999000012874603271484375;
        _3156 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3156)
        {
            if ((cbInstanceData._m0[_286 + 7u].x + _3146) < 0.5)
            {
                _3312 = true;
                break;
            }
        }
        uint _3253 = _1145 + uint(_3115.w);
        if ((cbInstanceData._m0[_3253].w < 1.0) && ((cbInstanceData._m0[_3253].w + _3146) < 0.5))
        {
            _3312 = true;
            break;
        }
        if ((_3139 + 1.0) < _3137.x)
        {
            _3312 = true;
            break;
        }
        _3312 = false;
        break;
    }
    float _3517;
    if (_3312)
    {
        discard_state = true;
        _3517 = 0.0;
    }
    else
    {
        _3517 = cbInstanceData._m0[_2978].w;
    }
    SV_Target.x = _3143;
    SV_Target.y = _3144;
    SV_Target.z = _3145;
    SV_Target.w = _3517;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2978].w;
    discard_exit();
}


