#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1319;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3929 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3940 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3951 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _432 = _430.x;
    float _444 = dot(vec4(_432, _430.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _461 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_432 - _444) * cbMtdParam._m0[23u].w) + _444) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3962 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _472 = (_330.x * cbMtdParam._m0[9u].x) * ((_462 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361);
    float _473 = (_330.y * cbMtdParam._m0[9u].y) * ((_462 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362);
    float _474 = (_330.z * cbMtdParam._m0[9u].z) * ((_462 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363);
    float _478 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _472;
    float _481 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _473;
    float _484 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _474;
    float _492 = (((_472 - _478) * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) + _478) * 4.55000019073486328125;
    float _494 = (((_473 - _481) * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) + _481) * 4.55000019073486328125;
    float _496 = (((_474 - _484) * (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) + _484) * 4.55000019073486328125;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _539 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _556 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _558 = _556.x;
    float _559 = _556.y;
    float _560 = _556.z;
    float _569 = ((_539.z - _560) * _462) + _560;
    float _572 = ((((_539.x - _558) * _462) + _558) * 2.0) + (-1.0);
    float _573 = ((((_539.y - _559) * _462) + _559) * 2.0) + (-1.0);
    float _574 = dot(vec2(_572, _573), vec2(_572, _573));
    float _3973 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _579 = sqrt(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _622 = _620.x;
    float _623 = 1.0 - _622;
    float _639 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_622 - _623) * cbMtdParam._m0[24u].z) + _623) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3984 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _647 = (_640 * (cbMtdParam._m0[17u].x - _492)) + _492;
    float _648 = (_640 * (cbMtdParam._m0[17u].y - _494)) + _494;
    float _649 = (_640 * (cbMtdParam._m0[17u].z - _496)) + _496;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _677 = _675.x;
    float _694 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _677) * _462) + _677;
    float _698 = ((_661.x - _694) * cbMtdParam._m0[19u].z) + _694;
    float _700 = _698 - (_698 * _640);
    float _705 = (((_514.z - _569) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _569;
    float _709 = ((_595.z - _705) * cbMtdParam._m0[19u].w) + _705;
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _729 = (_722.x * 2.0) + (-1.0);
    float _730 = (_722.y * 2.0) + (-1.0);
    float _731 = dot(vec2(_729, _730), vec2(_729, _730));
    float _3995 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _739 = (_640 * (_722.z - _709)) + _709;
    float _748 = (_572 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_514.x * 2.0) + (-1.0)))) + (((_595.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _749 = (_573 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_514.y * 2.0) + (-1.0)))) + (((_595.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _761 = (((_729 - _748) + (cbMtdParam._m0[21u].x * _748)) * _640) + _748;
    float _762 = (((_730 - _749) + (cbMtdParam._m0[21u].x * _749)) * _640) + _749;
    float _763 = (_640 * (sqrt(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) - _579)) + _579;
    float _765 = cbMtdParam._m0[22u].x + _595.w;
    float _768 = fma(_763, _240 * NORMAL.x, fma(_762, _247 * TANGENT.x, (_233 * _225) * _761));
    float _771 = fma(_763, _240 * NORMAL.y, fma(_762, _247 * TANGENT.y, (_233 * _226) * _761));
    float _774 = fma(_763, _240 * NORMAL.z, fma(_762, _247 * TANGENT.z, (_233 * _227) * _761));
    float _778 = inversesqrt(dot(vec3(_768, _771, _774), vec3(_768, _771, _774)));
    float _779 = _778 * _768;
    float _780 = _778 * _771;
    float _781 = _778 * _774;
    float _4006 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _782 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4028 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4039 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4050 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4061 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _787 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _801 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _852 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _842);
    float _853 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _842);
    float _854 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _842);
    float _858 = inversesqrt(dot(vec3(_852, _853, _854), vec3(_852, _853, _854)));
    float _859 = _852 * _858;
    float _860 = _853 * _858;
    float _861 = _854 * _858;
    float _867 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _868 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _886 = fma(_781, cbSceneParam._m0[5u].z, fma(_780, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _779));
    float _889 = fma(_781, cbSceneParam._m0[6u].z, fma(_780, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _779));
    float _892 = fma(_781, cbSceneParam._m0[7u].z, fma(_780, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _779));
    uint _906 = (_274 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _912 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_906].x;
    float _913 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * cbInstanceData._m0[_906].y;
    float _914 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * cbInstanceData._m0[_906].z;
    float _4072 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _918 = 1.0 - _787;
    float _919 = _915 * _918;
    float _920 = _916 * _918;
    float _921 = _917 * _918;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _787;
    float _927 = (_916 + (-0.039999999105930328369140625)) * _787;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _787;
    float _929 = _926 + 0.039999999105930328369140625;
    float _931 = _927 + 0.039999999105930328369140625;
    float _932 = _928 + 0.039999999105930328369140625;
    vec4 _941 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _867, cbSceneParam._m0[86u].y * _868));
    float _945 = ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * TEXCOORD_5.w) * _941.x;
    float _946 = dot(vec3(_779, _780, _781), vec3(_859, _860, _861));
    float _949 = _946 * 2.0;
    float _953 = (_949 * _779) - _859;
    float _954 = (_949 * _780) - _860;
    float _955 = (_949 * _781) - _861;
    float _959 = abs(dot(vec3(_859, _860, _861), vec3(_779, _780, _781)));
    float _4105 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _961 = sqrt(_782);
    float _974 = exp2((_961 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_961 * 3.0));
    float _980 = (1.0 - _974) * ((_961 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _981 = _974 * _961;
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1318;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = fma(_1017, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009));
        float _1047 = fma(_1017, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009));
        float _1051 = fma(_1017, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009));
        float _1076 = _1009 + _779;
        float _1077 = _1013 + _780;
        float _1078 = _1017 + _781;
        float _1088 = fma(_1078, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076)) - _1043;
        float _1089 = fma(_1078, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076)) - _1047;
        float _1090 = fma(_1078, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076)) - _1051;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1043 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1047 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[34u].z) + ((((((_1051 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1146 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1112.x + (-0.5));
        float _1148 = _1146 * (_1112.y + (-0.5));
        float _1149 = _1146 * (_1112.z + (-0.5));
        float _1156 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1119.x + (-0.5));
        float _1158 = _1156 * (_1119.y + (-0.5));
        float _1159 = _1156 * (_1119.z + (-0.5));
        float _1166 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1126.x + (-0.5));
        float _1168 = _1166 * (_1126.y + (-0.5));
        float _1169 = _1166 * (_1126.z + (-0.5));
        float _1176 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1133.x + (-0.5));
        float _1178 = _1176 * (_1133.y + (-0.5));
        float _1179 = _1176 * (_1133.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1200 = (dot(vec3(_779, _780, _781), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1210 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4153 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1212 + 1.0))) + _1217) * _1180;
        float _1227 = _1148 * 0.5;
        float _1228 = _1158 * 0.5;
        float _1229 = _1168 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_779, _780, _781), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4186 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1254 + 1.0))) + _1259) * _1181;
        float _1269 = _1149 * 0.5;
        float _1270 = _1159 * 0.5;
        float _1271 = _1169 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_779, _780, _781), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4219 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1296 + 1.0))) + _1301) * _1182;
        _1318 = _1149;
        _1320 = _1148;
        _1321 = _1147;
        _1322 = _1159;
        _1323 = _1158;
        _1324 = _1157;
        _1325 = _1169;
        _1326 = _1168;
        _1327 = _1167;
        _1328 = _1182;
        _1329 = _1181;
        _1330 = _1180;
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1319;
        _1320 = _1319;
        _1321 = _1319;
        _1322 = _1319;
        _1323 = _1319;
        _1324 = _1319;
        _1325 = _1319;
        _1326 = _1319;
        _1327 = _1319;
        _1328 = _1319;
        _1329 = _1319;
        _1330 = _1319;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1358 = fma(_1017, cbModelParam._m0[30u].z, fma(_1013, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009));
        float _1362 = fma(_1017, cbModelParam._m0[31u].z, fma(_1013, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009));
        float _1366 = fma(_1017, cbModelParam._m0[32u].z, fma(_1013, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009));
        float _1389 = _1009 + _779;
        float _1390 = _1013 + _780;
        float _1391 = _1017 + _781;
        float _1401 = fma(_1391, cbModelParam._m0[30u].z, fma(_1390, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1389)) - _1358;
        float _1402 = fma(_1391, cbModelParam._m0[31u].z, fma(_1390, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1389)) - _1362;
        float _1403 = fma(_1391, cbModelParam._m0[32u].z, fma(_1390, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1389)) - _1366;
        float _1407 = inversesqrt(dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403)));
        float _1420 = ((_1407 * _1401) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1358 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1407 * _1402) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1362 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1407 * _1403) / cbModelParam._m0[35u].z) + ((((((_1366 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        float _1457 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1424.x + (-0.5));
        float _1459 = _1457 * (_1424.y + (-0.5));
        float _1460 = _1457 * (_1424.z + (-0.5));
        float _1467 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1431.x + (-0.5));
        float _1469 = _1467 * (_1431.y + (-0.5));
        float _1470 = _1467 * (_1431.z + (-0.5));
        float _1477 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1438.x + (-0.5));
        float _1479 = _1477 * (_1438.y + (-0.5));
        float _1480 = _1477 * (_1438.z + (-0.5));
        float _1487 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1445.x + (-0.5));
        float _1489 = _1487 * (_1445.y + (-0.5));
        float _1490 = _1487 * (_1445.z + (-0.5));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = _1458 * 0.5;
        float _1495 = _1468 * 0.5;
        float _1496 = _1478 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_779, _780, _781), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4282 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1521 + 1.0))) + _1526) * _1491;
        float _1536 = _1459 * 0.5;
        float _1537 = _1469 * 0.5;
        float _1538 = _1479 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_779, _780, _781), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4315 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1563 + 1.0))) + _1568) * _1492;
        float _1578 = _1460 * 0.5;
        float _1579 = _1470 * 0.5;
        float _1580 = _1480 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_779, _780, _781), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4348 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1605 + 1.0))) + _1610) * _1493;
        _1627 = _1460;
        _1628 = _1459;
        _1629 = _1458;
        _1630 = _1470;
        _1631 = _1469;
        _1632 = _1468;
        _1633 = _1480;
        _1634 = _1479;
        _1635 = _1478;
        _1636 = _1493;
        _1637 = _1492;
        _1638 = _1491;
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
    }
    else
    {
        _1627 = _1319;
        _1628 = _1319;
        _1629 = _1319;
        _1630 = _1319;
        _1631 = _1319;
        _1632 = _1319;
        _1633 = _1319;
        _1634 = _1319;
        _1635 = _1319;
        _1636 = _1319;
        _1637 = _1319;
        _1638 = _1319;
        _1639 = 0.0;
        _1640 = 0.0;
        _1641 = 0.0;
    }
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1331)) + _1331;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1332)) + _1332;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1333)) + _1333;
    float _1674 = fma(_1653, cbSceneParam._m0[89u].z, fma(_1652, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1653, cbSceneParam._m0[90u].z, fma(_1652, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1653, cbSceneParam._m0[91u].z, fma(_1652, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1651));
    float _1695 = _953 * 0.5;
    float _1696 = _954 * 0.5;
    float _1697 = _955 * 0.5;
    float _1698 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1701 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1704 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1738;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1711 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1318, _1322, _1325, _1328));
        float _1715 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1719 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1726 = dot(vec4(cbModelParam._m0[39u]), vec4(_1695, _1696, _1697, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1749;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1740 = dot(vec4(cbModelParam._m0[40u]), vec4(_1695, _1696, _1697, 1.0));
        _1749 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1749 = 1.0;
    }
    float _1753 = (_1749 * cbModelParam._m0[1u].x) + (_1738 * (1.0 - cbModelParam._m0[1u].x));
    float _1763 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _782);
    float _1764 = isnan(_1763) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1763 : min(cbModelParam._m0[25u].z, _1763));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1812 = fma(_1017, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009)) + cbModelParam._m0[13u].w;
        float _1816 = fma(_1017, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009)) + cbModelParam._m0[14u].w;
        float _1820 = fma(_1017, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009)) + cbModelParam._m0[15u].w;
        float _1823 = fma(_955, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953));
        float _1826 = fma(_955, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953));
        float _1829 = fma(_955, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953));
        float _1857;
        if (_1823 > 0.0)
        {
            _1857 = abs((1.0 - _1812) / _1823);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1812 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1857 = frontier_phi_14_12_ladder;
        }
        float _2029;
        if (_1826 > 0.0)
        {
            _2029 = abs((1.0 - _1816) / _1826);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1816 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2029 = frontier_phi_23_19_ladder;
        }
        float _2324;
        if (_1829 > 0.0)
        {
            _2324 = abs((1.0 - _1820) / _1829);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1820 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2324 = frontier_phi_35_30_ladder;
        }
        float _2326 = isnan(_2029) ? _1857 : (isnan(_1857) ? _2029 : min(_1857, _2029));
        float _2327 = isnan(_2324) ? _2326 : (isnan(_2326) ? _2324 : min(_2326, _2324));
        float _2331 = (_2327 * _1823) + _1812;
        float _2332 = (_2327 * _1826) + _1816;
        float _2333 = (_2327 * _1829) + _1820;
        float _2334 = _2327 * 9.9999997473787516355514526367188e-05;
        float _2336 = (-1.0) - _2334;
        float _2338 = _2334 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2333 > _2338) || ((_2333 < _2336) || ((_2332 > _2338) || ((_2332 < _2336) || ((_2331 < _2336) || (_2331 > _2338))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2478 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2333, cbModelParam._m0[9u].z, fma(_2332, cbModelParam._m0[9u].y, _2331 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2333, cbModelParam._m0[10u].z, fma(_2332, cbModelParam._m0[10u].y, _2331 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2333, cbModelParam._m0[11u].z, fma(_2332, cbModelParam._m0[11u].y, _2331 * cbModelParam._m0[11u].x))), _1764);
            frontier_phi_13_35_ladder = _2478.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2478.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2478.x * cbModelParam._m0[1u].y;
        }
        _1845 = frontier_phi_13_35_ladder_2;
        _1847 = frontier_phi_13_35_ladder_1;
        _1849 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_953, _954, _955), _1764);
        _1845 = _1833.x * cbModelParam._m0[1u].y;
        _1847 = _1833.y * cbModelParam._m0[1u].y;
        _1849 = _1833.z * cbModelParam._m0[1u].y;
    }
    float _1853 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _782);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1853 : min(cbModelParam._m0[25u].w, _1853));
    float _1944;
    float _1946;
    float _1948;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1908 = fma(_1017, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009)) + cbModelParam._m0[21u].w;
        float _1912 = fma(_1017, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009)) + cbModelParam._m0[22u].w;
        float _1916 = fma(_1017, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009)) + cbModelParam._m0[23u].w;
        float _1919 = fma(_955, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953));
        float _1922 = fma(_955, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953));
        float _1925 = fma(_955, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953));
        float _2034;
        if (_1919 > 0.0)
        {
            _2034 = abs((1.0 - _1908) / _1919);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1908 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2034 = frontier_phi_25_21_ladder;
        }
        float _2351;
        if (_1922 > 0.0)
        {
            _2351 = abs((1.0 - _1912) / _1922);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1912 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2351 = frontier_phi_37_32_ladder;
        }
        float _2689;
        if (_1925 > 0.0)
        {
            _2689 = abs((1.0 - _1916) / _1925);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1916 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2689 = frontier_phi_47_44_ladder;
        }
        float _2691 = isnan(_2351) ? _2034 : (isnan(_2034) ? _2351 : min(_2034, _2351));
        float _2692 = isnan(_2689) ? _2691 : (isnan(_2691) ? _2689 : min(_2691, _2689));
        float _2696 = (_2692 * _1919) + _1908;
        float _2697 = (_2692 * _1922) + _1912;
        float _2698 = (_2692 * _1925) + _1916;
        float _2699 = _2692 * 9.9999997473787516355514526367188e-05;
        float _2700 = (-1.0) - _2699;
        float _2702 = _2699 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2698 > _2702) || ((_2698 < _2700) || ((_2697 > _2702) || ((_2697 < _2700) || ((_2696 < _2700) || (_2696 > _2702))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2820 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2698, cbModelParam._m0[17u].z, fma(_2697, cbModelParam._m0[17u].y, _2696 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2698, cbModelParam._m0[18u].z, fma(_2697, cbModelParam._m0[18u].y, _2696 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2698, cbModelParam._m0[19u].z, fma(_2697, cbModelParam._m0[19u].y, _2696 * cbModelParam._m0[19u].x))), _1854);
            frontier_phi_22_47_ladder = _2820.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2820.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2820.x * cbModelParam._m0[1u].z;
        }
        _1944 = frontier_phi_22_47_ladder_2;
        _1946 = frontier_phi_22_47_ladder_1;
        _1948 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_953, _954, _955), _1854);
        _1944 = _1928.x * cbModelParam._m0[1u].z;
        _1946 = _1928.y * cbModelParam._m0[1u].z;
        _1948 = _1928.z * cbModelParam._m0[1u].z;
    }
    float _1961 = (((_980 * _929) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1944 - _1845)) + _1845);
    float _1963 = (((_980 * _931) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1946 - _1847)) + _1847);
    float _1965 = (((_980 * _932) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1948 - _1849)) + _1849);
    float _1968 = fma(_1965, cbSceneParam._m0[89u].z, fma(_1963, cbSceneParam._m0[89u].y, _1961 * cbSceneParam._m0[89u].x));
    float _1971 = fma(_1965, cbSceneParam._m0[90u].z, fma(_1963, cbSceneParam._m0[90u].y, _1961 * cbSceneParam._m0[90u].x));
    float _1974 = fma(_1965, cbSceneParam._m0[91u].z, fma(_1963, cbSceneParam._m0[91u].y, _1961 * cbSceneParam._m0[91u].x));
    float _2008 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2012 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2021 = _2008 / _2020;
    float _2022 = _2012 / _2020;
    float _2023 = _2016 / _2020;
    float _2170;
    float _2171;
    float _2172;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2050 = ((uint(_2023 > cbSceneParam._m0[59u].y) + uint(_2023 > cbSceneParam._m0[59u].x)) + uint(_2023 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2051 = _2050 + 43u;
        uint _2059 = _2050 + 44u;
        uint _2067 = _2050 + 45u;
        uint _2075 = _2050 + 46u;
        float _2086 = fma(_2020, cbSceneParam._m0[_2051].w, fma(_2016, cbSceneParam._m0[_2051].z, fma(_2012, cbSceneParam._m0[_2051].y, _2008 * cbSceneParam._m0[_2051].x)));
        float _2090 = fma(_2020, cbSceneParam._m0[_2059].w, fma(_2016, cbSceneParam._m0[_2059].z, fma(_2012, cbSceneParam._m0[_2059].y, _2008 * cbSceneParam._m0[_2059].x)));
        float _2098 = fma(_2020, cbSceneParam._m0[_2075].w, fma(_2016, cbSceneParam._m0[_2075].z, fma(_2012, cbSceneParam._m0[_2075].y, _2008 * cbSceneParam._m0[_2075].x)));
        float _2103 = cbSceneParam._m0[33u].z * _2098;
        float _2105 = cbSceneParam._m0[33u].w * _2098;
        float _2108 = fma(_2020, cbSceneParam._m0[_2067].w, fma(_2016, cbSceneParam._m0[_2067].z, fma(_2012, cbSceneParam._m0[_2067].y, _2008 * cbSceneParam._m0[_2067].x))) / _2098;
        float _2156 = (cbSceneParam._m0[33u].x - sqrt(((_2022 * _2022) + (_2021 * _2021)) + (_2023 * _2023))) * cbSceneParam._m0[33u].y;
        float _4474 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2163 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 + _2086) / _2098, (_2105 + _2090) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2105 + _2086) / _2098, (_2090 - _2103) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 - _2103) / _2098, (_2090 - _2105) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 - _2105) / _2098, (_2103 + _2090) / _2098), _2108), 0.0)).x), vec4(0.25)));
        _2170 = 1.0 - (_2163 * cbSceneParam._m0[34u].x);
        _2171 = 1.0 - (_2163 * cbSceneParam._m0[34u].y);
        _2172 = 1.0 - (_2163 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2170 = 1.0;
        _2171 = 1.0;
        _2172 = 1.0;
    }
    float _2236;
    float _2238;
    float _2240;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2224 = fma(_2020, cbSceneParam._m0[63u].w, fma(_2016, cbSceneParam._m0[63u].z, fma(_2012, cbSceneParam._m0[63u].y, _2008 * cbSceneParam._m0[63u].x)));
        float _2225 = fma(_2020, cbSceneParam._m0[60u].w, fma(_2016, cbSceneParam._m0[60u].z, fma(_2012, cbSceneParam._m0[60u].y, _2008 * cbSceneParam._m0[60u].x))) / _2224;
        float _2226 = fma(_2020, cbSceneParam._m0[61u].w, fma(_2016, cbSceneParam._m0[61u].z, fma(_2012, cbSceneParam._m0[61u].y, _2008 * cbSceneParam._m0[61u].x))) / _2224;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2225 >= cbSceneParam._m0[64u].x) && (_2226 >= cbSceneParam._m0[64u].y)) && (_2225 <= cbSceneParam._m0[64u].z)) && (_2226 <= cbSceneParam._m0[64u].w))
        {
            float _2364 = fma(_2020, cbSceneParam._m0[62u].w, fma(_2016, cbSceneParam._m0[62u].z, fma(_2012, cbSceneParam._m0[62u].y, _2008 * cbSceneParam._m0[62u].x))) / _2224;
            float _2368 = isnan(cbSceneParam._m0[41u].w) ? _2364 : (isnan(_2364) ? cbSceneParam._m0[41u].w : max(_2364, cbSceneParam._m0[41u].w));
            float _2411 = (cbSceneParam._m0[33u].x - sqrt(((_2022 * _2022) + (_2021 * _2021)) + (_2023 * _2023))) * cbSceneParam._m0[33u].y;
            float _4490 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
            float _2418 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2225, cbSceneParam._m0[33u].w + _2226), _2368), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2225, _2226 - cbSceneParam._m0[33u].z), _2368), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2225 - cbSceneParam._m0[33u].z, _2226 - cbSceneParam._m0[33u].w), _2368), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2225 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2226), _2368), 0.0)).x), vec4(0.25)));
            float _2422 = 1.0 - (_2418 * cbSceneParam._m0[34u].x);
            float _2423 = 1.0 - (_2418 * cbSceneParam._m0[34u].y);
            float _2424 = 1.0 - (_2418 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2424) ? _2172 : (isnan(_2172) ? _2424 : min(_2172, _2424));
            frontier_phi_34_33_ladder_1 = isnan(_2423) ? _2171 : (isnan(_2171) ? _2423 : min(_2171, _2423));
            frontier_phi_34_33_ladder_2 = isnan(_2422) ? _2170 : (isnan(_2170) ? _2422 : min(_2170, _2422));
        }
        else
        {
            frontier_phi_34_33_ladder = _2172;
            frontier_phi_34_33_ladder_1 = _2171;
            frontier_phi_34_33_ladder_2 = _2170;
        }
        _2236 = frontier_phi_34_33_ladder_2;
        _2238 = frontier_phi_34_33_ladder_1;
        _2240 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2236 = _2170;
        _2238 = _2171;
        _2240 = _2172;
    }
    uvec4 _2245 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2247 = _2245.x * 14u;
    uint _2248 = _2247 + 13u;
    float _2255 = _945 + (-1.0);
    float _2260 = (cbLight._m0[_2248].x * _2255) + 1.0;
    float _2261 = (cbLight._m0[_2248].y * _2255) + 1.0;
    float _2262 = (cbLight._m0[_2248].z * _2255) + 1.0;
    float _2263 = (cbLight._m0[_2248].w * _2255) + 1.0;
    uint _2264 = _2247 + 5u;
    float _2270 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
    uint _2274 = _2247 + 4u;
    float _2283 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
    uint _2287 = _2247 | 1u;
    float _2298 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_779, _780, _781));
    float _2301 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_779, _780, _781));
    float _4526 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _4537 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2306 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * 0.3183098733425140380859375;
    float _2308 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * 0.3183098733425140380859375;
    float _2315 = ((cbLight._m0[_2264].x * _2270) * _2308) + (((cbLight._m0[_2274].x * _2236) * _2283) * _2306);
    float _2316 = ((_2270 * cbLight._m0[_2264].y) * _2308) + (((cbLight._m0[_2274].y * _2238) * _2283) * _2306);
    float _2317 = ((_2270 * cbLight._m0[_2264].z) * _2308) + (((cbLight._m0[_2274].z * _2240) * _2283) * _2306);
    uvec4 _2321 = floatBitsToUint(cbLight._m0[_2247 + 12u]);
    bool _2323 = _2321.x == 0u;
    float _2425;
    float _2427;
    float _2429;
    if (_2323)
    {
        _2425 = _2315;
        _2427 = _2316;
        _2429 = _2317;
    }
    else
    {
        uint _2433 = _2247 + 6u;
        float _2449 = (dot(vec3(cbLight._m0[_2247 + 2u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2450 = _2449 * _2449;
        float _4548 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2451 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2452 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2425 = (((cbLight._m0[_2433].x * 0.3183098733425140380859375) * _2451) * _2452) + _2315;
        _2427 = (((cbLight._m0[_2433].y * 0.3183098733425140380859375) * _2451) * _2452) + _2316;
        _2429 = (((cbLight._m0[_2433].z * 0.3183098733425140380859375) * _2451) * _2452) + _2317;
    }
    bool _2432 = _2321.y == 0u;
    float _2487;
    float _2489;
    float _2491;
    if (_2432)
    {
        _2487 = _2425;
        _2489 = _2427;
        _2491 = _2429;
    }
    else
    {
        uint _2660 = _2247 + 7u;
        float _2676 = (dot(vec3(cbLight._m0[_2247 + 3u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2677 = _2676 * _2676;
        float _4564 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2678 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2679 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2487 = (((cbLight._m0[_2660].x * 0.3183098733425140380859375) * _2678) * _2679) + _2425;
        _2489 = (((cbLight._m0[_2660].y * 0.3183098733425140380859375) * _2678) * _2679) + _2427;
        _2491 = (((cbLight._m0[_2660].z * 0.3183098733425140380859375) * _2678) * _2679) + _2429;
    }
    uint _2494 = _2247 + 8u;
    float _2507 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _782) * 0.949999988079071044921875);
    float _2508 = _2507 * _2507;
    float _2509 = cbLight._m0[_2247].x + _859;
    float _2510 = cbLight._m0[_2247].y + _860;
    float _2511 = cbLight._m0[_2247].z + _861;
    float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
    float _2516 = _2515 * _2509;
    float _2517 = _2515 * _2510;
    float _2518 = _2515 * _2511;
    float _2519 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2247].xyz));
    float _4580 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _4591 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _2523 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2524 = dot(vec3(_779, _780, _781), vec3(_2516, _2517, _2518));
    float _4602 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2527 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2528 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2516, _2517, _2518));
    float _4613 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2532 = _2508 * _2508;
    float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
    float _2544 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
    float _2545 = 0.959999978542327880859375 - _926;
    float _2547 = 0.959999978542327880859375 - _927;
    float _2548 = 0.959999978542327880859375 - _928;
    float _2555 = 1.0 - _2508;
    float _2566 = (0.5 / (((_2523 * ((_2522 * _2555) + _2508)) + 9.9999999392252902907785028219223e-09) + (((_2523 * _2555) + _2508) * _2522))) * _2522;
    float _4624 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2568 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
    uint _2582 = _2247 + 9u;
    float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _782) * 0.949999988079071044921875);
    float _2594 = _2593 * _2593;
    float _2595 = cbLight._m0[_2287].x + _859;
    float _2596 = cbLight._m0[_2287].y + _860;
    float _2597 = cbLight._m0[_2287].z + _861;
    float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
    float _2602 = _2601 * _2595;
    float _2603 = _2601 * _2596;
    float _2604 = _2601 * _2597;
    float _2605 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2287].xyz));
    float _4635 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2608 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2609 = dot(vec3(_779, _780, _781), vec3(_2602, _2603, _2604));
    float _4646 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    float _2613 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2602, _2603, _2604));
    float _4657 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2617 = _2594 * _2594;
    float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
    float _2628 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
    float _2635 = 1.0 - _2594;
    float _2645 = (0.5 / (((_2523 * ((_2608 * _2635) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2523 * _2635) + _2594) * _2608))) * _2608;
    float _4668 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2647 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
    float _2657 = (((((_2628 * _2545) + _929) * cbLight._m0[_2582].x) * _2647) * _2270) + ((((cbLight._m0[_2494].x * _2236) * ((_2544 * _2545) + _929)) * _2568) * _2283);
    float _2658 = (((((_2628 * _2547) + _931) * cbLight._m0[_2582].y) * _2647) * _2270) + ((((cbLight._m0[_2494].y * _2238) * ((_2544 * _2547) + _931)) * _2568) * _2283);
    float _2659 = (((((_2628 * _2548) + _932) * cbLight._m0[_2582].z) * _2647) * _2270) + ((((cbLight._m0[_2494].z * _2240) * ((_2544 * _2548) + _932)) * _2568) * _2283);
    float _2715;
    float _2717;
    float _2719;
    if (_2323)
    {
        _2715 = _2657;
        _2717 = _2658;
        _2719 = _2659;
    }
    else
    {
        uint _2721 = _2247 + 2u;
        uint _2725 = _2247 + 10u;
        float _2739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2721].w)) * _782) * 0.949999988079071044921875);
        float _2740 = _2739 * _2739;
        float _2741 = cbLight._m0[_2721].x + _859;
        float _2742 = cbLight._m0[_2721].y + _860;
        float _2743 = cbLight._m0[_2721].z + _861;
        float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
        float _2748 = _2747 * _2741;
        float _2749 = _2747 * _2742;
        float _2750 = _2747 * _2743;
        float _2751 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2721].xyz));
        float _4679 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2754 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2755 = dot(vec3(_779, _780, _781), vec3(_2748, _2749, _2750));
        float _4690 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2759 = dot(vec3(cbLight._m0[_2721].xyz), vec3(_2748, _2749, _2750));
        float _4701 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2763 = _2740 * _2740;
        float _2767 = ((_2758 * _2758) * (_2763 + (-1.0))) + 1.0;
        float _2774 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
        float _2781 = 1.0 - _2740;
        float _2791 = (0.5 / (((_2523 * ((_2754 * _2781) + _2740)) + 9.9999999392252902907785028219223e-09) + (((_2523 * _2781) + _2740) * _2754))) * _2754;
        float _4712 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2793 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2763 / ((_2767 * _2767) * 3.141590118408203125));
        float _2794 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2715 = (((((_2774 * _2545) + _929) * cbLight._m0[_2725].x) * _2793) * _2794) + _2657;
        _2717 = (((((_2774 * _2547) + _931) * cbLight._m0[_2725].y) * _2793) * _2794) + _2658;
        _2719 = (((((_2774 * _2548) + _932) * cbLight._m0[_2725].z) * _2793) * _2794) + _2659;
    }
    float _2825;
    float _2827;
    float _2829;
    if (_2432)
    {
        _2825 = _2715;
        _2827 = _2717;
        _2829 = _2719;
    }
    else
    {
        uint _2836 = _2247 + 3u;
        uint _2840 = _2247 + 11u;
        float _2854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2836].w)) * _782) * 0.949999988079071044921875);
        float _2855 = _2854 * _2854;
        float _2856 = cbLight._m0[_2836].x + _859;
        float _2857 = cbLight._m0[_2836].y + _860;
        float _2858 = cbLight._m0[_2836].z + _861;
        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
        float _2863 = _2862 * _2856;
        float _2864 = _2862 * _2857;
        float _2865 = _2862 * _2858;
        float _2866 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2836].xyz));
        float _4728 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2869 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2870 = dot(vec3(_779, _780, _781), vec3(_2863, _2864, _2865));
        float _4739 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2874 = dot(vec3(cbLight._m0[_2836].xyz), vec3(_2863, _2864, _2865));
        float _4750 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2878 = _2855 * _2855;
        float _2882 = ((_2873 * _2873) * (_2878 + (-1.0))) + 1.0;
        float _2889 = exp2(log2(1.0 - (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) * 5.0);
        float _2896 = 1.0 - _2855;
        float _2906 = (0.5 / (((_2523 * ((_2869 * _2896) + _2855)) + 9.9999999392252902907785028219223e-09) + (((_2523 * _2896) + _2855) * _2869))) * _2869;
        float _4761 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2908 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2878 / ((_2882 * _2882) * 3.141590118408203125));
        float _2909 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2825 = (((((_2889 * _2545) + _929) * cbLight._m0[_2840].x) * _2908) * _2909) + _2715;
        _2827 = (((((_2889 * _2547) + _931) * cbLight._m0[_2840].y) * _2908) * _2909) + _2717;
        _2829 = (((((_2889 * _2548) + _932) * cbLight._m0[_2840].z) * _2908) * _2909) + _2719;
    }
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    if (_2245.y == 0u)
    {
        uvec4 _2930 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2931 = _2930.x;
        uint _2942 = uint((float(_2930.y) * floor(float(uint(cbSceneParam._m0[85u].y * _868) / _2931))) + floor(float(uint(cbSceneParam._m0[85u].x * _867) / _2931)));
        float _2952 = (log2(_2023 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2953 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        uint _2956 = uint(isnan(14.0) ? _2953 : (isnan(_2953) ? 14.0 : min(_2953, 14.0)));
        uvec4 _2961 = texelFetch(g_lightClusterGridBuffer, int(((_2956 << 2u) + (_2942 << 6u)) >> 2u));
        uint _2962 = _2961.x;
        uint _2963 = _2930.z;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        if (((((1u << ((_2963 >> 4u) & 15u)) + 4294967295u) & _2962) == 0u) || ((_2963 & 240u) == 0u))
        {
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
        }
        else
        {
            float _3043;
            float _3045;
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            float _3192 = 0.0;
            uint _3193 = 0u;
            uint _3202;
            bool _3203;
            for (;;)
            {
                _3202 = texelFetch(g_lightClassification, int((((_2956 << 5u) + (_2942 << 9u)) + (_3193 << 2u)) >> 2u)).x;
                _3203 = _3202 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3203)
                {
                    frontier_phi_66_pred = _3192;
                    frontier_phi_66_pred_1 = _3191;
                    frontier_phi_66_pred_2 = _3190;
                    frontier_phi_66_pred_3 = _3189;
                    frontier_phi_66_pred_4 = _3188;
                    frontier_phi_66_pred_5 = _3187;
                }
                else
                {
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    uint _3317;
                    _3311 = _3187;
                    _3312 = _3188;
                    _3313 = _3189;
                    _3314 = _3190;
                    _3315 = _3191;
                    _3316 = _3192;
                    _3317 = _3202;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    for (;;)
                    {
                        uint _3321 = uint(findLSB(_3317)) + (_3193 << 5u);
                        uint _3318 = (_3317 + 4294967295u) & _3317;
                        uint _3323 = _3321 * 48u;
                        vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 3u)).x));
                        uint _3343 = (_3321 * 48u) + 4u;
                        vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3343)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 3u)).x));
                        uint _3362 = (_3321 * 48u) + 8u;
                        vec3 _3373 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x));
                        float _3377 = _3337.x - _2021;
                        float _3378 = _3337.y - _2022;
                        float _3379 = _3337.z - _2023;
                        float _3380 = dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379));
                        float _3383 = inversesqrt(_3380);
                        float _3384 = _3383 * _3377;
                        float _3385 = _3383 * _3378;
                        float _3386 = _3383 * _3379;
                        float _3387 = dot(vec3(_886, _889, _892), vec3(_3384, _3385, _3386));
                        float _3392 = 1.0 - (_3380 * _3337.w);
                        float _4787 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3393 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3394 = sqrt(_3380) * _3356.w;
                        float _3397 = 1.39999997615814208984375 / (_3394 + 1.39999997615814208984375);
                        float _3398 = _3397 * _3397;
                        float _3401 = ((1.0 - _3398) * _3387) + _3398;
                        float _3404 = _3394 * _3394;
                        float _3408 = ((isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0))) * _3393) / ((_3404 * 0.699999988079071044921875) + 1.0);
                        float _3412 = (-0.0) - _2021;
                        float _3413 = (-0.0) - _2022;
                        float _3414 = (-0.0) - _2023;
                        float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                        float _3419 = _3418 * _3412;
                        float _3420 = _3418 * _3413;
                        float _3421 = _3418 * _3414;
                        float _3428 = exp2(log2(1.0 / ((_3404 * 3.5) + 5.0)) * 0.25);
                        float _3429 = 1.0 - _961;
                        float _3436 = sqrt(1.0 - ((1.0 - (_3429 * _3429)) * (1.0 - (_3428 * _3428))));
                        float _3437 = _3436 * _3436;
                        float _3438 = _3437 * _3437;
                        float _3439 = _3419 + _3384;
                        float _3440 = _3420 + _3385;
                        float _3441 = _3421 + _3386;
                        float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                        float _3449 = dot(vec3(_886, _889, _892), vec3(_3419, _3420, _3421));
                        float _4803 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3452 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3453 = dot(vec3(_886, _889, _892), vec3(_3445 * _3439, _3445 * _3440, _3445 * _3441));
                        float _4814 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3456 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3460 = ((_3456 * _3456) * (_3438 + (-1.0))) + 1.0;
                        float _3461 = _3397 * _3437;
                        float _3462 = _3461 * _3461;
                        float _3465 = ((1.0 - _3462) * _3387) + _3462;
                        float _4825 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3466 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                        float _3467 = 1.0 - _3437;
                        float _3477 = (0.5 / (((_3466 * ((_3452 * _3467) + _3437)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3437) * _3452))) * _3466;
                        float _4836 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3488 = (((_3438 * 3.1415927410125732421875) * (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) / ((_3460 * _3460) * ((_3404 * 2.1991131305694580078125) + 3.141590118408203125))) * _3393;
                        _3246 = (_3408 * _3356.x) + _3314;
                        _3247 = (_3408 * _3356.y) + _3315;
                        _3248 = (_3408 * _3356.z) + _3316;
                        _3243 = (_3488 * _3373.x) + _3311;
                        _3244 = (_3488 * _3373.y) + _3312;
                        _3245 = (_3488 * _3373.z) + _3313;
                        if (_3318 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3311 = _3243;
                            _3312 = _3244;
                            _3313 = _3245;
                            _3314 = _3246;
                            _3315 = _3247;
                            _3316 = _3248;
                            _3317 = _3318;
                        }
                    }
                    frontier_phi_66_pred = _3248;
                    frontier_phi_66_pred_1 = _3247;
                    frontier_phi_66_pred_2 = _3246;
                    frontier_phi_66_pred_3 = _3245;
                    frontier_phi_66_pred_4 = _3244;
                    frontier_phi_66_pred_5 = _3243;
                }
                _3053 = frontier_phi_66_pred;
                _3051 = frontier_phi_66_pred_1;
                _3049 = frontier_phi_66_pred_2;
                _3047 = frontier_phi_66_pred_3;
                _3045 = frontier_phi_66_pred_4;
                _3043 = frontier_phi_66_pred_5;
                uint _3194 = _3193 + 1u;
                if (_3194 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3187 = _3043;
                    _3188 = _3045;
                    _3189 = _3047;
                    _3190 = _3049;
                    _3191 = _3051;
                    _3192 = _3053;
                    _3193 = _3194;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
        }
        uvec4 _3056 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3057 = _3056.z;
        uint _3059 = (_3057 >> 8u) & 15u;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        if (((4294967295u << _3059) & _2962) == 0u)
        {
            _3155 = _3042;
            _3157 = _3044;
            _3159 = _3046;
            _3161 = _3048;
            _3163 = _3050;
            _3165 = _3052;
        }
        else
        {
            float _3180 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
            float _3181 = _3180 * _2021;
            float _3182 = _3180 * _2022;
            float _3183 = _3180 * _2023;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3059 < ((_3057 >> 12u) & 15u))
            {
                float _3156;
                float _3158;
                float _3160;
                float _3162;
                float _3164;
                float _3166;
                float _3294 = _3042;
                float _3295 = _3044;
                float _3296 = _3046;
                float _3297 = _3048;
                float _3298 = _3050;
                float _3299 = _3052;
                uint _3300 = _3059;
                uint _3309;
                bool _3310;
                for (;;)
                {
                    _3309 = texelFetch(g_lightClassification, int((((_2956 << 5u) + (_2942 << 9u)) + (_3300 << 2u)) >> 2u)).x;
                    _3310 = _3309 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3310)
                    {
                        frontier_phi_72_pred = _3299;
                        frontier_phi_72_pred_1 = _3298;
                        frontier_phi_72_pred_2 = _3297;
                        frontier_phi_72_pred_3 = _3296;
                        frontier_phi_72_pred_4 = _3295;
                        frontier_phi_72_pred_5 = _3294;
                    }
                    else
                    {
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3506 = _3294;
                        float _3507 = _3295;
                        float _3508 = _3296;
                        float _3509 = _3297;
                        float _3510 = _3298;
                        float _3511 = _3299;
                        uint _3512 = _3309;
                        uint _3513;
                        vec4 _3538;
                        float _3539;
                        vec4 _3554;
                        vec3 _3566;
                        vec4 _3581;
                        vec4 _3596;
                        float _3642;
                        bool _3643;
                        for (;;)
                        {
                            uint _3523 = ((_3300 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3512));
                            _3513 = (_3512 + 4294967295u) & _3512;
                            uint _3525 = _3523 * 40u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            _3539 = _3538.w;
                            uint _3541 = (_3523 * 40u) + 4u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3523 * 40u) + 8u;
                            _3566 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x));
                            uint _3568 = (_3523 * 40u) + 16u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3523 * 40u) + 20u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3523 * 40u) + 24u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3617 = (_3523 * 40u) + 28u;
                            vec4 _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            _3642 = fma(_2023, _3630.z, fma(_2022, _3630.y, _3630.x * _2021)) + _3630.w;
                            _3643 = !((fma(_2023, _3611.z, fma(_2022, _3611.y, _3611.x * _2021)) + _3611.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3643)
                            {
                                float _3670 = _3538.x - _2021;
                                float _3671 = _3538.y - _2022;
                                float _3672 = _3538.z - _2023;
                                float _3673 = dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672));
                                float _3676 = inversesqrt(_3673);
                                float _3677 = _3676 * _3670;
                                float _3678 = _3676 * _3671;
                                float _3679 = _3676 * _3672;
                                float _3683 = 1.0 - (_3673 / (_3539 * _3539));
                                float _4847 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3688 = sqrt(_3673) * _3554.w;
                                float _3690 = 1.39999997615814208984375 / (_3688 + 1.39999997615814208984375);
                                float _3691 = _3690 * _3690;
                                float _3694 = ((1.0 - _3691) * dot(vec3(_3677, _3678, _3679), vec3(_886, _889, _892))) + _3691;
                                float _3697 = _3688 * _3688;
                                float _3701 = (fma(_2023, _3581.z, fma(_2022, _3581.y, _3581.x * _2021)) + _3581.w) / _3642;
                                float _3702 = (fma(_2023, _3596.z, fma(_2022, _3596.y, _3596.x * _2021)) + _3596.w) / _3642;
                                float _3706 = 1.0 - dot(vec2(_3701, _3702), vec2(_3701, _3702));
                                float _4863 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3707 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3708 = _3707 * (((isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0))) * _3684) / ((_3697 * 0.699999988079071044921875) + 1.0));
                                float _3720 = exp2(log2(1.0 / ((_3697 * 3.5) + 5.0)) * 0.25);
                                float _3721 = 1.0 - _961;
                                float _3728 = sqrt(1.0 - ((1.0 - (_3721 * _3721)) * (1.0 - (_3720 * _3720))));
                                float _3729 = _3728 * _3728;
                                float _3730 = _3729 * _3729;
                                float _3731 = _3677 - _3181;
                                float _3732 = _3678 - _3182;
                                float _3733 = _3679 - _3183;
                                float _3737 = inversesqrt(dot(vec3(_3731, _3732, _3733), vec3(_3731, _3732, _3733)));
                                float _3741 = dot(vec3(_886, _889, _892), vec3((-0.0) - _3181, (-0.0) - _3182, (-0.0) - _3183));
                                float _4874 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3744 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3745 = dot(vec3(_886, _889, _892), vec3(_3737 * _3731, _3737 * _3732, _3737 * _3733));
                                float _4885 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3748 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3752 = ((_3748 * _3748) * (_3730 + (-1.0))) + 1.0;
                                float _3753 = _3690 * _3729;
                                float _3754 = _3753 * _3753;
                                float _3760 = ((1.0 - _3754) * dot(vec3(_886, _889, _892), vec3(_3677, _3678, _3679))) + _3754;
                                float _4896 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3761 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3762 = 1.0 - _3729;
                                float _3772 = (0.5 / (((_3761 * ((_3744 * _3762) + _3729)) + 9.9999999392252902907785028219223e-09) + (((_3761 * _3762) + _3729) * _3744))) * _3761;
                                float _4907 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3782 = (_3707 * _3684) * (((_3730 * 3.1415927410125732421875) * (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0)))) / ((_3752 * _3752) * ((_3697 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3708 * _3554.y;
                                frontier_phi_78_pred_1 = _3708 * _3554.x;
                                frontier_phi_78_pred_2 = _3782 * _3566.z;
                                frontier_phi_78_pred_3 = _3782 * _3566.y;
                                frontier_phi_78_pred_4 = _3782 * _3566.x;
                                frontier_phi_78_pred_5 = _3708 * _3554.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3790 = frontier_phi_78_pred;
                            _3789 = frontier_phi_78_pred_1;
                            _3788 = frontier_phi_78_pred_2;
                            _3787 = frontier_phi_78_pred_3;
                            _3786 = frontier_phi_78_pred_4;
                            _3791 = frontier_phi_78_pred_5;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            if (_3513 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3513;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3498;
                        frontier_phi_72_pred_1 = _3497;
                        frontier_phi_72_pred_2 = _3496;
                        frontier_phi_72_pred_3 = _3495;
                        frontier_phi_72_pred_4 = _3494;
                        frontier_phi_72_pred_5 = _3493;
                    }
                    _3166 = frontier_phi_72_pred;
                    _3164 = frontier_phi_72_pred_1;
                    _3162 = frontier_phi_72_pred_2;
                    _3160 = frontier_phi_72_pred_3;
                    _3158 = frontier_phi_72_pred_4;
                    _3156 = frontier_phi_72_pred_5;
                    uint _3301 = _3300 + 1u;
                    if (_3301 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3294 = _3156;
                        _3295 = _3158;
                        _3296 = _3160;
                        _3297 = _3162;
                        _3298 = _3164;
                        _3299 = _3166;
                        _3300 = _3301;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3166;
                frontier_phi_60_61_ladder_1 = _3164;
                frontier_phi_60_61_ladder_2 = _3160;
                frontier_phi_60_61_ladder_3 = _3158;
                frontier_phi_60_61_ladder_4 = _3156;
                frontier_phi_60_61_ladder_5 = _3162;
            }
            else
            {
                frontier_phi_60_61_ladder = _3052;
                frontier_phi_60_61_ladder_1 = _3050;
                frontier_phi_60_61_ladder_2 = _3046;
                frontier_phi_60_61_ladder_3 = _3044;
                frontier_phi_60_61_ladder_4 = _3042;
                frontier_phi_60_61_ladder_5 = _3048;
            }
            _3155 = frontier_phi_60_61_ladder_4;
            _3157 = frontier_phi_60_61_ladder_3;
            _3159 = frontier_phi_60_61_ladder_2;
            _3161 = frontier_phi_60_61_ladder_5;
            _3163 = frontier_phi_60_61_ladder_1;
            _3165 = frontier_phi_60_61_ladder;
        }
        float _3170 = isnan(1.0) ? _945 : (isnan(_945) ? 1.0 : min(_945, 1.0));
        _2975 = (_3170 * _3161) + _2487;
        _2977 = (_3170 * _3163) + _2489;
        _2979 = (_3170 * _3165) + _2491;
        _2981 = ((_3155 * _929) * _3170) + _2825;
        _2983 = ((_3157 * _931) * _3170) + _2827;
        _2985 = ((_3159 * _932) * _3170) + _2829;
    }
    else
    {
        _2975 = _2487;
        _2977 = _2489;
        _2979 = _2491;
        _2981 = _2825;
        _2983 = _2827;
        _2985 = _2829;
    }
    float _4923 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4934 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4945 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    uint _3005 = _274 + 6u;
    float _3013 = _867 / cbSceneParam._m0[86u].x;
    float _3014 = _868 / cbSceneParam._m0[86u].y;
    vec4 _3028 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3013, _3014, (log2((isnan(cbSceneParam._m0[77u].w) ? _801 : (isnan(_801) ? cbSceneParam._m0[77u].w : min(_801, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3030 = _3028.x;
    float _3031 = _3028.y;
    float _3032 = _3028.z;
    float _3033 = _3028.w;
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    if (_801 > cbSceneParam._m0[78u].w)
    {
        float _3067 = isnan(_801) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _801 : min(cbSceneParam._m0[80u].w, _801));
        float _3068 = _3067 / _801;
        float _3079 = _3068 * _852;
        float _3080 = _853 * _3068;
        float _3081 = (-0.0) - _3080;
        float _3083 = _3068 * _854;
        float _3085 = (cbSceneParam._m0[77u].w * _3081) / _3067;
        float _3086 = _3085 + cbSceneParam._m0[79u].w;
        float _3087 = cbSceneParam._m0[79u].w - _3080;
        float _3093 = sqrt(((_3079 * _3079) + (_3080 * _3080)) + (_3083 * _3083));
        float _3096 = (1.0 - (cbSceneParam._m0[77u].w / _3067)) * _3093;
        float _3101 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3103 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3256;
        if (abs((_3081 - _3085) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3256 = ((((_3086 > 0.0) ? exp2(_3101 * _3086) : (2.0 - exp2(_3103 * _3086))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3096;
        }
        else
        {
            float _3216 = 1.0 / cbSceneParam._m0[80u].x;
            float _3217 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : max(_3086, _3087));
            float _3218 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : min(_3086, _3087));
            float _3227 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : min(_3217, 0.0));
            float _3228 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : min(_3218, 0.0));
            _3256 = ((abs(_3093 / _3081) * cbSceneParam._m0[80u].y) * ((((_3227 - _3228) * 2.0) - ((exp2(_3101 * (isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0)))) - exp2(_3101 * (isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))))) * _3216)) - ((exp2(_3103 * _3227) - exp2(_3103 * _3228)) * _3216))) + (_3096 * cbSceneParam._m0[80u].z);
        }
        vec4 _3258 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3013, _3014, 1.0), 0.0);
        float _3267 = exp2((_3256 * (-1.44269502162933349609375)) * (1.0 - _3258.w));
        float _3268 = log2(_3267);
        float _3284 = log2(_3033);
        _3105 = (exp2(_3284 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3268 * cbSceneParam._m0[78u].x)) * _3258.x) / cbSceneParam._m0[78u].x)) + _3030;
        _3107 = (exp2(_3284 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3268 * cbSceneParam._m0[78u].y)) * _3258.y) / cbSceneParam._m0[78u].y)) + _3031;
        _3109 = (exp2(_3284 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3268 * cbSceneParam._m0[78u].z)) * _3258.z) / cbSceneParam._m0[78u].z)) + _3032;
        _3111 = _3267 * _3033;
    }
    else
    {
        _3105 = _3030;
        _3107 = _3031;
        _3109 = _3032;
        _3111 = _3033;
    }
    float _3123 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3124 = _3123 == 3.0;
    float _3125 = log2(_3111);
    float _3132 = exp2(_3125 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2975 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _945))) + ((_2981 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1753)) * cbPerFrame._m0[3u].x));
    float _3133 = exp2(_3125 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2977 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _945))) + ((_2983 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1753)) * cbPerFrame._m0[3u].x));
    float _3134 = exp2(_3125 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2979 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _945))) + ((_2985 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1753)) * cbPerFrame._m0[3u].x));
    float _3143 = (_3123 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3143 * (_3124 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3105)));
    SV_Target.y = _3143 * (_3124 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3107)));
    SV_Target.z = _3143 * (_3124 ? _3134 : (_3134 + (cbSceneParam._m0[72u].w * _3109)));
    SV_Target.w = cbInstanceData._m0[_3005].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3005].w;
}


