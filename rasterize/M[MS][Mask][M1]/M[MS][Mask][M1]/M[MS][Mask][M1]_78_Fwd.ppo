#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1550;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3875 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3886 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3897 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _421 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _435 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _452 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _389.x) * 2.0) - ((((_423 - _435) * cbMtdParam._m0[23u].w) + _435) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3908 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _460 = (_453 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _461 = (_453 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _462 = (_453 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _479 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _499 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _501 = _499.x;
    float _511 = dot(vec4(_501, _499.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _525 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _389.y) * 2.0) - ((((_501 - _511) * cbMtdParam._m0[23u].w) + _511) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3919 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _533 = (_526 * ((_479.x * cbMtdParam._m0[13u].x) - _460)) + _460;
    float _534 = (_526 * ((_479.y * cbMtdParam._m0[13u].y) - _461)) + _461;
    float _535 = (_526 * ((_479.z * cbMtdParam._m0[13u].z) - _462)) + _462;
    float _539 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _533;
    float _542 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _534;
    float _545 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _535;
    float _552 = ((_533 - _539) * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) + _539;
    float _553 = ((_534 - _542) * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) + _542;
    float _554 = ((_535 - _545) * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) + _545;
    vec4 _571 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _615 = _613.x;
    float _616 = _613.y;
    float _617 = _613.z;
    float _624 = ((_596.x - _615) * _453) + _615;
    float _625 = ((_596.y - _616) * _453) + _616;
    float _626 = ((_596.z - _617) * _453) + _617;
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _651 = ((_638.z - _626) * _526) + _626;
    float _654 = ((((_638.x - _624) * _526) + _624) * 2.0) + (-1.0);
    float _655 = ((((_638.y - _625) * _526) + _625) * 2.0) + (-1.0);
    float _656 = dot(vec2(_654, _655), vec2(_654, _655));
    float _3930 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _661 = sqrt(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _691 = (_654 + ((((_571.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_679.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _692 = (_655 + ((((_571.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_679.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _695 = fma(_661, _256, fma(_692, _263, _691 * _249));
    float _698 = fma(_661, _257, fma(_692, _264, _691 * _250));
    float _701 = fma(_661, _258, fma(_692, _265, _691 * _251));
    float _705 = inversesqrt(dot(vec3(_695, _698, _701), vec3(_695, _698, _701)));
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _734 = _732.x;
    float _735 = 1.0 - _734;
    float _744 = (cbMtdParam._m0[19u].x + dot(vec4(_705 * _695, _705 * _698, _705 * _701, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_734 - _735) * cbMtdParam._m0[24u].z) + _735) * cbMtdParam._m0[21u].z);
    float _3941 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _745 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _747 = (-0.0) - cbMtdParam._m0[24u].x;
    float _749 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _749 : (isnan(_749) ? 1.0 : min(_749, 1.0));
    float _757 = _745 - ((_745 * TEXCOORD_8.x) * _750);
    float _758 = _745 - ((_745 * TEXCOORD_8.y) * _750);
    float _759 = _745 - ((_745 * TEXCOORD_8.z) * _750);
    float _766 = (_757 * (cbMtdParam._m0[17u].x - _552)) + _552;
    float _767 = (_758 * (cbMtdParam._m0[17u].y - _553)) + _553;
    float _768 = (_759 * (cbMtdParam._m0[17u].z - _554)) + _554;
    vec4 _780 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _782 = _780.x;
    float _783 = 1.0 - _782;
    float _809 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_782 - _783) * cbMtdParam._m0[24u].w) + _783) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3962 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _810 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _818 = ((((cbMtdParam._m0[10u].x - _766) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _810) + _766;
    float _819 = ((((cbMtdParam._m0[10u].y - _767) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _810) + _767;
    float _820 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _768)) * _810) + _768;
    vec4 _846 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _848 = _846.x;
    float _866 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _848) * _453) + _848;
    float _883 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _306) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _307) + cbTextureTilingScale._m0[21u].w)).x - _866) * _526) + _866;
    float _887 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _883) * cbMtdParam._m0[19u].z) + _883;
    float _889 = _887 - (_887 * _757);
    float _891 = _889 - (_889 * _810);
    float _896 = (((_571.z - _651) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _651;
    float _900 = ((_679.z - _896) * cbMtdParam._m0[19u].w) + _896;
    vec4 _914 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _921 = (_914.x * 2.0) + (-1.0);
    float _922 = (_914.y * 2.0) + (-1.0);
    float _923 = dot(vec2(_921, _922), vec2(_921, _922));
    float _3973 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _931 = ((_914.z - _900) * _757) + _900;
    float _934 = ((cbMtdParam._m0[23u].x - _931) * _810) + _931;
    vec4 _955 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _961 = (_955.x * 2.0) + (-1.0);
    float _962 = (_955.y * 2.0) + (-1.0);
    float _963 = dot(vec2(_961, _962), vec2(_961, _962));
    float _3984 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _978 = ((sqrt(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) - _661) * _759) + _661;
    float _981 = (((_921 - _691) * _757) + _691) + (cbMtdParam._m0[21u].x * _691);
    float _982 = (((_922 - _692) * _758) + _692) + (cbMtdParam._m0[21u].x * _692);
    float _993 = (((_961 - _981) + (_981 * cbMtdParam._m0[22u].z)) * _810) + _981;
    float _994 = (((_962 - _982) + (_982 * cbMtdParam._m0[22u].z)) * _810) + _982;
    float _995 = (_810 * (sqrt(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) - _978)) + _978;
    float _997 = cbMtdParam._m0[22u].x + _679.w;
    float _1000 = fma(_995, _256, fma(_994, _263, _993 * _249));
    float _1003 = fma(_995, _257, fma(_994, _264, _993 * _250));
    float _1006 = fma(_995, _258, fma(_994, _265, _993 * _251));
    float _1010 = inversesqrt(dot(vec3(_1000, _1003, _1006), vec3(_1000, _1003, _1006)));
    float _1011 = _1010 * _1000;
    float _1012 = _1010 * _1003;
    float _1013 = _1010 * _1006;
    float _3995 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _1014 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4017 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4028 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4039 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4050 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _1019 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _1033 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1083 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1073);
    float _1084 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1073);
    float _1085 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1073);
    float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
    float _1090 = _1083 * _1089;
    float _1091 = _1084 * _1089;
    float _1092 = _1085 * _1089;
    float _1098 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1099 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1117 = fma(_1013, cbSceneParam._m0[5u].z, fma(_1012, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1011));
    float _1120 = fma(_1013, cbSceneParam._m0[6u].z, fma(_1012, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1011));
    float _1123 = fma(_1013, cbSceneParam._m0[7u].z, fma(_1012, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1011));
    uint _1137 = (_287 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1143 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_1137].x;
    float _1144 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_1137].y;
    float _1145 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * cbInstanceData._m0[_1137].z;
    float _4061 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _1146 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1147 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1148 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _1149 = 1.0 - _1019;
    float _1150 = _1146 * _1149;
    float _1151 = _1147 * _1149;
    float _1152 = _1148 * _1149;
    float _1157 = (_1146 + (-0.039999999105930328369140625)) * _1019;
    float _1158 = (_1147 + (-0.039999999105930328369140625)) * _1019;
    float _1159 = (_1148 + (-0.039999999105930328369140625)) * _1019;
    float _1160 = _1157 + 0.039999999105930328369140625;
    float _1162 = _1158 + 0.039999999105930328369140625;
    float _1163 = _1159 + 0.039999999105930328369140625;
    vec4 _1172 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1098, cbSceneParam._m0[86u].y * _1099));
    float _1176 = ((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * TEXCOORD_5.w) * _1172.x;
    float _1177 = dot(vec3(_1011, _1012, _1013), vec3(_1090, _1091, _1092));
    float _1180 = _1177 * 2.0;
    float _1184 = (_1180 * _1011) - _1090;
    float _1185 = (_1180 * _1012) - _1091;
    float _1186 = (_1180 * _1013) - _1092;
    float _1190 = abs(dot(vec3(_1090, _1091, _1092), vec3(_1011, _1012, _1013)));
    float _4094 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _1192 = sqrt(_1014);
    float _1205 = exp2((_1192 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1192 * 3.0));
    float _1211 = (1.0 - _1205) * ((_1192 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1212 = _1205 * _1192;
    float _1240 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1244 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1248 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1549;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1274 = fma(_1248, cbModelParam._m0[26u].z, fma(_1244, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1240));
        float _1278 = fma(_1248, cbModelParam._m0[27u].z, fma(_1244, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1240));
        float _1282 = fma(_1248, cbModelParam._m0[28u].z, fma(_1244, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1240));
        float _1307 = _1240 + _1011;
        float _1308 = _1244 + _1012;
        float _1309 = _1248 + _1013;
        float _1319 = fma(_1309, cbModelParam._m0[26u].z, fma(_1308, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1307)) - _1274;
        float _1320 = fma(_1309, cbModelParam._m0[27u].z, fma(_1308, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1307)) - _1278;
        float _1321 = fma(_1309, cbModelParam._m0[28u].z, fma(_1308, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1307)) - _1282;
        float _1325 = inversesqrt(dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321)));
        float _1338 = ((_1325 * _1319) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1274 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1325 * _1320) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1278 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1325 * _1321) / cbModelParam._m0[34u].z) + ((((((_1282 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        float _1377 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1343.x + (-0.5));
        float _1379 = _1377 * (_1343.y + (-0.5));
        float _1380 = _1377 * (_1343.z + (-0.5));
        float _1387 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1350.x + (-0.5));
        float _1389 = _1387 * (_1350.y + (-0.5));
        float _1390 = _1387 * (_1350.z + (-0.5));
        float _1397 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1357.x + (-0.5));
        float _1399 = _1397 * (_1357.y + (-0.5));
        float _1400 = _1397 * (_1357.z + (-0.5));
        float _1407 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1364.x + (-0.5));
        float _1409 = _1407 * (_1364.y + (-0.5));
        float _1410 = _1407 * (_1364.z + (-0.5));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = _1378 * 0.5;
        float _1415 = _1388 * 0.5;
        float _1416 = _1398 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1431 = (dot(vec3(_1011, _1012, _1013), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1441 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4142 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1443 + 1.0))) + _1448) * _1411;
        float _1458 = _1379 * 0.5;
        float _1459 = _1389 * 0.5;
        float _1460 = _1399 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_1011, _1012, _1013), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4175 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1485 + 1.0))) + _1490) * _1412;
        float _1500 = _1380 * 0.5;
        float _1501 = _1390 * 0.5;
        float _1502 = _1400 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_1011, _1012, _1013), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4208 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1527 + 1.0))) + _1532) * _1413;
        _1549 = _1380;
        _1551 = _1379;
        _1552 = _1378;
        _1553 = _1390;
        _1554 = _1389;
        _1555 = _1388;
        _1556 = _1400;
        _1557 = _1399;
        _1558 = _1398;
        _1559 = _1413;
        _1560 = _1412;
        _1561 = _1411;
        _1562 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1563 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1564 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
    }
    else
    {
        _1549 = _1550;
        _1551 = _1550;
        _1552 = _1550;
        _1553 = _1550;
        _1554 = _1550;
        _1555 = _1550;
        _1556 = _1550;
        _1557 = _1550;
        _1558 = _1550;
        _1559 = _1550;
        _1560 = _1550;
        _1561 = _1550;
        _1562 = 0.0;
        _1563 = 0.0;
        _1564 = 0.0;
    }
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1588 = fma(_1248, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1240));
        float _1592 = fma(_1248, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1240));
        float _1596 = fma(_1248, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1240));
        float _1619 = _1240 + _1011;
        float _1620 = _1244 + _1012;
        float _1621 = _1248 + _1013;
        float _1631 = fma(_1621, cbModelParam._m0[30u].z, fma(_1620, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1619)) - _1588;
        float _1632 = fma(_1621, cbModelParam._m0[31u].z, fma(_1620, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1619)) - _1592;
        float _1633 = fma(_1621, cbModelParam._m0[32u].z, fma(_1620, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1619)) - _1596;
        float _1637 = inversesqrt(dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633)));
        float _1650 = ((_1637 * _1631) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1588 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1651 = ((_1637 * _1632) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1592 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1652 = ((_1637 * _1633) / cbModelParam._m0[35u].z) + ((((((_1596 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1654 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1650, _1651, _1652), 0.0);
        vec4 _1661 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1650, _1651, _1652), 0.0);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1650, _1651, _1652), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1650, _1651, _1652), 0.0);
        float _1687 = exp2((_1654.w + (-0.5)) * 20.0) * 2.0;
        float _1688 = _1687 * (_1654.x + (-0.5));
        float _1689 = _1687 * (_1654.y + (-0.5));
        float _1690 = _1687 * (_1654.z + (-0.5));
        float _1697 = exp2((_1661.w + (-0.5)) * 20.0) * 2.0;
        float _1698 = _1697 * (_1661.x + (-0.5));
        float _1699 = _1697 * (_1661.y + (-0.5));
        float _1700 = _1697 * (_1661.z + (-0.5));
        float _1707 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1708 = _1707 * (_1668.x + (-0.5));
        float _1709 = _1707 * (_1668.y + (-0.5));
        float _1710 = _1707 * (_1668.z + (-0.5));
        float _1717 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1718 = _1717 * (_1675.x + (-0.5));
        float _1719 = _1717 * (_1675.y + (-0.5));
        float _1720 = _1717 * (_1675.z + (-0.5));
        float _1721 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1722 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1723 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1724 = _1688 * 0.5;
        float _1725 = _1698 * 0.5;
        float _1726 = _1708 * 0.5;
        float _1727 = dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726));
        float _1732 = (_1727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1727);
        float _1740 = (dot(vec3(_1011, _1012, _1013), vec3(_1732 * _1724, _1732 * _1725, _1732 * _1726)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1749 = sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726)) / (_1721 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1751 = _1750 * 2.0;
        float _1755 = (1.0 - _1750) / (_1750 + 1.0);
        float _4271 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1765 = ((((1.0 - _1756) * (_1751 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1751 + 1.0))) + _1756) * _1721;
        float _1766 = _1689 * 0.5;
        float _1767 = _1699 * 0.5;
        float _1768 = _1709 * 0.5;
        float _1769 = dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768));
        float _1774 = (_1769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1769);
        float _1782 = (dot(vec3(_1011, _1012, _1013), vec3(_1774 * _1766, _1774 * _1767, _1774 * _1768)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1791 = sqrt(((_1767 * _1767) + (_1766 * _1766)) + (_1768 * _1768)) / (_1722 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1793 = _1792 * 2.0;
        float _1797 = (1.0 - _1792) / (_1792 + 1.0);
        float _4304 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1807 = ((((1.0 - _1798) * (_1793 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1793 + 1.0))) + _1798) * _1722;
        float _1808 = _1690 * 0.5;
        float _1809 = _1700 * 0.5;
        float _1810 = _1710 * 0.5;
        float _1811 = dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810));
        float _1816 = (_1811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1811);
        float _1824 = (dot(vec3(_1011, _1012, _1013), vec3(_1816 * _1808, _1816 * _1809, _1816 * _1810)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1833 = sqrt(((_1809 * _1809) + (_1808 * _1808)) + (_1810 * _1810)) / (_1723 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1835 = _1834 * 2.0;
        float _1839 = (1.0 - _1834) / (_1834 + 1.0);
        float _4337 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1849 = ((((1.0 - _1840) * (_1835 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1835 + 1.0))) + _1840) * _1723;
        _1857 = _1690;
        _1858 = _1689;
        _1859 = _1688;
        _1860 = _1700;
        _1861 = _1699;
        _1862 = _1698;
        _1863 = _1710;
        _1864 = _1709;
        _1865 = _1708;
        _1866 = _1723;
        _1867 = _1722;
        _1868 = _1721;
        _1869 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)));
        _1870 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)));
        _1871 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)));
    }
    else
    {
        _1857 = _1550;
        _1858 = _1550;
        _1859 = _1550;
        _1860 = _1550;
        _1861 = _1550;
        _1862 = _1550;
        _1863 = _1550;
        _1864 = _1550;
        _1865 = _1550;
        _1866 = _1550;
        _1867 = _1550;
        _1868 = _1550;
        _1869 = 0.0;
        _1870 = 0.0;
        _1871 = 0.0;
    }
    float _1881 = (cbModelParam._m0[1u].x * (_1869 - _1562)) + _1562;
    float _1882 = (cbModelParam._m0[1u].x * (_1870 - _1563)) + _1563;
    float _1883 = (cbModelParam._m0[1u].x * (_1871 - _1564)) + _1564;
    float _1904 = fma(_1883, cbSceneParam._m0[89u].z, fma(_1882, cbSceneParam._m0[89u].y, _1881 * cbSceneParam._m0[89u].x));
    float _1907 = fma(_1883, cbSceneParam._m0[90u].z, fma(_1882, cbSceneParam._m0[90u].y, _1881 * cbSceneParam._m0[90u].x));
    float _1910 = fma(_1883, cbSceneParam._m0[91u].z, fma(_1882, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1881));
    float _1925 = _1184 * 0.5;
    float _1926 = _1185 * 0.5;
    float _1927 = _1186 * 0.5;
    float _1928 = dot(vec4(_1925, _1926, _1927, 1.0), vec4(_1859, _1862, _1865, _1868));
    float _1931 = dot(vec4(_1925, _1926, _1927, 1.0), vec4(_1858, _1861, _1864, _1867));
    float _1934 = dot(vec4(_1925, _1926, _1927, 1.0), vec4(_1857, _1860, _1863, _1866));
    float _1968;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1941 = dot(vec4(_1925, _1926, _1927, 1.0), vec4(_1549, _1553, _1556, _1559));
        float _1945 = dot(vec4(_1925, _1926, _1927, 1.0), vec4(_1551, _1554, _1557, _1560));
        float _1949 = dot(vec4(_1925, _1926, _1927, 1.0), vec4(_1552, _1555, _1558, _1561));
        float _1956 = dot(vec4(cbModelParam._m0[39u]), vec4(_1925, _1926, _1927, 1.0));
        _1968 = dot(vec3(isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1956) ? 0.0 : (isnan(0.0) ? _1956 : max(0.0, _1956))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1968 = 1.0;
    }
    float _1979;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1970 = dot(vec4(cbModelParam._m0[40u]), vec4(_1925, _1926, _1927, 1.0));
        _1979 = dot(vec3(isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)), isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)), isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1970) ? 0.0 : (isnan(0.0) ? _1970 : max(0.0, _1970))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1979 = 1.0;
    }
    float _1983 = (_1979 * cbModelParam._m0[1u].x) + (_1968 * (1.0 - cbModelParam._m0[1u].x));
    float _1993 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1014);
    float _1994 = isnan(_1993) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1993 : min(cbModelParam._m0[25u].z, _1993));
    float _2075;
    float _2077;
    float _2079;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2042 = fma(_1248, cbModelParam._m0[13u].z, fma(_1244, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1240)) + cbModelParam._m0[13u].w;
        float _2046 = fma(_1248, cbModelParam._m0[14u].z, fma(_1244, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1240)) + cbModelParam._m0[14u].w;
        float _2050 = fma(_1248, cbModelParam._m0[15u].z, fma(_1244, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1240)) + cbModelParam._m0[15u].w;
        float _2053 = fma(_1186, cbModelParam._m0[13u].z, fma(_1185, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1184));
        float _2056 = fma(_1186, cbModelParam._m0[14u].z, fma(_1185, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1184));
        float _2059 = fma(_1186, cbModelParam._m0[15u].z, fma(_1185, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1184));
        float _2087;
        if (_2053 > 0.0)
        {
            _2087 = abs((1.0 - _2042) / _2053);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2042 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2087 = frontier_phi_14_12_ladder;
        }
        float _2290;
        if (_2056 > 0.0)
        {
            _2290 = abs((1.0 - _2046) / _2056);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2046 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2290 = frontier_phi_23_19_ladder;
        }
        float _2544;
        if (_2059 > 0.0)
        {
            _2544 = abs((1.0 - _2050) / _2059);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2050 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2544 = frontier_phi_35_30_ladder;
        }
        float _2546 = isnan(_2290) ? _2087 : (isnan(_2087) ? _2290 : min(_2087, _2290));
        float _2547 = isnan(_2544) ? _2546 : (isnan(_2546) ? _2544 : min(_2546, _2544));
        float _2551 = (_2547 * _2053) + _2042;
        float _2552 = (_2547 * _2056) + _2046;
        float _2553 = (_2547 * _2059) + _2050;
        float _2554 = _2547 * 9.9999997473787516355514526367188e-05;
        float _2556 = (-1.0) - _2554;
        float _2558 = _2554 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2553 > _2558) || ((_2553 < _2556) || ((_2552 > _2558) || ((_2552 < _2556) || ((_2551 < _2556) || (_2551 > _2558))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2681 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2553, cbModelParam._m0[9u].z, fma(_2552, cbModelParam._m0[9u].y, _2551 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2553, cbModelParam._m0[10u].z, fma(_2552, cbModelParam._m0[10u].y, _2551 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2553, cbModelParam._m0[11u].z, fma(_2552, cbModelParam._m0[11u].y, _2551 * cbModelParam._m0[11u].x))), _1994);
            frontier_phi_13_35_ladder = _2681.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2681.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2681.x * cbModelParam._m0[1u].y;
        }
        _2075 = frontier_phi_13_35_ladder_2;
        _2077 = frontier_phi_13_35_ladder_1;
        _2079 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2063 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1184, _1185, _1186), _1994);
        _2075 = _2063.x * cbModelParam._m0[1u].y;
        _2077 = _2063.y * cbModelParam._m0[1u].y;
        _2079 = _2063.z * cbModelParam._m0[1u].y;
    }
    float _2083 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1014);
    float _2084 = isnan(_2083) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2083 : min(cbModelParam._m0[25u].w, _2083));
    float _2174;
    float _2176;
    float _2178;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2138 = fma(_1248, cbModelParam._m0[21u].z, fma(_1244, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1240)) + cbModelParam._m0[21u].w;
        float _2142 = fma(_1248, cbModelParam._m0[22u].z, fma(_1244, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1240)) + cbModelParam._m0[22u].w;
        float _2146 = fma(_1248, cbModelParam._m0[23u].z, fma(_1244, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1240)) + cbModelParam._m0[23u].w;
        float _2149 = fma(_1186, cbModelParam._m0[21u].z, fma(_1185, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1184));
        float _2152 = fma(_1186, cbModelParam._m0[22u].z, fma(_1185, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1184));
        float _2155 = fma(_1186, cbModelParam._m0[23u].z, fma(_1185, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1184));
        float _2295;
        if (_2149 > 0.0)
        {
            _2295 = abs((1.0 - _2138) / _2149);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2149 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2138 + 1.0) / _2149);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2295 = frontier_phi_25_21_ladder;
        }
        float _2571;
        if (_2152 > 0.0)
        {
            _2571 = abs((1.0 - _2142) / _2152);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2152 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2142 + 1.0) / _2152);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2571 = frontier_phi_37_32_ladder;
        }
        float _2784;
        if (_2155 > 0.0)
        {
            _2784 = abs((1.0 - _2146) / _2155);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2146 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2784 = frontier_phi_46_43_ladder;
        }
        float _2786 = isnan(_2571) ? _2295 : (isnan(_2295) ? _2571 : min(_2295, _2571));
        float _2787 = isnan(_2784) ? _2786 : (isnan(_2786) ? _2784 : min(_2786, _2784));
        float _2791 = (_2787 * _2149) + _2138;
        float _2792 = (_2787 * _2152) + _2142;
        float _2793 = (_2787 * _2155) + _2146;
        float _2794 = _2787 * 9.9999997473787516355514526367188e-05;
        float _2795 = (-1.0) - _2794;
        float _2797 = _2794 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2793 > _2797) || ((_2793 < _2795) || ((_2792 > _2797) || ((_2792 < _2795) || ((_2791 < _2795) || (_2791 > _2797))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2793, cbModelParam._m0[17u].z, fma(_2792, cbModelParam._m0[17u].y, _2791 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2793, cbModelParam._m0[18u].z, fma(_2792, cbModelParam._m0[18u].y, _2791 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2793, cbModelParam._m0[19u].z, fma(_2792, cbModelParam._m0[19u].y, _2791 * cbModelParam._m0[19u].x))), _2084);
            frontier_phi_22_46_ladder = _2992.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2992.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2992.x * cbModelParam._m0[1u].z;
        }
        _2174 = frontier_phi_22_46_ladder_2;
        _2176 = frontier_phi_22_46_ladder_1;
        _2178 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2158 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1184, _1185, _1186), _2084);
        _2174 = _2158.x * cbModelParam._m0[1u].z;
        _2176 = _2158.y * cbModelParam._m0[1u].z;
        _2178 = _2158.z * cbModelParam._m0[1u].z;
    }
    float _2191 = (((_1211 * _1160) + _1212) * _1176) * ((cbModelParam._m0[1u].w * (_2174 - _2075)) + _2075);
    float _2193 = (((_1211 * _1162) + _1212) * _1176) * ((cbModelParam._m0[1u].w * (_2176 - _2077)) + _2077);
    float _2195 = (((_1211 * _1163) + _1212) * _1176) * ((cbModelParam._m0[1u].w * (_2178 - _2079)) + _2079);
    float _2198 = fma(_2195, cbSceneParam._m0[89u].z, fma(_2193, cbSceneParam._m0[89u].y, _2191 * cbSceneParam._m0[89u].x));
    float _2201 = fma(_2195, cbSceneParam._m0[90u].z, fma(_2193, cbSceneParam._m0[90u].y, _2191 * cbSceneParam._m0[90u].x));
    float _2204 = fma(_2195, cbSceneParam._m0[91u].z, fma(_2193, cbSceneParam._m0[91u].y, _2191 * cbSceneParam._m0[91u].x));
    uvec4 _2214 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2216 = _2214.x * 14u;
    uint _2217 = _2216 + 13u;
    float _2224 = _1176 + (-1.0);
    float _2229 = (cbLight._m0[_2217].x * _2224) + 1.0;
    float _2230 = (cbLight._m0[_2217].y * _2224) + 1.0;
    float _2231 = (cbLight._m0[_2217].z * _2224) + 1.0;
    float _2232 = (cbLight._m0[_2217].w * _2224) + 1.0;
    uint _2233 = _2216 + 5u;
    float _2239 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2243 = _2216 + 4u;
    float _2249 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
    uint _2253 = _2216 | 1u;
    float _2264 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_1011, _1012, _1013));
    float _2267 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_1011, _1012, _1013));
    float _4473 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _4484 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2272 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * 0.3183098733425140380859375;
    float _2274 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * 0.3183098733425140380859375;
    float _2281 = ((cbLight._m0[_2233].x * _2239) * _2274) + ((cbLight._m0[_2243].x * _2249) * _2272);
    float _2282 = ((_2239 * cbLight._m0[_2233].y) * _2274) + ((_2249 * cbLight._m0[_2243].y) * _2272);
    float _2283 = ((_2239 * cbLight._m0[_2233].z) * _2274) + ((_2249 * cbLight._m0[_2243].z) * _2272);
    uvec4 _2287 = floatBitsToUint(cbLight._m0[_2216 + 12u]);
    bool _2289 = _2287.x == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2289)
    {
        _2300 = _2281;
        _2302 = _2282;
        _2304 = _2283;
    }
    else
    {
        uint _2308 = _2216 + 6u;
        float _2324 = (dot(vec3(cbLight._m0[_2216 + 2u].xyz), vec3(_1011, _1012, _1013)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4495 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2327 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2300 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2281;
        _2302 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2282;
        _2304 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2283;
    }
    bool _2307 = _2287.y == 0u;
    float _2345;
    float _2347;
    float _2349;
    if (_2307)
    {
        _2345 = _2300;
        _2347 = _2302;
        _2349 = _2304;
    }
    else
    {
        uint _2515 = _2216 + 7u;
        float _2531 = (dot(vec3(cbLight._m0[_2216 + 3u].xyz), vec3(_1011, _1012, _1013)) * 0.5) + 0.5;
        float _2532 = _2531 * _2531;
        float _4511 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2533 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2534 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2345 = (((cbLight._m0[_2515].x * 0.3183098733425140380859375) * _2533) * _2534) + _2300;
        _2347 = (((cbLight._m0[_2515].y * 0.3183098733425140380859375) * _2533) * _2534) + _2302;
        _2349 = (((cbLight._m0[_2515].z * 0.3183098733425140380859375) * _2533) * _2534) + _2304;
    }
    uint _2352 = _2216 + 8u;
    float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _1014) * 0.949999988079071044921875);
    float _2366 = _2365 * _2365;
    float _2367 = cbLight._m0[_2216].x + _1090;
    float _2368 = cbLight._m0[_2216].y + _1091;
    float _2369 = cbLight._m0[_2216].z + _1092;
    float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
    float _2374 = _2373 * _2367;
    float _2375 = _2373 * _2368;
    float _2376 = _2373 * _2369;
    float _2377 = dot(vec3(_1011, _1012, _1013), vec3(cbLight._m0[_2216].xyz));
    float _4527 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _4538 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _2381 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2382 = dot(vec3(_1011, _1012, _1013), vec3(_2374, _2375, _2376));
    float _4549 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2374, _2375, _2376));
    float _4560 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2366 * _2366;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2402 = exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0);
    float _2403 = 0.959999978542327880859375 - _1157;
    float _2405 = 0.959999978542327880859375 - _1158;
    float _2406 = 0.959999978542327880859375 - _1159;
    float _2413 = 1.0 - _2366;
    float _2424 = (0.5 / (((_2381 * ((_2380 * _2413) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2413) + _2366) * _2380))) * _2380;
    float _4571 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2426 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    uint _2437 = _2216 + 9u;
    float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _1014) * 0.949999988079071044921875);
    float _2449 = _2448 * _2448;
    float _2450 = cbLight._m0[_2253].x + _1090;
    float _2451 = cbLight._m0[_2253].y + _1091;
    float _2452 = cbLight._m0[_2253].z + _1092;
    float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
    float _2457 = _2456 * _2450;
    float _2458 = _2456 * _2451;
    float _2459 = _2456 * _2452;
    float _2460 = dot(vec3(_1011, _1012, _1013), vec3(cbLight._m0[_2253].xyz));
    float _4582 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2464 = dot(vec3(_1011, _1012, _1013), vec3(_2457, _2458, _2459));
    float _4593 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2468 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2457, _2458, _2459));
    float _4604 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2472 = _2449 * _2449;
    float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
    float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0);
    float _2490 = 1.0 - _2449;
    float _2500 = (0.5 / (((_2381 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2490) + _2449) * _2463))) * _2463;
    float _4615 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2502 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
    float _2512 = (((((_2483 * _2403) + _1160) * cbLight._m0[_2437].x) * _2502) * _2239) + (((((_2402 * _2403) + _1160) * cbLight._m0[_2352].x) * _2426) * _2249);
    float _2513 = (((((_2483 * _2405) + _1162) * cbLight._m0[_2437].y) * _2502) * _2239) + (((((_2402 * _2405) + _1162) * cbLight._m0[_2352].y) * _2426) * _2249);
    float _2514 = (((((_2483 * _2406) + _1163) * cbLight._m0[_2437].z) * _2502) * _2239) + (((((_2402 * _2406) + _1163) * cbLight._m0[_2352].z) * _2426) * _2249);
    float _2576;
    float _2578;
    float _2580;
    if (_2289)
    {
        _2576 = _2512;
        _2578 = _2513;
        _2580 = _2514;
    }
    else
    {
        uint _2582 = _2216 + 2u;
        uint _2586 = _2216 + 10u;
        float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2582].w)) * _1014) * 0.949999988079071044921875);
        float _2601 = _2600 * _2600;
        float _2602 = cbLight._m0[_2582].x + _1090;
        float _2603 = cbLight._m0[_2582].y + _1091;
        float _2604 = cbLight._m0[_2582].z + _1092;
        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
        float _2609 = _2608 * _2602;
        float _2610 = _2608 * _2603;
        float _2611 = _2608 * _2604;
        float _2612 = dot(vec3(_1011, _1012, _1013), vec3(cbLight._m0[_2582].xyz));
        float _4626 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2616 = dot(vec3(_1011, _1012, _1013), vec3(_2609, _2610, _2611));
        float _4637 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2620 = dot(vec3(cbLight._m0[_2582].xyz), vec3(_2609, _2610, _2611));
        float _4648 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2624 = _2601 * _2601;
        float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
        float _2635 = exp2(log2(1.0 - (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) * 5.0);
        float _2642 = 1.0 - _2601;
        float _2652 = (0.5 / (((_2381 * ((_2615 * _2642) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2642) + _2601) * _2615))) * _2615;
        float _4659 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2654 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
        float _2655 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2576 = (((((_2635 * _2403) + _1160) * cbLight._m0[_2586].x) * _2654) * _2655) + _2512;
        _2578 = (((((_2635 * _2405) + _1162) * cbLight._m0[_2586].y) * _2654) * _2655) + _2513;
        _2580 = (((((_2635 * _2406) + _1163) * cbLight._m0[_2586].z) * _2654) * _2655) + _2514;
    }
    float _2690;
    float _2692;
    float _2694;
    if (_2307)
    {
        _2690 = _2576;
        _2692 = _2578;
        _2694 = _2580;
    }
    else
    {
        uint _2701 = _2216 + 3u;
        uint _2705 = _2216 + 11u;
        float _2719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2701].w)) * _1014) * 0.949999988079071044921875);
        float _2720 = _2719 * _2719;
        float _2721 = cbLight._m0[_2701].x + _1090;
        float _2722 = cbLight._m0[_2701].y + _1091;
        float _2723 = cbLight._m0[_2701].z + _1092;
        float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
        float _2728 = _2727 * _2721;
        float _2729 = _2727 * _2722;
        float _2730 = _2727 * _2723;
        float _2731 = dot(vec3(_1011, _1012, _1013), vec3(cbLight._m0[_2701].xyz));
        float _4675 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2735 = dot(vec3(_1011, _1012, _1013), vec3(_2728, _2729, _2730));
        float _4686 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2738 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2739 = dot(vec3(cbLight._m0[_2701].xyz), vec3(_2728, _2729, _2730));
        float _4697 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2743 = _2720 * _2720;
        float _2747 = ((_2738 * _2738) * (_2743 + (-1.0))) + 1.0;
        float _2754 = exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0);
        float _2761 = 1.0 - _2720;
        float _2771 = (0.5 / (((_2381 * ((_2734 * _2761) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2761) + _2720) * _2734))) * _2734;
        float _4708 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2773 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2743 / ((_2747 * _2747) * 3.141590118408203125));
        float _2774 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2690 = (((((_2754 * _2403) + _1160) * cbLight._m0[_2705].x) * _2773) * _2774) + _2576;
        _2692 = (((((_2754 * _2405) + _1162) * cbLight._m0[_2705].y) * _2773) * _2774) + _2578;
        _2694 = (((((_2754 * _2406) + _1163) * cbLight._m0[_2705].z) * _2773) * _2774) + _2580;
    }
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    if (_2214.y == 0u)
    {
        float _2849 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2850 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2849;
        float _2851 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2849;
        float _2852 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2849;
        uvec4 _2864 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2865 = _2864.x;
        uint _2876 = uint((float(_2864.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1099) / _2865))) + floor(float(uint(cbSceneParam._m0[85u].x * _1098) / _2865)));
        float _2886 = (log2(_2852 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2887 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        uint _2890 = uint(isnan(14.0) ? _2887 : (isnan(_2887) ? 14.0 : min(_2887, 14.0)));
        uvec4 _2895 = texelFetch(g_lightClusterGridBuffer, int(((_2890 << 2u) + (_2876 << 6u)) >> 2u));
        uint _2896 = _2895.x;
        uint _2897 = _2864.z;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        if (((((1u << ((_2897 >> 4u) & 15u)) + 4294967295u) & _2896) == 0u) || ((_2897 & 240u) == 0u))
        {
            _2997 = 0.0;
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
        }
        else
        {
            float _2998;
            float _3000;
            float _3002;
            float _3004;
            float _3006;
            float _3008;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            uint _3147 = 0u;
            uint _3156;
            bool _3157;
            for (;;)
            {
                _3156 = texelFetch(g_lightClassification, int((((_2890 << 5u) + (_2876 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                _3157 = _3156 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3157)
                {
                    frontier_phi_61_pred = _3141;
                    frontier_phi_61_pred_1 = _3146;
                    frontier_phi_61_pred_2 = _3145;
                    frontier_phi_61_pred_3 = _3144;
                    frontier_phi_61_pred_4 = _3143;
                    frontier_phi_61_pred_5 = _3142;
                }
                else
                {
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    uint _3271;
                    _3265 = _3141;
                    _3266 = _3142;
                    _3267 = _3143;
                    _3268 = _3144;
                    _3269 = _3145;
                    _3270 = _3146;
                    _3271 = _3156;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    for (;;)
                    {
                        uint _3275 = uint(findLSB(_3271)) + (_3147 << 5u);
                        uint _3272 = (_3271 + 4294967295u) & _3271;
                        uint _3277 = _3275 * 48u;
                        vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 3u)).x));
                        uint _3297 = (_3275 * 48u) + 4u;
                        vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3297)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 3u)).x));
                        uint _3316 = (_3275 * 48u) + 8u;
                        vec3 _3327 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3316)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 2u)).x));
                        float _3331 = _3291.x - _2850;
                        float _3332 = _3291.y - _2851;
                        float _3333 = _3291.z - _2852;
                        float _3334 = dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333));
                        float _3337 = inversesqrt(_3334);
                        float _3338 = _3337 * _3331;
                        float _3339 = _3337 * _3332;
                        float _3340 = _3337 * _3333;
                        float _3341 = dot(vec3(_1117, _1120, _1123), vec3(_3338, _3339, _3340));
                        float _3346 = 1.0 - (_3334 * _3291.w);
                        float _4734 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3347 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                        float _3348 = sqrt(_3334) * _3310.w;
                        float _3351 = 1.39999997615814208984375 / (_3348 + 1.39999997615814208984375);
                        float _3352 = _3351 * _3351;
                        float _3355 = ((1.0 - _3352) * _3341) + _3352;
                        float _3358 = _3348 * _3348;
                        float _3362 = ((isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0))) * _3347) / ((_3358 * 0.699999988079071044921875) + 1.0);
                        float _3366 = (-0.0) - _2850;
                        float _3367 = (-0.0) - _2851;
                        float _3368 = (-0.0) - _2852;
                        float _3372 = inversesqrt(dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368)));
                        float _3373 = _3372 * _3366;
                        float _3374 = _3372 * _3367;
                        float _3375 = _3372 * _3368;
                        float _3383 = exp2(log2(1.0 / ((_3358 * 3.5) + 5.0)) * 0.25);
                        float _3384 = 1.0 - _1192;
                        float _3391 = sqrt(1.0 - ((1.0 - (_3384 * _3384)) * (1.0 - (_3383 * _3383))));
                        float _3392 = _3391 * _3391;
                        float _3393 = _3392 * _3392;
                        float _3394 = _3373 + _3338;
                        float _3395 = _3374 + _3339;
                        float _3396 = _3375 + _3340;
                        float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                        float _3404 = dot(vec3(_1117, _1120, _1123), vec3(_3373, _3374, _3375));
                        float _4750 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3407 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3408 = dot(vec3(_1117, _1120, _1123), vec3(_3400 * _3394, _3400 * _3395, _3400 * _3396));
                        float _4761 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3411 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3415 = ((_3411 * _3411) * (_3393 + (-1.0))) + 1.0;
                        float _3416 = _3351 * _3392;
                        float _3417 = _3416 * _3416;
                        float _3420 = ((1.0 - _3417) * _3341) + _3417;
                        float _4772 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3421 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3422 = 1.0 - _3392;
                        float _3432 = (0.5 / (((_3421 * ((_3407 * _3422) + _3392)) + 9.9999999392252902907785028219223e-09) + (((_3421 * _3422) + _3392) * _3407))) * _3421;
                        float _4783 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3443 = (((_3393 * 3.1415927410125732421875) * (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) / ((_3415 * _3415) * ((_3358 * 2.1991131305694580078125) + 3.141590118408203125))) * _3347;
                        _3200 = (_3362 * _3310.x) + _3268;
                        _3201 = (_3362 * _3310.y) + _3269;
                        _3202 = (_3362 * _3310.z) + _3270;
                        _3197 = (_3443 * _3327.x) + _3265;
                        _3198 = (_3443 * _3327.y) + _3266;
                        _3199 = (_3443 * _3327.z) + _3267;
                        if (_3272 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3265 = _3197;
                            _3266 = _3198;
                            _3267 = _3199;
                            _3268 = _3200;
                            _3269 = _3201;
                            _3270 = _3202;
                            _3271 = _3272;
                        }
                    }
                    frontier_phi_61_pred = _3197;
                    frontier_phi_61_pred_1 = _3202;
                    frontier_phi_61_pred_2 = _3201;
                    frontier_phi_61_pred_3 = _3200;
                    frontier_phi_61_pred_4 = _3199;
                    frontier_phi_61_pred_5 = _3198;
                }
                _2998 = frontier_phi_61_pred;
                _3008 = frontier_phi_61_pred_1;
                _3006 = frontier_phi_61_pred_2;
                _3004 = frontier_phi_61_pred_3;
                _3002 = frontier_phi_61_pred_4;
                _3000 = frontier_phi_61_pred_5;
                uint _3148 = _3147 + 1u;
                if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3141 = _2998;
                    _3142 = _3000;
                    _3143 = _3002;
                    _3144 = _3004;
                    _3145 = _3006;
                    _3146 = _3008;
                    _3147 = _3148;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2997 = _2998;
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
        }
        uvec4 _3011 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3012 = _3011.z;
        uint _3014 = (_3012 >> 8u) & 15u;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        if (((4294967295u << _3014) & _2896) == 0u)
        {
            _3109 = _2997;
            _3111 = _2999;
            _3113 = _3001;
            _3115 = _3003;
            _3117 = _3005;
            _3119 = _3007;
        }
        else
        {
            float _3134 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
            float _3135 = _3134 * _2850;
            float _3136 = _3134 * _2851;
            float _3137 = _3134 * _2852;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3014 < ((_3012 >> 12u) & 15u))
            {
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3248 = _2997;
                float _3249 = _2999;
                float _3250 = _3001;
                float _3251 = _3003;
                float _3252 = _3005;
                float _3253 = _3007;
                uint _3254 = _3014;
                uint _3263;
                bool _3264;
                for (;;)
                {
                    _3263 = texelFetch(g_lightClassification, int((((_2890 << 5u) + (_2876 << 9u)) + (_3254 << 2u)) >> 2u)).x;
                    _3264 = _3263 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3264)
                    {
                        frontier_phi_67_pred = _3251;
                        frontier_phi_67_pred_1 = _3252;
                        frontier_phi_67_pred_2 = _3253;
                        frontier_phi_67_pred_3 = _3250;
                        frontier_phi_67_pred_4 = _3249;
                        frontier_phi_67_pred_5 = _3248;
                    }
                    else
                    {
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3461 = _3248;
                        float _3462 = _3249;
                        float _3463 = _3250;
                        float _3464 = _3251;
                        float _3465 = _3252;
                        float _3466 = _3253;
                        uint _3467 = _3263;
                        uint _3468;
                        vec4 _3493;
                        float _3494;
                        vec4 _3509;
                        vec3 _3521;
                        vec4 _3536;
                        vec4 _3551;
                        float _3597;
                        bool _3598;
                        for (;;)
                        {
                            uint _3478 = ((_3254 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3467));
                            _3468 = (_3467 + 4294967295u) & _3467;
                            uint _3480 = _3478 * 40u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            _3494 = _3493.w;
                            uint _3496 = (_3478 * 40u) + 4u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3511 = (_3478 * 40u) + 8u;
                            _3521 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x));
                            uint _3523 = (_3478 * 40u) + 16u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3478 * 40u) + 20u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3478 * 40u) + 24u;
                            vec4 _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3572 = (_3478 * 40u) + 28u;
                            vec4 _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            _3597 = fma(_2852, _3585.z, fma(_2851, _3585.y, _3585.x * _2850)) + _3585.w;
                            _3598 = !((fma(_2852, _3566.z, fma(_2851, _3566.y, _3566.x * _2850)) + _3566.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3598)
                            {
                                float _3625 = _3493.x - _2850;
                                float _3626 = _3493.y - _2851;
                                float _3627 = _3493.z - _2852;
                                float _3628 = dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627));
                                float _3631 = inversesqrt(_3628);
                                float _3632 = _3631 * _3625;
                                float _3633 = _3631 * _3626;
                                float _3634 = _3631 * _3627;
                                float _3638 = 1.0 - (_3628 / (_3494 * _3494));
                                float _4794 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3643 = sqrt(_3628) * _3509.w;
                                float _3645 = 1.39999997615814208984375 / (_3643 + 1.39999997615814208984375);
                                float _3646 = _3645 * _3645;
                                float _3649 = ((1.0 - _3646) * dot(vec3(_3632, _3633, _3634), vec3(_1117, _1120, _1123))) + _3646;
                                float _3652 = _3643 * _3643;
                                float _3656 = (fma(_2852, _3536.z, fma(_2851, _3536.y, _3536.x * _2850)) + _3536.w) / _3597;
                                float _3657 = (fma(_2852, _3551.z, fma(_2851, _3551.y, _3551.x * _2850)) + _3551.w) / _3597;
                                float _3661 = 1.0 - dot(vec2(_3656, _3657), vec2(_3656, _3657));
                                float _4810 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3663 = _3662 * (((isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0))) * _3639) / ((_3652 * 0.699999988079071044921875) + 1.0));
                                float _3675 = exp2(log2(1.0 / ((_3652 * 3.5) + 5.0)) * 0.25);
                                float _3676 = 1.0 - _1192;
                                float _3683 = sqrt(1.0 - ((1.0 - (_3676 * _3676)) * (1.0 - (_3675 * _3675))));
                                float _3684 = _3683 * _3683;
                                float _3685 = _3684 * _3684;
                                float _3686 = _3632 - _3135;
                                float _3687 = _3633 - _3136;
                                float _3688 = _3634 - _3137;
                                float _3692 = inversesqrt(dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688)));
                                float _3696 = dot(vec3(_1117, _1120, _1123), vec3((-0.0) - _3135, (-0.0) - _3136, (-0.0) - _3137));
                                float _4821 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3699 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3700 = dot(vec3(_1117, _1120, _1123), vec3(_3692 * _3686, _3692 * _3687, _3692 * _3688));
                                float _4832 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3703 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3707 = ((_3703 * _3703) * (_3685 + (-1.0))) + 1.0;
                                float _3708 = _3645 * _3684;
                                float _3709 = _3708 * _3708;
                                float _3715 = ((1.0 - _3709) * dot(vec3(_1117, _1120, _1123), vec3(_3632, _3633, _3634))) + _3709;
                                float _4843 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3716 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3717 = 1.0 - _3684;
                                float _3727 = (0.5 / (((_3716 * ((_3699 * _3717) + _3684)) + 9.9999999392252902907785028219223e-09) + (((_3716 * _3717) + _3684) * _3699))) * _3716;
                                float _4854 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3737 = (_3662 * _3639) * (((_3685 * 3.1415927410125732421875) * (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) / ((_3707 * _3707) * ((_3652 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3737 * _3521.x;
                                frontier_phi_73_pred_1 = _3737 * _3521.y;
                                frontier_phi_73_pred_2 = _3663 * _3509.z;
                                frontier_phi_73_pred_3 = _3663 * _3509.y;
                                frontier_phi_73_pred_4 = _3663 * _3509.x;
                                frontier_phi_73_pred_5 = _3737 * _3521.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3741 = frontier_phi_73_pred;
                            _3742 = frontier_phi_73_pred_1;
                            _3746 = frontier_phi_73_pred_2;
                            _3745 = frontier_phi_73_pred_3;
                            _3744 = frontier_phi_73_pred_4;
                            _3743 = frontier_phi_73_pred_5;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            if (_3468 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3468;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3451;
                        frontier_phi_67_pred_1 = _3452;
                        frontier_phi_67_pred_2 = _3453;
                        frontier_phi_67_pred_3 = _3450;
                        frontier_phi_67_pred_4 = _3449;
                        frontier_phi_67_pred_5 = _3448;
                    }
                    _3116 = frontier_phi_67_pred;
                    _3118 = frontier_phi_67_pred_1;
                    _3120 = frontier_phi_67_pred_2;
                    _3114 = frontier_phi_67_pred_3;
                    _3112 = frontier_phi_67_pred_4;
                    _3110 = frontier_phi_67_pred_5;
                    uint _3255 = _3254 + 1u;
                    if (_3255 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3248 = _3110;
                        _3249 = _3112;
                        _3250 = _3114;
                        _3251 = _3116;
                        _3252 = _3118;
                        _3253 = _3120;
                        _3254 = _3255;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3118;
                frontier_phi_55_56_ladder_1 = _3120;
                frontier_phi_55_56_ladder_2 = _3116;
                frontier_phi_55_56_ladder_3 = _3114;
                frontier_phi_55_56_ladder_4 = _3112;
                frontier_phi_55_56_ladder_5 = _3110;
            }
            else
            {
                frontier_phi_55_56_ladder = _3005;
                frontier_phi_55_56_ladder_1 = _3007;
                frontier_phi_55_56_ladder_2 = _3003;
                frontier_phi_55_56_ladder_3 = _3001;
                frontier_phi_55_56_ladder_4 = _2999;
                frontier_phi_55_56_ladder_5 = _2997;
            }
            _3109 = frontier_phi_55_56_ladder_5;
            _3111 = frontier_phi_55_56_ladder_4;
            _3113 = frontier_phi_55_56_ladder_3;
            _3115 = frontier_phi_55_56_ladder_2;
            _3117 = frontier_phi_55_56_ladder;
            _3119 = frontier_phi_55_56_ladder_1;
        }
        float _3124 = isnan(1.0) ? _1176 : (isnan(_1176) ? 1.0 : min(_1176, 1.0));
        _2909 = (_3124 * _3115) + _2345;
        _2911 = (_3124 * _3117) + _2347;
        _2913 = (_3124 * _3119) + _2349;
        _2915 = ((_3109 * _1160) * _3124) + _2690;
        _2917 = ((_3111 * _1162) * _3124) + _2692;
        _2919 = ((_3113 * _1163) * _3124) + _2694;
    }
    else
    {
        _2909 = _2345;
        _2911 = _2347;
        _2913 = _2349;
        _2915 = _2690;
        _2917 = _2692;
        _2919 = _2694;
    }
    float _4870 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _4881 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _4892 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    uint _2939 = _287 + 6u;
    float _2947 = _1098 / cbSceneParam._m0[86u].x;
    float _2948 = _1099 / cbSceneParam._m0[86u].y;
    vec4 _2962 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2947, _2948, (log2((isnan(cbSceneParam._m0[77u].w) ? _1033 : (isnan(_1033) ? cbSceneParam._m0[77u].w : min(_1033, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2964 = _2962.x;
    float _2965 = _2962.y;
    float _2966 = _2962.z;
    float _2967 = _2962.w;
    float _3059;
    float _3061;
    float _3063;
    float _3065;
    if (_1033 > cbSceneParam._m0[78u].w)
    {
        float _3022 = isnan(_1033) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1033 : min(cbSceneParam._m0[80u].w, _1033));
        float _3023 = _3022 / _1033;
        float _3034 = _3023 * _1083;
        float _3035 = _1084 * _3023;
        float _3036 = (-0.0) - _3035;
        float _3037 = _3023 * _1085;
        float _3039 = (cbSceneParam._m0[77u].w * _3036) / _3022;
        float _3040 = _3039 + cbSceneParam._m0[79u].w;
        float _3041 = cbSceneParam._m0[79u].w - _3035;
        float _3047 = sqrt(((_3034 * _3034) + (_3035 * _3035)) + (_3037 * _3037));
        float _3050 = (1.0 - (cbSceneParam._m0[77u].w / _3022)) * _3047;
        float _3055 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3057 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3210;
        if (abs((_3036 - _3039) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3210 = ((((_3040 > 0.0) ? exp2(_3055 * _3040) : (2.0 - exp2(_3057 * _3040))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3050;
        }
        else
        {
            float _3170 = 1.0 / cbSceneParam._m0[80u].x;
            float _3171 = isnan(_3041) ? _3040 : (isnan(_3040) ? _3041 : max(_3040, _3041));
            float _3172 = isnan(_3041) ? _3040 : (isnan(_3040) ? _3041 : min(_3040, _3041));
            float _3181 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : min(_3171, 0.0));
            float _3182 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : min(_3172, 0.0));
            _3210 = ((abs(_3047 / _3036) * cbSceneParam._m0[80u].y) * ((((_3181 - _3182) * 2.0) - ((exp2(_3055 * (isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0)))) - exp2(_3055 * (isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))))) * _3170)) - ((exp2(_3057 * _3181) - exp2(_3057 * _3182)) * _3170))) + (_3050 * cbSceneParam._m0[80u].z);
        }
        vec4 _3212 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2947, _2948, 1.0), 0.0);
        float _3221 = exp2((_3210 * (-1.44269502162933349609375)) * (1.0 - _3212.w));
        float _3222 = log2(_3221);
        float _3238 = log2(_2967);
        _3059 = (exp2(_3238 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3222 * cbSceneParam._m0[78u].x)) * _3212.x) / cbSceneParam._m0[78u].x)) + _2964;
        _3061 = (exp2(_3238 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3222 * cbSceneParam._m0[78u].y)) * _3212.y) / cbSceneParam._m0[78u].y)) + _2965;
        _3063 = (exp2(_3238 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3222 * cbSceneParam._m0[78u].z)) * _3212.z) / cbSceneParam._m0[78u].z)) + _2966;
        _3065 = _3221 * _2967;
    }
    else
    {
        _3059 = _2964;
        _3061 = _2965;
        _3063 = _2966;
        _3065 = _2967;
    }
    float _3077 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3078 = _3077 == 3.0;
    float _3079 = log2(_3065);
    float _3086 = exp2(_3079 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2909 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1176))) + ((_2915 + ((isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0))) * _1983)) * cbPerFrame._m0[3u].x));
    float _3087 = exp2(_3079 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2911 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1176))) + ((_2917 + ((isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0))) * _1983)) * cbPerFrame._m0[3u].x));
    float _3088 = exp2(_3079 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2913 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1176))) + ((_2919 + ((isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0))) * _1983)) * cbPerFrame._m0[3u].x));
    float _3097 = (_3077 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3097 * (_3078 ? _3086 : (_3086 + (cbSceneParam._m0[72u].w * _3059)));
    SV_Target.y = _3097 * (_3078 ? _3087 : (_3087 + (cbSceneParam._m0[72u].w * _3061)));
    SV_Target.z = _3097 * (_3078 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3063)));
    SV_Target.w = cbInstanceData._m0[_2939].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2939].w;
}


