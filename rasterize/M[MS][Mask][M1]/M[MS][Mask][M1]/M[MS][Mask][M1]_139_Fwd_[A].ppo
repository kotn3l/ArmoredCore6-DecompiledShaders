#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1768;
float _4145;
float _4146;
float _4147;
float _4148;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _258 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _259 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _260 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _266 = inversesqrt(dot(vec3(_258, _259, _260), vec3(_258, _259, _260)));
    float _273 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _280 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _294 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _295 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4157 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4168 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _4179 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    uint _305 = uint(roundEven(NORMAL.w)) * 13u;
    uint _310 = _305 + 1u;
    uint _314 = _305 + 2u;
    float _323 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _324 = _323 * TEXCOORD.z;
    float _325 = _323 * TEXCOORD.w;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _324) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _325) + cbTextureTilingScale._m0[13u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _392 = _387.x * cbMtdParam._m0[11u].x;
    float _393 = _387.y * cbMtdParam._m0[11u].y;
    float _394 = _387.z * cbMtdParam._m0[11u].z;
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _324) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _325) + cbTextureTilingScale._m0[5u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _481 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _498 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _432.x) * 2.0) - ((((_469 - _481) * cbMtdParam._m0[23u].w) + _481) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4190 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _506 = (_499 * ((_413.x * cbMtdParam._m0[12u].x) - _392)) + _392;
    float _507 = (_499 * ((_413.y * cbMtdParam._m0[12u].y) - _393)) + _393;
    float _508 = (_499 * ((_413.z * cbMtdParam._m0[12u].z) - _394)) + _394;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _324) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _325) + cbTextureTilingScale._m0[3u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _547 = _545.x;
    float _557 = dot(vec4(_547, _545.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _571 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _432.y) * 2.0) - ((((_547 - _557) * cbMtdParam._m0[23u].w) + _557) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4201 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _579 = (_572 * ((_525.x * cbMtdParam._m0[13u].x) - _506)) + _506;
    float _580 = (_572 * ((_525.y * cbMtdParam._m0[13u].y) - _507)) + _507;
    float _581 = (_572 * ((_525.z * cbMtdParam._m0[13u].z) - _508)) + _508;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _324) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _325) + cbTextureTilingScale._m0[24u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _619 = _617.x;
    float _629 = dot(vec4(_619, _617.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _641 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _432.z) * 2.0) - ((((_619 - _629) * cbMtdParam._m0[23u].w) + _629) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4212 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _652 = (_361.x * cbMtdParam._m0[9u].x) * ((_642 * ((_600.x * cbMtdParam._m0[14u].x) - _579)) + _579);
    float _653 = (_361.y * cbMtdParam._m0[9u].y) * ((_642 * ((_600.y * cbMtdParam._m0[14u].y) - _580)) + _580);
    float _654 = (_361.z * cbMtdParam._m0[9u].z) * ((_642 * ((_600.z * cbMtdParam._m0[14u].z) - _581)) + _581);
    float _658 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _338.x) * _652;
    float _661 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _338.y) * _653;
    float _664 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _338.z) * _654;
    float _672 = (((_652 - _658) * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) + _658) * 4.55000019073486328125;
    float _674 = (((_653 - _661) * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) + _661) * 4.55000019073486328125;
    float _676 = (((_654 - _664) * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) + _664) * 4.55000019073486328125;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _324) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _325) + cbTextureTilingScale._m0[14u].w));
    vec4 _713 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _324) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _325) + cbTextureTilingScale._m0[20u].w));
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _324) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _325) + cbTextureTilingScale._m0[4u].w));
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _755 = _753.x;
    float _756 = _753.y;
    float _757 = _753.z;
    float _764 = ((_736.x - _755) * _499) + _755;
    float _765 = ((_736.y - _756) * _499) + _756;
    float _766 = ((_736.z - _757) * _499) + _757;
    vec4 _778 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _324) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _325) + cbTextureTilingScale._m0[2u].w));
    float _789 = ((_778.x - _764) * _572) + _764;
    float _790 = ((_778.y - _765) * _572) + _765;
    float _791 = ((_778.z - _766) * _572) + _766;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _324) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _325) + cbTextureTilingScale._m0[23u].w));
    float _816 = ((_803.z - _791) * _642) + _791;
    float _819 = ((((_803.x - _789) * _642) + _789) * 2.0) + (-1.0);
    float _820 = ((((_803.y - _790) * _642) + _790) * 2.0) + (-1.0);
    float _821 = dot(vec2(_819, _820), vec2(_819, _820));
    float _4223 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _826 = sqrt(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))));
    vec4 _840 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _865 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _324) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _325) + cbTextureTilingScale._m0[11u].w));
    float _867 = _865.x;
    float _868 = 1.0 - _867;
    float _876 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _879 = ((isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : min(_876, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _888 = (_879 - ((((((_867 - _868) * cbMtdParam._m0[24u].z) + _868) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _879))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4244 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _889 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _896 = (_889 * ((_694.x * cbMtdParam._m0[18u].x) - _672)) + _672;
    float _897 = (_889 * ((_694.y * cbMtdParam._m0[18u].y) - _674)) + _674;
    float _898 = (_889 * ((_694.z * cbMtdParam._m0[18u].z) - _676)) + _676;
    float _913 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _914 = _913 * TEXCOORD.z;
    float _915 = _913 * TEXCOORD.w;
    vec4 _927 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _914) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _915) + cbTextureTilingScale._m0[19u].w));
    float _929 = _927.x;
    float _930 = 1.0 - _929;
    float _955 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_929 - _930) * cbMtdParam._m0[24u].w) + _930) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4255 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _956 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _964 = ((((cbMtdParam._m0[10u].x - _896) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _956) + _896;
    float _965 = ((((cbMtdParam._m0[10u].y - _897) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _956) + _897;
    float _966 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _898)) * _956) + _898;
    vec4 _992 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _994 = _992.x;
    float _1011 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _324) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _325) + cbTextureTilingScale._m0[9u].w)).x - _994) * _499) + _994;
    float _1028 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _324) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _325) + cbTextureTilingScale._m0[21u].w)).x - _1011) * _572) + _1011;
    float _1045 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _324) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _325) + cbTextureTilingScale._m0[10u].w)).x - _1028) * _642) + _1028;
    float _1051 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1045) * cbMtdParam._m0[19u].z) + _1045;
    float _1053 = _1051 - (_1051 * _889);
    float _1055 = _1053 - (_1053 * _956);
    float _1060 = (((_713.z - _816) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _816;
    float _1064 = ((_840.z - _1060) * cbMtdParam._m0[19u].w) + _1060;
    vec4 _1080 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _324) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _325) + cbTextureTilingScale._m0[15u].w));
    float _1087 = (_1080.x * 2.0) + (-1.0);
    float _1088 = (_1080.y * 2.0) + (-1.0);
    float _1089 = dot(vec2(_1087, _1088), vec2(_1087, _1088));
    float _4266 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1097 = (_889 * (_1080.z - _1064)) + _1064;
    float _1100 = ((cbMtdParam._m0[23u].x - _1097) * _956) + _1097;
    vec4 _1123 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _914) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _915) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1129 = (_1123.x * 2.0) + (-1.0);
    float _1130 = (_1123.y * 2.0) + (-1.0);
    float _1131 = dot(vec2(_1129, _1130), vec2(_1129, _1130));
    float _4277 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _1145 = (_819 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_713.x * 2.0) + (-1.0)))) + (((_840.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1146 = (_820 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_713.y * 2.0) + (-1.0)))) + (((_840.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1158 = (((_1087 - _1145) + (cbMtdParam._m0[21u].x * _1145)) * _889) + _1145;
    float _1159 = (((_1088 - _1146) + (cbMtdParam._m0[21u].x * _1146)) * _889) + _1146;
    float _1160 = (_889 * (sqrt(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) - _826)) + _826;
    float _1171 = (((_1129 - _1158) + (_1158 * cbMtdParam._m0[22u].z)) * _956) + _1158;
    float _1172 = (((_1130 - _1159) + (_1159 * cbMtdParam._m0[22u].z)) * _956) + _1159;
    float _1173 = ((sqrt(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) - _1160) * _956) + _1160;
    float _1175 = cbMtdParam._m0[22u].x + _840.w;
    float _1178 = fma(_1173, _273 * NORMAL.x, fma(_1172, _280 * TANGENT.x, (_266 * _258) * _1171));
    float _1181 = fma(_1173, _273 * NORMAL.y, fma(_1172, _280 * TANGENT.y, (_266 * _259) * _1171));
    float _1184 = fma(_1173, _273 * NORMAL.z, fma(_1172, _280 * TANGENT.z, (_266 * _260) * _1171));
    float _1188 = inversesqrt(dot(vec3(_1178, _1181, _1184), vec3(_1178, _1181, _1184)));
    float _1189 = _1188 * _1178;
    float _1190 = _1188 * _1181;
    float _1191 = _1188 * _1184;
    float _4288 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1192 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _4310 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4321 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4332 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4343 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1197 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _1211 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1251);
    float _1262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1251);
    float _1263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1251);
    float _1267 = inversesqrt(dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263)));
    float _1268 = _1261 * _1267;
    float _1269 = _1262 * _1267;
    float _1270 = _1263 * _1267;
    vec4 _1275 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1277 = _1275.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1449 = sqrt(((_1261 * _1261) + (_1262 * _1262)) + (_1263 * _1263));
        float _1455 = (cbMatDynParam._m0[5u].x * _1449) + cbMatDynParam._m0[5u].y;
        float _4354 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1460 = (cbMatDynParam._m0[5u].z * _1449) + cbMatDynParam._m0[5u].w;
        float _4365 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) - _1456)) + _1456) < ((_1277 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1288 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1289 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1307 = fma(_1191, cbSceneParam._m0[5u].z, fma(_1190, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1189));
    float _1310 = fma(_1191, cbSceneParam._m0[6u].z, fma(_1190, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1189));
    float _1313 = fma(_1191, cbSceneParam._m0[7u].z, fma(_1190, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1189));
    uint _1326 = _305 + 9u;
    uint _1327 = _1326 + uint(cbMatDynParam._m0[0u].w);
    float _1333 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * cbInstanceData._m0[_1327].x;
    float _1334 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * cbInstanceData._m0[_1327].y;
    float _1335 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * cbInstanceData._m0[_1327].z;
    float _4376 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
    float _1336 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _4387 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
    float _1337 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _4398 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
    float _1338 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _1339 = 1.0 - _1197;
    float _1340 = _1336 * _1339;
    float _1341 = _1337 * _1339;
    float _1342 = _1338 * _1339;
    float _1347 = (_1336 + (-0.039999999105930328369140625)) * _1197;
    float _1348 = (_1337 + (-0.039999999105930328369140625)) * _1197;
    float _1349 = (_1338 + (-0.039999999105930328369140625)) * _1197;
    float _1350 = _1347 + 0.039999999105930328369140625;
    float _1352 = _1348 + 0.039999999105930328369140625;
    float _1353 = _1349 + 0.039999999105930328369140625;
    vec4 _1362 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1288, cbSceneParam._m0[86u].y * _1289));
    float _1366 = ((isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * TEXCOORD_5.w) * _1362.x;
    float _1367 = dot(vec3(_1189, _1190, _1191), vec3(_1268, _1269, _1270));
    float _1370 = _1367 * 2.0;
    float _1374 = (_1370 * _1189) - _1268;
    float _1375 = (_1370 * _1190) - _1269;
    float _1376 = (_1370 * _1191) - _1270;
    float _1380 = abs(dot(vec3(_1268, _1269, _1270), vec3(_1189, _1190, _1191)));
    float _4409 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
    float _1382 = sqrt(_1192);
    float _1395 = exp2((_1382 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1382 * 3.0));
    float _1401 = (1.0 - _1395) * ((_1382 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1402 = _1395 * _1382;
    float _1430 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1434 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1438 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1767;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1492 = fma(_1438, cbModelParam._m0[26u].z, fma(_1434, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1430));
        float _1496 = fma(_1438, cbModelParam._m0[27u].z, fma(_1434, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1430));
        float _1500 = fma(_1438, cbModelParam._m0[28u].z, fma(_1434, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1430));
        float _1525 = _1430 + _1189;
        float _1526 = _1434 + _1190;
        float _1527 = _1438 + _1191;
        float _1537 = fma(_1527, cbModelParam._m0[26u].z, fma(_1526, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1525)) - _1492;
        float _1538 = fma(_1527, cbModelParam._m0[27u].z, fma(_1526, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1525)) - _1496;
        float _1539 = fma(_1527, cbModelParam._m0[28u].z, fma(_1526, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1525)) - _1500;
        float _1543 = inversesqrt(dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539)));
        float _1556 = ((_1543 * _1537) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1492 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1557 = ((_1543 * _1538) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1496 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1558 = ((_1543 * _1539) / cbModelParam._m0[34u].z) + ((((((_1500 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        float _1595 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1561.x + (-0.5));
        float _1597 = _1595 * (_1561.y + (-0.5));
        float _1598 = _1595 * (_1561.z + (-0.5));
        float _1605 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1568.x + (-0.5));
        float _1607 = _1605 * (_1568.y + (-0.5));
        float _1608 = _1605 * (_1568.z + (-0.5));
        float _1615 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1575.x + (-0.5));
        float _1617 = _1615 * (_1575.y + (-0.5));
        float _1618 = _1615 * (_1575.z + (-0.5));
        float _1625 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1582.x + (-0.5));
        float _1627 = _1625 * (_1582.y + (-0.5));
        float _1628 = _1625 * (_1582.z + (-0.5));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = _1596 * 0.5;
        float _1633 = _1606 * 0.5;
        float _1634 = _1616 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1649 = (dot(vec3(_1189, _1190, _1191), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1659 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4457 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1661 + 1.0))) + _1666) * _1629;
        float _1676 = _1597 * 0.5;
        float _1677 = _1607 * 0.5;
        float _1678 = _1617 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_1189, _1190, _1191), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4490 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1703 + 1.0))) + _1708) * _1630;
        float _1718 = _1598 * 0.5;
        float _1719 = _1608 * 0.5;
        float _1720 = _1618 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_1189, _1190, _1191), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4501 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4512 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4523 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_1745 + 1.0))) + _1750) * _1631;
        _1767 = _1598;
        _1769 = _1597;
        _1770 = _1596;
        _1771 = _1608;
        _1772 = _1607;
        _1773 = _1606;
        _1774 = _1618;
        _1775 = _1617;
        _1776 = _1616;
        _1777 = _1631;
        _1778 = _1630;
        _1779 = _1629;
        _1780 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
        _1781 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
        _1782 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
    }
    else
    {
        _1767 = _1768;
        _1769 = _1768;
        _1770 = _1768;
        _1771 = _1768;
        _1772 = _1768;
        _1773 = _1768;
        _1774 = _1768;
        _1775 = _1768;
        _1776 = _1768;
        _1777 = _1768;
        _1778 = _1768;
        _1779 = _1768;
        _1780 = 0.0;
        _1781 = 0.0;
        _1782 = 0.0;
    }
    float _2077;
    float _2078;
    float _2079;
    float _2080;
    float _2081;
    float _2082;
    float _2083;
    float _2084;
    float _2085;
    float _2086;
    float _2087;
    float _2088;
    float _2089;
    float _2090;
    float _2091;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1808 = fma(_1438, cbModelParam._m0[30u].z, fma(_1434, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1430));
        float _1812 = fma(_1438, cbModelParam._m0[31u].z, fma(_1434, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1430));
        float _1816 = fma(_1438, cbModelParam._m0[32u].z, fma(_1434, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1430));
        float _1839 = _1430 + _1189;
        float _1840 = _1434 + _1190;
        float _1841 = _1438 + _1191;
        float _1851 = fma(_1841, cbModelParam._m0[30u].z, fma(_1840, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1839)) - _1808;
        float _1852 = fma(_1841, cbModelParam._m0[31u].z, fma(_1840, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1839)) - _1812;
        float _1853 = fma(_1841, cbModelParam._m0[32u].z, fma(_1840, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1839)) - _1816;
        float _1857 = inversesqrt(dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853)));
        float _1870 = ((_1857 * _1851) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1808 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1871 = ((_1857 * _1852) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1812 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1872 = ((_1857 * _1853) / cbModelParam._m0[35u].z) + ((((((_1816 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1874 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1870, _1871, _1872), 0.0);
        vec4 _1881 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1870, _1871, _1872), 0.0);
        vec4 _1888 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1870, _1871, _1872), 0.0);
        vec4 _1895 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1870, _1871, _1872), 0.0);
        float _1907 = exp2((_1874.w + (-0.5)) * 20.0) * 2.0;
        float _1908 = _1907 * (_1874.x + (-0.5));
        float _1909 = _1907 * (_1874.y + (-0.5));
        float _1910 = _1907 * (_1874.z + (-0.5));
        float _1917 = exp2((_1881.w + (-0.5)) * 20.0) * 2.0;
        float _1918 = _1917 * (_1881.x + (-0.5));
        float _1919 = _1917 * (_1881.y + (-0.5));
        float _1920 = _1917 * (_1881.z + (-0.5));
        float _1927 = exp2((_1888.w + (-0.5)) * 20.0) * 2.0;
        float _1928 = _1927 * (_1888.x + (-0.5));
        float _1929 = _1927 * (_1888.y + (-0.5));
        float _1930 = _1927 * (_1888.z + (-0.5));
        float _1937 = exp2((_1895.w + (-0.5)) * 20.0) * 2.0;
        float _1938 = _1937 * (_1895.x + (-0.5));
        float _1939 = _1937 * (_1895.y + (-0.5));
        float _1940 = _1937 * (_1895.z + (-0.5));
        float _1941 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1942 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1943 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1944 = _1908 * 0.5;
        float _1945 = _1918 * 0.5;
        float _1946 = _1928 * 0.5;
        float _1947 = dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946));
        float _1952 = (_1947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1947);
        float _1960 = (dot(vec3(_1189, _1190, _1191), vec3(_1952 * _1944, _1952 * _1945, _1952 * _1946)) + 1.0) * 0.5;
        float _4564 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1969 = sqrt(((_1945 * _1945) + (_1944 * _1944)) + (_1946 * _1946)) / (_1941 + 9.9999997473787516355514526367188e-06);
        float _4575 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _1971 = _1970 * 2.0;
        float _1975 = (1.0 - _1970) / (_1970 + 1.0);
        float _4586 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1976 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _1985 = ((((1.0 - _1976) * (_1971 + 2.0)) * exp2(log2(isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_1971 + 1.0))) + _1976) * _1941;
        float _1986 = _1909 * 0.5;
        float _1987 = _1919 * 0.5;
        float _1988 = _1929 * 0.5;
        float _1989 = dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988));
        float _1994 = (_1989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1989);
        float _2002 = (dot(vec3(_1189, _1190, _1191), vec3(_1994 * _1986, _1994 * _1987, _1994 * _1988)) + 1.0) * 0.5;
        float _4597 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2011 = sqrt(((_1987 * _1987) + (_1986 * _1986)) + (_1988 * _1988)) / (_1942 + 9.9999997473787516355514526367188e-06);
        float _4608 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2012 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2013 = _2012 * 2.0;
        float _2017 = (1.0 - _2012) / (_2012 + 1.0);
        float _4619 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2018 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2027 = ((((1.0 - _2018) * (_2013 + 2.0)) * exp2(log2(isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2013 + 1.0))) + _2018) * _1942;
        float _2028 = _1910 * 0.5;
        float _2029 = _1920 * 0.5;
        float _2030 = _1930 * 0.5;
        float _2031 = dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030));
        float _2036 = (_2031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2031);
        float _2044 = (dot(vec3(_1189, _1190, _1191), vec3(_2036 * _2028, _2036 * _2029, _2036 * _2030)) + 1.0) * 0.5;
        float _4630 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2053 = sqrt(((_2029 * _2029) + (_2028 * _2028)) + (_2030 * _2030)) / (_1943 + 9.9999997473787516355514526367188e-06);
        float _4641 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2055 = _2054 * 2.0;
        float _2059 = (1.0 - _2054) / (_2054 + 1.0);
        float _4652 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2060 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2069 = ((((1.0 - _2060) * (_2055 + 2.0)) * exp2(log2(isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2055 + 1.0))) + _2060) * _1943;
        _2077 = _1910;
        _2078 = _1909;
        _2079 = _1908;
        _2080 = _1920;
        _2081 = _1919;
        _2082 = _1918;
        _2083 = _1930;
        _2084 = _1929;
        _2085 = _1928;
        _2086 = _1943;
        _2087 = _1942;
        _2088 = _1941;
        _2089 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)));
        _2090 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0)));
        _2091 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0)));
    }
    else
    {
        _2077 = _1768;
        _2078 = _1768;
        _2079 = _1768;
        _2080 = _1768;
        _2081 = _1768;
        _2082 = _1768;
        _2083 = _1768;
        _2084 = _1768;
        _2085 = _1768;
        _2086 = _1768;
        _2087 = _1768;
        _2088 = _1768;
        _2089 = 0.0;
        _2090 = 0.0;
        _2091 = 0.0;
    }
    float _2101 = (cbModelParam._m0[1u].x * (_2089 - _1780)) + _1780;
    float _2102 = (cbModelParam._m0[1u].x * (_2090 - _1781)) + _1781;
    float _2103 = (cbModelParam._m0[1u].x * (_2091 - _1782)) + _1782;
    float _2124 = fma(_2103, cbSceneParam._m0[89u].z, fma(_2102, cbSceneParam._m0[89u].y, _2101 * cbSceneParam._m0[89u].x));
    float _2127 = fma(_2103, cbSceneParam._m0[90u].z, fma(_2102, cbSceneParam._m0[90u].y, _2101 * cbSceneParam._m0[90u].x));
    float _2130 = fma(_2103, cbSceneParam._m0[91u].z, fma(_2102, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2101));
    float _2145 = _1374 * 0.5;
    float _2146 = _1375 * 0.5;
    float _2147 = _1376 * 0.5;
    float _2148 = dot(vec4(_2145, _2146, _2147, 1.0), vec4(_2079, _2082, _2085, _2088));
    float _2151 = dot(vec4(_2145, _2146, _2147, 1.0), vec4(_2078, _2081, _2084, _2087));
    float _2154 = dot(vec4(_2145, _2146, _2147, 1.0), vec4(_2077, _2080, _2083, _2086));
    float _2188;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2161 = dot(vec4(_2145, _2146, _2147, 1.0), vec4(_1767, _1771, _1774, _1777));
        float _2165 = dot(vec4(_2145, _2146, _2147, 1.0), vec4(_1769, _1772, _1775, _1778));
        float _2169 = dot(vec4(_2145, _2146, _2147, 1.0), vec4(_1770, _1773, _1776, _1779));
        float _2176 = dot(vec4(cbModelParam._m0[39u]), vec4(_2145, _2146, _2147, 1.0));
        _2188 = dot(vec3(isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0)), isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0)), isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2176) ? 0.0 : (isnan(0.0) ? _2176 : max(0.0, _2176))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2188 = 1.0;
    }
    float _2199;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2190 = dot(vec4(cbModelParam._m0[40u]), vec4(_2145, _2146, _2147, 1.0));
        _2199 = dot(vec3(isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0)), isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0)), isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2190) ? 0.0 : (isnan(0.0) ? _2190 : max(0.0, _2190))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2199 = 1.0;
    }
    float _2203 = (_2199 * cbModelParam._m0[1u].x) + (_2188 * (1.0 - cbModelParam._m0[1u].x));
    float _2213 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1192);
    float _2214 = isnan(_2213) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2213 : min(cbModelParam._m0[25u].z, _2213));
    float _2294;
    float _2296;
    float _2298;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2261 = fma(_1438, cbModelParam._m0[13u].z, fma(_1434, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1430)) + cbModelParam._m0[13u].w;
        float _2265 = fma(_1438, cbModelParam._m0[14u].z, fma(_1434, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1430)) + cbModelParam._m0[14u].w;
        float _2269 = fma(_1438, cbModelParam._m0[15u].z, fma(_1434, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1430)) + cbModelParam._m0[15u].w;
        float _2272 = fma(_1376, cbModelParam._m0[13u].z, fma(_1375, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1374));
        float _2275 = fma(_1376, cbModelParam._m0[14u].z, fma(_1375, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1374));
        float _2278 = fma(_1376, cbModelParam._m0[15u].z, fma(_1375, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1374));
        float _2306;
        if (_2272 > 0.0)
        {
            _2306 = abs((1.0 - _2261) / _2272);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2272 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2261 + 1.0) / _2272);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2306 = frontier_phi_17_15_ladder;
        }
        float _2508;
        if (_2275 > 0.0)
        {
            _2508 = abs((1.0 - _2265) / _2275);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2275 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2265 + 1.0) / _2275);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2508 = frontier_phi_26_22_ladder;
        }
        float _2762;
        if (_2278 > 0.0)
        {
            _2762 = abs((1.0 - _2269) / _2278);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2278 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2269 + 1.0) / _2278);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2762 = frontier_phi_38_33_ladder;
        }
        float _2764 = isnan(_2508) ? _2306 : (isnan(_2306) ? _2508 : min(_2306, _2508));
        float _2765 = isnan(_2762) ? _2764 : (isnan(_2764) ? _2762 : min(_2764, _2762));
        float _2769 = (_2765 * _2272) + _2261;
        float _2770 = (_2765 * _2275) + _2265;
        float _2771 = (_2765 * _2278) + _2269;
        float _2772 = _2765 * 9.9999997473787516355514526367188e-05;
        float _2774 = (-1.0) - _2772;
        float _2776 = _2772 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2771 > _2776) || ((_2771 < _2774) || ((_2770 > _2776) || ((_2770 < _2774) || ((_2769 < _2774) || (_2769 > _2776))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2899 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2771, cbModelParam._m0[9u].z, fma(_2770, cbModelParam._m0[9u].y, _2769 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2771, cbModelParam._m0[10u].z, fma(_2770, cbModelParam._m0[10u].y, _2769 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2771, cbModelParam._m0[11u].z, fma(_2770, cbModelParam._m0[11u].y, _2769 * cbModelParam._m0[11u].x))), _2214);
            frontier_phi_16_38_ladder = _2899.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2899.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2899.x * cbModelParam._m0[1u].y;
        }
        _2294 = frontier_phi_16_38_ladder_2;
        _2296 = frontier_phi_16_38_ladder_1;
        _2298 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2282 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1374, _1375, _1376), _2214);
        _2294 = _2282.x * cbModelParam._m0[1u].y;
        _2296 = _2282.y * cbModelParam._m0[1u].y;
        _2298 = _2282.z * cbModelParam._m0[1u].y;
    }
    float _2302 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1192);
    float _2303 = isnan(_2302) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2302 : min(cbModelParam._m0[25u].w, _2302));
    float _2392;
    float _2394;
    float _2396;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2356 = fma(_1438, cbModelParam._m0[21u].z, fma(_1434, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1430)) + cbModelParam._m0[21u].w;
        float _2360 = fma(_1438, cbModelParam._m0[22u].z, fma(_1434, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1430)) + cbModelParam._m0[22u].w;
        float _2364 = fma(_1438, cbModelParam._m0[23u].z, fma(_1434, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1430)) + cbModelParam._m0[23u].w;
        float _2367 = fma(_1376, cbModelParam._m0[21u].z, fma(_1375, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1374));
        float _2370 = fma(_1376, cbModelParam._m0[22u].z, fma(_1375, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1374));
        float _2373 = fma(_1376, cbModelParam._m0[23u].z, fma(_1375, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1374));
        float _2513;
        if (_2367 > 0.0)
        {
            _2513 = abs((1.0 - _2356) / _2367);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2367 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2356 + 1.0) / _2367);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2513 = frontier_phi_28_24_ladder;
        }
        float _2789;
        if (_2370 > 0.0)
        {
            _2789 = abs((1.0 - _2360) / _2370);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2370 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2360 + 1.0) / _2370);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2789 = frontier_phi_40_35_ladder;
        }
        float _3002;
        if (_2373 > 0.0)
        {
            _3002 = abs((1.0 - _2364) / _2373);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2373 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2364 + 1.0) / _2373);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3002 = frontier_phi_49_46_ladder;
        }
        float _3004 = isnan(_2789) ? _2513 : (isnan(_2513) ? _2789 : min(_2513, _2789));
        float _3005 = isnan(_3002) ? _3004 : (isnan(_3004) ? _3002 : min(_3004, _3002));
        float _3009 = (_3005 * _2367) + _2356;
        float _3010 = (_3005 * _2370) + _2360;
        float _3011 = (_3005 * _2373) + _2364;
        float _3012 = _3005 * 9.9999997473787516355514526367188e-05;
        float _3013 = (-1.0) - _3012;
        float _3015 = _3012 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_3011 > _3015) || ((_3011 < _3013) || ((_3010 > _3015) || ((_3010 < _3013) || ((_3009 < _3013) || (_3009 > _3015))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3210 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3011, cbModelParam._m0[17u].z, fma(_3010, cbModelParam._m0[17u].y, _3009 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3011, cbModelParam._m0[18u].z, fma(_3010, cbModelParam._m0[18u].y, _3009 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3011, cbModelParam._m0[19u].z, fma(_3010, cbModelParam._m0[19u].y, _3009 * cbModelParam._m0[19u].x))), _2303);
            frontier_phi_25_49_ladder = _3210.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3210.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3210.x * cbModelParam._m0[1u].z;
        }
        _2392 = frontier_phi_25_49_ladder_2;
        _2394 = frontier_phi_25_49_ladder_1;
        _2396 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2376 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1374, _1375, _1376), _2303);
        _2392 = _2376.x * cbModelParam._m0[1u].z;
        _2394 = _2376.y * cbModelParam._m0[1u].z;
        _2396 = _2376.z * cbModelParam._m0[1u].z;
    }
    float _2409 = (((_1401 * _1350) + _1402) * _1366) * ((cbModelParam._m0[1u].w * (_2392 - _2294)) + _2294);
    float _2411 = (((_1401 * _1352) + _1402) * _1366) * ((cbModelParam._m0[1u].w * (_2394 - _2296)) + _2296);
    float _2413 = (((_1401 * _1353) + _1402) * _1366) * ((cbModelParam._m0[1u].w * (_2396 - _2298)) + _2298);
    float _2416 = fma(_2413, cbSceneParam._m0[89u].z, fma(_2411, cbSceneParam._m0[89u].y, _2409 * cbSceneParam._m0[89u].x));
    float _2419 = fma(_2413, cbSceneParam._m0[90u].z, fma(_2411, cbSceneParam._m0[90u].y, _2409 * cbSceneParam._m0[90u].x));
    float _2422 = fma(_2413, cbSceneParam._m0[91u].z, fma(_2411, cbSceneParam._m0[91u].y, _2409 * cbSceneParam._m0[91u].x));
    uvec4 _2432 = floatBitsToUint(cbInstanceData._m0[_305 + 5u]);
    uint _2434 = _2432.x * 14u;
    uint _2435 = _2434 + 13u;
    float _2442 = _1366 + (-1.0);
    float _2447 = (cbLight._m0[_2435].x * _2442) + 1.0;
    float _2448 = (cbLight._m0[_2435].y * _2442) + 1.0;
    float _2449 = (cbLight._m0[_2435].z * _2442) + 1.0;
    float _2450 = (cbLight._m0[_2435].w * _2442) + 1.0;
    uint _2451 = _2434 + 5u;
    float _2457 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
    uint _2461 = _2434 + 4u;
    float _2467 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
    uint _2471 = _2434 | 1u;
    float _2482 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_1189, _1190, _1191));
    float _2485 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_1189, _1190, _1191));
    float _4788 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _4799 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2490 = (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * 0.3183098733425140380859375;
    float _2492 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * 0.3183098733425140380859375;
    float _2499 = ((cbLight._m0[_2451].x * _2457) * _2492) + ((cbLight._m0[_2461].x * _2467) * _2490);
    float _2500 = ((_2457 * cbLight._m0[_2451].y) * _2492) + ((_2467 * cbLight._m0[_2461].y) * _2490);
    float _2501 = ((_2457 * cbLight._m0[_2451].z) * _2492) + ((_2467 * cbLight._m0[_2461].z) * _2490);
    uvec4 _2505 = floatBitsToUint(cbLight._m0[_2434 + 12u]);
    bool _2507 = _2505.x == 0u;
    float _2518;
    float _2520;
    float _2522;
    if (_2507)
    {
        _2518 = _2499;
        _2520 = _2500;
        _2522 = _2501;
    }
    else
    {
        uint _2526 = _2434 + 6u;
        float _2542 = (dot(vec3(cbLight._m0[_2434 + 2u].xyz), vec3(_1189, _1190, _1191)) * 0.5) + 0.5;
        float _2543 = _2542 * _2542;
        float _4810 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2544 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
        float _2545 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2518 = (((cbLight._m0[_2526].x * 0.3183098733425140380859375) * _2544) * _2545) + _2499;
        _2520 = (((cbLight._m0[_2526].y * 0.3183098733425140380859375) * _2544) * _2545) + _2500;
        _2522 = (((cbLight._m0[_2526].z * 0.3183098733425140380859375) * _2544) * _2545) + _2501;
    }
    bool _2525 = _2505.y == 0u;
    float _2563;
    float _2565;
    float _2567;
    if (_2525)
    {
        _2563 = _2518;
        _2565 = _2520;
        _2567 = _2522;
    }
    else
    {
        uint _2733 = _2434 + 7u;
        float _2749 = (dot(vec3(cbLight._m0[_2434 + 3u].xyz), vec3(_1189, _1190, _1191)) * 0.5) + 0.5;
        float _2750 = _2749 * _2749;
        float _4826 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2751 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2752 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2563 = (((cbLight._m0[_2733].x * 0.3183098733425140380859375) * _2751) * _2752) + _2518;
        _2565 = (((cbLight._m0[_2733].y * 0.3183098733425140380859375) * _2751) * _2752) + _2520;
        _2567 = (((cbLight._m0[_2733].z * 0.3183098733425140380859375) * _2751) * _2752) + _2522;
    }
    uint _2570 = _2434 + 8u;
    float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _1192) * 0.949999988079071044921875);
    float _2584 = _2583 * _2583;
    float _2585 = cbLight._m0[_2434].x + _1268;
    float _2586 = cbLight._m0[_2434].y + _1269;
    float _2587 = cbLight._m0[_2434].z + _1270;
    float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
    float _2592 = _2591 * _2585;
    float _2593 = _2591 * _2586;
    float _2594 = _2591 * _2587;
    float _2595 = dot(vec3(_1189, _1190, _1191), vec3(cbLight._m0[_2434].xyz));
    float _4842 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2598 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
    float _4853 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
    float _2599 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
    float _2600 = dot(vec3(_1189, _1190, _1191), vec3(_2592, _2593, _2594));
    float _4864 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2603 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
    float _2604 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2592, _2593, _2594));
    float _4875 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2608 = _2584 * _2584;
    float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
    float _2620 = exp2(log2(1.0 - (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) * 5.0);
    float _2621 = 0.959999978542327880859375 - _1347;
    float _2623 = 0.959999978542327880859375 - _1348;
    float _2624 = 0.959999978542327880859375 - _1349;
    float _2631 = 1.0 - _2584;
    float _2642 = (0.5 / (((_2599 * ((_2598 * _2631) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2631) + _2584) * _2598))) * _2598;
    float _4886 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2644 = (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
    uint _2655 = _2434 + 9u;
    float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2471].w)) * _1192) * 0.949999988079071044921875);
    float _2667 = _2666 * _2666;
    float _2668 = cbLight._m0[_2471].x + _1268;
    float _2669 = cbLight._m0[_2471].y + _1269;
    float _2670 = cbLight._m0[_2471].z + _1270;
    float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
    float _2675 = _2674 * _2668;
    float _2676 = _2674 * _2669;
    float _2677 = _2674 * _2670;
    float _2678 = dot(vec3(_1189, _1190, _1191), vec3(cbLight._m0[_2471].xyz));
    float _4897 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2681 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
    float _2682 = dot(vec3(_1189, _1190, _1191), vec3(_2675, _2676, _2677));
    float _4908 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
    float _2685 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
    float _2686 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_2675, _2676, _2677));
    float _4919 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2690 = _2667 * _2667;
    float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
    float _2701 = exp2(log2(1.0 - (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) * 5.0);
    float _2708 = 1.0 - _2667;
    float _2718 = (0.5 / (((_2599 * ((_2681 * _2708) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2708) + _2667) * _2681))) * _2681;
    float _4930 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2720 = (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
    float _2730 = (((((_2701 * _2621) + _1350) * cbLight._m0[_2655].x) * _2720) * _2457) + (((((_2620 * _2621) + _1350) * cbLight._m0[_2570].x) * _2644) * _2467);
    float _2731 = (((((_2701 * _2623) + _1352) * cbLight._m0[_2655].y) * _2720) * _2457) + (((((_2620 * _2623) + _1352) * cbLight._m0[_2570].y) * _2644) * _2467);
    float _2732 = (((((_2701 * _2624) + _1353) * cbLight._m0[_2655].z) * _2720) * _2457) + (((((_2620 * _2624) + _1353) * cbLight._m0[_2570].z) * _2644) * _2467);
    float _2794;
    float _2796;
    float _2798;
    if (_2507)
    {
        _2794 = _2730;
        _2796 = _2731;
        _2798 = _2732;
    }
    else
    {
        uint _2800 = _2434 + 2u;
        uint _2804 = _2434 + 10u;
        float _2818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2800].w)) * _1192) * 0.949999988079071044921875);
        float _2819 = _2818 * _2818;
        float _2820 = cbLight._m0[_2800].x + _1268;
        float _2821 = cbLight._m0[_2800].y + _1269;
        float _2822 = cbLight._m0[_2800].z + _1270;
        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
        float _2827 = _2826 * _2820;
        float _2828 = _2826 * _2821;
        float _2829 = _2826 * _2822;
        float _2830 = dot(vec3(_1189, _1190, _1191), vec3(cbLight._m0[_2800].xyz));
        float _4941 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
        float _2834 = dot(vec3(_1189, _1190, _1191), vec3(_2827, _2828, _2829));
        float _4952 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
        float _2838 = dot(vec3(cbLight._m0[_2800].xyz), vec3(_2827, _2828, _2829));
        float _4963 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2842 = _2819 * _2819;
        float _2846 = ((_2837 * _2837) * (_2842 + (-1.0))) + 1.0;
        float _2853 = exp2(log2(1.0 - (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0)))) * 5.0);
        float _2860 = 1.0 - _2819;
        float _2870 = (0.5 / (((_2599 * ((_2833 * _2860) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2860) + _2819) * _2833))) * _2833;
        float _4974 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2872 = (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0))) * (_2842 / ((_2846 * _2846) * 3.141590118408203125));
        float _2873 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2794 = (((((_2853 * _2621) + _1350) * cbLight._m0[_2804].x) * _2872) * _2873) + _2730;
        _2796 = (((((_2853 * _2623) + _1352) * cbLight._m0[_2804].y) * _2872) * _2873) + _2731;
        _2798 = (((((_2853 * _2624) + _1353) * cbLight._m0[_2804].z) * _2872) * _2873) + _2732;
    }
    float _2908;
    float _2910;
    float _2912;
    if (_2525)
    {
        _2908 = _2794;
        _2910 = _2796;
        _2912 = _2798;
    }
    else
    {
        uint _2919 = _2434 + 3u;
        uint _2923 = _2434 + 11u;
        float _2937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2919].w)) * _1192) * 0.949999988079071044921875);
        float _2938 = _2937 * _2937;
        float _2939 = cbLight._m0[_2919].x + _1268;
        float _2940 = cbLight._m0[_2919].y + _1269;
        float _2941 = cbLight._m0[_2919].z + _1270;
        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
        float _2946 = _2945 * _2939;
        float _2947 = _2945 * _2940;
        float _2948 = _2945 * _2941;
        float _2949 = dot(vec3(_1189, _1190, _1191), vec3(cbLight._m0[_2919].xyz));
        float _4990 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2952 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
        float _2953 = dot(vec3(_1189, _1190, _1191), vec3(_2946, _2947, _2948));
        float _5001 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2956 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
        float _2957 = dot(vec3(cbLight._m0[_2919].xyz), vec3(_2946, _2947, _2948));
        float _5012 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2961 = _2938 * _2938;
        float _2965 = ((_2956 * _2956) * (_2961 + (-1.0))) + 1.0;
        float _2972 = exp2(log2(1.0 - (isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0)))) * 5.0);
        float _2979 = 1.0 - _2938;
        float _2989 = (0.5 / (((_2599 * ((_2952 * _2979) + _2938)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2979) + _2938) * _2952))) * _2952;
        float _5023 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2991 = (isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0))) * (_2961 / ((_2965 * _2965) * 3.141590118408203125));
        float _2992 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2908 = (((((_2972 * _2621) + _1350) * cbLight._m0[_2923].x) * _2991) * _2992) + _2794;
        _2910 = (((((_2972 * _2623) + _1352) * cbLight._m0[_2923].y) * _2991) * _2992) + _2796;
        _2912 = (((((_2972 * _2624) + _1353) * cbLight._m0[_2923].z) * _2991) * _2992) + _2798;
    }
    float _3127;
    float _3129;
    float _3131;
    float _3133;
    float _3135;
    float _3137;
    if (_2432.y == 0u)
    {
        float _3067 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3068 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3067;
        float _3069 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3067;
        float _3070 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3067;
        uvec4 _3082 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3083 = _3082.x;
        uint _3094 = uint((float(_3082.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1289) / _3083))) + floor(float(uint(cbSceneParam._m0[85u].x * _1288) / _3083)));
        float _3104 = (log2(_3070 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3105 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
        uint _3108 = uint(isnan(14.0) ? _3105 : (isnan(_3105) ? 14.0 : min(_3105, 14.0)));
        uvec4 _3113 = texelFetch(g_lightClusterGridBuffer, int(((_3108 << 2u) + (_3094 << 6u)) >> 2u));
        uint _3114 = _3113.x;
        uint _3115 = _3082.z;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        if (((((1u << ((_3115 >> 4u) & 15u)) + 4294967295u) & _3114) == 0u) || ((_3115 & 240u) == 0u))
        {
            _3215 = 0.0;
            _3217 = 0.0;
            _3219 = 0.0;
            _3221 = 0.0;
            _3223 = 0.0;
            _3225 = 0.0;
        }
        else
        {
            float _3216;
            float _3218;
            float _3220;
            float _3222;
            float _3224;
            float _3226;
            float _3368 = 0.0;
            float _3369 = 0.0;
            float _3370 = 0.0;
            float _3371 = 0.0;
            float _3372 = 0.0;
            float _3373 = 0.0;
            uint _3374 = 0u;
            uint _3383;
            bool _3384;
            for (;;)
            {
                _3383 = texelFetch(g_lightClassification, int((((_3108 << 5u) + (_3094 << 9u)) + (_3374 << 2u)) >> 2u)).x;
                _3384 = _3383 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3384)
                {
                    frontier_phi_66_pred = _3368;
                    frontier_phi_66_pred_1 = _3373;
                    frontier_phi_66_pred_2 = _3372;
                    frontier_phi_66_pred_3 = _3371;
                    frontier_phi_66_pred_4 = _3370;
                    frontier_phi_66_pred_5 = _3369;
                }
                else
                {
                    float _3513;
                    float _3514;
                    float _3515;
                    float _3516;
                    float _3517;
                    float _3518;
                    uint _3519;
                    _3513 = _3368;
                    _3514 = _3369;
                    _3515 = _3370;
                    _3516 = _3371;
                    _3517 = _3372;
                    _3518 = _3373;
                    _3519 = _3383;
                    float _3440;
                    float _3441;
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    for (;;)
                    {
                        uint _3523 = uint(findLSB(_3519)) + (_3374 << 5u);
                        uint _3520 = (_3519 + 4294967295u) & _3519;
                        uint _3525 = _3523 * 48u;
                        vec4 _3539 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3525)).x, texelFetch(g_PointLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3525 + 3u)).x));
                        uint _3545 = (_3523 * 48u) + 4u;
                        vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3545)).x, texelFetch(g_PointLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3545 + 3u)).x));
                        uint _3564 = (_3523 * 48u) + 8u;
                        vec3 _3575 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3564)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 2u)).x));
                        float _3579 = _3539.x - _3068;
                        float _3580 = _3539.y - _3069;
                        float _3581 = _3539.z - _3070;
                        float _3582 = dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581));
                        float _3585 = inversesqrt(_3582);
                        float _3586 = _3585 * _3579;
                        float _3587 = _3585 * _3580;
                        float _3588 = _3585 * _3581;
                        float _3589 = dot(vec3(_1307, _1310, _1313), vec3(_3586, _3587, _3588));
                        float _3594 = 1.0 - (_3582 * _3539.w);
                        float _5049 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3595 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
                        float _3596 = sqrt(_3582) * _3558.w;
                        float _3599 = 1.39999997615814208984375 / (_3596 + 1.39999997615814208984375);
                        float _3600 = _3599 * _3599;
                        float _3603 = ((1.0 - _3600) * _3589) + _3600;
                        float _3606 = _3596 * _3596;
                        float _3610 = ((isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0))) * _3595) / ((_3606 * 0.699999988079071044921875) + 1.0);
                        float _3614 = (-0.0) - _3068;
                        float _3615 = (-0.0) - _3069;
                        float _3616 = (-0.0) - _3070;
                        float _3620 = inversesqrt(dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616)));
                        float _3621 = _3620 * _3614;
                        float _3622 = _3620 * _3615;
                        float _3623 = _3620 * _3616;
                        float _3631 = exp2(log2(1.0 / ((_3606 * 3.5) + 5.0)) * 0.25);
                        float _3632 = 1.0 - _1382;
                        float _3639 = sqrt(1.0 - ((1.0 - (_3632 * _3632)) * (1.0 - (_3631 * _3631))));
                        float _3640 = _3639 * _3639;
                        float _3641 = _3640 * _3640;
                        float _3642 = _3621 + _3586;
                        float _3643 = _3622 + _3587;
                        float _3644 = _3623 + _3588;
                        float _3648 = inversesqrt(dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644)));
                        float _3652 = dot(vec3(_1307, _1310, _1313), vec3(_3621, _3622, _3623));
                        float _5065 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                        float _3655 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
                        float _3656 = dot(vec3(_1307, _1310, _1313), vec3(_3648 * _3642, _3648 * _3643, _3648 * _3644));
                        float _5076 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                        float _3659 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
                        float _3663 = ((_3659 * _3659) * (_3641 + (-1.0))) + 1.0;
                        float _3664 = _3599 * _3640;
                        float _3665 = _3664 * _3664;
                        float _3668 = ((1.0 - _3665) * _3589) + _3665;
                        float _5087 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                        float _3669 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
                        float _3670 = 1.0 - _3640;
                        float _3680 = (0.5 / (((_3669 * ((_3655 * _3670) + _3640)) + 9.9999999392252902907785028219223e-09) + (((_3669 * _3670) + _3640) * _3655))) * _3669;
                        float _5098 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                        float _3691 = (((_3641 * 3.1415927410125732421875) * (isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0)))) / ((_3663 * _3663) * ((_3606 * 2.1991131305694580078125) + 3.141590118408203125))) * _3595;
                        _3443 = (_3610 * _3558.x) + _3516;
                        _3444 = (_3610 * _3558.y) + _3517;
                        _3445 = (_3610 * _3558.z) + _3518;
                        _3440 = (_3691 * _3575.x) + _3513;
                        _3441 = (_3691 * _3575.y) + _3514;
                        _3442 = (_3691 * _3575.z) + _3515;
                        if (_3520 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3513 = _3440;
                            _3514 = _3441;
                            _3515 = _3442;
                            _3516 = _3443;
                            _3517 = _3444;
                            _3518 = _3445;
                            _3519 = _3520;
                        }
                    }
                    frontier_phi_66_pred = _3440;
                    frontier_phi_66_pred_1 = _3445;
                    frontier_phi_66_pred_2 = _3444;
                    frontier_phi_66_pred_3 = _3443;
                    frontier_phi_66_pred_4 = _3442;
                    frontier_phi_66_pred_5 = _3441;
                }
                _3216 = frontier_phi_66_pred;
                _3226 = frontier_phi_66_pred_1;
                _3224 = frontier_phi_66_pred_2;
                _3222 = frontier_phi_66_pred_3;
                _3220 = frontier_phi_66_pred_4;
                _3218 = frontier_phi_66_pred_5;
                uint _3375 = _3374 + 1u;
                if (_3375 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3368 = _3216;
                    _3369 = _3218;
                    _3370 = _3220;
                    _3371 = _3222;
                    _3372 = _3224;
                    _3373 = _3226;
                    _3374 = _3375;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3215 = _3216;
            _3217 = _3218;
            _3219 = _3220;
            _3221 = _3222;
            _3223 = _3224;
            _3225 = _3226;
        }
        uvec4 _3229 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3230 = _3229.z;
        uint _3232 = (_3230 >> 8u) & 15u;
        float _3336;
        float _3338;
        float _3340;
        float _3342;
        float _3344;
        float _3346;
        if (((4294967295u << _3232) & _3114) == 0u)
        {
            _3336 = _3215;
            _3338 = _3217;
            _3340 = _3219;
            _3342 = _3221;
            _3344 = _3223;
            _3346 = _3225;
        }
        else
        {
            float _3361 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
            float _3362 = _3361 * _3068;
            float _3363 = _3361 * _3069;
            float _3364 = _3361 * _3070;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3232 < ((_3230 >> 12u) & 15u))
            {
                float _3337;
                float _3339;
                float _3341;
                float _3343;
                float _3345;
                float _3347;
                float _3496 = _3215;
                float _3497 = _3217;
                float _3498 = _3219;
                float _3499 = _3221;
                float _3500 = _3223;
                float _3501 = _3225;
                uint _3502 = _3232;
                uint _3511;
                bool _3512;
                for (;;)
                {
                    _3511 = texelFetch(g_lightClassification, int((((_3108 << 5u) + (_3094 << 9u)) + (_3502 << 2u)) >> 2u)).x;
                    _3512 = _3511 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3512)
                    {
                        frontier_phi_77_pred = _3501;
                        frontier_phi_77_pred_1 = _3500;
                        frontier_phi_77_pred_2 = _3499;
                        frontier_phi_77_pred_3 = _3498;
                        frontier_phi_77_pred_4 = _3497;
                        frontier_phi_77_pred_5 = _3496;
                    }
                    else
                    {
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3998;
                        float _3999;
                        float _4000;
                        float _4001;
                        float _4002;
                        float _4003;
                        float _3718 = _3496;
                        float _3719 = _3497;
                        float _3720 = _3498;
                        float _3721 = _3499;
                        float _3722 = _3500;
                        float _3723 = _3501;
                        uint _3724 = _3511;
                        uint _3725;
                        vec4 _3750;
                        float _3751;
                        vec4 _3766;
                        vec3 _3778;
                        vec4 _3793;
                        vec4 _3808;
                        float _3854;
                        bool _3855;
                        for (;;)
                        {
                            uint _3735 = ((_3502 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3724));
                            _3725 = (_3724 + 4294967295u) & _3724;
                            uint _3737 = _3735 * 40u;
                            _3750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 3u)).x));
                            _3751 = _3750.w;
                            uint _3753 = (_3735 * 40u) + 4u;
                            _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            uint _3768 = (_3735 * 40u) + 8u;
                            _3778 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 2u)).x));
                            uint _3780 = (_3735 * 40u) + 16u;
                            _3793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 3u)).x));
                            uint _3795 = (_3735 * 40u) + 20u;
                            _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            uint _3810 = (_3735 * 40u) + 24u;
                            vec4 _3823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 3u)).x));
                            uint _3829 = (_3735 * 40u) + 28u;
                            vec4 _3842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 3u)).x));
                            _3854 = fma(_3070, _3842.z, fma(_3069, _3842.y, _3842.x * _3068)) + _3842.w;
                            _3855 = !((fma(_3070, _3823.z, fma(_3069, _3823.y, _3823.x * _3068)) + _3823.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3855)
                            {
                                float _3882 = _3750.x - _3068;
                                float _3883 = _3750.y - _3069;
                                float _3884 = _3750.z - _3070;
                                float _3885 = dot(vec3(_3882, _3883, _3884), vec3(_3882, _3883, _3884));
                                float _3888 = inversesqrt(_3885);
                                float _3889 = _3888 * _3882;
                                float _3890 = _3888 * _3883;
                                float _3891 = _3888 * _3884;
                                float _3895 = 1.0 - (_3885 / (_3751 * _3751));
                                float _5109 = isnan(0.0) ? _3895 : (isnan(_3895) ? 0.0 : max(_3895, 0.0));
                                float _3896 = isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0));
                                float _3900 = sqrt(_3885) * _3766.w;
                                float _3902 = 1.39999997615814208984375 / (_3900 + 1.39999997615814208984375);
                                float _3903 = _3902 * _3902;
                                float _3906 = ((1.0 - _3903) * dot(vec3(_3889, _3890, _3891), vec3(_1307, _1310, _1313))) + _3903;
                                float _3909 = _3900 * _3900;
                                float _3913 = (fma(_3070, _3793.z, fma(_3069, _3793.y, _3793.x * _3068)) + _3793.w) / _3854;
                                float _3914 = (fma(_3070, _3808.z, fma(_3069, _3808.y, _3808.x * _3068)) + _3808.w) / _3854;
                                float _3918 = 1.0 - dot(vec2(_3913, _3914), vec2(_3913, _3914));
                                float _5125 = isnan(0.0) ? _3918 : (isnan(_3918) ? 0.0 : max(_3918, 0.0));
                                float _3919 = isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0));
                                float _3920 = _3919 * (((isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0))) * _3896) / ((_3909 * 0.699999988079071044921875) + 1.0));
                                float _3932 = exp2(log2(1.0 / ((_3909 * 3.5) + 5.0)) * 0.25);
                                float _3933 = 1.0 - _1382;
                                float _3940 = sqrt(1.0 - ((1.0 - (_3933 * _3933)) * (1.0 - (_3932 * _3932))));
                                float _3941 = _3940 * _3940;
                                float _3942 = _3941 * _3941;
                                float _3943 = _3889 - _3362;
                                float _3944 = _3890 - _3363;
                                float _3945 = _3891 - _3364;
                                float _3949 = inversesqrt(dot(vec3(_3943, _3944, _3945), vec3(_3943, _3944, _3945)));
                                float _3953 = dot(vec3(_1307, _1310, _1313), vec3((-0.0) - _3362, (-0.0) - _3363, (-0.0) - _3364));
                                float _5136 = isnan(0.0) ? _3953 : (isnan(_3953) ? 0.0 : max(_3953, 0.0));
                                float _3956 = isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0));
                                float _3957 = dot(vec3(_1307, _1310, _1313), vec3(_3949 * _3943, _3949 * _3944, _3949 * _3945));
                                float _5147 = isnan(0.0) ? _3957 : (isnan(_3957) ? 0.0 : max(_3957, 0.0));
                                float _3960 = isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0));
                                float _3964 = ((_3960 * _3960) * (_3942 + (-1.0))) + 1.0;
                                float _3965 = _3902 * _3941;
                                float _3966 = _3965 * _3965;
                                float _3972 = ((1.0 - _3966) * dot(vec3(_1307, _1310, _1313), vec3(_3889, _3890, _3891))) + _3966;
                                float _5158 = isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0));
                                float _3973 = isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0));
                                float _3974 = 1.0 - _3941;
                                float _3984 = (0.5 / (((_3973 * ((_3956 * _3974) + _3941)) + 9.9999999392252902907785028219223e-09) + (((_3973 * _3974) + _3941) * _3956))) * _3973;
                                float _5169 = isnan(0.0) ? _3984 : (isnan(_3984) ? 0.0 : max(_3984, 0.0));
                                float _3994 = (_3919 * _3896) * (((_3942 * 3.1415927410125732421875) * (isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0)))) / ((_3964 * _3964) * ((_3909 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3920 * _3766.y;
                                frontier_phi_83_pred_1 = _3920 * _3766.x;
                                frontier_phi_83_pred_2 = _3994 * _3778.z;
                                frontier_phi_83_pred_3 = _3994 * _3778.y;
                                frontier_phi_83_pred_4 = _3994 * _3778.x;
                                frontier_phi_83_pred_5 = _3920 * _3766.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _4002 = frontier_phi_83_pred;
                            _4001 = frontier_phi_83_pred_1;
                            _4000 = frontier_phi_83_pred_2;
                            _3999 = frontier_phi_83_pred_3;
                            _3998 = frontier_phi_83_pred_4;
                            _4003 = frontier_phi_83_pred_5;
                            _3708 = _4001 + _3721;
                            _3709 = _4002 + _3722;
                            _3710 = _4003 + _3723;
                            _3705 = _3998 + _3718;
                            _3706 = _3999 + _3719;
                            _3707 = _4000 + _3720;
                            if (_3725 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3718 = _3705;
                                _3719 = _3706;
                                _3720 = _3707;
                                _3721 = _3708;
                                _3722 = _3709;
                                _3723 = _3710;
                                _3724 = _3725;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3710;
                        frontier_phi_77_pred_1 = _3709;
                        frontier_phi_77_pred_2 = _3708;
                        frontier_phi_77_pred_3 = _3707;
                        frontier_phi_77_pred_4 = _3706;
                        frontier_phi_77_pred_5 = _3705;
                    }
                    _3347 = frontier_phi_77_pred;
                    _3345 = frontier_phi_77_pred_1;
                    _3343 = frontier_phi_77_pred_2;
                    _3341 = frontier_phi_77_pred_3;
                    _3339 = frontier_phi_77_pred_4;
                    _3337 = frontier_phi_77_pred_5;
                    uint _3503 = _3502 + 1u;
                    if (_3503 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3496 = _3337;
                        _3497 = _3339;
                        _3498 = _3341;
                        _3499 = _3343;
                        _3500 = _3345;
                        _3501 = _3347;
                        _3502 = _3503;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3341;
                frontier_phi_58_59_ladder_1 = _3347;
                frontier_phi_58_59_ladder_2 = _3345;
                frontier_phi_58_59_ladder_3 = _3343;
                frontier_phi_58_59_ladder_4 = _3339;
                frontier_phi_58_59_ladder_5 = _3337;
            }
            else
            {
                frontier_phi_58_59_ladder = _3219;
                frontier_phi_58_59_ladder_1 = _3225;
                frontier_phi_58_59_ladder_2 = _3223;
                frontier_phi_58_59_ladder_3 = _3221;
                frontier_phi_58_59_ladder_4 = _3217;
                frontier_phi_58_59_ladder_5 = _3215;
            }
            _3336 = frontier_phi_58_59_ladder_5;
            _3338 = frontier_phi_58_59_ladder_4;
            _3340 = frontier_phi_58_59_ladder;
            _3342 = frontier_phi_58_59_ladder_3;
            _3344 = frontier_phi_58_59_ladder_2;
            _3346 = frontier_phi_58_59_ladder_1;
        }
        float _3351 = isnan(1.0) ? _1366 : (isnan(_1366) ? 1.0 : min(_1366, 1.0));
        _3127 = (_3351 * _3342) + _2563;
        _3129 = (_3351 * _3344) + _2565;
        _3131 = (_3351 * _3346) + _2567;
        _3133 = ((_3336 * _1350) * _3351) + _2908;
        _3135 = ((_3338 * _1352) * _3351) + _2910;
        _3137 = ((_3340 * _1353) * _3351) + _2912;
    }
    else
    {
        _3127 = _2563;
        _3129 = _2565;
        _3131 = _2567;
        _3133 = _2908;
        _3135 = _2910;
        _3137 = _2912;
    }
    float _5185 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
    float _5196 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
    float _5207 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
    float _3154 = ((isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0))) * (_3127 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1366))) + ((_3133 + ((isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0))) * _2203)) * cbPerFrame._m0[3u].x);
    float _3155 = ((isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0))) * (_3129 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1366))) + ((_3135 + ((isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0))) * _2203)) * cbPerFrame._m0[3u].x);
    float _3156 = ((isnan(1.0) ? _5207 : (isnan(_5207) ? 1.0 : min(_5207, 1.0))) * (_3131 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1366))) + ((_3137 + ((isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0))) * _2203)) * cbPerFrame._m0[3u].x);
    uint _3157 = _305 + 6u;
    float _3165 = _1288 / cbSceneParam._m0[86u].x;
    float _3166 = _1289 / cbSceneParam._m0[86u].y;
    vec4 _3180 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3165, _3166, (log2((isnan(cbSceneParam._m0[77u].w) ? _1211 : (isnan(_1211) ? cbSceneParam._m0[77u].w : min(_1211, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3182 = _3180.x;
    float _3183 = _3180.y;
    float _3184 = _3180.z;
    float _3185 = _3180.w;
    float _3278;
    float _3280;
    float _3282;
    float _3284;
    if (_1211 > cbSceneParam._m0[78u].w)
    {
        float _3240 = isnan(_1211) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1211 : min(cbSceneParam._m0[80u].w, _1211));
        float _3241 = _3240 / _1211;
        float _3252 = _3241 * _1261;
        float _3253 = _1262 * _3241;
        float _3254 = (-0.0) - _3253;
        float _3256 = _3241 * _1263;
        float _3258 = (cbSceneParam._m0[77u].w * _3254) / _3240;
        float _3259 = _3258 + cbSceneParam._m0[79u].w;
        float _3260 = cbSceneParam._m0[79u].w - _3253;
        float _3266 = sqrt(((_3252 * _3252) + (_3253 * _3253)) + (_3256 * _3256));
        float _3269 = (1.0 - (cbSceneParam._m0[77u].w / _3240)) * _3266;
        float _3274 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3276 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3453;
        if (abs((_3254 - _3258) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3453 = ((((_3259 > 0.0) ? exp2(_3274 * _3259) : (2.0 - exp2(_3276 * _3259))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3269;
        }
        else
        {
            float _3397 = 1.0 / cbSceneParam._m0[80u].x;
            float _3398 = isnan(_3260) ? _3259 : (isnan(_3259) ? _3260 : max(_3259, _3260));
            float _3399 = isnan(_3260) ? _3259 : (isnan(_3259) ? _3260 : min(_3259, _3260));
            float _3408 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : min(_3398, 0.0));
            float _3409 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : min(_3399, 0.0));
            _3453 = ((abs(_3266 / _3254) * cbSceneParam._m0[80u].y) * ((((_3408 - _3409) * 2.0) - ((exp2(_3274 * (isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0)))) - exp2(_3274 * (isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0))))) * _3397)) - ((exp2(_3276 * _3408) - exp2(_3276 * _3409)) * _3397))) + (_3269 * cbSceneParam._m0[80u].z);
        }
        vec4 _3455 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3165, _3166, 1.0), 0.0);
        float _3464 = exp2((_3453 * (-1.44269502162933349609375)) * (1.0 - _3455.w));
        float _3465 = log2(_3464);
        float _3481 = log2(_3185);
        _3278 = (exp2(_3481 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3465 * cbSceneParam._m0[78u].x)) * _3455.x) / cbSceneParam._m0[78u].x)) + _3182;
        _3280 = (exp2(_3481 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3465 * cbSceneParam._m0[78u].y)) * _3455.y) / cbSceneParam._m0[78u].y)) + _3183;
        _3282 = (exp2(_3481 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3465 * cbSceneParam._m0[78u].z)) * _3455.z) / cbSceneParam._m0[78u].z)) + _3184;
        _3284 = _3464 * _3185;
    }
    else
    {
        _3278 = _3182;
        _3280 = _3183;
        _3282 = _3184;
        _3284 = _3185;
    }
    bool _3491;
    vec4 _3294;
    vec4 _3316;
    float _3318;
    float _3322;
    float _3323;
    float _3324;
    float _3325;
    bool _3335;
    for (;;)
    {
        _3294 = cbMatDynParam._m0[0u];
        float _3296 = roundEven(_3294.y);
        bool _3297 = _3296 == 3.0;
        float _3298 = log2(_3284);
        float _3305 = exp2(_3298 * cbSceneParam._m0[78u].x) * _3154;
        float _3306 = exp2(_3298 * cbSceneParam._m0[78u].y) * _3155;
        float _3307 = exp2(_3298 * cbSceneParam._m0[78u].z) * _3156;
        float _3314 = _1277 + (-0.5);
        _3316 = cbMtdParam._m0[1u];
        _3318 = _3316.y * _3314;
        float _3321 = (_3296 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3322 = _3321 * (_3297 ? _3305 : (_3305 + (cbSceneParam._m0[72u].w * _3278)));
        _3323 = _3321 * (_3297 ? _3306 : (_3306 + (cbSceneParam._m0[72u].w * _3280)));
        _3324 = _3321 * (_3297 ? _3307 : (_3307 + (cbSceneParam._m0[72u].w * _3282)));
        _3325 = _3314 * 0.999000012874603271484375;
        _3335 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3335)
        {
            if ((cbInstanceData._m0[_305 + 7u].x + _3325) < 0.5)
            {
                _3491 = true;
                break;
            }
        }
        uint _3432 = _1326 + uint(_3294.w);
        if ((cbInstanceData._m0[_3432].w < 1.0) && ((cbInstanceData._m0[_3432].w + _3325) < 0.5))
        {
            _3491 = true;
            break;
        }
        if ((_3318 + 1.0) < _3316.x)
        {
            _3491 = true;
            break;
        }
        _3491 = false;
        break;
    }
    float _3696;
    if (_3491)
    {
        discard_state = true;
        _3696 = 0.0;
    }
    else
    {
        _3696 = cbInstanceData._m0[_3157].w;
    }
    SV_Target.x = _3322;
    SV_Target.y = _3323;
    SV_Target.z = _3324;
    SV_Target.w = _3696;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3157].w;
    discard_exit();
}


