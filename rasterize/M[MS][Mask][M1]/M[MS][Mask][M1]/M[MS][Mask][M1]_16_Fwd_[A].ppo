#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1350;
float _3732;
float _3733;
float _3734;
float _3735;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[23u].w) + _388) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3744 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _413 = (_406 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _414 = (_406 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _415 = (_406 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _433 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _452 = _450.x;
    float _453 = _450.y;
    float _454 = _450.z;
    float _463 = ((_433.z - _454) * _406) + _454;
    float _466 = ((((_433.x - _452) * _406) + _452) * 2.0) + (-1.0);
    float _468 = ((((_433.y - _453) * _406) + _453) * 2.0) + (-1.0);
    float _469 = dot(vec2(_466, _468), vec2(_466, _468));
    float _3755 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _474 = sqrt(1.0 - (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _517 = _515.x;
    float _518 = 1.0 - _517;
    float _527 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _530 = ((isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : min(_527, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _539 = (_530 - ((((((_517 - _518) * cbMtdParam._m0[24u].z) + _518) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _530))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3776 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _547 = (_540 * (cbMtdParam._m0[17u].x - _413)) + _413;
    float _548 = (_540 * (cbMtdParam._m0[17u].y - _414)) + _414;
    float _549 = (_540 * (cbMtdParam._m0[17u].z - _415)) + _415;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _563 = _561.x;
    float _564 = 1.0 - _563;
    float _589 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_563 - _564) * cbMtdParam._m0[24u].w) + _564) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3787 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _598 = ((((cbMtdParam._m0[10u].x - _547) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _590) + _547;
    float _599 = ((((cbMtdParam._m0[10u].y - _548) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _590) + _548;
    float _600 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _549)) * _590) + _549;
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _628 = _626.x;
    float _646 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _628) * _406) + _628;
    float _650 = ((_612.x - _646) * cbMtdParam._m0[19u].z) + _646;
    float _652 = _650 - (_650 * _540);
    float _654 = _652 - (_652 * _590);
    float _658 = (cbMtdParam._m0[19u].w * (_490.z - _463)) + _463;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _679 = (_672.x * 2.0) + (-1.0);
    float _680 = (_672.y * 2.0) + (-1.0);
    float _681 = dot(vec2(_679, _680), vec2(_679, _680));
    float _3798 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _689 = (_540 * (_672.z - _658)) + _658;
    float _692 = ((cbMtdParam._m0[23u].x - _689) * _590) + _689;
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _717 = (_711.x * 2.0) + (-1.0);
    float _718 = (_711.y * 2.0) + (-1.0);
    float _719 = dot(vec2(_717, _718), vec2(_717, _718));
    float _3809 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _727 = (((_490.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _466;
    float _728 = (((_490.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _468;
    float _740 = (((_679 - _727) + (cbMtdParam._m0[21u].x * _727)) * _540) + _727;
    float _741 = (((_680 - _728) + (cbMtdParam._m0[21u].x * _728)) * _540) + _728;
    float _742 = (_540 * (sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) - _474)) + _474;
    float _753 = (((_717 - _740) + (_740 * cbMtdParam._m0[22u].z)) * _590) + _740;
    float _754 = (((_718 - _741) + (_741 * cbMtdParam._m0[22u].z)) * _590) + _741;
    float _755 = ((sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) - _742) * _590) + _742;
    float _757 = cbMtdParam._m0[22u].x + _490.w;
    float _760 = fma(_755, _242 * NORMAL.x, fma(_754, _249 * TANGENT.x, (_235 * _227) * _753));
    float _763 = fma(_755, _242 * NORMAL.y, fma(_754, _249 * TANGENT.y, (_235 * _228) * _753));
    float _766 = fma(_755, _242 * NORMAL.z, fma(_754, _249 * TANGENT.z, (_235 * _229) * _753));
    float _770 = inversesqrt(dot(vec3(_760, _763, _766), vec3(_760, _763, _766)));
    float _771 = _770 * _760;
    float _772 = _770 * _763;
    float _773 = _770 * _766;
    float _3820 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _774 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _3842 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3853 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3864 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3875 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _779 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _793 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _843 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _833);
    float _844 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _833);
    float _845 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _833);
    float _849 = inversesqrt(dot(vec3(_843, _844, _845), vec3(_843, _844, _845)));
    float _850 = _843 * _849;
    float _851 = _844 * _849;
    float _852 = _845 * _849;
    vec4 _857 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _859 = _857.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1031 = sqrt(((_843 * _843) + (_844 * _844)) + (_845 * _845));
        float _1037 = (cbMatDynParam._m0[5u].x * _1031) + cbMatDynParam._m0[5u].y;
        float _3886 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1042 = (cbMatDynParam._m0[5u].z * _1031) + cbMatDynParam._m0[5u].w;
        float _3897 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) - _1038)) + _1038) < ((_859 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _870 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _871 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _889 = fma(_773, cbSceneParam._m0[5u].z, fma(_772, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _771));
    float _892 = fma(_773, cbSceneParam._m0[6u].z, fma(_772, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _771));
    float _895 = fma(_773, cbSceneParam._m0[7u].z, fma(_772, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _771));
    uint _908 = _255 + 9u;
    uint _909 = _908 + uint(cbMatDynParam._m0[0u].w);
    float _915 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_909].x;
    float _916 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_909].y;
    float _917 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_909].z;
    float _3908 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _921 = 1.0 - _779;
    float _922 = _918 * _921;
    float _923 = _919 * _921;
    float _924 = _920 * _921;
    float _929 = (_918 + (-0.039999999105930328369140625)) * _779;
    float _930 = (_919 + (-0.039999999105930328369140625)) * _779;
    float _931 = (_920 + (-0.039999999105930328369140625)) * _779;
    float _932 = _929 + 0.039999999105930328369140625;
    float _934 = _930 + 0.039999999105930328369140625;
    float _935 = _931 + 0.039999999105930328369140625;
    vec4 _944 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _870, cbSceneParam._m0[86u].y * _871));
    float _948 = ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * TEXCOORD_5.w) * _944.x;
    float _949 = dot(vec3(_771, _772, _773), vec3(_850, _851, _852));
    float _952 = _949 * 2.0;
    float _956 = (_952 * _771) - _850;
    float _957 = (_952 * _772) - _851;
    float _958 = (_952 * _773) - _852;
    float _962 = abs(dot(vec3(_850, _851, _852), vec3(_771, _772, _773)));
    float _3941 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _964 = sqrt(_774);
    float _977 = exp2((_964 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_964 * 3.0));
    float _983 = (1.0 - _977) * ((_964 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _984 = _977 * _964;
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1349;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1074 = fma(_1020, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012));
        float _1078 = fma(_1020, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012));
        float _1082 = fma(_1020, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012));
        float _1107 = _1012 + _771;
        float _1108 = _1016 + _772;
        float _1109 = _1020 + _773;
        float _1119 = fma(_1109, cbModelParam._m0[26u].z, fma(_1108, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1107)) - _1074;
        float _1120 = fma(_1109, cbModelParam._m0[27u].z, fma(_1108, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1107)) - _1078;
        float _1121 = fma(_1109, cbModelParam._m0[28u].z, fma(_1108, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1107)) - _1082;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1074 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1078 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[34u].z) + ((((((_1082 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1177 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1143.x + (-0.5));
        float _1179 = _1177 * (_1143.y + (-0.5));
        float _1180 = _1177 * (_1143.z + (-0.5));
        float _1187 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1150.x + (-0.5));
        float _1189 = _1187 * (_1150.y + (-0.5));
        float _1190 = _1187 * (_1150.z + (-0.5));
        float _1197 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1157.x + (-0.5));
        float _1199 = _1197 * (_1157.y + (-0.5));
        float _1200 = _1197 * (_1157.z + (-0.5));
        float _1207 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1164.x + (-0.5));
        float _1209 = _1207 * (_1164.y + (-0.5));
        float _1210 = _1207 * (_1164.z + (-0.5));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = _1178 * 0.5;
        float _1215 = _1188 * 0.5;
        float _1216 = _1198 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1231 = (dot(vec3(_771, _772, _773), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1241 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3989 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1243 + 1.0))) + _1248) * _1211;
        float _1258 = _1179 * 0.5;
        float _1259 = _1189 * 0.5;
        float _1260 = _1199 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_771, _772, _773), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4022 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1285 + 1.0))) + _1290) * _1212;
        float _1300 = _1180 * 0.5;
        float _1301 = _1190 * 0.5;
        float _1302 = _1200 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_771, _772, _773), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4055 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1327 + 1.0))) + _1332) * _1213;
        _1349 = _1180;
        _1351 = _1179;
        _1352 = _1178;
        _1353 = _1190;
        _1354 = _1189;
        _1355 = _1188;
        _1356 = _1200;
        _1357 = _1199;
        _1358 = _1198;
        _1359 = _1213;
        _1360 = _1212;
        _1361 = _1211;
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
    }
    else
    {
        _1349 = _1350;
        _1351 = _1350;
        _1352 = _1350;
        _1353 = _1350;
        _1354 = _1350;
        _1355 = _1350;
        _1356 = _1350;
        _1357 = _1350;
        _1358 = _1350;
        _1359 = _1350;
        _1360 = _1350;
        _1361 = _1350;
        _1362 = 0.0;
        _1363 = 0.0;
        _1364 = 0.0;
    }
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1392 = fma(_1020, cbModelParam._m0[30u].z, fma(_1016, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1012));
        float _1396 = fma(_1020, cbModelParam._m0[31u].z, fma(_1016, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1012));
        float _1400 = fma(_1020, cbModelParam._m0[32u].z, fma(_1016, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1012));
        float _1423 = _1012 + _771;
        float _1424 = _1016 + _772;
        float _1425 = _1020 + _773;
        float _1435 = fma(_1425, cbModelParam._m0[30u].z, fma(_1424, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1423)) - _1392;
        float _1436 = fma(_1425, cbModelParam._m0[31u].z, fma(_1424, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1423)) - _1396;
        float _1437 = fma(_1425, cbModelParam._m0[32u].z, fma(_1424, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1423)) - _1400;
        float _1441 = inversesqrt(dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437)));
        float _1454 = ((_1441 * _1435) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1392 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1455 = ((_1441 * _1436) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1396 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1441 * _1437) / cbModelParam._m0[35u].z) + ((((((_1400 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        float _1491 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1458.x + (-0.5));
        float _1493 = _1491 * (_1458.y + (-0.5));
        float _1494 = _1491 * (_1458.z + (-0.5));
        float _1501 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1465.x + (-0.5));
        float _1503 = _1501 * (_1465.y + (-0.5));
        float _1504 = _1501 * (_1465.z + (-0.5));
        float _1511 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1472.x + (-0.5));
        float _1513 = _1511 * (_1472.y + (-0.5));
        float _1514 = _1511 * (_1472.z + (-0.5));
        float _1521 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1479.x + (-0.5));
        float _1523 = _1521 * (_1479.y + (-0.5));
        float _1524 = _1521 * (_1479.z + (-0.5));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = _1492 * 0.5;
        float _1529 = _1502 * 0.5;
        float _1530 = _1512 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_771, _772, _773), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4118 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1555 + 1.0))) + _1560) * _1525;
        float _1570 = _1493 * 0.5;
        float _1571 = _1503 * 0.5;
        float _1572 = _1513 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_771, _772, _773), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4151 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1597 + 1.0))) + _1602) * _1526;
        float _1612 = _1494 * 0.5;
        float _1613 = _1504 * 0.5;
        float _1614 = _1514 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_771, _772, _773), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4184 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1639 + 1.0))) + _1644) * _1527;
        _1661 = _1494;
        _1662 = _1493;
        _1663 = _1492;
        _1664 = _1504;
        _1665 = _1503;
        _1666 = _1502;
        _1667 = _1514;
        _1668 = _1513;
        _1669 = _1512;
        _1670 = _1527;
        _1671 = _1526;
        _1672 = _1525;
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
    }
    else
    {
        _1661 = _1350;
        _1662 = _1350;
        _1663 = _1350;
        _1664 = _1350;
        _1665 = _1350;
        _1666 = _1350;
        _1667 = _1350;
        _1668 = _1350;
        _1669 = _1350;
        _1670 = _1350;
        _1671 = _1350;
        _1672 = _1350;
        _1673 = 0.0;
        _1674 = 0.0;
        _1675 = 0.0;
    }
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1362)) + _1362;
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1363)) + _1363;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1364)) + _1364;
    float _1708 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1686, cbSceneParam._m0[89u].y, _1685 * cbSceneParam._m0[89u].x));
    float _1711 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1686, cbSceneParam._m0[90u].y, _1685 * cbSceneParam._m0[90u].x));
    float _1714 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1686, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1685));
    float _1729 = _956 * 0.5;
    float _1730 = _957 * 0.5;
    float _1731 = _958 * 0.5;
    float _1732 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1735 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1738 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1772;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1745 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1349, _1353, _1356, _1359));
        float _1749 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1351, _1354, _1357, _1360));
        float _1753 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1352, _1355, _1358, _1361));
        float _1760 = dot(vec4(cbModelParam._m0[39u]), vec4(_1729, _1730, _1731, 1.0));
        _1772 = dot(vec3(isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1760) ? 0.0 : (isnan(0.0) ? _1760 : max(0.0, _1760))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1772 = 1.0;
    }
    float _1783;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1774 = dot(vec4(cbModelParam._m0[40u]), vec4(_1729, _1730, _1731, 1.0));
        _1783 = dot(vec3(isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1783 = 1.0;
    }
    float _1787 = (_1783 * cbModelParam._m0[1u].x) + (_1772 * (1.0 - cbModelParam._m0[1u].x));
    float _1797 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _774);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1797 : min(cbModelParam._m0[25u].z, _1797));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1846 = fma(_1020, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012)) + cbModelParam._m0[13u].w;
        float _1850 = fma(_1020, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012)) + cbModelParam._m0[14u].w;
        float _1854 = fma(_1020, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012)) + cbModelParam._m0[15u].w;
        float _1857 = fma(_958, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956));
        float _1860 = fma(_958, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956));
        float _1863 = fma(_958, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956));
        float _1891;
        if (_1857 > 0.0)
        {
            _1891 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1891 = frontier_phi_17_15_ladder;
        }
        float _2094;
        if (_1860 > 0.0)
        {
            _2094 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2094 = frontier_phi_26_22_ladder;
        }
        float _2348;
        if (_1863 > 0.0)
        {
            _2348 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2348 = frontier_phi_38_33_ladder;
        }
        float _2350 = isnan(_2094) ? _1891 : (isnan(_1891) ? _2094 : min(_1891, _2094));
        float _2351 = isnan(_2348) ? _2350 : (isnan(_2350) ? _2348 : min(_2350, _2348));
        float _2355 = (_2351 * _1857) + _1846;
        float _2356 = (_2351 * _1860) + _1850;
        float _2357 = (_2351 * _1863) + _1854;
        float _2358 = _2351 * 9.9999997473787516355514526367188e-05;
        float _2360 = (-1.0) - _2358;
        float _2362 = _2358 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2357 > _2362) || ((_2357 < _2360) || ((_2356 > _2362) || ((_2356 < _2360) || ((_2355 < _2360) || (_2355 > _2362))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2357, cbModelParam._m0[9u].z, fma(_2356, cbModelParam._m0[9u].y, _2355 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2357, cbModelParam._m0[10u].z, fma(_2356, cbModelParam._m0[10u].y, _2355 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2357, cbModelParam._m0[11u].z, fma(_2356, cbModelParam._m0[11u].y, _2355 * cbModelParam._m0[11u].x))), _1798);
            frontier_phi_16_38_ladder = _2485.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2485.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2485.x * cbModelParam._m0[1u].y;
        }
        _1879 = frontier_phi_16_38_ladder_2;
        _1881 = frontier_phi_16_38_ladder_1;
        _1883 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_956, _957, _958), _1798);
        _1879 = _1867.x * cbModelParam._m0[1u].y;
        _1881 = _1867.y * cbModelParam._m0[1u].y;
        _1883 = _1867.z * cbModelParam._m0[1u].y;
    }
    float _1887 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _774);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1887 : min(cbModelParam._m0[25u].w, _1887));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1942 = fma(_1020, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012)) + cbModelParam._m0[21u].w;
        float _1946 = fma(_1020, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012)) + cbModelParam._m0[22u].w;
        float _1950 = fma(_1020, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012)) + cbModelParam._m0[23u].w;
        float _1953 = fma(_958, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956));
        float _1956 = fma(_958, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956));
        float _1959 = fma(_958, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956));
        float _2099;
        if (_1953 > 0.0)
        {
            _2099 = abs((1.0 - _1942) / _1953);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1942 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2099 = frontier_phi_28_24_ladder;
        }
        float _2375;
        if (_1956 > 0.0)
        {
            _2375 = abs((1.0 - _1946) / _1956);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1946 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2375 = frontier_phi_40_35_ladder;
        }
        float _2588;
        if (_1959 > 0.0)
        {
            _2588 = abs((1.0 - _1950) / _1959);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1950 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2588 = frontier_phi_49_46_ladder;
        }
        float _2590 = isnan(_2375) ? _2099 : (isnan(_2099) ? _2375 : min(_2099, _2375));
        float _2591 = isnan(_2588) ? _2590 : (isnan(_2590) ? _2588 : min(_2590, _2588));
        float _2595 = (_2591 * _1953) + _1942;
        float _2596 = (_2591 * _1956) + _1946;
        float _2597 = (_2591 * _1959) + _1950;
        float _2598 = _2591 * 9.9999997473787516355514526367188e-05;
        float _2599 = (-1.0) - _2598;
        float _2601 = _2598 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2597 > _2601) || ((_2597 < _2599) || ((_2596 > _2601) || ((_2596 < _2599) || ((_2595 < _2599) || (_2595 > _2601))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2796 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2597, cbModelParam._m0[17u].z, fma(_2596, cbModelParam._m0[17u].y, _2595 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2597, cbModelParam._m0[18u].z, fma(_2596, cbModelParam._m0[18u].y, _2595 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2597, cbModelParam._m0[19u].z, fma(_2596, cbModelParam._m0[19u].y, _2595 * cbModelParam._m0[19u].x))), _1888);
            frontier_phi_25_49_ladder = _2796.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2796.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2796.x * cbModelParam._m0[1u].z;
        }
        _1978 = frontier_phi_25_49_ladder_2;
        _1980 = frontier_phi_25_49_ladder_1;
        _1982 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_956, _957, _958), _1888);
        _1978 = _1962.x * cbModelParam._m0[1u].z;
        _1980 = _1962.y * cbModelParam._m0[1u].z;
        _1982 = _1962.z * cbModelParam._m0[1u].z;
    }
    float _1995 = (((_983 * _932) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1978 - _1879)) + _1879);
    float _1997 = (((_983 * _934) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1980 - _1881)) + _1881);
    float _1999 = (((_983 * _935) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1982 - _1883)) + _1883);
    float _2002 = fma(_1999, cbSceneParam._m0[89u].z, fma(_1997, cbSceneParam._m0[89u].y, _1995 * cbSceneParam._m0[89u].x));
    float _2005 = fma(_1999, cbSceneParam._m0[90u].z, fma(_1997, cbSceneParam._m0[90u].y, _1995 * cbSceneParam._m0[90u].x));
    float _2008 = fma(_1999, cbSceneParam._m0[91u].z, fma(_1997, cbSceneParam._m0[91u].y, _1995 * cbSceneParam._m0[91u].x));
    uvec4 _2018 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2020 = _2018.x * 14u;
    uint _2021 = _2020 + 13u;
    float _2028 = _948 + (-1.0);
    float _2033 = (cbLight._m0[_2021].x * _2028) + 1.0;
    float _2034 = (cbLight._m0[_2021].y * _2028) + 1.0;
    float _2035 = (cbLight._m0[_2021].z * _2028) + 1.0;
    float _2036 = (cbLight._m0[_2021].w * _2028) + 1.0;
    uint _2037 = _2020 + 5u;
    float _2043 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2047 = _2020 + 4u;
    float _2053 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    uint _2057 = _2020 | 1u;
    float _2068 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_771, _772, _773));
    float _2071 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_771, _772, _773));
    float _4320 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _4331 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2076 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * 0.3183098733425140380859375;
    float _2078 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * 0.3183098733425140380859375;
    float _2085 = ((cbLight._m0[_2037].x * _2043) * _2078) + ((cbLight._m0[_2047].x * _2053) * _2076);
    float _2086 = ((_2043 * cbLight._m0[_2037].y) * _2078) + ((_2053 * cbLight._m0[_2047].y) * _2076);
    float _2087 = ((_2043 * cbLight._m0[_2037].z) * _2078) + ((_2053 * cbLight._m0[_2047].z) * _2076);
    uvec4 _2091 = floatBitsToUint(cbLight._m0[_2020 + 12u]);
    bool _2093 = _2091.x == 0u;
    float _2104;
    float _2106;
    float _2108;
    if (_2093)
    {
        _2104 = _2085;
        _2106 = _2086;
        _2108 = _2087;
    }
    else
    {
        uint _2112 = _2020 + 6u;
        float _2128 = (dot(vec3(cbLight._m0[_2020 + 2u].xyz), vec3(_771, _772, _773)) * 0.5) + 0.5;
        float _2129 = _2128 * _2128;
        float _4342 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2131 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2104 = (((cbLight._m0[_2112].x * 0.3183098733425140380859375) * _2130) * _2131) + _2085;
        _2106 = (((cbLight._m0[_2112].y * 0.3183098733425140380859375) * _2130) * _2131) + _2086;
        _2108 = (((cbLight._m0[_2112].z * 0.3183098733425140380859375) * _2130) * _2131) + _2087;
    }
    bool _2111 = _2091.y == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2111)
    {
        _2149 = _2104;
        _2151 = _2106;
        _2153 = _2108;
    }
    else
    {
        uint _2319 = _2020 + 7u;
        float _2335 = (dot(vec3(cbLight._m0[_2020 + 3u].xyz), vec3(_771, _772, _773)) * 0.5) + 0.5;
        float _2336 = _2335 * _2335;
        float _4358 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2337 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2338 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2149 = (((cbLight._m0[_2319].x * 0.3183098733425140380859375) * _2337) * _2338) + _2104;
        _2151 = (((cbLight._m0[_2319].y * 0.3183098733425140380859375) * _2337) * _2338) + _2106;
        _2153 = (((cbLight._m0[_2319].z * 0.3183098733425140380859375) * _2337) * _2338) + _2108;
    }
    uint _2156 = _2020 + 8u;
    float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _774) * 0.949999988079071044921875);
    float _2170 = _2169 * _2169;
    float _2171 = cbLight._m0[_2020].x + _850;
    float _2172 = cbLight._m0[_2020].y + _851;
    float _2173 = cbLight._m0[_2020].z + _852;
    float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
    float _2178 = _2177 * _2171;
    float _2179 = _2177 * _2172;
    float _2180 = _2177 * _2173;
    float _2181 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2020].xyz));
    float _4374 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _4385 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _2185 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _2186 = dot(vec3(_771, _772, _773), vec3(_2178, _2179, _2180));
    float _4396 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2178, _2179, _2180));
    float _4407 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2170 * _2170;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2206 = exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0);
    float _2207 = 0.959999978542327880859375 - _929;
    float _2209 = 0.959999978542327880859375 - _930;
    float _2210 = 0.959999978542327880859375 - _931;
    float _2217 = 1.0 - _2170;
    float _2228 = (0.5 / (((_2185 * ((_2184 * _2217) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2217) + _2170) * _2184))) * _2184;
    float _4418 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2230 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    uint _2241 = _2020 + 9u;
    float _2252 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _774) * 0.949999988079071044921875);
    float _2253 = _2252 * _2252;
    float _2254 = cbLight._m0[_2057].x + _850;
    float _2255 = cbLight._m0[_2057].y + _851;
    float _2256 = cbLight._m0[_2057].z + _852;
    float _2260 = inversesqrt(dot(vec3(_2254, _2255, _2256), vec3(_2254, _2255, _2256)));
    float _2261 = _2260 * _2254;
    float _2262 = _2260 * _2255;
    float _2263 = _2260 * _2256;
    float _2264 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2057].xyz));
    float _4429 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2268 = dot(vec3(_771, _772, _773), vec3(_2261, _2262, _2263));
    float _4440 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2272 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2261, _2262, _2263));
    float _4451 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2276 = _2253 * _2253;
    float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
    float _2287 = exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0);
    float _2294 = 1.0 - _2253;
    float _2304 = (0.5 / (((_2185 * ((_2267 * _2294) + _2253)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2294) + _2253) * _2267))) * _2267;
    float _4462 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2306 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
    float _2316 = (((((_2287 * _2207) + _932) * cbLight._m0[_2241].x) * _2306) * _2043) + (((((_2206 * _2207) + _932) * cbLight._m0[_2156].x) * _2230) * _2053);
    float _2317 = (((((_2287 * _2209) + _934) * cbLight._m0[_2241].y) * _2306) * _2043) + (((((_2206 * _2209) + _934) * cbLight._m0[_2156].y) * _2230) * _2053);
    float _2318 = (((((_2287 * _2210) + _935) * cbLight._m0[_2241].z) * _2306) * _2043) + (((((_2206 * _2210) + _935) * cbLight._m0[_2156].z) * _2230) * _2053);
    float _2380;
    float _2382;
    float _2384;
    if (_2093)
    {
        _2380 = _2316;
        _2382 = _2317;
        _2384 = _2318;
    }
    else
    {
        uint _2386 = _2020 + 2u;
        uint _2390 = _2020 + 10u;
        float _2404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2386].w)) * _774) * 0.949999988079071044921875);
        float _2405 = _2404 * _2404;
        float _2406 = cbLight._m0[_2386].x + _850;
        float _2407 = cbLight._m0[_2386].y + _851;
        float _2408 = cbLight._m0[_2386].z + _852;
        float _2412 = inversesqrt(dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408)));
        float _2413 = _2412 * _2406;
        float _2414 = _2412 * _2407;
        float _2415 = _2412 * _2408;
        float _2416 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2386].xyz));
        float _4473 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2420 = dot(vec3(_771, _772, _773), vec3(_2413, _2414, _2415));
        float _4484 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2424 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_2413, _2414, _2415));
        float _4495 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2428 = _2405 * _2405;
        float _2432 = ((_2423 * _2423) * (_2428 + (-1.0))) + 1.0;
        float _2439 = exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0);
        float _2446 = 1.0 - _2405;
        float _2456 = (0.5 / (((_2185 * ((_2419 * _2446) + _2405)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2446) + _2405) * _2419))) * _2419;
        float _4506 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2458 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2428 / ((_2432 * _2432) * 3.141590118408203125));
        float _2459 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2380 = (((((_2439 * _2207) + _932) * cbLight._m0[_2390].x) * _2458) * _2459) + _2316;
        _2382 = (((((_2439 * _2209) + _934) * cbLight._m0[_2390].y) * _2458) * _2459) + _2317;
        _2384 = (((((_2439 * _2210) + _935) * cbLight._m0[_2390].z) * _2458) * _2459) + _2318;
    }
    float _2494;
    float _2496;
    float _2498;
    if (_2111)
    {
        _2494 = _2380;
        _2496 = _2382;
        _2498 = _2384;
    }
    else
    {
        uint _2505 = _2020 + 3u;
        uint _2509 = _2020 + 11u;
        float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2505].w)) * _774) * 0.949999988079071044921875);
        float _2524 = _2523 * _2523;
        float _2525 = cbLight._m0[_2505].x + _850;
        float _2526 = cbLight._m0[_2505].y + _851;
        float _2527 = cbLight._m0[_2505].z + _852;
        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
        float _2532 = _2531 * _2525;
        float _2533 = _2531 * _2526;
        float _2534 = _2531 * _2527;
        float _2535 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2505].xyz));
        float _4522 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2539 = dot(vec3(_771, _772, _773), vec3(_2532, _2533, _2534));
        float _4533 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2543 = dot(vec3(cbLight._m0[_2505].xyz), vec3(_2532, _2533, _2534));
        float _4544 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2547 = _2524 * _2524;
        float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
        float _2558 = exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0);
        float _2565 = 1.0 - _2524;
        float _2575 = (0.5 / (((_2185 * ((_2538 * _2565) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2565) + _2524) * _2538))) * _2538;
        float _4555 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2577 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
        float _2578 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2494 = (((((_2558 * _2207) + _932) * cbLight._m0[_2509].x) * _2577) * _2578) + _2380;
        _2496 = (((((_2558 * _2209) + _934) * cbLight._m0[_2509].y) * _2577) * _2578) + _2382;
        _2498 = (((((_2558 * _2210) + _935) * cbLight._m0[_2509].z) * _2577) * _2578) + _2384;
    }
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    if (_2018.y == 0u)
    {
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2653;
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2653;
        float _2656 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2653;
        uvec4 _2668 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2669 = _2668.x;
        uint _2680 = uint((float(_2668.y) * floor(float(uint(cbSceneParam._m0[85u].y * _871) / _2669))) + floor(float(uint(cbSceneParam._m0[85u].x * _870) / _2669)));
        float _2690 = (log2(_2656 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2691 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        uint _2694 = uint(isnan(14.0) ? _2691 : (isnan(_2691) ? 14.0 : min(_2691, 14.0)));
        uvec4 _2699 = texelFetch(g_lightClusterGridBuffer, int(((_2694 << 2u) + (_2680 << 6u)) >> 2u));
        uint _2700 = _2699.x;
        uint _2701 = _2668.z;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        if (((((1u << ((_2701 >> 4u) & 15u)) + 4294967295u) & _2700) == 0u) || ((_2701 & 240u) == 0u))
        {
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
        }
        else
        {
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2812;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            uint _2960 = 0u;
            uint _2969;
            bool _2970;
            for (;;)
            {
                _2969 = texelFetch(g_lightClassification, int((((_2694 << 5u) + (_2680 << 9u)) + (_2960 << 2u)) >> 2u)).x;
                _2970 = _2969 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2970)
                {
                    frontier_phi_66_pred = _2954;
                    frontier_phi_66_pred_1 = _2959;
                    frontier_phi_66_pred_2 = _2958;
                    frontier_phi_66_pred_3 = _2957;
                    frontier_phi_66_pred_4 = _2956;
                    frontier_phi_66_pred_5 = _2955;
                }
                else
                {
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    uint _3105;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2956;
                    _3102 = _2957;
                    _3103 = _2958;
                    _3104 = _2959;
                    _3105 = _2969;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    for (;;)
                    {
                        uint _3109 = uint(findLSB(_3105)) + (_2960 << 5u);
                        uint _3106 = (_3105 + 4294967295u) & _3105;
                        uint _3111 = _3109 * 48u;
                        vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3111)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 3u)).x));
                        uint _3131 = (_3109 * 48u) + 4u;
                        vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3131)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 3u)).x));
                        uint _3150 = (_3109 * 48u) + 8u;
                        vec3 _3161 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3150)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 2u)).x));
                        float _3165 = _3125.x - _2654;
                        float _3166 = _3125.y - _2655;
                        float _3167 = _3125.z - _2656;
                        float _3168 = dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167));
                        float _3171 = inversesqrt(_3168);
                        float _3172 = _3171 * _3165;
                        float _3173 = _3171 * _3166;
                        float _3174 = _3171 * _3167;
                        float _3175 = dot(vec3(_889, _892, _895), vec3(_3172, _3173, _3174));
                        float _3180 = 1.0 - (_3168 * _3125.w);
                        float _4581 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3181 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3182 = sqrt(_3168) * _3144.w;
                        float _3185 = 1.39999997615814208984375 / (_3182 + 1.39999997615814208984375);
                        float _3186 = _3185 * _3185;
                        float _3189 = ((1.0 - _3186) * _3175) + _3186;
                        float _3192 = _3182 * _3182;
                        float _3196 = ((isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))) * _3181) / ((_3192 * 0.699999988079071044921875) + 1.0);
                        float _3200 = (-0.0) - _2654;
                        float _3201 = (-0.0) - _2655;
                        float _3202 = (-0.0) - _2656;
                        float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                        float _3207 = _3206 * _3200;
                        float _3208 = _3206 * _3201;
                        float _3209 = _3206 * _3202;
                        float _3217 = exp2(log2(1.0 / ((_3192 * 3.5) + 5.0)) * 0.25);
                        float _3218 = 1.0 - _964;
                        float _3225 = sqrt(1.0 - ((1.0 - (_3218 * _3218)) * (1.0 - (_3217 * _3217))));
                        float _3226 = _3225 * _3225;
                        float _3227 = _3226 * _3226;
                        float _3228 = _3207 + _3172;
                        float _3229 = _3208 + _3173;
                        float _3230 = _3209 + _3174;
                        float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                        float _3238 = dot(vec3(_889, _892, _895), vec3(_3207, _3208, _3209));
                        float _4597 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3241 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3242 = dot(vec3(_889, _892, _895), vec3(_3234 * _3228, _3234 * _3229, _3234 * _3230));
                        float _4608 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3245 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3249 = ((_3245 * _3245) * (_3227 + (-1.0))) + 1.0;
                        float _3250 = _3185 * _3226;
                        float _3251 = _3250 * _3250;
                        float _3254 = ((1.0 - _3251) * _3175) + _3251;
                        float _4619 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3255 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3256 = 1.0 - _3226;
                        float _3266 = (0.5 / (((_3255 * ((_3241 * _3256) + _3226)) + 9.9999999392252902907785028219223e-09) + (((_3255 * _3256) + _3226) * _3241))) * _3255;
                        float _4630 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3277 = (((_3227 * 3.1415927410125732421875) * (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) / ((_3249 * _3249) * ((_3192 * 2.1991131305694580078125) + 3.141590118408203125))) * _3181;
                        _3029 = (_3196 * _3144.x) + _3102;
                        _3030 = (_3196 * _3144.y) + _3103;
                        _3031 = (_3196 * _3144.z) + _3104;
                        _3026 = (_3277 * _3161.x) + _3099;
                        _3027 = (_3277 * _3161.y) + _3100;
                        _3028 = (_3277 * _3161.z) + _3101;
                        if (_3106 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3028;
                            _3102 = _3029;
                            _3103 = _3030;
                            _3104 = _3031;
                            _3105 = _3106;
                        }
                    }
                    frontier_phi_66_pred = _3026;
                    frontier_phi_66_pred_1 = _3031;
                    frontier_phi_66_pred_2 = _3030;
                    frontier_phi_66_pred_3 = _3029;
                    frontier_phi_66_pred_4 = _3028;
                    frontier_phi_66_pred_5 = _3027;
                }
                _2802 = frontier_phi_66_pred;
                _2812 = frontier_phi_66_pred_1;
                _2810 = frontier_phi_66_pred_2;
                _2808 = frontier_phi_66_pred_3;
                _2806 = frontier_phi_66_pred_4;
                _2804 = frontier_phi_66_pred_5;
                uint _2961 = _2960 + 1u;
                if (_2961 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2954 = _2802;
                    _2955 = _2804;
                    _2956 = _2806;
                    _2957 = _2808;
                    _2958 = _2810;
                    _2959 = _2812;
                    _2960 = _2961;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
        }
        uvec4 _2815 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2816 = _2815.z;
        uint _2818 = (_2816 >> 8u) & 15u;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        if (((4294967295u << _2818) & _2700) == 0u)
        {
            _2922 = _2801;
            _2924 = _2803;
            _2926 = _2805;
            _2928 = _2807;
            _2930 = _2809;
            _2932 = _2811;
        }
        else
        {
            float _2947 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
            float _2948 = _2947 * _2654;
            float _2949 = _2947 * _2655;
            float _2950 = _2947 * _2656;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2818 < ((_2816 >> 12u) & 15u))
            {
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _3082 = _2801;
                float _3083 = _2803;
                float _3084 = _2805;
                float _3085 = _2807;
                float _3086 = _2809;
                float _3087 = _2811;
                uint _3088 = _2818;
                uint _3097;
                bool _3098;
                for (;;)
                {
                    _3097 = texelFetch(g_lightClassification, int((((_2694 << 5u) + (_2680 << 9u)) + (_3088 << 2u)) >> 2u)).x;
                    _3098 = _3097 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3098)
                    {
                        frontier_phi_77_pred = _3087;
                        frontier_phi_77_pred_1 = _3086;
                        frontier_phi_77_pred_2 = _3085;
                        frontier_phi_77_pred_3 = _3084;
                        frontier_phi_77_pred_4 = _3083;
                        frontier_phi_77_pred_5 = _3082;
                    }
                    else
                    {
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        float _3306 = _3084;
                        float _3307 = _3085;
                        float _3308 = _3086;
                        float _3309 = _3087;
                        uint _3310 = _3097;
                        uint _3311;
                        vec4 _3336;
                        float _3337;
                        vec4 _3352;
                        vec3 _3364;
                        vec4 _3379;
                        vec4 _3395;
                        float _3441;
                        bool _3442;
                        for (;;)
                        {
                            uint _3321 = ((_3088 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3310));
                            _3311 = (_3310 + 4294967295u) & _3310;
                            uint _3323 = _3321 * 40u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            _3337 = _3336.w;
                            uint _3339 = (_3321 * 40u) + 4u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3321 * 40u) + 8u;
                            _3364 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x));
                            uint _3366 = (_3321 * 40u) + 16u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3382 = (_3321 * 40u) + 20u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3321 * 40u) + 24u;
                            vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3416 = (_3321 * 40u) + 28u;
                            vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            _3441 = fma(_2656, _3429.z, fma(_2655, _3429.y, _3429.x * _2654)) + _3429.w;
                            _3442 = !((fma(_2656, _3410.z, fma(_2655, _3410.y, _3410.x * _2654)) + _3410.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3442)
                            {
                                float _3469 = _3336.x - _2654;
                                float _3470 = _3336.y - _2655;
                                float _3471 = _3336.z - _2656;
                                float _3472 = dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471));
                                float _3475 = inversesqrt(_3472);
                                float _3476 = _3475 * _3469;
                                float _3477 = _3475 * _3470;
                                float _3478 = _3475 * _3471;
                                float _3482 = 1.0 - (_3472 / (_3337 * _3337));
                                float _4641 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3487 = sqrt(_3472) * _3352.w;
                                float _3489 = 1.39999997615814208984375 / (_3487 + 1.39999997615814208984375);
                                float _3490 = _3489 * _3489;
                                float _3493 = ((1.0 - _3490) * dot(vec3(_3476, _3477, _3478), vec3(_889, _892, _895))) + _3490;
                                float _3496 = _3487 * _3487;
                                float _3500 = (fma(_2656, _3379.z, fma(_2655, _3379.y, _3379.x * _2654)) + _3379.w) / _3441;
                                float _3501 = (fma(_2656, _3395.z, fma(_2655, _3395.y, _3395.x * _2654)) + _3395.w) / _3441;
                                float _3505 = 1.0 - dot(vec2(_3500, _3501), vec2(_3500, _3501));
                                float _4657 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3507 = _3506 * (((isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0))) * _3483) / ((_3496 * 0.699999988079071044921875) + 1.0));
                                float _3519 = exp2(log2(1.0 / ((_3496 * 3.5) + 5.0)) * 0.25);
                                float _3520 = 1.0 - _964;
                                float _3527 = sqrt(1.0 - ((1.0 - (_3520 * _3520)) * (1.0 - (_3519 * _3519))));
                                float _3528 = _3527 * _3527;
                                float _3529 = _3528 * _3528;
                                float _3530 = _3476 - _2948;
                                float _3531 = _3477 - _2949;
                                float _3532 = _3478 - _2950;
                                float _3536 = inversesqrt(dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532)));
                                float _3540 = dot(vec3(_889, _892, _895), vec3((-0.0) - _2948, (-0.0) - _2949, (-0.0) - _2950));
                                float _4668 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3543 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3544 = dot(vec3(_889, _892, _895), vec3(_3536 * _3530, _3536 * _3531, _3536 * _3532));
                                float _4679 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3547 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3551 = ((_3547 * _3547) * (_3529 + (-1.0))) + 1.0;
                                float _3552 = _3489 * _3528;
                                float _3553 = _3552 * _3552;
                                float _3559 = ((1.0 - _3553) * dot(vec3(_889, _892, _895), vec3(_3476, _3477, _3478))) + _3553;
                                float _4690 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3561 = 1.0 - _3528;
                                float _3571 = (0.5 / (((_3560 * ((_3543 * _3561) + _3528)) + 9.9999999392252902907785028219223e-09) + (((_3560 * _3561) + _3528) * _3543))) * _3560;
                                float _4701 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3581 = (_3506 * _3483) * (((_3529 * 3.1415927410125732421875) * (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) / ((_3551 * _3551) * ((_3496 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3507 * _3352.y;
                                frontier_phi_83_pred_1 = _3507 * _3352.x;
                                frontier_phi_83_pred_2 = _3581 * _3364.z;
                                frontier_phi_83_pred_3 = _3581 * _3364.y;
                                frontier_phi_83_pred_4 = _3581 * _3364.x;
                                frontier_phi_83_pred_5 = _3507 * _3352.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3589 = frontier_phi_83_pred;
                            _3588 = frontier_phi_83_pred_1;
                            _3587 = frontier_phi_83_pred_2;
                            _3586 = frontier_phi_83_pred_3;
                            _3585 = frontier_phi_83_pred_4;
                            _3590 = frontier_phi_83_pred_5;
                            _3294 = _3588 + _3307;
                            _3295 = _3589 + _3308;
                            _3296 = _3590 + _3309;
                            _3291 = _3585 + _3304;
                            _3292 = _3586 + _3305;
                            _3293 = _3587 + _3306;
                            if (_3311 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3311;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3296;
                        frontier_phi_77_pred_1 = _3295;
                        frontier_phi_77_pred_2 = _3294;
                        frontier_phi_77_pred_3 = _3293;
                        frontier_phi_77_pred_4 = _3292;
                        frontier_phi_77_pred_5 = _3291;
                    }
                    _2933 = frontier_phi_77_pred;
                    _2931 = frontier_phi_77_pred_1;
                    _2929 = frontier_phi_77_pred_2;
                    _2927 = frontier_phi_77_pred_3;
                    _2925 = frontier_phi_77_pred_4;
                    _2923 = frontier_phi_77_pred_5;
                    uint _3089 = _3088 + 1u;
                    if (_3089 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3082 = _2923;
                        _3083 = _2925;
                        _3084 = _2927;
                        _3085 = _2929;
                        _3086 = _2931;
                        _3087 = _2933;
                        _3088 = _3089;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2927;
                frontier_phi_58_59_ladder_1 = _2933;
                frontier_phi_58_59_ladder_2 = _2931;
                frontier_phi_58_59_ladder_3 = _2929;
                frontier_phi_58_59_ladder_4 = _2925;
                frontier_phi_58_59_ladder_5 = _2923;
            }
            else
            {
                frontier_phi_58_59_ladder = _2805;
                frontier_phi_58_59_ladder_1 = _2811;
                frontier_phi_58_59_ladder_2 = _2809;
                frontier_phi_58_59_ladder_3 = _2807;
                frontier_phi_58_59_ladder_4 = _2803;
                frontier_phi_58_59_ladder_5 = _2801;
            }
            _2922 = frontier_phi_58_59_ladder_5;
            _2924 = frontier_phi_58_59_ladder_4;
            _2926 = frontier_phi_58_59_ladder;
            _2928 = frontier_phi_58_59_ladder_3;
            _2930 = frontier_phi_58_59_ladder_2;
            _2932 = frontier_phi_58_59_ladder_1;
        }
        float _2937 = isnan(1.0) ? _948 : (isnan(_948) ? 1.0 : min(_948, 1.0));
        _2713 = (_2937 * _2928) + _2149;
        _2715 = (_2937 * _2930) + _2151;
        _2717 = (_2937 * _2932) + _2153;
        _2719 = ((_2922 * _932) * _2937) + _2494;
        _2721 = ((_2924 * _934) * _2937) + _2496;
        _2723 = ((_2926 * _935) * _2937) + _2498;
    }
    else
    {
        _2713 = _2149;
        _2715 = _2151;
        _2717 = _2153;
        _2719 = _2494;
        _2721 = _2496;
        _2723 = _2498;
    }
    float _4717 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _4728 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _4739 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _2740 = ((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2713 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _948))) + ((_2719 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1787)) * cbPerFrame._m0[3u].x);
    float _2741 = ((isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2715 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _948))) + ((_2721 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1787)) * cbPerFrame._m0[3u].x);
    float _2742 = ((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2717 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _948))) + ((_2723 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1787)) * cbPerFrame._m0[3u].x);
    uint _2743 = _255 + 6u;
    float _2751 = _870 / cbSceneParam._m0[86u].x;
    float _2752 = _871 / cbSceneParam._m0[86u].y;
    vec4 _2766 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2751, _2752, (log2((isnan(cbSceneParam._m0[77u].w) ? _793 : (isnan(_793) ? cbSceneParam._m0[77u].w : min(_793, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2768 = _2766.x;
    float _2769 = _2766.y;
    float _2770 = _2766.z;
    float _2771 = _2766.w;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    if (_793 > cbSceneParam._m0[78u].w)
    {
        float _2826 = isnan(_793) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _793 : min(cbSceneParam._m0[80u].w, _793));
        float _2827 = _2826 / _793;
        float _2838 = _2827 * _843;
        float _2839 = _844 * _2827;
        float _2840 = (-0.0) - _2839;
        float _2842 = _2827 * _845;
        float _2844 = (cbSceneParam._m0[77u].w * _2840) / _2826;
        float _2845 = _2844 + cbSceneParam._m0[79u].w;
        float _2846 = cbSceneParam._m0[79u].w - _2839;
        float _2852 = sqrt(((_2838 * _2838) + (_2839 * _2839)) + (_2842 * _2842));
        float _2855 = (1.0 - (cbSceneParam._m0[77u].w / _2826)) * _2852;
        float _2860 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2862 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3039;
        if (abs((_2840 - _2844) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3039 = ((((_2845 > 0.0) ? exp2(_2860 * _2845) : (2.0 - exp2(_2862 * _2845))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2855;
        }
        else
        {
            float _2983 = 1.0 / cbSceneParam._m0[80u].x;
            float _2984 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : max(_2845, _2846));
            float _2985 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : min(_2845, _2846));
            float _2994 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : min(_2984, 0.0));
            float _2995 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : min(_2985, 0.0));
            _3039 = ((abs(_2852 / _2840) * cbSceneParam._m0[80u].y) * ((((_2994 - _2995) * 2.0) - ((exp2(_2860 * (isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0)))) - exp2(_2860 * (isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))))) * _2983)) - ((exp2(_2862 * _2994) - exp2(_2862 * _2995)) * _2983))) + (_2855 * cbSceneParam._m0[80u].z);
        }
        vec4 _3041 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2751, _2752, 1.0), 0.0);
        float _3050 = exp2((_3039 * (-1.44269502162933349609375)) * (1.0 - _3041.w));
        float _3051 = log2(_3050);
        float _3067 = log2(_2771);
        _2864 = (exp2(_3067 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].x)) * _3041.x) / cbSceneParam._m0[78u].x)) + _2768;
        _2866 = (exp2(_3067 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].y)) * _3041.y) / cbSceneParam._m0[78u].y)) + _2769;
        _2868 = (exp2(_3067 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].z)) * _3041.z) / cbSceneParam._m0[78u].z)) + _2770;
        _2870 = _3050 * _2771;
    }
    else
    {
        _2864 = _2768;
        _2866 = _2769;
        _2868 = _2770;
        _2870 = _2771;
    }
    bool _3077;
    vec4 _2880;
    vec4 _2902;
    float _2904;
    float _2908;
    float _2909;
    float _2910;
    float _2911;
    bool _2921;
    for (;;)
    {
        _2880 = cbMatDynParam._m0[0u];
        float _2882 = roundEven(_2880.y);
        bool _2883 = _2882 == 3.0;
        float _2884 = log2(_2870);
        float _2891 = exp2(_2884 * cbSceneParam._m0[78u].x) * _2740;
        float _2892 = exp2(_2884 * cbSceneParam._m0[78u].y) * _2741;
        float _2893 = exp2(_2884 * cbSceneParam._m0[78u].z) * _2742;
        float _2900 = _859 + (-0.5);
        _2902 = cbMtdParam._m0[1u];
        _2904 = _2902.y * _2900;
        float _2907 = (_2882 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2908 = _2907 * (_2883 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2864)));
        _2909 = _2907 * (_2883 ? _2892 : (_2892 + (cbSceneParam._m0[72u].w * _2866)));
        _2910 = _2907 * (_2883 ? _2893 : (_2893 + (cbSceneParam._m0[72u].w * _2868)));
        _2911 = _2900 * 0.999000012874603271484375;
        _2921 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2921)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2911) < 0.5)
            {
                _3077 = true;
                break;
            }
        }
        uint _3018 = _908 + uint(_2880.w);
        if ((cbInstanceData._m0[_3018].w < 1.0) && ((cbInstanceData._m0[_3018].w + _2911) < 0.5))
        {
            _3077 = true;
            break;
        }
        if ((_2904 + 1.0) < _2902.x)
        {
            _3077 = true;
            break;
        }
        _3077 = false;
        break;
    }
    float _3282;
    if (_3077)
    {
        discard_state = true;
        _3282 = 0.0;
    }
    else
    {
        _3282 = cbInstanceData._m0[_2743].w;
    }
    SV_Target.x = _2908;
    SV_Target.y = _2909;
    SV_Target.z = _2910;
    SV_Target.w = _3282;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2743].w;
    discard_exit();
}


