#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1486;
float _4149;
float _4150;
float _4151;
float _4152;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4161 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4172 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4183 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _373 = _368.x * cbMtdParam._m0[11u].x;
    float _374 = _368.y * cbMtdParam._m0[11u].y;
    float _375 = _368.z * cbMtdParam._m0[11u].z;
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _459 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _476 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _413.x) * 2.0) - ((((_447 - _459) * cbMtdParam._m0[23u].w) + _459) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4194 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _484 = (_477 * ((_394.x * cbMtdParam._m0[12u].x) - _373)) + _373;
    float _485 = (_477 * ((_394.y * cbMtdParam._m0[12u].y) - _374)) + _374;
    float _486 = (_477 * ((_394.z * cbMtdParam._m0[12u].z) - _375)) + _375;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _525 = _523.x;
    float _535 = dot(vec4(_525, _523.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _549 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _413.y) * 2.0) - ((((_525 - _535) * cbMtdParam._m0[23u].w) + _535) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4205 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _560 = (_342.x * cbMtdParam._m0[9u].x) * ((_550 * ((_503.x * cbMtdParam._m0[13u].x) - _484)) + _484);
    float _561 = (_342.y * cbMtdParam._m0[9u].y) * ((_550 * ((_503.y * cbMtdParam._m0[13u].y) - _485)) + _485);
    float _562 = (_342.z * cbMtdParam._m0[9u].z) * ((_550 * ((_503.z * cbMtdParam._m0[13u].z) - _486)) + _486);
    float _566 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _560;
    float _569 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _561;
    float _572 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _562;
    float _580 = (((_560 - _566) * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) + _566) * 4.55000019073486328125;
    float _582 = (((_561 - _569) * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) + _569) * 4.55000019073486328125;
    float _584 = (((_562 - _572) * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) + _572) * 4.55000019073486328125;
    vec4 _601 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _641 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _643 = _641.x;
    float _644 = _641.y;
    float _645 = _641.z;
    float _652 = ((_624.x - _643) * _477) + _643;
    float _653 = ((_624.y - _644) * _477) + _644;
    float _654 = ((_624.z - _645) * _477) + _645;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _679 = ((_666.z - _654) * _550) + _654;
    float _682 = ((((_666.x - _652) * _550) + _652) * 2.0) + (-1.0);
    float _683 = ((((_666.y - _653) * _550) + _653) * 2.0) + (-1.0);
    float _684 = dot(vec2(_682, _683), vec2(_682, _683));
    float _4216 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _689 = sqrt(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _305) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _306) + cbTextureTilingScale._m0[11u].w));
    float _730 = _728.x;
    float _731 = 1.0 - _730;
    float _747 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_730 - _731) * cbMtdParam._m0[24u].z) + _731) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4227 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _748 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _755 = (_748 * (cbMtdParam._m0[17u].x - _580)) + _580;
    float _756 = (_748 * (cbMtdParam._m0[17u].y - _582)) + _582;
    float _757 = (_748 * (cbMtdParam._m0[17u].z - _584)) + _584;
    vec4 _783 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _785 = _783.x;
    float _802 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w)).x - _785) * _477) + _785;
    float _819 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _305) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _306) + cbTextureTilingScale._m0[21u].w)).x - _802) * _550) + _802;
    float _823 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _819) * cbMtdParam._m0[19u].z) + _819;
    float _825 = _823 - (_823 * _748);
    float _830 = (((_601.z - _679) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _679;
    float _834 = ((_703.z - _830) * cbMtdParam._m0[19u].w) + _830;
    vec4 _847 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _305) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _306) + cbTextureTilingScale._m0[15u].w));
    float _854 = (_847.x * 2.0) + (-1.0);
    float _855 = (_847.y * 2.0) + (-1.0);
    float _856 = dot(vec2(_854, _855), vec2(_854, _855));
    float _4238 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _864 = (_748 * (_847.z - _834)) + _834;
    float _873 = (_682 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_601.x * 2.0) + (-1.0)))) + (((_703.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _874 = (_683 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_601.y * 2.0) + (-1.0)))) + (((_703.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _886 = (((_854 - _873) + (cbMtdParam._m0[21u].x * _873)) * _748) + _873;
    float _887 = (((_855 - _874) + (cbMtdParam._m0[21u].x * _874)) * _748) + _874;
    float _888 = (_748 * (sqrt(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) - _689)) + _689;
    float _892 = cbMtdParam._m0[22u].x + _703.w;
    float _895 = fma(_888, _252 * NORMAL.x, fma(_887, _259 * TANGENT.x, (_245 * _237) * _886));
    float _898 = fma(_888, _252 * NORMAL.y, fma(_887, _259 * TANGENT.y, (_245 * _238) * _886));
    float _901 = fma(_888, _252 * NORMAL.z, fma(_887, _259 * TANGENT.z, (_245 * _239) * _886));
    float _905 = inversesqrt(dot(vec3(_895, _898, _901), vec3(_895, _898, _901)));
    float _906 = _905 * _895;
    float _907 = _905 * _898;
    float _908 = _905 * _901;
    float _4249 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _909 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4271 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4282 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4293 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4304 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _914 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _928 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _979 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _969);
    float _980 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _969);
    float _981 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _969);
    float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
    float _986 = _979 * _985;
    float _987 = _980 * _985;
    float _988 = _981 * _985;
    vec4 _993 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _995 = _993.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1167 = sqrt(((_979 * _979) + (_980 * _980)) + (_981 * _981));
        float _1173 = (cbMatDynParam._m0[5u].x * _1167) + cbMatDynParam._m0[5u].y;
        float _4315 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1178 = (cbMatDynParam._m0[5u].z * _1167) + cbMatDynParam._m0[5u].w;
        float _4326 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) - _1174)) + _1174) < ((_995 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1006 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1007 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1025 = fma(_908, cbSceneParam._m0[5u].z, fma(_907, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _906));
    float _1028 = fma(_908, cbSceneParam._m0[6u].z, fma(_907, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _906));
    float _1031 = fma(_908, cbSceneParam._m0[7u].z, fma(_907, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _906));
    uint _1044 = _286 + 9u;
    uint _1045 = _1044 + uint(cbMatDynParam._m0[0u].w);
    float _1051 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * cbInstanceData._m0[_1045].x;
    float _1052 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * cbInstanceData._m0[_1045].y;
    float _1053 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * cbInstanceData._m0[_1045].z;
    float _4337 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _4348 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _4359 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _1057 = 1.0 - _914;
    float _1058 = _1054 * _1057;
    float _1059 = _1055 * _1057;
    float _1060 = _1056 * _1057;
    float _1065 = (_1054 + (-0.039999999105930328369140625)) * _914;
    float _1066 = (_1055 + (-0.039999999105930328369140625)) * _914;
    float _1067 = (_1056 + (-0.039999999105930328369140625)) * _914;
    float _1068 = _1065 + 0.039999999105930328369140625;
    float _1070 = _1066 + 0.039999999105930328369140625;
    float _1071 = _1067 + 0.039999999105930328369140625;
    vec4 _1080 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1006, cbSceneParam._m0[86u].y * _1007));
    float _1084 = ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * TEXCOORD_5.w) * _1080.x;
    float _1085 = dot(vec3(_906, _907, _908), vec3(_986, _987, _988));
    float _1088 = _1085 * 2.0;
    float _1092 = (_1088 * _906) - _986;
    float _1093 = (_1088 * _907) - _987;
    float _1094 = (_1088 * _908) - _988;
    float _1098 = abs(dot(vec3(_986, _987, _988), vec3(_906, _907, _908)));
    float _4370 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1100 = sqrt(_909);
    float _1113 = exp2((_1100 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1100 * 3.0));
    float _1119 = (1.0 - _1113) * ((_1100 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1120 = _1113 * _1100;
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1485;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1210 = fma(_1156, cbModelParam._m0[26u].z, fma(_1152, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1148));
        float _1214 = fma(_1156, cbModelParam._m0[27u].z, fma(_1152, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1148));
        float _1218 = fma(_1156, cbModelParam._m0[28u].z, fma(_1152, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1148));
        float _1243 = _1148 + _906;
        float _1244 = _1152 + _907;
        float _1245 = _1156 + _908;
        float _1255 = fma(_1245, cbModelParam._m0[26u].z, fma(_1244, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1243)) - _1210;
        float _1256 = fma(_1245, cbModelParam._m0[27u].z, fma(_1244, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1243)) - _1214;
        float _1257 = fma(_1245, cbModelParam._m0[28u].z, fma(_1244, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1243)) - _1218;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1210 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1214 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[34u].z) + ((((((_1218 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1313 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1279.x + (-0.5));
        float _1315 = _1313 * (_1279.y + (-0.5));
        float _1316 = _1313 * (_1279.z + (-0.5));
        float _1323 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1286.x + (-0.5));
        float _1325 = _1323 * (_1286.y + (-0.5));
        float _1326 = _1323 * (_1286.z + (-0.5));
        float _1333 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1293.x + (-0.5));
        float _1335 = _1333 * (_1293.y + (-0.5));
        float _1336 = _1333 * (_1293.z + (-0.5));
        float _1343 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1300.x + (-0.5));
        float _1345 = _1343 * (_1300.y + (-0.5));
        float _1346 = _1343 * (_1300.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1367 = (dot(vec3(_906, _907, _908), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1377 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4418 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1379 + 1.0))) + _1384) * _1347;
        float _1394 = _1315 * 0.5;
        float _1395 = _1325 * 0.5;
        float _1396 = _1335 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_906, _907, _908), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4451 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1421 + 1.0))) + _1426) * _1348;
        float _1436 = _1316 * 0.5;
        float _1437 = _1326 * 0.5;
        float _1438 = _1336 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_906, _907, _908), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4484 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1463 + 1.0))) + _1468) * _1349;
        _1485 = _1316;
        _1487 = _1315;
        _1488 = _1314;
        _1489 = _1326;
        _1490 = _1325;
        _1491 = _1324;
        _1492 = _1336;
        _1493 = _1335;
        _1494 = _1334;
        _1495 = _1349;
        _1496 = _1348;
        _1497 = _1347;
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1499 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1500 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
    }
    else
    {
        _1485 = _1486;
        _1487 = _1486;
        _1488 = _1486;
        _1489 = _1486;
        _1490 = _1486;
        _1491 = _1486;
        _1492 = _1486;
        _1493 = _1486;
        _1494 = _1486;
        _1495 = _1486;
        _1496 = _1486;
        _1497 = _1486;
        _1498 = 0.0;
        _1499 = 0.0;
        _1500 = 0.0;
    }
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1527 = fma(_1156, cbModelParam._m0[30u].z, fma(_1152, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1148));
        float _1531 = fma(_1156, cbModelParam._m0[31u].z, fma(_1152, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1148));
        float _1535 = fma(_1156, cbModelParam._m0[32u].z, fma(_1152, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1148));
        float _1558 = _1148 + _906;
        float _1559 = _1152 + _907;
        float _1560 = _1156 + _908;
        float _1570 = fma(_1560, cbModelParam._m0[30u].z, fma(_1559, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1558)) - _1527;
        float _1571 = fma(_1560, cbModelParam._m0[31u].z, fma(_1559, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1558)) - _1531;
        float _1572 = fma(_1560, cbModelParam._m0[32u].z, fma(_1559, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1558)) - _1535;
        float _1576 = inversesqrt(dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572)));
        float _1589 = ((_1576 * _1570) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1527 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1590 = ((_1576 * _1571) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1531 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1591 = ((_1576 * _1572) / cbModelParam._m0[35u].z) + ((((((_1535 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        float _1626 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1593.x + (-0.5));
        float _1628 = _1626 * (_1593.y + (-0.5));
        float _1629 = _1626 * (_1593.z + (-0.5));
        float _1636 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1600.x + (-0.5));
        float _1638 = _1636 * (_1600.y + (-0.5));
        float _1639 = _1636 * (_1600.z + (-0.5));
        float _1646 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1607.x + (-0.5));
        float _1648 = _1646 * (_1607.y + (-0.5));
        float _1649 = _1646 * (_1607.z + (-0.5));
        float _1656 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1614.x + (-0.5));
        float _1658 = _1656 * (_1614.y + (-0.5));
        float _1659 = _1656 * (_1614.z + (-0.5));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1663 = _1627 * 0.5;
        float _1664 = _1637 * 0.5;
        float _1665 = _1647 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_906, _907, _908), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4525 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4536 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4547 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_1690 + 1.0))) + _1695) * _1660;
        float _1705 = _1628 * 0.5;
        float _1706 = _1638 * 0.5;
        float _1707 = _1648 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_906, _907, _908), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4558 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4569 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4580 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_1732 + 1.0))) + _1737) * _1661;
        float _1747 = _1629 * 0.5;
        float _1748 = _1639 * 0.5;
        float _1749 = _1649 * 0.5;
        float _1750 = dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749));
        float _1755 = (_1750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1750);
        float _1763 = (dot(vec3(_906, _907, _908), vec3(_1755 * _1747, _1755 * _1748, _1755 * _1749)) + 1.0) * 0.5;
        float _4591 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1772 = sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749)) / (_1662 + 9.9999997473787516355514526367188e-06);
        float _4602 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _1774 = _1773 * 2.0;
        float _1778 = (1.0 - _1773) / (_1773 + 1.0);
        float _4613 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1788 = ((((1.0 - _1779) * (_1774 + 2.0)) * exp2(log2(isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_1774 + 1.0))) + _1779) * _1662;
        _1796 = _1629;
        _1797 = _1628;
        _1798 = _1627;
        _1799 = _1639;
        _1800 = _1638;
        _1801 = _1637;
        _1802 = _1649;
        _1803 = _1648;
        _1804 = _1647;
        _1805 = _1662;
        _1806 = _1661;
        _1807 = _1660;
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
        _1810 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)));
    }
    else
    {
        _1796 = _1486;
        _1797 = _1486;
        _1798 = _1486;
        _1799 = _1486;
        _1800 = _1486;
        _1801 = _1486;
        _1802 = _1486;
        _1803 = _1486;
        _1804 = _1486;
        _1805 = _1486;
        _1806 = _1486;
        _1807 = _1486;
        _1808 = 0.0;
        _1809 = 0.0;
        _1810 = 0.0;
    }
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1498)) + _1498;
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1499)) + _1499;
    float _1822 = (cbModelParam._m0[1u].x * (_1810 - _1500)) + _1500;
    float _1843 = fma(_1822, cbSceneParam._m0[89u].z, fma(_1821, cbSceneParam._m0[89u].y, _1820 * cbSceneParam._m0[89u].x));
    float _1846 = fma(_1822, cbSceneParam._m0[90u].z, fma(_1821, cbSceneParam._m0[90u].y, _1820 * cbSceneParam._m0[90u].x));
    float _1849 = fma(_1822, cbSceneParam._m0[91u].z, fma(_1821, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1820));
    float _1864 = _1092 * 0.5;
    float _1865 = _1093 * 0.5;
    float _1866 = _1094 * 0.5;
    float _1867 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1798, _1801, _1804, _1807));
    float _1870 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1873 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1907;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1880 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1485, _1489, _1492, _1495));
        float _1884 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1487, _1490, _1493, _1496));
        float _1888 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1488, _1491, _1494, _1497));
        float _1895 = dot(vec4(cbModelParam._m0[39u]), vec4(_1864, _1865, _1866, 1.0));
        _1907 = dot(vec3(isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1895) ? 0.0 : (isnan(0.0) ? _1895 : max(0.0, _1895))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1907 = 1.0;
    }
    float _1918;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1909 = dot(vec4(cbModelParam._m0[40u]), vec4(_1864, _1865, _1866, 1.0));
        _1918 = dot(vec3(isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1909) ? 0.0 : (isnan(0.0) ? _1909 : max(0.0, _1909))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1918 = 1.0;
    }
    float _1922 = (_1918 * cbModelParam._m0[1u].x) + (_1907 * (1.0 - cbModelParam._m0[1u].x));
    float _1932 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _909);
    float _1933 = isnan(_1932) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1932 : min(cbModelParam._m0[25u].z, _1932));
    float _2014;
    float _2016;
    float _2018;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1981 = fma(_1156, cbModelParam._m0[13u].z, fma(_1152, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1148)) + cbModelParam._m0[13u].w;
        float _1985 = fma(_1156, cbModelParam._m0[14u].z, fma(_1152, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1148)) + cbModelParam._m0[14u].w;
        float _1989 = fma(_1156, cbModelParam._m0[15u].z, fma(_1152, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1148)) + cbModelParam._m0[15u].w;
        float _1992 = fma(_1094, cbModelParam._m0[13u].z, fma(_1093, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1092));
        float _1995 = fma(_1094, cbModelParam._m0[14u].z, fma(_1093, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1092));
        float _1998 = fma(_1094, cbModelParam._m0[15u].z, fma(_1093, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1092));
        float _2026;
        if (_1992 > 0.0)
        {
            _2026 = abs((1.0 - _1981) / _1992);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1981 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2026 = frontier_phi_17_15_ladder;
        }
        float _2198;
        if (_1995 > 0.0)
        {
            _2198 = abs((1.0 - _1985) / _1995);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1985 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2198 = frontier_phi_26_22_ladder;
        }
        float _2493;
        if (_1998 > 0.0)
        {
            _2493 = abs((1.0 - _1989) / _1998);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1989 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2493 = frontier_phi_38_33_ladder;
        }
        float _2495 = isnan(_2198) ? _2026 : (isnan(_2026) ? _2198 : min(_2026, _2198));
        float _2496 = isnan(_2493) ? _2495 : (isnan(_2495) ? _2493 : min(_2495, _2493));
        float _2500 = (_2496 * _1992) + _1981;
        float _2501 = (_2496 * _1995) + _1985;
        float _2502 = (_2496 * _1998) + _1989;
        float _2503 = _2496 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2503;
        float _2507 = _2503 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 > _2507) || ((_2501 < _2505) || ((_2500 < _2505) || (_2500 > _2507))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2502, cbModelParam._m0[9u].z, fma(_2501, cbModelParam._m0[9u].y, _2500 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2502, cbModelParam._m0[10u].z, fma(_2501, cbModelParam._m0[10u].y, _2500 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2502, cbModelParam._m0[11u].z, fma(_2501, cbModelParam._m0[11u].y, _2500 * cbModelParam._m0[11u].x))), _1933);
            frontier_phi_16_38_ladder = _2647.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2647.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2647.x * cbModelParam._m0[1u].y;
        }
        _2014 = frontier_phi_16_38_ladder_2;
        _2016 = frontier_phi_16_38_ladder_1;
        _2018 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2002 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1092, _1093, _1094), _1933);
        _2014 = _2002.x * cbModelParam._m0[1u].y;
        _2016 = _2002.y * cbModelParam._m0[1u].y;
        _2018 = _2002.z * cbModelParam._m0[1u].y;
    }
    float _2022 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _909);
    float _2023 = isnan(_2022) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2022 : min(cbModelParam._m0[25u].w, _2022));
    float _2113;
    float _2115;
    float _2117;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2077 = fma(_1156, cbModelParam._m0[21u].z, fma(_1152, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1148)) + cbModelParam._m0[21u].w;
        float _2081 = fma(_1156, cbModelParam._m0[22u].z, fma(_1152, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1148)) + cbModelParam._m0[22u].w;
        float _2085 = fma(_1156, cbModelParam._m0[23u].z, fma(_1152, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1148)) + cbModelParam._m0[23u].w;
        float _2088 = fma(_1094, cbModelParam._m0[21u].z, fma(_1093, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1092));
        float _2091 = fma(_1094, cbModelParam._m0[22u].z, fma(_1093, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1092));
        float _2094 = fma(_1094, cbModelParam._m0[23u].z, fma(_1093, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1092));
        float _2203;
        if (_2088 > 0.0)
        {
            _2203 = abs((1.0 - _2077) / _2088);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2077 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2203 = frontier_phi_28_24_ladder;
        }
        float _2520;
        if (_2091 > 0.0)
        {
            _2520 = abs((1.0 - _2081) / _2091);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2081 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2520 = frontier_phi_40_35_ladder;
        }
        float _2858;
        if (_2094 > 0.0)
        {
            _2858 = abs((1.0 - _2085) / _2094);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2094 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2085 + 1.0) / _2094);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2858 = frontier_phi_50_47_ladder;
        }
        float _2860 = isnan(_2520) ? _2203 : (isnan(_2203) ? _2520 : min(_2203, _2520));
        float _2861 = isnan(_2858) ? _2860 : (isnan(_2860) ? _2858 : min(_2860, _2858));
        float _2865 = (_2861 * _2088) + _2077;
        float _2866 = (_2861 * _2091) + _2081;
        float _2867 = (_2861 * _2094) + _2085;
        float _2868 = _2861 * 9.9999997473787516355514526367188e-05;
        float _2869 = (-1.0) - _2868;
        float _2871 = _2868 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2867 > _2871) || ((_2867 < _2869) || ((_2866 > _2871) || ((_2866 < _2869) || ((_2865 < _2869) || (_2865 > _2871))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2989 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2867, cbModelParam._m0[17u].z, fma(_2866, cbModelParam._m0[17u].y, _2865 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2867, cbModelParam._m0[18u].z, fma(_2866, cbModelParam._m0[18u].y, _2865 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2867, cbModelParam._m0[19u].z, fma(_2866, cbModelParam._m0[19u].y, _2865 * cbModelParam._m0[19u].x))), _2023);
            frontier_phi_25_50_ladder = _2989.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2989.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2989.x * cbModelParam._m0[1u].z;
        }
        _2113 = frontier_phi_25_50_ladder_2;
        _2115 = frontier_phi_25_50_ladder_1;
        _2117 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2097 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1092, _1093, _1094), _2023);
        _2113 = _2097.x * cbModelParam._m0[1u].z;
        _2115 = _2097.y * cbModelParam._m0[1u].z;
        _2117 = _2097.z * cbModelParam._m0[1u].z;
    }
    float _2130 = (((_1119 * _1068) + _1120) * _1084) * ((cbModelParam._m0[1u].w * (_2113 - _2014)) + _2014);
    float _2132 = (((_1119 * _1070) + _1120) * _1084) * ((cbModelParam._m0[1u].w * (_2115 - _2016)) + _2016);
    float _2134 = (((_1119 * _1071) + _1120) * _1084) * ((cbModelParam._m0[1u].w * (_2117 - _2018)) + _2018);
    float _2137 = fma(_2134, cbSceneParam._m0[89u].z, fma(_2132, cbSceneParam._m0[89u].y, _2130 * cbSceneParam._m0[89u].x));
    float _2140 = fma(_2134, cbSceneParam._m0[90u].z, fma(_2132, cbSceneParam._m0[90u].y, _2130 * cbSceneParam._m0[90u].x));
    float _2143 = fma(_2134, cbSceneParam._m0[91u].z, fma(_2132, cbSceneParam._m0[91u].y, _2130 * cbSceneParam._m0[91u].x));
    float _2177 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2181 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2185 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2189 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2190 = _2177 / _2189;
    float _2191 = _2181 / _2189;
    float _2192 = _2185 / _2189;
    float _2339;
    float _2340;
    float _2341;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2219 = ((uint(_2192 > cbSceneParam._m0[59u].y) + uint(_2192 > cbSceneParam._m0[59u].x)) + uint(_2192 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2220 = _2219 + 43u;
        uint _2228 = _2219 + 44u;
        uint _2236 = _2219 + 45u;
        uint _2244 = _2219 + 46u;
        float _2255 = fma(_2189, cbSceneParam._m0[_2220].w, fma(_2185, cbSceneParam._m0[_2220].z, fma(_2181, cbSceneParam._m0[_2220].y, _2177 * cbSceneParam._m0[_2220].x)));
        float _2259 = fma(_2189, cbSceneParam._m0[_2228].w, fma(_2185, cbSceneParam._m0[_2228].z, fma(_2181, cbSceneParam._m0[_2228].y, _2177 * cbSceneParam._m0[_2228].x)));
        float _2267 = fma(_2189, cbSceneParam._m0[_2244].w, fma(_2185, cbSceneParam._m0[_2244].z, fma(_2181, cbSceneParam._m0[_2244].y, _2177 * cbSceneParam._m0[_2244].x)));
        float _2272 = cbSceneParam._m0[33u].z * _2267;
        float _2274 = cbSceneParam._m0[33u].w * _2267;
        float _2277 = fma(_2189, cbSceneParam._m0[_2236].w, fma(_2185, cbSceneParam._m0[_2236].z, fma(_2181, cbSceneParam._m0[_2236].y, _2177 * cbSceneParam._m0[_2236].x))) / _2267;
        float _2325 = (cbSceneParam._m0[33u].x - sqrt(((_2191 * _2191) + (_2190 * _2190)) + (_2192 * _2192))) * cbSceneParam._m0[33u].y;
        float _4739 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2332 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2272 + _2255) / _2267, (_2274 + _2259) / _2267), _2277), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2274 + _2255) / _2267, (_2259 - _2272) / _2267), _2277), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2255 - _2272) / _2267, (_2259 - _2274) / _2267), _2277), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2255 - _2274) / _2267, (_2272 + _2259) / _2267), _2277), 0.0)).x), vec4(0.25)));
        _2339 = 1.0 - (_2332 * cbSceneParam._m0[34u].x);
        _2340 = 1.0 - (_2332 * cbSceneParam._m0[34u].y);
        _2341 = 1.0 - (_2332 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2339 = 1.0;
        _2340 = 1.0;
        _2341 = 1.0;
    }
    float _2405;
    float _2407;
    float _2409;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2393 = fma(_2189, cbSceneParam._m0[63u].w, fma(_2185, cbSceneParam._m0[63u].z, fma(_2181, cbSceneParam._m0[63u].y, _2177 * cbSceneParam._m0[63u].x)));
        float _2394 = fma(_2189, cbSceneParam._m0[60u].w, fma(_2185, cbSceneParam._m0[60u].z, fma(_2181, cbSceneParam._m0[60u].y, _2177 * cbSceneParam._m0[60u].x))) / _2393;
        float _2395 = fma(_2189, cbSceneParam._m0[61u].w, fma(_2185, cbSceneParam._m0[61u].z, fma(_2181, cbSceneParam._m0[61u].y, _2177 * cbSceneParam._m0[61u].x))) / _2393;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2394 >= cbSceneParam._m0[64u].x) && (_2395 >= cbSceneParam._m0[64u].y)) && (_2394 <= cbSceneParam._m0[64u].z)) && (_2395 <= cbSceneParam._m0[64u].w))
        {
            float _2533 = fma(_2189, cbSceneParam._m0[62u].w, fma(_2185, cbSceneParam._m0[62u].z, fma(_2181, cbSceneParam._m0[62u].y, _2177 * cbSceneParam._m0[62u].x))) / _2393;
            float _2537 = isnan(cbSceneParam._m0[41u].w) ? _2533 : (isnan(_2533) ? cbSceneParam._m0[41u].w : max(_2533, cbSceneParam._m0[41u].w));
            float _2580 = (cbSceneParam._m0[33u].x - sqrt(((_2191 * _2191) + (_2190 * _2190)) + (_2192 * _2192))) * cbSceneParam._m0[33u].y;
            float _4755 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
            float _2587 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2394, cbSceneParam._m0[33u].w + _2395), _2537), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2394, _2395 - cbSceneParam._m0[33u].z), _2537), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2394 - cbSceneParam._m0[33u].z, _2395 - cbSceneParam._m0[33u].w), _2537), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2394 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2395), _2537), 0.0)).x), vec4(0.25)));
            float _2591 = 1.0 - (_2587 * cbSceneParam._m0[34u].x);
            float _2592 = 1.0 - (_2587 * cbSceneParam._m0[34u].y);
            float _2593 = 1.0 - (_2587 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2593) ? _2341 : (isnan(_2341) ? _2593 : min(_2341, _2593));
            frontier_phi_37_36_ladder_1 = isnan(_2592) ? _2340 : (isnan(_2340) ? _2592 : min(_2340, _2592));
            frontier_phi_37_36_ladder_2 = isnan(_2591) ? _2339 : (isnan(_2339) ? _2591 : min(_2339, _2591));
        }
        else
        {
            frontier_phi_37_36_ladder = _2341;
            frontier_phi_37_36_ladder_1 = _2340;
            frontier_phi_37_36_ladder_2 = _2339;
        }
        _2405 = frontier_phi_37_36_ladder_2;
        _2407 = frontier_phi_37_36_ladder_1;
        _2409 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2405 = _2339;
        _2407 = _2340;
        _2409 = _2341;
    }
    uvec4 _2414 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2416 = _2414.x * 14u;
    uint _2417 = _2416 + 13u;
    float _2424 = _1084 + (-1.0);
    float _2429 = (cbLight._m0[_2417].x * _2424) + 1.0;
    float _2430 = (cbLight._m0[_2417].y * _2424) + 1.0;
    float _2431 = (cbLight._m0[_2417].z * _2424) + 1.0;
    float _2432 = (cbLight._m0[_2417].w * _2424) + 1.0;
    uint _2433 = _2416 + 5u;
    float _2439 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
    uint _2443 = _2416 + 4u;
    float _2452 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
    uint _2456 = _2416 | 1u;
    float _2467 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_906, _907, _908));
    float _2470 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_906, _907, _908));
    float _4791 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _4802 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2475 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * 0.3183098733425140380859375;
    float _2477 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * 0.3183098733425140380859375;
    float _2484 = ((cbLight._m0[_2433].x * _2439) * _2477) + (((cbLight._m0[_2443].x * _2405) * _2452) * _2475);
    float _2485 = ((_2439 * cbLight._m0[_2433].y) * _2477) + (((cbLight._m0[_2443].y * _2407) * _2452) * _2475);
    float _2486 = ((_2439 * cbLight._m0[_2433].z) * _2477) + (((cbLight._m0[_2443].z * _2409) * _2452) * _2475);
    uvec4 _2490 = floatBitsToUint(cbLight._m0[_2416 + 12u]);
    bool _2492 = _2490.x == 0u;
    float _2594;
    float _2596;
    float _2598;
    if (_2492)
    {
        _2594 = _2484;
        _2596 = _2485;
        _2598 = _2486;
    }
    else
    {
        uint _2602 = _2416 + 6u;
        float _2618 = (dot(vec3(cbLight._m0[_2416 + 2u].xyz), vec3(_906, _907, _908)) * 0.5) + 0.5;
        float _2619 = _2618 * _2618;
        float _4813 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2620 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2621 = isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0));
        _2594 = (((cbLight._m0[_2602].x * 0.3183098733425140380859375) * _2620) * _2621) + _2484;
        _2596 = (((cbLight._m0[_2602].y * 0.3183098733425140380859375) * _2620) * _2621) + _2485;
        _2598 = (((cbLight._m0[_2602].z * 0.3183098733425140380859375) * _2620) * _2621) + _2486;
    }
    bool _2601 = _2490.y == 0u;
    float _2656;
    float _2658;
    float _2660;
    if (_2601)
    {
        _2656 = _2594;
        _2658 = _2596;
        _2660 = _2598;
    }
    else
    {
        uint _2829 = _2416 + 7u;
        float _2845 = (dot(vec3(cbLight._m0[_2416 + 3u].xyz), vec3(_906, _907, _908)) * 0.5) + 0.5;
        float _2846 = _2845 * _2845;
        float _4829 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2847 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2848 = isnan(1.0) ? _2432 : (isnan(_2432) ? 1.0 : min(_2432, 1.0));
        _2656 = (((cbLight._m0[_2829].x * 0.3183098733425140380859375) * _2847) * _2848) + _2594;
        _2658 = (((cbLight._m0[_2829].y * 0.3183098733425140380859375) * _2847) * _2848) + _2596;
        _2660 = (((cbLight._m0[_2829].z * 0.3183098733425140380859375) * _2847) * _2848) + _2598;
    }
    uint _2663 = _2416 + 8u;
    float _2676 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _909) * 0.949999988079071044921875);
    float _2677 = _2676 * _2676;
    float _2678 = cbLight._m0[_2416].x + _986;
    float _2679 = cbLight._m0[_2416].y + _987;
    float _2680 = cbLight._m0[_2416].z + _988;
    float _2684 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
    float _2685 = _2684 * _2678;
    float _2686 = _2684 * _2679;
    float _2687 = _2684 * _2680;
    float _2688 = dot(vec3(_906, _907, _908), vec3(cbLight._m0[_2416].xyz));
    float _4845 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2691 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
    float _4856 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _2692 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
    float _2693 = dot(vec3(_906, _907, _908), vec3(_2685, _2686, _2687));
    float _4867 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2696 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
    float _2697 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2685, _2686, _2687));
    float _4878 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2701 = _2677 * _2677;
    float _2705 = ((_2696 * _2696) * (_2701 + (-1.0))) + 1.0;
    float _2713 = exp2(log2(1.0 - (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) * 5.0);
    float _2714 = 0.959999978542327880859375 - _1065;
    float _2716 = 0.959999978542327880859375 - _1066;
    float _2717 = 0.959999978542327880859375 - _1067;
    float _2724 = 1.0 - _2677;
    float _2735 = (0.5 / (((_2692 * ((_2691 * _2724) + _2677)) + 9.9999999392252902907785028219223e-09) + (((_2692 * _2724) + _2677) * _2691))) * _2691;
    float _4889 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2737 = (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2701 / ((_2705 * _2705) * 3.141590118408203125));
    uint _2751 = _2416 + 9u;
    float _2762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _909) * 0.949999988079071044921875);
    float _2763 = _2762 * _2762;
    float _2764 = cbLight._m0[_2456].x + _986;
    float _2765 = cbLight._m0[_2456].y + _987;
    float _2766 = cbLight._m0[_2456].z + _988;
    float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
    float _2771 = _2770 * _2764;
    float _2772 = _2770 * _2765;
    float _2773 = _2770 * _2766;
    float _2774 = dot(vec3(_906, _907, _908), vec3(cbLight._m0[_2456].xyz));
    float _4900 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
    float _2777 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
    float _2778 = dot(vec3(_906, _907, _908), vec3(_2771, _2772, _2773));
    float _4911 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
    float _2781 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
    float _2782 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2771, _2772, _2773));
    float _4922 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2786 = _2763 * _2763;
    float _2790 = ((_2781 * _2781) * (_2786 + (-1.0))) + 1.0;
    float _2797 = exp2(log2(1.0 - (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) * 5.0);
    float _2804 = 1.0 - _2763;
    float _2814 = (0.5 / (((_2692 * ((_2777 * _2804) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2692 * _2804) + _2763) * _2777))) * _2777;
    float _4933 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
    float _2816 = (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2786 / ((_2790 * _2790) * 3.141590118408203125));
    float _2826 = (((((_2797 * _2714) + _1068) * cbLight._m0[_2751].x) * _2816) * _2439) + ((((cbLight._m0[_2663].x * _2405) * ((_2713 * _2714) + _1068)) * _2737) * _2452);
    float _2827 = (((((_2797 * _2716) + _1070) * cbLight._m0[_2751].y) * _2816) * _2439) + ((((cbLight._m0[_2663].y * _2407) * ((_2713 * _2716) + _1070)) * _2737) * _2452);
    float _2828 = (((((_2797 * _2717) + _1071) * cbLight._m0[_2751].z) * _2816) * _2439) + ((((cbLight._m0[_2663].z * _2409) * ((_2713 * _2717) + _1071)) * _2737) * _2452);
    float _2884;
    float _2886;
    float _2888;
    if (_2492)
    {
        _2884 = _2826;
        _2886 = _2827;
        _2888 = _2828;
    }
    else
    {
        uint _2890 = _2416 + 2u;
        uint _2894 = _2416 + 10u;
        float _2908 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2890].w)) * _909) * 0.949999988079071044921875);
        float _2909 = _2908 * _2908;
        float _2910 = cbLight._m0[_2890].x + _986;
        float _2911 = cbLight._m0[_2890].y + _987;
        float _2912 = cbLight._m0[_2890].z + _988;
        float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
        float _2917 = _2916 * _2910;
        float _2918 = _2916 * _2911;
        float _2919 = _2916 * _2912;
        float _2920 = dot(vec3(_906, _907, _908), vec3(cbLight._m0[_2890].xyz));
        float _4944 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2923 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
        float _2924 = dot(vec3(_906, _907, _908), vec3(_2917, _2918, _2919));
        float _4955 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2927 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
        float _2928 = dot(vec3(cbLight._m0[_2890].xyz), vec3(_2917, _2918, _2919));
        float _4966 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2932 = _2909 * _2909;
        float _2936 = ((_2927 * _2927) * (_2932 + (-1.0))) + 1.0;
        float _2943 = exp2(log2(1.0 - (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) * 5.0);
        float _2950 = 1.0 - _2909;
        float _2960 = (0.5 / (((_2692 * ((_2923 * _2950) + _2909)) + 9.9999999392252902907785028219223e-09) + (((_2692 * _2950) + _2909) * _2923))) * _2923;
        float _4977 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2962 = (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0))) * (_2932 / ((_2936 * _2936) * 3.141590118408203125));
        float _2963 = isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0));
        _2884 = (((((_2943 * _2714) + _1068) * cbLight._m0[_2894].x) * _2962) * _2963) + _2826;
        _2886 = (((((_2943 * _2716) + _1070) * cbLight._m0[_2894].y) * _2962) * _2963) + _2827;
        _2888 = (((((_2943 * _2717) + _1071) * cbLight._m0[_2894].z) * _2962) * _2963) + _2828;
    }
    float _2994;
    float _2996;
    float _2998;
    if (_2601)
    {
        _2994 = _2884;
        _2996 = _2886;
        _2998 = _2888;
    }
    else
    {
        uint _3005 = _2416 + 3u;
        uint _3009 = _2416 + 11u;
        float _3023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3005].w)) * _909) * 0.949999988079071044921875);
        float _3024 = _3023 * _3023;
        float _3025 = cbLight._m0[_3005].x + _986;
        float _3026 = cbLight._m0[_3005].y + _987;
        float _3027 = cbLight._m0[_3005].z + _988;
        float _3031 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
        float _3032 = _3031 * _3025;
        float _3033 = _3031 * _3026;
        float _3034 = _3031 * _3027;
        float _3035 = dot(vec3(_906, _907, _908), vec3(cbLight._m0[_3005].xyz));
        float _4993 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        float _3038 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
        float _3039 = dot(vec3(_906, _907, _908), vec3(_3032, _3033, _3034));
        float _5004 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        float _3042 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
        float _3043 = dot(vec3(cbLight._m0[_3005].xyz), vec3(_3032, _3033, _3034));
        float _5015 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3047 = _3024 * _3024;
        float _3051 = ((_3042 * _3042) * (_3047 + (-1.0))) + 1.0;
        float _3058 = exp2(log2(1.0 - (isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0)))) * 5.0);
        float _3065 = 1.0 - _3024;
        float _3075 = (0.5 / (((_2692 * ((_3038 * _3065) + _3024)) + 9.9999999392252902907785028219223e-09) + (((_2692 * _3065) + _3024) * _3038))) * _3038;
        float _5026 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
        float _3077 = (isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0))) * (_3047 / ((_3051 * _3051) * 3.141590118408203125));
        float _3078 = isnan(1.0) ? _2432 : (isnan(_2432) ? 1.0 : min(_2432, 1.0));
        _2994 = (((((_3058 * _2714) + _1068) * cbLight._m0[_3009].x) * _3077) * _3078) + _2884;
        _2996 = (((((_3058 * _2716) + _1070) * cbLight._m0[_3009].y) * _3077) * _3078) + _2886;
        _2998 = (((((_3058 * _2717) + _1071) * cbLight._m0[_3009].z) * _3077) * _3078) + _2888;
    }
    float _3144;
    float _3146;
    float _3148;
    float _3150;
    float _3152;
    float _3154;
    if (_2414.y == 0u)
    {
        uvec4 _3099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3100 = _3099.x;
        uint _3111 = uint((float(_3099.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1007) / _3100))) + floor(float(uint(cbSceneParam._m0[85u].x * _1006) / _3100)));
        float _3121 = (log2(_2192 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3122 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
        uint _3125 = uint(isnan(14.0) ? _3122 : (isnan(_3122) ? 14.0 : min(_3122, 14.0)));
        uvec4 _3130 = texelFetch(g_lightClusterGridBuffer, int(((_3125 << 2u) + (_3111 << 6u)) >> 2u));
        uint _3131 = _3130.x;
        uint _3132 = _3099.z;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        if (((((1u << ((_3132 >> 4u) & 15u)) + 4294967295u) & _3131) == 0u) || ((_3132 & 240u) == 0u))
        {
            _3211 = 0.0;
            _3213 = 0.0;
            _3215 = 0.0;
            _3217 = 0.0;
            _3219 = 0.0;
            _3221 = 0.0;
        }
        else
        {
            float _3212;
            float _3214;
            float _3216;
            float _3218;
            float _3220;
            float _3222;
            float _3364 = 0.0;
            float _3365 = 0.0;
            float _3366 = 0.0;
            float _3367 = 0.0;
            float _3368 = 0.0;
            float _3369 = 0.0;
            uint _3370 = 0u;
            uint _3379;
            bool _3380;
            for (;;)
            {
                _3379 = texelFetch(g_lightClassification, int((((_3125 << 5u) + (_3111 << 9u)) + (_3370 << 2u)) >> 2u)).x;
                _3380 = _3379 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3380)
                {
                    frontier_phi_71_pred = _3369;
                    frontier_phi_71_pred_1 = _3368;
                    frontier_phi_71_pred_2 = _3367;
                    frontier_phi_71_pred_3 = _3366;
                    frontier_phi_71_pred_4 = _3365;
                    frontier_phi_71_pred_5 = _3364;
                }
                else
                {
                    float _3509;
                    float _3510;
                    float _3511;
                    float _3512;
                    float _3513;
                    float _3514;
                    uint _3515;
                    _3509 = _3364;
                    _3510 = _3365;
                    _3511 = _3366;
                    _3512 = _3367;
                    _3513 = _3368;
                    _3514 = _3369;
                    _3515 = _3379;
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    for (;;)
                    {
                        uint _3519 = uint(findLSB(_3515)) + (_3370 << 5u);
                        uint _3516 = (_3515 + 4294967295u) & _3515;
                        uint _3521 = _3519 * 48u;
                        vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3521)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 3u)).x));
                        uint _3541 = (_3519 * 48u) + 4u;
                        vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3541)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 3u)).x));
                        uint _3560 = (_3519 * 48u) + 8u;
                        vec3 _3571 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3560)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 2u)).x));
                        float _3575 = _3535.x - _2190;
                        float _3576 = _3535.y - _2191;
                        float _3577 = _3535.z - _2192;
                        float _3578 = dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577));
                        float _3581 = inversesqrt(_3578);
                        float _3582 = _3581 * _3575;
                        float _3583 = _3581 * _3576;
                        float _3584 = _3581 * _3577;
                        float _3585 = dot(vec3(_1025, _1028, _1031), vec3(_3582, _3583, _3584));
                        float _3590 = 1.0 - (_3578 * _3535.w);
                        float _5052 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3591 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                        float _3592 = sqrt(_3578) * _3554.w;
                        float _3595 = 1.39999997615814208984375 / (_3592 + 1.39999997615814208984375);
                        float _3596 = _3595 * _3595;
                        float _3599 = ((1.0 - _3596) * _3585) + _3596;
                        float _3602 = _3592 * _3592;
                        float _3606 = ((isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0))) * _3591) / ((_3602 * 0.699999988079071044921875) + 1.0);
                        float _3610 = (-0.0) - _2190;
                        float _3611 = (-0.0) - _2191;
                        float _3612 = (-0.0) - _2192;
                        float _3616 = inversesqrt(dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612)));
                        float _3617 = _3616 * _3610;
                        float _3618 = _3616 * _3611;
                        float _3619 = _3616 * _3612;
                        float _3626 = exp2(log2(1.0 / ((_3602 * 3.5) + 5.0)) * 0.25);
                        float _3627 = 1.0 - _1100;
                        float _3634 = sqrt(1.0 - ((1.0 - (_3627 * _3627)) * (1.0 - (_3626 * _3626))));
                        float _3635 = _3634 * _3634;
                        float _3636 = _3635 * _3635;
                        float _3637 = _3617 + _3582;
                        float _3638 = _3618 + _3583;
                        float _3639 = _3619 + _3584;
                        float _3643 = inversesqrt(dot(vec3(_3637, _3638, _3639), vec3(_3637, _3638, _3639)));
                        float _3647 = dot(vec3(_1025, _1028, _1031), vec3(_3617, _3618, _3619));
                        float _5068 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                        float _3650 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                        float _3651 = dot(vec3(_1025, _1028, _1031), vec3(_3643 * _3637, _3643 * _3638, _3643 * _3639));
                        float _5079 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                        float _3654 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                        float _3658 = ((_3654 * _3654) * (_3636 + (-1.0))) + 1.0;
                        float _3659 = _3595 * _3635;
                        float _3660 = _3659 * _3659;
                        float _3663 = ((1.0 - _3660) * _3585) + _3660;
                        float _5090 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3664 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                        float _3665 = 1.0 - _3635;
                        float _3675 = (0.5 / (((_3664 * ((_3650 * _3665) + _3635)) + 9.9999999392252902907785028219223e-09) + (((_3664 * _3665) + _3635) * _3650))) * _3664;
                        float _5101 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                        float _3686 = (((_3636 * 3.1415927410125732421875) * (isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0)))) / ((_3658 * _3658) * ((_3602 * 2.1991131305694580078125) + 3.141590118408203125))) * _3591;
                        _3439 = (_3606 * _3554.x) + _3512;
                        _3440 = (_3606 * _3554.y) + _3513;
                        _3441 = (_3606 * _3554.z) + _3514;
                        _3436 = (_3686 * _3571.x) + _3509;
                        _3437 = (_3686 * _3571.y) + _3510;
                        _3438 = (_3686 * _3571.z) + _3511;
                        if (_3516 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3509 = _3436;
                            _3510 = _3437;
                            _3511 = _3438;
                            _3512 = _3439;
                            _3513 = _3440;
                            _3514 = _3441;
                            _3515 = _3516;
                        }
                    }
                    frontier_phi_71_pred = _3441;
                    frontier_phi_71_pred_1 = _3440;
                    frontier_phi_71_pred_2 = _3439;
                    frontier_phi_71_pred_3 = _3438;
                    frontier_phi_71_pred_4 = _3437;
                    frontier_phi_71_pred_5 = _3436;
                }
                _3222 = frontier_phi_71_pred;
                _3220 = frontier_phi_71_pred_1;
                _3218 = frontier_phi_71_pred_2;
                _3216 = frontier_phi_71_pred_3;
                _3214 = frontier_phi_71_pred_4;
                _3212 = frontier_phi_71_pred_5;
                uint _3371 = _3370 + 1u;
                if (_3371 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3364 = _3212;
                    _3365 = _3214;
                    _3366 = _3216;
                    _3367 = _3218;
                    _3368 = _3220;
                    _3369 = _3222;
                    _3370 = _3371;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3211 = _3212;
            _3213 = _3214;
            _3215 = _3216;
            _3217 = _3218;
            _3219 = _3220;
            _3221 = _3222;
        }
        uvec4 _3225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3226 = _3225.z;
        uint _3228 = (_3226 >> 8u) & 15u;
        float _3332;
        float _3334;
        float _3336;
        float _3338;
        float _3340;
        float _3342;
        if (((4294967295u << _3228) & _3131) == 0u)
        {
            _3332 = _3211;
            _3334 = _3213;
            _3336 = _3215;
            _3338 = _3217;
            _3340 = _3219;
            _3342 = _3221;
        }
        else
        {
            float _3357 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
            float _3358 = _3357 * _2190;
            float _3359 = _3357 * _2191;
            float _3360 = _3357 * _2192;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3228 < ((_3226 >> 12u) & 15u))
            {
                float _3333;
                float _3335;
                float _3337;
                float _3339;
                float _3341;
                float _3343;
                float _3492 = _3211;
                float _3493 = _3213;
                float _3494 = _3215;
                float _3495 = _3217;
                float _3496 = _3219;
                float _3497 = _3221;
                uint _3498 = _3228;
                uint _3507;
                bool _3508;
                for (;;)
                {
                    _3507 = texelFetch(g_lightClassification, int((((_3125 << 5u) + (_3111 << 9u)) + (_3498 << 2u)) >> 2u)).x;
                    _3508 = _3507 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3508)
                    {
                        frontier_phi_82_pred = _3497;
                        frontier_phi_82_pred_1 = _3496;
                        frontier_phi_82_pred_2 = _3495;
                        frontier_phi_82_pred_3 = _3494;
                        frontier_phi_82_pred_4 = _3493;
                        frontier_phi_82_pred_5 = _3492;
                    }
                    else
                    {
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3993;
                        float _3994;
                        float _3995;
                        float _3996;
                        float _3997;
                        float _3998;
                        float _3713 = _3492;
                        float _3714 = _3493;
                        float _3715 = _3494;
                        float _3716 = _3495;
                        float _3717 = _3496;
                        float _3718 = _3497;
                        uint _3719 = _3507;
                        uint _3720;
                        vec4 _3745;
                        float _3746;
                        vec4 _3761;
                        vec3 _3773;
                        vec4 _3788;
                        vec4 _3803;
                        float _3849;
                        bool _3850;
                        for (;;)
                        {
                            uint _3730 = ((_3498 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3719));
                            _3720 = (_3719 + 4294967295u) & _3719;
                            uint _3732 = _3730 * 40u;
                            _3745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 3u)).x));
                            _3746 = _3745.w;
                            uint _3748 = (_3730 * 40u) + 4u;
                            _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            uint _3763 = (_3730 * 40u) + 8u;
                            _3773 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 2u)).x));
                            uint _3775 = (_3730 * 40u) + 16u;
                            _3788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 3u)).x));
                            uint _3790 = (_3730 * 40u) + 20u;
                            _3803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 3u)).x));
                            uint _3805 = (_3730 * 40u) + 24u;
                            vec4 _3818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 3u)).x));
                            uint _3824 = (_3730 * 40u) + 28u;
                            vec4 _3837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 3u)).x));
                            _3849 = fma(_2192, _3837.z, fma(_2191, _3837.y, _3837.x * _2190)) + _3837.w;
                            _3850 = !((fma(_2192, _3818.z, fma(_2191, _3818.y, _3818.x * _2190)) + _3818.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3850)
                            {
                                float _3877 = _3745.x - _2190;
                                float _3878 = _3745.y - _2191;
                                float _3879 = _3745.z - _2192;
                                float _3880 = dot(vec3(_3877, _3878, _3879), vec3(_3877, _3878, _3879));
                                float _3883 = inversesqrt(_3880);
                                float _3884 = _3883 * _3877;
                                float _3885 = _3883 * _3878;
                                float _3886 = _3883 * _3879;
                                float _3890 = 1.0 - (_3880 / (_3746 * _3746));
                                float _5112 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3891 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
                                float _3895 = sqrt(_3880) * _3761.w;
                                float _3897 = 1.39999997615814208984375 / (_3895 + 1.39999997615814208984375);
                                float _3898 = _3897 * _3897;
                                float _3901 = ((1.0 - _3898) * dot(vec3(_3884, _3885, _3886), vec3(_1025, _1028, _1031))) + _3898;
                                float _3904 = _3895 * _3895;
                                float _3908 = (fma(_2192, _3788.z, fma(_2191, _3788.y, _3788.x * _2190)) + _3788.w) / _3849;
                                float _3909 = (fma(_2192, _3803.z, fma(_2191, _3803.y, _3803.x * _2190)) + _3803.w) / _3849;
                                float _3913 = 1.0 - dot(vec2(_3908, _3909), vec2(_3908, _3909));
                                float _5128 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3914 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
                                float _3915 = _3914 * (((isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0))) * _3891) / ((_3904 * 0.699999988079071044921875) + 1.0));
                                float _3927 = exp2(log2(1.0 / ((_3904 * 3.5) + 5.0)) * 0.25);
                                float _3928 = 1.0 - _1100;
                                float _3935 = sqrt(1.0 - ((1.0 - (_3928 * _3928)) * (1.0 - (_3927 * _3927))));
                                float _3936 = _3935 * _3935;
                                float _3937 = _3936 * _3936;
                                float _3938 = _3884 - _3358;
                                float _3939 = _3885 - _3359;
                                float _3940 = _3886 - _3360;
                                float _3944 = inversesqrt(dot(vec3(_3938, _3939, _3940), vec3(_3938, _3939, _3940)));
                                float _3948 = dot(vec3(_1025, _1028, _1031), vec3((-0.0) - _3358, (-0.0) - _3359, (-0.0) - _3360));
                                float _5139 = isnan(0.0) ? _3948 : (isnan(_3948) ? 0.0 : max(_3948, 0.0));
                                float _3951 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
                                float _3952 = dot(vec3(_1025, _1028, _1031), vec3(_3944 * _3938, _3944 * _3939, _3944 * _3940));
                                float _5150 = isnan(0.0) ? _3952 : (isnan(_3952) ? 0.0 : max(_3952, 0.0));
                                float _3955 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
                                float _3959 = ((_3955 * _3955) * (_3937 + (-1.0))) + 1.0;
                                float _3960 = _3897 * _3936;
                                float _3961 = _3960 * _3960;
                                float _3967 = ((1.0 - _3961) * dot(vec3(_1025, _1028, _1031), vec3(_3884, _3885, _3886))) + _3961;
                                float _5161 = isnan(0.0) ? _3967 : (isnan(_3967) ? 0.0 : max(_3967, 0.0));
                                float _3968 = isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0));
                                float _3969 = 1.0 - _3936;
                                float _3979 = (0.5 / (((_3968 * ((_3951 * _3969) + _3936)) + 9.9999999392252902907785028219223e-09) + (((_3968 * _3969) + _3936) * _3951))) * _3968;
                                float _5172 = isnan(0.0) ? _3979 : (isnan(_3979) ? 0.0 : max(_3979, 0.0));
                                float _3989 = (_3914 * _3891) * (((_3937 * 3.1415927410125732421875) * (isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0)))) / ((_3959 * _3959) * ((_3904 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3915 * _3761.z;
                                frontier_phi_88_pred_1 = _3915 * _3761.y;
                                frontier_phi_88_pred_2 = _3915 * _3761.x;
                                frontier_phi_88_pred_3 = _3989 * _3773.z;
                                frontier_phi_88_pred_4 = _3989 * _3773.y;
                                frontier_phi_88_pred_5 = _3989 * _3773.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3998 = frontier_phi_88_pred;
                            _3997 = frontier_phi_88_pred_1;
                            _3996 = frontier_phi_88_pred_2;
                            _3995 = frontier_phi_88_pred_3;
                            _3994 = frontier_phi_88_pred_4;
                            _3993 = frontier_phi_88_pred_5;
                            _3703 = _3996 + _3716;
                            _3704 = _3997 + _3717;
                            _3705 = _3998 + _3718;
                            _3700 = _3993 + _3713;
                            _3701 = _3994 + _3714;
                            _3702 = _3995 + _3715;
                            if (_3720 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3713 = _3700;
                                _3714 = _3701;
                                _3715 = _3702;
                                _3716 = _3703;
                                _3717 = _3704;
                                _3718 = _3705;
                                _3719 = _3720;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3705;
                        frontier_phi_82_pred_1 = _3704;
                        frontier_phi_82_pred_2 = _3703;
                        frontier_phi_82_pred_3 = _3702;
                        frontier_phi_82_pred_4 = _3701;
                        frontier_phi_82_pred_5 = _3700;
                    }
                    _3343 = frontier_phi_82_pred;
                    _3341 = frontier_phi_82_pred_1;
                    _3339 = frontier_phi_82_pred_2;
                    _3337 = frontier_phi_82_pred_3;
                    _3335 = frontier_phi_82_pred_4;
                    _3333 = frontier_phi_82_pred_5;
                    uint _3499 = _3498 + 1u;
                    if (_3499 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3492 = _3333;
                        _3493 = _3335;
                        _3494 = _3337;
                        _3495 = _3339;
                        _3496 = _3341;
                        _3497 = _3343;
                        _3498 = _3499;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3339;
                frontier_phi_63_64_ladder_1 = _3343;
                frontier_phi_63_64_ladder_2 = _3341;
                frontier_phi_63_64_ladder_3 = _3337;
                frontier_phi_63_64_ladder_4 = _3335;
                frontier_phi_63_64_ladder_5 = _3333;
            }
            else
            {
                frontier_phi_63_64_ladder = _3217;
                frontier_phi_63_64_ladder_1 = _3221;
                frontier_phi_63_64_ladder_2 = _3219;
                frontier_phi_63_64_ladder_3 = _3215;
                frontier_phi_63_64_ladder_4 = _3213;
                frontier_phi_63_64_ladder_5 = _3211;
            }
            _3332 = frontier_phi_63_64_ladder_5;
            _3334 = frontier_phi_63_64_ladder_4;
            _3336 = frontier_phi_63_64_ladder_3;
            _3338 = frontier_phi_63_64_ladder;
            _3340 = frontier_phi_63_64_ladder_2;
            _3342 = frontier_phi_63_64_ladder_1;
        }
        float _3347 = isnan(1.0) ? _1084 : (isnan(_1084) ? 1.0 : min(_1084, 1.0));
        _3144 = (_3347 * _3338) + _2656;
        _3146 = (_3347 * _3340) + _2658;
        _3148 = (_3347 * _3342) + _2660;
        _3150 = ((_3332 * _1068) * _3347) + _2994;
        _3152 = ((_3334 * _1070) * _3347) + _2996;
        _3154 = ((_3336 * _1071) * _3347) + _2998;
    }
    else
    {
        _3144 = _2656;
        _3146 = _2658;
        _3148 = _2660;
        _3150 = _2994;
        _3152 = _2996;
        _3154 = _2998;
    }
    float _5188 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _5199 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _5210 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _3171 = ((isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0))) * (_3144 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1084))) + ((_3150 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1922)) * cbPerFrame._m0[3u].x);
    float _3172 = ((isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0))) * (_3146 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1084))) + ((_3152 + ((isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0))) * _1922)) * cbPerFrame._m0[3u].x);
    float _3173 = ((isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0))) * (_3148 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1084))) + ((_3154 + ((isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0))) * _1922)) * cbPerFrame._m0[3u].x);
    uint _3174 = _286 + 6u;
    float _3182 = _1006 / cbSceneParam._m0[86u].x;
    float _3183 = _1007 / cbSceneParam._m0[86u].y;
    vec4 _3197 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3182, _3183, (log2((isnan(cbSceneParam._m0[77u].w) ? _928 : (isnan(_928) ? cbSceneParam._m0[77u].w : min(_928, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3199 = _3197.x;
    float _3200 = _3197.y;
    float _3201 = _3197.z;
    float _3202 = _3197.w;
    float _3274;
    float _3276;
    float _3278;
    float _3280;
    if (_928 > cbSceneParam._m0[78u].w)
    {
        float _3236 = isnan(_928) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _928 : min(cbSceneParam._m0[80u].w, _928));
        float _3237 = _3236 / _928;
        float _3248 = _3237 * _979;
        float _3249 = _980 * _3237;
        float _3250 = (-0.0) - _3249;
        float _3252 = _3237 * _981;
        float _3254 = (cbSceneParam._m0[77u].w * _3250) / _3236;
        float _3255 = _3254 + cbSceneParam._m0[79u].w;
        float _3256 = cbSceneParam._m0[79u].w - _3249;
        float _3262 = sqrt(((_3248 * _3248) + (_3249 * _3249)) + (_3252 * _3252));
        float _3265 = (1.0 - (cbSceneParam._m0[77u].w / _3236)) * _3262;
        float _3270 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3272 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3449;
        if (abs((_3250 - _3254) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3449 = ((((_3255 > 0.0) ? exp2(_3270 * _3255) : (2.0 - exp2(_3272 * _3255))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3265;
        }
        else
        {
            float _3393 = 1.0 / cbSceneParam._m0[80u].x;
            float _3394 = isnan(_3256) ? _3255 : (isnan(_3255) ? _3256 : max(_3255, _3256));
            float _3395 = isnan(_3256) ? _3255 : (isnan(_3255) ? _3256 : min(_3255, _3256));
            float _3404 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : min(_3394, 0.0));
            float _3405 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : min(_3395, 0.0));
            _3449 = ((abs(_3262 / _3250) * cbSceneParam._m0[80u].y) * ((((_3404 - _3405) * 2.0) - ((exp2(_3270 * (isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0)))) - exp2(_3270 * (isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0))))) * _3393)) - ((exp2(_3272 * _3404) - exp2(_3272 * _3405)) * _3393))) + (_3265 * cbSceneParam._m0[80u].z);
        }
        vec4 _3451 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3182, _3183, 1.0), 0.0);
        float _3460 = exp2((_3449 * (-1.44269502162933349609375)) * (1.0 - _3451.w));
        float _3461 = log2(_3460);
        float _3477 = log2(_3202);
        _3274 = (exp2(_3477 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3461 * cbSceneParam._m0[78u].x)) * _3451.x) / cbSceneParam._m0[78u].x)) + _3199;
        _3276 = (exp2(_3477 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3461 * cbSceneParam._m0[78u].y)) * _3451.y) / cbSceneParam._m0[78u].y)) + _3200;
        _3278 = (exp2(_3477 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3461 * cbSceneParam._m0[78u].z)) * _3451.z) / cbSceneParam._m0[78u].z)) + _3201;
        _3280 = _3460 * _3202;
    }
    else
    {
        _3274 = _3199;
        _3276 = _3200;
        _3278 = _3201;
        _3280 = _3202;
    }
    bool _3487;
    vec4 _3290;
    vec4 _3312;
    float _3314;
    float _3318;
    float _3319;
    float _3320;
    float _3321;
    bool _3331;
    for (;;)
    {
        _3290 = cbMatDynParam._m0[0u];
        float _3292 = roundEven(_3290.y);
        bool _3293 = _3292 == 3.0;
        float _3294 = log2(_3280);
        float _3301 = exp2(_3294 * cbSceneParam._m0[78u].x) * _3171;
        float _3302 = exp2(_3294 * cbSceneParam._m0[78u].y) * _3172;
        float _3303 = exp2(_3294 * cbSceneParam._m0[78u].z) * _3173;
        float _3310 = _995 + (-0.5);
        _3312 = cbMtdParam._m0[1u];
        _3314 = _3312.y * _3310;
        float _3317 = (_3292 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3318 = _3317 * (_3293 ? _3301 : (_3301 + (cbSceneParam._m0[72u].w * _3274)));
        _3319 = _3317 * (_3293 ? _3302 : (_3302 + (cbSceneParam._m0[72u].w * _3276)));
        _3320 = _3317 * (_3293 ? _3303 : (_3303 + (cbSceneParam._m0[72u].w * _3278)));
        _3321 = _3310 * 0.999000012874603271484375;
        _3331 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3331)
        {
            if ((cbInstanceData._m0[_286 + 7u].x + _3321) < 0.5)
            {
                _3487 = true;
                break;
            }
        }
        uint _3428 = _1044 + uint(_3290.w);
        if ((cbInstanceData._m0[_3428].w < 1.0) && ((cbInstanceData._m0[_3428].w + _3321) < 0.5))
        {
            _3487 = true;
            break;
        }
        if ((_3314 + 1.0) < _3312.x)
        {
            _3487 = true;
            break;
        }
        _3487 = false;
        break;
    }
    float _3691;
    if (_3487)
    {
        discard_state = true;
        _3691 = 0.0;
    }
    else
    {
        _3691 = cbInstanceData._m0[_3174].w;
    }
    SV_Target.x = _3318;
    SV_Target.y = _3319;
    SV_Target.z = _3320;
    SV_Target.w = _3691;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3174].w;
    discard_exit();
}


