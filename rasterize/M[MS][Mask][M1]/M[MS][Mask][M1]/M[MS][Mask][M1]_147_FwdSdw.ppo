#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1651;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _254 = _253 * _245;
    float _255 = _253 * _246;
    float _256 = _253 * _247;
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = _260 * NORMAL.x;
    float _262 = _260 * NORMAL.y;
    float _263 = _260 * NORMAL.z;
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = _267 * TANGENT.x;
    float _269 = _267 * TANGENT.y;
    float _270 = _267 * TANGENT.z;
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _287 = cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x;
    float _289 = cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x;
    float _291 = sqrt((_287 + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + _289);
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _381.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[23u].w) + _434) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4256 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _459 = (_452 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _460 = (_452 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _461 = (_452 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _292) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _293) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _381.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[23u].w) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4267 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _292) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _293) + cbTextureTilingScale._m0[24u].w));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _572 = _570.x;
    float _582 = dot(vec4(_572, _570.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _594 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _381.z) * 2.0) - ((((_572 - _582) * cbMtdParam._m0[23u].w) + _582) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4278 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _608 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _312.x) * ((_595 * ((_553.x * cbMtdParam._m0[14u].x) - _532)) + _532);
    float _611 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _312.y) * ((_595 * ((_553.y * cbMtdParam._m0[14u].y) - _533)) + _533);
    float _614 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _312.z) * ((_595 * ((_553.z * cbMtdParam._m0[14u].z) - _534)) + _534);
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _292) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _293) + cbTextureTilingScale._m0[14u].w));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _671 = _669.x;
    float _672 = _669.y;
    float _673 = _669.z;
    float _680 = ((_652.x - _671) * _452) + _671;
    float _681 = ((_652.y - _672) * _452) + _672;
    float _682 = ((_652.z - _673) * _452) + _673;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _292) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _293) + cbTextureTilingScale._m0[2u].w));
    float _705 = ((_694.x - _680) * _525) + _680;
    float _706 = ((_694.y - _681) * _525) + _681;
    float _707 = ((_694.z - _682) * _525) + _682;
    vec4 _719 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _292) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _293) + cbTextureTilingScale._m0[23u].w));
    float _732 = ((_719.z - _707) * _595) + _707;
    float _735 = ((((_719.x - _705) * _595) + _705) * 2.0) + (-1.0);
    float _737 = ((((_719.y - _706) * _595) + _706) * 2.0) + (-1.0);
    float _738 = dot(vec2(_735, _737), vec2(_735, _737));
    float _4289 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _743 = sqrt(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))));
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _769 = (((_757.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _735;
    float _770 = (((_757.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _737;
    float _773 = fma(_743, _261, fma(_770, _268, _769 * _254));
    float _776 = fma(_743, _262, fma(_770, _269, _769 * _255));
    float _779 = fma(_743, _263, fma(_770, _270, _769 * _256));
    float _783 = inversesqrt(dot(vec3(_773, _776, _779), vec3(_773, _776, _779)));
    vec4 _810 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _812 = _810.x;
    float _813 = 1.0 - _812;
    float _821 = (cbMtdParam._m0[19u].x + dot(vec4(_783 * _773, _783 * _776, _783 * _779, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_812 - _813) * cbMtdParam._m0[24u].z) + _813) * cbMtdParam._m0[21u].z);
    float _4300 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _822 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _824 = (-0.0) - cbMtdParam._m0[24u].x;
    float _826 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _826 : (isnan(_826) ? 1.0 : min(_826, 1.0));
    float _834 = _822 - ((_822 * TEXCOORD_8.x) * _827);
    float _835 = _822 - ((_822 * TEXCOORD_8.y) * _827);
    float _836 = _822 - ((_822 * TEXCOORD_8.z) * _827);
    float _843 = (_834 * ((_632.x * cbMtdParam._m0[18u].x) - _608)) + _608;
    float _844 = (_835 * ((_632.y * cbMtdParam._m0[18u].y) - _611)) + _611;
    float _845 = (_836 * ((_632.z * cbMtdParam._m0[18u].z) - _614)) + _614;
    float _852 = sqrt((_287 + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + _289);
    float _853 = _852 * TEXCOORD.z;
    float _854 = _852 * TEXCOORD.w;
    vec4 _866 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _853) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _854) + cbTextureTilingScale._m0[19u].w));
    float _868 = _866.x;
    float _869 = 1.0 - _868;
    float _895 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_868 - _869) * cbMtdParam._m0[24u].w) + _869) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4321 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _896 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _904 = ((((cbMtdParam._m0[10u].x - _843) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _896) + _843;
    float _905 = ((((cbMtdParam._m0[10u].y - _844) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _896) + _844;
    float _906 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _845)) * _896) + _845;
    vec4 _932 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _934 = _932.x;
    float _951 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _292) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _293) + cbTextureTilingScale._m0[9u].w)).x - _934) * _452) + _934;
    float _968 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _292) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _293) + cbTextureTilingScale._m0[21u].w)).x - _951) * _525) + _951;
    float _985 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _292) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _293) + cbTextureTilingScale._m0[10u].w)).x - _968) * _595) + _968;
    float _989 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _985) * cbMtdParam._m0[19u].z) + _985;
    float _991 = _989 - (_989 * _834);
    float _993 = _991 - (_991 * _896);
    float _997 = (cbMtdParam._m0[19u].w * (_757.z - _732)) + _732;
    vec4 _1013 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _1020 = (_1013.x * 2.0) + (-1.0);
    float _1021 = (_1013.y * 2.0) + (-1.0);
    float _1022 = dot(vec2(_1020, _1021), vec2(_1020, _1021));
    float _4332 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1030 = ((_1013.z - _997) * _834) + _997;
    float _1033 = ((cbMtdParam._m0[23u].x - _1030) * _896) + _1030;
    vec4 _1056 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _853) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _854) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1062 = (_1056.x * 2.0) + (-1.0);
    float _1063 = (_1056.y * 2.0) + (-1.0);
    float _1064 = dot(vec2(_1062, _1063), vec2(_1062, _1063));
    float _4343 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1079 = ((sqrt(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) - _743) * _836) + _743;
    float _1082 = (((_1020 - _769) * _834) + _769) + (cbMtdParam._m0[21u].x * _769);
    float _1083 = (((_1021 - _770) * _835) + _770) + (cbMtdParam._m0[21u].x * _770);
    float _1094 = (((_1062 - _1082) + (_1082 * cbMtdParam._m0[22u].z)) * _896) + _1082;
    float _1095 = (((_1063 - _1083) + (_1083 * cbMtdParam._m0[22u].z)) * _896) + _1083;
    float _1096 = (_896 * (sqrt(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) - _1079)) + _1079;
    float _1098 = cbMtdParam._m0[22u].x + _757.w;
    float _1101 = fma(_1096, _261, fma(_1095, _268, _1094 * _254));
    float _1104 = fma(_1096, _262, fma(_1095, _269, _1094 * _255));
    float _1107 = fma(_1096, _263, fma(_1095, _270, _1094 * _256));
    float _1111 = inversesqrt(dot(vec3(_1101, _1104, _1107), vec3(_1101, _1104, _1107)));
    float _1112 = _1111 * _1101;
    float _1113 = _1111 * _1104;
    float _1114 = _1111 * _1107;
    float _4354 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1115 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _4365 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _4376 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4387 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4398 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4409 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1120 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _1134 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1184 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1174);
    float _1185 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1174);
    float _1186 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1174);
    float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
    float _1191 = _1184 * _1190;
    float _1192 = _1185 * _1190;
    float _1193 = _1186 * _1190;
    float _1199 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1200 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1218 = fma(_1114, cbSceneParam._m0[5u].z, fma(_1113, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1112));
    float _1221 = fma(_1114, cbSceneParam._m0[6u].z, fma(_1113, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1112));
    float _1224 = fma(_1114, cbSceneParam._m0[7u].z, fma(_1113, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1112));
    uint _1238 = (_273 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1244 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * cbInstanceData._m0[_1238].x;
    float _1245 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * cbInstanceData._m0[_1238].y;
    float _1246 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * cbInstanceData._m0[_1238].z;
    float _4420 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    float _1247 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _4431 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
    float _1248 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _4442 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
    float _1249 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _1250 = 1.0 - _1120;
    float _1251 = _1247 * _1250;
    float _1252 = _1248 * _1250;
    float _1253 = _1249 * _1250;
    float _1258 = (_1247 + (-0.039999999105930328369140625)) * _1120;
    float _1259 = (_1248 + (-0.039999999105930328369140625)) * _1120;
    float _1260 = (_1249 + (-0.039999999105930328369140625)) * _1120;
    float _1261 = _1258 + 0.039999999105930328369140625;
    float _1263 = _1259 + 0.039999999105930328369140625;
    float _1264 = _1260 + 0.039999999105930328369140625;
    vec4 _1273 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1199, cbSceneParam._m0[86u].y * _1200));
    float _1277 = ((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * TEXCOORD_5.w) * _1273.x;
    float _1278 = dot(vec3(_1112, _1113, _1114), vec3(_1191, _1192, _1193));
    float _1281 = _1278 * 2.0;
    float _1285 = (_1281 * _1112) - _1191;
    float _1286 = (_1281 * _1113) - _1192;
    float _1287 = (_1281 * _1114) - _1193;
    float _1291 = abs(dot(vec3(_1191, _1192, _1193), vec3(_1112, _1113, _1114)));
    float _4453 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
    float _1293 = sqrt(_1115);
    float _1306 = exp2((_1293 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1293 * 3.0));
    float _1312 = (1.0 - _1306) * ((_1293 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1313 = _1306 * _1293;
    float _1341 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1345 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1349 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1650;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1375 = fma(_1349, cbModelParam._m0[26u].z, fma(_1345, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1341));
        float _1379 = fma(_1349, cbModelParam._m0[27u].z, fma(_1345, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1341));
        float _1383 = fma(_1349, cbModelParam._m0[28u].z, fma(_1345, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1341));
        float _1408 = _1341 + _1112;
        float _1409 = _1345 + _1113;
        float _1410 = _1349 + _1114;
        float _1420 = fma(_1410, cbModelParam._m0[26u].z, fma(_1409, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1408)) - _1375;
        float _1421 = fma(_1410, cbModelParam._m0[27u].z, fma(_1409, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1408)) - _1379;
        float _1422 = fma(_1410, cbModelParam._m0[28u].z, fma(_1409, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1408)) - _1383;
        float _1426 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
        float _1439 = ((_1426 * _1420) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1375 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1426 * _1421) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1379 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1426 * _1422) / cbModelParam._m0[34u].z) + ((((((_1383 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        float _1478 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1444.x + (-0.5));
        float _1480 = _1478 * (_1444.y + (-0.5));
        float _1481 = _1478 * (_1444.z + (-0.5));
        float _1488 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1451.x + (-0.5));
        float _1490 = _1488 * (_1451.y + (-0.5));
        float _1491 = _1488 * (_1451.z + (-0.5));
        float _1498 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1458.x + (-0.5));
        float _1500 = _1498 * (_1458.y + (-0.5));
        float _1501 = _1498 * (_1458.z + (-0.5));
        float _1508 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1465.x + (-0.5));
        float _1510 = _1508 * (_1465.y + (-0.5));
        float _1511 = _1508 * (_1465.z + (-0.5));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = _1479 * 0.5;
        float _1516 = _1489 * 0.5;
        float _1517 = _1499 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1532 = (dot(vec3(_1112, _1113, _1114), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4479 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1542 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4490 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4501 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_1544 + 1.0))) + _1549) * _1512;
        float _1559 = _1480 * 0.5;
        float _1560 = _1490 * 0.5;
        float _1561 = _1500 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_1112, _1113, _1114), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4512 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4523 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4534 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_1586 + 1.0))) + _1591) * _1513;
        float _1601 = _1481 * 0.5;
        float _1602 = _1491 * 0.5;
        float _1603 = _1501 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_1112, _1113, _1114), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4545 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4556 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4567 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_1628 + 1.0))) + _1633) * _1514;
        _1650 = _1481;
        _1652 = _1480;
        _1653 = _1479;
        _1654 = _1491;
        _1655 = _1490;
        _1656 = _1489;
        _1657 = _1501;
        _1658 = _1500;
        _1659 = _1499;
        _1660 = _1514;
        _1661 = _1513;
        _1662 = _1512;
        _1663 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1664 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1665 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
    }
    else
    {
        _1650 = _1651;
        _1652 = _1651;
        _1653 = _1651;
        _1654 = _1651;
        _1655 = _1651;
        _1656 = _1651;
        _1657 = _1651;
        _1658 = _1651;
        _1659 = _1651;
        _1660 = _1651;
        _1661 = _1651;
        _1662 = _1651;
        _1663 = 0.0;
        _1664 = 0.0;
        _1665 = 0.0;
    }
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1688 = fma(_1349, cbModelParam._m0[30u].z, fma(_1345, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1341));
        float _1692 = fma(_1349, cbModelParam._m0[31u].z, fma(_1345, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1341));
        float _1696 = fma(_1349, cbModelParam._m0[32u].z, fma(_1345, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1341));
        float _1719 = _1341 + _1112;
        float _1720 = _1345 + _1113;
        float _1721 = _1349 + _1114;
        float _1731 = fma(_1721, cbModelParam._m0[30u].z, fma(_1720, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1719)) - _1688;
        float _1732 = fma(_1721, cbModelParam._m0[31u].z, fma(_1720, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1719)) - _1692;
        float _1733 = fma(_1721, cbModelParam._m0[32u].z, fma(_1720, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1719)) - _1696;
        float _1737 = inversesqrt(dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733)));
        float _1750 = ((_1737 * _1731) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1688 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1751 = ((_1737 * _1732) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1692 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1752 = ((_1737 * _1733) / cbModelParam._m0[35u].z) + ((((((_1696 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1754 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1750, _1751, _1752), 0.0);
        vec4 _1761 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1750, _1751, _1752), 0.0);
        vec4 _1768 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1750, _1751, _1752), 0.0);
        vec4 _1775 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1750, _1751, _1752), 0.0);
        float _1787 = exp2((_1754.w + (-0.5)) * 20.0) * 2.0;
        float _1788 = _1787 * (_1754.x + (-0.5));
        float _1789 = _1787 * (_1754.y + (-0.5));
        float _1790 = _1787 * (_1754.z + (-0.5));
        float _1797 = exp2((_1761.w + (-0.5)) * 20.0) * 2.0;
        float _1798 = _1797 * (_1761.x + (-0.5));
        float _1799 = _1797 * (_1761.y + (-0.5));
        float _1800 = _1797 * (_1761.z + (-0.5));
        float _1807 = exp2((_1768.w + (-0.5)) * 20.0) * 2.0;
        float _1808 = _1807 * (_1768.x + (-0.5));
        float _1809 = _1807 * (_1768.y + (-0.5));
        float _1810 = _1807 * (_1768.z + (-0.5));
        float _1817 = exp2((_1775.w + (-0.5)) * 20.0) * 2.0;
        float _1818 = _1817 * (_1775.x + (-0.5));
        float _1819 = _1817 * (_1775.y + (-0.5));
        float _1820 = _1817 * (_1775.z + (-0.5));
        float _1821 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1822 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1823 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1824 = _1788 * 0.5;
        float _1825 = _1798 * 0.5;
        float _1826 = _1808 * 0.5;
        float _1827 = dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826));
        float _1832 = (_1827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1827);
        float _1840 = (dot(vec3(_1112, _1113, _1114), vec3(_1832 * _1824, _1832 * _1825, _1832 * _1826)) + 1.0) * 0.5;
        float _4608 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1849 = sqrt(((_1825 * _1825) + (_1824 * _1824)) + (_1826 * _1826)) / (_1821 + 9.9999997473787516355514526367188e-06);
        float _4619 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _1851 = _1850 * 2.0;
        float _1855 = (1.0 - _1850) / (_1850 + 1.0);
        float _4630 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _1865 = ((((1.0 - _1856) * (_1851 + 2.0)) * exp2(log2(isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_1851 + 1.0))) + _1856) * _1821;
        float _1866 = _1789 * 0.5;
        float _1867 = _1799 * 0.5;
        float _1868 = _1809 * 0.5;
        float _1869 = dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868));
        float _1874 = (_1869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1869);
        float _1882 = (dot(vec3(_1112, _1113, _1114), vec3(_1874 * _1866, _1874 * _1867, _1874 * _1868)) + 1.0) * 0.5;
        float _4641 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1891 = sqrt(((_1867 * _1867) + (_1866 * _1866)) + (_1868 * _1868)) / (_1822 + 9.9999997473787516355514526367188e-06);
        float _4652 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _1893 = _1892 * 2.0;
        float _1897 = (1.0 - _1892) / (_1892 + 1.0);
        float _4663 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _1907 = ((((1.0 - _1898) * (_1893 + 2.0)) * exp2(log2(isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_1893 + 1.0))) + _1898) * _1822;
        float _1908 = _1790 * 0.5;
        float _1909 = _1800 * 0.5;
        float _1910 = _1810 * 0.5;
        float _1911 = dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910));
        float _1916 = (_1911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1911);
        float _1924 = (dot(vec3(_1112, _1113, _1114), vec3(_1916 * _1908, _1916 * _1909, _1916 * _1910)) + 1.0) * 0.5;
        float _4674 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1933 = sqrt(((_1909 * _1909) + (_1908 * _1908)) + (_1910 * _1910)) / (_1823 + 9.9999997473787516355514526367188e-06);
        float _4685 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _1935 = _1934 * 2.0;
        float _1939 = (1.0 - _1934) / (_1934 + 1.0);
        float _4696 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _1949 = ((((1.0 - _1940) * (_1935 + 2.0)) * exp2(log2(isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_1935 + 1.0))) + _1940) * _1823;
        _1957 = _1790;
        _1958 = _1789;
        _1959 = _1788;
        _1960 = _1800;
        _1961 = _1799;
        _1962 = _1798;
        _1963 = _1810;
        _1964 = _1809;
        _1965 = _1808;
        _1966 = _1823;
        _1967 = _1822;
        _1968 = _1821;
        _1969 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)));
        _1970 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)));
        _1971 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0)));
    }
    else
    {
        _1957 = _1651;
        _1958 = _1651;
        _1959 = _1651;
        _1960 = _1651;
        _1961 = _1651;
        _1962 = _1651;
        _1963 = _1651;
        _1964 = _1651;
        _1965 = _1651;
        _1966 = _1651;
        _1967 = _1651;
        _1968 = _1651;
        _1969 = 0.0;
        _1970 = 0.0;
        _1971 = 0.0;
    }
    float _1981 = (cbModelParam._m0[1u].x * (_1969 - _1663)) + _1663;
    float _1982 = (cbModelParam._m0[1u].x * (_1970 - _1664)) + _1664;
    float _1983 = (cbModelParam._m0[1u].x * (_1971 - _1665)) + _1665;
    float _2004 = fma(_1983, cbSceneParam._m0[89u].z, fma(_1982, cbSceneParam._m0[89u].y, _1981 * cbSceneParam._m0[89u].x));
    float _2007 = fma(_1983, cbSceneParam._m0[90u].z, fma(_1982, cbSceneParam._m0[90u].y, _1981 * cbSceneParam._m0[90u].x));
    float _2010 = fma(_1983, cbSceneParam._m0[91u].z, fma(_1982, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1981));
    float _2025 = _1285 * 0.5;
    float _2026 = _1286 * 0.5;
    float _2027 = _1287 * 0.5;
    float _2028 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1959, _1962, _1965, _1968));
    float _2031 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1958, _1961, _1964, _1967));
    float _2034 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1957, _1960, _1963, _1966));
    float _2068;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2041 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1650, _1654, _1657, _1660));
        float _2045 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1652, _1655, _1658, _1661));
        float _2049 = dot(vec4(_2025, _2026, _2027, 1.0), vec4(_1653, _1656, _1659, _1662));
        float _2056 = dot(vec4(cbModelParam._m0[39u]), vec4(_2025, _2026, _2027, 1.0));
        _2068 = dot(vec3(isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0)), isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0)), isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2056) ? 0.0 : (isnan(0.0) ? _2056 : max(0.0, _2056))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2068 = 1.0;
    }
    float _2079;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2070 = dot(vec4(cbModelParam._m0[40u]), vec4(_2025, _2026, _2027, 1.0));
        _2079 = dot(vec3(isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)), isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0)), isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2070) ? 0.0 : (isnan(0.0) ? _2070 : max(0.0, _2070))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2079 = 1.0;
    }
    float _2083 = (_2079 * cbModelParam._m0[1u].x) + (_2068 * (1.0 - cbModelParam._m0[1u].x));
    float _2093 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1115);
    float _2094 = isnan(_2093) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2093 : min(cbModelParam._m0[25u].z, _2093));
    float _2174;
    float _2176;
    float _2178;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2141 = fma(_1349, cbModelParam._m0[13u].z, fma(_1345, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1341)) + cbModelParam._m0[13u].w;
        float _2145 = fma(_1349, cbModelParam._m0[14u].z, fma(_1345, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1341)) + cbModelParam._m0[14u].w;
        float _2149 = fma(_1349, cbModelParam._m0[15u].z, fma(_1345, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1341)) + cbModelParam._m0[15u].w;
        float _2152 = fma(_1287, cbModelParam._m0[13u].z, fma(_1286, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1285));
        float _2155 = fma(_1287, cbModelParam._m0[14u].z, fma(_1286, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1285));
        float _2158 = fma(_1287, cbModelParam._m0[15u].z, fma(_1286, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1285));
        float _2186;
        if (_2152 > 0.0)
        {
            _2186 = abs((1.0 - _2141) / _2152);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2152 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2141 + 1.0) / _2152);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2186 = frontier_phi_14_12_ladder;
        }
        float _2357;
        if (_2155 > 0.0)
        {
            _2357 = abs((1.0 - _2145) / _2155);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2145 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2357 = frontier_phi_23_19_ladder;
        }
        float _2652;
        if (_2158 > 0.0)
        {
            _2652 = abs((1.0 - _2149) / _2158);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2158 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2149 + 1.0) / _2158);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2652 = frontier_phi_35_30_ladder;
        }
        float _2654 = isnan(_2357) ? _2186 : (isnan(_2186) ? _2357 : min(_2186, _2357));
        float _2655 = isnan(_2652) ? _2654 : (isnan(_2654) ? _2652 : min(_2654, _2652));
        float _2659 = (_2655 * _2152) + _2141;
        float _2660 = (_2655 * _2155) + _2145;
        float _2661 = (_2655 * _2158) + _2149;
        float _2662 = _2655 * 9.9999997473787516355514526367188e-05;
        float _2664 = (-1.0) - _2662;
        float _2666 = _2662 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2661 > _2666) || ((_2661 < _2664) || ((_2660 > _2666) || ((_2660 < _2664) || ((_2659 < _2664) || (_2659 > _2666))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2806 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2661, cbModelParam._m0[9u].z, fma(_2660, cbModelParam._m0[9u].y, _2659 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2661, cbModelParam._m0[10u].z, fma(_2660, cbModelParam._m0[10u].y, _2659 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2661, cbModelParam._m0[11u].z, fma(_2660, cbModelParam._m0[11u].y, _2659 * cbModelParam._m0[11u].x))), _2094);
            frontier_phi_13_35_ladder = _2806.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2806.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2806.x * cbModelParam._m0[1u].y;
        }
        _2174 = frontier_phi_13_35_ladder_2;
        _2176 = frontier_phi_13_35_ladder_1;
        _2178 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2162 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1285, _1286, _1287), _2094);
        _2174 = _2162.x * cbModelParam._m0[1u].y;
        _2176 = _2162.y * cbModelParam._m0[1u].y;
        _2178 = _2162.z * cbModelParam._m0[1u].y;
    }
    float _2182 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1115);
    float _2183 = isnan(_2182) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2182 : min(cbModelParam._m0[25u].w, _2182));
    float _2272;
    float _2274;
    float _2276;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2236 = fma(_1349, cbModelParam._m0[21u].z, fma(_1345, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1341)) + cbModelParam._m0[21u].w;
        float _2240 = fma(_1349, cbModelParam._m0[22u].z, fma(_1345, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1341)) + cbModelParam._m0[22u].w;
        float _2244 = fma(_1349, cbModelParam._m0[23u].z, fma(_1345, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1341)) + cbModelParam._m0[23u].w;
        float _2247 = fma(_1287, cbModelParam._m0[21u].z, fma(_1286, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1285));
        float _2250 = fma(_1287, cbModelParam._m0[22u].z, fma(_1286, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1285));
        float _2253 = fma(_1287, cbModelParam._m0[23u].z, fma(_1286, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1285));
        float _2362;
        if (_2247 > 0.0)
        {
            _2362 = abs((1.0 - _2236) / _2247);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2247 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2236 + 1.0) / _2247);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2362 = frontier_phi_25_21_ladder;
        }
        float _2679;
        if (_2250 > 0.0)
        {
            _2679 = abs((1.0 - _2240) / _2250);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2250 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2240 + 1.0) / _2250);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2679 = frontier_phi_37_32_ladder;
        }
        float _3017;
        if (_2253 > 0.0)
        {
            _3017 = abs((1.0 - _2244) / _2253);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2253 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2244 + 1.0) / _2253);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _3017 = frontier_phi_47_44_ladder;
        }
        float _3019 = isnan(_2679) ? _2362 : (isnan(_2362) ? _2679 : min(_2362, _2679));
        float _3020 = isnan(_3017) ? _3019 : (isnan(_3019) ? _3017 : min(_3019, _3017));
        float _3024 = (_3020 * _2247) + _2236;
        float _3025 = (_3020 * _2250) + _2240;
        float _3026 = (_3020 * _2253) + _2244;
        float _3027 = _3020 * 9.9999997473787516355514526367188e-05;
        float _3028 = (-1.0) - _3027;
        float _3030 = _3027 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_3026 > _3030) || ((_3026 < _3028) || ((_3025 > _3030) || ((_3025 < _3028) || ((_3024 < _3028) || (_3024 > _3030))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3148 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3026, cbModelParam._m0[17u].z, fma(_3025, cbModelParam._m0[17u].y, _3024 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3026, cbModelParam._m0[18u].z, fma(_3025, cbModelParam._m0[18u].y, _3024 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3026, cbModelParam._m0[19u].z, fma(_3025, cbModelParam._m0[19u].y, _3024 * cbModelParam._m0[19u].x))), _2183);
            frontier_phi_22_47_ladder = _3148.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3148.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3148.x * cbModelParam._m0[1u].z;
        }
        _2272 = frontier_phi_22_47_ladder_2;
        _2274 = frontier_phi_22_47_ladder_1;
        _2276 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2256 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1285, _1286, _1287), _2183);
        _2272 = _2256.x * cbModelParam._m0[1u].z;
        _2274 = _2256.y * cbModelParam._m0[1u].z;
        _2276 = _2256.z * cbModelParam._m0[1u].z;
    }
    float _2289 = (((_1312 * _1261) + _1313) * _1277) * ((cbModelParam._m0[1u].w * (_2272 - _2174)) + _2174);
    float _2291 = (((_1312 * _1263) + _1313) * _1277) * ((cbModelParam._m0[1u].w * (_2274 - _2176)) + _2176);
    float _2293 = (((_1312 * _1264) + _1313) * _1277) * ((cbModelParam._m0[1u].w * (_2276 - _2178)) + _2178);
    float _2296 = fma(_2293, cbSceneParam._m0[89u].z, fma(_2291, cbSceneParam._m0[89u].y, _2289 * cbSceneParam._m0[89u].x));
    float _2299 = fma(_2293, cbSceneParam._m0[90u].z, fma(_2291, cbSceneParam._m0[90u].y, _2289 * cbSceneParam._m0[90u].x));
    float _2302 = fma(_2293, cbSceneParam._m0[91u].z, fma(_2291, cbSceneParam._m0[91u].y, _2289 * cbSceneParam._m0[91u].x));
    float _2336 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2340 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2344 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2348 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2349 = _2336 / _2348;
    float _2350 = _2340 / _2348;
    float _2351 = _2344 / _2348;
    float _2498;
    float _2499;
    float _2500;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2378 = ((uint(_2351 > cbSceneParam._m0[59u].y) + uint(_2351 > cbSceneParam._m0[59u].x)) + uint(_2351 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2379 = _2378 + 43u;
        uint _2387 = _2378 + 44u;
        uint _2395 = _2378 + 45u;
        uint _2403 = _2378 + 46u;
        float _2414 = fma(_2348, cbSceneParam._m0[_2379].w, fma(_2344, cbSceneParam._m0[_2379].z, fma(_2340, cbSceneParam._m0[_2379].y, _2336 * cbSceneParam._m0[_2379].x)));
        float _2418 = fma(_2348, cbSceneParam._m0[_2387].w, fma(_2344, cbSceneParam._m0[_2387].z, fma(_2340, cbSceneParam._m0[_2387].y, _2336 * cbSceneParam._m0[_2387].x)));
        float _2426 = fma(_2348, cbSceneParam._m0[_2403].w, fma(_2344, cbSceneParam._m0[_2403].z, fma(_2340, cbSceneParam._m0[_2403].y, _2336 * cbSceneParam._m0[_2403].x)));
        float _2431 = cbSceneParam._m0[33u].z * _2426;
        float _2433 = cbSceneParam._m0[33u].w * _2426;
        float _2436 = fma(_2348, cbSceneParam._m0[_2395].w, fma(_2344, cbSceneParam._m0[_2395].z, fma(_2340, cbSceneParam._m0[_2395].y, _2336 * cbSceneParam._m0[_2395].x))) / _2426;
        float _2484 = (cbSceneParam._m0[33u].x - sqrt(((_2350 * _2350) + (_2349 * _2349)) + (_2351 * _2351))) * cbSceneParam._m0[33u].y;
        float _4822 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2491 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2431 + _2414) / _2426, (_2433 + _2418) / _2426), _2436), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2433 + _2414) / _2426, (_2418 - _2431) / _2426), _2436), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2414 - _2431) / _2426, (_2418 - _2433) / _2426), _2436), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2414 - _2433) / _2426, (_2431 + _2418) / _2426), _2436), 0.0)).x), vec4(0.25)));
        _2498 = 1.0 - (_2491 * cbSceneParam._m0[34u].x);
        _2499 = 1.0 - (_2491 * cbSceneParam._m0[34u].y);
        _2500 = 1.0 - (_2491 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2498 = 1.0;
        _2499 = 1.0;
        _2500 = 1.0;
    }
    float _2564;
    float _2566;
    float _2568;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2552 = fma(_2348, cbSceneParam._m0[63u].w, fma(_2344, cbSceneParam._m0[63u].z, fma(_2340, cbSceneParam._m0[63u].y, _2336 * cbSceneParam._m0[63u].x)));
        float _2553 = fma(_2348, cbSceneParam._m0[60u].w, fma(_2344, cbSceneParam._m0[60u].z, fma(_2340, cbSceneParam._m0[60u].y, _2336 * cbSceneParam._m0[60u].x))) / _2552;
        float _2554 = fma(_2348, cbSceneParam._m0[61u].w, fma(_2344, cbSceneParam._m0[61u].z, fma(_2340, cbSceneParam._m0[61u].y, _2336 * cbSceneParam._m0[61u].x))) / _2552;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2553 >= cbSceneParam._m0[64u].x) && (_2554 >= cbSceneParam._m0[64u].y)) && (_2553 <= cbSceneParam._m0[64u].z)) && (_2554 <= cbSceneParam._m0[64u].w))
        {
            float _2692 = fma(_2348, cbSceneParam._m0[62u].w, fma(_2344, cbSceneParam._m0[62u].z, fma(_2340, cbSceneParam._m0[62u].y, _2336 * cbSceneParam._m0[62u].x))) / _2552;
            float _2696 = isnan(cbSceneParam._m0[41u].w) ? _2692 : (isnan(_2692) ? cbSceneParam._m0[41u].w : max(_2692, cbSceneParam._m0[41u].w));
            float _2739 = (cbSceneParam._m0[33u].x - sqrt(((_2350 * _2350) + (_2349 * _2349)) + (_2351 * _2351))) * cbSceneParam._m0[33u].y;
            float _4838 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
            float _2746 = (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2553, cbSceneParam._m0[33u].w + _2554), _2696), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2553, _2554 - cbSceneParam._m0[33u].z), _2696), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2553 - cbSceneParam._m0[33u].z, _2554 - cbSceneParam._m0[33u].w), _2696), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2553 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2554), _2696), 0.0)).x), vec4(0.25)));
            float _2750 = 1.0 - (_2746 * cbSceneParam._m0[34u].x);
            float _2751 = 1.0 - (_2746 * cbSceneParam._m0[34u].y);
            float _2752 = 1.0 - (_2746 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2752) ? _2500 : (isnan(_2500) ? _2752 : min(_2500, _2752));
            frontier_phi_34_33_ladder_1 = isnan(_2751) ? _2499 : (isnan(_2499) ? _2751 : min(_2499, _2751));
            frontier_phi_34_33_ladder_2 = isnan(_2750) ? _2498 : (isnan(_2498) ? _2750 : min(_2498, _2750));
        }
        else
        {
            frontier_phi_34_33_ladder = _2500;
            frontier_phi_34_33_ladder_1 = _2499;
            frontier_phi_34_33_ladder_2 = _2498;
        }
        _2564 = frontier_phi_34_33_ladder_2;
        _2566 = frontier_phi_34_33_ladder_1;
        _2568 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2564 = _2498;
        _2566 = _2499;
        _2568 = _2500;
    }
    uvec4 _2573 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2575 = _2573.x * 14u;
    uint _2576 = _2575 + 13u;
    float _2583 = _1277 + (-1.0);
    float _2588 = (cbLight._m0[_2576].x * _2583) + 1.0;
    float _2589 = (cbLight._m0[_2576].y * _2583) + 1.0;
    float _2590 = (cbLight._m0[_2576].z * _2583) + 1.0;
    float _2591 = (cbLight._m0[_2576].w * _2583) + 1.0;
    uint _2592 = _2575 + 5u;
    float _2598 = isnan(1.0) ? _2589 : (isnan(_2589) ? 1.0 : min(_2589, 1.0));
    uint _2602 = _2575 + 4u;
    float _2611 = isnan(1.0) ? _2588 : (isnan(_2588) ? 1.0 : min(_2588, 1.0));
    uint _2615 = _2575 | 1u;
    float _2626 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_1112, _1113, _1114));
    float _2629 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_1112, _1113, _1114));
    float _4874 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _4885 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2634 = (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * 0.3183098733425140380859375;
    float _2636 = (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * 0.3183098733425140380859375;
    float _2643 = ((cbLight._m0[_2592].x * _2598) * _2636) + (((cbLight._m0[_2602].x * _2564) * _2611) * _2634);
    float _2644 = ((_2598 * cbLight._m0[_2592].y) * _2636) + (((cbLight._m0[_2602].y * _2566) * _2611) * _2634);
    float _2645 = ((_2598 * cbLight._m0[_2592].z) * _2636) + (((cbLight._m0[_2602].z * _2568) * _2611) * _2634);
    uvec4 _2649 = floatBitsToUint(cbLight._m0[_2575 + 12u]);
    bool _2651 = _2649.x == 0u;
    float _2753;
    float _2755;
    float _2757;
    if (_2651)
    {
        _2753 = _2643;
        _2755 = _2644;
        _2757 = _2645;
    }
    else
    {
        uint _2761 = _2575 + 6u;
        float _2777 = (dot(vec3(cbLight._m0[_2575 + 2u].xyz), vec3(_1112, _1113, _1114)) * 0.5) + 0.5;
        float _2778 = _2777 * _2777;
        float _4896 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2779 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
        float _2780 = isnan(1.0) ? _2590 : (isnan(_2590) ? 1.0 : min(_2590, 1.0));
        _2753 = (((cbLight._m0[_2761].x * 0.3183098733425140380859375) * _2779) * _2780) + _2643;
        _2755 = (((cbLight._m0[_2761].y * 0.3183098733425140380859375) * _2779) * _2780) + _2644;
        _2757 = (((cbLight._m0[_2761].z * 0.3183098733425140380859375) * _2779) * _2780) + _2645;
    }
    bool _2760 = _2649.y == 0u;
    float _2815;
    float _2817;
    float _2819;
    if (_2760)
    {
        _2815 = _2753;
        _2817 = _2755;
        _2819 = _2757;
    }
    else
    {
        uint _2988 = _2575 + 7u;
        float _3004 = (dot(vec3(cbLight._m0[_2575 + 3u].xyz), vec3(_1112, _1113, _1114)) * 0.5) + 0.5;
        float _3005 = _3004 * _3004;
        float _4912 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
        float _3006 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
        float _3007 = isnan(1.0) ? _2591 : (isnan(_2591) ? 1.0 : min(_2591, 1.0));
        _2815 = (((cbLight._m0[_2988].x * 0.3183098733425140380859375) * _3006) * _3007) + _2753;
        _2817 = (((cbLight._m0[_2988].y * 0.3183098733425140380859375) * _3006) * _3007) + _2755;
        _2819 = (((cbLight._m0[_2988].z * 0.3183098733425140380859375) * _3006) * _3007) + _2757;
    }
    uint _2822 = _2575 + 8u;
    float _2835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2575].w)) * _1115) * 0.949999988079071044921875);
    float _2836 = _2835 * _2835;
    float _2837 = cbLight._m0[_2575].x + _1191;
    float _2838 = cbLight._m0[_2575].y + _1192;
    float _2839 = cbLight._m0[_2575].z + _1193;
    float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
    float _2844 = _2843 * _2837;
    float _2845 = _2843 * _2838;
    float _2846 = _2843 * _2839;
    float _2847 = dot(vec3(_1112, _1113, _1114), vec3(cbLight._m0[_2575].xyz));
    float _4928 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
    float _2850 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
    float _4939 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
    float _2851 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
    float _2852 = dot(vec3(_1112, _1113, _1114), vec3(_2844, _2845, _2846));
    float _4950 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
    float _2855 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
    float _2856 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_2844, _2845, _2846));
    float _4961 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
    float _2860 = _2836 * _2836;
    float _2864 = ((_2855 * _2855) * (_2860 + (-1.0))) + 1.0;
    float _2872 = exp2(log2(1.0 - (isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0)))) * 5.0);
    float _2873 = 0.959999978542327880859375 - _1258;
    float _2875 = 0.959999978542327880859375 - _1259;
    float _2876 = 0.959999978542327880859375 - _1260;
    float _2883 = 1.0 - _2836;
    float _2894 = (0.5 / (((_2851 * ((_2850 * _2883) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2851 * _2883) + _2836) * _2850))) * _2850;
    float _4972 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
    float _2896 = (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_2860 / ((_2864 * _2864) * 3.141590118408203125));
    uint _2910 = _2575 + 9u;
    float _2921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2615].w)) * _1115) * 0.949999988079071044921875);
    float _2922 = _2921 * _2921;
    float _2923 = cbLight._m0[_2615].x + _1191;
    float _2924 = cbLight._m0[_2615].y + _1192;
    float _2925 = cbLight._m0[_2615].z + _1193;
    float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
    float _2930 = _2929 * _2923;
    float _2931 = _2929 * _2924;
    float _2932 = _2929 * _2925;
    float _2933 = dot(vec3(_1112, _1113, _1114), vec3(cbLight._m0[_2615].xyz));
    float _4983 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
    float _2936 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
    float _2937 = dot(vec3(_1112, _1113, _1114), vec3(_2930, _2931, _2932));
    float _4994 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
    float _2940 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
    float _2941 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_2930, _2931, _2932));
    float _5005 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
    float _2945 = _2922 * _2922;
    float _2949 = ((_2940 * _2940) * (_2945 + (-1.0))) + 1.0;
    float _2956 = exp2(log2(1.0 - (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0)))) * 5.0);
    float _2963 = 1.0 - _2922;
    float _2973 = (0.5 / (((_2851 * ((_2936 * _2963) + _2922)) + 9.9999999392252902907785028219223e-09) + (((_2851 * _2963) + _2922) * _2936))) * _2936;
    float _5016 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
    float _2975 = (isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0))) * (_2945 / ((_2949 * _2949) * 3.141590118408203125));
    float _2985 = (((((_2956 * _2873) + _1261) * cbLight._m0[_2910].x) * _2975) * _2598) + ((((cbLight._m0[_2822].x * _2564) * ((_2872 * _2873) + _1261)) * _2896) * _2611);
    float _2986 = (((((_2956 * _2875) + _1263) * cbLight._m0[_2910].y) * _2975) * _2598) + ((((cbLight._m0[_2822].y * _2566) * ((_2872 * _2875) + _1263)) * _2896) * _2611);
    float _2987 = (((((_2956 * _2876) + _1264) * cbLight._m0[_2910].z) * _2975) * _2598) + ((((cbLight._m0[_2822].z * _2568) * ((_2872 * _2876) + _1264)) * _2896) * _2611);
    float _3043;
    float _3045;
    float _3047;
    if (_2651)
    {
        _3043 = _2985;
        _3045 = _2986;
        _3047 = _2987;
    }
    else
    {
        uint _3049 = _2575 + 2u;
        uint _3053 = _2575 + 10u;
        float _3067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3049].w)) * _1115) * 0.949999988079071044921875);
        float _3068 = _3067 * _3067;
        float _3069 = cbLight._m0[_3049].x + _1191;
        float _3070 = cbLight._m0[_3049].y + _1192;
        float _3071 = cbLight._m0[_3049].z + _1193;
        float _3075 = inversesqrt(dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071)));
        float _3076 = _3075 * _3069;
        float _3077 = _3075 * _3070;
        float _3078 = _3075 * _3071;
        float _3079 = dot(vec3(_1112, _1113, _1114), vec3(cbLight._m0[_3049].xyz));
        float _5027 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
        float _3082 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
        float _3083 = dot(vec3(_1112, _1113, _1114), vec3(_3076, _3077, _3078));
        float _5038 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        float _3086 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
        float _3087 = dot(vec3(cbLight._m0[_3049].xyz), vec3(_3076, _3077, _3078));
        float _5049 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
        float _3091 = _3068 * _3068;
        float _3095 = ((_3086 * _3086) * (_3091 + (-1.0))) + 1.0;
        float _3102 = exp2(log2(1.0 - (isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0)))) * 5.0);
        float _3109 = 1.0 - _3068;
        float _3119 = (0.5 / (((_2851 * ((_3082 * _3109) + _3068)) + 9.9999999392252902907785028219223e-09) + (((_2851 * _3109) + _3068) * _3082))) * _3082;
        float _5060 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
        float _3121 = (isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0))) * (_3091 / ((_3095 * _3095) * 3.141590118408203125));
        float _3122 = isnan(1.0) ? _2590 : (isnan(_2590) ? 1.0 : min(_2590, 1.0));
        _3043 = (((((_3102 * _2873) + _1261) * cbLight._m0[_3053].x) * _3121) * _3122) + _2985;
        _3045 = (((((_3102 * _2875) + _1263) * cbLight._m0[_3053].y) * _3121) * _3122) + _2986;
        _3047 = (((((_3102 * _2876) + _1264) * cbLight._m0[_3053].z) * _3121) * _3122) + _2987;
    }
    float _3153;
    float _3155;
    float _3157;
    if (_2760)
    {
        _3153 = _3043;
        _3155 = _3045;
        _3157 = _3047;
    }
    else
    {
        uint _3164 = _2575 + 3u;
        uint _3168 = _2575 + 11u;
        float _3182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3164].w)) * _1115) * 0.949999988079071044921875);
        float _3183 = _3182 * _3182;
        float _3184 = cbLight._m0[_3164].x + _1191;
        float _3185 = cbLight._m0[_3164].y + _1192;
        float _3186 = cbLight._m0[_3164].z + _1193;
        float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
        float _3191 = _3190 * _3184;
        float _3192 = _3190 * _3185;
        float _3193 = _3190 * _3186;
        float _3194 = dot(vec3(_1112, _1113, _1114), vec3(cbLight._m0[_3164].xyz));
        float _5076 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
        float _3197 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
        float _3198 = dot(vec3(_1112, _1113, _1114), vec3(_3191, _3192, _3193));
        float _5087 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
        float _3201 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
        float _3202 = dot(vec3(cbLight._m0[_3164].xyz), vec3(_3191, _3192, _3193));
        float _5098 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
        float _3206 = _3183 * _3183;
        float _3210 = ((_3201 * _3201) * (_3206 + (-1.0))) + 1.0;
        float _3217 = exp2(log2(1.0 - (isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0)))) * 5.0);
        float _3224 = 1.0 - _3183;
        float _3234 = (0.5 / (((_2851 * ((_3197 * _3224) + _3183)) + 9.9999999392252902907785028219223e-09) + (((_2851 * _3224) + _3183) * _3197))) * _3197;
        float _5109 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
        float _3236 = (isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0))) * (_3206 / ((_3210 * _3210) * 3.141590118408203125));
        float _3237 = isnan(1.0) ? _2591 : (isnan(_2591) ? 1.0 : min(_2591, 1.0));
        _3153 = (((((_3217 * _2873) + _1261) * cbLight._m0[_3168].x) * _3236) * _3237) + _3043;
        _3155 = (((((_3217 * _2875) + _1263) * cbLight._m0[_3168].y) * _3236) * _3237) + _3045;
        _3157 = (((((_3217 * _2876) + _1264) * cbLight._m0[_3168].z) * _3236) * _3237) + _3047;
    }
    float _3303;
    float _3305;
    float _3307;
    float _3309;
    float _3311;
    float _3313;
    if (_2573.y == 0u)
    {
        uvec4 _3258 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3259 = _3258.x;
        uint _3270 = uint((float(_3258.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1200) / _3259))) + floor(float(uint(cbSceneParam._m0[85u].x * _1199) / _3259)));
        float _3280 = (log2(_2351 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3281 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
        uint _3284 = uint(isnan(14.0) ? _3281 : (isnan(_3281) ? 14.0 : min(_3281, 14.0)));
        uvec4 _3289 = texelFetch(g_lightClusterGridBuffer, int(((_3284 << 2u) + (_3270 << 6u)) >> 2u));
        uint _3290 = _3289.x;
        uint _3291 = _3258.z;
        float _3370;
        float _3372;
        float _3374;
        float _3376;
        float _3378;
        float _3380;
        if (((((1u << ((_3291 >> 4u) & 15u)) + 4294967295u) & _3290) == 0u) || ((_3291 & 240u) == 0u))
        {
            _3370 = 0.0;
            _3372 = 0.0;
            _3374 = 0.0;
            _3376 = 0.0;
            _3378 = 0.0;
            _3380 = 0.0;
        }
        else
        {
            float _3371;
            float _3373;
            float _3375;
            float _3377;
            float _3379;
            float _3381;
            float _3514 = 0.0;
            float _3515 = 0.0;
            float _3516 = 0.0;
            float _3517 = 0.0;
            float _3518 = 0.0;
            float _3519 = 0.0;
            uint _3520 = 0u;
            uint _3529;
            bool _3530;
            for (;;)
            {
                _3529 = texelFetch(g_lightClassification, int((((_3284 << 5u) + (_3270 << 9u)) + (_3520 << 2u)) >> 2u)).x;
                _3530 = _3529 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3530)
                {
                    frontier_phi_66_pred = _3519;
                    frontier_phi_66_pred_1 = _3518;
                    frontier_phi_66_pred_2 = _3517;
                    frontier_phi_66_pred_3 = _3516;
                    frontier_phi_66_pred_4 = _3515;
                    frontier_phi_66_pred_5 = _3514;
                }
                else
                {
                    float _3638;
                    float _3639;
                    float _3640;
                    float _3641;
                    float _3642;
                    float _3643;
                    uint _3644;
                    _3638 = _3514;
                    _3639 = _3515;
                    _3640 = _3516;
                    _3641 = _3517;
                    _3642 = _3518;
                    _3643 = _3519;
                    _3644 = _3529;
                    float _3570;
                    float _3571;
                    float _3572;
                    float _3573;
                    float _3574;
                    float _3575;
                    for (;;)
                    {
                        uint _3648 = uint(findLSB(_3644)) + (_3520 << 5u);
                        uint _3645 = (_3644 + 4294967295u) & _3644;
                        uint _3650 = _3648 * 48u;
                        vec4 _3664 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3650)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 3u)).x));
                        uint _3670 = (_3648 * 48u) + 4u;
                        vec4 _3683 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3670)).x, texelFetch(g_PointLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3670 + 3u)).x));
                        uint _3689 = (_3648 * 48u) + 8u;
                        vec3 _3700 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3689)).x, texelFetch(g_PointLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3689 + 2u)).x));
                        float _3704 = _3664.x - _2349;
                        float _3705 = _3664.y - _2350;
                        float _3706 = _3664.z - _2351;
                        float _3707 = dot(vec3(_3704, _3705, _3706), vec3(_3704, _3705, _3706));
                        float _3710 = inversesqrt(_3707);
                        float _3711 = _3710 * _3704;
                        float _3712 = _3710 * _3705;
                        float _3713 = _3710 * _3706;
                        float _3714 = dot(vec3(_1218, _1221, _1224), vec3(_3711, _3712, _3713));
                        float _3719 = 1.0 - (_3707 * _3664.w);
                        float _5135 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                        float _3720 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
                        float _3721 = sqrt(_3707) * _3683.w;
                        float _3724 = 1.39999997615814208984375 / (_3721 + 1.39999997615814208984375);
                        float _3725 = _3724 * _3724;
                        float _3728 = ((1.0 - _3725) * _3714) + _3725;
                        float _3731 = _3721 * _3721;
                        float _3735 = ((isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0))) * _3720) / ((_3731 * 0.699999988079071044921875) + 1.0);
                        float _3739 = (-0.0) - _2349;
                        float _3740 = (-0.0) - _2350;
                        float _3741 = (-0.0) - _2351;
                        float _3745 = inversesqrt(dot(vec3(_3739, _3740, _3741), vec3(_3739, _3740, _3741)));
                        float _3746 = _3745 * _3739;
                        float _3747 = _3745 * _3740;
                        float _3748 = _3745 * _3741;
                        float _3755 = exp2(log2(1.0 / ((_3731 * 3.5) + 5.0)) * 0.25);
                        float _3756 = 1.0 - _1293;
                        float _3763 = sqrt(1.0 - ((1.0 - (_3756 * _3756)) * (1.0 - (_3755 * _3755))));
                        float _3764 = _3763 * _3763;
                        float _3765 = _3764 * _3764;
                        float _3766 = _3746 + _3711;
                        float _3767 = _3747 + _3712;
                        float _3768 = _3748 + _3713;
                        float _3772 = inversesqrt(dot(vec3(_3766, _3767, _3768), vec3(_3766, _3767, _3768)));
                        float _3776 = dot(vec3(_1218, _1221, _1224), vec3(_3746, _3747, _3748));
                        float _5151 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                        float _3779 = isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0));
                        float _3780 = dot(vec3(_1218, _1221, _1224), vec3(_3772 * _3766, _3772 * _3767, _3772 * _3768));
                        float _5162 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                        float _3783 = isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0));
                        float _3787 = ((_3783 * _3783) * (_3765 + (-1.0))) + 1.0;
                        float _3788 = _3724 * _3764;
                        float _3789 = _3788 * _3788;
                        float _3792 = ((1.0 - _3789) * _3714) + _3789;
                        float _5173 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                        float _3793 = isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0));
                        float _3794 = 1.0 - _3764;
                        float _3804 = (0.5 / (((_3793 * ((_3779 * _3794) + _3764)) + 9.9999999392252902907785028219223e-09) + (((_3793 * _3794) + _3764) * _3779))) * _3793;
                        float _5184 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                        float _3815 = (((_3765 * 3.1415927410125732421875) * (isnan(1.0) ? _5184 : (isnan(_5184) ? 1.0 : min(_5184, 1.0)))) / ((_3787 * _3787) * ((_3731 * 2.1991131305694580078125) + 3.141590118408203125))) * _3720;
                        _3573 = (_3735 * _3683.x) + _3641;
                        _3574 = (_3735 * _3683.y) + _3642;
                        _3575 = (_3735 * _3683.z) + _3643;
                        _3570 = (_3815 * _3700.x) + _3638;
                        _3571 = (_3815 * _3700.y) + _3639;
                        _3572 = (_3815 * _3700.z) + _3640;
                        if (_3645 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3638 = _3570;
                            _3639 = _3571;
                            _3640 = _3572;
                            _3641 = _3573;
                            _3642 = _3574;
                            _3643 = _3575;
                            _3644 = _3645;
                        }
                    }
                    frontier_phi_66_pred = _3575;
                    frontier_phi_66_pred_1 = _3574;
                    frontier_phi_66_pred_2 = _3573;
                    frontier_phi_66_pred_3 = _3572;
                    frontier_phi_66_pred_4 = _3571;
                    frontier_phi_66_pred_5 = _3570;
                }
                _3381 = frontier_phi_66_pred;
                _3379 = frontier_phi_66_pred_1;
                _3377 = frontier_phi_66_pred_2;
                _3375 = frontier_phi_66_pred_3;
                _3373 = frontier_phi_66_pred_4;
                _3371 = frontier_phi_66_pred_5;
                uint _3521 = _3520 + 1u;
                if (_3521 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3514 = _3371;
                    _3515 = _3373;
                    _3516 = _3375;
                    _3517 = _3377;
                    _3518 = _3379;
                    _3519 = _3381;
                    _3520 = _3521;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3370 = _3371;
            _3372 = _3373;
            _3374 = _3375;
            _3376 = _3377;
            _3378 = _3379;
            _3380 = _3381;
        }
        uvec4 _3384 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3385 = _3384.z;
        uint _3387 = (_3385 >> 8u) & 15u;
        float _3482;
        float _3484;
        float _3486;
        float _3488;
        float _3490;
        float _3492;
        if (((4294967295u << _3387) & _3290) == 0u)
        {
            _3482 = _3370;
            _3484 = _3372;
            _3486 = _3374;
            _3488 = _3376;
            _3490 = _3378;
            _3492 = _3380;
        }
        else
        {
            float _3507 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
            float _3508 = _3507 * _2349;
            float _3509 = _3507 * _2350;
            float _3510 = _3507 * _2351;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3387 < ((_3385 >> 12u) & 15u))
            {
                float _3483;
                float _3485;
                float _3487;
                float _3489;
                float _3491;
                float _3493;
                float _3621 = _3370;
                float _3622 = _3372;
                float _3623 = _3374;
                float _3624 = _3376;
                float _3625 = _3378;
                float _3626 = _3380;
                uint _3627 = _3387;
                uint _3636;
                bool _3637;
                for (;;)
                {
                    _3636 = texelFetch(g_lightClassification, int((((_3284 << 5u) + (_3270 << 9u)) + (_3627 << 2u)) >> 2u)).x;
                    _3637 = _3636 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3637)
                    {
                        frontier_phi_72_pred = _3626;
                        frontier_phi_72_pred_1 = _3625;
                        frontier_phi_72_pred_2 = _3624;
                        frontier_phi_72_pred_3 = _3623;
                        frontier_phi_72_pred_4 = _3622;
                        frontier_phi_72_pred_5 = _3621;
                    }
                    else
                    {
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _4113;
                        float _4114;
                        float _4115;
                        float _4116;
                        float _4117;
                        float _4118;
                        float _3833 = _3621;
                        float _3834 = _3622;
                        float _3835 = _3623;
                        float _3836 = _3624;
                        float _3837 = _3625;
                        float _3838 = _3626;
                        uint _3839 = _3636;
                        uint _3840;
                        vec4 _3865;
                        float _3866;
                        vec4 _3881;
                        vec3 _3893;
                        vec4 _3908;
                        vec4 _3923;
                        float _3969;
                        bool _3970;
                        for (;;)
                        {
                            uint _3850 = ((_3627 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3839));
                            _3840 = (_3839 + 4294967295u) & _3839;
                            uint _3852 = _3850 * 40u;
                            _3865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 3u)).x));
                            _3866 = _3865.w;
                            uint _3868 = (_3850 * 40u) + 4u;
                            _3881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 3u)).x));
                            uint _3883 = (_3850 * 40u) + 8u;
                            _3893 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 2u)).x));
                            uint _3895 = (_3850 * 40u) + 16u;
                            _3908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 3u)).x));
                            uint _3910 = (_3850 * 40u) + 20u;
                            _3923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3910 + 3u)).x));
                            uint _3925 = (_3850 * 40u) + 24u;
                            vec4 _3938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3925 + 3u)).x));
                            uint _3944 = (_3850 * 40u) + 28u;
                            vec4 _3957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3944 + 3u)).x));
                            _3969 = fma(_2351, _3957.z, fma(_2350, _3957.y, _3957.x * _2349)) + _3957.w;
                            _3970 = !((fma(_2351, _3938.z, fma(_2350, _3938.y, _3938.x * _2349)) + _3938.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3970)
                            {
                                float _3997 = _3865.x - _2349;
                                float _3998 = _3865.y - _2350;
                                float _3999 = _3865.z - _2351;
                                float _4000 = dot(vec3(_3997, _3998, _3999), vec3(_3997, _3998, _3999));
                                float _4003 = inversesqrt(_4000);
                                float _4004 = _4003 * _3997;
                                float _4005 = _4003 * _3998;
                                float _4006 = _4003 * _3999;
                                float _4010 = 1.0 - (_4000 / (_3866 * _3866));
                                float _5195 = isnan(0.0) ? _4010 : (isnan(_4010) ? 0.0 : max(_4010, 0.0));
                                float _4011 = isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0));
                                float _4015 = sqrt(_4000) * _3881.w;
                                float _4017 = 1.39999997615814208984375 / (_4015 + 1.39999997615814208984375);
                                float _4018 = _4017 * _4017;
                                float _4021 = ((1.0 - _4018) * dot(vec3(_4004, _4005, _4006), vec3(_1218, _1221, _1224))) + _4018;
                                float _4024 = _4015 * _4015;
                                float _4028 = (fma(_2351, _3908.z, fma(_2350, _3908.y, _3908.x * _2349)) + _3908.w) / _3969;
                                float _4029 = (fma(_2351, _3923.z, fma(_2350, _3923.y, _3923.x * _2349)) + _3923.w) / _3969;
                                float _4033 = 1.0 - dot(vec2(_4028, _4029), vec2(_4028, _4029));
                                float _5211 = isnan(0.0) ? _4033 : (isnan(_4033) ? 0.0 : max(_4033, 0.0));
                                float _4034 = isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0));
                                float _4035 = _4034 * (((isnan(0.0) ? _4021 : (isnan(_4021) ? 0.0 : max(_4021, 0.0))) * _4011) / ((_4024 * 0.699999988079071044921875) + 1.0));
                                float _4047 = exp2(log2(1.0 / ((_4024 * 3.5) + 5.0)) * 0.25);
                                float _4048 = 1.0 - _1293;
                                float _4055 = sqrt(1.0 - ((1.0 - (_4048 * _4048)) * (1.0 - (_4047 * _4047))));
                                float _4056 = _4055 * _4055;
                                float _4057 = _4056 * _4056;
                                float _4058 = _4004 - _3508;
                                float _4059 = _4005 - _3509;
                                float _4060 = _4006 - _3510;
                                float _4064 = inversesqrt(dot(vec3(_4058, _4059, _4060), vec3(_4058, _4059, _4060)));
                                float _4068 = dot(vec3(_1218, _1221, _1224), vec3((-0.0) - _3508, (-0.0) - _3509, (-0.0) - _3510));
                                float _5222 = isnan(0.0) ? _4068 : (isnan(_4068) ? 0.0 : max(_4068, 0.0));
                                float _4071 = isnan(1.0) ? _5222 : (isnan(_5222) ? 1.0 : min(_5222, 1.0));
                                float _4072 = dot(vec3(_1218, _1221, _1224), vec3(_4064 * _4058, _4064 * _4059, _4064 * _4060));
                                float _5233 = isnan(0.0) ? _4072 : (isnan(_4072) ? 0.0 : max(_4072, 0.0));
                                float _4075 = isnan(1.0) ? _5233 : (isnan(_5233) ? 1.0 : min(_5233, 1.0));
                                float _4079 = ((_4075 * _4075) * (_4057 + (-1.0))) + 1.0;
                                float _4080 = _4017 * _4056;
                                float _4081 = _4080 * _4080;
                                float _4087 = ((1.0 - _4081) * dot(vec3(_1218, _1221, _1224), vec3(_4004, _4005, _4006))) + _4081;
                                float _5244 = isnan(0.0) ? _4087 : (isnan(_4087) ? 0.0 : max(_4087, 0.0));
                                float _4088 = isnan(1.0) ? _5244 : (isnan(_5244) ? 1.0 : min(_5244, 1.0));
                                float _4089 = 1.0 - _4056;
                                float _4099 = (0.5 / (((_4088 * ((_4071 * _4089) + _4056)) + 9.9999999392252902907785028219223e-09) + (((_4088 * _4089) + _4056) * _4071))) * _4088;
                                float _5255 = isnan(0.0) ? _4099 : (isnan(_4099) ? 0.0 : max(_4099, 0.0));
                                float _4109 = (_4034 * _4011) * (((_4057 * 3.1415927410125732421875) * (isnan(1.0) ? _5255 : (isnan(_5255) ? 1.0 : min(_5255, 1.0)))) / ((_4079 * _4079) * ((_4024 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _4035 * _3881.y;
                                frontier_phi_78_pred_1 = _4035 * _3881.x;
                                frontier_phi_78_pred_2 = _4109 * _3893.z;
                                frontier_phi_78_pred_3 = _4109 * _3893.y;
                                frontier_phi_78_pred_4 = _4109 * _3893.x;
                                frontier_phi_78_pred_5 = _4035 * _3881.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4117 = frontier_phi_78_pred;
                            _4116 = frontier_phi_78_pred_1;
                            _4115 = frontier_phi_78_pred_2;
                            _4114 = frontier_phi_78_pred_3;
                            _4113 = frontier_phi_78_pred_4;
                            _4118 = frontier_phi_78_pred_5;
                            _3823 = _4116 + _3836;
                            _3824 = _4117 + _3837;
                            _3825 = _4118 + _3838;
                            _3820 = _4113 + _3833;
                            _3821 = _4114 + _3834;
                            _3822 = _4115 + _3835;
                            if (_3840 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3833 = _3820;
                                _3834 = _3821;
                                _3835 = _3822;
                                _3836 = _3823;
                                _3837 = _3824;
                                _3838 = _3825;
                                _3839 = _3840;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3825;
                        frontier_phi_72_pred_1 = _3824;
                        frontier_phi_72_pred_2 = _3823;
                        frontier_phi_72_pred_3 = _3822;
                        frontier_phi_72_pred_4 = _3821;
                        frontier_phi_72_pred_5 = _3820;
                    }
                    _3493 = frontier_phi_72_pred;
                    _3491 = frontier_phi_72_pred_1;
                    _3489 = frontier_phi_72_pred_2;
                    _3487 = frontier_phi_72_pred_3;
                    _3485 = frontier_phi_72_pred_4;
                    _3483 = frontier_phi_72_pred_5;
                    uint _3628 = _3627 + 1u;
                    if (_3628 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3621 = _3483;
                        _3622 = _3485;
                        _3623 = _3487;
                        _3624 = _3489;
                        _3625 = _3491;
                        _3626 = _3493;
                        _3627 = _3628;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3493;
                frontier_phi_60_61_ladder_1 = _3491;
                frontier_phi_60_61_ladder_2 = _3487;
                frontier_phi_60_61_ladder_3 = _3485;
                frontier_phi_60_61_ladder_4 = _3483;
                frontier_phi_60_61_ladder_5 = _3489;
            }
            else
            {
                frontier_phi_60_61_ladder = _3380;
                frontier_phi_60_61_ladder_1 = _3378;
                frontier_phi_60_61_ladder_2 = _3374;
                frontier_phi_60_61_ladder_3 = _3372;
                frontier_phi_60_61_ladder_4 = _3370;
                frontier_phi_60_61_ladder_5 = _3376;
            }
            _3482 = frontier_phi_60_61_ladder_4;
            _3484 = frontier_phi_60_61_ladder_3;
            _3486 = frontier_phi_60_61_ladder_2;
            _3488 = frontier_phi_60_61_ladder_5;
            _3490 = frontier_phi_60_61_ladder_1;
            _3492 = frontier_phi_60_61_ladder;
        }
        float _3497 = isnan(1.0) ? _1277 : (isnan(_1277) ? 1.0 : min(_1277, 1.0));
        _3303 = (_3497 * _3488) + _2815;
        _3305 = (_3497 * _3490) + _2817;
        _3307 = (_3497 * _3492) + _2819;
        _3309 = ((_3482 * _1261) * _3497) + _3153;
        _3311 = ((_3484 * _1263) * _3497) + _3155;
        _3313 = ((_3486 * _1264) * _3497) + _3157;
    }
    else
    {
        _3303 = _2815;
        _3305 = _2817;
        _3307 = _2819;
        _3309 = _3153;
        _3311 = _3155;
        _3313 = _3157;
    }
    float _5271 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
    float _5282 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
    float _5293 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
    uint _3333 = _273 + 6u;
    float _3341 = _1199 / cbSceneParam._m0[86u].x;
    float _3342 = _1200 / cbSceneParam._m0[86u].y;
    vec4 _3356 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3341, _3342, (log2((isnan(cbSceneParam._m0[77u].w) ? _1134 : (isnan(_1134) ? cbSceneParam._m0[77u].w : min(_1134, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3358 = _3356.x;
    float _3359 = _3356.y;
    float _3360 = _3356.z;
    float _3361 = _3356.w;
    float _3432;
    float _3434;
    float _3436;
    float _3438;
    if (_1134 > cbSceneParam._m0[78u].w)
    {
        float _3395 = isnan(_1134) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1134 : min(cbSceneParam._m0[80u].w, _1134));
        float _3396 = _3395 / _1134;
        float _3407 = _3396 * _1184;
        float _3408 = _1185 * _3396;
        float _3409 = (-0.0) - _3408;
        float _3410 = _3396 * _1186;
        float _3412 = (cbSceneParam._m0[77u].w * _3409) / _3395;
        float _3413 = _3412 + cbSceneParam._m0[79u].w;
        float _3414 = cbSceneParam._m0[79u].w - _3408;
        float _3420 = sqrt(((_3407 * _3407) + (_3408 * _3408)) + (_3410 * _3410));
        float _3423 = (1.0 - (cbSceneParam._m0[77u].w / _3395)) * _3420;
        float _3428 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3430 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3583;
        if (abs((_3409 - _3412) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3583 = ((((_3413 > 0.0) ? exp2(_3428 * _3413) : (2.0 - exp2(_3430 * _3413))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3423;
        }
        else
        {
            float _3543 = 1.0 / cbSceneParam._m0[80u].x;
            float _3544 = isnan(_3414) ? _3413 : (isnan(_3413) ? _3414 : max(_3413, _3414));
            float _3545 = isnan(_3414) ? _3413 : (isnan(_3413) ? _3414 : min(_3413, _3414));
            float _3554 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : min(_3544, 0.0));
            float _3555 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : min(_3545, 0.0));
            _3583 = ((abs(_3420 / _3409) * cbSceneParam._m0[80u].y) * ((((_3554 - _3555) * 2.0) - ((exp2(_3428 * (isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0)))) - exp2(_3428 * (isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0))))) * _3543)) - ((exp2(_3430 * _3554) - exp2(_3430 * _3555)) * _3543))) + (_3423 * cbSceneParam._m0[80u].z);
        }
        vec4 _3585 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3341, _3342, 1.0), 0.0);
        float _3594 = exp2((_3583 * (-1.44269502162933349609375)) * (1.0 - _3585.w));
        float _3595 = log2(_3594);
        float _3611 = log2(_3361);
        _3432 = (exp2(_3611 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3595 * cbSceneParam._m0[78u].x)) * _3585.x) / cbSceneParam._m0[78u].x)) + _3358;
        _3434 = (exp2(_3611 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3595 * cbSceneParam._m0[78u].y)) * _3585.y) / cbSceneParam._m0[78u].y)) + _3359;
        _3436 = (exp2(_3611 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3595 * cbSceneParam._m0[78u].z)) * _3585.z) / cbSceneParam._m0[78u].z)) + _3360;
        _3438 = _3594 * _3361;
    }
    else
    {
        _3432 = _3358;
        _3434 = _3359;
        _3436 = _3360;
        _3438 = _3361;
    }
    float _3450 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3451 = _3450 == 3.0;
    float _3452 = log2(_3438);
    float _3459 = exp2(_3452 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5271 : (isnan(_5271) ? 1.0 : min(_5271, 1.0))) * (_3303 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1277))) + ((_3309 + ((isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0))) * _2083)) * cbPerFrame._m0[3u].x));
    float _3460 = exp2(_3452 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5282 : (isnan(_5282) ? 1.0 : min(_5282, 1.0))) * (_3305 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1277))) + ((_3311 + ((isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0))) * _2083)) * cbPerFrame._m0[3u].x));
    float _3461 = exp2(_3452 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5293 : (isnan(_5293) ? 1.0 : min(_5293, 1.0))) * (_3307 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1277))) + ((_3313 + ((isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0))) * _2083)) * cbPerFrame._m0[3u].x));
    float _3470 = (_3450 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3470 * (_3451 ? _3459 : (_3459 + (cbSceneParam._m0[72u].w * _3432)));
    SV_Target.y = _3470 * (_3451 ? _3460 : (_3460 + (cbSceneParam._m0[72u].w * _3434)));
    SV_Target.z = _3470 * (_3451 ? _3461 : (_3461 + (cbSceneParam._m0[72u].w * _3436)));
    SV_Target.w = cbInstanceData._m0[_3333].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3333].w;
}


