#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1461;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3785 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3796 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3807 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _453 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _470 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _407.x) * 2.0) - ((((_441 - _453) * cbMtdParam._m0[23u].w) + _453) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3818 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _478 = (_471 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367;
    float _479 = (_471 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _480 = (_471 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _497 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _519 = _517.x;
    float _529 = dot(vec4(_519, _517.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _543 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _407.y) * 2.0) - ((((_519 - _529) * cbMtdParam._m0[23u].w) + _529) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3829 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _554 = (_336.x * cbMtdParam._m0[9u].x) * ((_544 * ((_497.x * cbMtdParam._m0[13u].x) - _478)) + _478);
    float _555 = (_336.y * cbMtdParam._m0[9u].y) * ((_544 * ((_497.y * cbMtdParam._m0[13u].y) - _479)) + _479);
    float _556 = (_336.z * cbMtdParam._m0[9u].z) * ((_544 * ((_497.z * cbMtdParam._m0[13u].z) - _480)) + _480);
    float _560 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _554;
    float _563 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _555;
    float _566 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _556;
    float _574 = (((_554 - _560) * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) + _560) * 4.55000019073486328125;
    float _576 = (((_555 - _563) * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) + _563) * 4.55000019073486328125;
    float _578 = (((_556 - _566) * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) + _566) * 4.55000019073486328125;
    vec4 _597 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _658 = _656.x;
    float _659 = _656.y;
    float _660 = _656.z;
    float _667 = ((_639.x - _658) * _471) + _658;
    float _668 = ((_639.y - _659) * _471) + _659;
    float _669 = ((_639.z - _660) * _471) + _660;
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _694 = ((_681.z - _669) * _544) + _669;
    float _697 = ((((_681.x - _667) * _544) + _667) * 2.0) + (-1.0);
    float _698 = ((((_681.y - _668) * _544) + _668) * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _3840 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _704 = sqrt(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _743 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _745 = _743.x;
    float _746 = 1.0 - _745;
    float _762 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_745 - _746) * cbMtdParam._m0[24u].z) + _746) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3851 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _763 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _770 = (_763 * ((_597.x * cbMtdParam._m0[18u].x) - _574)) + _574;
    float _771 = (_763 * ((_597.y * cbMtdParam._m0[18u].y) - _576)) + _576;
    float _772 = (_763 * ((_597.z * cbMtdParam._m0[18u].z) - _578)) + _578;
    vec4 _798 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _800 = _798.x;
    float _817 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _800) * _471) + _800;
    float _834 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _817) * _544) + _817;
    float _838 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _834) * cbMtdParam._m0[19u].z) + _834;
    float _840 = _838 - (_838 * _763);
    float _845 = (((_616.z - _694) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _694;
    float _849 = ((_718.z - _845) * cbMtdParam._m0[19u].w) + _845;
    vec4 _862 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _869 = (_862.x * 2.0) + (-1.0);
    float _870 = (_862.y * 2.0) + (-1.0);
    float _871 = dot(vec2(_869, _870), vec2(_869, _870));
    float _3862 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _879 = (_763 * (_862.z - _849)) + _849;
    float _888 = (_697 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_616.x * 2.0) + (-1.0)))) + (((_718.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _889 = (_698 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_616.y * 2.0) + (-1.0)))) + (((_718.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _901 = (((_869 - _888) + (cbMtdParam._m0[21u].x * _888)) * _763) + _888;
    float _902 = (((_870 - _889) + (cbMtdParam._m0[21u].x * _889)) * _763) + _889;
    float _903 = (_763 * (sqrt(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) - _704)) + _704;
    float _907 = cbMtdParam._m0[22u].x + _718.w;
    float _910 = fma(_903, _246 * NORMAL.x, fma(_902, _253 * TANGENT.x, (_239 * _231) * _901));
    float _913 = fma(_903, _246 * NORMAL.y, fma(_902, _253 * TANGENT.y, (_239 * _232) * _901));
    float _916 = fma(_903, _246 * NORMAL.z, fma(_902, _253 * TANGENT.z, (_239 * _233) * _901));
    float _920 = inversesqrt(dot(vec3(_910, _913, _916), vec3(_910, _913, _916)));
    float _921 = _920 * _910;
    float _922 = _920 * _913;
    float _923 = _920 * _916;
    float _3873 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _924 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _3895 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _3906 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _3917 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _3928 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _929 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _943 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _994 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _984);
    float _995 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _984);
    float _996 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _984);
    float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
    float _1001 = _994 * _1000;
    float _1002 = _995 * _1000;
    float _1003 = _996 * _1000;
    float _1009 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1010 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1028 = fma(_923, cbSceneParam._m0[5u].z, fma(_922, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _921));
    float _1031 = fma(_923, cbSceneParam._m0[6u].z, fma(_922, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _921));
    float _1034 = fma(_923, cbSceneParam._m0[7u].z, fma(_922, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _921));
    uint _1048 = (_280 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1054 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_1048].x;
    float _1055 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * cbInstanceData._m0[_1048].y;
    float _1056 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * cbInstanceData._m0[_1048].z;
    float _3939 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1057 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1058 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1059 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1060 = 1.0 - _929;
    float _1061 = _1057 * _1060;
    float _1062 = _1058 * _1060;
    float _1063 = _1059 * _1060;
    float _1068 = (_1057 + (-0.039999999105930328369140625)) * _929;
    float _1069 = (_1058 + (-0.039999999105930328369140625)) * _929;
    float _1070 = (_1059 + (-0.039999999105930328369140625)) * _929;
    float _1071 = _1068 + 0.039999999105930328369140625;
    float _1073 = _1069 + 0.039999999105930328369140625;
    float _1074 = _1070 + 0.039999999105930328369140625;
    vec4 _1083 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1009, cbSceneParam._m0[86u].y * _1010));
    float _1087 = ((isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * TEXCOORD_5.w) * _1083.x;
    float _1088 = dot(vec3(_921, _922, _923), vec3(_1001, _1002, _1003));
    float _1091 = _1088 * 2.0;
    float _1095 = (_1091 * _921) - _1001;
    float _1096 = (_1091 * _922) - _1002;
    float _1097 = (_1091 * _923) - _1003;
    float _1101 = abs(dot(vec3(_1001, _1002, _1003), vec3(_921, _922, _923)));
    float _3972 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1103 = sqrt(_924);
    float _1116 = exp2((_1103 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1103 * 3.0));
    float _1122 = (1.0 - _1116) * ((_1103 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1123 = _1116 * _1103;
    float _1151 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1155 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1159 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1460;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1185 = fma(_1159, cbModelParam._m0[26u].z, fma(_1155, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1151));
        float _1189 = fma(_1159, cbModelParam._m0[27u].z, fma(_1155, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1151));
        float _1193 = fma(_1159, cbModelParam._m0[28u].z, fma(_1155, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1151));
        float _1218 = _1151 + _921;
        float _1219 = _1155 + _922;
        float _1220 = _1159 + _923;
        float _1230 = fma(_1220, cbModelParam._m0[26u].z, fma(_1219, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1218)) - _1185;
        float _1231 = fma(_1220, cbModelParam._m0[27u].z, fma(_1219, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1218)) - _1189;
        float _1232 = fma(_1220, cbModelParam._m0[28u].z, fma(_1219, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1218)) - _1193;
        float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
        float _1249 = ((_1236 * _1230) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1185 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1236 * _1231) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1189 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1236 * _1232) / cbModelParam._m0[34u].z) + ((((((_1193 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        float _1288 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1254.x + (-0.5));
        float _1290 = _1288 * (_1254.y + (-0.5));
        float _1291 = _1288 * (_1254.z + (-0.5));
        float _1298 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1261.x + (-0.5));
        float _1300 = _1298 * (_1261.y + (-0.5));
        float _1301 = _1298 * (_1261.z + (-0.5));
        float _1308 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1268.x + (-0.5));
        float _1310 = _1308 * (_1268.y + (-0.5));
        float _1311 = _1308 * (_1268.z + (-0.5));
        float _1318 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1275.x + (-0.5));
        float _1320 = _1318 * (_1275.y + (-0.5));
        float _1321 = _1318 * (_1275.z + (-0.5));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = _1289 * 0.5;
        float _1326 = _1299 * 0.5;
        float _1327 = _1309 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1342 = (dot(vec3(_921, _922, _923), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1352 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4020 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1354 + 1.0))) + _1359) * _1322;
        float _1369 = _1290 * 0.5;
        float _1370 = _1300 * 0.5;
        float _1371 = _1310 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_921, _922, _923), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4053 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1396 + 1.0))) + _1401) * _1323;
        float _1411 = _1291 * 0.5;
        float _1412 = _1301 * 0.5;
        float _1413 = _1311 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_921, _922, _923), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4086 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1438 + 1.0))) + _1443) * _1324;
        _1460 = _1291;
        _1462 = _1290;
        _1463 = _1289;
        _1464 = _1301;
        _1465 = _1300;
        _1466 = _1299;
        _1467 = _1311;
        _1468 = _1310;
        _1469 = _1309;
        _1470 = _1324;
        _1471 = _1323;
        _1472 = _1322;
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
    }
    else
    {
        _1460 = _1461;
        _1462 = _1461;
        _1463 = _1461;
        _1464 = _1461;
        _1465 = _1461;
        _1466 = _1461;
        _1467 = _1461;
        _1468 = _1461;
        _1469 = _1461;
        _1470 = _1461;
        _1471 = _1461;
        _1472 = _1461;
        _1473 = 0.0;
        _1474 = 0.0;
        _1475 = 0.0;
    }
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1499 = fma(_1159, cbModelParam._m0[30u].z, fma(_1155, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1151));
        float _1503 = fma(_1159, cbModelParam._m0[31u].z, fma(_1155, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1151));
        float _1507 = fma(_1159, cbModelParam._m0[32u].z, fma(_1155, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1151));
        float _1530 = _1151 + _921;
        float _1531 = _1155 + _922;
        float _1532 = _1159 + _923;
        float _1542 = fma(_1532, cbModelParam._m0[30u].z, fma(_1531, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1530)) - _1499;
        float _1543 = fma(_1532, cbModelParam._m0[31u].z, fma(_1531, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1530)) - _1503;
        float _1544 = fma(_1532, cbModelParam._m0[32u].z, fma(_1531, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1530)) - _1507;
        float _1548 = inversesqrt(dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544)));
        float _1561 = ((_1548 * _1542) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1499 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1562 = ((_1548 * _1543) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1503 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1548 * _1544) / cbModelParam._m0[35u].z) + ((((((_1507 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1561, _1562, _1563), 0.0);
        float _1598 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1565.x + (-0.5));
        float _1600 = _1598 * (_1565.y + (-0.5));
        float _1601 = _1598 * (_1565.z + (-0.5));
        float _1608 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1572.x + (-0.5));
        float _1610 = _1608 * (_1572.y + (-0.5));
        float _1611 = _1608 * (_1572.z + (-0.5));
        float _1618 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1579.x + (-0.5));
        float _1620 = _1618 * (_1579.y + (-0.5));
        float _1621 = _1618 * (_1579.z + (-0.5));
        float _1628 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1586.x + (-0.5));
        float _1630 = _1628 * (_1586.y + (-0.5));
        float _1631 = _1628 * (_1586.z + (-0.5));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = _1599 * 0.5;
        float _1636 = _1609 * 0.5;
        float _1637 = _1619 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_921, _922, _923), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4149 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1662 + 1.0))) + _1667) * _1632;
        float _1677 = _1600 * 0.5;
        float _1678 = _1610 * 0.5;
        float _1679 = _1620 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_921, _922, _923), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4182 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1704 + 1.0))) + _1709) * _1633;
        float _1719 = _1601 * 0.5;
        float _1720 = _1611 * 0.5;
        float _1721 = _1621 * 0.5;
        float _1722 = dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721));
        float _1727 = (_1722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1722);
        float _1735 = (dot(vec3(_921, _922, _923), vec3(_1727 * _1719, _1727 * _1720, _1727 * _1721)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1744 = sqrt(((_1720 * _1720) + (_1719 * _1719)) + (_1721 * _1721)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1746 = _1745 * 2.0;
        float _1750 = (1.0 - _1745) / (_1745 + 1.0);
        float _4215 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1760 = ((((1.0 - _1751) * (_1746 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1746 + 1.0))) + _1751) * _1634;
        _1768 = _1601;
        _1769 = _1600;
        _1770 = _1599;
        _1771 = _1611;
        _1772 = _1610;
        _1773 = _1609;
        _1774 = _1621;
        _1775 = _1620;
        _1776 = _1619;
        _1777 = _1634;
        _1778 = _1633;
        _1779 = _1632;
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)));
    }
    else
    {
        _1768 = _1461;
        _1769 = _1461;
        _1770 = _1461;
        _1771 = _1461;
        _1772 = _1461;
        _1773 = _1461;
        _1774 = _1461;
        _1775 = _1461;
        _1776 = _1461;
        _1777 = _1461;
        _1778 = _1461;
        _1779 = _1461;
        _1780 = 0.0;
        _1781 = 0.0;
        _1782 = 0.0;
    }
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1473)) + _1473;
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1474)) + _1474;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1475)) + _1475;
    float _1815 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1793, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1818 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1793, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1821 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1793, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1792));
    float _1836 = _1095 * 0.5;
    float _1837 = _1096 * 0.5;
    float _1838 = _1097 * 0.5;
    float _1839 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1842 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1845 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1879;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1852 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1460, _1464, _1467, _1470));
        float _1856 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1462, _1465, _1468, _1471));
        float _1860 = dot(vec4(_1836, _1837, _1838, 1.0), vec4(_1463, _1466, _1469, _1472));
        float _1867 = dot(vec4(cbModelParam._m0[39u]), vec4(_1836, _1837, _1838, 1.0));
        _1879 = dot(vec3(isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1867) ? 0.0 : (isnan(0.0) ? _1867 : max(0.0, _1867))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1879 = 1.0;
    }
    float _1890;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1881 = dot(vec4(cbModelParam._m0[40u]), vec4(_1836, _1837, _1838, 1.0));
        _1890 = dot(vec3(isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1881) ? 0.0 : (isnan(0.0) ? _1881 : max(0.0, _1881))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1890 = 1.0;
    }
    float _1894 = (_1890 * cbModelParam._m0[1u].x) + (_1879 * (1.0 - cbModelParam._m0[1u].x));
    float _1904 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _924);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1904 : min(cbModelParam._m0[25u].z, _1904));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1952 = fma(_1159, cbModelParam._m0[13u].z, fma(_1155, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1151)) + cbModelParam._m0[13u].w;
        float _1956 = fma(_1159, cbModelParam._m0[14u].z, fma(_1155, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1151)) + cbModelParam._m0[14u].w;
        float _1960 = fma(_1159, cbModelParam._m0[15u].z, fma(_1155, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1151)) + cbModelParam._m0[15u].w;
        float _1963 = fma(_1097, cbModelParam._m0[13u].z, fma(_1096, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1095));
        float _1966 = fma(_1097, cbModelParam._m0[14u].z, fma(_1096, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1095));
        float _1969 = fma(_1097, cbModelParam._m0[15u].z, fma(_1096, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1095));
        float _1997;
        if (_1963 > 0.0)
        {
            _1997 = abs((1.0 - _1952) / _1963);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1952 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1997 = frontier_phi_14_12_ladder;
        }
        float _2199;
        if (_1966 > 0.0)
        {
            _2199 = abs((1.0 - _1956) / _1966);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1956 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2199 = frontier_phi_23_19_ladder;
        }
        float _2453;
        if (_1969 > 0.0)
        {
            _2453 = abs((1.0 - _1960) / _1969);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1960 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2453 = frontier_phi_35_30_ladder;
        }
        float _2455 = isnan(_2199) ? _1997 : (isnan(_1997) ? _2199 : min(_1997, _2199));
        float _2456 = isnan(_2453) ? _2455 : (isnan(_2455) ? _2453 : min(_2455, _2453));
        float _2460 = (_2456 * _1963) + _1952;
        float _2461 = (_2456 * _1966) + _1956;
        float _2462 = (_2456 * _1969) + _1960;
        float _2463 = _2456 * 9.9999997473787516355514526367188e-05;
        float _2465 = (-1.0) - _2463;
        float _2467 = _2463 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2462 > _2467) || ((_2462 < _2465) || ((_2461 > _2467) || ((_2461 < _2465) || ((_2460 < _2465) || (_2460 > _2467))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2462, cbModelParam._m0[9u].z, fma(_2461, cbModelParam._m0[9u].y, _2460 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2462, cbModelParam._m0[10u].z, fma(_2461, cbModelParam._m0[10u].y, _2460 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2462, cbModelParam._m0[11u].z, fma(_2461, cbModelParam._m0[11u].y, _2460 * cbModelParam._m0[11u].x))), _1905);
            frontier_phi_13_35_ladder = _2590.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2590.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2590.x * cbModelParam._m0[1u].y;
        }
        _1985 = frontier_phi_13_35_ladder_2;
        _1987 = frontier_phi_13_35_ladder_1;
        _1989 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1095, _1096, _1097), _1905);
        _1985 = _1973.x * cbModelParam._m0[1u].y;
        _1987 = _1973.y * cbModelParam._m0[1u].y;
        _1989 = _1973.z * cbModelParam._m0[1u].y;
    }
    float _1993 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _924);
    float _1994 = isnan(_1993) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1993 : min(cbModelParam._m0[25u].w, _1993));
    float _2083;
    float _2085;
    float _2087;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2047 = fma(_1159, cbModelParam._m0[21u].z, fma(_1155, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1151)) + cbModelParam._m0[21u].w;
        float _2051 = fma(_1159, cbModelParam._m0[22u].z, fma(_1155, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1151)) + cbModelParam._m0[22u].w;
        float _2055 = fma(_1159, cbModelParam._m0[23u].z, fma(_1155, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1151)) + cbModelParam._m0[23u].w;
        float _2058 = fma(_1097, cbModelParam._m0[21u].z, fma(_1096, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1095));
        float _2061 = fma(_1097, cbModelParam._m0[22u].z, fma(_1096, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1095));
        float _2064 = fma(_1097, cbModelParam._m0[23u].z, fma(_1096, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1095));
        float _2204;
        if (_2058 > 0.0)
        {
            _2204 = abs((1.0 - _2047) / _2058);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2047 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2204 = frontier_phi_25_21_ladder;
        }
        float _2480;
        if (_2061 > 0.0)
        {
            _2480 = abs((1.0 - _2051) / _2061);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2051 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2480 = frontier_phi_37_32_ladder;
        }
        float _2693;
        if (_2064 > 0.0)
        {
            _2693 = abs((1.0 - _2055) / _2064);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2055 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2693 = frontier_phi_46_43_ladder;
        }
        float _2695 = isnan(_2480) ? _2204 : (isnan(_2204) ? _2480 : min(_2204, _2480));
        float _2696 = isnan(_2693) ? _2695 : (isnan(_2695) ? _2693 : min(_2695, _2693));
        float _2700 = (_2696 * _2058) + _2047;
        float _2701 = (_2696 * _2061) + _2051;
        float _2702 = (_2696 * _2064) + _2055;
        float _2703 = _2696 * 9.9999997473787516355514526367188e-05;
        float _2704 = (-1.0) - _2703;
        float _2706 = _2703 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2702 > _2706) || ((_2702 < _2704) || ((_2701 > _2706) || ((_2701 < _2704) || ((_2700 < _2704) || (_2700 > _2706))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2901 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2702, cbModelParam._m0[17u].z, fma(_2701, cbModelParam._m0[17u].y, _2700 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2702, cbModelParam._m0[18u].z, fma(_2701, cbModelParam._m0[18u].y, _2700 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2702, cbModelParam._m0[19u].z, fma(_2701, cbModelParam._m0[19u].y, _2700 * cbModelParam._m0[19u].x))), _1994);
            frontier_phi_22_46_ladder = _2901.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2901.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2901.x * cbModelParam._m0[1u].z;
        }
        _2083 = frontier_phi_22_46_ladder_2;
        _2085 = frontier_phi_22_46_ladder_1;
        _2087 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2067 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1095, _1096, _1097), _1994);
        _2083 = _2067.x * cbModelParam._m0[1u].z;
        _2085 = _2067.y * cbModelParam._m0[1u].z;
        _2087 = _2067.z * cbModelParam._m0[1u].z;
    }
    float _2100 = (((_1122 * _1071) + _1123) * _1087) * ((cbModelParam._m0[1u].w * (_2083 - _1985)) + _1985);
    float _2102 = (((_1122 * _1073) + _1123) * _1087) * ((cbModelParam._m0[1u].w * (_2085 - _1987)) + _1987);
    float _2104 = (((_1122 * _1074) + _1123) * _1087) * ((cbModelParam._m0[1u].w * (_2087 - _1989)) + _1989);
    float _2107 = fma(_2104, cbSceneParam._m0[89u].z, fma(_2102, cbSceneParam._m0[89u].y, _2100 * cbSceneParam._m0[89u].x));
    float _2110 = fma(_2104, cbSceneParam._m0[90u].z, fma(_2102, cbSceneParam._m0[90u].y, _2100 * cbSceneParam._m0[90u].x));
    float _2113 = fma(_2104, cbSceneParam._m0[91u].z, fma(_2102, cbSceneParam._m0[91u].y, _2100 * cbSceneParam._m0[91u].x));
    uvec4 _2123 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2125 = _2123.x * 14u;
    uint _2126 = _2125 + 13u;
    float _2133 = _1087 + (-1.0);
    float _2138 = (cbLight._m0[_2126].x * _2133) + 1.0;
    float _2139 = (cbLight._m0[_2126].y * _2133) + 1.0;
    float _2140 = (cbLight._m0[_2126].z * _2133) + 1.0;
    float _2141 = (cbLight._m0[_2126].w * _2133) + 1.0;
    uint _2142 = _2125 + 5u;
    float _2148 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
    uint _2152 = _2125 + 4u;
    float _2158 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
    uint _2162 = _2125 | 1u;
    float _2173 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_921, _922, _923));
    float _2176 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_921, _922, _923));
    float _4351 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _4362 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2181 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
    float _2183 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.3183098733425140380859375;
    float _2190 = ((cbLight._m0[_2142].x * _2148) * _2183) + ((cbLight._m0[_2152].x * _2158) * _2181);
    float _2191 = ((_2148 * cbLight._m0[_2142].y) * _2183) + ((_2158 * cbLight._m0[_2152].y) * _2181);
    float _2192 = ((_2148 * cbLight._m0[_2142].z) * _2183) + ((_2158 * cbLight._m0[_2152].z) * _2181);
    uvec4 _2196 = floatBitsToUint(cbLight._m0[_2125 + 12u]);
    bool _2198 = _2196.x == 0u;
    float _2209;
    float _2211;
    float _2213;
    if (_2198)
    {
        _2209 = _2190;
        _2211 = _2191;
        _2213 = _2192;
    }
    else
    {
        uint _2217 = _2125 + 6u;
        float _2233 = (dot(vec3(cbLight._m0[_2125 + 2u].xyz), vec3(_921, _922, _923)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4373 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2236 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2209 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _2190;
        _2211 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _2191;
        _2213 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _2192;
    }
    bool _2216 = _2196.y == 0u;
    float _2254;
    float _2256;
    float _2258;
    if (_2216)
    {
        _2254 = _2209;
        _2256 = _2211;
        _2258 = _2213;
    }
    else
    {
        uint _2424 = _2125 + 7u;
        float _2440 = (dot(vec3(cbLight._m0[_2125 + 3u].xyz), vec3(_921, _922, _923)) * 0.5) + 0.5;
        float _2441 = _2440 * _2440;
        float _4389 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2442 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2443 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2254 = (((cbLight._m0[_2424].x * 0.3183098733425140380859375) * _2442) * _2443) + _2209;
        _2256 = (((cbLight._m0[_2424].y * 0.3183098733425140380859375) * _2442) * _2443) + _2211;
        _2258 = (((cbLight._m0[_2424].z * 0.3183098733425140380859375) * _2442) * _2443) + _2213;
    }
    uint _2261 = _2125 + 8u;
    float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _924) * 0.949999988079071044921875);
    float _2275 = _2274 * _2274;
    float _2276 = cbLight._m0[_2125].x + _1001;
    float _2277 = cbLight._m0[_2125].y + _1002;
    float _2278 = cbLight._m0[_2125].z + _1003;
    float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
    float _2283 = _2282 * _2276;
    float _2284 = _2282 * _2277;
    float _2285 = _2282 * _2278;
    float _2286 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2125].xyz));
    float _4405 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _4416 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _2290 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2291 = dot(vec3(_921, _922, _923), vec3(_2283, _2284, _2285));
    float _4427 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2295 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2283, _2284, _2285));
    float _4438 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2299 = _2275 * _2275;
    float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
    float _2311 = exp2(log2(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * 5.0);
    float _2312 = 0.959999978542327880859375 - _1068;
    float _2314 = 0.959999978542327880859375 - _1069;
    float _2315 = 0.959999978542327880859375 - _1070;
    float _2322 = 1.0 - _2275;
    float _2333 = (0.5 / (((_2290 * ((_2289 * _2322) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2322) + _2275) * _2289))) * _2289;
    float _4449 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2335 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
    uint _2346 = _2125 + 9u;
    float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _924) * 0.949999988079071044921875);
    float _2358 = _2357 * _2357;
    float _2359 = cbLight._m0[_2162].x + _1001;
    float _2360 = cbLight._m0[_2162].y + _1002;
    float _2361 = cbLight._m0[_2162].z + _1003;
    float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
    float _2366 = _2365 * _2359;
    float _2367 = _2365 * _2360;
    float _2368 = _2365 * _2361;
    float _2369 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2162].xyz));
    float _4460 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2373 = dot(vec3(_921, _922, _923), vec3(_2366, _2367, _2368));
    float _4471 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2377 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2366, _2367, _2368));
    float _4482 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2381 = _2358 * _2358;
    float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
    float _2392 = exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0);
    float _2399 = 1.0 - _2358;
    float _2409 = (0.5 / (((_2290 * ((_2372 * _2399) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2399) + _2358) * _2372))) * _2372;
    float _4493 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2411 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
    float _2421 = (((((_2392 * _2312) + _1071) * cbLight._m0[_2346].x) * _2411) * _2148) + (((((_2311 * _2312) + _1071) * cbLight._m0[_2261].x) * _2335) * _2158);
    float _2422 = (((((_2392 * _2314) + _1073) * cbLight._m0[_2346].y) * _2411) * _2148) + (((((_2311 * _2314) + _1073) * cbLight._m0[_2261].y) * _2335) * _2158);
    float _2423 = (((((_2392 * _2315) + _1074) * cbLight._m0[_2346].z) * _2411) * _2148) + (((((_2311 * _2315) + _1074) * cbLight._m0[_2261].z) * _2335) * _2158);
    float _2485;
    float _2487;
    float _2489;
    if (_2198)
    {
        _2485 = _2421;
        _2487 = _2422;
        _2489 = _2423;
    }
    else
    {
        uint _2491 = _2125 + 2u;
        uint _2495 = _2125 + 10u;
        float _2509 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2491].w)) * _924) * 0.949999988079071044921875);
        float _2510 = _2509 * _2509;
        float _2511 = cbLight._m0[_2491].x + _1001;
        float _2512 = cbLight._m0[_2491].y + _1002;
        float _2513 = cbLight._m0[_2491].z + _1003;
        float _2517 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
        float _2518 = _2517 * _2511;
        float _2519 = _2517 * _2512;
        float _2520 = _2517 * _2513;
        float _2521 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2491].xyz));
        float _4504 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2525 = dot(vec3(_921, _922, _923), vec3(_2518, _2519, _2520));
        float _4515 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2528 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2529 = dot(vec3(cbLight._m0[_2491].xyz), vec3(_2518, _2519, _2520));
        float _4526 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2533 = _2510 * _2510;
        float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
        float _2544 = exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0);
        float _2551 = 1.0 - _2510;
        float _2561 = (0.5 / (((_2290 * ((_2524 * _2551) + _2510)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2551) + _2510) * _2524))) * _2524;
        float _4537 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2563 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
        float _2564 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2485 = (((((_2544 * _2312) + _1071) * cbLight._m0[_2495].x) * _2563) * _2564) + _2421;
        _2487 = (((((_2544 * _2314) + _1073) * cbLight._m0[_2495].y) * _2563) * _2564) + _2422;
        _2489 = (((((_2544 * _2315) + _1074) * cbLight._m0[_2495].z) * _2563) * _2564) + _2423;
    }
    float _2599;
    float _2601;
    float _2603;
    if (_2216)
    {
        _2599 = _2485;
        _2601 = _2487;
        _2603 = _2489;
    }
    else
    {
        uint _2610 = _2125 + 3u;
        uint _2614 = _2125 + 11u;
        float _2628 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2610].w)) * _924) * 0.949999988079071044921875);
        float _2629 = _2628 * _2628;
        float _2630 = cbLight._m0[_2610].x + _1001;
        float _2631 = cbLight._m0[_2610].y + _1002;
        float _2632 = cbLight._m0[_2610].z + _1003;
        float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
        float _2637 = _2636 * _2630;
        float _2638 = _2636 * _2631;
        float _2639 = _2636 * _2632;
        float _2640 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2610].xyz));
        float _4553 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2644 = dot(vec3(_921, _922, _923), vec3(_2637, _2638, _2639));
        float _4564 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2648 = dot(vec3(cbLight._m0[_2610].xyz), vec3(_2637, _2638, _2639));
        float _4575 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2652 = _2629 * _2629;
        float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
        float _2663 = exp2(log2(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) * 5.0);
        float _2670 = 1.0 - _2629;
        float _2680 = (0.5 / (((_2290 * ((_2643 * _2670) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2290 * _2670) + _2629) * _2643))) * _2643;
        float _4586 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2682 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
        float _2683 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2599 = (((((_2663 * _2312) + _1071) * cbLight._m0[_2614].x) * _2682) * _2683) + _2485;
        _2601 = (((((_2663 * _2314) + _1073) * cbLight._m0[_2614].y) * _2682) * _2683) + _2487;
        _2603 = (((((_2663 * _2315) + _1074) * cbLight._m0[_2614].z) * _2682) * _2683) + _2489;
    }
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    if (_2123.y == 0u)
    {
        float _2758 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2759 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2758;
        float _2760 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2758;
        float _2761 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2758;
        uvec4 _2773 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2774 = _2773.x;
        uint _2785 = uint((float(_2773.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1010) / _2774))) + floor(float(uint(cbSceneParam._m0[85u].x * _1009) / _2774)));
        float _2795 = (log2(_2761 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2796 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        uint _2799 = uint(isnan(14.0) ? _2796 : (isnan(_2796) ? 14.0 : min(_2796, 14.0)));
        uvec4 _2804 = texelFetch(g_lightClusterGridBuffer, int(((_2799 << 2u) + (_2785 << 6u)) >> 2u));
        uint _2805 = _2804.x;
        uint _2806 = _2773.z;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        if (((((1u << ((_2806 >> 4u) & 15u)) + 4294967295u) & _2805) == 0u) || ((_2806 & 240u) == 0u))
        {
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
        }
        else
        {
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            uint _3057 = 0u;
            uint _3066;
            bool _3067;
            for (;;)
            {
                _3066 = texelFetch(g_lightClassification, int((((_2799 << 5u) + (_2785 << 9u)) + (_3057 << 2u)) >> 2u)).x;
                _3067 = _3066 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3067)
                {
                    frontier_phi_61_pred = _3051;
                    frontier_phi_61_pred_1 = _3056;
                    frontier_phi_61_pred_2 = _3055;
                    frontier_phi_61_pred_3 = _3054;
                    frontier_phi_61_pred_4 = _3053;
                    frontier_phi_61_pred_5 = _3052;
                }
                else
                {
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    uint _3181;
                    _3175 = _3051;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3054;
                    _3179 = _3055;
                    _3180 = _3056;
                    _3181 = _3066;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    for (;;)
                    {
                        uint _3185 = uint(findLSB(_3181)) + (_3057 << 5u);
                        uint _3182 = (_3181 + 4294967295u) & _3181;
                        uint _3187 = _3185 * 48u;
                        vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 3u)).x));
                        uint _3207 = (_3185 * 48u) + 4u;
                        vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3207)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 3u)).x));
                        uint _3226 = (_3185 * 48u) + 8u;
                        vec3 _3237 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x));
                        float _3241 = _3201.x - _2759;
                        float _3242 = _3201.y - _2760;
                        float _3243 = _3201.z - _2761;
                        float _3244 = dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243));
                        float _3247 = inversesqrt(_3244);
                        float _3248 = _3247 * _3241;
                        float _3249 = _3247 * _3242;
                        float _3250 = _3247 * _3243;
                        float _3251 = dot(vec3(_1028, _1031, _1034), vec3(_3248, _3249, _3250));
                        float _3256 = 1.0 - (_3244 * _3201.w);
                        float _4612 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3257 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3258 = sqrt(_3244) * _3220.w;
                        float _3261 = 1.39999997615814208984375 / (_3258 + 1.39999997615814208984375);
                        float _3262 = _3261 * _3261;
                        float _3265 = ((1.0 - _3262) * _3251) + _3262;
                        float _3268 = _3258 * _3258;
                        float _3272 = ((isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))) * _3257) / ((_3268 * 0.699999988079071044921875) + 1.0);
                        float _3276 = (-0.0) - _2759;
                        float _3277 = (-0.0) - _2760;
                        float _3278 = (-0.0) - _2761;
                        float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                        float _3283 = _3282 * _3276;
                        float _3284 = _3282 * _3277;
                        float _3285 = _3282 * _3278;
                        float _3293 = exp2(log2(1.0 / ((_3268 * 3.5) + 5.0)) * 0.25);
                        float _3294 = 1.0 - _1103;
                        float _3301 = sqrt(1.0 - ((1.0 - (_3294 * _3294)) * (1.0 - (_3293 * _3293))));
                        float _3302 = _3301 * _3301;
                        float _3303 = _3302 * _3302;
                        float _3304 = _3283 + _3248;
                        float _3305 = _3284 + _3249;
                        float _3306 = _3285 + _3250;
                        float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                        float _3314 = dot(vec3(_1028, _1031, _1034), vec3(_3283, _3284, _3285));
                        float _4628 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3317 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3318 = dot(vec3(_1028, _1031, _1034), vec3(_3310 * _3304, _3310 * _3305, _3310 * _3306));
                        float _4639 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3321 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3325 = ((_3321 * _3321) * (_3303 + (-1.0))) + 1.0;
                        float _3326 = _3261 * _3302;
                        float _3327 = _3326 * _3326;
                        float _3330 = ((1.0 - _3327) * _3251) + _3327;
                        float _4650 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3331 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3332 = 1.0 - _3302;
                        float _3342 = (0.5 / (((_3331 * ((_3317 * _3332) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_3331 * _3332) + _3302) * _3317))) * _3331;
                        float _4661 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3353 = (((_3303 * 3.1415927410125732421875) * (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) / ((_3325 * _3325) * ((_3268 * 2.1991131305694580078125) + 3.141590118408203125))) * _3257;
                        _3110 = (_3272 * _3220.x) + _3178;
                        _3111 = (_3272 * _3220.y) + _3179;
                        _3112 = (_3272 * _3220.z) + _3180;
                        _3107 = (_3353 * _3237.x) + _3175;
                        _3108 = (_3353 * _3237.y) + _3176;
                        _3109 = (_3353 * _3237.z) + _3177;
                        if (_3182 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3175 = _3107;
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3110;
                            _3179 = _3111;
                            _3180 = _3112;
                            _3181 = _3182;
                        }
                    }
                    frontier_phi_61_pred = _3107;
                    frontier_phi_61_pred_1 = _3112;
                    frontier_phi_61_pred_2 = _3111;
                    frontier_phi_61_pred_3 = _3110;
                    frontier_phi_61_pred_4 = _3109;
                    frontier_phi_61_pred_5 = _3108;
                }
                _2907 = frontier_phi_61_pred;
                _2917 = frontier_phi_61_pred_1;
                _2915 = frontier_phi_61_pred_2;
                _2913 = frontier_phi_61_pred_3;
                _2911 = frontier_phi_61_pred_4;
                _2909 = frontier_phi_61_pred_5;
                uint _3058 = _3057 + 1u;
                if (_3058 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3051 = _2907;
                    _3052 = _2909;
                    _3053 = _2911;
                    _3054 = _2913;
                    _3055 = _2915;
                    _3056 = _2917;
                    _3057 = _3058;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
        }
        uvec4 _2920 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2921 = _2920.z;
        uint _2923 = (_2921 >> 8u) & 15u;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        if (((4294967295u << _2923) & _2805) == 0u)
        {
            _3019 = _2906;
            _3021 = _2908;
            _3023 = _2910;
            _3025 = _2912;
            _3027 = _2914;
            _3029 = _2916;
        }
        else
        {
            float _3044 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
            float _3045 = _3044 * _2759;
            float _3046 = _3044 * _2760;
            float _3047 = _3044 * _2761;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2923 < ((_2921 >> 12u) & 15u))
            {
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3158 = _2906;
                float _3159 = _2908;
                float _3160 = _2910;
                float _3161 = _2912;
                float _3162 = _2914;
                float _3163 = _2916;
                uint _3164 = _2923;
                uint _3173;
                bool _3174;
                for (;;)
                {
                    _3173 = texelFetch(g_lightClassification, int((((_2799 << 5u) + (_2785 << 9u)) + (_3164 << 2u)) >> 2u)).x;
                    _3174 = _3173 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3174)
                    {
                        frontier_phi_67_pred = _3161;
                        frontier_phi_67_pred_1 = _3162;
                        frontier_phi_67_pred_2 = _3163;
                        frontier_phi_67_pred_3 = _3160;
                        frontier_phi_67_pred_4 = _3159;
                        frontier_phi_67_pred_5 = _3158;
                    }
                    else
                    {
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3371 = _3158;
                        float _3372 = _3159;
                        float _3373 = _3160;
                        float _3374 = _3161;
                        float _3375 = _3162;
                        float _3376 = _3163;
                        uint _3377 = _3173;
                        uint _3378;
                        vec4 _3403;
                        float _3404;
                        vec4 _3419;
                        vec3 _3431;
                        vec4 _3446;
                        vec4 _3461;
                        float _3507;
                        bool _3508;
                        for (;;)
                        {
                            uint _3388 = ((_3164 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3377));
                            _3378 = (_3377 + 4294967295u) & _3377;
                            uint _3390 = _3388 * 40u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3404 = _3403.w;
                            uint _3406 = (_3388 * 40u) + 4u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3388 * 40u) + 8u;
                            _3431 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x));
                            uint _3433 = (_3388 * 40u) + 16u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3388 * 40u) + 20u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3463 = (_3388 * 40u) + 24u;
                            vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3482 = (_3388 * 40u) + 28u;
                            vec4 _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            _3507 = fma(_2761, _3495.z, fma(_2760, _3495.y, _3495.x * _2759)) + _3495.w;
                            _3508 = !((fma(_2761, _3476.z, fma(_2760, _3476.y, _3476.x * _2759)) + _3476.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3508)
                            {
                                float _3535 = _3403.x - _2759;
                                float _3536 = _3403.y - _2760;
                                float _3537 = _3403.z - _2761;
                                float _3538 = dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537));
                                float _3541 = inversesqrt(_3538);
                                float _3542 = _3541 * _3535;
                                float _3543 = _3541 * _3536;
                                float _3544 = _3541 * _3537;
                                float _3548 = 1.0 - (_3538 / (_3404 * _3404));
                                float _4672 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3553 = sqrt(_3538) * _3419.w;
                                float _3555 = 1.39999997615814208984375 / (_3553 + 1.39999997615814208984375);
                                float _3556 = _3555 * _3555;
                                float _3559 = ((1.0 - _3556) * dot(vec3(_3542, _3543, _3544), vec3(_1028, _1031, _1034))) + _3556;
                                float _3562 = _3553 * _3553;
                                float _3566 = (fma(_2761, _3446.z, fma(_2760, _3446.y, _3446.x * _2759)) + _3446.w) / _3507;
                                float _3567 = (fma(_2761, _3461.z, fma(_2760, _3461.y, _3461.x * _2759)) + _3461.w) / _3507;
                                float _3571 = 1.0 - dot(vec2(_3566, _3567), vec2(_3566, _3567));
                                float _4688 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3573 = _3572 * (((isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0))) * _3549) / ((_3562 * 0.699999988079071044921875) + 1.0));
                                float _3585 = exp2(log2(1.0 / ((_3562 * 3.5) + 5.0)) * 0.25);
                                float _3586 = 1.0 - _1103;
                                float _3593 = sqrt(1.0 - ((1.0 - (_3586 * _3586)) * (1.0 - (_3585 * _3585))));
                                float _3594 = _3593 * _3593;
                                float _3595 = _3594 * _3594;
                                float _3596 = _3542 - _3045;
                                float _3597 = _3543 - _3046;
                                float _3598 = _3544 - _3047;
                                float _3602 = inversesqrt(dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598)));
                                float _3606 = dot(vec3(_1028, _1031, _1034), vec3((-0.0) - _3045, (-0.0) - _3046, (-0.0) - _3047));
                                float _4699 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3609 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3610 = dot(vec3(_1028, _1031, _1034), vec3(_3602 * _3596, _3602 * _3597, _3602 * _3598));
                                float _4710 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3613 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3617 = ((_3613 * _3613) * (_3595 + (-1.0))) + 1.0;
                                float _3618 = _3555 * _3594;
                                float _3619 = _3618 * _3618;
                                float _3625 = ((1.0 - _3619) * dot(vec3(_1028, _1031, _1034), vec3(_3542, _3543, _3544))) + _3619;
                                float _4721 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3627 = 1.0 - _3594;
                                float _3637 = (0.5 / (((_3626 * ((_3609 * _3627) + _3594)) + 9.9999999392252902907785028219223e-09) + (((_3626 * _3627) + _3594) * _3609))) * _3626;
                                float _4732 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3647 = (_3572 * _3549) * (((_3595 * 3.1415927410125732421875) * (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) / ((_3617 * _3617) * ((_3562 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3647 * _3431.x;
                                frontier_phi_73_pred_1 = _3647 * _3431.y;
                                frontier_phi_73_pred_2 = _3573 * _3419.z;
                                frontier_phi_73_pred_3 = _3573 * _3419.y;
                                frontier_phi_73_pred_4 = _3573 * _3419.x;
                                frontier_phi_73_pred_5 = _3647 * _3431.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3651 = frontier_phi_73_pred;
                            _3652 = frontier_phi_73_pred_1;
                            _3656 = frontier_phi_73_pred_2;
                            _3655 = frontier_phi_73_pred_3;
                            _3654 = frontier_phi_73_pred_4;
                            _3653 = frontier_phi_73_pred_5;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            _3363 = _3656 + _3376;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            if (_3378 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3378;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3361;
                        frontier_phi_67_pred_1 = _3362;
                        frontier_phi_67_pred_2 = _3363;
                        frontier_phi_67_pred_3 = _3360;
                        frontier_phi_67_pred_4 = _3359;
                        frontier_phi_67_pred_5 = _3358;
                    }
                    _3026 = frontier_phi_67_pred;
                    _3028 = frontier_phi_67_pred_1;
                    _3030 = frontier_phi_67_pred_2;
                    _3024 = frontier_phi_67_pred_3;
                    _3022 = frontier_phi_67_pred_4;
                    _3020 = frontier_phi_67_pred_5;
                    uint _3165 = _3164 + 1u;
                    if (_3165 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3158 = _3020;
                        _3159 = _3022;
                        _3160 = _3024;
                        _3161 = _3026;
                        _3162 = _3028;
                        _3163 = _3030;
                        _3164 = _3165;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3028;
                frontier_phi_55_56_ladder_1 = _3030;
                frontier_phi_55_56_ladder_2 = _3026;
                frontier_phi_55_56_ladder_3 = _3024;
                frontier_phi_55_56_ladder_4 = _3022;
                frontier_phi_55_56_ladder_5 = _3020;
            }
            else
            {
                frontier_phi_55_56_ladder = _2914;
                frontier_phi_55_56_ladder_1 = _2916;
                frontier_phi_55_56_ladder_2 = _2912;
                frontier_phi_55_56_ladder_3 = _2910;
                frontier_phi_55_56_ladder_4 = _2908;
                frontier_phi_55_56_ladder_5 = _2906;
            }
            _3019 = frontier_phi_55_56_ladder_5;
            _3021 = frontier_phi_55_56_ladder_4;
            _3023 = frontier_phi_55_56_ladder_3;
            _3025 = frontier_phi_55_56_ladder_2;
            _3027 = frontier_phi_55_56_ladder;
            _3029 = frontier_phi_55_56_ladder_1;
        }
        float _3034 = isnan(1.0) ? _1087 : (isnan(_1087) ? 1.0 : min(_1087, 1.0));
        _2818 = (_3034 * _3025) + _2254;
        _2820 = (_3034 * _3027) + _2256;
        _2822 = (_3034 * _3029) + _2258;
        _2824 = ((_3019 * _1071) * _3034) + _2599;
        _2826 = ((_3021 * _1073) * _3034) + _2601;
        _2828 = ((_3023 * _1074) * _3034) + _2603;
    }
    else
    {
        _2818 = _2254;
        _2820 = _2256;
        _2822 = _2258;
        _2824 = _2599;
        _2826 = _2601;
        _2828 = _2603;
    }
    float _4748 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _4759 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _4770 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    uint _2848 = _280 + 6u;
    float _2856 = _1009 / cbSceneParam._m0[86u].x;
    float _2857 = _1010 / cbSceneParam._m0[86u].y;
    vec4 _2871 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2856, _2857, (log2((isnan(cbSceneParam._m0[77u].w) ? _943 : (isnan(_943) ? cbSceneParam._m0[77u].w : min(_943, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2873 = _2871.x;
    float _2874 = _2871.y;
    float _2875 = _2871.z;
    float _2876 = _2871.w;
    float _2969;
    float _2971;
    float _2973;
    float _2975;
    if (_943 > cbSceneParam._m0[78u].w)
    {
        float _2931 = isnan(_943) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _943 : min(cbSceneParam._m0[80u].w, _943));
        float _2932 = _2931 / _943;
        float _2943 = _2932 * _994;
        float _2944 = _995 * _2932;
        float _2945 = (-0.0) - _2944;
        float _2947 = _2932 * _996;
        float _2949 = (cbSceneParam._m0[77u].w * _2945) / _2931;
        float _2950 = _2949 + cbSceneParam._m0[79u].w;
        float _2951 = cbSceneParam._m0[79u].w - _2944;
        float _2957 = sqrt(((_2943 * _2943) + (_2944 * _2944)) + (_2947 * _2947));
        float _2960 = (1.0 - (cbSceneParam._m0[77u].w / _2931)) * _2957;
        float _2965 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2967 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3120;
        if (abs((_2945 - _2949) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3120 = ((((_2950 > 0.0) ? exp2(_2965 * _2950) : (2.0 - exp2(_2967 * _2950))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2960;
        }
        else
        {
            float _3080 = 1.0 / cbSceneParam._m0[80u].x;
            float _3081 = isnan(_2951) ? _2950 : (isnan(_2950) ? _2951 : max(_2950, _2951));
            float _3082 = isnan(_2951) ? _2950 : (isnan(_2950) ? _2951 : min(_2950, _2951));
            float _3091 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : min(_3081, 0.0));
            float _3092 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : min(_3082, 0.0));
            _3120 = ((abs(_2957 / _2945) * cbSceneParam._m0[80u].y) * ((((_3091 - _3092) * 2.0) - ((exp2(_2965 * (isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0)))) - exp2(_2965 * (isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))))) * _3080)) - ((exp2(_2967 * _3091) - exp2(_2967 * _3092)) * _3080))) + (_2960 * cbSceneParam._m0[80u].z);
        }
        vec4 _3122 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2856, _2857, 1.0), 0.0);
        float _3131 = exp2((_3120 * (-1.44269502162933349609375)) * (1.0 - _3122.w));
        float _3132 = log2(_3131);
        float _3148 = log2(_2876);
        _2969 = (exp2(_3148 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].x)) * _3122.x) / cbSceneParam._m0[78u].x)) + _2873;
        _2971 = (exp2(_3148 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].y)) * _3122.y) / cbSceneParam._m0[78u].y)) + _2874;
        _2973 = (exp2(_3148 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].z)) * _3122.z) / cbSceneParam._m0[78u].z)) + _2875;
        _2975 = _3131 * _2876;
    }
    else
    {
        _2969 = _2873;
        _2971 = _2874;
        _2973 = _2875;
        _2975 = _2876;
    }
    float _2987 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2988 = _2987 == 3.0;
    float _2989 = log2(_2975);
    float _2996 = exp2(_2989 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2818 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1087))) + ((_2824 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1894)) * cbPerFrame._m0[3u].x));
    float _2997 = exp2(_2989 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2820 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1087))) + ((_2826 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1894)) * cbPerFrame._m0[3u].x));
    float _2998 = exp2(_2989 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2822 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1087))) + ((_2828 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1894)) * cbPerFrame._m0[3u].x));
    float _3007 = (_2987 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3007 * (_2988 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2969)));
    SV_Target.y = _3007 * (_2988 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2971)));
    SV_Target.z = _3007 * (_2988 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2973)));
    SV_Target.w = cbInstanceData._m0[_2848].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2848].w;
}


