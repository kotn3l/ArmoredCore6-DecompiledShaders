#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1528;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3852 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3863 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3874 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _346 = _341.x * cbMtdParam._m0[11u].x;
    float _347 = _341.y * cbMtdParam._m0[11u].y;
    float _348 = _341.z * cbMtdParam._m0[11u].z;
    vec4 _367 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _421 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _435 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _452 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _386.x) * 2.0) - ((((_423 - _435) * cbMtdParam._m0[23u].w) + _435) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3885 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _460 = (_453 * ((_367.x * cbMtdParam._m0[12u].x) - _346)) + _346;
    float _461 = (_453 * ((_367.y * cbMtdParam._m0[12u].y) - _347)) + _347;
    float _462 = (_453 * ((_367.z * cbMtdParam._m0[12u].z) - _348)) + _348;
    vec4 _479 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _499 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _501 = _499.x;
    float _511 = dot(vec4(_501, _499.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _525 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _386.y) * 2.0) - ((((_501 - _511) * cbMtdParam._m0[23u].w) + _511) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3896 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _533 = (_526 * ((_479.x * cbMtdParam._m0[13u].x) - _460)) + _460;
    float _534 = (_526 * ((_479.y * cbMtdParam._m0[13u].y) - _461)) + _461;
    float _535 = (_526 * ((_479.z * cbMtdParam._m0[13u].z) - _462)) + _462;
    vec4 _554 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _303) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _304) + cbTextureTilingScale._m0[24u].w));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _573 = _571.x;
    float _583 = dot(vec4(_573, _571.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _595 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _386.z) * 2.0) - ((((_573 - _583) * cbMtdParam._m0[23u].w) + _583) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3907 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _603 = (_596 * ((_554.x * cbMtdParam._m0[14u].x) - _533)) + _533;
    float _604 = (_596 * ((_554.y * cbMtdParam._m0[14u].y) - _534)) + _534;
    float _605 = (_596 * ((_554.z * cbMtdParam._m0[14u].z) - _535)) + _535;
    float _609 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _603;
    float _612 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _604;
    float _615 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _605;
    float _622 = ((_603 - _609) * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) + _609;
    float _623 = ((_604 - _612) * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) + _612;
    float _624 = ((_605 - _615) * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) + _615;
    vec4 _641 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _683 = _681.x;
    float _684 = _681.y;
    float _685 = _681.z;
    float _692 = ((_664.x - _683) * _453) + _683;
    float _693 = ((_664.y - _684) * _453) + _684;
    float _694 = ((_664.z - _685) * _453) + _685;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _717 = ((_706.x - _692) * _526) + _692;
    float _718 = ((_706.y - _693) * _526) + _693;
    float _719 = ((_706.z - _694) * _526) + _694;
    vec4 _731 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _303) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _304) + cbTextureTilingScale._m0[23u].w));
    float _744 = ((_731.z - _719) * _596) + _719;
    float _747 = ((((_731.x - _717) * _596) + _717) * 2.0) + (-1.0);
    float _748 = ((((_731.y - _718) * _596) + _718) * 2.0) + (-1.0);
    float _749 = dot(vec2(_747, _748), vec2(_747, _748));
    float _3918 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _754 = sqrt(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))));
    vec4 _768 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _793 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _795 = _793.x;
    float _796 = 1.0 - _795;
    float _811 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_795 - _796) * cbMtdParam._m0[24u].z) + _796) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3929 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _812 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _819 = (_812 * (cbMtdParam._m0[17u].x - _622)) + _622;
    float _820 = (_812 * (cbMtdParam._m0[17u].y - _623)) + _623;
    float _821 = (_812 * (cbMtdParam._m0[17u].z - _624)) + _624;
    vec4 _847 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _849 = _847.x;
    float _867 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w)).x - _849) * _453) + _849;
    float _884 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _303) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _304) + cbTextureTilingScale._m0[21u].w)).x - _867) * _526) + _867;
    float _902 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _303) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _304) + cbTextureTilingScale._m0[10u].w)).x - _884) * _596) + _884;
    float _906 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _902) * cbMtdParam._m0[19u].z) + _902;
    float _908 = _906 - (_906 * _812);
    float _913 = (((_641.z - _744) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _744;
    float _917 = ((_768.z - _913) * cbMtdParam._m0[19u].w) + _913;
    vec4 _930 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _937 = (_930.x * 2.0) + (-1.0);
    float _938 = (_930.y * 2.0) + (-1.0);
    float _939 = dot(vec2(_937, _938), vec2(_937, _938));
    float _3940 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _947 = (_812 * (_930.z - _917)) + _917;
    float _956 = (_747 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_641.x * 2.0) + (-1.0)))) + (((_768.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _957 = (_748 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_641.y * 2.0) + (-1.0)))) + (((_768.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _969 = (((_937 - _956) + (cbMtdParam._m0[21u].x * _956)) * _812) + _956;
    float _970 = (((_938 - _957) + (cbMtdParam._m0[21u].x * _957)) * _812) + _957;
    float _971 = (_812 * (sqrt(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) - _754)) + _754;
    float _975 = cbMtdParam._m0[22u].x + _768.w;
    float _978 = fma(_971, _250 * NORMAL.x, fma(_970, _257 * TANGENT.x, (_243 * _235) * _969));
    float _981 = fma(_971, _250 * NORMAL.y, fma(_970, _257 * TANGENT.y, (_243 * _236) * _969));
    float _984 = fma(_971, _250 * NORMAL.z, fma(_970, _257 * TANGENT.z, (_243 * _237) * _969));
    float _988 = inversesqrt(dot(vec3(_978, _981, _984), vec3(_978, _981, _984)));
    float _989 = _988 * _978;
    float _990 = _988 * _981;
    float _991 = _988 * _984;
    float _3951 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _992 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _3973 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _3984 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _3995 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4006 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _997 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1011 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1061 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1051);
    float _1062 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1051);
    float _1063 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1051);
    float _1067 = inversesqrt(dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063)));
    float _1068 = _1061 * _1067;
    float _1069 = _1062 * _1067;
    float _1070 = _1063 * _1067;
    float _1076 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1077 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1095 = fma(_991, cbSceneParam._m0[5u].z, fma(_990, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _989));
    float _1098 = fma(_991, cbSceneParam._m0[6u].z, fma(_990, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _989));
    float _1101 = fma(_991, cbSceneParam._m0[7u].z, fma(_990, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _989));
    uint _1115 = (_284 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1121 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * cbInstanceData._m0[_1115].x;
    float _1122 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * cbInstanceData._m0[_1115].y;
    float _1123 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * cbInstanceData._m0[_1115].z;
    float _4017 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1124 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _4028 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1125 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1126 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _1127 = 1.0 - _997;
    float _1128 = _1124 * _1127;
    float _1129 = _1125 * _1127;
    float _1130 = _1126 * _1127;
    float _1135 = (_1124 + (-0.039999999105930328369140625)) * _997;
    float _1136 = (_1125 + (-0.039999999105930328369140625)) * _997;
    float _1137 = (_1126 + (-0.039999999105930328369140625)) * _997;
    float _1138 = _1135 + 0.039999999105930328369140625;
    float _1140 = _1136 + 0.039999999105930328369140625;
    float _1141 = _1137 + 0.039999999105930328369140625;
    vec4 _1150 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1076, cbSceneParam._m0[86u].y * _1077));
    float _1154 = ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * TEXCOORD_5.w) * _1150.x;
    float _1155 = dot(vec3(_989, _990, _991), vec3(_1068, _1069, _1070));
    float _1158 = _1155 * 2.0;
    float _1162 = (_1158 * _989) - _1068;
    float _1163 = (_1158 * _990) - _1069;
    float _1164 = (_1158 * _991) - _1070;
    float _1168 = abs(dot(vec3(_1068, _1069, _1070), vec3(_989, _990, _991)));
    float _4050 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _1170 = sqrt(_992);
    float _1183 = exp2((_1170 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1170 * 3.0));
    float _1189 = (1.0 - _1183) * ((_1170 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1190 = _1183 * _1170;
    float _1218 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1222 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1226 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1527;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1252 = fma(_1226, cbModelParam._m0[26u].z, fma(_1222, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1218));
        float _1256 = fma(_1226, cbModelParam._m0[27u].z, fma(_1222, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1218));
        float _1260 = fma(_1226, cbModelParam._m0[28u].z, fma(_1222, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1218));
        float _1285 = _1218 + _989;
        float _1286 = _1222 + _990;
        float _1287 = _1226 + _991;
        float _1297 = fma(_1287, cbModelParam._m0[26u].z, fma(_1286, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1285)) - _1252;
        float _1298 = fma(_1287, cbModelParam._m0[27u].z, fma(_1286, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1285)) - _1256;
        float _1299 = fma(_1287, cbModelParam._m0[28u].z, fma(_1286, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1285)) - _1260;
        float _1303 = inversesqrt(dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299)));
        float _1316 = ((_1303 * _1297) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1252 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1303 * _1298) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1256 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1303 * _1299) / cbModelParam._m0[34u].z) + ((((((_1260 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        float _1355 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1321.x + (-0.5));
        float _1357 = _1355 * (_1321.y + (-0.5));
        float _1358 = _1355 * (_1321.z + (-0.5));
        float _1365 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1328.x + (-0.5));
        float _1367 = _1365 * (_1328.y + (-0.5));
        float _1368 = _1365 * (_1328.z + (-0.5));
        float _1375 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1335.x + (-0.5));
        float _1377 = _1375 * (_1335.y + (-0.5));
        float _1378 = _1375 * (_1335.z + (-0.5));
        float _1385 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1342.x + (-0.5));
        float _1387 = _1385 * (_1342.y + (-0.5));
        float _1388 = _1385 * (_1342.z + (-0.5));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = _1356 * 0.5;
        float _1393 = _1366 * 0.5;
        float _1394 = _1376 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1409 = (dot(vec3(_989, _990, _991), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1419 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4098 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1421 + 1.0))) + _1426) * _1389;
        float _1436 = _1357 * 0.5;
        float _1437 = _1367 * 0.5;
        float _1438 = _1377 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_989, _990, _991), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4131 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1463 + 1.0))) + _1468) * _1390;
        float _1478 = _1358 * 0.5;
        float _1479 = _1368 * 0.5;
        float _1480 = _1378 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_989, _990, _991), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4164 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1505 + 1.0))) + _1510) * _1391;
        _1527 = _1358;
        _1529 = _1357;
        _1530 = _1356;
        _1531 = _1368;
        _1532 = _1367;
        _1533 = _1366;
        _1534 = _1378;
        _1535 = _1377;
        _1536 = _1376;
        _1537 = _1391;
        _1538 = _1390;
        _1539 = _1389;
        _1540 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
    }
    else
    {
        _1527 = _1528;
        _1529 = _1528;
        _1530 = _1528;
        _1531 = _1528;
        _1532 = _1528;
        _1533 = _1528;
        _1534 = _1528;
        _1535 = _1528;
        _1536 = _1528;
        _1537 = _1528;
        _1538 = _1528;
        _1539 = _1528;
        _1540 = 0.0;
        _1541 = 0.0;
        _1542 = 0.0;
    }
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1565 = fma(_1226, cbModelParam._m0[30u].z, fma(_1222, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1218));
        float _1569 = fma(_1226, cbModelParam._m0[31u].z, fma(_1222, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1218));
        float _1573 = fma(_1226, cbModelParam._m0[32u].z, fma(_1222, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1218));
        float _1596 = _1218 + _989;
        float _1597 = _1222 + _990;
        float _1598 = _1226 + _991;
        float _1608 = fma(_1598, cbModelParam._m0[30u].z, fma(_1597, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1596)) - _1565;
        float _1609 = fma(_1598, cbModelParam._m0[31u].z, fma(_1597, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1596)) - _1569;
        float _1610 = fma(_1598, cbModelParam._m0[32u].z, fma(_1597, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1596)) - _1573;
        float _1614 = inversesqrt(dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610)));
        float _1627 = ((_1614 * _1608) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1565 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1628 = ((_1614 * _1609) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1569 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1629 = ((_1614 * _1610) / cbModelParam._m0[35u].z) + ((((((_1573 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        float _1664 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1631.x + (-0.5));
        float _1666 = _1664 * (_1631.y + (-0.5));
        float _1667 = _1664 * (_1631.z + (-0.5));
        float _1674 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1638.x + (-0.5));
        float _1676 = _1674 * (_1638.y + (-0.5));
        float _1677 = _1674 * (_1638.z + (-0.5));
        float _1684 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1645.x + (-0.5));
        float _1686 = _1684 * (_1645.y + (-0.5));
        float _1687 = _1684 * (_1645.z + (-0.5));
        float _1694 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1652.x + (-0.5));
        float _1696 = _1694 * (_1652.y + (-0.5));
        float _1697 = _1694 * (_1652.z + (-0.5));
        float _1698 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1699 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1701 = _1665 * 0.5;
        float _1702 = _1675 * 0.5;
        float _1703 = _1685 * 0.5;
        float _1704 = dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703));
        float _1709 = (_1704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1704);
        float _1717 = (dot(vec3(_989, _990, _991), vec3(_1709 * _1701, _1709 * _1702, _1709 * _1703)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703)) / (_1698 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1728 = _1727 * 2.0;
        float _1732 = (1.0 - _1727) / (_1727 + 1.0);
        float _4227 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1742 = ((((1.0 - _1733) * (_1728 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1728 + 1.0))) + _1733) * _1698;
        float _1743 = _1666 * 0.5;
        float _1744 = _1676 * 0.5;
        float _1745 = _1686 * 0.5;
        float _1746 = dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745));
        float _1751 = (_1746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1746);
        float _1759 = (dot(vec3(_989, _990, _991), vec3(_1751 * _1743, _1751 * _1744, _1751 * _1745)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1768 = sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745)) / (_1699 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1770 = _1769 * 2.0;
        float _1774 = (1.0 - _1769) / (_1769 + 1.0);
        float _4260 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1784 = ((((1.0 - _1775) * (_1770 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1770 + 1.0))) + _1775) * _1699;
        float _1785 = _1667 * 0.5;
        float _1786 = _1677 * 0.5;
        float _1787 = _1687 * 0.5;
        float _1788 = dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787));
        float _1793 = (_1788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1788);
        float _1801 = (dot(vec3(_989, _990, _991), vec3(_1793 * _1785, _1793 * _1786, _1793 * _1787)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1810 = sqrt(((_1786 * _1786) + (_1785 * _1785)) + (_1787 * _1787)) / (_1700 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1812 = _1811 * 2.0;
        float _1816 = (1.0 - _1811) / (_1811 + 1.0);
        float _4293 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1826 = ((((1.0 - _1817) * (_1812 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1812 + 1.0))) + _1817) * _1700;
        _1834 = _1667;
        _1835 = _1666;
        _1836 = _1665;
        _1837 = _1677;
        _1838 = _1676;
        _1839 = _1675;
        _1840 = _1687;
        _1841 = _1686;
        _1842 = _1685;
        _1843 = _1700;
        _1844 = _1699;
        _1845 = _1698;
        _1846 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)));
        _1847 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)));
        _1848 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)));
    }
    else
    {
        _1834 = _1528;
        _1835 = _1528;
        _1836 = _1528;
        _1837 = _1528;
        _1838 = _1528;
        _1839 = _1528;
        _1840 = _1528;
        _1841 = _1528;
        _1842 = _1528;
        _1843 = _1528;
        _1844 = _1528;
        _1845 = _1528;
        _1846 = 0.0;
        _1847 = 0.0;
        _1848 = 0.0;
    }
    float _1858 = (cbModelParam._m0[1u].x * (_1846 - _1540)) + _1540;
    float _1859 = (cbModelParam._m0[1u].x * (_1847 - _1541)) + _1541;
    float _1860 = (cbModelParam._m0[1u].x * (_1848 - _1542)) + _1542;
    float _1881 = fma(_1860, cbSceneParam._m0[89u].z, fma(_1859, cbSceneParam._m0[89u].y, _1858 * cbSceneParam._m0[89u].x));
    float _1884 = fma(_1860, cbSceneParam._m0[90u].z, fma(_1859, cbSceneParam._m0[90u].y, _1858 * cbSceneParam._m0[90u].x));
    float _1887 = fma(_1860, cbSceneParam._m0[91u].z, fma(_1859, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1858));
    float _1902 = _1162 * 0.5;
    float _1903 = _1163 * 0.5;
    float _1904 = _1164 * 0.5;
    float _1905 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1836, _1839, _1842, _1845));
    float _1908 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1835, _1838, _1841, _1844));
    float _1911 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1834, _1837, _1840, _1843));
    float _1945;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1918 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1527, _1531, _1534, _1537));
        float _1922 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1529, _1532, _1535, _1538));
        float _1926 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1530, _1533, _1536, _1539));
        float _1933 = dot(vec4(cbModelParam._m0[39u]), vec4(_1902, _1903, _1904, 1.0));
        _1945 = dot(vec3(isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0)), isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1933) ? 0.0 : (isnan(0.0) ? _1933 : max(0.0, _1933))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1945 = 1.0;
    }
    float _1956;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1947 = dot(vec4(cbModelParam._m0[40u]), vec4(_1902, _1903, _1904, 1.0));
        _1956 = dot(vec3(isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1947) ? 0.0 : (isnan(0.0) ? _1947 : max(0.0, _1947))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1956 = 1.0;
    }
    float _1960 = (_1956 * cbModelParam._m0[1u].x) + (_1945 * (1.0 - cbModelParam._m0[1u].x));
    float _1970 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _992);
    float _1971 = isnan(_1970) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1970 : min(cbModelParam._m0[25u].z, _1970));
    float _2051;
    float _2053;
    float _2055;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2018 = fma(_1226, cbModelParam._m0[13u].z, fma(_1222, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1218)) + cbModelParam._m0[13u].w;
        float _2022 = fma(_1226, cbModelParam._m0[14u].z, fma(_1222, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1218)) + cbModelParam._m0[14u].w;
        float _2026 = fma(_1226, cbModelParam._m0[15u].z, fma(_1222, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1218)) + cbModelParam._m0[15u].w;
        float _2029 = fma(_1164, cbModelParam._m0[13u].z, fma(_1163, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1162));
        float _2032 = fma(_1164, cbModelParam._m0[14u].z, fma(_1163, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1162));
        float _2035 = fma(_1164, cbModelParam._m0[15u].z, fma(_1163, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1162));
        float _2063;
        if (_2029 > 0.0)
        {
            _2063 = abs((1.0 - _2018) / _2029);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2018 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2063 = frontier_phi_14_12_ladder;
        }
        float _2266;
        if (_2032 > 0.0)
        {
            _2266 = abs((1.0 - _2022) / _2032);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2022 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2266 = frontier_phi_23_19_ladder;
        }
        float _2520;
        if (_2035 > 0.0)
        {
            _2520 = abs((1.0 - _2026) / _2035);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2026 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2520 = frontier_phi_35_30_ladder;
        }
        float _2522 = isnan(_2266) ? _2063 : (isnan(_2063) ? _2266 : min(_2063, _2266));
        float _2523 = isnan(_2520) ? _2522 : (isnan(_2522) ? _2520 : min(_2522, _2520));
        float _2527 = (_2523 * _2029) + _2018;
        float _2528 = (_2523 * _2032) + _2022;
        float _2529 = (_2523 * _2035) + _2026;
        float _2530 = _2523 * 9.9999997473787516355514526367188e-05;
        float _2532 = (-1.0) - _2530;
        float _2534 = _2530 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2529 > _2534) || ((_2529 < _2532) || ((_2528 > _2534) || ((_2528 < _2532) || ((_2527 < _2532) || (_2527 > _2534))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2657 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2529, cbModelParam._m0[9u].z, fma(_2528, cbModelParam._m0[9u].y, _2527 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2529, cbModelParam._m0[10u].z, fma(_2528, cbModelParam._m0[10u].y, _2527 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2529, cbModelParam._m0[11u].z, fma(_2528, cbModelParam._m0[11u].y, _2527 * cbModelParam._m0[11u].x))), _1971);
            frontier_phi_13_35_ladder = _2657.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2657.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2657.x * cbModelParam._m0[1u].y;
        }
        _2051 = frontier_phi_13_35_ladder_2;
        _2053 = frontier_phi_13_35_ladder_1;
        _2055 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2039 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1162, _1163, _1164), _1971);
        _2051 = _2039.x * cbModelParam._m0[1u].y;
        _2053 = _2039.y * cbModelParam._m0[1u].y;
        _2055 = _2039.z * cbModelParam._m0[1u].y;
    }
    float _2059 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _992);
    float _2060 = isnan(_2059) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2059 : min(cbModelParam._m0[25u].w, _2059));
    float _2150;
    float _2152;
    float _2154;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2114 = fma(_1226, cbModelParam._m0[21u].z, fma(_1222, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1218)) + cbModelParam._m0[21u].w;
        float _2118 = fma(_1226, cbModelParam._m0[22u].z, fma(_1222, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1218)) + cbModelParam._m0[22u].w;
        float _2122 = fma(_1226, cbModelParam._m0[23u].z, fma(_1222, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1218)) + cbModelParam._m0[23u].w;
        float _2125 = fma(_1164, cbModelParam._m0[21u].z, fma(_1163, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1162));
        float _2128 = fma(_1164, cbModelParam._m0[22u].z, fma(_1163, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1162));
        float _2131 = fma(_1164, cbModelParam._m0[23u].z, fma(_1163, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1162));
        float _2271;
        if (_2125 > 0.0)
        {
            _2271 = abs((1.0 - _2114) / _2125);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2125 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2114 + 1.0) / _2125);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2271 = frontier_phi_25_21_ladder;
        }
        float _2547;
        if (_2128 > 0.0)
        {
            _2547 = abs((1.0 - _2118) / _2128);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2118 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2547 = frontier_phi_37_32_ladder;
        }
        float _2760;
        if (_2131 > 0.0)
        {
            _2760 = abs((1.0 - _2122) / _2131);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2122 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2760 = frontier_phi_46_43_ladder;
        }
        float _2762 = isnan(_2547) ? _2271 : (isnan(_2271) ? _2547 : min(_2271, _2547));
        float _2763 = isnan(_2760) ? _2762 : (isnan(_2762) ? _2760 : min(_2762, _2760));
        float _2767 = (_2763 * _2125) + _2114;
        float _2768 = (_2763 * _2128) + _2118;
        float _2769 = (_2763 * _2131) + _2122;
        float _2770 = _2763 * 9.9999997473787516355514526367188e-05;
        float _2771 = (-1.0) - _2770;
        float _2773 = _2770 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2769 > _2773) || ((_2769 < _2771) || ((_2768 > _2773) || ((_2768 < _2771) || ((_2767 < _2771) || (_2767 > _2773))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2769, cbModelParam._m0[17u].z, fma(_2768, cbModelParam._m0[17u].y, _2767 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2769, cbModelParam._m0[18u].z, fma(_2768, cbModelParam._m0[18u].y, _2767 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2769, cbModelParam._m0[19u].z, fma(_2768, cbModelParam._m0[19u].y, _2767 * cbModelParam._m0[19u].x))), _2060);
            frontier_phi_22_46_ladder = _2968.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2968.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2968.x * cbModelParam._m0[1u].z;
        }
        _2150 = frontier_phi_22_46_ladder_2;
        _2152 = frontier_phi_22_46_ladder_1;
        _2154 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2134 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1162, _1163, _1164), _2060);
        _2150 = _2134.x * cbModelParam._m0[1u].z;
        _2152 = _2134.y * cbModelParam._m0[1u].z;
        _2154 = _2134.z * cbModelParam._m0[1u].z;
    }
    float _2167 = (((_1189 * _1138) + _1190) * _1154) * ((cbModelParam._m0[1u].w * (_2150 - _2051)) + _2051);
    float _2169 = (((_1189 * _1140) + _1190) * _1154) * ((cbModelParam._m0[1u].w * (_2152 - _2053)) + _2053);
    float _2171 = (((_1189 * _1141) + _1190) * _1154) * ((cbModelParam._m0[1u].w * (_2154 - _2055)) + _2055);
    float _2174 = fma(_2171, cbSceneParam._m0[89u].z, fma(_2169, cbSceneParam._m0[89u].y, _2167 * cbSceneParam._m0[89u].x));
    float _2177 = fma(_2171, cbSceneParam._m0[90u].z, fma(_2169, cbSceneParam._m0[90u].y, _2167 * cbSceneParam._m0[90u].x));
    float _2180 = fma(_2171, cbSceneParam._m0[91u].z, fma(_2169, cbSceneParam._m0[91u].y, _2167 * cbSceneParam._m0[91u].x));
    uvec4 _2190 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2192 = _2190.x * 14u;
    uint _2193 = _2192 + 13u;
    float _2200 = _1154 + (-1.0);
    float _2205 = (cbLight._m0[_2193].x * _2200) + 1.0;
    float _2206 = (cbLight._m0[_2193].y * _2200) + 1.0;
    float _2207 = (cbLight._m0[_2193].z * _2200) + 1.0;
    float _2208 = (cbLight._m0[_2193].w * _2200) + 1.0;
    uint _2209 = _2192 + 5u;
    float _2215 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
    uint _2219 = _2192 + 4u;
    float _2225 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2229 = _2192 | 1u;
    float _2240 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_989, _990, _991));
    float _2243 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_989, _990, _991));
    float _4429 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _4440 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2248 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * 0.3183098733425140380859375;
    float _2250 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * 0.3183098733425140380859375;
    float _2257 = ((cbLight._m0[_2209].x * _2215) * _2250) + ((cbLight._m0[_2219].x * _2225) * _2248);
    float _2258 = ((_2215 * cbLight._m0[_2209].y) * _2250) + ((_2225 * cbLight._m0[_2219].y) * _2248);
    float _2259 = ((_2215 * cbLight._m0[_2209].z) * _2250) + ((_2225 * cbLight._m0[_2219].z) * _2248);
    uvec4 _2263 = floatBitsToUint(cbLight._m0[_2192 + 12u]);
    bool _2265 = _2263.x == 0u;
    float _2276;
    float _2278;
    float _2280;
    if (_2265)
    {
        _2276 = _2257;
        _2278 = _2258;
        _2280 = _2259;
    }
    else
    {
        uint _2284 = _2192 + 6u;
        float _2300 = (dot(vec3(cbLight._m0[_2192 + 2u].xyz), vec3(_989, _990, _991)) * 0.5) + 0.5;
        float _2301 = _2300 * _2300;
        float _4451 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2302 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2303 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2276 = (((cbLight._m0[_2284].x * 0.3183098733425140380859375) * _2302) * _2303) + _2257;
        _2278 = (((cbLight._m0[_2284].y * 0.3183098733425140380859375) * _2302) * _2303) + _2258;
        _2280 = (((cbLight._m0[_2284].z * 0.3183098733425140380859375) * _2302) * _2303) + _2259;
    }
    bool _2283 = _2263.y == 0u;
    float _2321;
    float _2323;
    float _2325;
    if (_2283)
    {
        _2321 = _2276;
        _2323 = _2278;
        _2325 = _2280;
    }
    else
    {
        uint _2491 = _2192 + 7u;
        float _2507 = (dot(vec3(cbLight._m0[_2192 + 3u].xyz), vec3(_989, _990, _991)) * 0.5) + 0.5;
        float _2508 = _2507 * _2507;
        float _4467 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2509 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2510 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2321 = (((cbLight._m0[_2491].x * 0.3183098733425140380859375) * _2509) * _2510) + _2276;
        _2323 = (((cbLight._m0[_2491].y * 0.3183098733425140380859375) * _2509) * _2510) + _2278;
        _2325 = (((cbLight._m0[_2491].z * 0.3183098733425140380859375) * _2509) * _2510) + _2280;
    }
    uint _2328 = _2192 + 8u;
    float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _992) * 0.949999988079071044921875);
    float _2342 = _2341 * _2341;
    float _2343 = cbLight._m0[_2192].x + _1068;
    float _2344 = cbLight._m0[_2192].y + _1069;
    float _2345 = cbLight._m0[_2192].z + _1070;
    float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
    float _2350 = _2349 * _2343;
    float _2351 = _2349 * _2344;
    float _2352 = _2349 * _2345;
    float _2353 = dot(vec3(_989, _990, _991), vec3(cbLight._m0[_2192].xyz));
    float _4483 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _4494 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _2357 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2358 = dot(vec3(_989, _990, _991), vec3(_2350, _2351, _2352));
    float _4505 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2362 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2350, _2351, _2352));
    float _4516 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = _2342 * _2342;
    float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
    float _2378 = exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0);
    float _2379 = 0.959999978542327880859375 - _1135;
    float _2381 = 0.959999978542327880859375 - _1136;
    float _2382 = 0.959999978542327880859375 - _1137;
    float _2389 = 1.0 - _2342;
    float _2400 = (0.5 / (((_2357 * ((_2356 * _2389) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2389) + _2342) * _2356))) * _2356;
    float _4527 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
    uint _2413 = _2192 + 9u;
    float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _992) * 0.949999988079071044921875);
    float _2425 = _2424 * _2424;
    float _2426 = cbLight._m0[_2229].x + _1068;
    float _2427 = cbLight._m0[_2229].y + _1069;
    float _2428 = cbLight._m0[_2229].z + _1070;
    float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
    float _2433 = _2432 * _2426;
    float _2434 = _2432 * _2427;
    float _2435 = _2432 * _2428;
    float _2436 = dot(vec3(_989, _990, _991), vec3(cbLight._m0[_2229].xyz));
    float _4538 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2440 = dot(vec3(_989, _990, _991), vec3(_2433, _2434, _2435));
    float _4549 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2444 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2433, _2434, _2435));
    float _4560 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2448 = _2425 * _2425;
    float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
    float _2459 = exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0);
    float _2466 = 1.0 - _2425;
    float _2476 = (0.5 / (((_2357 * ((_2439 * _2466) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2466) + _2425) * _2439))) * _2439;
    float _4571 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2478 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
    float _2488 = (((((_2459 * _2379) + _1138) * cbLight._m0[_2413].x) * _2478) * _2215) + (((((_2378 * _2379) + _1138) * cbLight._m0[_2328].x) * _2402) * _2225);
    float _2489 = (((((_2459 * _2381) + _1140) * cbLight._m0[_2413].y) * _2478) * _2215) + (((((_2378 * _2381) + _1140) * cbLight._m0[_2328].y) * _2402) * _2225);
    float _2490 = (((((_2459 * _2382) + _1141) * cbLight._m0[_2413].z) * _2478) * _2215) + (((((_2378 * _2382) + _1141) * cbLight._m0[_2328].z) * _2402) * _2225);
    float _2552;
    float _2554;
    float _2556;
    if (_2265)
    {
        _2552 = _2488;
        _2554 = _2489;
        _2556 = _2490;
    }
    else
    {
        uint _2558 = _2192 + 2u;
        uint _2562 = _2192 + 10u;
        float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2558].w)) * _992) * 0.949999988079071044921875);
        float _2577 = _2576 * _2576;
        float _2578 = cbLight._m0[_2558].x + _1068;
        float _2579 = cbLight._m0[_2558].y + _1069;
        float _2580 = cbLight._m0[_2558].z + _1070;
        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
        float _2585 = _2584 * _2578;
        float _2586 = _2584 * _2579;
        float _2587 = _2584 * _2580;
        float _2588 = dot(vec3(_989, _990, _991), vec3(cbLight._m0[_2558].xyz));
        float _4582 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2592 = dot(vec3(_989, _990, _991), vec3(_2585, _2586, _2587));
        float _4593 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2596 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_2585, _2586, _2587));
        float _4604 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2600 = _2577 * _2577;
        float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
        float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0);
        float _2618 = 1.0 - _2577;
        float _2628 = (0.5 / (((_2357 * ((_2591 * _2618) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2618) + _2577) * _2591))) * _2591;
        float _4615 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2552 = (((((_2611 * _2379) + _1138) * cbLight._m0[_2562].x) * _2630) * _2631) + _2488;
        _2554 = (((((_2611 * _2381) + _1140) * cbLight._m0[_2562].y) * _2630) * _2631) + _2489;
        _2556 = (((((_2611 * _2382) + _1141) * cbLight._m0[_2562].z) * _2630) * _2631) + _2490;
    }
    float _2666;
    float _2668;
    float _2670;
    if (_2283)
    {
        _2666 = _2552;
        _2668 = _2554;
        _2670 = _2556;
    }
    else
    {
        uint _2677 = _2192 + 3u;
        uint _2681 = _2192 + 11u;
        float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2677].w)) * _992) * 0.949999988079071044921875);
        float _2696 = _2695 * _2695;
        float _2697 = cbLight._m0[_2677].x + _1068;
        float _2698 = cbLight._m0[_2677].y + _1069;
        float _2699 = cbLight._m0[_2677].z + _1070;
        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
        float _2704 = _2703 * _2697;
        float _2705 = _2703 * _2698;
        float _2706 = _2703 * _2699;
        float _2707 = dot(vec3(_989, _990, _991), vec3(cbLight._m0[_2677].xyz));
        float _4631 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2711 = dot(vec3(_989, _990, _991), vec3(_2704, _2705, _2706));
        float _4642 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2715 = dot(vec3(cbLight._m0[_2677].xyz), vec3(_2704, _2705, _2706));
        float _4653 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2719 = _2696 * _2696;
        float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
        float _2730 = exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0);
        float _2737 = 1.0 - _2696;
        float _2747 = (0.5 / (((_2357 * ((_2710 * _2737) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2737) + _2696) * _2710))) * _2710;
        float _4664 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2749 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
        float _2750 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2666 = (((((_2730 * _2379) + _1138) * cbLight._m0[_2681].x) * _2749) * _2750) + _2552;
        _2668 = (((((_2730 * _2381) + _1140) * cbLight._m0[_2681].y) * _2749) * _2750) + _2554;
        _2670 = (((((_2730 * _2382) + _1141) * cbLight._m0[_2681].z) * _2749) * _2750) + _2556;
    }
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    if (_2190.y == 0u)
    {
        float _2825 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2826 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2825;
        float _2827 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2825;
        float _2828 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2825;
        uvec4 _2840 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2841 = _2840.x;
        uint _2852 = uint((float(_2840.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1077) / _2841))) + floor(float(uint(cbSceneParam._m0[85u].x * _1076) / _2841)));
        float _2862 = (log2(_2828 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2863 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        uint _2866 = uint(isnan(14.0) ? _2863 : (isnan(_2863) ? 14.0 : min(_2863, 14.0)));
        uvec4 _2871 = texelFetch(g_lightClusterGridBuffer, int(((_2866 << 2u) + (_2852 << 6u)) >> 2u));
        uint _2872 = _2871.x;
        uint _2873 = _2840.z;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        if (((((1u << ((_2873 >> 4u) & 15u)) + 4294967295u) & _2872) == 0u) || ((_2873 & 240u) == 0u))
        {
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
        }
        else
        {
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            uint _3124 = 0u;
            uint _3133;
            bool _3134;
            for (;;)
            {
                _3133 = texelFetch(g_lightClassification, int((((_2866 << 5u) + (_2852 << 9u)) + (_3124 << 2u)) >> 2u)).x;
                _3134 = _3133 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3134)
                {
                    frontier_phi_61_pred = _3118;
                    frontier_phi_61_pred_1 = _3123;
                    frontier_phi_61_pred_2 = _3122;
                    frontier_phi_61_pred_3 = _3121;
                    frontier_phi_61_pred_4 = _3120;
                    frontier_phi_61_pred_5 = _3119;
                }
                else
                {
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    uint _3248;
                    _3242 = _3118;
                    _3243 = _3119;
                    _3244 = _3120;
                    _3245 = _3121;
                    _3246 = _3122;
                    _3247 = _3123;
                    _3248 = _3133;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    for (;;)
                    {
                        uint _3252 = uint(findLSB(_3248)) + (_3124 << 5u);
                        uint _3249 = (_3248 + 4294967295u) & _3248;
                        uint _3254 = _3252 * 48u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 3u)).x));
                        uint _3274 = (_3252 * 48u) + 4u;
                        vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3293 = (_3252 * 48u) + 8u;
                        vec3 _3304 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x));
                        float _3308 = _3268.x - _2826;
                        float _3309 = _3268.y - _2827;
                        float _3310 = _3268.z - _2828;
                        float _3311 = dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310));
                        float _3314 = inversesqrt(_3311);
                        float _3315 = _3314 * _3308;
                        float _3316 = _3314 * _3309;
                        float _3317 = _3314 * _3310;
                        float _3318 = dot(vec3(_1095, _1098, _1101), vec3(_3315, _3316, _3317));
                        float _3323 = 1.0 - (_3311 * _3268.w);
                        float _4690 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3325 = sqrt(_3311) * _3287.w;
                        float _3328 = 1.39999997615814208984375 / (_3325 + 1.39999997615814208984375);
                        float _3329 = _3328 * _3328;
                        float _3332 = ((1.0 - _3329) * _3318) + _3329;
                        float _3335 = _3325 * _3325;
                        float _3339 = ((isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0))) * _3324) / ((_3335 * 0.699999988079071044921875) + 1.0);
                        float _3343 = (-0.0) - _2826;
                        float _3344 = (-0.0) - _2827;
                        float _3345 = (-0.0) - _2828;
                        float _3349 = inversesqrt(dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345)));
                        float _3350 = _3349 * _3343;
                        float _3351 = _3349 * _3344;
                        float _3352 = _3349 * _3345;
                        float _3360 = exp2(log2(1.0 / ((_3335 * 3.5) + 5.0)) * 0.25);
                        float _3361 = 1.0 - _1170;
                        float _3368 = sqrt(1.0 - ((1.0 - (_3361 * _3361)) * (1.0 - (_3360 * _3360))));
                        float _3369 = _3368 * _3368;
                        float _3370 = _3369 * _3369;
                        float _3371 = _3350 + _3315;
                        float _3372 = _3351 + _3316;
                        float _3373 = _3352 + _3317;
                        float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                        float _3381 = dot(vec3(_1095, _1098, _1101), vec3(_3350, _3351, _3352));
                        float _4706 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3384 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                        float _3385 = dot(vec3(_1095, _1098, _1101), vec3(_3377 * _3371, _3377 * _3372, _3377 * _3373));
                        float _4717 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3388 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3392 = ((_3388 * _3388) * (_3370 + (-1.0))) + 1.0;
                        float _3393 = _3328 * _3369;
                        float _3394 = _3393 * _3393;
                        float _3397 = ((1.0 - _3394) * _3318) + _3394;
                        float _4728 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3398 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3399 = 1.0 - _3369;
                        float _3409 = (0.5 / (((_3398 * ((_3384 * _3399) + _3369)) + 9.9999999392252902907785028219223e-09) + (((_3398 * _3399) + _3369) * _3384))) * _3398;
                        float _4739 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3420 = (((_3370 * 3.1415927410125732421875) * (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) / ((_3392 * _3392) * ((_3335 * 2.1991131305694580078125) + 3.141590118408203125))) * _3324;
                        _3177 = (_3339 * _3287.x) + _3245;
                        _3178 = (_3339 * _3287.y) + _3246;
                        _3179 = (_3339 * _3287.z) + _3247;
                        _3174 = (_3420 * _3304.x) + _3242;
                        _3175 = (_3420 * _3304.y) + _3243;
                        _3176 = (_3420 * _3304.z) + _3244;
                        if (_3249 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3242 = _3174;
                            _3243 = _3175;
                            _3244 = _3176;
                            _3245 = _3177;
                            _3246 = _3178;
                            _3247 = _3179;
                            _3248 = _3249;
                        }
                    }
                    frontier_phi_61_pred = _3174;
                    frontier_phi_61_pred_1 = _3179;
                    frontier_phi_61_pred_2 = _3178;
                    frontier_phi_61_pred_3 = _3177;
                    frontier_phi_61_pred_4 = _3176;
                    frontier_phi_61_pred_5 = _3175;
                }
                _2974 = frontier_phi_61_pred;
                _2984 = frontier_phi_61_pred_1;
                _2982 = frontier_phi_61_pred_2;
                _2980 = frontier_phi_61_pred_3;
                _2978 = frontier_phi_61_pred_4;
                _2976 = frontier_phi_61_pred_5;
                uint _3125 = _3124 + 1u;
                if (_3125 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3118 = _2974;
                    _3119 = _2976;
                    _3120 = _2978;
                    _3121 = _2980;
                    _3122 = _2982;
                    _3123 = _2984;
                    _3124 = _3125;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
        }
        uvec4 _2987 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2988 = _2987.z;
        uint _2990 = (_2988 >> 8u) & 15u;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        if (((4294967295u << _2990) & _2872) == 0u)
        {
            _3086 = _2973;
            _3088 = _2975;
            _3090 = _2977;
            _3092 = _2979;
            _3094 = _2981;
            _3096 = _2983;
        }
        else
        {
            float _3111 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
            float _3112 = _3111 * _2826;
            float _3113 = _3111 * _2827;
            float _3114 = _3111 * _2828;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2990 < ((_2988 >> 12u) & 15u))
            {
                float _3087;
                float _3089;
                float _3091;
                float _3093;
                float _3095;
                float _3097;
                float _3225 = _2973;
                float _3226 = _2975;
                float _3227 = _2977;
                float _3228 = _2979;
                float _3229 = _2981;
                float _3230 = _2983;
                uint _3231 = _2990;
                uint _3240;
                bool _3241;
                for (;;)
                {
                    _3240 = texelFetch(g_lightClassification, int((((_2866 << 5u) + (_2852 << 9u)) + (_3231 << 2u)) >> 2u)).x;
                    _3241 = _3240 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3241)
                    {
                        frontier_phi_67_pred = _3228;
                        frontier_phi_67_pred_1 = _3229;
                        frontier_phi_67_pred_2 = _3230;
                        frontier_phi_67_pred_3 = _3227;
                        frontier_phi_67_pred_4 = _3226;
                        frontier_phi_67_pred_5 = _3225;
                    }
                    else
                    {
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3438 = _3225;
                        float _3439 = _3226;
                        float _3440 = _3227;
                        float _3441 = _3228;
                        float _3442 = _3229;
                        float _3443 = _3230;
                        uint _3444 = _3240;
                        uint _3445;
                        vec4 _3470;
                        float _3471;
                        vec4 _3486;
                        vec3 _3498;
                        vec4 _3513;
                        vec4 _3528;
                        float _3574;
                        bool _3575;
                        for (;;)
                        {
                            uint _3455 = ((_3231 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3444));
                            _3445 = (_3444 + 4294967295u) & _3444;
                            uint _3457 = _3455 * 40u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            _3471 = _3470.w;
                            uint _3473 = (_3455 * 40u) + 4u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3488 = (_3455 * 40u) + 8u;
                            _3498 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x));
                            uint _3500 = (_3455 * 40u) + 16u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3455 * 40u) + 20u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3455 * 40u) + 24u;
                            vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3549 = (_3455 * 40u) + 28u;
                            vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            _3574 = fma(_2828, _3562.z, fma(_2827, _3562.y, _3562.x * _2826)) + _3562.w;
                            _3575 = !((fma(_2828, _3543.z, fma(_2827, _3543.y, _3543.x * _2826)) + _3543.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3575)
                            {
                                float _3602 = _3470.x - _2826;
                                float _3603 = _3470.y - _2827;
                                float _3604 = _3470.z - _2828;
                                float _3605 = dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604));
                                float _3608 = inversesqrt(_3605);
                                float _3609 = _3608 * _3602;
                                float _3610 = _3608 * _3603;
                                float _3611 = _3608 * _3604;
                                float _3615 = 1.0 - (_3605 / (_3471 * _3471));
                                float _4750 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3620 = sqrt(_3605) * _3486.w;
                                float _3622 = 1.39999997615814208984375 / (_3620 + 1.39999997615814208984375);
                                float _3623 = _3622 * _3622;
                                float _3626 = ((1.0 - _3623) * dot(vec3(_3609, _3610, _3611), vec3(_1095, _1098, _1101))) + _3623;
                                float _3629 = _3620 * _3620;
                                float _3633 = (fma(_2828, _3513.z, fma(_2827, _3513.y, _3513.x * _2826)) + _3513.w) / _3574;
                                float _3634 = (fma(_2828, _3528.z, fma(_2827, _3528.y, _3528.x * _2826)) + _3528.w) / _3574;
                                float _3638 = 1.0 - dot(vec2(_3633, _3634), vec2(_3633, _3634));
                                float _4766 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                                float _3640 = _3639 * (((isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0))) * _3616) / ((_3629 * 0.699999988079071044921875) + 1.0));
                                float _3652 = exp2(log2(1.0 / ((_3629 * 3.5) + 5.0)) * 0.25);
                                float _3653 = 1.0 - _1170;
                                float _3660 = sqrt(1.0 - ((1.0 - (_3653 * _3653)) * (1.0 - (_3652 * _3652))));
                                float _3661 = _3660 * _3660;
                                float _3662 = _3661 * _3661;
                                float _3663 = _3609 - _3112;
                                float _3664 = _3610 - _3113;
                                float _3665 = _3611 - _3114;
                                float _3669 = inversesqrt(dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665)));
                                float _3673 = dot(vec3(_1095, _1098, _1101), vec3((-0.0) - _3112, (-0.0) - _3113, (-0.0) - _3114));
                                float _4777 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3676 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3677 = dot(vec3(_1095, _1098, _1101), vec3(_3669 * _3663, _3669 * _3664, _3669 * _3665));
                                float _4788 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3680 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3684 = ((_3680 * _3680) * (_3662 + (-1.0))) + 1.0;
                                float _3685 = _3622 * _3661;
                                float _3686 = _3685 * _3685;
                                float _3692 = ((1.0 - _3686) * dot(vec3(_1095, _1098, _1101), vec3(_3609, _3610, _3611))) + _3686;
                                float _4799 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3694 = 1.0 - _3661;
                                float _3704 = (0.5 / (((_3693 * ((_3676 * _3694) + _3661)) + 9.9999999392252902907785028219223e-09) + (((_3693 * _3694) + _3661) * _3676))) * _3693;
                                float _4810 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3714 = (_3639 * _3616) * (((_3662 * 3.1415927410125732421875) * (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) / ((_3684 * _3684) * ((_3629 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3714 * _3498.x;
                                frontier_phi_73_pred_1 = _3714 * _3498.y;
                                frontier_phi_73_pred_2 = _3640 * _3486.z;
                                frontier_phi_73_pred_3 = _3640 * _3486.y;
                                frontier_phi_73_pred_4 = _3640 * _3486.x;
                                frontier_phi_73_pred_5 = _3714 * _3498.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3718 = frontier_phi_73_pred;
                            _3719 = frontier_phi_73_pred_1;
                            _3723 = frontier_phi_73_pred_2;
                            _3722 = frontier_phi_73_pred_3;
                            _3721 = frontier_phi_73_pred_4;
                            _3720 = frontier_phi_73_pred_5;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            _3430 = _3723 + _3443;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            _3427 = _3720 + _3440;
                            if (_3445 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3430;
                                _3444 = _3445;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3428;
                        frontier_phi_67_pred_1 = _3429;
                        frontier_phi_67_pred_2 = _3430;
                        frontier_phi_67_pred_3 = _3427;
                        frontier_phi_67_pred_4 = _3426;
                        frontier_phi_67_pred_5 = _3425;
                    }
                    _3093 = frontier_phi_67_pred;
                    _3095 = frontier_phi_67_pred_1;
                    _3097 = frontier_phi_67_pred_2;
                    _3091 = frontier_phi_67_pred_3;
                    _3089 = frontier_phi_67_pred_4;
                    _3087 = frontier_phi_67_pred_5;
                    uint _3232 = _3231 + 1u;
                    if (_3232 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3225 = _3087;
                        _3226 = _3089;
                        _3227 = _3091;
                        _3228 = _3093;
                        _3229 = _3095;
                        _3230 = _3097;
                        _3231 = _3232;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3095;
                frontier_phi_55_56_ladder_1 = _3097;
                frontier_phi_55_56_ladder_2 = _3093;
                frontier_phi_55_56_ladder_3 = _3091;
                frontier_phi_55_56_ladder_4 = _3089;
                frontier_phi_55_56_ladder_5 = _3087;
            }
            else
            {
                frontier_phi_55_56_ladder = _2981;
                frontier_phi_55_56_ladder_1 = _2983;
                frontier_phi_55_56_ladder_2 = _2979;
                frontier_phi_55_56_ladder_3 = _2977;
                frontier_phi_55_56_ladder_4 = _2975;
                frontier_phi_55_56_ladder_5 = _2973;
            }
            _3086 = frontier_phi_55_56_ladder_5;
            _3088 = frontier_phi_55_56_ladder_4;
            _3090 = frontier_phi_55_56_ladder_3;
            _3092 = frontier_phi_55_56_ladder_2;
            _3094 = frontier_phi_55_56_ladder;
            _3096 = frontier_phi_55_56_ladder_1;
        }
        float _3101 = isnan(1.0) ? _1154 : (isnan(_1154) ? 1.0 : min(_1154, 1.0));
        _2885 = (_3101 * _3092) + _2321;
        _2887 = (_3101 * _3094) + _2323;
        _2889 = (_3101 * _3096) + _2325;
        _2891 = ((_3086 * _1138) * _3101) + _2666;
        _2893 = ((_3088 * _1140) * _3101) + _2668;
        _2895 = ((_3090 * _1141) * _3101) + _2670;
    }
    else
    {
        _2885 = _2321;
        _2887 = _2323;
        _2889 = _2325;
        _2891 = _2666;
        _2893 = _2668;
        _2895 = _2670;
    }
    float _4826 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _4837 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _4848 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    uint _2915 = _284 + 6u;
    float _2923 = _1076 / cbSceneParam._m0[86u].x;
    float _2924 = _1077 / cbSceneParam._m0[86u].y;
    vec4 _2938 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2923, _2924, (log2((isnan(cbSceneParam._m0[77u].w) ? _1011 : (isnan(_1011) ? cbSceneParam._m0[77u].w : min(_1011, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2940 = _2938.x;
    float _2941 = _2938.y;
    float _2942 = _2938.z;
    float _2943 = _2938.w;
    float _3036;
    float _3038;
    float _3040;
    float _3042;
    if (_1011 > cbSceneParam._m0[78u].w)
    {
        float _2998 = isnan(_1011) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1011 : min(cbSceneParam._m0[80u].w, _1011));
        float _2999 = _2998 / _1011;
        float _3010 = _2999 * _1061;
        float _3011 = _1062 * _2999;
        float _3012 = (-0.0) - _3011;
        float _3014 = _2999 * _1063;
        float _3016 = (cbSceneParam._m0[77u].w * _3012) / _2998;
        float _3017 = _3016 + cbSceneParam._m0[79u].w;
        float _3018 = cbSceneParam._m0[79u].w - _3011;
        float _3024 = sqrt(((_3010 * _3010) + (_3011 * _3011)) + (_3014 * _3014));
        float _3027 = (1.0 - (cbSceneParam._m0[77u].w / _2998)) * _3024;
        float _3032 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3034 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3187;
        if (abs((_3012 - _3016) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3187 = ((((_3017 > 0.0) ? exp2(_3032 * _3017) : (2.0 - exp2(_3034 * _3017))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3027;
        }
        else
        {
            float _3147 = 1.0 / cbSceneParam._m0[80u].x;
            float _3148 = isnan(_3018) ? _3017 : (isnan(_3017) ? _3018 : max(_3017, _3018));
            float _3149 = isnan(_3018) ? _3017 : (isnan(_3017) ? _3018 : min(_3017, _3018));
            float _3158 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : min(_3148, 0.0));
            float _3159 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : min(_3149, 0.0));
            _3187 = ((abs(_3024 / _3012) * cbSceneParam._m0[80u].y) * ((((_3158 - _3159) * 2.0) - ((exp2(_3032 * (isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0)))) - exp2(_3032 * (isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))))) * _3147)) - ((exp2(_3034 * _3158) - exp2(_3034 * _3159)) * _3147))) + (_3027 * cbSceneParam._m0[80u].z);
        }
        vec4 _3189 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2923, _2924, 1.0), 0.0);
        float _3198 = exp2((_3187 * (-1.44269502162933349609375)) * (1.0 - _3189.w));
        float _3199 = log2(_3198);
        float _3215 = log2(_2943);
        _3036 = (exp2(_3215 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3199 * cbSceneParam._m0[78u].x)) * _3189.x) / cbSceneParam._m0[78u].x)) + _2940;
        _3038 = (exp2(_3215 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3199 * cbSceneParam._m0[78u].y)) * _3189.y) / cbSceneParam._m0[78u].y)) + _2941;
        _3040 = (exp2(_3215 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3199 * cbSceneParam._m0[78u].z)) * _3189.z) / cbSceneParam._m0[78u].z)) + _2942;
        _3042 = _3198 * _2943;
    }
    else
    {
        _3036 = _2940;
        _3038 = _2941;
        _3040 = _2942;
        _3042 = _2943;
    }
    float _3054 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3055 = _3054 == 3.0;
    float _3056 = log2(_3042);
    float _3063 = exp2(_3056 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2885 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1154))) + ((_2891 + ((isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0))) * _1960)) * cbPerFrame._m0[3u].x));
    float _3064 = exp2(_3056 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2887 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1154))) + ((_2893 + ((isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0))) * _1960)) * cbPerFrame._m0[3u].x));
    float _3065 = exp2(_3056 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2889 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1154))) + ((_2895 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1960)) * cbPerFrame._m0[3u].x));
    float _3074 = (_3054 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3074 * (_3055 ? _3063 : (_3063 + (cbSceneParam._m0[72u].w * _3036)));
    SV_Target.y = _3074 * (_3055 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3038)));
    SV_Target.z = _3074 * (_3055 ? _3065 : (_3065 + (cbSceneParam._m0[72u].w * _3040)));
    SV_Target.w = cbInstanceData._m0[_2915].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2915].w;
}


