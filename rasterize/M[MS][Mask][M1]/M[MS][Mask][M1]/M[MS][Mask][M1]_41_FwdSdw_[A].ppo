#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1274;
float _3937;
float _3938;
float _3939;
float _3940;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _379 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _396 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_367 - _379) * cbMtdParam._m0[23u].w) + _379) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3949 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _404 = (_397 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _405 = (_397 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _406 = (_397 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _425 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _462 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _464 = _462.x;
    float _465 = _462.y;
    float _466 = _462.z;
    float _475 = ((_445.z - _466) * _397) + _466;
    float _478 = ((((_445.x - _464) * _397) + _464) * 2.0) + (-1.0);
    float _480 = ((((_445.y - _465) * _397) + _465) * 2.0) + (-1.0);
    float _481 = dot(vec2(_478, _480), vec2(_478, _480));
    float _3960 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _514 = (((_502.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _478;
    float _515 = (((_502.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _480;
    float _518 = fma(_486, _232, fma(_515, _239, _514 * _225));
    float _521 = fma(_486, _233, fma(_515, _240, _514 * _226));
    float _524 = fma(_486, _234, fma(_515, _241, _514 * _227));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _557 = _555.x;
    float _558 = 1.0 - _557;
    float _567 = (cbMtdParam._m0[19u].x + dot(vec4(_528 * _518, _528 * _521, _528 * _524, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_557 - _558) * cbMtdParam._m0[24u].z) + _558) * cbMtdParam._m0[21u].z);
    float _3971 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _575 = (_568 * ((_425.x * cbMtdParam._m0[18u].x) - _404)) + _404;
    float _576 = (_568 * ((_425.y * cbMtdParam._m0[18u].y) - _405)) + _405;
    float _577 = (_568 * ((_425.z * cbMtdParam._m0[18u].z) - _406)) + _406;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _603 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _605 = _603.x;
    float _623 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _605) * _397) + _605;
    float _627 = ((_589.x - _623) * cbMtdParam._m0[19u].z) + _623;
    float _629 = _627 - (_627 * _568);
    float _633 = (cbMtdParam._m0[19u].w * (_502.z - _475)) + _475;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _653 = (_646.x * 2.0) + (-1.0);
    float _654 = (_646.y * 2.0) + (-1.0);
    float _655 = dot(vec2(_653, _654), vec2(_653, _654));
    float _3982 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _663 = ((_646.z - _633) * _568) + _633;
    float _673 = ((sqrt(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) - _486) * _568) + _486;
    float _676 = (((_653 - _514) * _568) + _514) + (cbMtdParam._m0[21u].x * _514);
    float _677 = (((_654 - _515) * _568) + _515) + (cbMtdParam._m0[21u].x * _515);
    float _679 = cbMtdParam._m0[22u].x + _502.w;
    float _682 = fma(_673, _232, fma(_677, _239, _676 * _225));
    float _685 = fma(_673, _233, fma(_677, _240, _676 * _226));
    float _688 = fma(_673, _234, fma(_677, _241, _676 * _227));
    float _692 = inversesqrt(dot(vec3(_682, _685, _688), vec3(_682, _685, _688)));
    float _693 = _692 * _682;
    float _694 = _692 * _685;
    float _695 = _692 * _688;
    float _3993 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _696 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _4015 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4026 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4037 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4048 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _701 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _715 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _766 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _756);
    float _767 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _756);
    float _768 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _756);
    float _772 = inversesqrt(dot(vec3(_766, _767, _768), vec3(_766, _767, _768)));
    float _773 = _766 * _772;
    float _774 = _767 * _772;
    float _775 = _768 * _772;
    vec4 _780 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _782 = _780.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _954 = sqrt(((_766 * _766) + (_767 * _767)) + (_768 * _768));
        float _960 = (cbMatDynParam._m0[5u].x * _954) + cbMatDynParam._m0[5u].y;
        float _4059 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _965 = (cbMatDynParam._m0[5u].z * _954) + cbMatDynParam._m0[5u].w;
        float _4070 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) - _961)) + _961) < ((_782 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _793 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _794 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _812 = fma(_695, cbSceneParam._m0[5u].z, fma(_694, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _693));
    float _815 = fma(_695, cbSceneParam._m0[6u].z, fma(_694, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _693));
    float _818 = fma(_695, cbSceneParam._m0[7u].z, fma(_694, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _693));
    uint _831 = _244 + 9u;
    uint _832 = _831 + uint(cbMatDynParam._m0[0u].w);
    float _838 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * cbInstanceData._m0[_832].x;
    float _839 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_832].y;
    float _840 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_832].z;
    float _4081 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _844 = 1.0 - _701;
    float _845 = _841 * _844;
    float _846 = _842 * _844;
    float _847 = _843 * _844;
    float _852 = (_841 + (-0.039999999105930328369140625)) * _701;
    float _853 = (_842 + (-0.039999999105930328369140625)) * _701;
    float _854 = (_843 + (-0.039999999105930328369140625)) * _701;
    float _855 = _852 + 0.039999999105930328369140625;
    float _857 = _853 + 0.039999999105930328369140625;
    float _858 = _854 + 0.039999999105930328369140625;
    vec4 _867 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _793, cbSceneParam._m0[86u].y * _794));
    float _871 = ((isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * TEXCOORD_5.w) * _867.x;
    float _872 = dot(vec3(_693, _694, _695), vec3(_773, _774, _775));
    float _875 = _872 * 2.0;
    float _879 = (_875 * _693) - _773;
    float _880 = (_875 * _694) - _774;
    float _881 = (_875 * _695) - _775;
    float _885 = abs(dot(vec3(_773, _774, _775), vec3(_693, _694, _695)));
    float _4114 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _887 = sqrt(_696);
    float _900 = exp2((_887 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_887 * 3.0));
    float _906 = (1.0 - _900) * ((_887 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _907 = _900 * _887;
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1273;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _998 = fma(_943, cbModelParam._m0[26u].z, fma(_939, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _935));
        float _1002 = fma(_943, cbModelParam._m0[27u].z, fma(_939, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _935));
        float _1006 = fma(_943, cbModelParam._m0[28u].z, fma(_939, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _935));
        float _1031 = _935 + _693;
        float _1032 = _939 + _694;
        float _1033 = _943 + _695;
        float _1043 = fma(_1033, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031)) - _998;
        float _1044 = fma(_1033, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031)) - _1002;
        float _1045 = fma(_1033, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031)) - _1006;
        float _1049 = inversesqrt(dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045)));
        float _1062 = ((_1049 * _1043) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_998 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1049 * _1044) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1002 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1049 * _1045) / cbModelParam._m0[34u].z) + ((((((_1006 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        float _1101 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1067.x + (-0.5));
        float _1103 = _1101 * (_1067.y + (-0.5));
        float _1104 = _1101 * (_1067.z + (-0.5));
        float _1111 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1074.x + (-0.5));
        float _1113 = _1111 * (_1074.y + (-0.5));
        float _1114 = _1111 * (_1074.z + (-0.5));
        float _1121 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1081.x + (-0.5));
        float _1123 = _1121 * (_1081.y + (-0.5));
        float _1124 = _1121 * (_1081.z + (-0.5));
        float _1131 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1088.x + (-0.5));
        float _1133 = _1131 * (_1088.y + (-0.5));
        float _1134 = _1131 * (_1088.z + (-0.5));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = _1102 * 0.5;
        float _1139 = _1112 * 0.5;
        float _1140 = _1122 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1155 = (dot(vec3(_693, _694, _695), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1165 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _4162 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1167 + 1.0))) + _1172) * _1135;
        float _1182 = _1103 * 0.5;
        float _1183 = _1113 * 0.5;
        float _1184 = _1123 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_693, _694, _695), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _4195 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1209 + 1.0))) + _1214) * _1136;
        float _1224 = _1104 * 0.5;
        float _1225 = _1114 * 0.5;
        float _1226 = _1124 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_693, _694, _695), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _4228 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1251 + 1.0))) + _1256) * _1137;
        _1273 = _1104;
        _1275 = _1103;
        _1276 = _1102;
        _1277 = _1114;
        _1278 = _1113;
        _1279 = _1112;
        _1280 = _1124;
        _1281 = _1123;
        _1282 = _1122;
        _1283 = _1137;
        _1284 = _1136;
        _1285 = _1135;
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
    }
    else
    {
        _1273 = _1274;
        _1275 = _1274;
        _1276 = _1274;
        _1277 = _1274;
        _1278 = _1274;
        _1279 = _1274;
        _1280 = _1274;
        _1281 = _1274;
        _1282 = _1274;
        _1283 = _1274;
        _1284 = _1274;
        _1285 = _1274;
        _1286 = 0.0;
        _1287 = 0.0;
        _1288 = 0.0;
    }
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1316 = fma(_943, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _935));
        float _1320 = fma(_943, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _935));
        float _1324 = fma(_943, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _935));
        float _1347 = _935 + _693;
        float _1348 = _939 + _694;
        float _1349 = _943 + _695;
        float _1359 = fma(_1349, cbModelParam._m0[30u].z, fma(_1348, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1347)) - _1316;
        float _1360 = fma(_1349, cbModelParam._m0[31u].z, fma(_1348, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1347)) - _1320;
        float _1361 = fma(_1349, cbModelParam._m0[32u].z, fma(_1348, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1347)) - _1324;
        float _1365 = inversesqrt(dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361)));
        float _1378 = ((_1365 * _1359) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1316 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1365 * _1360) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1320 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1365 * _1361) / cbModelParam._m0[35u].z) + ((((((_1324 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        float _1415 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1382.x + (-0.5));
        float _1417 = _1415 * (_1382.y + (-0.5));
        float _1418 = _1415 * (_1382.z + (-0.5));
        float _1425 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1389.x + (-0.5));
        float _1427 = _1425 * (_1389.y + (-0.5));
        float _1428 = _1425 * (_1389.z + (-0.5));
        float _1435 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1396.x + (-0.5));
        float _1437 = _1435 * (_1396.y + (-0.5));
        float _1438 = _1435 * (_1396.z + (-0.5));
        float _1445 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1403.x + (-0.5));
        float _1447 = _1445 * (_1403.y + (-0.5));
        float _1448 = _1445 * (_1403.z + (-0.5));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = _1416 * 0.5;
        float _1453 = _1426 * 0.5;
        float _1454 = _1436 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_693, _694, _695), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4291 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1479 + 1.0))) + _1484) * _1449;
        float _1494 = _1417 * 0.5;
        float _1495 = _1427 * 0.5;
        float _1496 = _1437 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_693, _694, _695), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4324 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1521 + 1.0))) + _1526) * _1450;
        float _1536 = _1418 * 0.5;
        float _1537 = _1428 * 0.5;
        float _1538 = _1438 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_693, _694, _695), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4357 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1563 + 1.0))) + _1568) * _1451;
        _1585 = _1418;
        _1586 = _1417;
        _1587 = _1416;
        _1588 = _1428;
        _1589 = _1427;
        _1590 = _1426;
        _1591 = _1438;
        _1592 = _1437;
        _1593 = _1436;
        _1594 = _1451;
        _1595 = _1450;
        _1596 = _1449;
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
    }
    else
    {
        _1585 = _1274;
        _1586 = _1274;
        _1587 = _1274;
        _1588 = _1274;
        _1589 = _1274;
        _1590 = _1274;
        _1591 = _1274;
        _1592 = _1274;
        _1593 = _1274;
        _1594 = _1274;
        _1595 = _1274;
        _1596 = _1274;
        _1597 = 0.0;
        _1598 = 0.0;
        _1599 = 0.0;
    }
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1286)) + _1286;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1287)) + _1287;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1288)) + _1288;
    float _1632 = fma(_1611, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1611, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1611, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1609));
    float _1653 = _879 * 0.5;
    float _1654 = _880 * 0.5;
    float _1655 = _881 * 0.5;
    float _1656 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1659 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1662 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1696;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1669 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1273, _1277, _1280, _1283));
        float _1673 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1677 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1276, _1279, _1282, _1285));
        float _1684 = dot(vec4(cbModelParam._m0[39u]), vec4(_1653, _1654, _1655, 1.0));
        _1696 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1696 = 1.0;
    }
    float _1707;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1698 = dot(vec4(cbModelParam._m0[40u]), vec4(_1653, _1654, _1655, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1711 = (_1707 * cbModelParam._m0[1u].x) + (_1696 * (1.0 - cbModelParam._m0[1u].x));
    float _1721 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _696);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1721 : min(cbModelParam._m0[25u].z, _1721));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1769 = fma(_943, cbModelParam._m0[13u].z, fma(_939, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _935)) + cbModelParam._m0[13u].w;
        float _1773 = fma(_943, cbModelParam._m0[14u].z, fma(_939, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _935)) + cbModelParam._m0[14u].w;
        float _1777 = fma(_943, cbModelParam._m0[15u].z, fma(_939, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _935)) + cbModelParam._m0[15u].w;
        float _1780 = fma(_881, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879));
        float _1783 = fma(_881, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879));
        float _1786 = fma(_881, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879));
        float _1814;
        if (_1780 > 0.0)
        {
            _1814 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1814 = frontier_phi_17_15_ladder;
        }
        float _1985;
        if (_1783 > 0.0)
        {
            _1985 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1985 = frontier_phi_26_22_ladder;
        }
        float _2280;
        if (_1786 > 0.0)
        {
            _2280 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2280 = frontier_phi_38_33_ladder;
        }
        float _2282 = isnan(_1985) ? _1814 : (isnan(_1814) ? _1985 : min(_1814, _1985));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1780) + _1769;
        float _2288 = (_2283 * _1783) + _1773;
        float _2289 = (_2283 * _1786) + _1777;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2292 = (-1.0) - _2290;
        float _2294 = _2290 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2289 > _2294) || ((_2289 < _2292) || ((_2288 > _2294) || ((_2288 < _2292) || ((_2287 < _2292) || (_2287 > _2294))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2434 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2289, cbModelParam._m0[9u].z, fma(_2288, cbModelParam._m0[9u].y, _2287 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2289, cbModelParam._m0[10u].z, fma(_2288, cbModelParam._m0[10u].y, _2287 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2289, cbModelParam._m0[11u].z, fma(_2288, cbModelParam._m0[11u].y, _2287 * cbModelParam._m0[11u].x))), _1722);
            frontier_phi_16_38_ladder = _2434.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2434.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2434.x * cbModelParam._m0[1u].y;
        }
        _1802 = frontier_phi_16_38_ladder_2;
        _1804 = frontier_phi_16_38_ladder_1;
        _1806 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_879, _880, _881), _1722);
        _1802 = _1790.x * cbModelParam._m0[1u].y;
        _1804 = _1790.y * cbModelParam._m0[1u].y;
        _1806 = _1790.z * cbModelParam._m0[1u].y;
    }
    float _1810 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _696);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1810 : min(cbModelParam._m0[25u].w, _1810));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1864 = fma(_943, cbModelParam._m0[21u].z, fma(_939, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _935)) + cbModelParam._m0[21u].w;
        float _1868 = fma(_943, cbModelParam._m0[22u].z, fma(_939, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _935)) + cbModelParam._m0[22u].w;
        float _1872 = fma(_943, cbModelParam._m0[23u].z, fma(_939, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _935)) + cbModelParam._m0[23u].w;
        float _1875 = fma(_881, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879));
        float _1878 = fma(_881, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879));
        float _1881 = fma(_881, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879));
        float _1990;
        if (_1875 > 0.0)
        {
            _1990 = abs((1.0 - _1864) / _1875);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1864 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1990 = frontier_phi_28_24_ladder;
        }
        float _2307;
        if (_1878 > 0.0)
        {
            _2307 = abs((1.0 - _1868) / _1878);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1868 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2307 = frontier_phi_40_35_ladder;
        }
        float _2645;
        if (_1881 > 0.0)
        {
            _2645 = abs((1.0 - _1872) / _1881);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1872 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2645 = frontier_phi_50_47_ladder;
        }
        float _2647 = isnan(_2307) ? _1990 : (isnan(_1990) ? _2307 : min(_1990, _2307));
        float _2648 = isnan(_2645) ? _2647 : (isnan(_2647) ? _2645 : min(_2647, _2645));
        float _2652 = (_2648 * _1875) + _1864;
        float _2653 = (_2648 * _1878) + _1868;
        float _2654 = (_2648 * _1881) + _1872;
        float _2655 = _2648 * 9.9999997473787516355514526367188e-05;
        float _2656 = (-1.0) - _2655;
        float _2658 = _2655 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2654 > _2658) || ((_2654 < _2656) || ((_2653 > _2658) || ((_2653 < _2656) || ((_2652 < _2656) || (_2652 > _2658))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2776 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2654, cbModelParam._m0[17u].z, fma(_2653, cbModelParam._m0[17u].y, _2652 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2654, cbModelParam._m0[18u].z, fma(_2653, cbModelParam._m0[18u].y, _2652 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2654, cbModelParam._m0[19u].z, fma(_2653, cbModelParam._m0[19u].y, _2652 * cbModelParam._m0[19u].x))), _1811);
            frontier_phi_25_50_ladder = _2776.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2776.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2776.x * cbModelParam._m0[1u].z;
        }
        _1900 = frontier_phi_25_50_ladder_2;
        _1902 = frontier_phi_25_50_ladder_1;
        _1904 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_879, _880, _881), _1811);
        _1900 = _1884.x * cbModelParam._m0[1u].z;
        _1902 = _1884.y * cbModelParam._m0[1u].z;
        _1904 = _1884.z * cbModelParam._m0[1u].z;
    }
    float _1917 = (((_906 * _855) + _907) * _871) * ((cbModelParam._m0[1u].w * (_1900 - _1802)) + _1802);
    float _1919 = (((_906 * _857) + _907) * _871) * ((cbModelParam._m0[1u].w * (_1902 - _1804)) + _1804);
    float _1921 = (((_906 * _858) + _907) * _871) * ((cbModelParam._m0[1u].w * (_1904 - _1806)) + _1806);
    float _1924 = fma(_1921, cbSceneParam._m0[89u].z, fma(_1919, cbSceneParam._m0[89u].y, _1917 * cbSceneParam._m0[89u].x));
    float _1927 = fma(_1921, cbSceneParam._m0[90u].z, fma(_1919, cbSceneParam._m0[90u].y, _1917 * cbSceneParam._m0[90u].x));
    float _1930 = fma(_1921, cbSceneParam._m0[91u].z, fma(_1919, cbSceneParam._m0[91u].y, _1917 * cbSceneParam._m0[91u].x));
    float _1964 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1968 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1972 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1976 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1977 = _1964 / _1976;
    float _1978 = _1968 / _1976;
    float _1979 = _1972 / _1976;
    float _2126;
    float _2127;
    float _2128;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2006 = ((uint(_1979 > cbSceneParam._m0[59u].y) + uint(_1979 > cbSceneParam._m0[59u].x)) + uint(_1979 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2007 = _2006 + 43u;
        uint _2015 = _2006 + 44u;
        uint _2023 = _2006 + 45u;
        uint _2031 = _2006 + 46u;
        float _2042 = fma(_1976, cbSceneParam._m0[_2007].w, fma(_1972, cbSceneParam._m0[_2007].z, fma(_1968, cbSceneParam._m0[_2007].y, _1964 * cbSceneParam._m0[_2007].x)));
        float _2046 = fma(_1976, cbSceneParam._m0[_2015].w, fma(_1972, cbSceneParam._m0[_2015].z, fma(_1968, cbSceneParam._m0[_2015].y, _1964 * cbSceneParam._m0[_2015].x)));
        float _2054 = fma(_1976, cbSceneParam._m0[_2031].w, fma(_1972, cbSceneParam._m0[_2031].z, fma(_1968, cbSceneParam._m0[_2031].y, _1964 * cbSceneParam._m0[_2031].x)));
        float _2059 = cbSceneParam._m0[33u].z * _2054;
        float _2061 = cbSceneParam._m0[33u].w * _2054;
        float _2064 = fma(_1976, cbSceneParam._m0[_2023].w, fma(_1972, cbSceneParam._m0[_2023].z, fma(_1968, cbSceneParam._m0[_2023].y, _1964 * cbSceneParam._m0[_2023].x))) / _2054;
        float _2112 = (cbSceneParam._m0[33u].x - sqrt(((_1978 * _1978) + (_1977 * _1977)) + (_1979 * _1979))) * cbSceneParam._m0[33u].y;
        float _4483 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2119 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2059 + _2042) / _2054, (_2061 + _2046) / _2054), _2064), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2061 + _2042) / _2054, (_2046 - _2059) / _2054), _2064), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2042 - _2059) / _2054, (_2046 - _2061) / _2054), _2064), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2042 - _2061) / _2054, (_2059 + _2046) / _2054), _2064), 0.0)).x), vec4(0.25)));
        _2126 = 1.0 - (_2119 * cbSceneParam._m0[34u].x);
        _2127 = 1.0 - (_2119 * cbSceneParam._m0[34u].y);
        _2128 = 1.0 - (_2119 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2126 = 1.0;
        _2127 = 1.0;
        _2128 = 1.0;
    }
    float _2192;
    float _2194;
    float _2196;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2180 = fma(_1976, cbSceneParam._m0[63u].w, fma(_1972, cbSceneParam._m0[63u].z, fma(_1968, cbSceneParam._m0[63u].y, _1964 * cbSceneParam._m0[63u].x)));
        float _2181 = fma(_1976, cbSceneParam._m0[60u].w, fma(_1972, cbSceneParam._m0[60u].z, fma(_1968, cbSceneParam._m0[60u].y, _1964 * cbSceneParam._m0[60u].x))) / _2180;
        float _2182 = fma(_1976, cbSceneParam._m0[61u].w, fma(_1972, cbSceneParam._m0[61u].z, fma(_1968, cbSceneParam._m0[61u].y, _1964 * cbSceneParam._m0[61u].x))) / _2180;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2181 >= cbSceneParam._m0[64u].x) && (_2182 >= cbSceneParam._m0[64u].y)) && (_2181 <= cbSceneParam._m0[64u].z)) && (_2182 <= cbSceneParam._m0[64u].w))
        {
            float _2320 = fma(_1976, cbSceneParam._m0[62u].w, fma(_1972, cbSceneParam._m0[62u].z, fma(_1968, cbSceneParam._m0[62u].y, _1964 * cbSceneParam._m0[62u].x))) / _2180;
            float _2324 = isnan(cbSceneParam._m0[41u].w) ? _2320 : (isnan(_2320) ? cbSceneParam._m0[41u].w : max(_2320, cbSceneParam._m0[41u].w));
            float _2367 = (cbSceneParam._m0[33u].x - sqrt(((_1978 * _1978) + (_1977 * _1977)) + (_1979 * _1979))) * cbSceneParam._m0[33u].y;
            float _4499 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
            float _2374 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2181, cbSceneParam._m0[33u].w + _2182), _2324), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2181, _2182 - cbSceneParam._m0[33u].z), _2324), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2181 - cbSceneParam._m0[33u].z, _2182 - cbSceneParam._m0[33u].w), _2324), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2181 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2182), _2324), 0.0)).x), vec4(0.25)));
            float _2378 = 1.0 - (_2374 * cbSceneParam._m0[34u].x);
            float _2379 = 1.0 - (_2374 * cbSceneParam._m0[34u].y);
            float _2380 = 1.0 - (_2374 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2380) ? _2128 : (isnan(_2128) ? _2380 : min(_2128, _2380));
            frontier_phi_37_36_ladder_1 = isnan(_2379) ? _2127 : (isnan(_2127) ? _2379 : min(_2127, _2379));
            frontier_phi_37_36_ladder_2 = isnan(_2378) ? _2126 : (isnan(_2126) ? _2378 : min(_2126, _2378));
        }
        else
        {
            frontier_phi_37_36_ladder = _2128;
            frontier_phi_37_36_ladder_1 = _2127;
            frontier_phi_37_36_ladder_2 = _2126;
        }
        _2192 = frontier_phi_37_36_ladder_2;
        _2194 = frontier_phi_37_36_ladder_1;
        _2196 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2192 = _2126;
        _2194 = _2127;
        _2196 = _2128;
    }
    uvec4 _2201 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2203 = _2201.x * 14u;
    uint _2204 = _2203 + 13u;
    float _2211 = _871 + (-1.0);
    float _2216 = (cbLight._m0[_2204].x * _2211) + 1.0;
    float _2217 = (cbLight._m0[_2204].y * _2211) + 1.0;
    float _2218 = (cbLight._m0[_2204].z * _2211) + 1.0;
    float _2219 = (cbLight._m0[_2204].w * _2211) + 1.0;
    uint _2220 = _2203 + 5u;
    float _2226 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
    uint _2230 = _2203 + 4u;
    float _2239 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
    uint _2243 = _2203 | 1u;
    float _2254 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_693, _694, _695));
    float _2257 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_693, _694, _695));
    float _4535 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _4546 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2262 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * 0.3183098733425140380859375;
    float _2264 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * 0.3183098733425140380859375;
    float _2271 = ((cbLight._m0[_2220].x * _2226) * _2264) + (((cbLight._m0[_2230].x * _2192) * _2239) * _2262);
    float _2272 = ((_2226 * cbLight._m0[_2220].y) * _2264) + (((cbLight._m0[_2230].y * _2194) * _2239) * _2262);
    float _2273 = ((_2226 * cbLight._m0[_2220].z) * _2264) + (((cbLight._m0[_2230].z * _2196) * _2239) * _2262);
    uvec4 _2277 = floatBitsToUint(cbLight._m0[_2203 + 12u]);
    bool _2279 = _2277.x == 0u;
    float _2381;
    float _2383;
    float _2385;
    if (_2279)
    {
        _2381 = _2271;
        _2383 = _2272;
        _2385 = _2273;
    }
    else
    {
        uint _2389 = _2203 + 6u;
        float _2405 = (dot(vec3(cbLight._m0[_2203 + 2u].xyz), vec3(_693, _694, _695)) * 0.5) + 0.5;
        float _2406 = _2405 * _2405;
        float _4557 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2407 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2408 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2381 = (((cbLight._m0[_2389].x * 0.3183098733425140380859375) * _2407) * _2408) + _2271;
        _2383 = (((cbLight._m0[_2389].y * 0.3183098733425140380859375) * _2407) * _2408) + _2272;
        _2385 = (((cbLight._m0[_2389].z * 0.3183098733425140380859375) * _2407) * _2408) + _2273;
    }
    bool _2388 = _2277.y == 0u;
    float _2443;
    float _2445;
    float _2447;
    if (_2388)
    {
        _2443 = _2381;
        _2445 = _2383;
        _2447 = _2385;
    }
    else
    {
        uint _2616 = _2203 + 7u;
        float _2632 = (dot(vec3(cbLight._m0[_2203 + 3u].xyz), vec3(_693, _694, _695)) * 0.5) + 0.5;
        float _2633 = _2632 * _2632;
        float _4573 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2634 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2635 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2443 = (((cbLight._m0[_2616].x * 0.3183098733425140380859375) * _2634) * _2635) + _2381;
        _2445 = (((cbLight._m0[_2616].y * 0.3183098733425140380859375) * _2634) * _2635) + _2383;
        _2447 = (((cbLight._m0[_2616].z * 0.3183098733425140380859375) * _2634) * _2635) + _2385;
    }
    uint _2450 = _2203 + 8u;
    float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _696) * 0.949999988079071044921875);
    float _2464 = _2463 * _2463;
    float _2465 = cbLight._m0[_2203].x + _773;
    float _2466 = cbLight._m0[_2203].y + _774;
    float _2467 = cbLight._m0[_2203].z + _775;
    float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
    float _2472 = _2471 * _2465;
    float _2473 = _2471 * _2466;
    float _2474 = _2471 * _2467;
    float _2475 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2203].xyz));
    float _4589 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2478 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _4600 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _2479 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2480 = dot(vec3(_693, _694, _695), vec3(_2472, _2473, _2474));
    float _4611 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2483 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2484 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2472, _2473, _2474));
    float _4622 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2488 = _2464 * _2464;
    float _2492 = ((_2483 * _2483) * (_2488 + (-1.0))) + 1.0;
    float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0);
    float _2501 = 0.959999978542327880859375 - _852;
    float _2503 = 0.959999978542327880859375 - _853;
    float _2504 = 0.959999978542327880859375 - _854;
    float _2511 = 1.0 - _2464;
    float _2522 = (0.5 / (((_2479 * ((_2478 * _2511) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2479 * _2511) + _2464) * _2478))) * _2478;
    float _4633 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2524 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2488 / ((_2492 * _2492) * 3.141590118408203125));
    uint _2538 = _2203 + 9u;
    float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2243].w)) * _696) * 0.949999988079071044921875);
    float _2550 = _2549 * _2549;
    float _2551 = cbLight._m0[_2243].x + _773;
    float _2552 = cbLight._m0[_2243].y + _774;
    float _2553 = cbLight._m0[_2243].z + _775;
    float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
    float _2558 = _2557 * _2551;
    float _2559 = _2557 * _2552;
    float _2560 = _2557 * _2553;
    float _2561 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2243].xyz));
    float _4644 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2565 = dot(vec3(_693, _694, _695), vec3(_2558, _2559, _2560));
    float _4655 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2569 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_2558, _2559, _2560));
    float _4666 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2573 = _2550 * _2550;
    float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
    float _2584 = exp2(log2(1.0 - (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * 5.0);
    float _2591 = 1.0 - _2550;
    float _2601 = (0.5 / (((_2479 * ((_2564 * _2591) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2479 * _2591) + _2550) * _2564))) * _2564;
    float _4677 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2603 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
    float _2613 = (((((_2584 * _2501) + _855) * cbLight._m0[_2538].x) * _2603) * _2226) + ((((cbLight._m0[_2450].x * _2192) * ((_2500 * _2501) + _855)) * _2524) * _2239);
    float _2614 = (((((_2584 * _2503) + _857) * cbLight._m0[_2538].y) * _2603) * _2226) + ((((cbLight._m0[_2450].y * _2194) * ((_2500 * _2503) + _857)) * _2524) * _2239);
    float _2615 = (((((_2584 * _2504) + _858) * cbLight._m0[_2538].z) * _2603) * _2226) + ((((cbLight._m0[_2450].z * _2196) * ((_2500 * _2504) + _858)) * _2524) * _2239);
    float _2671;
    float _2673;
    float _2675;
    if (_2279)
    {
        _2671 = _2613;
        _2673 = _2614;
        _2675 = _2615;
    }
    else
    {
        uint _2677 = _2203 + 2u;
        uint _2681 = _2203 + 10u;
        float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2677].w)) * _696) * 0.949999988079071044921875);
        float _2696 = _2695 * _2695;
        float _2697 = cbLight._m0[_2677].x + _773;
        float _2698 = cbLight._m0[_2677].y + _774;
        float _2699 = cbLight._m0[_2677].z + _775;
        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
        float _2704 = _2703 * _2697;
        float _2705 = _2703 * _2698;
        float _2706 = _2703 * _2699;
        float _2707 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2677].xyz));
        float _4688 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2711 = dot(vec3(_693, _694, _695), vec3(_2704, _2705, _2706));
        float _4699 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2715 = dot(vec3(cbLight._m0[_2677].xyz), vec3(_2704, _2705, _2706));
        float _4710 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2719 = _2696 * _2696;
        float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
        float _2730 = exp2(log2(1.0 - (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) * 5.0);
        float _2737 = 1.0 - _2696;
        float _2747 = (0.5 / (((_2479 * ((_2710 * _2737) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2479 * _2737) + _2696) * _2710))) * _2710;
        float _4721 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2749 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
        float _2750 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2671 = (((((_2730 * _2501) + _855) * cbLight._m0[_2681].x) * _2749) * _2750) + _2613;
        _2673 = (((((_2730 * _2503) + _857) * cbLight._m0[_2681].y) * _2749) * _2750) + _2614;
        _2675 = (((((_2730 * _2504) + _858) * cbLight._m0[_2681].z) * _2749) * _2750) + _2615;
    }
    float _2781;
    float _2783;
    float _2785;
    if (_2388)
    {
        _2781 = _2671;
        _2783 = _2673;
        _2785 = _2675;
    }
    else
    {
        uint _2792 = _2203 + 3u;
        uint _2796 = _2203 + 11u;
        float _2810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2792].w)) * _696) * 0.949999988079071044921875);
        float _2811 = _2810 * _2810;
        float _2812 = cbLight._m0[_2792].x + _773;
        float _2813 = cbLight._m0[_2792].y + _774;
        float _2814 = cbLight._m0[_2792].z + _775;
        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
        float _2819 = _2818 * _2812;
        float _2820 = _2818 * _2813;
        float _2821 = _2818 * _2814;
        float _2822 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2792].xyz));
        float _4737 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2825 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2826 = dot(vec3(_693, _694, _695), vec3(_2819, _2820, _2821));
        float _4748 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2829 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2830 = dot(vec3(cbLight._m0[_2792].xyz), vec3(_2819, _2820, _2821));
        float _4759 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2834 = _2811 * _2811;
        float _2838 = ((_2829 * _2829) * (_2834 + (-1.0))) + 1.0;
        float _2845 = exp2(log2(1.0 - (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) * 5.0);
        float _2852 = 1.0 - _2811;
        float _2862 = (0.5 / (((_2479 * ((_2825 * _2852) + _2811)) + 9.9999999392252902907785028219223e-09) + (((_2479 * _2852) + _2811) * _2825))) * _2825;
        float _4770 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2864 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2834 / ((_2838 * _2838) * 3.141590118408203125));
        float _2865 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2781 = (((((_2845 * _2501) + _855) * cbLight._m0[_2796].x) * _2864) * _2865) + _2671;
        _2783 = (((((_2845 * _2503) + _857) * cbLight._m0[_2796].y) * _2864) * _2865) + _2673;
        _2785 = (((((_2845 * _2504) + _858) * cbLight._m0[_2796].z) * _2864) * _2865) + _2675;
    }
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    if (_2201.y == 0u)
    {
        uvec4 _2886 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2887 = _2886.x;
        uint _2898 = uint((float(_2886.y) * floor(float(uint(cbSceneParam._m0[85u].y * _794) / _2887))) + floor(float(uint(cbSceneParam._m0[85u].x * _793) / _2887)));
        float _2908 = (log2(_1979 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2909 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        uint _2912 = uint(isnan(14.0) ? _2909 : (isnan(_2909) ? 14.0 : min(_2909, 14.0)));
        uvec4 _2917 = texelFetch(g_lightClusterGridBuffer, int(((_2912 << 2u) + (_2898 << 6u)) >> 2u));
        uint _2918 = _2917.x;
        uint _2919 = _2886.z;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        if (((((1u << ((_2919 >> 4u) & 15u)) + 4294967295u) & _2918) == 0u) || ((_2919 & 240u) == 0u))
        {
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
        }
        else
        {
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            float _3156 = 0.0;
            uint _3157 = 0u;
            uint _3166;
            bool _3167;
            for (;;)
            {
                _3166 = texelFetch(g_lightClassification, int((((_2912 << 5u) + (_2898 << 9u)) + (_3157 << 2u)) >> 2u)).x;
                _3167 = _3166 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3167)
                {
                    frontier_phi_71_pred = _3156;
                    frontier_phi_71_pred_1 = _3155;
                    frontier_phi_71_pred_2 = _3154;
                    frontier_phi_71_pred_3 = _3153;
                    frontier_phi_71_pred_4 = _3152;
                    frontier_phi_71_pred_5 = _3151;
                }
                else
                {
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    uint _3302;
                    _3296 = _3151;
                    _3297 = _3152;
                    _3298 = _3153;
                    _3299 = _3154;
                    _3300 = _3155;
                    _3301 = _3156;
                    _3302 = _3166;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    for (;;)
                    {
                        uint _3306 = uint(findLSB(_3302)) + (_3157 << 5u);
                        uint _3303 = (_3302 + 4294967295u) & _3302;
                        uint _3308 = _3306 * 48u;
                        vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 3u)).x));
                        uint _3328 = (_3306 * 48u) + 4u;
                        vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3328)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 3u)).x));
                        uint _3347 = (_3306 * 48u) + 8u;
                        vec3 _3358 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3347)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 2u)).x));
                        float _3362 = _3322.x - _1977;
                        float _3363 = _3322.y - _1978;
                        float _3364 = _3322.z - _1979;
                        float _3365 = dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364));
                        float _3368 = inversesqrt(_3365);
                        float _3369 = _3368 * _3362;
                        float _3370 = _3368 * _3363;
                        float _3371 = _3368 * _3364;
                        float _3372 = dot(vec3(_812, _815, _818), vec3(_3369, _3370, _3371));
                        float _3377 = 1.0 - (_3365 * _3322.w);
                        float _4796 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3378 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3379 = sqrt(_3365) * _3341.w;
                        float _3382 = 1.39999997615814208984375 / (_3379 + 1.39999997615814208984375);
                        float _3383 = _3382 * _3382;
                        float _3386 = ((1.0 - _3383) * _3372) + _3383;
                        float _3389 = _3379 * _3379;
                        float _3393 = ((isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0))) * _3378) / ((_3389 * 0.699999988079071044921875) + 1.0);
                        float _3397 = (-0.0) - _1977;
                        float _3398 = (-0.0) - _1978;
                        float _3399 = (-0.0) - _1979;
                        float _3403 = inversesqrt(dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399)));
                        float _3404 = _3403 * _3397;
                        float _3405 = _3403 * _3398;
                        float _3406 = _3403 * _3399;
                        float _3413 = exp2(log2(1.0 / ((_3389 * 3.5) + 5.0)) * 0.25);
                        float _3414 = 1.0 - _887;
                        float _3421 = sqrt(1.0 - ((1.0 - (_3414 * _3414)) * (1.0 - (_3413 * _3413))));
                        float _3422 = _3421 * _3421;
                        float _3423 = _3422 * _3422;
                        float _3424 = _3404 + _3369;
                        float _3425 = _3405 + _3370;
                        float _3426 = _3406 + _3371;
                        float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                        float _3434 = dot(vec3(_812, _815, _818), vec3(_3404, _3405, _3406));
                        float _4812 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3437 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                        float _3438 = dot(vec3(_812, _815, _818), vec3(_3430 * _3424, _3430 * _3425, _3430 * _3426));
                        float _4823 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3441 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3445 = ((_3441 * _3441) * (_3423 + (-1.0))) + 1.0;
                        float _3446 = _3382 * _3422;
                        float _3447 = _3446 * _3446;
                        float _3450 = ((1.0 - _3447) * _3372) + _3447;
                        float _4834 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3451 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                        float _3452 = 1.0 - _3422;
                        float _3462 = (0.5 / (((_3451 * ((_3437 * _3452) + _3422)) + 9.9999999392252902907785028219223e-09) + (((_3451 * _3452) + _3422) * _3437))) * _3451;
                        float _4845 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3473 = (((_3423 * 3.1415927410125732421875) * (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) / ((_3445 * _3445) * ((_3389 * 2.1991131305694580078125) + 3.141590118408203125))) * _3378;
                        _3226 = (_3393 * _3341.x) + _3299;
                        _3227 = (_3393 * _3341.y) + _3300;
                        _3228 = (_3393 * _3341.z) + _3301;
                        _3223 = (_3473 * _3358.x) + _3296;
                        _3224 = (_3473 * _3358.y) + _3297;
                        _3225 = (_3473 * _3358.z) + _3298;
                        if (_3303 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3296 = _3223;
                            _3297 = _3224;
                            _3298 = _3225;
                            _3299 = _3226;
                            _3300 = _3227;
                            _3301 = _3228;
                            _3302 = _3303;
                        }
                    }
                    frontier_phi_71_pred = _3228;
                    frontier_phi_71_pred_1 = _3227;
                    frontier_phi_71_pred_2 = _3226;
                    frontier_phi_71_pred_3 = _3225;
                    frontier_phi_71_pred_4 = _3224;
                    frontier_phi_71_pred_5 = _3223;
                }
                _3009 = frontier_phi_71_pred;
                _3007 = frontier_phi_71_pred_1;
                _3005 = frontier_phi_71_pred_2;
                _3003 = frontier_phi_71_pred_3;
                _3001 = frontier_phi_71_pred_4;
                _2999 = frontier_phi_71_pred_5;
                uint _3158 = _3157 + 1u;
                if (_3158 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3151 = _2999;
                    _3152 = _3001;
                    _3153 = _3003;
                    _3154 = _3005;
                    _3155 = _3007;
                    _3156 = _3009;
                    _3157 = _3158;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
        }
        uvec4 _3012 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3013 = _3012.z;
        uint _3015 = (_3013 >> 8u) & 15u;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        if (((4294967295u << _3015) & _2918) == 0u)
        {
            _3119 = _2998;
            _3121 = _3000;
            _3123 = _3002;
            _3125 = _3004;
            _3127 = _3006;
            _3129 = _3008;
        }
        else
        {
            float _3144 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
            float _3145 = _3144 * _1977;
            float _3146 = _3144 * _1978;
            float _3147 = _3144 * _1979;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3015 < ((_3013 >> 12u) & 15u))
            {
                float _3120;
                float _3122;
                float _3124;
                float _3126;
                float _3128;
                float _3130;
                float _3279 = _2998;
                float _3280 = _3000;
                float _3281 = _3002;
                float _3282 = _3004;
                float _3283 = _3006;
                float _3284 = _3008;
                uint _3285 = _3015;
                uint _3294;
                bool _3295;
                for (;;)
                {
                    _3294 = texelFetch(g_lightClassification, int((((_2912 << 5u) + (_2898 << 9u)) + (_3285 << 2u)) >> 2u)).x;
                    _3295 = _3294 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3295)
                    {
                        frontier_phi_82_pred = _3284;
                        frontier_phi_82_pred_1 = _3283;
                        frontier_phi_82_pred_2 = _3282;
                        frontier_phi_82_pred_3 = _3281;
                        frontier_phi_82_pred_4 = _3280;
                        frontier_phi_82_pred_5 = _3279;
                    }
                    else
                    {
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3500 = _3279;
                        float _3501 = _3280;
                        float _3502 = _3281;
                        float _3503 = _3282;
                        float _3504 = _3283;
                        float _3505 = _3284;
                        uint _3506 = _3294;
                        uint _3507;
                        vec4 _3532;
                        float _3533;
                        vec4 _3548;
                        vec3 _3560;
                        vec4 _3575;
                        vec4 _3591;
                        float _3637;
                        bool _3638;
                        for (;;)
                        {
                            uint _3517 = ((_3285 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3506));
                            _3507 = (_3506 + 4294967295u) & _3506;
                            uint _3519 = _3517 * 40u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            _3533 = _3532.w;
                            uint _3535 = (_3517 * 40u) + 4u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3550 = (_3517 * 40u) + 8u;
                            _3560 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x));
                            uint _3562 = (_3517 * 40u) + 16u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3578 = (_3517 * 40u) + 20u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3593 = (_3517 * 40u) + 24u;
                            vec4 _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3612 = (_3517 * 40u) + 28u;
                            vec4 _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            _3637 = fma(_1979, _3625.z, fma(_1978, _3625.y, _3625.x * _1977)) + _3625.w;
                            _3638 = !((fma(_1979, _3606.z, fma(_1978, _3606.y, _3606.x * _1977)) + _3606.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3638)
                            {
                                float _3665 = _3532.x - _1977;
                                float _3666 = _3532.y - _1978;
                                float _3667 = _3532.z - _1979;
                                float _3668 = dot(vec3(_3665, _3666, _3667), vec3(_3665, _3666, _3667));
                                float _3671 = inversesqrt(_3668);
                                float _3672 = _3671 * _3665;
                                float _3673 = _3671 * _3666;
                                float _3674 = _3671 * _3667;
                                float _3678 = 1.0 - (_3668 / (_3533 * _3533));
                                float _4856 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3683 = sqrt(_3668) * _3548.w;
                                float _3685 = 1.39999997615814208984375 / (_3683 + 1.39999997615814208984375);
                                float _3686 = _3685 * _3685;
                                float _3689 = ((1.0 - _3686) * dot(vec3(_3672, _3673, _3674), vec3(_812, _815, _818))) + _3686;
                                float _3692 = _3683 * _3683;
                                float _3696 = (fma(_1979, _3575.z, fma(_1978, _3575.y, _3575.x * _1977)) + _3575.w) / _3637;
                                float _3697 = (fma(_1979, _3591.z, fma(_1978, _3591.y, _3591.x * _1977)) + _3591.w) / _3637;
                                float _3701 = 1.0 - dot(vec2(_3696, _3697), vec2(_3696, _3697));
                                float _4872 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3702 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3703 = _3702 * (((isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0))) * _3679) / ((_3692 * 0.699999988079071044921875) + 1.0));
                                float _3715 = exp2(log2(1.0 / ((_3692 * 3.5) + 5.0)) * 0.25);
                                float _3716 = 1.0 - _887;
                                float _3723 = sqrt(1.0 - ((1.0 - (_3716 * _3716)) * (1.0 - (_3715 * _3715))));
                                float _3724 = _3723 * _3723;
                                float _3725 = _3724 * _3724;
                                float _3726 = _3672 - _3145;
                                float _3727 = _3673 - _3146;
                                float _3728 = _3674 - _3147;
                                float _3732 = inversesqrt(dot(vec3(_3726, _3727, _3728), vec3(_3726, _3727, _3728)));
                                float _3736 = dot(vec3(_812, _815, _818), vec3((-0.0) - _3145, (-0.0) - _3146, (-0.0) - _3147));
                                float _4883 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3739 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3740 = dot(vec3(_812, _815, _818), vec3(_3732 * _3726, _3732 * _3727, _3732 * _3728));
                                float _4894 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3743 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3747 = ((_3743 * _3743) * (_3725 + (-1.0))) + 1.0;
                                float _3748 = _3685 * _3724;
                                float _3749 = _3748 * _3748;
                                float _3755 = ((1.0 - _3749) * dot(vec3(_812, _815, _818), vec3(_3672, _3673, _3674))) + _3749;
                                float _4905 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3756 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3757 = 1.0 - _3724;
                                float _3767 = (0.5 / (((_3756 * ((_3739 * _3757) + _3724)) + 9.9999999392252902907785028219223e-09) + (((_3756 * _3757) + _3724) * _3739))) * _3756;
                                float _4916 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3777 = (_3702 * _3679) * (((_3725 * 3.1415927410125732421875) * (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0)))) / ((_3747 * _3747) * ((_3692 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3703 * _3548.z;
                                frontier_phi_88_pred_1 = _3703 * _3548.y;
                                frontier_phi_88_pred_2 = _3703 * _3548.x;
                                frontier_phi_88_pred_3 = _3777 * _3560.z;
                                frontier_phi_88_pred_4 = _3777 * _3560.y;
                                frontier_phi_88_pred_5 = _3777 * _3560.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3786 = frontier_phi_88_pred;
                            _3785 = frontier_phi_88_pred_1;
                            _3784 = frontier_phi_88_pred_2;
                            _3783 = frontier_phi_88_pred_3;
                            _3782 = frontier_phi_88_pred_4;
                            _3781 = frontier_phi_88_pred_5;
                            _3490 = _3784 + _3503;
                            _3491 = _3785 + _3504;
                            _3492 = _3786 + _3505;
                            _3487 = _3781 + _3500;
                            _3488 = _3782 + _3501;
                            _3489 = _3783 + _3502;
                            if (_3507 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3507;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3492;
                        frontier_phi_82_pred_1 = _3491;
                        frontier_phi_82_pred_2 = _3490;
                        frontier_phi_82_pred_3 = _3489;
                        frontier_phi_82_pred_4 = _3488;
                        frontier_phi_82_pred_5 = _3487;
                    }
                    _3130 = frontier_phi_82_pred;
                    _3128 = frontier_phi_82_pred_1;
                    _3126 = frontier_phi_82_pred_2;
                    _3124 = frontier_phi_82_pred_3;
                    _3122 = frontier_phi_82_pred_4;
                    _3120 = frontier_phi_82_pred_5;
                    uint _3286 = _3285 + 1u;
                    if (_3286 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3279 = _3120;
                        _3280 = _3122;
                        _3281 = _3124;
                        _3282 = _3126;
                        _3283 = _3128;
                        _3284 = _3130;
                        _3285 = _3286;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3126;
                frontier_phi_63_64_ladder_1 = _3130;
                frontier_phi_63_64_ladder_2 = _3128;
                frontier_phi_63_64_ladder_3 = _3124;
                frontier_phi_63_64_ladder_4 = _3122;
                frontier_phi_63_64_ladder_5 = _3120;
            }
            else
            {
                frontier_phi_63_64_ladder = _3004;
                frontier_phi_63_64_ladder_1 = _3008;
                frontier_phi_63_64_ladder_2 = _3006;
                frontier_phi_63_64_ladder_3 = _3002;
                frontier_phi_63_64_ladder_4 = _3000;
                frontier_phi_63_64_ladder_5 = _2998;
            }
            _3119 = frontier_phi_63_64_ladder_5;
            _3121 = frontier_phi_63_64_ladder_4;
            _3123 = frontier_phi_63_64_ladder_3;
            _3125 = frontier_phi_63_64_ladder;
            _3127 = frontier_phi_63_64_ladder_2;
            _3129 = frontier_phi_63_64_ladder_1;
        }
        float _3134 = isnan(1.0) ? _871 : (isnan(_871) ? 1.0 : min(_871, 1.0));
        _2931 = (_3134 * _3125) + _2443;
        _2933 = (_3134 * _3127) + _2445;
        _2935 = (_3134 * _3129) + _2447;
        _2937 = ((_3119 * _855) * _3134) + _2781;
        _2939 = ((_3121 * _857) * _3134) + _2783;
        _2941 = ((_3123 * _858) * _3134) + _2785;
    }
    else
    {
        _2931 = _2443;
        _2933 = _2445;
        _2935 = _2447;
        _2937 = _2781;
        _2939 = _2783;
        _2941 = _2785;
    }
    float _4932 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4943 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4954 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _2958 = ((isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2931 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _871))) + ((_2937 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    float _2959 = ((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2933 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _871))) + ((_2939 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    float _2960 = ((isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_2935 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _871))) + ((_2941 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    uint _2961 = _244 + 6u;
    float _2969 = _793 / cbSceneParam._m0[86u].x;
    float _2970 = _794 / cbSceneParam._m0[86u].y;
    vec4 _2984 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2969, _2970, (log2((isnan(cbSceneParam._m0[77u].w) ? _715 : (isnan(_715) ? cbSceneParam._m0[77u].w : min(_715, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2986 = _2984.x;
    float _2987 = _2984.y;
    float _2988 = _2984.z;
    float _2989 = _2984.w;
    float _3061;
    float _3063;
    float _3065;
    float _3067;
    if (_715 > cbSceneParam._m0[78u].w)
    {
        float _3023 = isnan(_715) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _715 : min(cbSceneParam._m0[80u].w, _715));
        float _3024 = _3023 / _715;
        float _3035 = _3024 * _766;
        float _3036 = _767 * _3024;
        float _3037 = (-0.0) - _3036;
        float _3039 = _3024 * _768;
        float _3041 = (cbSceneParam._m0[77u].w * _3037) / _3023;
        float _3042 = _3041 + cbSceneParam._m0[79u].w;
        float _3043 = cbSceneParam._m0[79u].w - _3036;
        float _3049 = sqrt(((_3035 * _3035) + (_3036 * _3036)) + (_3039 * _3039));
        float _3052 = (1.0 - (cbSceneParam._m0[77u].w / _3023)) * _3049;
        float _3057 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3059 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3236;
        if (abs((_3037 - _3041) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3236 = ((((_3042 > 0.0) ? exp2(_3057 * _3042) : (2.0 - exp2(_3059 * _3042))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3052;
        }
        else
        {
            float _3180 = 1.0 / cbSceneParam._m0[80u].x;
            float _3181 = isnan(_3043) ? _3042 : (isnan(_3042) ? _3043 : max(_3042, _3043));
            float _3182 = isnan(_3043) ? _3042 : (isnan(_3042) ? _3043 : min(_3042, _3043));
            float _3191 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : min(_3181, 0.0));
            float _3192 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : min(_3182, 0.0));
            _3236 = ((abs(_3049 / _3037) * cbSceneParam._m0[80u].y) * ((((_3191 - _3192) * 2.0) - ((exp2(_3057 * (isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0)))) - exp2(_3057 * (isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))))) * _3180)) - ((exp2(_3059 * _3191) - exp2(_3059 * _3192)) * _3180))) + (_3052 * cbSceneParam._m0[80u].z);
        }
        vec4 _3238 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2969, _2970, 1.0), 0.0);
        float _3247 = exp2((_3236 * (-1.44269502162933349609375)) * (1.0 - _3238.w));
        float _3248 = log2(_3247);
        float _3264 = log2(_2989);
        _3061 = (exp2(_3264 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].x)) * _3238.x) / cbSceneParam._m0[78u].x)) + _2986;
        _3063 = (exp2(_3264 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].y)) * _3238.y) / cbSceneParam._m0[78u].y)) + _2987;
        _3065 = (exp2(_3264 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].z)) * _3238.z) / cbSceneParam._m0[78u].z)) + _2988;
        _3067 = _3247 * _2989;
    }
    else
    {
        _3061 = _2986;
        _3063 = _2987;
        _3065 = _2988;
        _3067 = _2989;
    }
    bool _3274;
    vec4 _3077;
    vec4 _3099;
    float _3101;
    float _3105;
    float _3106;
    float _3107;
    float _3108;
    bool _3118;
    for (;;)
    {
        _3077 = cbMatDynParam._m0[0u];
        float _3079 = roundEven(_3077.y);
        bool _3080 = _3079 == 3.0;
        float _3081 = log2(_3067);
        float _3088 = exp2(_3081 * cbSceneParam._m0[78u].x) * _2958;
        float _3089 = exp2(_3081 * cbSceneParam._m0[78u].y) * _2959;
        float _3090 = exp2(_3081 * cbSceneParam._m0[78u].z) * _2960;
        float _3097 = _782 + (-0.5);
        _3099 = cbMtdParam._m0[1u];
        _3101 = _3099.y * _3097;
        float _3104 = (_3079 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3105 = _3104 * (_3080 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3061)));
        _3106 = _3104 * (_3080 ? _3089 : (_3089 + (cbSceneParam._m0[72u].w * _3063)));
        _3107 = _3104 * (_3080 ? _3090 : (_3090 + (cbSceneParam._m0[72u].w * _3065)));
        _3108 = _3097 * 0.999000012874603271484375;
        _3118 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3118)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _3108) < 0.5)
            {
                _3274 = true;
                break;
            }
        }
        uint _3215 = _831 + uint(_3077.w);
        if ((cbInstanceData._m0[_3215].w < 1.0) && ((cbInstanceData._m0[_3215].w + _3108) < 0.5))
        {
            _3274 = true;
            break;
        }
        if ((_3101 + 1.0) < _3099.x)
        {
            _3274 = true;
            break;
        }
        _3274 = false;
        break;
    }
    float _3478;
    if (_3274)
    {
        discard_state = true;
        _3478 = 0.0;
    }
    else
    {
        _3478 = cbInstanceData._m0[_2961].w;
    }
    SV_Target.x = _3105;
    SV_Target.y = _3106;
    SV_Target.z = _3107;
    SV_Target.w = _3478;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2961].w;
    discard_exit();
}


