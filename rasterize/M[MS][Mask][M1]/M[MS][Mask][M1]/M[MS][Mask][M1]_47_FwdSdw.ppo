#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1391;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[23u].w) + _412) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3999 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _443 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_430 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325);
    float _446 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_430 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326);
    float _449 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_430 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327);
    vec4 _468 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _488 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _507 = _505.x;
    float _508 = _505.y;
    float _509 = _505.z;
    float _518 = ((_488.z - _509) * _430) + _509;
    float _521 = ((((_488.x - _507) * _430) + _507) * 2.0) + (-1.0);
    float _523 = ((((_488.y - _508) * _430) + _508) * 2.0) + (-1.0);
    float _524 = dot(vec2(_521, _523), vec2(_521, _523));
    float _4010 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _529 = sqrt(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _557 = (((_545.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _521;
    float _558 = (((_545.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _523;
    float _561 = fma(_529, _245, fma(_558, _252, _557 * _238));
    float _564 = fma(_529, _246, fma(_558, _253, _557 * _239));
    float _567 = fma(_529, _247, fma(_558, _254, _557 * _240));
    float _571 = inversesqrt(dot(vec3(_561, _564, _567), vec3(_561, _564, _567)));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _600 = _598.x;
    float _601 = 1.0 - _600;
    float _610 = (cbMtdParam._m0[19u].x + dot(vec4(_571 * _561, _571 * _564, _571 * _567, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_600 - _601) * cbMtdParam._m0[24u].z) + _601) * cbMtdParam._m0[21u].z);
    float _4021 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _613 = (-0.0) - cbMtdParam._m0[24u].x;
    float _615 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _615 : (isnan(_615) ? 1.0 : min(_615, 1.0));
    float _623 = _611 - ((_611 * TEXCOORD_8.x) * _616);
    float _624 = _611 - ((_611 * TEXCOORD_8.y) * _616);
    float _625 = _611 - ((_611 * TEXCOORD_8.z) * _616);
    float _632 = (_623 * ((_468.x * cbMtdParam._m0[18u].x) - _443)) + _443;
    float _633 = (_624 * ((_468.y * cbMtdParam._m0[18u].y) - _446)) + _446;
    float _634 = (_625 * ((_468.z * cbMtdParam._m0[18u].z) - _449)) + _449;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _648 = _646.x;
    float _649 = 1.0 - _648;
    float _675 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_648 - _649) * cbMtdParam._m0[24u].w) + _649) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4042 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _684 = ((((cbMtdParam._m0[10u].x - _632) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _676) + _632;
    float _685 = ((((cbMtdParam._m0[10u].y - _633) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _676) + _633;
    float _686 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _634)) * _676) + _634;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _712 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _714 = _712.x;
    float _731 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _714) * _430) + _714;
    float _735 = ((_698.x - _731) * cbMtdParam._m0[19u].z) + _731;
    float _737 = _735 - (_735 * _623);
    float _739 = _737 - (_737 * _676);
    float _743 = (cbMtdParam._m0[19u].w * (_545.z - _518)) + _518;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _764 = (_757.x * 2.0) + (-1.0);
    float _765 = (_757.y * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _4053 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _774 = ((_757.z - _743) * _623) + _743;
    float _777 = ((cbMtdParam._m0[23u].x - _774) * _676) + _774;
    vec4 _796 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _802 = (_796.x * 2.0) + (-1.0);
    float _803 = (_796.y * 2.0) + (-1.0);
    float _804 = dot(vec2(_802, _803), vec2(_802, _803));
    float _4064 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _819 = ((sqrt(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) - _529) * _625) + _529;
    float _822 = (((_764 - _557) * _623) + _557) + (cbMtdParam._m0[21u].x * _557);
    float _823 = (((_765 - _558) * _624) + _558) + (cbMtdParam._m0[21u].x * _558);
    float _834 = (((_802 - _822) + (_822 * cbMtdParam._m0[22u].z)) * _676) + _822;
    float _835 = (((_803 - _823) + (_823 * cbMtdParam._m0[22u].z)) * _676) + _823;
    float _836 = (_676 * (sqrt(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) - _819)) + _819;
    float _838 = cbMtdParam._m0[22u].x + _545.w;
    float _841 = fma(_836, _245, fma(_835, _252, _834 * _238));
    float _844 = fma(_836, _246, fma(_835, _253, _834 * _239));
    float _847 = fma(_836, _247, fma(_835, _254, _834 * _240));
    float _851 = inversesqrt(dot(vec3(_841, _844, _847), vec3(_841, _844, _847)));
    float _852 = _851 * _841;
    float _853 = _851 * _844;
    float _854 = _851 * _847;
    float _4075 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _855 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4097 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _4108 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4119 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4130 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _860 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _874 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _924 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _914);
    float _925 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _914);
    float _926 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _914);
    float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
    float _931 = _924 * _930;
    float _932 = _925 * _930;
    float _933 = _926 * _930;
    float _939 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _940 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _958 = fma(_854, cbSceneParam._m0[5u].z, fma(_853, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _852));
    float _961 = fma(_854, cbSceneParam._m0[6u].z, fma(_853, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _852));
    float _964 = fma(_854, cbSceneParam._m0[7u].z, fma(_853, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _852));
    uint _978 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _984 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * cbInstanceData._m0[_978].x;
    float _985 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * cbInstanceData._m0[_978].y;
    float _986 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * cbInstanceData._m0[_978].z;
    float _4141 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _987 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _4152 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _4163 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _989 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _990 = 1.0 - _860;
    float _991 = _987 * _990;
    float _992 = _988 * _990;
    float _993 = _989 * _990;
    float _998 = (_987 + (-0.039999999105930328369140625)) * _860;
    float _999 = (_988 + (-0.039999999105930328369140625)) * _860;
    float _1000 = (_989 + (-0.039999999105930328369140625)) * _860;
    float _1001 = _998 + 0.039999999105930328369140625;
    float _1003 = _999 + 0.039999999105930328369140625;
    float _1004 = _1000 + 0.039999999105930328369140625;
    vec4 _1013 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _939, cbSceneParam._m0[86u].y * _940));
    float _1017 = ((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * TEXCOORD_5.w) * _1013.x;
    float _1018 = dot(vec3(_852, _853, _854), vec3(_931, _932, _933));
    float _1021 = _1018 * 2.0;
    float _1025 = (_1021 * _852) - _931;
    float _1026 = (_1021 * _853) - _932;
    float _1027 = (_1021 * _854) - _933;
    float _1031 = abs(dot(vec3(_931, _932, _933), vec3(_852, _853, _854)));
    float _4174 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1033 = sqrt(_855);
    float _1046 = exp2((_1033 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1033 * 3.0));
    float _1052 = (1.0 - _1046) * ((_1033 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1053 = _1046 * _1033;
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1390;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1115 = fma(_1089, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081));
        float _1119 = fma(_1089, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081));
        float _1123 = fma(_1089, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081));
        float _1148 = _1081 + _852;
        float _1149 = _1085 + _853;
        float _1150 = _1089 + _854;
        float _1160 = fma(_1150, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1148)) - _1115;
        float _1161 = fma(_1150, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1148)) - _1119;
        float _1162 = fma(_1150, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1148)) - _1123;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1179 = ((_1166 * _1160) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1115 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1166 * _1161) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1119 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1166 * _1162) / cbModelParam._m0[34u].z) + ((((((_1123 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        float _1218 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1184.x + (-0.5));
        float _1220 = _1218 * (_1184.y + (-0.5));
        float _1221 = _1218 * (_1184.z + (-0.5));
        float _1228 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1191.x + (-0.5));
        float _1230 = _1228 * (_1191.y + (-0.5));
        float _1231 = _1228 * (_1191.z + (-0.5));
        float _1238 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1198.x + (-0.5));
        float _1240 = _1238 * (_1198.y + (-0.5));
        float _1241 = _1238 * (_1198.z + (-0.5));
        float _1248 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1205.x + (-0.5));
        float _1250 = _1248 * (_1205.y + (-0.5));
        float _1251 = _1248 * (_1205.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1272 = (dot(vec3(_852, _853, _854), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1282 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4222 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1284 + 1.0))) + _1289) * _1252;
        float _1299 = _1220 * 0.5;
        float _1300 = _1230 * 0.5;
        float _1301 = _1240 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_852, _853, _854), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4255 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1326 + 1.0))) + _1331) * _1253;
        float _1341 = _1221 * 0.5;
        float _1342 = _1231 * 0.5;
        float _1343 = _1241 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_852, _853, _854), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4288 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1368 + 1.0))) + _1373) * _1254;
        _1390 = _1221;
        _1392 = _1220;
        _1393 = _1219;
        _1394 = _1231;
        _1395 = _1230;
        _1396 = _1229;
        _1397 = _1241;
        _1398 = _1240;
        _1399 = _1239;
        _1400 = _1254;
        _1401 = _1253;
        _1402 = _1252;
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1391;
        _1392 = _1391;
        _1393 = _1391;
        _1394 = _1391;
        _1395 = _1391;
        _1396 = _1391;
        _1397 = _1391;
        _1398 = _1391;
        _1399 = _1391;
        _1400 = _1391;
        _1401 = _1391;
        _1402 = _1391;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1430 = fma(_1089, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1081));
        float _1434 = fma(_1089, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1081));
        float _1438 = fma(_1089, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1081));
        float _1461 = _1081 + _852;
        float _1462 = _1085 + _853;
        float _1463 = _1089 + _854;
        float _1473 = fma(_1463, cbModelParam._m0[30u].z, fma(_1462, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1461)) - _1430;
        float _1474 = fma(_1463, cbModelParam._m0[31u].z, fma(_1462, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1461)) - _1434;
        float _1475 = fma(_1463, cbModelParam._m0[32u].z, fma(_1462, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1461)) - _1438;
        float _1479 = inversesqrt(dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475)));
        float _1492 = ((_1479 * _1473) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1430 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1493 = ((_1479 * _1474) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1434 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1494 = ((_1479 * _1475) / cbModelParam._m0[35u].z) + ((((((_1438 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1492, _1493, _1494), 0.0);
        float _1529 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1496.x + (-0.5));
        float _1531 = _1529 * (_1496.y + (-0.5));
        float _1532 = _1529 * (_1496.z + (-0.5));
        float _1539 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1503.x + (-0.5));
        float _1541 = _1539 * (_1503.y + (-0.5));
        float _1542 = _1539 * (_1503.z + (-0.5));
        float _1549 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1510.x + (-0.5));
        float _1551 = _1549 * (_1510.y + (-0.5));
        float _1552 = _1549 * (_1510.z + (-0.5));
        float _1559 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1517.x + (-0.5));
        float _1561 = _1559 * (_1517.y + (-0.5));
        float _1562 = _1559 * (_1517.z + (-0.5));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1566 = _1530 * 0.5;
        float _1567 = _1540 * 0.5;
        float _1568 = _1550 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_852, _853, _854), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4351 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1593 + 1.0))) + _1598) * _1563;
        float _1608 = _1531 * 0.5;
        float _1609 = _1541 * 0.5;
        float _1610 = _1551 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_852, _853, _854), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4384 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1635 + 1.0))) + _1640) * _1564;
        float _1650 = _1532 * 0.5;
        float _1651 = _1542 * 0.5;
        float _1652 = _1552 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_852, _853, _854), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1565 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4417 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1677 + 1.0))) + _1682) * _1565;
        _1699 = _1532;
        _1700 = _1531;
        _1701 = _1530;
        _1702 = _1542;
        _1703 = _1541;
        _1704 = _1540;
        _1705 = _1552;
        _1706 = _1551;
        _1707 = _1550;
        _1708 = _1565;
        _1709 = _1564;
        _1710 = _1563;
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
        _1713 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
    }
    else
    {
        _1699 = _1391;
        _1700 = _1391;
        _1701 = _1391;
        _1702 = _1391;
        _1703 = _1391;
        _1704 = _1391;
        _1705 = _1391;
        _1706 = _1391;
        _1707 = _1391;
        _1708 = _1391;
        _1709 = _1391;
        _1710 = _1391;
        _1711 = 0.0;
        _1712 = 0.0;
        _1713 = 0.0;
    }
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1403)) + _1403;
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1404)) + _1404;
    float _1725 = (cbModelParam._m0[1u].x * (_1713 - _1405)) + _1405;
    float _1746 = fma(_1725, cbSceneParam._m0[89u].z, fma(_1724, cbSceneParam._m0[89u].y, _1723 * cbSceneParam._m0[89u].x));
    float _1749 = fma(_1725, cbSceneParam._m0[90u].z, fma(_1724, cbSceneParam._m0[90u].y, _1723 * cbSceneParam._m0[90u].x));
    float _1752 = fma(_1725, cbSceneParam._m0[91u].z, fma(_1724, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1723));
    float _1767 = _1025 * 0.5;
    float _1768 = _1026 * 0.5;
    float _1769 = _1027 * 0.5;
    float _1770 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1701, _1704, _1707, _1710));
    float _1773 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1776 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1810;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1783 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1390, _1394, _1397, _1400));
        float _1787 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1392, _1395, _1398, _1401));
        float _1791 = dot(vec4(_1767, _1768, _1769, 1.0), vec4(_1393, _1396, _1399, _1402));
        float _1798 = dot(vec4(cbModelParam._m0[39u]), vec4(_1767, _1768, _1769, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1821;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1812 = dot(vec4(cbModelParam._m0[40u]), vec4(_1767, _1768, _1769, 1.0));
        _1821 = dot(vec3(isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1821 = 1.0;
    }
    float _1825 = (_1821 * cbModelParam._m0[1u].x) + (_1810 * (1.0 - cbModelParam._m0[1u].x));
    float _1835 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _855);
    float _1836 = isnan(_1835) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1835 : min(cbModelParam._m0[25u].z, _1835));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1883 = fma(_1089, cbModelParam._m0[13u].z, fma(_1085, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081)) + cbModelParam._m0[13u].w;
        float _1887 = fma(_1089, cbModelParam._m0[14u].z, fma(_1085, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081)) + cbModelParam._m0[14u].w;
        float _1891 = fma(_1089, cbModelParam._m0[15u].z, fma(_1085, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081)) + cbModelParam._m0[15u].w;
        float _1894 = fma(_1027, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1025));
        float _1897 = fma(_1027, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1025));
        float _1900 = fma(_1027, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1025));
        float _1928;
        if (_1894 > 0.0)
        {
            _1928 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1928 = frontier_phi_14_12_ladder;
        }
        float _2099;
        if (_1897 > 0.0)
        {
            _2099 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2099 = frontier_phi_23_19_ladder;
        }
        float _2394;
        if (_1900 > 0.0)
        {
            _2394 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2394 = frontier_phi_35_30_ladder;
        }
        float _2396 = isnan(_2099) ? _1928 : (isnan(_1928) ? _2099 : min(_1928, _2099));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1894) + _1883;
        float _2402 = (_2397 * _1897) + _1887;
        float _2403 = (_2397 * _1900) + _1891;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2406 = (-1.0) - _2404;
        float _2408 = _2404 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2403 > _2408) || ((_2403 < _2406) || ((_2402 > _2408) || ((_2402 < _2406) || ((_2401 < _2406) || (_2401 > _2408))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2548 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2403, cbModelParam._m0[9u].z, fma(_2402, cbModelParam._m0[9u].y, _2401 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2403, cbModelParam._m0[10u].z, fma(_2402, cbModelParam._m0[10u].y, _2401 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2403, cbModelParam._m0[11u].z, fma(_2402, cbModelParam._m0[11u].y, _2401 * cbModelParam._m0[11u].x))), _1836);
            frontier_phi_13_35_ladder = _2548.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2548.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2548.x * cbModelParam._m0[1u].y;
        }
        _1916 = frontier_phi_13_35_ladder_2;
        _1918 = frontier_phi_13_35_ladder_1;
        _1920 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1025, _1026, _1027), _1836);
        _1916 = _1904.x * cbModelParam._m0[1u].y;
        _1918 = _1904.y * cbModelParam._m0[1u].y;
        _1920 = _1904.z * cbModelParam._m0[1u].y;
    }
    float _1924 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _855);
    float _1925 = isnan(_1924) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1924 : min(cbModelParam._m0[25u].w, _1924));
    float _2014;
    float _2016;
    float _2018;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1978 = fma(_1089, cbModelParam._m0[21u].z, fma(_1085, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081)) + cbModelParam._m0[21u].w;
        float _1982 = fma(_1089, cbModelParam._m0[22u].z, fma(_1085, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081)) + cbModelParam._m0[22u].w;
        float _1986 = fma(_1089, cbModelParam._m0[23u].z, fma(_1085, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081)) + cbModelParam._m0[23u].w;
        float _1989 = fma(_1027, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1025));
        float _1992 = fma(_1027, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1025));
        float _1995 = fma(_1027, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1025));
        float _2104;
        if (_1989 > 0.0)
        {
            _2104 = abs((1.0 - _1978) / _1989);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1978 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2104 = frontier_phi_25_21_ladder;
        }
        float _2421;
        if (_1992 > 0.0)
        {
            _2421 = abs((1.0 - _1982) / _1992);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1982 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2421 = frontier_phi_37_32_ladder;
        }
        float _2759;
        if (_1995 > 0.0)
        {
            _2759 = abs((1.0 - _1986) / _1995);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1986 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2759 = frontier_phi_47_44_ladder;
        }
        float _2761 = isnan(_2421) ? _2104 : (isnan(_2104) ? _2421 : min(_2104, _2421));
        float _2762 = isnan(_2759) ? _2761 : (isnan(_2761) ? _2759 : min(_2761, _2759));
        float _2766 = (_2762 * _1989) + _1978;
        float _2767 = (_2762 * _1992) + _1982;
        float _2768 = (_2762 * _1995) + _1986;
        float _2769 = _2762 * 9.9999997473787516355514526367188e-05;
        float _2770 = (-1.0) - _2769;
        float _2772 = _2769 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2768 > _2772) || ((_2768 < _2770) || ((_2767 > _2772) || ((_2767 < _2770) || ((_2766 < _2770) || (_2766 > _2772))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2890 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2768, cbModelParam._m0[17u].z, fma(_2767, cbModelParam._m0[17u].y, _2766 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2768, cbModelParam._m0[18u].z, fma(_2767, cbModelParam._m0[18u].y, _2766 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2768, cbModelParam._m0[19u].z, fma(_2767, cbModelParam._m0[19u].y, _2766 * cbModelParam._m0[19u].x))), _1925);
            frontier_phi_22_47_ladder = _2890.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2890.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2890.x * cbModelParam._m0[1u].z;
        }
        _2014 = frontier_phi_22_47_ladder_2;
        _2016 = frontier_phi_22_47_ladder_1;
        _2018 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1998 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1025, _1026, _1027), _1925);
        _2014 = _1998.x * cbModelParam._m0[1u].z;
        _2016 = _1998.y * cbModelParam._m0[1u].z;
        _2018 = _1998.z * cbModelParam._m0[1u].z;
    }
    float _2031 = (((_1052 * _1001) + _1053) * _1017) * ((cbModelParam._m0[1u].w * (_2014 - _1916)) + _1916);
    float _2033 = (((_1052 * _1003) + _1053) * _1017) * ((cbModelParam._m0[1u].w * (_2016 - _1918)) + _1918);
    float _2035 = (((_1052 * _1004) + _1053) * _1017) * ((cbModelParam._m0[1u].w * (_2018 - _1920)) + _1920);
    float _2038 = fma(_2035, cbSceneParam._m0[89u].z, fma(_2033, cbSceneParam._m0[89u].y, _2031 * cbSceneParam._m0[89u].x));
    float _2041 = fma(_2035, cbSceneParam._m0[90u].z, fma(_2033, cbSceneParam._m0[90u].y, _2031 * cbSceneParam._m0[90u].x));
    float _2044 = fma(_2035, cbSceneParam._m0[91u].z, fma(_2033, cbSceneParam._m0[91u].y, _2031 * cbSceneParam._m0[91u].x));
    float _2078 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2082 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2086 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2090 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2091 = _2078 / _2090;
    float _2092 = _2082 / _2090;
    float _2093 = _2086 / _2090;
    float _2240;
    float _2241;
    float _2242;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2120 = ((uint(_2093 > cbSceneParam._m0[59u].y) + uint(_2093 > cbSceneParam._m0[59u].x)) + uint(_2093 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2121 = _2120 + 43u;
        uint _2129 = _2120 + 44u;
        uint _2137 = _2120 + 45u;
        uint _2145 = _2120 + 46u;
        float _2156 = fma(_2090, cbSceneParam._m0[_2121].w, fma(_2086, cbSceneParam._m0[_2121].z, fma(_2082, cbSceneParam._m0[_2121].y, _2078 * cbSceneParam._m0[_2121].x)));
        float _2160 = fma(_2090, cbSceneParam._m0[_2129].w, fma(_2086, cbSceneParam._m0[_2129].z, fma(_2082, cbSceneParam._m0[_2129].y, _2078 * cbSceneParam._m0[_2129].x)));
        float _2168 = fma(_2090, cbSceneParam._m0[_2145].w, fma(_2086, cbSceneParam._m0[_2145].z, fma(_2082, cbSceneParam._m0[_2145].y, _2078 * cbSceneParam._m0[_2145].x)));
        float _2173 = cbSceneParam._m0[33u].z * _2168;
        float _2175 = cbSceneParam._m0[33u].w * _2168;
        float _2178 = fma(_2090, cbSceneParam._m0[_2137].w, fma(_2086, cbSceneParam._m0[_2137].z, fma(_2082, cbSceneParam._m0[_2137].y, _2078 * cbSceneParam._m0[_2137].x))) / _2168;
        float _2226 = (cbSceneParam._m0[33u].x - sqrt(((_2092 * _2092) + (_2091 * _2091)) + (_2093 * _2093))) * cbSceneParam._m0[33u].y;
        float _4543 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2233 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 + _2156) / _2168, (_2175 + _2160) / _2168), _2178), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2175 + _2156) / _2168, (_2160 - _2173) / _2168), _2178), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2156 - _2173) / _2168, (_2160 - _2175) / _2168), _2178), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2156 - _2175) / _2168, (_2173 + _2160) / _2168), _2178), 0.0)).x), vec4(0.25)));
        _2240 = 1.0 - (_2233 * cbSceneParam._m0[34u].x);
        _2241 = 1.0 - (_2233 * cbSceneParam._m0[34u].y);
        _2242 = 1.0 - (_2233 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2240 = 1.0;
        _2241 = 1.0;
        _2242 = 1.0;
    }
    float _2306;
    float _2308;
    float _2310;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2294 = fma(_2090, cbSceneParam._m0[63u].w, fma(_2086, cbSceneParam._m0[63u].z, fma(_2082, cbSceneParam._m0[63u].y, _2078 * cbSceneParam._m0[63u].x)));
        float _2295 = fma(_2090, cbSceneParam._m0[60u].w, fma(_2086, cbSceneParam._m0[60u].z, fma(_2082, cbSceneParam._m0[60u].y, _2078 * cbSceneParam._m0[60u].x))) / _2294;
        float _2296 = fma(_2090, cbSceneParam._m0[61u].w, fma(_2086, cbSceneParam._m0[61u].z, fma(_2082, cbSceneParam._m0[61u].y, _2078 * cbSceneParam._m0[61u].x))) / _2294;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2295 >= cbSceneParam._m0[64u].x) && (_2296 >= cbSceneParam._m0[64u].y)) && (_2295 <= cbSceneParam._m0[64u].z)) && (_2296 <= cbSceneParam._m0[64u].w))
        {
            float _2434 = fma(_2090, cbSceneParam._m0[62u].w, fma(_2086, cbSceneParam._m0[62u].z, fma(_2082, cbSceneParam._m0[62u].y, _2078 * cbSceneParam._m0[62u].x))) / _2294;
            float _2438 = isnan(cbSceneParam._m0[41u].w) ? _2434 : (isnan(_2434) ? cbSceneParam._m0[41u].w : max(_2434, cbSceneParam._m0[41u].w));
            float _2481 = (cbSceneParam._m0[33u].x - sqrt(((_2092 * _2092) + (_2091 * _2091)) + (_2093 * _2093))) * cbSceneParam._m0[33u].y;
            float _4559 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
            float _2488 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2295, cbSceneParam._m0[33u].w + _2296), _2438), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2295, _2296 - cbSceneParam._m0[33u].z), _2438), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2295 - cbSceneParam._m0[33u].z, _2296 - cbSceneParam._m0[33u].w), _2438), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2295 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2296), _2438), 0.0)).x), vec4(0.25)));
            float _2492 = 1.0 - (_2488 * cbSceneParam._m0[34u].x);
            float _2493 = 1.0 - (_2488 * cbSceneParam._m0[34u].y);
            float _2494 = 1.0 - (_2488 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2494) ? _2242 : (isnan(_2242) ? _2494 : min(_2242, _2494));
            frontier_phi_34_33_ladder_1 = isnan(_2493) ? _2241 : (isnan(_2241) ? _2493 : min(_2241, _2493));
            frontier_phi_34_33_ladder_2 = isnan(_2492) ? _2240 : (isnan(_2240) ? _2492 : min(_2240, _2492));
        }
        else
        {
            frontier_phi_34_33_ladder = _2242;
            frontier_phi_34_33_ladder_1 = _2241;
            frontier_phi_34_33_ladder_2 = _2240;
        }
        _2306 = frontier_phi_34_33_ladder_2;
        _2308 = frontier_phi_34_33_ladder_1;
        _2310 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2306 = _2240;
        _2308 = _2241;
        _2310 = _2242;
    }
    uvec4 _2315 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2317 = _2315.x * 14u;
    uint _2318 = _2317 + 13u;
    float _2325 = _1017 + (-1.0);
    float _2330 = (cbLight._m0[_2318].x * _2325) + 1.0;
    float _2331 = (cbLight._m0[_2318].y * _2325) + 1.0;
    float _2332 = (cbLight._m0[_2318].z * _2325) + 1.0;
    float _2333 = (cbLight._m0[_2318].w * _2325) + 1.0;
    uint _2334 = _2317 + 5u;
    float _2340 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
    uint _2344 = _2317 + 4u;
    float _2353 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
    uint _2357 = _2317 | 1u;
    float _2368 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_852, _853, _854));
    float _2371 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_852, _853, _854));
    float _4595 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _4606 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2376 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * 0.3183098733425140380859375;
    float _2378 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * 0.3183098733425140380859375;
    float _2385 = ((cbLight._m0[_2334].x * _2340) * _2378) + (((cbLight._m0[_2344].x * _2306) * _2353) * _2376);
    float _2386 = ((_2340 * cbLight._m0[_2334].y) * _2378) + (((cbLight._m0[_2344].y * _2308) * _2353) * _2376);
    float _2387 = ((_2340 * cbLight._m0[_2334].z) * _2378) + (((cbLight._m0[_2344].z * _2310) * _2353) * _2376);
    uvec4 _2391 = floatBitsToUint(cbLight._m0[_2317 + 12u]);
    bool _2393 = _2391.x == 0u;
    float _2495;
    float _2497;
    float _2499;
    if (_2393)
    {
        _2495 = _2385;
        _2497 = _2386;
        _2499 = _2387;
    }
    else
    {
        uint _2503 = _2317 + 6u;
        float _2519 = (dot(vec3(cbLight._m0[_2317 + 2u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2520 = _2519 * _2519;
        float _4617 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2521 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2522 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
        _2495 = (((cbLight._m0[_2503].x * 0.3183098733425140380859375) * _2521) * _2522) + _2385;
        _2497 = (((cbLight._m0[_2503].y * 0.3183098733425140380859375) * _2521) * _2522) + _2386;
        _2499 = (((cbLight._m0[_2503].z * 0.3183098733425140380859375) * _2521) * _2522) + _2387;
    }
    bool _2502 = _2391.y == 0u;
    float _2557;
    float _2559;
    float _2561;
    if (_2502)
    {
        _2557 = _2495;
        _2559 = _2497;
        _2561 = _2499;
    }
    else
    {
        uint _2730 = _2317 + 7u;
        float _2746 = (dot(vec3(cbLight._m0[_2317 + 3u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2747 = _2746 * _2746;
        float _4633 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2748 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2749 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
        _2557 = (((cbLight._m0[_2730].x * 0.3183098733425140380859375) * _2748) * _2749) + _2495;
        _2559 = (((cbLight._m0[_2730].y * 0.3183098733425140380859375) * _2748) * _2749) + _2497;
        _2561 = (((cbLight._m0[_2730].z * 0.3183098733425140380859375) * _2748) * _2749) + _2499;
    }
    uint _2564 = _2317 + 8u;
    float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2317].w)) * _855) * 0.949999988079071044921875);
    float _2578 = _2577 * _2577;
    float _2579 = cbLight._m0[_2317].x + _931;
    float _2580 = cbLight._m0[_2317].y + _932;
    float _2581 = cbLight._m0[_2317].z + _933;
    float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
    float _2586 = _2585 * _2579;
    float _2587 = _2585 * _2580;
    float _2588 = _2585 * _2581;
    float _2589 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2317].xyz));
    float _4649 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _4660 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _2593 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
    float _2594 = dot(vec3(_852, _853, _854), vec3(_2586, _2587, _2588));
    float _4671 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2597 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
    float _2598 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_2586, _2587, _2588));
    float _4682 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2602 = _2578 * _2578;
    float _2606 = ((_2597 * _2597) * (_2602 + (-1.0))) + 1.0;
    float _2614 = exp2(log2(1.0 - (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) * 5.0);
    float _2615 = 0.959999978542327880859375 - _998;
    float _2617 = 0.959999978542327880859375 - _999;
    float _2618 = 0.959999978542327880859375 - _1000;
    float _2625 = 1.0 - _2578;
    float _2636 = (0.5 / (((_2593 * ((_2592 * _2625) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2593 * _2625) + _2578) * _2592))) * _2592;
    float _4693 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2638 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2602 / ((_2606 * _2606) * 3.141590118408203125));
    uint _2652 = _2317 + 9u;
    float _2663 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _855) * 0.949999988079071044921875);
    float _2664 = _2663 * _2663;
    float _2665 = cbLight._m0[_2357].x + _931;
    float _2666 = cbLight._m0[_2357].y + _932;
    float _2667 = cbLight._m0[_2357].z + _933;
    float _2671 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
    float _2672 = _2671 * _2665;
    float _2673 = _2671 * _2666;
    float _2674 = _2671 * _2667;
    float _2675 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2357].xyz));
    float _4704 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2678 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _2679 = dot(vec3(_852, _853, _854), vec3(_2672, _2673, _2674));
    float _4715 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2682 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2683 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2672, _2673, _2674));
    float _4726 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2687 = _2664 * _2664;
    float _2691 = ((_2682 * _2682) * (_2687 + (-1.0))) + 1.0;
    float _2698 = exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0);
    float _2705 = 1.0 - _2664;
    float _2715 = (0.5 / (((_2593 * ((_2678 * _2705) + _2664)) + 9.9999999392252902907785028219223e-09) + (((_2593 * _2705) + _2664) * _2678))) * _2678;
    float _4737 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2717 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2687 / ((_2691 * _2691) * 3.141590118408203125));
    float _2727 = (((((_2698 * _2615) + _1001) * cbLight._m0[_2652].x) * _2717) * _2340) + ((((cbLight._m0[_2564].x * _2306) * ((_2614 * _2615) + _1001)) * _2638) * _2353);
    float _2728 = (((((_2698 * _2617) + _1003) * cbLight._m0[_2652].y) * _2717) * _2340) + ((((cbLight._m0[_2564].y * _2308) * ((_2614 * _2617) + _1003)) * _2638) * _2353);
    float _2729 = (((((_2698 * _2618) + _1004) * cbLight._m0[_2652].z) * _2717) * _2340) + ((((cbLight._m0[_2564].z * _2310) * ((_2614 * _2618) + _1004)) * _2638) * _2353);
    float _2785;
    float _2787;
    float _2789;
    if (_2393)
    {
        _2785 = _2727;
        _2787 = _2728;
        _2789 = _2729;
    }
    else
    {
        uint _2791 = _2317 + 2u;
        uint _2795 = _2317 + 10u;
        float _2809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2791].w)) * _855) * 0.949999988079071044921875);
        float _2810 = _2809 * _2809;
        float _2811 = cbLight._m0[_2791].x + _931;
        float _2812 = cbLight._m0[_2791].y + _932;
        float _2813 = cbLight._m0[_2791].z + _933;
        float _2817 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
        float _2818 = _2817 * _2811;
        float _2819 = _2817 * _2812;
        float _2820 = _2817 * _2813;
        float _2821 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2791].xyz));
        float _4748 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2824 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2825 = dot(vec3(_852, _853, _854), vec3(_2818, _2819, _2820));
        float _4759 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2828 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _2829 = dot(vec3(cbLight._m0[_2791].xyz), vec3(_2818, _2819, _2820));
        float _4770 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2833 = _2810 * _2810;
        float _2837 = ((_2828 * _2828) * (_2833 + (-1.0))) + 1.0;
        float _2844 = exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0);
        float _2851 = 1.0 - _2810;
        float _2861 = (0.5 / (((_2593 * ((_2824 * _2851) + _2810)) + 9.9999999392252902907785028219223e-09) + (((_2593 * _2851) + _2810) * _2824))) * _2824;
        float _4781 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2863 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2833 / ((_2837 * _2837) * 3.141590118408203125));
        float _2864 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
        _2785 = (((((_2844 * _2615) + _1001) * cbLight._m0[_2795].x) * _2863) * _2864) + _2727;
        _2787 = (((((_2844 * _2617) + _1003) * cbLight._m0[_2795].y) * _2863) * _2864) + _2728;
        _2789 = (((((_2844 * _2618) + _1004) * cbLight._m0[_2795].z) * _2863) * _2864) + _2729;
    }
    float _2895;
    float _2897;
    float _2899;
    if (_2502)
    {
        _2895 = _2785;
        _2897 = _2787;
        _2899 = _2789;
    }
    else
    {
        uint _2906 = _2317 + 3u;
        uint _2910 = _2317 + 11u;
        float _2924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2906].w)) * _855) * 0.949999988079071044921875);
        float _2925 = _2924 * _2924;
        float _2926 = cbLight._m0[_2906].x + _931;
        float _2927 = cbLight._m0[_2906].y + _932;
        float _2928 = cbLight._m0[_2906].z + _933;
        float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
        float _2933 = _2932 * _2926;
        float _2934 = _2932 * _2927;
        float _2935 = _2932 * _2928;
        float _2936 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2906].xyz));
        float _4797 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2939 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2940 = dot(vec3(_852, _853, _854), vec3(_2933, _2934, _2935));
        float _4808 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2943 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2944 = dot(vec3(cbLight._m0[_2906].xyz), vec3(_2933, _2934, _2935));
        float _4819 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2948 = _2925 * _2925;
        float _2952 = ((_2943 * _2943) * (_2948 + (-1.0))) + 1.0;
        float _2959 = exp2(log2(1.0 - (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0)))) * 5.0);
        float _2966 = 1.0 - _2925;
        float _2976 = (0.5 / (((_2593 * ((_2939 * _2966) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2593 * _2966) + _2925) * _2939))) * _2939;
        float _4830 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2978 = (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2948 / ((_2952 * _2952) * 3.141590118408203125));
        float _2979 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
        _2895 = (((((_2959 * _2615) + _1001) * cbLight._m0[_2910].x) * _2978) * _2979) + _2785;
        _2897 = (((((_2959 * _2617) + _1003) * cbLight._m0[_2910].y) * _2978) * _2979) + _2787;
        _2899 = (((((_2959 * _2618) + _1004) * cbLight._m0[_2910].z) * _2978) * _2979) + _2789;
    }
    float _3045;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    float _3055;
    if (_2315.y == 0u)
    {
        uvec4 _3000 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3001 = _3000.x;
        uint _3012 = uint((float(_3000.y) * floor(float(uint(cbSceneParam._m0[85u].y * _940) / _3001))) + floor(float(uint(cbSceneParam._m0[85u].x * _939) / _3001)));
        float _3022 = (log2(_2093 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3023 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
        uint _3026 = uint(isnan(14.0) ? _3023 : (isnan(_3023) ? 14.0 : min(_3023, 14.0)));
        uvec4 _3031 = texelFetch(g_lightClusterGridBuffer, int(((_3026 << 2u) + (_3012 << 6u)) >> 2u));
        uint _3032 = _3031.x;
        uint _3033 = _3000.z;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        if (((((1u << ((_3033 >> 4u) & 15u)) + 4294967295u) & _3032) == 0u) || ((_3033 & 240u) == 0u))
        {
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
            _3122 = 0.0;
        }
        else
        {
            float _3113;
            float _3115;
            float _3117;
            float _3119;
            float _3121;
            float _3123;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            uint _3262 = 0u;
            uint _3271;
            bool _3272;
            for (;;)
            {
                _3271 = texelFetch(g_lightClassification, int((((_3026 << 5u) + (_3012 << 9u)) + (_3262 << 2u)) >> 2u)).x;
                _3272 = _3271 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3272)
                {
                    frontier_phi_66_pred = _3261;
                    frontier_phi_66_pred_1 = _3260;
                    frontier_phi_66_pred_2 = _3259;
                    frontier_phi_66_pred_3 = _3258;
                    frontier_phi_66_pred_4 = _3257;
                    frontier_phi_66_pred_5 = _3256;
                }
                else
                {
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    uint _3386;
                    _3380 = _3256;
                    _3381 = _3257;
                    _3382 = _3258;
                    _3383 = _3259;
                    _3384 = _3260;
                    _3385 = _3261;
                    _3386 = _3271;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    for (;;)
                    {
                        uint _3390 = uint(findLSB(_3386)) + (_3262 << 5u);
                        uint _3387 = (_3386 + 4294967295u) & _3386;
                        uint _3392 = _3390 * 48u;
                        vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3392)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 3u)).x));
                        uint _3412 = (_3390 * 48u) + 4u;
                        vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3412)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 3u)).x));
                        uint _3431 = (_3390 * 48u) + 8u;
                        vec3 _3442 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3431)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 2u)).x));
                        float _3446 = _3406.x - _2091;
                        float _3447 = _3406.y - _2092;
                        float _3448 = _3406.z - _2093;
                        float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                        float _3452 = inversesqrt(_3449);
                        float _3453 = _3452 * _3446;
                        float _3454 = _3452 * _3447;
                        float _3455 = _3452 * _3448;
                        float _3456 = dot(vec3(_958, _961, _964), vec3(_3453, _3454, _3455));
                        float _3461 = 1.0 - (_3449 * _3406.w);
                        float _4856 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3462 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                        float _3463 = sqrt(_3449) * _3425.w;
                        float _3466 = 1.39999997615814208984375 / (_3463 + 1.39999997615814208984375);
                        float _3467 = _3466 * _3466;
                        float _3470 = ((1.0 - _3467) * _3456) + _3467;
                        float _3473 = _3463 * _3463;
                        float _3477 = ((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3462) / ((_3473 * 0.699999988079071044921875) + 1.0);
                        float _3481 = (-0.0) - _2091;
                        float _3482 = (-0.0) - _2092;
                        float _3483 = (-0.0) - _2093;
                        float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                        float _3488 = _3487 * _3481;
                        float _3489 = _3487 * _3482;
                        float _3490 = _3487 * _3483;
                        float _3497 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                        float _3498 = 1.0 - _1033;
                        float _3505 = sqrt(1.0 - ((1.0 - (_3498 * _3498)) * (1.0 - (_3497 * _3497))));
                        float _3506 = _3505 * _3505;
                        float _3507 = _3506 * _3506;
                        float _3508 = _3488 + _3453;
                        float _3509 = _3489 + _3454;
                        float _3510 = _3490 + _3455;
                        float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                        float _3518 = dot(vec3(_958, _961, _964), vec3(_3488, _3489, _3490));
                        float _4872 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3521 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                        float _3522 = dot(vec3(_958, _961, _964), vec3(_3514 * _3508, _3514 * _3509, _3514 * _3510));
                        float _4883 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3525 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                        float _3529 = ((_3525 * _3525) * (_3507 + (-1.0))) + 1.0;
                        float _3530 = _3466 * _3506;
                        float _3531 = _3530 * _3530;
                        float _3534 = ((1.0 - _3531) * _3456) + _3531;
                        float _4894 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3535 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                        float _3536 = 1.0 - _3506;
                        float _3546 = (0.5 / (((_3535 * ((_3521 * _3536) + _3506)) + 9.9999999392252902907785028219223e-09) + (((_3535 * _3536) + _3506) * _3521))) * _3535;
                        float _4905 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3557 = (((_3507 * 3.1415927410125732421875) * (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0)))) / ((_3529 * _3529) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125))) * _3462;
                        _3315 = (_3477 * _3425.x) + _3383;
                        _3316 = (_3477 * _3425.y) + _3384;
                        _3317 = (_3477 * _3425.z) + _3385;
                        _3312 = (_3557 * _3442.x) + _3380;
                        _3313 = (_3557 * _3442.y) + _3381;
                        _3314 = (_3557 * _3442.z) + _3382;
                        if (_3387 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3380 = _3312;
                            _3381 = _3313;
                            _3382 = _3314;
                            _3383 = _3315;
                            _3384 = _3316;
                            _3385 = _3317;
                            _3386 = _3387;
                        }
                    }
                    frontier_phi_66_pred = _3317;
                    frontier_phi_66_pred_1 = _3316;
                    frontier_phi_66_pred_2 = _3315;
                    frontier_phi_66_pred_3 = _3314;
                    frontier_phi_66_pred_4 = _3313;
                    frontier_phi_66_pred_5 = _3312;
                }
                _3123 = frontier_phi_66_pred;
                _3121 = frontier_phi_66_pred_1;
                _3119 = frontier_phi_66_pred_2;
                _3117 = frontier_phi_66_pred_3;
                _3115 = frontier_phi_66_pred_4;
                _3113 = frontier_phi_66_pred_5;
                uint _3263 = _3262 + 1u;
                if (_3263 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3256 = _3113;
                    _3257 = _3115;
                    _3258 = _3117;
                    _3259 = _3119;
                    _3260 = _3121;
                    _3261 = _3123;
                    _3262 = _3263;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
            _3122 = _3123;
        }
        uvec4 _3126 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3127 = _3126.z;
        uint _3129 = (_3127 >> 8u) & 15u;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        if (((4294967295u << _3129) & _3032) == 0u)
        {
            _3224 = _3112;
            _3226 = _3114;
            _3228 = _3116;
            _3230 = _3118;
            _3232 = _3120;
            _3234 = _3122;
        }
        else
        {
            float _3249 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
            float _3250 = _3249 * _2091;
            float _3251 = _3249 * _2092;
            float _3252 = _3249 * _2093;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3129 < ((_3127 >> 12u) & 15u))
            {
                float _3225;
                float _3227;
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3363 = _3112;
                float _3364 = _3114;
                float _3365 = _3116;
                float _3366 = _3118;
                float _3367 = _3120;
                float _3368 = _3122;
                uint _3369 = _3129;
                uint _3378;
                bool _3379;
                for (;;)
                {
                    _3378 = texelFetch(g_lightClassification, int((((_3026 << 5u) + (_3012 << 9u)) + (_3369 << 2u)) >> 2u)).x;
                    _3379 = _3378 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3379)
                    {
                        frontier_phi_72_pred = _3368;
                        frontier_phi_72_pred_1 = _3367;
                        frontier_phi_72_pred_2 = _3366;
                        frontier_phi_72_pred_3 = _3365;
                        frontier_phi_72_pred_4 = _3364;
                        frontier_phi_72_pred_5 = _3363;
                    }
                    else
                    {
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3856;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3575 = _3363;
                        float _3576 = _3364;
                        float _3577 = _3365;
                        float _3578 = _3366;
                        float _3579 = _3367;
                        float _3580 = _3368;
                        uint _3581 = _3378;
                        uint _3582;
                        vec4 _3607;
                        float _3608;
                        vec4 _3623;
                        vec3 _3635;
                        vec4 _3650;
                        vec4 _3666;
                        float _3712;
                        bool _3713;
                        for (;;)
                        {
                            uint _3592 = ((_3369 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3581));
                            _3582 = (_3581 + 4294967295u) & _3581;
                            uint _3594 = _3592 * 40u;
                            _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            _3608 = _3607.w;
                            uint _3610 = (_3592 * 40u) + 4u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3592 * 40u) + 8u;
                            _3635 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x));
                            uint _3637 = (_3592 * 40u) + 16u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3653 = (_3592 * 40u) + 20u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3668 = (_3592 * 40u) + 24u;
                            vec4 _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            uint _3687 = (_3592 * 40u) + 28u;
                            vec4 _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            _3712 = fma(_2093, _3700.z, fma(_2092, _3700.y, _3700.x * _2091)) + _3700.w;
                            _3713 = !((fma(_2093, _3681.z, fma(_2092, _3681.y, _3681.x * _2091)) + _3681.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3713)
                            {
                                float _3740 = _3607.x - _2091;
                                float _3741 = _3607.y - _2092;
                                float _3742 = _3607.z - _2093;
                                float _3743 = dot(vec3(_3740, _3741, _3742), vec3(_3740, _3741, _3742));
                                float _3746 = inversesqrt(_3743);
                                float _3747 = _3746 * _3740;
                                float _3748 = _3746 * _3741;
                                float _3749 = _3746 * _3742;
                                float _3753 = 1.0 - (_3743 / (_3608 * _3608));
                                float _4916 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3754 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                                float _3758 = sqrt(_3743) * _3623.w;
                                float _3760 = 1.39999997615814208984375 / (_3758 + 1.39999997615814208984375);
                                float _3761 = _3760 * _3760;
                                float _3764 = ((1.0 - _3761) * dot(vec3(_3747, _3748, _3749), vec3(_958, _961, _964))) + _3761;
                                float _3767 = _3758 * _3758;
                                float _3771 = (fma(_2093, _3650.z, fma(_2092, _3650.y, _3650.x * _2091)) + _3650.w) / _3712;
                                float _3772 = (fma(_2093, _3666.z, fma(_2092, _3666.y, _3666.x * _2091)) + _3666.w) / _3712;
                                float _3776 = 1.0 - dot(vec2(_3771, _3772), vec2(_3771, _3772));
                                float _4932 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3777 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3778 = _3777 * (((isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0))) * _3754) / ((_3767 * 0.699999988079071044921875) + 1.0));
                                float _3790 = exp2(log2(1.0 / ((_3767 * 3.5) + 5.0)) * 0.25);
                                float _3791 = 1.0 - _1033;
                                float _3798 = sqrt(1.0 - ((1.0 - (_3791 * _3791)) * (1.0 - (_3790 * _3790))));
                                float _3799 = _3798 * _3798;
                                float _3800 = _3799 * _3799;
                                float _3801 = _3747 - _3250;
                                float _3802 = _3748 - _3251;
                                float _3803 = _3749 - _3252;
                                float _3807 = inversesqrt(dot(vec3(_3801, _3802, _3803), vec3(_3801, _3802, _3803)));
                                float _3811 = dot(vec3(_958, _961, _964), vec3((-0.0) - _3250, (-0.0) - _3251, (-0.0) - _3252));
                                float _4943 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3814 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                                float _3815 = dot(vec3(_958, _961, _964), vec3(_3807 * _3801, _3807 * _3802, _3807 * _3803));
                                float _4954 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3818 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3822 = ((_3818 * _3818) * (_3800 + (-1.0))) + 1.0;
                                float _3823 = _3760 * _3799;
                                float _3824 = _3823 * _3823;
                                float _3830 = ((1.0 - _3824) * dot(vec3(_958, _961, _964), vec3(_3747, _3748, _3749))) + _3824;
                                float _4965 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3831 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3832 = 1.0 - _3799;
                                float _3842 = (0.5 / (((_3831 * ((_3814 * _3832) + _3799)) + 9.9999999392252902907785028219223e-09) + (((_3831 * _3832) + _3799) * _3814))) * _3831;
                                float _4976 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3852 = (_3777 * _3754) * (((_3800 * 3.1415927410125732421875) * (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0)))) / ((_3822 * _3822) * ((_3767 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3778 * _3623.y;
                                frontier_phi_78_pred_1 = _3778 * _3623.x;
                                frontier_phi_78_pred_2 = _3852 * _3635.z;
                                frontier_phi_78_pred_3 = _3852 * _3635.y;
                                frontier_phi_78_pred_4 = _3852 * _3635.x;
                                frontier_phi_78_pred_5 = _3778 * _3623.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3860 = frontier_phi_78_pred;
                            _3859 = frontier_phi_78_pred_1;
                            _3858 = frontier_phi_78_pred_2;
                            _3857 = frontier_phi_78_pred_3;
                            _3856 = frontier_phi_78_pred_4;
                            _3861 = frontier_phi_78_pred_5;
                            _3565 = _3859 + _3578;
                            _3566 = _3860 + _3579;
                            _3567 = _3861 + _3580;
                            _3562 = _3856 + _3575;
                            _3563 = _3857 + _3576;
                            _3564 = _3858 + _3577;
                            if (_3582 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3582;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3567;
                        frontier_phi_72_pred_1 = _3566;
                        frontier_phi_72_pred_2 = _3565;
                        frontier_phi_72_pred_3 = _3564;
                        frontier_phi_72_pred_4 = _3563;
                        frontier_phi_72_pred_5 = _3562;
                    }
                    _3235 = frontier_phi_72_pred;
                    _3233 = frontier_phi_72_pred_1;
                    _3231 = frontier_phi_72_pred_2;
                    _3229 = frontier_phi_72_pred_3;
                    _3227 = frontier_phi_72_pred_4;
                    _3225 = frontier_phi_72_pred_5;
                    uint _3370 = _3369 + 1u;
                    if (_3370 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3363 = _3225;
                        _3364 = _3227;
                        _3365 = _3229;
                        _3366 = _3231;
                        _3367 = _3233;
                        _3368 = _3235;
                        _3369 = _3370;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3235;
                frontier_phi_60_61_ladder_1 = _3233;
                frontier_phi_60_61_ladder_2 = _3229;
                frontier_phi_60_61_ladder_3 = _3227;
                frontier_phi_60_61_ladder_4 = _3225;
                frontier_phi_60_61_ladder_5 = _3231;
            }
            else
            {
                frontier_phi_60_61_ladder = _3122;
                frontier_phi_60_61_ladder_1 = _3120;
                frontier_phi_60_61_ladder_2 = _3116;
                frontier_phi_60_61_ladder_3 = _3114;
                frontier_phi_60_61_ladder_4 = _3112;
                frontier_phi_60_61_ladder_5 = _3118;
            }
            _3224 = frontier_phi_60_61_ladder_4;
            _3226 = frontier_phi_60_61_ladder_3;
            _3228 = frontier_phi_60_61_ladder_2;
            _3230 = frontier_phi_60_61_ladder_5;
            _3232 = frontier_phi_60_61_ladder_1;
            _3234 = frontier_phi_60_61_ladder;
        }
        float _3239 = isnan(1.0) ? _1017 : (isnan(_1017) ? 1.0 : min(_1017, 1.0));
        _3045 = (_3239 * _3230) + _2557;
        _3047 = (_3239 * _3232) + _2559;
        _3049 = (_3239 * _3234) + _2561;
        _3051 = ((_3224 * _1001) * _3239) + _2895;
        _3053 = ((_3226 * _1003) * _3239) + _2897;
        _3055 = ((_3228 * _1004) * _3239) + _2899;
    }
    else
    {
        _3045 = _2557;
        _3047 = _2559;
        _3049 = _2561;
        _3051 = _2895;
        _3053 = _2897;
        _3055 = _2899;
    }
    float _4992 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _5003 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _5014 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    uint _3075 = _257 + 6u;
    float _3083 = _939 / cbSceneParam._m0[86u].x;
    float _3084 = _940 / cbSceneParam._m0[86u].y;
    vec4 _3098 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3083, _3084, (log2((isnan(cbSceneParam._m0[77u].w) ? _874 : (isnan(_874) ? cbSceneParam._m0[77u].w : min(_874, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3100 = _3098.x;
    float _3101 = _3098.y;
    float _3102 = _3098.z;
    float _3103 = _3098.w;
    float _3174;
    float _3176;
    float _3178;
    float _3180;
    if (_874 > cbSceneParam._m0[78u].w)
    {
        float _3137 = isnan(_874) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _874 : min(cbSceneParam._m0[80u].w, _874));
        float _3138 = _3137 / _874;
        float _3149 = _3138 * _924;
        float _3150 = _925 * _3138;
        float _3151 = (-0.0) - _3150;
        float _3152 = _3138 * _926;
        float _3154 = (cbSceneParam._m0[77u].w * _3151) / _3137;
        float _3155 = _3154 + cbSceneParam._m0[79u].w;
        float _3156 = cbSceneParam._m0[79u].w - _3150;
        float _3162 = sqrt(((_3149 * _3149) + (_3150 * _3150)) + (_3152 * _3152));
        float _3165 = (1.0 - (cbSceneParam._m0[77u].w / _3137)) * _3162;
        float _3170 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3172 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3325;
        if (abs((_3151 - _3154) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3325 = ((((_3155 > 0.0) ? exp2(_3170 * _3155) : (2.0 - exp2(_3172 * _3155))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3165;
        }
        else
        {
            float _3285 = 1.0 / cbSceneParam._m0[80u].x;
            float _3286 = isnan(_3156) ? _3155 : (isnan(_3155) ? _3156 : max(_3155, _3156));
            float _3287 = isnan(_3156) ? _3155 : (isnan(_3155) ? _3156 : min(_3155, _3156));
            float _3296 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : min(_3286, 0.0));
            float _3297 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : min(_3287, 0.0));
            _3325 = ((abs(_3162 / _3151) * cbSceneParam._m0[80u].y) * ((((_3296 - _3297) * 2.0) - ((exp2(_3170 * (isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0)))) - exp2(_3170 * (isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0))))) * _3285)) - ((exp2(_3172 * _3296) - exp2(_3172 * _3297)) * _3285))) + (_3165 * cbSceneParam._m0[80u].z);
        }
        vec4 _3327 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3083, _3084, 1.0), 0.0);
        float _3336 = exp2((_3325 * (-1.44269502162933349609375)) * (1.0 - _3327.w));
        float _3337 = log2(_3336);
        float _3353 = log2(_3103);
        _3174 = (exp2(_3353 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].x)) * _3327.x) / cbSceneParam._m0[78u].x)) + _3100;
        _3176 = (exp2(_3353 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].y)) * _3327.y) / cbSceneParam._m0[78u].y)) + _3101;
        _3178 = (exp2(_3353 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3337 * cbSceneParam._m0[78u].z)) * _3327.z) / cbSceneParam._m0[78u].z)) + _3102;
        _3180 = _3336 * _3103;
    }
    else
    {
        _3174 = _3100;
        _3176 = _3101;
        _3178 = _3102;
        _3180 = _3103;
    }
    float _3192 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3193 = _3192 == 3.0;
    float _3194 = log2(_3180);
    float _3201 = exp2(_3194 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0))) * (_3045 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1017))) + ((_3051 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1825)) * cbPerFrame._m0[3u].x));
    float _3202 = exp2(_3194 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0))) * (_3047 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1017))) + ((_3053 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1825)) * cbPerFrame._m0[3u].x));
    float _3203 = exp2(_3194 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0))) * (_3049 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1017))) + ((_3055 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1825)) * cbPerFrame._m0[3u].x));
    float _3212 = (_3192 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3212 * (_3193 ? _3201 : (_3201 + (cbSceneParam._m0[72u].w * _3174)));
    SV_Target.y = _3212 * (_3193 ? _3202 : (_3202 + (cbSceneParam._m0[72u].w * _3176)));
    SV_Target.z = _3212 * (_3193 ? _3203 : (_3203 + (cbSceneParam._m0[72u].w * _3178)));
    SV_Target.w = cbInstanceData._m0[_3075].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3075].w;
}


