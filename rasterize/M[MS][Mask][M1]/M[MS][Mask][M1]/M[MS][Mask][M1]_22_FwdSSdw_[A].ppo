#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1282;
float _3688;
float _3689;
float _3690;
float _3691;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _306.x * cbMtdParam._m0[11u].x;
    float _312 = _306.y * cbMtdParam._m0[11u].y;
    float _313 = _306.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[23u].w) + _399) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3700 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _430 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _282.x) * ((_417 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311);
    float _433 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _282.y) * ((_417 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312);
    float _436 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _282.z) * ((_417 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313);
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _471 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _473 = _471.x;
    float _474 = _471.y;
    float _475 = _471.z;
    float _484 = ((_454.z - _475) * _417) + _475;
    float _487 = ((((_454.x - _473) * _417) + _473) * 2.0) + (-1.0);
    float _489 = ((((_454.y - _474) * _417) + _474) * 2.0) + (-1.0);
    float _490 = dot(vec2(_487, _489), vec2(_487, _489));
    float _3711 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _495 = sqrt(1.0 - (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))));
    vec4 _511 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _523 = (((_511.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _487;
    float _524 = (((_511.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _489;
    float _527 = fma(_495, _230, fma(_524, _237, _523 * _223));
    float _530 = fma(_495, _231, fma(_524, _238, _523 * _224));
    float _533 = fma(_495, _232, fma(_524, _239, _523 * _225));
    float _537 = inversesqrt(dot(vec3(_527, _530, _533), vec3(_527, _530, _533)));
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _566 = _564.x;
    float _567 = 1.0 - _566;
    float _576 = (cbMtdParam._m0[19u].x + dot(vec4(_537 * _527, _537 * _530, _537 * _533, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_566 - _567) * cbMtdParam._m0[24u].z) + _567) * cbMtdParam._m0[21u].z);
    float _3722 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _584 = (_577 * (cbMtdParam._m0[17u].x - _430)) + _430;
    float _585 = (_577 * (cbMtdParam._m0[17u].y - _433)) + _433;
    float _586 = (_577 * (cbMtdParam._m0[17u].z - _436)) + _436;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _614 = _612.x;
    float _631 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _614) * _417) + _614;
    float _635 = ((_598.x - _631) * cbMtdParam._m0[19u].z) + _631;
    float _637 = _635 - (_635 * _577);
    float _641 = (cbMtdParam._m0[19u].w * (_511.z - _484)) + _484;
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _661 = (_654.x * 2.0) + (-1.0);
    float _662 = (_654.y * 2.0) + (-1.0);
    float _663 = dot(vec2(_661, _662), vec2(_661, _662));
    float _3733 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _671 = ((_654.z - _641) * _577) + _641;
    float _681 = ((sqrt(1.0 - (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) - _495) * _577) + _495;
    float _684 = (((_661 - _523) * _577) + _523) + (cbMtdParam._m0[21u].x * _523);
    float _685 = (((_662 - _524) * _577) + _524) + (cbMtdParam._m0[21u].x * _524);
    float _687 = cbMtdParam._m0[22u].x + _511.w;
    float _690 = fma(_681, _230, fma(_685, _237, _684 * _223));
    float _693 = fma(_681, _231, fma(_685, _238, _684 * _224));
    float _696 = fma(_681, _232, fma(_685, _239, _684 * _225));
    float _700 = inversesqrt(dot(vec3(_690, _693, _696), vec3(_690, _693, _696)));
    float _701 = _700 * _690;
    float _702 = _700 * _693;
    float _703 = _700 * _696;
    float _3744 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _704 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _3755 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3766 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _3777 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _3788 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _3799 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _709 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _723 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _774 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _764);
    float _775 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _764);
    float _776 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _764);
    float _780 = inversesqrt(dot(vec3(_774, _775, _776), vec3(_774, _775, _776)));
    float _781 = _774 * _780;
    float _782 = _775 * _780;
    float _783 = _776 * _780;
    vec4 _788 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _790 = _788.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _962 = sqrt(((_774 * _774) + (_775 * _775)) + (_776 * _776));
        float _968 = (cbMatDynParam._m0[5u].x * _962) + cbMatDynParam._m0[5u].y;
        float _3810 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _973 = (cbMatDynParam._m0[5u].z * _962) + cbMatDynParam._m0[5u].w;
        float _3821 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) - _969)) + _969) < ((_790 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _801 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _802 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _820 = fma(_703, cbSceneParam._m0[5u].z, fma(_702, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _701));
    float _823 = fma(_703, cbSceneParam._m0[6u].z, fma(_702, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _701));
    float _826 = fma(_703, cbSceneParam._m0[7u].z, fma(_702, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _701));
    uint _839 = _242 + 9u;
    uint _840 = _839 + uint(cbMatDynParam._m0[0u].w);
    float _846 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * cbInstanceData._m0[_840].x;
    float _847 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_840].y;
    float _848 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * cbInstanceData._m0[_840].z;
    float _3832 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _852 = 1.0 - _709;
    float _853 = _849 * _852;
    float _854 = _850 * _852;
    float _855 = _851 * _852;
    float _860 = (_849 + (-0.039999999105930328369140625)) * _709;
    float _861 = (_850 + (-0.039999999105930328369140625)) * _709;
    float _862 = (_851 + (-0.039999999105930328369140625)) * _709;
    float _863 = _860 + 0.039999999105930328369140625;
    float _865 = _861 + 0.039999999105930328369140625;
    float _866 = _862 + 0.039999999105930328369140625;
    vec4 _875 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _801, cbSceneParam._m0[86u].y * _802));
    float _879 = ((isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * TEXCOORD_5.w) * _875.x;
    float _880 = dot(vec3(_701, _702, _703), vec3(_781, _782, _783));
    float _883 = _880 * 2.0;
    float _887 = (_883 * _701) - _781;
    float _888 = (_883 * _702) - _782;
    float _889 = (_883 * _703) - _783;
    float _893 = abs(dot(vec3(_781, _782, _783), vec3(_701, _702, _703)));
    float _3865 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _895 = sqrt(_704);
    float _908 = exp2((_895 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_895 * 3.0));
    float _914 = (1.0 - _908) * ((_895 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _915 = _908 * _895;
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1281;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1006 = fma(_951, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943));
        float _1010 = fma(_951, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943));
        float _1014 = fma(_951, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943));
        float _1039 = _943 + _701;
        float _1040 = _947 + _702;
        float _1041 = _951 + _703;
        float _1051 = fma(_1041, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039)) - _1006;
        float _1052 = fma(_1041, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039)) - _1010;
        float _1053 = fma(_1041, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039)) - _1014;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1006 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1010 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[34u].z) + ((((((_1014 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1109 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1075.x + (-0.5));
        float _1111 = _1109 * (_1075.y + (-0.5));
        float _1112 = _1109 * (_1075.z + (-0.5));
        float _1119 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1082.x + (-0.5));
        float _1121 = _1119 * (_1082.y + (-0.5));
        float _1122 = _1119 * (_1082.z + (-0.5));
        float _1129 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1089.x + (-0.5));
        float _1131 = _1129 * (_1089.y + (-0.5));
        float _1132 = _1129 * (_1089.z + (-0.5));
        float _1139 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1096.x + (-0.5));
        float _1141 = _1139 * (_1096.y + (-0.5));
        float _1142 = _1139 * (_1096.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1163 = (dot(vec3(_701, _702, _703), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1173 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3913 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1175 + 1.0))) + _1180) * _1143;
        float _1190 = _1111 * 0.5;
        float _1191 = _1121 * 0.5;
        float _1192 = _1131 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_701, _702, _703), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3946 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1217 + 1.0))) + _1222) * _1144;
        float _1232 = _1112 * 0.5;
        float _1233 = _1122 * 0.5;
        float _1234 = _1132 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_701, _702, _703), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3979 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1259 + 1.0))) + _1264) * _1145;
        _1281 = _1112;
        _1283 = _1111;
        _1284 = _1110;
        _1285 = _1122;
        _1286 = _1121;
        _1287 = _1120;
        _1288 = _1132;
        _1289 = _1131;
        _1290 = _1130;
        _1291 = _1145;
        _1292 = _1144;
        _1293 = _1143;
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _1282;
        _1283 = _1282;
        _1284 = _1282;
        _1285 = _1282;
        _1286 = _1282;
        _1287 = _1282;
        _1288 = _1282;
        _1289 = _1282;
        _1290 = _1282;
        _1291 = _1282;
        _1292 = _1282;
        _1293 = _1282;
        _1294 = 0.0;
        _1295 = 0.0;
        _1296 = 0.0;
    }
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1324 = fma(_951, cbModelParam._m0[30u].z, fma(_947, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943));
        float _1328 = fma(_951, cbModelParam._m0[31u].z, fma(_947, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943));
        float _1332 = fma(_951, cbModelParam._m0[32u].z, fma(_947, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943));
        float _1355 = _943 + _701;
        float _1356 = _947 + _702;
        float _1357 = _951 + _703;
        float _1367 = fma(_1357, cbModelParam._m0[30u].z, fma(_1356, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1355)) - _1324;
        float _1368 = fma(_1357, cbModelParam._m0[31u].z, fma(_1356, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1355)) - _1328;
        float _1369 = fma(_1357, cbModelParam._m0[32u].z, fma(_1356, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1355)) - _1332;
        float _1373 = inversesqrt(dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369)));
        float _1386 = ((_1373 * _1367) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1324 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1373 * _1368) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1328 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1373 * _1369) / cbModelParam._m0[35u].z) + ((((((_1332 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        float _1423 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1390.x + (-0.5));
        float _1425 = _1423 * (_1390.y + (-0.5));
        float _1426 = _1423 * (_1390.z + (-0.5));
        float _1433 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1397.x + (-0.5));
        float _1435 = _1433 * (_1397.y + (-0.5));
        float _1436 = _1433 * (_1397.z + (-0.5));
        float _1443 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1404.x + (-0.5));
        float _1445 = _1443 * (_1404.y + (-0.5));
        float _1446 = _1443 * (_1404.z + (-0.5));
        float _1453 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1411.x + (-0.5));
        float _1455 = _1453 * (_1411.y + (-0.5));
        float _1456 = _1453 * (_1411.z + (-0.5));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = _1424 * 0.5;
        float _1461 = _1434 * 0.5;
        float _1462 = _1444 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_701, _702, _703), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4042 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1487 + 1.0))) + _1492) * _1457;
        float _1502 = _1425 * 0.5;
        float _1503 = _1435 * 0.5;
        float _1504 = _1445 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_701, _702, _703), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4075 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1529 + 1.0))) + _1534) * _1458;
        float _1544 = _1426 * 0.5;
        float _1545 = _1436 * 0.5;
        float _1546 = _1446 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_701, _702, _703), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4108 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1571 + 1.0))) + _1576) * _1459;
        _1593 = _1426;
        _1594 = _1425;
        _1595 = _1424;
        _1596 = _1436;
        _1597 = _1435;
        _1598 = _1434;
        _1599 = _1446;
        _1600 = _1445;
        _1601 = _1444;
        _1602 = _1459;
        _1603 = _1458;
        _1604 = _1457;
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
    }
    else
    {
        _1593 = _1282;
        _1594 = _1282;
        _1595 = _1282;
        _1596 = _1282;
        _1597 = _1282;
        _1598 = _1282;
        _1599 = _1282;
        _1600 = _1282;
        _1601 = _1282;
        _1602 = _1282;
        _1603 = _1282;
        _1604 = _1282;
        _1605 = 0.0;
        _1606 = 0.0;
        _1607 = 0.0;
    }
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1294)) + _1294;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1295)) + _1295;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1296)) + _1296;
    float _1640 = fma(_1619, cbSceneParam._m0[89u].z, fma(_1618, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1643 = fma(_1619, cbSceneParam._m0[90u].z, fma(_1618, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1646 = fma(_1619, cbSceneParam._m0[91u].z, fma(_1618, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1617));
    float _1661 = _887 * 0.5;
    float _1662 = _888 * 0.5;
    float _1663 = _889 * 0.5;
    float _1664 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1667 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1670 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1704;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1677 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1281, _1285, _1288, _1291));
        float _1681 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1685 = dot(vec4(_1661, _1662, _1663, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1692 = dot(vec4(cbModelParam._m0[39u]), vec4(_1661, _1662, _1663, 1.0));
        _1704 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1704 = 1.0;
    }
    float _1715;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1706 = dot(vec4(cbModelParam._m0[40u]), vec4(_1661, _1662, _1663, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1719 = (_1715 * cbModelParam._m0[1u].x) + (_1704 * (1.0 - cbModelParam._m0[1u].x));
    float _1729 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _704);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1729 : min(cbModelParam._m0[25u].z, _1729));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1778 = fma(_951, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943)) + cbModelParam._m0[13u].w;
        float _1782 = fma(_951, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943)) + cbModelParam._m0[14u].w;
        float _1786 = fma(_951, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943)) + cbModelParam._m0[15u].w;
        float _1789 = fma(_889, cbModelParam._m0[13u].z, fma(_888, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887));
        float _1792 = fma(_889, cbModelParam._m0[14u].z, fma(_888, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887));
        float _1795 = fma(_889, cbModelParam._m0[15u].z, fma(_888, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887));
        float _1823;
        if (_1789 > 0.0)
        {
            _1823 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1823 = frontier_phi_17_15_ladder;
        }
        float _2047;
        if (_1792 > 0.0)
        {
            _2047 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2047 = frontier_phi_26_22_ladder;
        }
        float _2304;
        if (_1795 > 0.0)
        {
            _2304 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2304 = frontier_phi_38_33_ladder;
        }
        float _2306 = isnan(_2047) ? _1823 : (isnan(_1823) ? _2047 : min(_1823, _2047));
        float _2307 = isnan(_2304) ? _2306 : (isnan(_2306) ? _2304 : min(_2306, _2304));
        float _2311 = (_2307 * _1789) + _1778;
        float _2312 = (_2307 * _1792) + _1782;
        float _2313 = (_2307 * _1795) + _1786;
        float _2314 = _2307 * 9.9999997473787516355514526367188e-05;
        float _2316 = (-1.0) - _2314;
        float _2318 = _2314 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2313 > _2318) || ((_2313 < _2316) || ((_2312 > _2318) || ((_2312 < _2316) || ((_2311 < _2316) || (_2311 > _2318))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2441 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2313, cbModelParam._m0[9u].z, fma(_2312, cbModelParam._m0[9u].y, _2311 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2313, cbModelParam._m0[10u].z, fma(_2312, cbModelParam._m0[10u].y, _2311 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2313, cbModelParam._m0[11u].z, fma(_2312, cbModelParam._m0[11u].y, _2311 * cbModelParam._m0[11u].x))), _1730);
            frontier_phi_16_38_ladder = _2441.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2441.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2441.x * cbModelParam._m0[1u].y;
        }
        _1811 = frontier_phi_16_38_ladder_2;
        _1813 = frontier_phi_16_38_ladder_1;
        _1815 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_887, _888, _889), _1730);
        _1811 = _1799.x * cbModelParam._m0[1u].y;
        _1813 = _1799.y * cbModelParam._m0[1u].y;
        _1815 = _1799.z * cbModelParam._m0[1u].y;
    }
    float _1819 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _704);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1819 : min(cbModelParam._m0[25u].w, _1819));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1874 = fma(_951, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943)) + cbModelParam._m0[21u].w;
        float _1878 = fma(_951, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943)) + cbModelParam._m0[22u].w;
        float _1882 = fma(_951, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943)) + cbModelParam._m0[23u].w;
        float _1885 = fma(_889, cbModelParam._m0[21u].z, fma(_888, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887));
        float _1888 = fma(_889, cbModelParam._m0[22u].z, fma(_888, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887));
        float _1891 = fma(_889, cbModelParam._m0[23u].z, fma(_888, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887));
        float _2052;
        if (_1885 > 0.0)
        {
            _2052 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2052 = frontier_phi_28_24_ladder;
        }
        float _2331;
        if (_1888 > 0.0)
        {
            _2331 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2331 = frontier_phi_40_35_ladder;
        }
        float _2544;
        if (_1891 > 0.0)
        {
            _2544 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2544 = frontier_phi_49_46_ladder;
        }
        float _2546 = isnan(_2331) ? _2052 : (isnan(_2052) ? _2331 : min(_2052, _2331));
        float _2547 = isnan(_2544) ? _2546 : (isnan(_2546) ? _2544 : min(_2546, _2544));
        float _2551 = (_2547 * _1885) + _1874;
        float _2552 = (_2547 * _1888) + _1878;
        float _2553 = (_2547 * _1891) + _1882;
        float _2554 = _2547 * 9.9999997473787516355514526367188e-05;
        float _2555 = (-1.0) - _2554;
        float _2557 = _2554 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2553 > _2557) || ((_2553 < _2555) || ((_2552 > _2557) || ((_2552 < _2555) || ((_2551 < _2555) || (_2551 > _2557))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2752 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2553, cbModelParam._m0[17u].z, fma(_2552, cbModelParam._m0[17u].y, _2551 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2553, cbModelParam._m0[18u].z, fma(_2552, cbModelParam._m0[18u].y, _2551 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2553, cbModelParam._m0[19u].z, fma(_2552, cbModelParam._m0[19u].y, _2551 * cbModelParam._m0[19u].x))), _1820);
            frontier_phi_25_49_ladder = _2752.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2752.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2752.x * cbModelParam._m0[1u].z;
        }
        _1910 = frontier_phi_25_49_ladder_2;
        _1912 = frontier_phi_25_49_ladder_1;
        _1914 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_887, _888, _889), _1820);
        _1910 = _1894.x * cbModelParam._m0[1u].z;
        _1912 = _1894.y * cbModelParam._m0[1u].z;
        _1914 = _1894.z * cbModelParam._m0[1u].z;
    }
    float _1927 = (((_914 * _863) + _915) * _879) * ((cbModelParam._m0[1u].w * (_1910 - _1811)) + _1811);
    float _1929 = (((_914 * _865) + _915) * _879) * ((cbModelParam._m0[1u].w * (_1912 - _1813)) + _1813);
    float _1931 = (((_914 * _866) + _915) * _879) * ((cbModelParam._m0[1u].w * (_1914 - _1815)) + _1815);
    float _1934 = fma(_1931, cbSceneParam._m0[89u].z, fma(_1929, cbSceneParam._m0[89u].y, _1927 * cbSceneParam._m0[89u].x));
    float _1937 = fma(_1931, cbSceneParam._m0[90u].z, fma(_1929, cbSceneParam._m0[90u].y, _1927 * cbSceneParam._m0[90u].x));
    float _1940 = fma(_1931, cbSceneParam._m0[91u].z, fma(_1929, cbSceneParam._m0[91u].y, _1927 * cbSceneParam._m0[91u].x));
    vec4 _1948 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_801, _802));
    float _1950 = _1948.w;
    float _1962 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1950);
    float _1963 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1950);
    float _1964 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1950);
    uvec4 _1968 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1970 = _1968.x * 14u;
    uint _1971 = _1970 + 13u;
    float _1978 = _879 + (-1.0);
    float _1983 = (cbLight._m0[_1971].x * _1978) + 1.0;
    float _1984 = (cbLight._m0[_1971].y * _1978) + 1.0;
    float _1985 = (cbLight._m0[_1971].z * _1978) + 1.0;
    float _1986 = (cbLight._m0[_1971].w * _1978) + 1.0;
    uint _1987 = _1970 + 5u;
    float _1993 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _1997 = _1970 + 4u;
    float _2006 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
    uint _2010 = _1970 | 1u;
    float _2021 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_701, _702, _703));
    float _2024 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_701, _702, _703));
    float _4244 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _4255 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2029 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * 0.3183098733425140380859375;
    float _2031 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.3183098733425140380859375;
    float _2038 = ((cbLight._m0[_1987].x * _1993) * _2031) + (((cbLight._m0[_1997].x * _1962) * _2006) * _2029);
    float _2039 = ((_1993 * cbLight._m0[_1987].y) * _2031) + (((cbLight._m0[_1997].y * _1963) * _2006) * _2029);
    float _2040 = ((_1993 * cbLight._m0[_1987].z) * _2031) + (((cbLight._m0[_1997].z * _1964) * _2006) * _2029);
    uvec4 _2044 = floatBitsToUint(cbLight._m0[_1970 + 12u]);
    bool _2046 = _2044.x == 0u;
    float _2057;
    float _2059;
    float _2061;
    if (_2046)
    {
        _2057 = _2038;
        _2059 = _2039;
        _2061 = _2040;
    }
    else
    {
        uint _2065 = _1970 + 6u;
        float _2081 = (dot(vec3(cbLight._m0[_1970 + 2u].xyz), vec3(_701, _702, _703)) * 0.5) + 0.5;
        float _2082 = _2081 * _2081;
        float _4266 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2083 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2084 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2057 = (((cbLight._m0[_2065].x * 0.3183098733425140380859375) * _2083) * _2084) + _2038;
        _2059 = (((cbLight._m0[_2065].y * 0.3183098733425140380859375) * _2083) * _2084) + _2039;
        _2061 = (((cbLight._m0[_2065].z * 0.3183098733425140380859375) * _2083) * _2084) + _2040;
    }
    bool _2064 = _2044.y == 0u;
    float _2102;
    float _2104;
    float _2106;
    if (_2064)
    {
        _2102 = _2057;
        _2104 = _2059;
        _2106 = _2061;
    }
    else
    {
        uint _2275 = _1970 + 7u;
        float _2291 = (dot(vec3(cbLight._m0[_1970 + 3u].xyz), vec3(_701, _702, _703)) * 0.5) + 0.5;
        float _2292 = _2291 * _2291;
        float _4282 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2293 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2294 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2102 = (((cbLight._m0[_2275].x * 0.3183098733425140380859375) * _2293) * _2294) + _2057;
        _2104 = (((cbLight._m0[_2275].y * 0.3183098733425140380859375) * _2293) * _2294) + _2059;
        _2106 = (((cbLight._m0[_2275].z * 0.3183098733425140380859375) * _2293) * _2294) + _2061;
    }
    uint _2109 = _1970 + 8u;
    float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _704) * 0.949999988079071044921875);
    float _2123 = _2122 * _2122;
    float _2124 = cbLight._m0[_1970].x + _781;
    float _2125 = cbLight._m0[_1970].y + _782;
    float _2126 = cbLight._m0[_1970].z + _783;
    float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
    float _2131 = _2130 * _2124;
    float _2132 = _2130 * _2125;
    float _2133 = _2130 * _2126;
    float _2134 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_1970].xyz));
    float _4298 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _4309 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _2138 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2139 = dot(vec3(_701, _702, _703), vec3(_2131, _2132, _2133));
    float _4320 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2143 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2131, _2132, _2133));
    float _4331 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2147 = _2123 * _2123;
    float _2151 = ((_2142 * _2142) * (_2147 + (-1.0))) + 1.0;
    float _2159 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
    float _2160 = 0.959999978542327880859375 - _860;
    float _2162 = 0.959999978542327880859375 - _861;
    float _2163 = 0.959999978542327880859375 - _862;
    float _2170 = 1.0 - _2123;
    float _2181 = (0.5 / (((_2138 * ((_2137 * _2170) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2170) + _2123) * _2137))) * _2137;
    float _4342 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2147 / ((_2151 * _2151) * 3.141590118408203125));
    uint _2197 = _1970 + 9u;
    float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _704) * 0.949999988079071044921875);
    float _2209 = _2208 * _2208;
    float _2210 = cbLight._m0[_2010].x + _781;
    float _2211 = cbLight._m0[_2010].y + _782;
    float _2212 = cbLight._m0[_2010].z + _783;
    float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
    float _2217 = _2216 * _2210;
    float _2218 = _2216 * _2211;
    float _2219 = _2216 * _2212;
    float _2220 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2010].xyz));
    float _4353 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2224 = dot(vec3(_701, _702, _703), vec3(_2217, _2218, _2219));
    float _4364 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2228 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2217, _2218, _2219));
    float _4375 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2232 = _2209 * _2209;
    float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
    float _2243 = exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0);
    float _2250 = 1.0 - _2209;
    float _2260 = (0.5 / (((_2138 * ((_2223 * _2250) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2250) + _2209) * _2223))) * _2223;
    float _4386 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2262 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
    float _2272 = (((((_2243 * _2160) + _863) * cbLight._m0[_2197].x) * _2262) * _1993) + ((((cbLight._m0[_2109].x * _1962) * ((_2159 * _2160) + _863)) * _2183) * _2006);
    float _2273 = (((((_2243 * _2162) + _865) * cbLight._m0[_2197].y) * _2262) * _1993) + ((((cbLight._m0[_2109].y * _1963) * ((_2159 * _2162) + _865)) * _2183) * _2006);
    float _2274 = (((((_2243 * _2163) + _866) * cbLight._m0[_2197].z) * _2262) * _1993) + ((((cbLight._m0[_2109].z * _1964) * ((_2159 * _2163) + _866)) * _2183) * _2006);
    float _2336;
    float _2338;
    float _2340;
    if (_2046)
    {
        _2336 = _2272;
        _2338 = _2273;
        _2340 = _2274;
    }
    else
    {
        uint _2342 = _1970 + 2u;
        uint _2346 = _1970 + 10u;
        float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _704) * 0.949999988079071044921875);
        float _2361 = _2360 * _2360;
        float _2362 = cbLight._m0[_2342].x + _781;
        float _2363 = cbLight._m0[_2342].y + _782;
        float _2364 = cbLight._m0[_2342].z + _783;
        float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
        float _2369 = _2368 * _2362;
        float _2370 = _2368 * _2363;
        float _2371 = _2368 * _2364;
        float _2372 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2342].xyz));
        float _4397 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2376 = dot(vec3(_701, _702, _703), vec3(_2369, _2370, _2371));
        float _4408 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2380 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2369, _2370, _2371));
        float _4419 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2384 = _2361 * _2361;
        float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
        float _2395 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
        float _2402 = 1.0 - _2361;
        float _2412 = (0.5 / (((_2138 * ((_2375 * _2402) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2402) + _2361) * _2375))) * _2375;
        float _4430 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2414 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
        float _2415 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2336 = (((((_2395 * _2160) + _863) * cbLight._m0[_2346].x) * _2414) * _2415) + _2272;
        _2338 = (((((_2395 * _2162) + _865) * cbLight._m0[_2346].y) * _2414) * _2415) + _2273;
        _2340 = (((((_2395 * _2163) + _866) * cbLight._m0[_2346].z) * _2414) * _2415) + _2274;
    }
    float _2450;
    float _2452;
    float _2454;
    if (_2064)
    {
        _2450 = _2336;
        _2452 = _2338;
        _2454 = _2340;
    }
    else
    {
        uint _2461 = _1970 + 3u;
        uint _2465 = _1970 + 11u;
        float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _704) * 0.949999988079071044921875);
        float _2480 = _2479 * _2479;
        float _2481 = cbLight._m0[_2461].x + _781;
        float _2482 = cbLight._m0[_2461].y + _782;
        float _2483 = cbLight._m0[_2461].z + _783;
        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
        float _2488 = _2487 * _2481;
        float _2489 = _2487 * _2482;
        float _2490 = _2487 * _2483;
        float _2491 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2461].xyz));
        float _4446 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2495 = dot(vec3(_701, _702, _703), vec3(_2488, _2489, _2490));
        float _4457 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2499 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2488, _2489, _2490));
        float _4468 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2503 = _2480 * _2480;
        float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
        float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0);
        float _2521 = 1.0 - _2480;
        float _2531 = (0.5 / (((_2138 * ((_2494 * _2521) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2521) + _2480) * _2494))) * _2494;
        float _4479 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2533 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
        float _2534 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2450 = (((((_2514 * _2160) + _863) * cbLight._m0[_2465].x) * _2533) * _2534) + _2336;
        _2452 = (((((_2514 * _2162) + _865) * cbLight._m0[_2465].y) * _2533) * _2534) + _2338;
        _2454 = (((((_2514 * _2163) + _866) * cbLight._m0[_2465].z) * _2533) * _2534) + _2340;
    }
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    if (_1968.y == 0u)
    {
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2609;
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2609;
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2609;
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.x;
        uint _2636 = uint((float(_2624.y) * floor(float(uint(cbSceneParam._m0[85u].y * _802) / _2625))) + floor(float(uint(cbSceneParam._m0[85u].x * _801) / _2625)));
        float _2646 = (log2(_2612 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2647 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        uint _2650 = uint(isnan(14.0) ? _2647 : (isnan(_2647) ? 14.0 : min(_2647, 14.0)));
        uvec4 _2655 = texelFetch(g_lightClusterGridBuffer, int(((_2650 << 2u) + (_2636 << 6u)) >> 2u));
        uint _2656 = _2655.x;
        uint _2657 = _2624.z;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((((1u << ((_2657 >> 4u) & 15u)) + 4294967295u) & _2656) == 0u) || ((_2657 & 240u) == 0u))
        {
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
        }
        else
        {
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            uint _2916 = 0u;
            uint _2925;
            bool _2926;
            for (;;)
            {
                _2925 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_2916 << 2u)) >> 2u)).x;
                _2926 = _2925 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2926)
                {
                    frontier_phi_66_pred = _2910;
                    frontier_phi_66_pred_1 = _2915;
                    frontier_phi_66_pred_2 = _2914;
                    frontier_phi_66_pred_3 = _2913;
                    frontier_phi_66_pred_4 = _2912;
                    frontier_phi_66_pred_5 = _2911;
                }
                else
                {
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    uint _3061;
                    _3055 = _2910;
                    _3056 = _2911;
                    _3057 = _2912;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2925;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    for (;;)
                    {
                        uint _3065 = uint(findLSB(_3061)) + (_2916 << 5u);
                        uint _3062 = (_3061 + 4294967295u) & _3061;
                        uint _3067 = _3065 * 48u;
                        vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 3u)).x));
                        uint _3087 = (_3065 * 48u) + 4u;
                        vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 3u)).x));
                        uint _3106 = (_3065 * 48u) + 8u;
                        vec3 _3117 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x));
                        float _3121 = _3081.x - _2610;
                        float _3122 = _3081.y - _2611;
                        float _3123 = _3081.z - _2612;
                        float _3124 = dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123));
                        float _3127 = inversesqrt(_3124);
                        float _3128 = _3127 * _3121;
                        float _3129 = _3127 * _3122;
                        float _3130 = _3127 * _3123;
                        float _3131 = dot(vec3(_820, _823, _826), vec3(_3128, _3129, _3130));
                        float _3136 = 1.0 - (_3124 * _3081.w);
                        float _4505 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3137 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3138 = sqrt(_3124) * _3100.w;
                        float _3141 = 1.39999997615814208984375 / (_3138 + 1.39999997615814208984375);
                        float _3142 = _3141 * _3141;
                        float _3145 = ((1.0 - _3142) * _3131) + _3142;
                        float _3148 = _3138 * _3138;
                        float _3152 = ((isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))) * _3137) / ((_3148 * 0.699999988079071044921875) + 1.0);
                        float _3156 = (-0.0) - _2610;
                        float _3157 = (-0.0) - _2611;
                        float _3158 = (-0.0) - _2612;
                        float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                        float _3163 = _3162 * _3156;
                        float _3164 = _3162 * _3157;
                        float _3165 = _3162 * _3158;
                        float _3173 = exp2(log2(1.0 / ((_3148 * 3.5) + 5.0)) * 0.25);
                        float _3174 = 1.0 - _895;
                        float _3181 = sqrt(1.0 - ((1.0 - (_3174 * _3174)) * (1.0 - (_3173 * _3173))));
                        float _3182 = _3181 * _3181;
                        float _3183 = _3182 * _3182;
                        float _3184 = _3163 + _3128;
                        float _3185 = _3164 + _3129;
                        float _3186 = _3165 + _3130;
                        float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                        float _3194 = dot(vec3(_820, _823, _826), vec3(_3163, _3164, _3165));
                        float _4521 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3198 = dot(vec3(_820, _823, _826), vec3(_3190 * _3184, _3190 * _3185, _3190 * _3186));
                        float _4532 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3205 = ((_3201 * _3201) * (_3183 + (-1.0))) + 1.0;
                        float _3206 = _3141 * _3182;
                        float _3207 = _3206 * _3206;
                        float _3210 = ((1.0 - _3207) * _3131) + _3207;
                        float _4543 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3212 = 1.0 - _3182;
                        float _3222 = (0.5 / (((_3211 * ((_3197 * _3212) + _3182)) + 9.9999999392252902907785028219223e-09) + (((_3211 * _3212) + _3182) * _3197))) * _3211;
                        float _4554 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3233 = (((_3183 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3205 * _3205) * ((_3148 * 2.1991131305694580078125) + 3.141590118408203125))) * _3137;
                        _2985 = (_3152 * _3100.x) + _3058;
                        _2986 = (_3152 * _3100.y) + _3059;
                        _2987 = (_3152 * _3100.z) + _3060;
                        _2982 = (_3233 * _3117.x) + _3055;
                        _2983 = (_3233 * _3117.y) + _3056;
                        _2984 = (_3233 * _3117.z) + _3057;
                        if (_3062 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3055 = _2982;
                            _3056 = _2983;
                            _3057 = _2984;
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _3062;
                        }
                    }
                    frontier_phi_66_pred = _2982;
                    frontier_phi_66_pred_1 = _2987;
                    frontier_phi_66_pred_2 = _2986;
                    frontier_phi_66_pred_3 = _2985;
                    frontier_phi_66_pred_4 = _2984;
                    frontier_phi_66_pred_5 = _2983;
                }
                _2758 = frontier_phi_66_pred;
                _2768 = frontier_phi_66_pred_1;
                _2766 = frontier_phi_66_pred_2;
                _2764 = frontier_phi_66_pred_3;
                _2762 = frontier_phi_66_pred_4;
                _2760 = frontier_phi_66_pred_5;
                uint _2917 = _2916 + 1u;
                if (_2917 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2910 = _2758;
                    _2911 = _2760;
                    _2912 = _2762;
                    _2913 = _2764;
                    _2914 = _2766;
                    _2915 = _2768;
                    _2916 = _2917;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
        }
        uvec4 _2771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2772 = _2771.z;
        uint _2774 = (_2772 >> 8u) & 15u;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((4294967295u << _2774) & _2656) == 0u)
        {
            _2878 = _2757;
            _2880 = _2759;
            _2882 = _2761;
            _2884 = _2763;
            _2886 = _2765;
            _2888 = _2767;
        }
        else
        {
            float _2903 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
            float _2904 = _2903 * _2610;
            float _2905 = _2903 * _2611;
            float _2906 = _2903 * _2612;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2774 < ((_2772 >> 12u) & 15u))
            {
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _3038 = _2757;
                float _3039 = _2759;
                float _3040 = _2761;
                float _3041 = _2763;
                float _3042 = _2765;
                float _3043 = _2767;
                uint _3044 = _2774;
                uint _3053;
                bool _3054;
                for (;;)
                {
                    _3053 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_3044 << 2u)) >> 2u)).x;
                    _3054 = _3053 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3054)
                    {
                        frontier_phi_77_pred = _3043;
                        frontier_phi_77_pred_1 = _3042;
                        frontier_phi_77_pred_2 = _3041;
                        frontier_phi_77_pred_3 = _3040;
                        frontier_phi_77_pred_4 = _3039;
                        frontier_phi_77_pred_5 = _3038;
                    }
                    else
                    {
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3260 = _3038;
                        float _3261 = _3039;
                        float _3262 = _3040;
                        float _3263 = _3041;
                        float _3264 = _3042;
                        float _3265 = _3043;
                        uint _3266 = _3053;
                        uint _3267;
                        vec4 _3292;
                        float _3293;
                        vec4 _3308;
                        vec3 _3320;
                        vec4 _3335;
                        vec4 _3351;
                        float _3397;
                        bool _3398;
                        for (;;)
                        {
                            uint _3277 = ((_3044 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3266));
                            _3267 = (_3266 + 4294967295u) & _3266;
                            uint _3279 = _3277 * 40u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3293 = _3292.w;
                            uint _3295 = (_3277 * 40u) + 4u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3310 = (_3277 * 40u) + 8u;
                            _3320 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x));
                            uint _3322 = (_3277 * 40u) + 16u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3338 = (_3277 * 40u) + 20u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3277 * 40u) + 24u;
                            vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3372 = (_3277 * 40u) + 28u;
                            vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            _3397 = fma(_2612, _3385.z, fma(_2611, _3385.y, _3385.x * _2610)) + _3385.w;
                            _3398 = !((fma(_2612, _3366.z, fma(_2611, _3366.y, _3366.x * _2610)) + _3366.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3398)
                            {
                                float _3425 = _3292.x - _2610;
                                float _3426 = _3292.y - _2611;
                                float _3427 = _3292.z - _2612;
                                float _3428 = dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427));
                                float _3431 = inversesqrt(_3428);
                                float _3432 = _3431 * _3425;
                                float _3433 = _3431 * _3426;
                                float _3434 = _3431 * _3427;
                                float _3438 = 1.0 - (_3428 / (_3293 * _3293));
                                float _4565 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3443 = sqrt(_3428) * _3308.w;
                                float _3445 = 1.39999997615814208984375 / (_3443 + 1.39999997615814208984375);
                                float _3446 = _3445 * _3445;
                                float _3449 = ((1.0 - _3446) * dot(vec3(_3432, _3433, _3434), vec3(_820, _823, _826))) + _3446;
                                float _3452 = _3443 * _3443;
                                float _3456 = (fma(_2612, _3335.z, fma(_2611, _3335.y, _3335.x * _2610)) + _3335.w) / _3397;
                                float _3457 = (fma(_2612, _3351.z, fma(_2611, _3351.y, _3351.x * _2610)) + _3351.w) / _3397;
                                float _3461 = 1.0 - dot(vec2(_3456, _3457), vec2(_3456, _3457));
                                float _4581 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3462 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3463 = _3462 * (((isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0))) * _3439) / ((_3452 * 0.699999988079071044921875) + 1.0));
                                float _3475 = exp2(log2(1.0 / ((_3452 * 3.5) + 5.0)) * 0.25);
                                float _3476 = 1.0 - _895;
                                float _3483 = sqrt(1.0 - ((1.0 - (_3476 * _3476)) * (1.0 - (_3475 * _3475))));
                                float _3484 = _3483 * _3483;
                                float _3485 = _3484 * _3484;
                                float _3486 = _3432 - _2904;
                                float _3487 = _3433 - _2905;
                                float _3488 = _3434 - _2906;
                                float _3492 = inversesqrt(dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488)));
                                float _3496 = dot(vec3(_820, _823, _826), vec3((-0.0) - _2904, (-0.0) - _2905, (-0.0) - _2906));
                                float _4592 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3499 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3500 = dot(vec3(_820, _823, _826), vec3(_3492 * _3486, _3492 * _3487, _3492 * _3488));
                                float _4603 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3503 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3507 = ((_3503 * _3503) * (_3485 + (-1.0))) + 1.0;
                                float _3508 = _3445 * _3484;
                                float _3509 = _3508 * _3508;
                                float _3515 = ((1.0 - _3509) * dot(vec3(_820, _823, _826), vec3(_3432, _3433, _3434))) + _3509;
                                float _4614 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3517 = 1.0 - _3484;
                                float _3527 = (0.5 / (((_3516 * ((_3499 * _3517) + _3484)) + 9.9999999392252902907785028219223e-09) + (((_3516 * _3517) + _3484) * _3499))) * _3516;
                                float _4625 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3537 = (_3462 * _3439) * (((_3485 * 3.1415927410125732421875) * (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) / ((_3507 * _3507) * ((_3452 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3463 * _3308.y;
                                frontier_phi_83_pred_1 = _3463 * _3308.x;
                                frontier_phi_83_pred_2 = _3537 * _3320.z;
                                frontier_phi_83_pred_3 = _3537 * _3320.y;
                                frontier_phi_83_pred_4 = _3537 * _3320.x;
                                frontier_phi_83_pred_5 = _3463 * _3308.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3545 = frontier_phi_83_pred;
                            _3544 = frontier_phi_83_pred_1;
                            _3543 = frontier_phi_83_pred_2;
                            _3542 = frontier_phi_83_pred_3;
                            _3541 = frontier_phi_83_pred_4;
                            _3546 = frontier_phi_83_pred_5;
                            _3250 = _3544 + _3263;
                            _3251 = _3545 + _3264;
                            _3252 = _3546 + _3265;
                            _3247 = _3541 + _3260;
                            _3248 = _3542 + _3261;
                            _3249 = _3543 + _3262;
                            if (_3267 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3267;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3252;
                        frontier_phi_77_pred_1 = _3251;
                        frontier_phi_77_pred_2 = _3250;
                        frontier_phi_77_pred_3 = _3249;
                        frontier_phi_77_pred_4 = _3248;
                        frontier_phi_77_pred_5 = _3247;
                    }
                    _2889 = frontier_phi_77_pred;
                    _2887 = frontier_phi_77_pred_1;
                    _2885 = frontier_phi_77_pred_2;
                    _2883 = frontier_phi_77_pred_3;
                    _2881 = frontier_phi_77_pred_4;
                    _2879 = frontier_phi_77_pred_5;
                    uint _3045 = _3044 + 1u;
                    if (_3045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3038 = _2879;
                        _3039 = _2881;
                        _3040 = _2883;
                        _3041 = _2885;
                        _3042 = _2887;
                        _3043 = _2889;
                        _3044 = _3045;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2883;
                frontier_phi_58_59_ladder_1 = _2889;
                frontier_phi_58_59_ladder_2 = _2887;
                frontier_phi_58_59_ladder_3 = _2885;
                frontier_phi_58_59_ladder_4 = _2881;
                frontier_phi_58_59_ladder_5 = _2879;
            }
            else
            {
                frontier_phi_58_59_ladder = _2761;
                frontier_phi_58_59_ladder_1 = _2767;
                frontier_phi_58_59_ladder_2 = _2765;
                frontier_phi_58_59_ladder_3 = _2763;
                frontier_phi_58_59_ladder_4 = _2759;
                frontier_phi_58_59_ladder_5 = _2757;
            }
            _2878 = frontier_phi_58_59_ladder_5;
            _2880 = frontier_phi_58_59_ladder_4;
            _2882 = frontier_phi_58_59_ladder;
            _2884 = frontier_phi_58_59_ladder_3;
            _2886 = frontier_phi_58_59_ladder_2;
            _2888 = frontier_phi_58_59_ladder_1;
        }
        float _2893 = isnan(1.0) ? _879 : (isnan(_879) ? 1.0 : min(_879, 1.0));
        _2669 = (_2893 * _2884) + _2102;
        _2671 = (_2893 * _2886) + _2104;
        _2673 = (_2893 * _2888) + _2106;
        _2675 = ((_2878 * _863) * _2893) + _2450;
        _2677 = ((_2880 * _865) * _2893) + _2452;
        _2679 = ((_2882 * _866) * _2893) + _2454;
    }
    else
    {
        _2669 = _2102;
        _2671 = _2104;
        _2673 = _2106;
        _2675 = _2450;
        _2677 = _2452;
        _2679 = _2454;
    }
    float _4641 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4652 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4663 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2696 = ((isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2669 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _879))) + ((_2675 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    float _2697 = ((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2671 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _879))) + ((_2677 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    float _2698 = ((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2673 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _879))) + ((_2679 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1719)) * cbPerFrame._m0[3u].x);
    uint _2699 = _242 + 6u;
    float _2707 = _801 / cbSceneParam._m0[86u].x;
    float _2708 = _802 / cbSceneParam._m0[86u].y;
    vec4 _2722 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, (log2((isnan(cbSceneParam._m0[77u].w) ? _723 : (isnan(_723) ? cbSceneParam._m0[77u].w : min(_723, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2724 = _2722.x;
    float _2725 = _2722.y;
    float _2726 = _2722.z;
    float _2727 = _2722.w;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    if (_723 > cbSceneParam._m0[78u].w)
    {
        float _2782 = isnan(_723) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _723 : min(cbSceneParam._m0[80u].w, _723));
        float _2783 = _2782 / _723;
        float _2794 = _2783 * _774;
        float _2795 = _775 * _2783;
        float _2796 = (-0.0) - _2795;
        float _2798 = _2783 * _776;
        float _2800 = (cbSceneParam._m0[77u].w * _2796) / _2782;
        float _2801 = _2800 + cbSceneParam._m0[79u].w;
        float _2802 = cbSceneParam._m0[79u].w - _2795;
        float _2808 = sqrt(((_2794 * _2794) + (_2795 * _2795)) + (_2798 * _2798));
        float _2811 = (1.0 - (cbSceneParam._m0[77u].w / _2782)) * _2808;
        float _2816 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2818 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2995;
        if (abs((_2796 - _2800) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2995 = ((((_2801 > 0.0) ? exp2(_2816 * _2801) : (2.0 - exp2(_2818 * _2801))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2811;
        }
        else
        {
            float _2939 = 1.0 / cbSceneParam._m0[80u].x;
            float _2940 = isnan(_2802) ? _2801 : (isnan(_2801) ? _2802 : max(_2801, _2802));
            float _2941 = isnan(_2802) ? _2801 : (isnan(_2801) ? _2802 : min(_2801, _2802));
            float _2950 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : min(_2940, 0.0));
            float _2951 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : min(_2941, 0.0));
            _2995 = ((abs(_2808 / _2796) * cbSceneParam._m0[80u].y) * ((((_2950 - _2951) * 2.0) - ((exp2(_2816 * (isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0)))) - exp2(_2816 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))))) * _2939)) - ((exp2(_2818 * _2950) - exp2(_2818 * _2951)) * _2939))) + (_2811 * cbSceneParam._m0[80u].z);
        }
        vec4 _2997 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, 1.0), 0.0);
        float _3006 = exp2((_2995 * (-1.44269502162933349609375)) * (1.0 - _2997.w));
        float _3007 = log2(_3006);
        float _3023 = log2(_2727);
        _2820 = (exp2(_3023 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].x)) * _2997.x) / cbSceneParam._m0[78u].x)) + _2724;
        _2822 = (exp2(_3023 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].y)) * _2997.y) / cbSceneParam._m0[78u].y)) + _2725;
        _2824 = (exp2(_3023 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3007 * cbSceneParam._m0[78u].z)) * _2997.z) / cbSceneParam._m0[78u].z)) + _2726;
        _2826 = _3006 * _2727;
    }
    else
    {
        _2820 = _2724;
        _2822 = _2725;
        _2824 = _2726;
        _2826 = _2727;
    }
    bool _3033;
    vec4 _2836;
    vec4 _2858;
    float _2860;
    float _2864;
    float _2865;
    float _2866;
    float _2867;
    bool _2877;
    for (;;)
    {
        _2836 = cbMatDynParam._m0[0u];
        float _2838 = roundEven(_2836.y);
        bool _2839 = _2838 == 3.0;
        float _2840 = log2(_2826);
        float _2847 = exp2(_2840 * cbSceneParam._m0[78u].x) * _2696;
        float _2848 = exp2(_2840 * cbSceneParam._m0[78u].y) * _2697;
        float _2849 = exp2(_2840 * cbSceneParam._m0[78u].z) * _2698;
        float _2856 = _790 + (-0.5);
        _2858 = cbMtdParam._m0[1u];
        _2860 = _2858.y * _2856;
        float _2863 = (_2838 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2864 = _2863 * (_2839 ? _2847 : (_2847 + (cbSceneParam._m0[72u].w * _2820)));
        _2865 = _2863 * (_2839 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2822)));
        _2866 = _2863 * (_2839 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2824)));
        _2867 = _2856 * 0.999000012874603271484375;
        _2877 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2877)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _2867) < 0.5)
            {
                _3033 = true;
                break;
            }
        }
        uint _2974 = _839 + uint(_2836.w);
        if ((cbInstanceData._m0[_2974].w < 1.0) && ((cbInstanceData._m0[_2974].w + _2867) < 0.5))
        {
            _3033 = true;
            break;
        }
        if ((_2860 + 1.0) < _2858.x)
        {
            _3033 = true;
            break;
        }
        _3033 = false;
        break;
    }
    float _3238;
    if (_3033)
    {
        discard_state = true;
        _3238 = 0.0;
    }
    else
    {
        _3238 = cbInstanceData._m0[_2699].w;
    }
    SV_Target.x = _2864;
    SV_Target.y = _2865;
    SV_Target.z = _2866;
    SV_Target.w = _3238;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2699].w;
    discard_exit();
}


