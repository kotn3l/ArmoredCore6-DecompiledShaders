#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1617;
float _3994;
float _3995;
float _3996;
float _3997;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _255 = _254 * _246;
    float _256 = _254 * _247;
    float _257 = _254 * _248;
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = _261 * NORMAL.x;
    float _263 = _261 * NORMAL.y;
    float _264 = _261 * NORMAL.z;
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = _268 * TANGENT.x;
    float _270 = _268 * TANGENT.y;
    float _271 = _268 * TANGENT.z;
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4006 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4017 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4028 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _395.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[23u].w) + _441) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4039 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _466 = (_459 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _467 = (_459 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _468 = (_459 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _395.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[23u].w) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4050 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    float _545 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _539;
    float _548 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _540;
    float _551 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _541;
    float _558 = ((_539 - _545) * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) + _545;
    float _559 = ((_540 - _548) * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) + _548;
    float _560 = ((_541 - _551) * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) + _551;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _312) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _313) + cbTextureTilingScale._m0[14u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _640 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _642 = _640.x;
    float _643 = _640.y;
    float _644 = _640.z;
    float _651 = ((_623.x - _642) * _459) + _642;
    float _652 = ((_623.y - _643) * _459) + _643;
    float _653 = ((_623.z - _644) * _459) + _644;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _678 = ((_665.z - _653) * _532) + _653;
    float _681 = ((((_665.x - _651) * _532) + _651) * 2.0) + (-1.0);
    float _682 = ((((_665.y - _652) * _532) + _652) * 2.0) + (-1.0);
    float _683 = dot(vec2(_681, _682), vec2(_681, _682));
    float _4061 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _688 = sqrt(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))));
    vec4 _706 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _718 = (_681 + ((((_598.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_706.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _719 = (_682 + ((((_598.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_706.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _722 = fma(_688, _262, fma(_719, _269, _718 * _255));
    float _725 = fma(_688, _263, fma(_719, _270, _718 * _256));
    float _728 = fma(_688, _264, fma(_719, _271, _718 * _257));
    float _732 = inversesqrt(dot(vec3(_722, _725, _728), vec3(_722, _725, _728)));
    vec4 _759 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _761 = _759.x;
    float _762 = 1.0 - _761;
    float _771 = (cbMtdParam._m0[19u].x + dot(vec4(_732 * _722, _732 * _725, _732 * _728, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_761 - _762) * cbMtdParam._m0[24u].z) + _762) * cbMtdParam._m0[21u].z);
    float _4072 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _772 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _774 = (-0.0) - cbMtdParam._m0[24u].x;
    float _776 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _776 : (isnan(_776) ? 1.0 : min(_776, 1.0));
    float _784 = _772 - ((_772 * TEXCOORD_8.x) * _777);
    float _785 = _772 - ((_772 * TEXCOORD_8.y) * _777);
    float _786 = _772 - ((_772 * TEXCOORD_8.z) * _777);
    float _793 = (_784 * ((_579.x * cbMtdParam._m0[18u].x) - _558)) + _558;
    float _794 = (_785 * ((_579.y * cbMtdParam._m0[18u].y) - _559)) + _559;
    float _795 = (_786 * ((_579.z * cbMtdParam._m0[18u].z) - _560)) + _560;
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _809 = _807.x;
    float _810 = 1.0 - _809;
    float _836 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_809 - _810) * cbMtdParam._m0[24u].w) + _810) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4093 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _837 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _845 = ((((cbMtdParam._m0[10u].x - _793) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _837) + _793;
    float _846 = ((((cbMtdParam._m0[10u].y - _794) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _837) + _794;
    float _847 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _795)) * _837) + _795;
    vec4 _873 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _875 = _873.x;
    float _893 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _875) * _459) + _875;
    float _910 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _893) * _532) + _893;
    float _914 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _910) * cbMtdParam._m0[19u].z) + _910;
    float _916 = _914 - (_914 * _784);
    float _918 = _916 - (_916 * _837);
    float _923 = (((_598.z - _678) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _678;
    float _927 = ((_706.z - _923) * cbMtdParam._m0[19u].w) + _923;
    vec4 _941 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _948 = (_941.x * 2.0) + (-1.0);
    float _949 = (_941.y * 2.0) + (-1.0);
    float _950 = dot(vec2(_948, _949), vec2(_948, _949));
    float _4104 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _958 = ((_941.z - _927) * _784) + _927;
    float _961 = ((cbMtdParam._m0[23u].x - _958) * _837) + _958;
    vec4 _982 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _988 = (_982.x * 2.0) + (-1.0);
    float _989 = (_982.y * 2.0) + (-1.0);
    float _990 = dot(vec2(_988, _989), vec2(_988, _989));
    float _4115 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _1005 = ((sqrt(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) - _688) * _786) + _688;
    float _1008 = (((_948 - _718) * _784) + _718) + (cbMtdParam._m0[21u].x * _718);
    float _1009 = (((_949 - _719) * _785) + _719) + (cbMtdParam._m0[21u].x * _719);
    float _1020 = (((_988 - _1008) + (_1008 * cbMtdParam._m0[22u].z)) * _837) + _1008;
    float _1021 = (((_989 - _1009) + (_1009 * cbMtdParam._m0[22u].z)) * _837) + _1009;
    float _1022 = (_837 * (sqrt(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) - _1005)) + _1005;
    float _1024 = cbMtdParam._m0[22u].x + _706.w;
    float _1027 = fma(_1022, _262, fma(_1021, _269, _1020 * _255));
    float _1030 = fma(_1022, _263, fma(_1021, _270, _1020 * _256));
    float _1033 = fma(_1022, _264, fma(_1021, _271, _1020 * _257));
    float _1037 = inversesqrt(dot(vec3(_1027, _1030, _1033), vec3(_1027, _1030, _1033)));
    float _1038 = _1037 * _1027;
    float _1039 = _1037 * _1030;
    float _1040 = _1037 * _1033;
    float _4126 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _1041 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _4137 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _4148 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4159 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4170 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4181 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _1046 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _1060 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1110 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1100);
    float _1111 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1100);
    float _1112 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1100);
    float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
    float _1117 = _1110 * _1116;
    float _1118 = _1111 * _1116;
    float _1119 = _1112 * _1116;
    vec4 _1124 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1126 = _1124.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1298 = sqrt(((_1110 * _1110) + (_1111 * _1111)) + (_1112 * _1112));
        float _1304 = (cbMatDynParam._m0[5u].x * _1298) + cbMatDynParam._m0[5u].y;
        float _4192 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1309 = (cbMatDynParam._m0[5u].z * _1298) + cbMatDynParam._m0[5u].w;
        float _4203 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) - _1305)) + _1305) < ((_1126 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1137 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1138 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1156 = fma(_1040, cbSceneParam._m0[5u].z, fma(_1039, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1038));
    float _1159 = fma(_1040, cbSceneParam._m0[6u].z, fma(_1039, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1038));
    float _1162 = fma(_1040, cbSceneParam._m0[7u].z, fma(_1039, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1038));
    uint _1175 = _293 + 9u;
    uint _1176 = _1175 + uint(cbMatDynParam._m0[0u].w);
    float _1182 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * cbInstanceData._m0[_1176].x;
    float _1183 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * cbInstanceData._m0[_1176].y;
    float _1184 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * cbInstanceData._m0[_1176].z;
    float _4214 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _1185 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _4225 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1186 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _1187 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _1188 = 1.0 - _1046;
    float _1189 = _1185 * _1188;
    float _1190 = _1186 * _1188;
    float _1191 = _1187 * _1188;
    float _1196 = (_1185 + (-0.039999999105930328369140625)) * _1046;
    float _1197 = (_1186 + (-0.039999999105930328369140625)) * _1046;
    float _1198 = (_1187 + (-0.039999999105930328369140625)) * _1046;
    float _1199 = _1196 + 0.039999999105930328369140625;
    float _1201 = _1197 + 0.039999999105930328369140625;
    float _1202 = _1198 + 0.039999999105930328369140625;
    vec4 _1211 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1137, cbSceneParam._m0[86u].y * _1138));
    float _1215 = ((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * TEXCOORD_5.w) * _1211.x;
    float _1216 = dot(vec3(_1038, _1039, _1040), vec3(_1117, _1118, _1119));
    float _1219 = _1216 * 2.0;
    float _1223 = (_1219 * _1038) - _1117;
    float _1224 = (_1219 * _1039) - _1118;
    float _1225 = (_1219 * _1040) - _1119;
    float _1229 = abs(dot(vec3(_1117, _1118, _1119), vec3(_1038, _1039, _1040)));
    float _4247 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _1231 = sqrt(_1041);
    float _1244 = exp2((_1231 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1231 * 3.0));
    float _1250 = (1.0 - _1244) * ((_1231 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1251 = _1244 * _1231;
    float _1279 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1283 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1287 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1616;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1341 = fma(_1287, cbModelParam._m0[26u].z, fma(_1283, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1279));
        float _1345 = fma(_1287, cbModelParam._m0[27u].z, fma(_1283, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1279));
        float _1349 = fma(_1287, cbModelParam._m0[28u].z, fma(_1283, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1279));
        float _1374 = _1279 + _1038;
        float _1375 = _1283 + _1039;
        float _1376 = _1287 + _1040;
        float _1386 = fma(_1376, cbModelParam._m0[26u].z, fma(_1375, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1374)) - _1341;
        float _1387 = fma(_1376, cbModelParam._m0[27u].z, fma(_1375, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1374)) - _1345;
        float _1388 = fma(_1376, cbModelParam._m0[28u].z, fma(_1375, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1374)) - _1349;
        float _1392 = inversesqrt(dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388)));
        float _1405 = ((_1392 * _1386) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1341 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1392 * _1387) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1345 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1392 * _1388) / cbModelParam._m0[34u].z) + ((((((_1349 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        float _1444 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1410.x + (-0.5));
        float _1446 = _1444 * (_1410.y + (-0.5));
        float _1447 = _1444 * (_1410.z + (-0.5));
        float _1454 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1417.x + (-0.5));
        float _1456 = _1454 * (_1417.y + (-0.5));
        float _1457 = _1454 * (_1417.z + (-0.5));
        float _1464 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1424.x + (-0.5));
        float _1466 = _1464 * (_1424.y + (-0.5));
        float _1467 = _1464 * (_1424.z + (-0.5));
        float _1474 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1431.x + (-0.5));
        float _1476 = _1474 * (_1431.y + (-0.5));
        float _1477 = _1474 * (_1431.z + (-0.5));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = _1445 * 0.5;
        float _1482 = _1455 * 0.5;
        float _1483 = _1465 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1498 = (dot(vec3(_1038, _1039, _1040), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1508 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4295 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1510 + 1.0))) + _1515) * _1478;
        float _1525 = _1446 * 0.5;
        float _1526 = _1456 * 0.5;
        float _1527 = _1466 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_1038, _1039, _1040), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4328 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1552 + 1.0))) + _1557) * _1479;
        float _1567 = _1447 * 0.5;
        float _1568 = _1457 * 0.5;
        float _1569 = _1467 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_1038, _1039, _1040), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4361 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1594 + 1.0))) + _1599) * _1480;
        _1616 = _1447;
        _1618 = _1446;
        _1619 = _1445;
        _1620 = _1457;
        _1621 = _1456;
        _1622 = _1455;
        _1623 = _1467;
        _1624 = _1466;
        _1625 = _1465;
        _1626 = _1480;
        _1627 = _1479;
        _1628 = _1478;
        _1629 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1630 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1631 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
    }
    else
    {
        _1616 = _1617;
        _1618 = _1617;
        _1619 = _1617;
        _1620 = _1617;
        _1621 = _1617;
        _1622 = _1617;
        _1623 = _1617;
        _1624 = _1617;
        _1625 = _1617;
        _1626 = _1617;
        _1627 = _1617;
        _1628 = _1617;
        _1629 = 0.0;
        _1630 = 0.0;
        _1631 = 0.0;
    }
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1658 = fma(_1287, cbModelParam._m0[30u].z, fma(_1283, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1279));
        float _1662 = fma(_1287, cbModelParam._m0[31u].z, fma(_1283, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1279));
        float _1666 = fma(_1287, cbModelParam._m0[32u].z, fma(_1283, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1279));
        float _1689 = _1279 + _1038;
        float _1690 = _1283 + _1039;
        float _1691 = _1287 + _1040;
        float _1701 = fma(_1691, cbModelParam._m0[30u].z, fma(_1690, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1689)) - _1658;
        float _1702 = fma(_1691, cbModelParam._m0[31u].z, fma(_1690, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1689)) - _1662;
        float _1703 = fma(_1691, cbModelParam._m0[32u].z, fma(_1690, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1689)) - _1666;
        float _1707 = inversesqrt(dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703)));
        float _1720 = ((_1707 * _1701) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1658 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1721 = ((_1707 * _1702) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1662 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1722 = ((_1707 * _1703) / cbModelParam._m0[35u].z) + ((((((_1666 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1724 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1720, _1721, _1722), 0.0);
        vec4 _1731 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1720, _1721, _1722), 0.0);
        vec4 _1738 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1720, _1721, _1722), 0.0);
        vec4 _1745 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1720, _1721, _1722), 0.0);
        float _1757 = exp2((_1724.w + (-0.5)) * 20.0) * 2.0;
        float _1758 = _1757 * (_1724.x + (-0.5));
        float _1759 = _1757 * (_1724.y + (-0.5));
        float _1760 = _1757 * (_1724.z + (-0.5));
        float _1767 = exp2((_1731.w + (-0.5)) * 20.0) * 2.0;
        float _1768 = _1767 * (_1731.x + (-0.5));
        float _1769 = _1767 * (_1731.y + (-0.5));
        float _1770 = _1767 * (_1731.z + (-0.5));
        float _1777 = exp2((_1738.w + (-0.5)) * 20.0) * 2.0;
        float _1778 = _1777 * (_1738.x + (-0.5));
        float _1779 = _1777 * (_1738.y + (-0.5));
        float _1780 = _1777 * (_1738.z + (-0.5));
        float _1787 = exp2((_1745.w + (-0.5)) * 20.0) * 2.0;
        float _1788 = _1787 * (_1745.x + (-0.5));
        float _1789 = _1787 * (_1745.y + (-0.5));
        float _1790 = _1787 * (_1745.z + (-0.5));
        float _1791 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1792 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1793 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1794 = _1758 * 0.5;
        float _1795 = _1768 * 0.5;
        float _1796 = _1778 * 0.5;
        float _1797 = dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796));
        float _1802 = (_1797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1797);
        float _1810 = (dot(vec3(_1038, _1039, _1040), vec3(_1802 * _1794, _1802 * _1795, _1802 * _1796)) + 1.0) * 0.5;
        float _4402 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1819 = sqrt(((_1795 * _1795) + (_1794 * _1794)) + (_1796 * _1796)) / (_1791 + 9.9999997473787516355514526367188e-06);
        float _4413 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1821 = _1820 * 2.0;
        float _1825 = (1.0 - _1820) / (_1820 + 1.0);
        float _4424 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1835 = ((((1.0 - _1826) * (_1821 + 2.0)) * exp2(log2(isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_1821 + 1.0))) + _1826) * _1791;
        float _1836 = _1759 * 0.5;
        float _1837 = _1769 * 0.5;
        float _1838 = _1779 * 0.5;
        float _1839 = dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838));
        float _1844 = (_1839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1839);
        float _1852 = (dot(vec3(_1038, _1039, _1040), vec3(_1844 * _1836, _1844 * _1837, _1844 * _1838)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1861 = sqrt(((_1837 * _1837) + (_1836 * _1836)) + (_1838 * _1838)) / (_1792 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1863 = _1862 * 2.0;
        float _1867 = (1.0 - _1862) / (_1862 + 1.0);
        float _4457 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1877 = ((((1.0 - _1868) * (_1863 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1863 + 1.0))) + _1868) * _1792;
        float _1878 = _1760 * 0.5;
        float _1879 = _1770 * 0.5;
        float _1880 = _1780 * 0.5;
        float _1881 = dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880));
        float _1886 = (_1881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1881);
        float _1894 = (dot(vec3(_1038, _1039, _1040), vec3(_1886 * _1878, _1886 * _1879, _1886 * _1880)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1903 = sqrt(((_1879 * _1879) + (_1878 * _1878)) + (_1880 * _1880)) / (_1793 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1904 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1905 = _1904 * 2.0;
        float _1909 = (1.0 - _1904) / (_1904 + 1.0);
        float _4490 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1919 = ((((1.0 - _1910) * (_1905 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1905 + 1.0))) + _1910) * _1793;
        _1927 = _1760;
        _1928 = _1759;
        _1929 = _1758;
        _1930 = _1770;
        _1931 = _1769;
        _1932 = _1768;
        _1933 = _1780;
        _1934 = _1779;
        _1935 = _1778;
        _1936 = _1793;
        _1937 = _1792;
        _1938 = _1791;
        _1939 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)));
        _1940 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)));
        _1941 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0)));
    }
    else
    {
        _1927 = _1617;
        _1928 = _1617;
        _1929 = _1617;
        _1930 = _1617;
        _1931 = _1617;
        _1932 = _1617;
        _1933 = _1617;
        _1934 = _1617;
        _1935 = _1617;
        _1936 = _1617;
        _1937 = _1617;
        _1938 = _1617;
        _1939 = 0.0;
        _1940 = 0.0;
        _1941 = 0.0;
    }
    float _1951 = (cbModelParam._m0[1u].x * (_1939 - _1629)) + _1629;
    float _1952 = (cbModelParam._m0[1u].x * (_1940 - _1630)) + _1630;
    float _1953 = (cbModelParam._m0[1u].x * (_1941 - _1631)) + _1631;
    float _1974 = fma(_1953, cbSceneParam._m0[89u].z, fma(_1952, cbSceneParam._m0[89u].y, _1951 * cbSceneParam._m0[89u].x));
    float _1977 = fma(_1953, cbSceneParam._m0[90u].z, fma(_1952, cbSceneParam._m0[90u].y, _1951 * cbSceneParam._m0[90u].x));
    float _1980 = fma(_1953, cbSceneParam._m0[91u].z, fma(_1952, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1951));
    float _1995 = _1223 * 0.5;
    float _1996 = _1224 * 0.5;
    float _1997 = _1225 * 0.5;
    float _1998 = dot(vec4(_1995, _1996, _1997, 1.0), vec4(_1929, _1932, _1935, _1938));
    float _2001 = dot(vec4(_1995, _1996, _1997, 1.0), vec4(_1928, _1931, _1934, _1937));
    float _2004 = dot(vec4(_1995, _1996, _1997, 1.0), vec4(_1927, _1930, _1933, _1936));
    float _2038;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2011 = dot(vec4(_1995, _1996, _1997, 1.0), vec4(_1616, _1620, _1623, _1626));
        float _2015 = dot(vec4(_1995, _1996, _1997, 1.0), vec4(_1618, _1621, _1624, _1627));
        float _2019 = dot(vec4(_1995, _1996, _1997, 1.0), vec4(_1619, _1622, _1625, _1628));
        float _2026 = dot(vec4(cbModelParam._m0[39u]), vec4(_1995, _1996, _1997, 1.0));
        _2038 = dot(vec3(isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0)), isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0)), isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2026) ? 0.0 : (isnan(0.0) ? _2026 : max(0.0, _2026))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2038 = 1.0;
    }
    float _2049;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2040 = dot(vec4(cbModelParam._m0[40u]), vec4(_1995, _1996, _1997, 1.0));
        _2049 = dot(vec3(isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0)), isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0)), isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2040) ? 0.0 : (isnan(0.0) ? _2040 : max(0.0, _2040))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2049 = 1.0;
    }
    float _2053 = (_2049 * cbModelParam._m0[1u].x) + (_2038 * (1.0 - cbModelParam._m0[1u].x));
    float _2063 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1041);
    float _2064 = isnan(_2063) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2063 : min(cbModelParam._m0[25u].z, _2063));
    float _2144;
    float _2146;
    float _2148;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2111 = fma(_1287, cbModelParam._m0[13u].z, fma(_1283, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1279)) + cbModelParam._m0[13u].w;
        float _2115 = fma(_1287, cbModelParam._m0[14u].z, fma(_1283, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1279)) + cbModelParam._m0[14u].w;
        float _2119 = fma(_1287, cbModelParam._m0[15u].z, fma(_1283, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1279)) + cbModelParam._m0[15u].w;
        float _2122 = fma(_1225, cbModelParam._m0[13u].z, fma(_1224, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1223));
        float _2125 = fma(_1225, cbModelParam._m0[14u].z, fma(_1224, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1223));
        float _2128 = fma(_1225, cbModelParam._m0[15u].z, fma(_1224, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1223));
        float _2156;
        if (_2122 > 0.0)
        {
            _2156 = abs((1.0 - _2111) / _2122);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2111 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2156 = frontier_phi_17_15_ladder;
        }
        float _2358;
        if (_2125 > 0.0)
        {
            _2358 = abs((1.0 - _2115) / _2125);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2125 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2115 + 1.0) / _2125);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2358 = frontier_phi_26_22_ladder;
        }
        float _2612;
        if (_2128 > 0.0)
        {
            _2612 = abs((1.0 - _2119) / _2128);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2119 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2612 = frontier_phi_38_33_ladder;
        }
        float _2614 = isnan(_2358) ? _2156 : (isnan(_2156) ? _2358 : min(_2156, _2358));
        float _2615 = isnan(_2612) ? _2614 : (isnan(_2614) ? _2612 : min(_2614, _2612));
        float _2619 = (_2615 * _2122) + _2111;
        float _2620 = (_2615 * _2125) + _2115;
        float _2621 = (_2615 * _2128) + _2119;
        float _2622 = _2615 * 9.9999997473787516355514526367188e-05;
        float _2624 = (-1.0) - _2622;
        float _2626 = _2622 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2621 > _2626) || ((_2621 < _2624) || ((_2620 > _2626) || ((_2620 < _2624) || ((_2619 < _2624) || (_2619 > _2626))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2749 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2621, cbModelParam._m0[9u].z, fma(_2620, cbModelParam._m0[9u].y, _2619 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2621, cbModelParam._m0[10u].z, fma(_2620, cbModelParam._m0[10u].y, _2619 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2621, cbModelParam._m0[11u].z, fma(_2620, cbModelParam._m0[11u].y, _2619 * cbModelParam._m0[11u].x))), _2064);
            frontier_phi_16_38_ladder = _2749.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2749.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2749.x * cbModelParam._m0[1u].y;
        }
        _2144 = frontier_phi_16_38_ladder_2;
        _2146 = frontier_phi_16_38_ladder_1;
        _2148 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2132 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1223, _1224, _1225), _2064);
        _2144 = _2132.x * cbModelParam._m0[1u].y;
        _2146 = _2132.y * cbModelParam._m0[1u].y;
        _2148 = _2132.z * cbModelParam._m0[1u].y;
    }
    float _2152 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1041);
    float _2153 = isnan(_2152) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2152 : min(cbModelParam._m0[25u].w, _2152));
    float _2242;
    float _2244;
    float _2246;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2206 = fma(_1287, cbModelParam._m0[21u].z, fma(_1283, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1279)) + cbModelParam._m0[21u].w;
        float _2210 = fma(_1287, cbModelParam._m0[22u].z, fma(_1283, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1279)) + cbModelParam._m0[22u].w;
        float _2214 = fma(_1287, cbModelParam._m0[23u].z, fma(_1283, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1279)) + cbModelParam._m0[23u].w;
        float _2217 = fma(_1225, cbModelParam._m0[21u].z, fma(_1224, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1223));
        float _2220 = fma(_1225, cbModelParam._m0[22u].z, fma(_1224, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1223));
        float _2223 = fma(_1225, cbModelParam._m0[23u].z, fma(_1224, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1223));
        float _2363;
        if (_2217 > 0.0)
        {
            _2363 = abs((1.0 - _2206) / _2217);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2217 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2206 + 1.0) / _2217);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2363 = frontier_phi_28_24_ladder;
        }
        float _2639;
        if (_2220 > 0.0)
        {
            _2639 = abs((1.0 - _2210) / _2220);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2220 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2210 + 1.0) / _2220);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2639 = frontier_phi_40_35_ladder;
        }
        float _2852;
        if (_2223 > 0.0)
        {
            _2852 = abs((1.0 - _2214) / _2223);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2223 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2214 + 1.0) / _2223);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2852 = frontier_phi_49_46_ladder;
        }
        float _2854 = isnan(_2639) ? _2363 : (isnan(_2363) ? _2639 : min(_2363, _2639));
        float _2855 = isnan(_2852) ? _2854 : (isnan(_2854) ? _2852 : min(_2854, _2852));
        float _2859 = (_2855 * _2217) + _2206;
        float _2860 = (_2855 * _2220) + _2210;
        float _2861 = (_2855 * _2223) + _2214;
        float _2862 = _2855 * 9.9999997473787516355514526367188e-05;
        float _2863 = (-1.0) - _2862;
        float _2865 = _2862 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2861 > _2865) || ((_2861 < _2863) || ((_2860 > _2865) || ((_2860 < _2863) || ((_2859 < _2863) || (_2859 > _2865))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3060 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2861, cbModelParam._m0[17u].z, fma(_2860, cbModelParam._m0[17u].y, _2859 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2861, cbModelParam._m0[18u].z, fma(_2860, cbModelParam._m0[18u].y, _2859 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2861, cbModelParam._m0[19u].z, fma(_2860, cbModelParam._m0[19u].y, _2859 * cbModelParam._m0[19u].x))), _2153);
            frontier_phi_25_49_ladder = _3060.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3060.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3060.x * cbModelParam._m0[1u].z;
        }
        _2242 = frontier_phi_25_49_ladder_2;
        _2244 = frontier_phi_25_49_ladder_1;
        _2246 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2226 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1223, _1224, _1225), _2153);
        _2242 = _2226.x * cbModelParam._m0[1u].z;
        _2244 = _2226.y * cbModelParam._m0[1u].z;
        _2246 = _2226.z * cbModelParam._m0[1u].z;
    }
    float _2259 = (((_1250 * _1199) + _1251) * _1215) * ((cbModelParam._m0[1u].w * (_2242 - _2144)) + _2144);
    float _2261 = (((_1250 * _1201) + _1251) * _1215) * ((cbModelParam._m0[1u].w * (_2244 - _2146)) + _2146);
    float _2263 = (((_1250 * _1202) + _1251) * _1215) * ((cbModelParam._m0[1u].w * (_2246 - _2148)) + _2148);
    float _2266 = fma(_2263, cbSceneParam._m0[89u].z, fma(_2261, cbSceneParam._m0[89u].y, _2259 * cbSceneParam._m0[89u].x));
    float _2269 = fma(_2263, cbSceneParam._m0[90u].z, fma(_2261, cbSceneParam._m0[90u].y, _2259 * cbSceneParam._m0[90u].x));
    float _2272 = fma(_2263, cbSceneParam._m0[91u].z, fma(_2261, cbSceneParam._m0[91u].y, _2259 * cbSceneParam._m0[91u].x));
    uvec4 _2282 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2284 = _2282.x * 14u;
    uint _2285 = _2284 + 13u;
    float _2292 = _1215 + (-1.0);
    float _2297 = (cbLight._m0[_2285].x * _2292) + 1.0;
    float _2298 = (cbLight._m0[_2285].y * _2292) + 1.0;
    float _2299 = (cbLight._m0[_2285].z * _2292) + 1.0;
    float _2300 = (cbLight._m0[_2285].w * _2292) + 1.0;
    uint _2301 = _2284 + 5u;
    float _2307 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
    uint _2311 = _2284 + 4u;
    float _2317 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
    uint _2321 = _2284 | 1u;
    float _2332 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_1038, _1039, _1040));
    float _2335 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_1038, _1039, _1040));
    float _4626 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _4637 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2340 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * 0.3183098733425140380859375;
    float _2342 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * 0.3183098733425140380859375;
    float _2349 = ((cbLight._m0[_2301].x * _2307) * _2342) + ((cbLight._m0[_2311].x * _2317) * _2340);
    float _2350 = ((_2307 * cbLight._m0[_2301].y) * _2342) + ((_2317 * cbLight._m0[_2311].y) * _2340);
    float _2351 = ((_2307 * cbLight._m0[_2301].z) * _2342) + ((_2317 * cbLight._m0[_2311].z) * _2340);
    uvec4 _2355 = floatBitsToUint(cbLight._m0[_2284 + 12u]);
    bool _2357 = _2355.x == 0u;
    float _2368;
    float _2370;
    float _2372;
    if (_2357)
    {
        _2368 = _2349;
        _2370 = _2350;
        _2372 = _2351;
    }
    else
    {
        uint _2376 = _2284 + 6u;
        float _2392 = (dot(vec3(cbLight._m0[_2284 + 2u].xyz), vec3(_1038, _1039, _1040)) * 0.5) + 0.5;
        float _2393 = _2392 * _2392;
        float _4648 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2394 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2395 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2368 = (((cbLight._m0[_2376].x * 0.3183098733425140380859375) * _2394) * _2395) + _2349;
        _2370 = (((cbLight._m0[_2376].y * 0.3183098733425140380859375) * _2394) * _2395) + _2350;
        _2372 = (((cbLight._m0[_2376].z * 0.3183098733425140380859375) * _2394) * _2395) + _2351;
    }
    bool _2375 = _2355.y == 0u;
    float _2413;
    float _2415;
    float _2417;
    if (_2375)
    {
        _2413 = _2368;
        _2415 = _2370;
        _2417 = _2372;
    }
    else
    {
        uint _2583 = _2284 + 7u;
        float _2599 = (dot(vec3(cbLight._m0[_2284 + 3u].xyz), vec3(_1038, _1039, _1040)) * 0.5) + 0.5;
        float _2600 = _2599 * _2599;
        float _4664 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2601 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2602 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2413 = (((cbLight._m0[_2583].x * 0.3183098733425140380859375) * _2601) * _2602) + _2368;
        _2415 = (((cbLight._m0[_2583].y * 0.3183098733425140380859375) * _2601) * _2602) + _2370;
        _2417 = (((cbLight._m0[_2583].z * 0.3183098733425140380859375) * _2601) * _2602) + _2372;
    }
    uint _2420 = _2284 + 8u;
    float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _1041) * 0.949999988079071044921875);
    float _2434 = _2433 * _2433;
    float _2435 = cbLight._m0[_2284].x + _1117;
    float _2436 = cbLight._m0[_2284].y + _1118;
    float _2437 = cbLight._m0[_2284].z + _1119;
    float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
    float _2442 = _2441 * _2435;
    float _2443 = _2441 * _2436;
    float _2444 = _2441 * _2437;
    float _2445 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2284].xyz));
    float _4680 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _4691 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _2449 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _2450 = dot(vec3(_1038, _1039, _1040), vec3(_2442, _2443, _2444));
    float _4702 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2454 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2442, _2443, _2444));
    float _4713 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2458 = _2434 * _2434;
    float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
    float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
    float _2471 = 0.959999978542327880859375 - _1196;
    float _2473 = 0.959999978542327880859375 - _1197;
    float _2474 = 0.959999978542327880859375 - _1198;
    float _2481 = 1.0 - _2434;
    float _2492 = (0.5 / (((_2449 * ((_2448 * _2481) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2481) + _2434) * _2448))) * _2448;
    float _4724 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2494 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
    uint _2505 = _2284 + 9u;
    float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _1041) * 0.949999988079071044921875);
    float _2517 = _2516 * _2516;
    float _2518 = cbLight._m0[_2321].x + _1117;
    float _2519 = cbLight._m0[_2321].y + _1118;
    float _2520 = cbLight._m0[_2321].z + _1119;
    float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
    float _2525 = _2524 * _2518;
    float _2526 = _2524 * _2519;
    float _2527 = _2524 * _2520;
    float _2528 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2321].xyz));
    float _4735 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _2532 = dot(vec3(_1038, _1039, _1040), vec3(_2525, _2526, _2527));
    float _4746 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2535 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2536 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2525, _2526, _2527));
    float _4757 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2540 = _2517 * _2517;
    float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
    float _2551 = exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0);
    float _2558 = 1.0 - _2517;
    float _2568 = (0.5 / (((_2449 * ((_2531 * _2558) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2558) + _2517) * _2531))) * _2531;
    float _4768 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2570 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
    float _2580 = (((((_2551 * _2471) + _1199) * cbLight._m0[_2505].x) * _2570) * _2307) + (((((_2470 * _2471) + _1199) * cbLight._m0[_2420].x) * _2494) * _2317);
    float _2581 = (((((_2551 * _2473) + _1201) * cbLight._m0[_2505].y) * _2570) * _2307) + (((((_2470 * _2473) + _1201) * cbLight._m0[_2420].y) * _2494) * _2317);
    float _2582 = (((((_2551 * _2474) + _1202) * cbLight._m0[_2505].z) * _2570) * _2307) + (((((_2470 * _2474) + _1202) * cbLight._m0[_2420].z) * _2494) * _2317);
    float _2644;
    float _2646;
    float _2648;
    if (_2357)
    {
        _2644 = _2580;
        _2646 = _2581;
        _2648 = _2582;
    }
    else
    {
        uint _2650 = _2284 + 2u;
        uint _2654 = _2284 + 10u;
        float _2668 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2650].w)) * _1041) * 0.949999988079071044921875);
        float _2669 = _2668 * _2668;
        float _2670 = cbLight._m0[_2650].x + _1117;
        float _2671 = cbLight._m0[_2650].y + _1118;
        float _2672 = cbLight._m0[_2650].z + _1119;
        float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
        float _2677 = _2676 * _2670;
        float _2678 = _2676 * _2671;
        float _2679 = _2676 * _2672;
        float _2680 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2650].xyz));
        float _4779 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2683 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
        float _2684 = dot(vec3(_1038, _1039, _1040), vec3(_2677, _2678, _2679));
        float _4790 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2688 = dot(vec3(cbLight._m0[_2650].xyz), vec3(_2677, _2678, _2679));
        float _4801 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2692 = _2669 * _2669;
        float _2696 = ((_2687 * _2687) * (_2692 + (-1.0))) + 1.0;
        float _2703 = exp2(log2(1.0 - (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) * 5.0);
        float _2710 = 1.0 - _2669;
        float _2720 = (0.5 / (((_2449 * ((_2683 * _2710) + _2669)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2710) + _2669) * _2683))) * _2683;
        float _4812 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2722 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2692 / ((_2696 * _2696) * 3.141590118408203125));
        float _2723 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2644 = (((((_2703 * _2471) + _1199) * cbLight._m0[_2654].x) * _2722) * _2723) + _2580;
        _2646 = (((((_2703 * _2473) + _1201) * cbLight._m0[_2654].y) * _2722) * _2723) + _2581;
        _2648 = (((((_2703 * _2474) + _1202) * cbLight._m0[_2654].z) * _2722) * _2723) + _2582;
    }
    float _2758;
    float _2760;
    float _2762;
    if (_2375)
    {
        _2758 = _2644;
        _2760 = _2646;
        _2762 = _2648;
    }
    else
    {
        uint _2769 = _2284 + 3u;
        uint _2773 = _2284 + 11u;
        float _2787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2769].w)) * _1041) * 0.949999988079071044921875);
        float _2788 = _2787 * _2787;
        float _2789 = cbLight._m0[_2769].x + _1117;
        float _2790 = cbLight._m0[_2769].y + _1118;
        float _2791 = cbLight._m0[_2769].z + _1119;
        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
        float _2796 = _2795 * _2789;
        float _2797 = _2795 * _2790;
        float _2798 = _2795 * _2791;
        float _2799 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2769].xyz));
        float _4828 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2802 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2803 = dot(vec3(_1038, _1039, _1040), vec3(_2796, _2797, _2798));
        float _4839 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2807 = dot(vec3(cbLight._m0[_2769].xyz), vec3(_2796, _2797, _2798));
        float _4850 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2811 = _2788 * _2788;
        float _2815 = ((_2806 * _2806) * (_2811 + (-1.0))) + 1.0;
        float _2822 = exp2(log2(1.0 - (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) * 5.0);
        float _2829 = 1.0 - _2788;
        float _2839 = (0.5 / (((_2449 * ((_2802 * _2829) + _2788)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2829) + _2788) * _2802))) * _2802;
        float _4861 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2841 = (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2811 / ((_2815 * _2815) * 3.141590118408203125));
        float _2842 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2758 = (((((_2822 * _2471) + _1199) * cbLight._m0[_2773].x) * _2841) * _2842) + _2644;
        _2760 = (((((_2822 * _2473) + _1201) * cbLight._m0[_2773].y) * _2841) * _2842) + _2646;
        _2762 = (((((_2822 * _2474) + _1202) * cbLight._m0[_2773].z) * _2841) * _2842) + _2648;
    }
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    if (_2282.y == 0u)
    {
        float _2917 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2918 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2917;
        float _2919 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2917;
        float _2920 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2917;
        uvec4 _2932 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2933 = _2932.x;
        uint _2944 = uint((float(_2932.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1138) / _2933))) + floor(float(uint(cbSceneParam._m0[85u].x * _1137) / _2933)));
        float _2954 = (log2(_2920 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2955 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        uint _2958 = uint(isnan(14.0) ? _2955 : (isnan(_2955) ? 14.0 : min(_2955, 14.0)));
        uvec4 _2963 = texelFetch(g_lightClusterGridBuffer, int(((_2958 << 2u) + (_2944 << 6u)) >> 2u));
        uint _2964 = _2963.x;
        uint _2965 = _2932.z;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        if (((((1u << ((_2965 >> 4u) & 15u)) + 4294967295u) & _2964) == 0u) || ((_2965 & 240u) == 0u))
        {
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
        }
        else
        {
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            uint _3223 = 0u;
            uint _3232;
            bool _3233;
            for (;;)
            {
                _3232 = texelFetch(g_lightClassification, int((((_2958 << 5u) + (_2944 << 9u)) + (_3223 << 2u)) >> 2u)).x;
                _3233 = _3232 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3233)
                {
                    frontier_phi_66_pred = _3217;
                    frontier_phi_66_pred_1 = _3222;
                    frontier_phi_66_pred_2 = _3221;
                    frontier_phi_66_pred_3 = _3220;
                    frontier_phi_66_pred_4 = _3219;
                    frontier_phi_66_pred_5 = _3218;
                }
                else
                {
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    uint _3368;
                    _3362 = _3217;
                    _3363 = _3218;
                    _3364 = _3219;
                    _3365 = _3220;
                    _3366 = _3221;
                    _3367 = _3222;
                    _3368 = _3232;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    for (;;)
                    {
                        uint _3372 = uint(findLSB(_3368)) + (_3223 << 5u);
                        uint _3369 = (_3368 + 4294967295u) & _3368;
                        uint _3374 = _3372 * 48u;
                        vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3374)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 3u)).x));
                        uint _3394 = (_3372 * 48u) + 4u;
                        vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 3u)).x));
                        uint _3413 = (_3372 * 48u) + 8u;
                        vec3 _3424 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3413)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 2u)).x));
                        float _3428 = _3388.x - _2918;
                        float _3429 = _3388.y - _2919;
                        float _3430 = _3388.z - _2920;
                        float _3431 = dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430));
                        float _3434 = inversesqrt(_3431);
                        float _3435 = _3434 * _3428;
                        float _3436 = _3434 * _3429;
                        float _3437 = _3434 * _3430;
                        float _3438 = dot(vec3(_1156, _1159, _1162), vec3(_3435, _3436, _3437));
                        float _3443 = 1.0 - (_3431 * _3388.w);
                        float _4887 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3444 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3445 = sqrt(_3431) * _3407.w;
                        float _3448 = 1.39999997615814208984375 / (_3445 + 1.39999997615814208984375);
                        float _3449 = _3448 * _3448;
                        float _3452 = ((1.0 - _3449) * _3438) + _3449;
                        float _3455 = _3445 * _3445;
                        float _3459 = ((isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0))) * _3444) / ((_3455 * 0.699999988079071044921875) + 1.0);
                        float _3463 = (-0.0) - _2918;
                        float _3464 = (-0.0) - _2919;
                        float _3465 = (-0.0) - _2920;
                        float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                        float _3470 = _3469 * _3463;
                        float _3471 = _3469 * _3464;
                        float _3472 = _3469 * _3465;
                        float _3480 = exp2(log2(1.0 / ((_3455 * 3.5) + 5.0)) * 0.25);
                        float _3481 = 1.0 - _1231;
                        float _3488 = sqrt(1.0 - ((1.0 - (_3481 * _3481)) * (1.0 - (_3480 * _3480))));
                        float _3489 = _3488 * _3488;
                        float _3490 = _3489 * _3489;
                        float _3491 = _3470 + _3435;
                        float _3492 = _3471 + _3436;
                        float _3493 = _3472 + _3437;
                        float _3497 = inversesqrt(dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493)));
                        float _3501 = dot(vec3(_1156, _1159, _1162), vec3(_3470, _3471, _3472));
                        float _4903 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3504 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                        float _3505 = dot(vec3(_1156, _1159, _1162), vec3(_3497 * _3491, _3497 * _3492, _3497 * _3493));
                        float _4914 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3508 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3512 = ((_3508 * _3508) * (_3490 + (-1.0))) + 1.0;
                        float _3513 = _3448 * _3489;
                        float _3514 = _3513 * _3513;
                        float _3517 = ((1.0 - _3514) * _3438) + _3514;
                        float _4925 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                        float _3518 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3519 = 1.0 - _3489;
                        float _3529 = (0.5 / (((_3518 * ((_3504 * _3519) + _3489)) + 9.9999999392252902907785028219223e-09) + (((_3518 * _3519) + _3489) * _3504))) * _3518;
                        float _4936 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3540 = (((_3490 * 3.1415927410125732421875) * (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0)))) / ((_3512 * _3512) * ((_3455 * 2.1991131305694580078125) + 3.141590118408203125))) * _3444;
                        _3292 = (_3459 * _3407.x) + _3365;
                        _3293 = (_3459 * _3407.y) + _3366;
                        _3294 = (_3459 * _3407.z) + _3367;
                        _3289 = (_3540 * _3424.x) + _3362;
                        _3290 = (_3540 * _3424.y) + _3363;
                        _3291 = (_3540 * _3424.z) + _3364;
                        if (_3369 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3362 = _3289;
                            _3363 = _3290;
                            _3364 = _3291;
                            _3365 = _3292;
                            _3366 = _3293;
                            _3367 = _3294;
                            _3368 = _3369;
                        }
                    }
                    frontier_phi_66_pred = _3289;
                    frontier_phi_66_pred_1 = _3294;
                    frontier_phi_66_pred_2 = _3293;
                    frontier_phi_66_pred_3 = _3292;
                    frontier_phi_66_pred_4 = _3291;
                    frontier_phi_66_pred_5 = _3290;
                }
                _3066 = frontier_phi_66_pred;
                _3076 = frontier_phi_66_pred_1;
                _3074 = frontier_phi_66_pred_2;
                _3072 = frontier_phi_66_pred_3;
                _3070 = frontier_phi_66_pred_4;
                _3068 = frontier_phi_66_pred_5;
                uint _3224 = _3223 + 1u;
                if (_3224 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3217 = _3066;
                    _3218 = _3068;
                    _3219 = _3070;
                    _3220 = _3072;
                    _3221 = _3074;
                    _3222 = _3076;
                    _3223 = _3224;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
        }
        uvec4 _3079 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3080 = _3079.z;
        uint _3082 = (_3080 >> 8u) & 15u;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        if (((4294967295u << _3082) & _2964) == 0u)
        {
            _3185 = _3065;
            _3187 = _3067;
            _3189 = _3069;
            _3191 = _3071;
            _3193 = _3073;
            _3195 = _3075;
        }
        else
        {
            float _3210 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
            float _3211 = _3210 * _2918;
            float _3212 = _3210 * _2919;
            float _3213 = _3210 * _2920;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3082 < ((_3080 >> 12u) & 15u))
            {
                float _3186;
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3345 = _3065;
                float _3346 = _3067;
                float _3347 = _3069;
                float _3348 = _3071;
                float _3349 = _3073;
                float _3350 = _3075;
                uint _3351 = _3082;
                uint _3360;
                bool _3361;
                for (;;)
                {
                    _3360 = texelFetch(g_lightClassification, int((((_2958 << 5u) + (_2944 << 9u)) + (_3351 << 2u)) >> 2u)).x;
                    _3361 = _3360 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3361)
                    {
                        frontier_phi_77_pred = _3350;
                        frontier_phi_77_pred_1 = _3349;
                        frontier_phi_77_pred_2 = _3348;
                        frontier_phi_77_pred_3 = _3347;
                        frontier_phi_77_pred_4 = _3346;
                        frontier_phi_77_pred_5 = _3345;
                    }
                    else
                    {
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3567 = _3345;
                        float _3568 = _3346;
                        float _3569 = _3347;
                        float _3570 = _3348;
                        float _3571 = _3349;
                        float _3572 = _3350;
                        uint _3573 = _3360;
                        uint _3574;
                        vec4 _3599;
                        float _3600;
                        vec4 _3615;
                        vec3 _3627;
                        vec4 _3642;
                        vec4 _3657;
                        float _3703;
                        bool _3704;
                        for (;;)
                        {
                            uint _3584 = ((_3351 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3573));
                            _3574 = (_3573 + 4294967295u) & _3573;
                            uint _3586 = _3584 * 40u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            _3600 = _3599.w;
                            uint _3602 = (_3584 * 40u) + 4u;
                            _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3617 = (_3584 * 40u) + 8u;
                            _3627 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x));
                            uint _3629 = (_3584 * 40u) + 16u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3644 = (_3584 * 40u) + 20u;
                            _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3659 = (_3584 * 40u) + 24u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3678 = (_3584 * 40u) + 28u;
                            vec4 _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            _3703 = fma(_2920, _3691.z, fma(_2919, _3691.y, _3691.x * _2918)) + _3691.w;
                            _3704 = !((fma(_2920, _3672.z, fma(_2919, _3672.y, _3672.x * _2918)) + _3672.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3704)
                            {
                                float _3731 = _3599.x - _2918;
                                float _3732 = _3599.y - _2919;
                                float _3733 = _3599.z - _2920;
                                float _3734 = dot(vec3(_3731, _3732, _3733), vec3(_3731, _3732, _3733));
                                float _3737 = inversesqrt(_3734);
                                float _3738 = _3737 * _3731;
                                float _3739 = _3737 * _3732;
                                float _3740 = _3737 * _3733;
                                float _3744 = 1.0 - (_3734 / (_3600 * _3600));
                                float _4947 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3745 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3749 = sqrt(_3734) * _3615.w;
                                float _3751 = 1.39999997615814208984375 / (_3749 + 1.39999997615814208984375);
                                float _3752 = _3751 * _3751;
                                float _3755 = ((1.0 - _3752) * dot(vec3(_3738, _3739, _3740), vec3(_1156, _1159, _1162))) + _3752;
                                float _3758 = _3749 * _3749;
                                float _3762 = (fma(_2920, _3642.z, fma(_2919, _3642.y, _3642.x * _2918)) + _3642.w) / _3703;
                                float _3763 = (fma(_2920, _3657.z, fma(_2919, _3657.y, _3657.x * _2918)) + _3657.w) / _3703;
                                float _3767 = 1.0 - dot(vec2(_3762, _3763), vec2(_3762, _3763));
                                float _4963 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3769 = _3768 * (((isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0))) * _3745) / ((_3758 * 0.699999988079071044921875) + 1.0));
                                float _3781 = exp2(log2(1.0 / ((_3758 * 3.5) + 5.0)) * 0.25);
                                float _3782 = 1.0 - _1231;
                                float _3789 = sqrt(1.0 - ((1.0 - (_3782 * _3782)) * (1.0 - (_3781 * _3781))));
                                float _3790 = _3789 * _3789;
                                float _3791 = _3790 * _3790;
                                float _3792 = _3738 - _3211;
                                float _3793 = _3739 - _3212;
                                float _3794 = _3740 - _3213;
                                float _3798 = inversesqrt(dot(vec3(_3792, _3793, _3794), vec3(_3792, _3793, _3794)));
                                float _3802 = dot(vec3(_1156, _1159, _1162), vec3((-0.0) - _3211, (-0.0) - _3212, (-0.0) - _3213));
                                float _4974 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3805 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3806 = dot(vec3(_1156, _1159, _1162), vec3(_3798 * _3792, _3798 * _3793, _3798 * _3794));
                                float _4985 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3809 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3813 = ((_3809 * _3809) * (_3791 + (-1.0))) + 1.0;
                                float _3814 = _3751 * _3790;
                                float _3815 = _3814 * _3814;
                                float _3821 = ((1.0 - _3815) * dot(vec3(_1156, _1159, _1162), vec3(_3738, _3739, _3740))) + _3815;
                                float _4996 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3822 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3823 = 1.0 - _3790;
                                float _3833 = (0.5 / (((_3822 * ((_3805 * _3823) + _3790)) + 9.9999999392252902907785028219223e-09) + (((_3822 * _3823) + _3790) * _3805))) * _3822;
                                float _5007 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3843 = (_3768 * _3745) * (((_3791 * 3.1415927410125732421875) * (isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0)))) / ((_3813 * _3813) * ((_3758 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3769 * _3615.y;
                                frontier_phi_83_pred_1 = _3769 * _3615.x;
                                frontier_phi_83_pred_2 = _3843 * _3627.z;
                                frontier_phi_83_pred_3 = _3843 * _3627.y;
                                frontier_phi_83_pred_4 = _3843 * _3627.x;
                                frontier_phi_83_pred_5 = _3769 * _3615.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3851 = frontier_phi_83_pred;
                            _3850 = frontier_phi_83_pred_1;
                            _3849 = frontier_phi_83_pred_2;
                            _3848 = frontier_phi_83_pred_3;
                            _3847 = frontier_phi_83_pred_4;
                            _3852 = frontier_phi_83_pred_5;
                            _3557 = _3850 + _3570;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            _3554 = _3847 + _3567;
                            _3555 = _3848 + _3568;
                            _3556 = _3849 + _3569;
                            if (_3574 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3574;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3559;
                        frontier_phi_77_pred_1 = _3558;
                        frontier_phi_77_pred_2 = _3557;
                        frontier_phi_77_pred_3 = _3556;
                        frontier_phi_77_pred_4 = _3555;
                        frontier_phi_77_pred_5 = _3554;
                    }
                    _3196 = frontier_phi_77_pred;
                    _3194 = frontier_phi_77_pred_1;
                    _3192 = frontier_phi_77_pred_2;
                    _3190 = frontier_phi_77_pred_3;
                    _3188 = frontier_phi_77_pred_4;
                    _3186 = frontier_phi_77_pred_5;
                    uint _3352 = _3351 + 1u;
                    if (_3352 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3345 = _3186;
                        _3346 = _3188;
                        _3347 = _3190;
                        _3348 = _3192;
                        _3349 = _3194;
                        _3350 = _3196;
                        _3351 = _3352;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3190;
                frontier_phi_58_59_ladder_1 = _3196;
                frontier_phi_58_59_ladder_2 = _3194;
                frontier_phi_58_59_ladder_3 = _3192;
                frontier_phi_58_59_ladder_4 = _3188;
                frontier_phi_58_59_ladder_5 = _3186;
            }
            else
            {
                frontier_phi_58_59_ladder = _3069;
                frontier_phi_58_59_ladder_1 = _3075;
                frontier_phi_58_59_ladder_2 = _3073;
                frontier_phi_58_59_ladder_3 = _3071;
                frontier_phi_58_59_ladder_4 = _3067;
                frontier_phi_58_59_ladder_5 = _3065;
            }
            _3185 = frontier_phi_58_59_ladder_5;
            _3187 = frontier_phi_58_59_ladder_4;
            _3189 = frontier_phi_58_59_ladder;
            _3191 = frontier_phi_58_59_ladder_3;
            _3193 = frontier_phi_58_59_ladder_2;
            _3195 = frontier_phi_58_59_ladder_1;
        }
        float _3200 = isnan(1.0) ? _1215 : (isnan(_1215) ? 1.0 : min(_1215, 1.0));
        _2977 = (_3200 * _3191) + _2413;
        _2979 = (_3200 * _3193) + _2415;
        _2981 = (_3200 * _3195) + _2417;
        _2983 = ((_3185 * _1199) * _3200) + _2758;
        _2985 = ((_3187 * _1201) * _3200) + _2760;
        _2987 = ((_3189 * _1202) * _3200) + _2762;
    }
    else
    {
        _2977 = _2413;
        _2979 = _2415;
        _2981 = _2417;
        _2983 = _2758;
        _2985 = _2760;
        _2987 = _2762;
    }
    float _5023 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _5034 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _5045 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _3004 = ((isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0))) * (_2977 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1215))) + ((_2983 + ((isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0))) * _2053)) * cbPerFrame._m0[3u].x);
    float _3005 = ((isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0))) * (_2979 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1215))) + ((_2985 + ((isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0))) * _2053)) * cbPerFrame._m0[3u].x);
    float _3006 = ((isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_2981 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1215))) + ((_2987 + ((isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0))) * _2053)) * cbPerFrame._m0[3u].x);
    uint _3007 = _293 + 6u;
    float _3015 = _1137 / cbSceneParam._m0[86u].x;
    float _3016 = _1138 / cbSceneParam._m0[86u].y;
    vec4 _3030 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3015, _3016, (log2((isnan(cbSceneParam._m0[77u].w) ? _1060 : (isnan(_1060) ? cbSceneParam._m0[77u].w : min(_1060, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3032 = _3030.x;
    float _3033 = _3030.y;
    float _3034 = _3030.z;
    float _3035 = _3030.w;
    float _3127;
    float _3129;
    float _3131;
    float _3133;
    if (_1060 > cbSceneParam._m0[78u].w)
    {
        float _3090 = isnan(_1060) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1060 : min(cbSceneParam._m0[80u].w, _1060));
        float _3091 = _3090 / _1060;
        float _3102 = _3091 * _1110;
        float _3103 = _1111 * _3091;
        float _3104 = (-0.0) - _3103;
        float _3105 = _3091 * _1112;
        float _3107 = (cbSceneParam._m0[77u].w * _3104) / _3090;
        float _3108 = _3107 + cbSceneParam._m0[79u].w;
        float _3109 = cbSceneParam._m0[79u].w - _3103;
        float _3115 = sqrt(((_3102 * _3102) + (_3103 * _3103)) + (_3105 * _3105));
        float _3118 = (1.0 - (cbSceneParam._m0[77u].w / _3090)) * _3115;
        float _3123 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3125 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3302;
        if (abs((_3104 - _3107) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3302 = ((((_3108 > 0.0) ? exp2(_3123 * _3108) : (2.0 - exp2(_3125 * _3108))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3118;
        }
        else
        {
            float _3246 = 1.0 / cbSceneParam._m0[80u].x;
            float _3247 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : max(_3108, _3109));
            float _3248 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : min(_3108, _3109));
            float _3257 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : min(_3247, 0.0));
            float _3258 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : min(_3248, 0.0));
            _3302 = ((abs(_3115 / _3104) * cbSceneParam._m0[80u].y) * ((((_3257 - _3258) * 2.0) - ((exp2(_3123 * (isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0)))) - exp2(_3123 * (isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))))) * _3246)) - ((exp2(_3125 * _3257) - exp2(_3125 * _3258)) * _3246))) + (_3118 * cbSceneParam._m0[80u].z);
        }
        vec4 _3304 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3015, _3016, 1.0), 0.0);
        float _3313 = exp2((_3302 * (-1.44269502162933349609375)) * (1.0 - _3304.w));
        float _3314 = log2(_3313);
        float _3330 = log2(_3035);
        _3127 = (exp2(_3330 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].x)) * _3304.x) / cbSceneParam._m0[78u].x)) + _3032;
        _3129 = (exp2(_3330 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].y)) * _3304.y) / cbSceneParam._m0[78u].y)) + _3033;
        _3131 = (exp2(_3330 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].z)) * _3304.z) / cbSceneParam._m0[78u].z)) + _3034;
        _3133 = _3313 * _3035;
    }
    else
    {
        _3127 = _3032;
        _3129 = _3033;
        _3131 = _3034;
        _3133 = _3035;
    }
    bool _3340;
    vec4 _3143;
    vec4 _3165;
    float _3167;
    float _3171;
    float _3172;
    float _3173;
    float _3174;
    bool _3184;
    for (;;)
    {
        _3143 = cbMatDynParam._m0[0u];
        float _3145 = roundEven(_3143.y);
        bool _3146 = _3145 == 3.0;
        float _3147 = log2(_3133);
        float _3154 = exp2(_3147 * cbSceneParam._m0[78u].x) * _3004;
        float _3155 = exp2(_3147 * cbSceneParam._m0[78u].y) * _3005;
        float _3156 = exp2(_3147 * cbSceneParam._m0[78u].z) * _3006;
        float _3163 = _1126 + (-0.5);
        _3165 = cbMtdParam._m0[1u];
        _3167 = _3165.y * _3163;
        float _3170 = (_3145 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3171 = _3170 * (_3146 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3127)));
        _3172 = _3170 * (_3146 ? _3155 : (_3155 + (cbSceneParam._m0[72u].w * _3129)));
        _3173 = _3170 * (_3146 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3131)));
        _3174 = _3163 * 0.999000012874603271484375;
        _3184 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3184)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3174) < 0.5)
            {
                _3340 = true;
                break;
            }
        }
        uint _3281 = _1175 + uint(_3143.w);
        if ((cbInstanceData._m0[_3281].w < 1.0) && ((cbInstanceData._m0[_3281].w + _3174) < 0.5))
        {
            _3340 = true;
            break;
        }
        if ((_3167 + 1.0) < _3165.x)
        {
            _3340 = true;
            break;
        }
        _3340 = false;
        break;
    }
    float _3545;
    if (_3340)
    {
        discard_state = true;
        _3545 = 0.0;
    }
    else
    {
        _3545 = cbInstanceData._m0[_3007].w;
    }
    SV_Target.x = _3171;
    SV_Target.y = _3172;
    SV_Target.z = _3173;
    SV_Target.w = _3545;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3007].w;
    discard_exit();
}


