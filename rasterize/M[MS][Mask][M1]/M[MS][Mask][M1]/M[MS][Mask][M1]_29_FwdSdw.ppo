#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1465;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4074 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4085 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4096 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _372 = _367.x * cbMtdParam._m0[11u].x;
    float _373 = _367.y * cbMtdParam._m0[11u].y;
    float _374 = _367.z * cbMtdParam._m0[11u].z;
    vec4 _393 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _455 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _472 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_443 - _455) * cbMtdParam._m0[23u].w) + _455) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4107 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _483 = (_341.x * cbMtdParam._m0[9u].x) * ((_473 * ((_393.x * cbMtdParam._m0[12u].x) - _372)) + _372);
    float _484 = (_341.y * cbMtdParam._m0[9u].y) * ((_473 * ((_393.y * cbMtdParam._m0[12u].y) - _373)) + _373);
    float _485 = (_341.z * cbMtdParam._m0[9u].z) * ((_473 * ((_393.z * cbMtdParam._m0[12u].z) - _374)) + _374);
    float _489 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _483;
    float _492 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _484;
    float _495 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _485;
    float _503 = (((_483 - _489) * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) + _489) * 4.55000019073486328125;
    float _505 = (((_484 - _492) * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) + _492) * 4.55000019073486328125;
    float _507 = (((_485 - _495) * (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) + _495) * 4.55000019073486328125;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _552 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _573 = _569.z;
    float _582 = ((_552.z - _573) * _473) + _573;
    float _585 = ((((_552.x - _571) * _473) + _571) * 2.0) + (-1.0);
    float _586 = ((((_552.y - _572) * _473) + _572) * 2.0) + (-1.0);
    float _587 = dot(vec2(_585, _586), vec2(_585, _586));
    float _4118 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _592 = sqrt(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _624 = (_585 + ((((_525.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_612.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _625 = (_586 + ((((_525.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_612.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _628 = fma(_592, _254, fma(_625, _261, _624 * _247));
    float _631 = fma(_592, _255, fma(_625, _262, _624 * _248));
    float _634 = fma(_592, _256, fma(_625, _263, _624 * _249));
    float _638 = inversesqrt(dot(vec3(_628, _631, _634), vec3(_628, _631, _634)));
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _667 = _665.x;
    float _668 = 1.0 - _667;
    float _677 = (cbMtdParam._m0[19u].x + dot(vec4(_638 * _628, _638 * _631, _638 * _634, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_667 - _668) * cbMtdParam._m0[24u].z) + _668) * cbMtdParam._m0[21u].z);
    float _4129 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _678 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _680 = (-0.0) - cbMtdParam._m0[24u].x;
    float _682 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _682 : (isnan(_682) ? 1.0 : min(_682, 1.0));
    float _690 = _678 - ((_678 * TEXCOORD_8.x) * _683);
    float _691 = _678 - ((_678 * TEXCOORD_8.y) * _683);
    float _692 = _678 - ((_678 * TEXCOORD_8.z) * _683);
    float _699 = (_690 * (cbMtdParam._m0[17u].x - _503)) + _503;
    float _700 = (_691 * (cbMtdParam._m0[17u].y - _505)) + _505;
    float _701 = (_692 * (cbMtdParam._m0[17u].z - _507)) + _507;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _715 = _713.x;
    float _716 = 1.0 - _715;
    float _742 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_715 - _716) * cbMtdParam._m0[24u].w) + _716) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4150 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _743 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _751 = ((((cbMtdParam._m0[10u].x - _699) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _743) + _699;
    float _752 = ((((cbMtdParam._m0[10u].y - _700) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _743) + _700;
    float _753 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _701)) * _743) + _701;
    vec4 _765 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _779 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _781 = _779.x;
    float _798 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _781) * _473) + _781;
    float _802 = ((_765.x - _798) * cbMtdParam._m0[19u].z) + _798;
    float _804 = _802 - (_802 * _690);
    float _806 = _804 - (_804 * _743);
    float _811 = (((_525.z - _582) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _582;
    float _815 = ((_612.z - _811) * cbMtdParam._m0[19u].w) + _811;
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _836 = (_829.x * 2.0) + (-1.0);
    float _837 = (_829.y * 2.0) + (-1.0);
    float _838 = dot(vec2(_836, _837), vec2(_836, _837));
    float _4161 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _846 = ((_829.z - _815) * _690) + _815;
    float _849 = ((cbMtdParam._m0[23u].x - _846) * _743) + _846;
    vec4 _870 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _876 = (_870.x * 2.0) + (-1.0);
    float _877 = (_870.y * 2.0) + (-1.0);
    float _878 = dot(vec2(_876, _877), vec2(_876, _877));
    float _4172 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _893 = ((sqrt(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) - _592) * _692) + _592;
    float _896 = (((_836 - _624) * _690) + _624) + (cbMtdParam._m0[21u].x * _624);
    float _897 = (((_837 - _625) * _691) + _625) + (cbMtdParam._m0[21u].x * _625);
    float _908 = (((_876 - _896) + (_896 * cbMtdParam._m0[22u].z)) * _743) + _896;
    float _909 = (((_877 - _897) + (_897 * cbMtdParam._m0[22u].z)) * _743) + _897;
    float _910 = (_743 * (sqrt(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) - _893)) + _893;
    float _912 = cbMtdParam._m0[22u].x + _612.w;
    float _915 = fma(_910, _254, fma(_909, _261, _908 * _247));
    float _918 = fma(_910, _255, fma(_909, _262, _908 * _248));
    float _921 = fma(_910, _256, fma(_909, _263, _908 * _249));
    float _925 = inversesqrt(dot(vec3(_915, _918, _921), vec3(_915, _918, _921)));
    float _926 = _925 * _915;
    float _927 = _925 * _918;
    float _928 = _925 * _921;
    float _4183 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _929 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4205 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4216 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4227 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4238 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _934 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _948 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _998 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _988);
    float _999 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _988);
    float _1000 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _988);
    float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
    float _1005 = _998 * _1004;
    float _1006 = _999 * _1004;
    float _1007 = _1000 * _1004;
    float _1013 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1014 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1032 = fma(_928, cbSceneParam._m0[5u].z, fma(_927, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _926));
    float _1035 = fma(_928, cbSceneParam._m0[6u].z, fma(_927, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _926));
    float _1038 = fma(_928, cbSceneParam._m0[7u].z, fma(_927, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _926));
    uint _1052 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1058 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * cbInstanceData._m0[_1052].x;
    float _1059 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * cbInstanceData._m0[_1052].y;
    float _1060 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * cbInstanceData._m0[_1052].z;
    float _4249 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _4271 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1063 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _1064 = 1.0 - _934;
    float _1065 = _1061 * _1064;
    float _1066 = _1062 * _1064;
    float _1067 = _1063 * _1064;
    float _1072 = (_1061 + (-0.039999999105930328369140625)) * _934;
    float _1073 = (_1062 + (-0.039999999105930328369140625)) * _934;
    float _1074 = (_1063 + (-0.039999999105930328369140625)) * _934;
    float _1075 = _1072 + 0.039999999105930328369140625;
    float _1077 = _1073 + 0.039999999105930328369140625;
    float _1078 = _1074 + 0.039999999105930328369140625;
    vec4 _1087 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1013, cbSceneParam._m0[86u].y * _1014));
    float _1091 = ((isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * TEXCOORD_5.w) * _1087.x;
    float _1092 = dot(vec3(_926, _927, _928), vec3(_1005, _1006, _1007));
    float _1095 = _1092 * 2.0;
    float _1099 = (_1095 * _926) - _1005;
    float _1100 = (_1095 * _927) - _1006;
    float _1101 = (_1095 * _928) - _1007;
    float _1105 = abs(dot(vec3(_1005, _1006, _1007), vec3(_926, _927, _928)));
    float _4282 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1107 = sqrt(_929);
    float _1120 = exp2((_1107 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1107 * 3.0));
    float _1126 = (1.0 - _1120) * ((_1107 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1127 = _1120 * _1107;
    float _1155 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1159 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1464;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1189 = fma(_1163, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1155));
        float _1193 = fma(_1163, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1155));
        float _1197 = fma(_1163, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1155));
        float _1222 = _1155 + _926;
        float _1223 = _1159 + _927;
        float _1224 = _1163 + _928;
        float _1234 = fma(_1224, cbModelParam._m0[26u].z, fma(_1223, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1222)) - _1189;
        float _1235 = fma(_1224, cbModelParam._m0[27u].z, fma(_1223, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1222)) - _1193;
        float _1236 = fma(_1224, cbModelParam._m0[28u].z, fma(_1223, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1222)) - _1197;
        float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
        float _1253 = ((_1240 * _1234) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1189 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1240 * _1235) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1193 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1240 * _1236) / cbModelParam._m0[34u].z) + ((((((_1197 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        float _1292 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1258.x + (-0.5));
        float _1294 = _1292 * (_1258.y + (-0.5));
        float _1295 = _1292 * (_1258.z + (-0.5));
        float _1302 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1265.x + (-0.5));
        float _1304 = _1302 * (_1265.y + (-0.5));
        float _1305 = _1302 * (_1265.z + (-0.5));
        float _1312 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1272.x + (-0.5));
        float _1314 = _1312 * (_1272.y + (-0.5));
        float _1315 = _1312 * (_1272.z + (-0.5));
        float _1322 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1279.x + (-0.5));
        float _1324 = _1322 * (_1279.y + (-0.5));
        float _1325 = _1322 * (_1279.z + (-0.5));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = _1293 * 0.5;
        float _1330 = _1303 * 0.5;
        float _1331 = _1313 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1346 = (dot(vec3(_926, _927, _928), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1356 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4330 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1358 + 1.0))) + _1363) * _1326;
        float _1373 = _1294 * 0.5;
        float _1374 = _1304 * 0.5;
        float _1375 = _1314 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_926, _927, _928), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4363 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1400 + 1.0))) + _1405) * _1327;
        float _1415 = _1295 * 0.5;
        float _1416 = _1305 * 0.5;
        float _1417 = _1315 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_926, _927, _928), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4396 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1442 + 1.0))) + _1447) * _1328;
        _1464 = _1295;
        _1466 = _1294;
        _1467 = _1293;
        _1468 = _1305;
        _1469 = _1304;
        _1470 = _1303;
        _1471 = _1315;
        _1472 = _1314;
        _1473 = _1313;
        _1474 = _1328;
        _1475 = _1327;
        _1476 = _1326;
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1478 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1479 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
    }
    else
    {
        _1464 = _1465;
        _1466 = _1465;
        _1467 = _1465;
        _1468 = _1465;
        _1469 = _1465;
        _1470 = _1465;
        _1471 = _1465;
        _1472 = _1465;
        _1473 = _1465;
        _1474 = _1465;
        _1475 = _1465;
        _1476 = _1465;
        _1477 = 0.0;
        _1478 = 0.0;
        _1479 = 0.0;
    }
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1504 = fma(_1163, cbModelParam._m0[30u].z, fma(_1159, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1155));
        float _1508 = fma(_1163, cbModelParam._m0[31u].z, fma(_1159, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1155));
        float _1512 = fma(_1163, cbModelParam._m0[32u].z, fma(_1159, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1155));
        float _1535 = _1155 + _926;
        float _1536 = _1159 + _927;
        float _1537 = _1163 + _928;
        float _1547 = fma(_1537, cbModelParam._m0[30u].z, fma(_1536, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1535)) - _1504;
        float _1548 = fma(_1537, cbModelParam._m0[31u].z, fma(_1536, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1535)) - _1508;
        float _1549 = fma(_1537, cbModelParam._m0[32u].z, fma(_1536, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1535)) - _1512;
        float _1553 = inversesqrt(dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549)));
        float _1566 = ((_1553 * _1547) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1504 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1567 = ((_1553 * _1548) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1508 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1568 = ((_1553 * _1549) / cbModelParam._m0[35u].z) + ((((((_1512 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1566, _1567, _1568), 0.0);
        float _1603 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1570.x + (-0.5));
        float _1605 = _1603 * (_1570.y + (-0.5));
        float _1606 = _1603 * (_1570.z + (-0.5));
        float _1613 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1577.x + (-0.5));
        float _1615 = _1613 * (_1577.y + (-0.5));
        float _1616 = _1613 * (_1577.z + (-0.5));
        float _1623 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1584.x + (-0.5));
        float _1625 = _1623 * (_1584.y + (-0.5));
        float _1626 = _1623 * (_1584.z + (-0.5));
        float _1633 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1591.x + (-0.5));
        float _1635 = _1633 * (_1591.y + (-0.5));
        float _1636 = _1633 * (_1591.z + (-0.5));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1640 = _1604 * 0.5;
        float _1641 = _1614 * 0.5;
        float _1642 = _1624 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_926, _927, _928), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4459 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1667 + 1.0))) + _1672) * _1637;
        float _1682 = _1605 * 0.5;
        float _1683 = _1615 * 0.5;
        float _1684 = _1625 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_926, _927, _928), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4470 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4481 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4492 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_1709 + 1.0))) + _1714) * _1638;
        float _1724 = _1606 * 0.5;
        float _1725 = _1616 * 0.5;
        float _1726 = _1626 * 0.5;
        float _1727 = dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726));
        float _1732 = (_1727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1727);
        float _1740 = (dot(vec3(_926, _927, _928), vec3(_1732 * _1724, _1732 * _1725, _1732 * _1726)) + 1.0) * 0.5;
        float _4503 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1749 = sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726)) / (_1639 + 9.9999997473787516355514526367188e-06);
        float _4514 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1751 = _1750 * 2.0;
        float _1755 = (1.0 - _1750) / (_1750 + 1.0);
        float _4525 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1765 = ((((1.0 - _1756) * (_1751 + 2.0)) * exp2(log2(isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_1751 + 1.0))) + _1756) * _1639;
        _1773 = _1606;
        _1774 = _1605;
        _1775 = _1604;
        _1776 = _1616;
        _1777 = _1615;
        _1778 = _1614;
        _1779 = _1626;
        _1780 = _1625;
        _1781 = _1624;
        _1782 = _1639;
        _1783 = _1638;
        _1784 = _1637;
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
        _1787 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)));
    }
    else
    {
        _1773 = _1465;
        _1774 = _1465;
        _1775 = _1465;
        _1776 = _1465;
        _1777 = _1465;
        _1778 = _1465;
        _1779 = _1465;
        _1780 = _1465;
        _1781 = _1465;
        _1782 = _1465;
        _1783 = _1465;
        _1784 = _1465;
        _1785 = 0.0;
        _1786 = 0.0;
        _1787 = 0.0;
    }
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1477)) + _1477;
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1478)) + _1478;
    float _1799 = (cbModelParam._m0[1u].x * (_1787 - _1479)) + _1479;
    float _1820 = fma(_1799, cbSceneParam._m0[89u].z, fma(_1798, cbSceneParam._m0[89u].y, _1797 * cbSceneParam._m0[89u].x));
    float _1823 = fma(_1799, cbSceneParam._m0[90u].z, fma(_1798, cbSceneParam._m0[90u].y, _1797 * cbSceneParam._m0[90u].x));
    float _1826 = fma(_1799, cbSceneParam._m0[91u].z, fma(_1798, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1797));
    float _1841 = _1099 * 0.5;
    float _1842 = _1100 * 0.5;
    float _1843 = _1101 * 0.5;
    float _1844 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1775, _1778, _1781, _1784));
    float _1847 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1850 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1884;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1857 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1464, _1468, _1471, _1474));
        float _1861 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1466, _1469, _1472, _1475));
        float _1865 = dot(vec4(_1841, _1842, _1843, 1.0), vec4(_1467, _1470, _1473, _1476));
        float _1872 = dot(vec4(cbModelParam._m0[39u]), vec4(_1841, _1842, _1843, 1.0));
        _1884 = dot(vec3(isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1872) ? 0.0 : (isnan(0.0) ? _1872 : max(0.0, _1872))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1884 = 1.0;
    }
    float _1895;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1886 = dot(vec4(cbModelParam._m0[40u]), vec4(_1841, _1842, _1843, 1.0));
        _1895 = dot(vec3(isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1886) ? 0.0 : (isnan(0.0) ? _1886 : max(0.0, _1886))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1895 = 1.0;
    }
    float _1899 = (_1895 * cbModelParam._m0[1u].x) + (_1884 * (1.0 - cbModelParam._m0[1u].x));
    float _1909 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _929);
    float _1910 = isnan(_1909) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1909 : min(cbModelParam._m0[25u].z, _1909));
    float _1991;
    float _1993;
    float _1995;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1958 = fma(_1163, cbModelParam._m0[13u].z, fma(_1159, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1155)) + cbModelParam._m0[13u].w;
        float _1962 = fma(_1163, cbModelParam._m0[14u].z, fma(_1159, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1155)) + cbModelParam._m0[14u].w;
        float _1966 = fma(_1163, cbModelParam._m0[15u].z, fma(_1159, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1155)) + cbModelParam._m0[15u].w;
        float _1969 = fma(_1101, cbModelParam._m0[13u].z, fma(_1100, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1099));
        float _1972 = fma(_1101, cbModelParam._m0[14u].z, fma(_1100, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1099));
        float _1975 = fma(_1101, cbModelParam._m0[15u].z, fma(_1100, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1099));
        float _2003;
        if (_1969 > 0.0)
        {
            _2003 = abs((1.0 - _1958) / _1969);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1958 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2003 = frontier_phi_14_12_ladder;
        }
        float _2175;
        if (_1972 > 0.0)
        {
            _2175 = abs((1.0 - _1962) / _1972);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1962 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2175 = frontier_phi_23_19_ladder;
        }
        float _2470;
        if (_1975 > 0.0)
        {
            _2470 = abs((1.0 - _1966) / _1975);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1966 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2470 = frontier_phi_35_30_ladder;
        }
        float _2472 = isnan(_2175) ? _2003 : (isnan(_2003) ? _2175 : min(_2003, _2175));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1969) + _1958;
        float _2478 = (_2473 * _1972) + _1962;
        float _2479 = (_2473 * _1975) + _1966;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2482 = (-1.0) - _2480;
        float _2484 = _2480 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2479 > _2484) || ((_2479 < _2482) || ((_2478 > _2484) || ((_2478 < _2482) || ((_2477 < _2482) || (_2477 > _2484))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2624 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2479, cbModelParam._m0[9u].z, fma(_2478, cbModelParam._m0[9u].y, _2477 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2479, cbModelParam._m0[10u].z, fma(_2478, cbModelParam._m0[10u].y, _2477 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2479, cbModelParam._m0[11u].z, fma(_2478, cbModelParam._m0[11u].y, _2477 * cbModelParam._m0[11u].x))), _1910);
            frontier_phi_13_35_ladder = _2624.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2624.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2624.x * cbModelParam._m0[1u].y;
        }
        _1991 = frontier_phi_13_35_ladder_2;
        _1993 = frontier_phi_13_35_ladder_1;
        _1995 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1979 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1099, _1100, _1101), _1910);
        _1991 = _1979.x * cbModelParam._m0[1u].y;
        _1993 = _1979.y * cbModelParam._m0[1u].y;
        _1995 = _1979.z * cbModelParam._m0[1u].y;
    }
    float _1999 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _929);
    float _2000 = isnan(_1999) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1999 : min(cbModelParam._m0[25u].w, _1999));
    float _2090;
    float _2092;
    float _2094;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2054 = fma(_1163, cbModelParam._m0[21u].z, fma(_1159, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1155)) + cbModelParam._m0[21u].w;
        float _2058 = fma(_1163, cbModelParam._m0[22u].z, fma(_1159, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1155)) + cbModelParam._m0[22u].w;
        float _2062 = fma(_1163, cbModelParam._m0[23u].z, fma(_1159, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1155)) + cbModelParam._m0[23u].w;
        float _2065 = fma(_1101, cbModelParam._m0[21u].z, fma(_1100, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1099));
        float _2068 = fma(_1101, cbModelParam._m0[22u].z, fma(_1100, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1099));
        float _2071 = fma(_1101, cbModelParam._m0[23u].z, fma(_1100, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1099));
        float _2180;
        if (_2065 > 0.0)
        {
            _2180 = abs((1.0 - _2054) / _2065);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2054 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2180 = frontier_phi_25_21_ladder;
        }
        float _2497;
        if (_2068 > 0.0)
        {
            _2497 = abs((1.0 - _2058) / _2068);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2058 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2497 = frontier_phi_37_32_ladder;
        }
        float _2835;
        if (_2071 > 0.0)
        {
            _2835 = abs((1.0 - _2062) / _2071);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2062 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2835 = frontier_phi_47_44_ladder;
        }
        float _2837 = isnan(_2497) ? _2180 : (isnan(_2180) ? _2497 : min(_2180, _2497));
        float _2838 = isnan(_2835) ? _2837 : (isnan(_2837) ? _2835 : min(_2837, _2835));
        float _2842 = (_2838 * _2065) + _2054;
        float _2843 = (_2838 * _2068) + _2058;
        float _2844 = (_2838 * _2071) + _2062;
        float _2845 = _2838 * 9.9999997473787516355514526367188e-05;
        float _2846 = (-1.0) - _2845;
        float _2848 = _2845 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2844 > _2848) || ((_2844 < _2846) || ((_2843 > _2848) || ((_2843 < _2846) || ((_2842 < _2846) || (_2842 > _2848))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2966 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2844, cbModelParam._m0[17u].z, fma(_2843, cbModelParam._m0[17u].y, _2842 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2844, cbModelParam._m0[18u].z, fma(_2843, cbModelParam._m0[18u].y, _2842 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2844, cbModelParam._m0[19u].z, fma(_2843, cbModelParam._m0[19u].y, _2842 * cbModelParam._m0[19u].x))), _2000);
            frontier_phi_22_47_ladder = _2966.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2966.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2966.x * cbModelParam._m0[1u].z;
        }
        _2090 = frontier_phi_22_47_ladder_2;
        _2092 = frontier_phi_22_47_ladder_1;
        _2094 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2074 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1099, _1100, _1101), _2000);
        _2090 = _2074.x * cbModelParam._m0[1u].z;
        _2092 = _2074.y * cbModelParam._m0[1u].z;
        _2094 = _2074.z * cbModelParam._m0[1u].z;
    }
    float _2107 = (((_1126 * _1075) + _1127) * _1091) * ((cbModelParam._m0[1u].w * (_2090 - _1991)) + _1991);
    float _2109 = (((_1126 * _1077) + _1127) * _1091) * ((cbModelParam._m0[1u].w * (_2092 - _1993)) + _1993);
    float _2111 = (((_1126 * _1078) + _1127) * _1091) * ((cbModelParam._m0[1u].w * (_2094 - _1995)) + _1995);
    float _2114 = fma(_2111, cbSceneParam._m0[89u].z, fma(_2109, cbSceneParam._m0[89u].y, _2107 * cbSceneParam._m0[89u].x));
    float _2117 = fma(_2111, cbSceneParam._m0[90u].z, fma(_2109, cbSceneParam._m0[90u].y, _2107 * cbSceneParam._m0[90u].x));
    float _2120 = fma(_2111, cbSceneParam._m0[91u].z, fma(_2109, cbSceneParam._m0[91u].y, _2107 * cbSceneParam._m0[91u].x));
    float _2154 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2158 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2162 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2166 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2167 = _2154 / _2166;
    float _2168 = _2158 / _2166;
    float _2169 = _2162 / _2166;
    float _2316;
    float _2317;
    float _2318;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2196 = ((uint(_2169 > cbSceneParam._m0[59u].y) + uint(_2169 > cbSceneParam._m0[59u].x)) + uint(_2169 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2197 = _2196 + 43u;
        uint _2205 = _2196 + 44u;
        uint _2213 = _2196 + 45u;
        uint _2221 = _2196 + 46u;
        float _2232 = fma(_2166, cbSceneParam._m0[_2197].w, fma(_2162, cbSceneParam._m0[_2197].z, fma(_2158, cbSceneParam._m0[_2197].y, _2154 * cbSceneParam._m0[_2197].x)));
        float _2236 = fma(_2166, cbSceneParam._m0[_2205].w, fma(_2162, cbSceneParam._m0[_2205].z, fma(_2158, cbSceneParam._m0[_2205].y, _2154 * cbSceneParam._m0[_2205].x)));
        float _2244 = fma(_2166, cbSceneParam._m0[_2221].w, fma(_2162, cbSceneParam._m0[_2221].z, fma(_2158, cbSceneParam._m0[_2221].y, _2154 * cbSceneParam._m0[_2221].x)));
        float _2249 = cbSceneParam._m0[33u].z * _2244;
        float _2251 = cbSceneParam._m0[33u].w * _2244;
        float _2254 = fma(_2166, cbSceneParam._m0[_2213].w, fma(_2162, cbSceneParam._m0[_2213].z, fma(_2158, cbSceneParam._m0[_2213].y, _2154 * cbSceneParam._m0[_2213].x))) / _2244;
        float _2302 = (cbSceneParam._m0[33u].x - sqrt(((_2168 * _2168) + (_2167 * _2167)) + (_2169 * _2169))) * cbSceneParam._m0[33u].y;
        float _4651 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2309 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2249 + _2232) / _2244, (_2251 + _2236) / _2244), _2254), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2251 + _2232) / _2244, (_2236 - _2249) / _2244), _2254), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2232 - _2249) / _2244, (_2236 - _2251) / _2244), _2254), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2232 - _2251) / _2244, (_2249 + _2236) / _2244), _2254), 0.0)).x), vec4(0.25)));
        _2316 = 1.0 - (_2309 * cbSceneParam._m0[34u].x);
        _2317 = 1.0 - (_2309 * cbSceneParam._m0[34u].y);
        _2318 = 1.0 - (_2309 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2316 = 1.0;
        _2317 = 1.0;
        _2318 = 1.0;
    }
    float _2382;
    float _2384;
    float _2386;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2370 = fma(_2166, cbSceneParam._m0[63u].w, fma(_2162, cbSceneParam._m0[63u].z, fma(_2158, cbSceneParam._m0[63u].y, _2154 * cbSceneParam._m0[63u].x)));
        float _2371 = fma(_2166, cbSceneParam._m0[60u].w, fma(_2162, cbSceneParam._m0[60u].z, fma(_2158, cbSceneParam._m0[60u].y, _2154 * cbSceneParam._m0[60u].x))) / _2370;
        float _2372 = fma(_2166, cbSceneParam._m0[61u].w, fma(_2162, cbSceneParam._m0[61u].z, fma(_2158, cbSceneParam._m0[61u].y, _2154 * cbSceneParam._m0[61u].x))) / _2370;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2371 >= cbSceneParam._m0[64u].x) && (_2372 >= cbSceneParam._m0[64u].y)) && (_2371 <= cbSceneParam._m0[64u].z)) && (_2372 <= cbSceneParam._m0[64u].w))
        {
            float _2510 = fma(_2166, cbSceneParam._m0[62u].w, fma(_2162, cbSceneParam._m0[62u].z, fma(_2158, cbSceneParam._m0[62u].y, _2154 * cbSceneParam._m0[62u].x))) / _2370;
            float _2514 = isnan(cbSceneParam._m0[41u].w) ? _2510 : (isnan(_2510) ? cbSceneParam._m0[41u].w : max(_2510, cbSceneParam._m0[41u].w));
            float _2557 = (cbSceneParam._m0[33u].x - sqrt(((_2168 * _2168) + (_2167 * _2167)) + (_2169 * _2169))) * cbSceneParam._m0[33u].y;
            float _4667 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
            float _2564 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2371, cbSceneParam._m0[33u].w + _2372), _2514), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2371, _2372 - cbSceneParam._m0[33u].z), _2514), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2371 - cbSceneParam._m0[33u].z, _2372 - cbSceneParam._m0[33u].w), _2514), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2371 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2372), _2514), 0.0)).x), vec4(0.25)));
            float _2568 = 1.0 - (_2564 * cbSceneParam._m0[34u].x);
            float _2569 = 1.0 - (_2564 * cbSceneParam._m0[34u].y);
            float _2570 = 1.0 - (_2564 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2570) ? _2318 : (isnan(_2318) ? _2570 : min(_2318, _2570));
            frontier_phi_34_33_ladder_1 = isnan(_2569) ? _2317 : (isnan(_2317) ? _2569 : min(_2317, _2569));
            frontier_phi_34_33_ladder_2 = isnan(_2568) ? _2316 : (isnan(_2316) ? _2568 : min(_2316, _2568));
        }
        else
        {
            frontier_phi_34_33_ladder = _2318;
            frontier_phi_34_33_ladder_1 = _2317;
            frontier_phi_34_33_ladder_2 = _2316;
        }
        _2382 = frontier_phi_34_33_ladder_2;
        _2384 = frontier_phi_34_33_ladder_1;
        _2386 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2382 = _2316;
        _2384 = _2317;
        _2386 = _2318;
    }
    uvec4 _2391 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2393 = _2391.x * 14u;
    uint _2394 = _2393 + 13u;
    float _2401 = _1091 + (-1.0);
    float _2406 = (cbLight._m0[_2394].x * _2401) + 1.0;
    float _2407 = (cbLight._m0[_2394].y * _2401) + 1.0;
    float _2408 = (cbLight._m0[_2394].z * _2401) + 1.0;
    float _2409 = (cbLight._m0[_2394].w * _2401) + 1.0;
    uint _2410 = _2393 + 5u;
    float _2416 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
    uint _2420 = _2393 + 4u;
    float _2429 = isnan(1.0) ? _2406 : (isnan(_2406) ? 1.0 : min(_2406, 1.0));
    uint _2433 = _2393 | 1u;
    float _2444 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_926, _927, _928));
    float _2447 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_926, _927, _928));
    float _4703 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _4714 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2452 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * 0.3183098733425140380859375;
    float _2454 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * 0.3183098733425140380859375;
    float _2461 = ((cbLight._m0[_2410].x * _2416) * _2454) + (((cbLight._m0[_2420].x * _2382) * _2429) * _2452);
    float _2462 = ((_2416 * cbLight._m0[_2410].y) * _2454) + (((cbLight._m0[_2420].y * _2384) * _2429) * _2452);
    float _2463 = ((_2416 * cbLight._m0[_2410].z) * _2454) + (((cbLight._m0[_2420].z * _2386) * _2429) * _2452);
    uvec4 _2467 = floatBitsToUint(cbLight._m0[_2393 + 12u]);
    bool _2469 = _2467.x == 0u;
    float _2571;
    float _2573;
    float _2575;
    if (_2469)
    {
        _2571 = _2461;
        _2573 = _2462;
        _2575 = _2463;
    }
    else
    {
        uint _2579 = _2393 + 6u;
        float _2595 = (dot(vec3(cbLight._m0[_2393 + 2u].xyz), vec3(_926, _927, _928)) * 0.5) + 0.5;
        float _2596 = _2595 * _2595;
        float _4725 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2597 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2598 = isnan(1.0) ? _2408 : (isnan(_2408) ? 1.0 : min(_2408, 1.0));
        _2571 = (((cbLight._m0[_2579].x * 0.3183098733425140380859375) * _2597) * _2598) + _2461;
        _2573 = (((cbLight._m0[_2579].y * 0.3183098733425140380859375) * _2597) * _2598) + _2462;
        _2575 = (((cbLight._m0[_2579].z * 0.3183098733425140380859375) * _2597) * _2598) + _2463;
    }
    bool _2578 = _2467.y == 0u;
    float _2633;
    float _2635;
    float _2637;
    if (_2578)
    {
        _2633 = _2571;
        _2635 = _2573;
        _2637 = _2575;
    }
    else
    {
        uint _2806 = _2393 + 7u;
        float _2822 = (dot(vec3(cbLight._m0[_2393 + 3u].xyz), vec3(_926, _927, _928)) * 0.5) + 0.5;
        float _2823 = _2822 * _2822;
        float _4741 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2824 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2825 = isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0));
        _2633 = (((cbLight._m0[_2806].x * 0.3183098733425140380859375) * _2824) * _2825) + _2571;
        _2635 = (((cbLight._m0[_2806].y * 0.3183098733425140380859375) * _2824) * _2825) + _2573;
        _2637 = (((cbLight._m0[_2806].z * 0.3183098733425140380859375) * _2824) * _2825) + _2575;
    }
    uint _2640 = _2393 + 8u;
    float _2653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _929) * 0.949999988079071044921875);
    float _2654 = _2653 * _2653;
    float _2655 = cbLight._m0[_2393].x + _1005;
    float _2656 = cbLight._m0[_2393].y + _1006;
    float _2657 = cbLight._m0[_2393].z + _1007;
    float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
    float _2662 = _2661 * _2655;
    float _2663 = _2661 * _2656;
    float _2664 = _2661 * _2657;
    float _2665 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2393].xyz));
    float _4757 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2668 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _4768 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _2669 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    float _2670 = dot(vec3(_926, _927, _928), vec3(_2662, _2663, _2664));
    float _4779 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2673 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
    float _2674 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2662, _2663, _2664));
    float _4790 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2678 = _2654 * _2654;
    float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
    float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0)))) * 5.0);
    float _2691 = 0.959999978542327880859375 - _1072;
    float _2693 = 0.959999978542327880859375 - _1073;
    float _2694 = 0.959999978542327880859375 - _1074;
    float _2701 = 1.0 - _2654;
    float _2712 = (0.5 / (((_2669 * ((_2668 * _2701) + _2654)) + 9.9999999392252902907785028219223e-09) + (((_2669 * _2701) + _2654) * _2668))) * _2668;
    float _4801 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2714 = (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
    uint _2728 = _2393 + 9u;
    float _2739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _929) * 0.949999988079071044921875);
    float _2740 = _2739 * _2739;
    float _2741 = cbLight._m0[_2433].x + _1005;
    float _2742 = cbLight._m0[_2433].y + _1006;
    float _2743 = cbLight._m0[_2433].z + _1007;
    float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
    float _2748 = _2747 * _2741;
    float _2749 = _2747 * _2742;
    float _2750 = _2747 * _2743;
    float _2751 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2433].xyz));
    float _4812 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
    float _2754 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
    float _2755 = dot(vec3(_926, _927, _928), vec3(_2748, _2749, _2750));
    float _4823 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2758 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
    float _2759 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2748, _2749, _2750));
    float _4834 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
    float _2763 = _2740 * _2740;
    float _2767 = ((_2758 * _2758) * (_2763 + (-1.0))) + 1.0;
    float _2774 = exp2(log2(1.0 - (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) * 5.0);
    float _2781 = 1.0 - _2740;
    float _2791 = (0.5 / (((_2669 * ((_2754 * _2781) + _2740)) + 9.9999999392252902907785028219223e-09) + (((_2669 * _2781) + _2740) * _2754))) * _2754;
    float _4845 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2793 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2763 / ((_2767 * _2767) * 3.141590118408203125));
    float _2803 = (((((_2774 * _2691) + _1075) * cbLight._m0[_2728].x) * _2793) * _2416) + ((((cbLight._m0[_2640].x * _2382) * ((_2690 * _2691) + _1075)) * _2714) * _2429);
    float _2804 = (((((_2774 * _2693) + _1077) * cbLight._m0[_2728].y) * _2793) * _2416) + ((((cbLight._m0[_2640].y * _2384) * ((_2690 * _2693) + _1077)) * _2714) * _2429);
    float _2805 = (((((_2774 * _2694) + _1078) * cbLight._m0[_2728].z) * _2793) * _2416) + ((((cbLight._m0[_2640].z * _2386) * ((_2690 * _2694) + _1078)) * _2714) * _2429);
    float _2861;
    float _2863;
    float _2865;
    if (_2469)
    {
        _2861 = _2803;
        _2863 = _2804;
        _2865 = _2805;
    }
    else
    {
        uint _2867 = _2393 + 2u;
        uint _2871 = _2393 + 10u;
        float _2885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2867].w)) * _929) * 0.949999988079071044921875);
        float _2886 = _2885 * _2885;
        float _2887 = cbLight._m0[_2867].x + _1005;
        float _2888 = cbLight._m0[_2867].y + _1006;
        float _2889 = cbLight._m0[_2867].z + _1007;
        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
        float _2894 = _2893 * _2887;
        float _2895 = _2893 * _2888;
        float _2896 = _2893 * _2889;
        float _2897 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2867].xyz));
        float _4856 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2900 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _2901 = dot(vec3(_926, _927, _928), vec3(_2894, _2895, _2896));
        float _4867 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2904 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
        float _2905 = dot(vec3(cbLight._m0[_2867].xyz), vec3(_2894, _2895, _2896));
        float _4878 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2909 = _2886 * _2886;
        float _2913 = ((_2904 * _2904) * (_2909 + (-1.0))) + 1.0;
        float _2920 = exp2(log2(1.0 - (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) * 5.0);
        float _2927 = 1.0 - _2886;
        float _2937 = (0.5 / (((_2669 * ((_2900 * _2927) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2669 * _2927) + _2886) * _2900))) * _2900;
        float _4889 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2939 = (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2909 / ((_2913 * _2913) * 3.141590118408203125));
        float _2940 = isnan(1.0) ? _2408 : (isnan(_2408) ? 1.0 : min(_2408, 1.0));
        _2861 = (((((_2920 * _2691) + _1075) * cbLight._m0[_2871].x) * _2939) * _2940) + _2803;
        _2863 = (((((_2920 * _2693) + _1077) * cbLight._m0[_2871].y) * _2939) * _2940) + _2804;
        _2865 = (((((_2920 * _2694) + _1078) * cbLight._m0[_2871].z) * _2939) * _2940) + _2805;
    }
    float _2971;
    float _2973;
    float _2975;
    if (_2578)
    {
        _2971 = _2861;
        _2973 = _2863;
        _2975 = _2865;
    }
    else
    {
        uint _2982 = _2393 + 3u;
        uint _2986 = _2393 + 11u;
        float _3000 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2982].w)) * _929) * 0.949999988079071044921875);
        float _3001 = _3000 * _3000;
        float _3002 = cbLight._m0[_2982].x + _1005;
        float _3003 = cbLight._m0[_2982].y + _1006;
        float _3004 = cbLight._m0[_2982].z + _1007;
        float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
        float _3009 = _3008 * _3002;
        float _3010 = _3008 * _3003;
        float _3011 = _3008 * _3004;
        float _3012 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2982].xyz));
        float _4905 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        float _3015 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
        float _3016 = dot(vec3(_926, _927, _928), vec3(_3009, _3010, _3011));
        float _4916 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        float _3019 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
        float _3020 = dot(vec3(cbLight._m0[_2982].xyz), vec3(_3009, _3010, _3011));
        float _4927 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
        float _3024 = _3001 * _3001;
        float _3028 = ((_3019 * _3019) * (_3024 + (-1.0))) + 1.0;
        float _3035 = exp2(log2(1.0 - (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) * 5.0);
        float _3042 = 1.0 - _3001;
        float _3052 = (0.5 / (((_2669 * ((_3015 * _3042) + _3001)) + 9.9999999392252902907785028219223e-09) + (((_2669 * _3042) + _3001) * _3015))) * _3015;
        float _4938 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
        float _3054 = (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_3024 / ((_3028 * _3028) * 3.141590118408203125));
        float _3055 = isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0));
        _2971 = (((((_3035 * _2691) + _1075) * cbLight._m0[_2986].x) * _3054) * _3055) + _2861;
        _2973 = (((((_3035 * _2693) + _1077) * cbLight._m0[_2986].y) * _3054) * _3055) + _2863;
        _2975 = (((((_3035 * _2694) + _1078) * cbLight._m0[_2986].z) * _3054) * _3055) + _2865;
    }
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    float _3129;
    float _3131;
    if (_2391.y == 0u)
    {
        uvec4 _3076 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3077 = _3076.x;
        uint _3088 = uint((float(_3076.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1014) / _3077))) + floor(float(uint(cbSceneParam._m0[85u].x * _1013) / _3077)));
        float _3098 = (log2(_2169 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3099 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
        uint _3102 = uint(isnan(14.0) ? _3099 : (isnan(_3099) ? 14.0 : min(_3099, 14.0)));
        uvec4 _3107 = texelFetch(g_lightClusterGridBuffer, int(((_3102 << 2u) + (_3088 << 6u)) >> 2u));
        uint _3108 = _3107.x;
        uint _3109 = _3076.z;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        if (((((1u << ((_3109 >> 4u) & 15u)) + 4294967295u) & _3108) == 0u) || ((_3109 & 240u) == 0u))
        {
            _3188 = 0.0;
            _3190 = 0.0;
            _3192 = 0.0;
            _3194 = 0.0;
            _3196 = 0.0;
            _3198 = 0.0;
        }
        else
        {
            float _3189;
            float _3191;
            float _3193;
            float _3195;
            float _3197;
            float _3199;
            float _3332 = 0.0;
            float _3333 = 0.0;
            float _3334 = 0.0;
            float _3335 = 0.0;
            float _3336 = 0.0;
            float _3337 = 0.0;
            uint _3338 = 0u;
            uint _3347;
            bool _3348;
            for (;;)
            {
                _3347 = texelFetch(g_lightClassification, int((((_3102 << 5u) + (_3088 << 9u)) + (_3338 << 2u)) >> 2u)).x;
                _3348 = _3347 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3348)
                {
                    frontier_phi_66_pred = _3337;
                    frontier_phi_66_pred_1 = _3336;
                    frontier_phi_66_pred_2 = _3335;
                    frontier_phi_66_pred_3 = _3334;
                    frontier_phi_66_pred_4 = _3333;
                    frontier_phi_66_pred_5 = _3332;
                }
                else
                {
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    uint _3462;
                    _3456 = _3332;
                    _3457 = _3333;
                    _3458 = _3334;
                    _3459 = _3335;
                    _3460 = _3336;
                    _3461 = _3337;
                    _3462 = _3347;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    for (;;)
                    {
                        uint _3466 = uint(findLSB(_3462)) + (_3338 << 5u);
                        uint _3463 = (_3462 + 4294967295u) & _3462;
                        uint _3468 = _3466 * 48u;
                        vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3468)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 3u)).x));
                        uint _3488 = (_3466 * 48u) + 4u;
                        vec4 _3501 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3488)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 3u)).x));
                        uint _3507 = (_3466 * 48u) + 8u;
                        vec3 _3518 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3507)).x, texelFetch(g_PointLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3507 + 2u)).x));
                        float _3522 = _3482.x - _2167;
                        float _3523 = _3482.y - _2168;
                        float _3524 = _3482.z - _2169;
                        float _3525 = dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524));
                        float _3528 = inversesqrt(_3525);
                        float _3529 = _3528 * _3522;
                        float _3530 = _3528 * _3523;
                        float _3531 = _3528 * _3524;
                        float _3532 = dot(vec3(_1032, _1035, _1038), vec3(_3529, _3530, _3531));
                        float _3537 = 1.0 - (_3525 * _3482.w);
                        float _4964 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3538 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                        float _3539 = sqrt(_3525) * _3501.w;
                        float _3542 = 1.39999997615814208984375 / (_3539 + 1.39999997615814208984375);
                        float _3543 = _3542 * _3542;
                        float _3546 = ((1.0 - _3543) * _3532) + _3543;
                        float _3549 = _3539 * _3539;
                        float _3553 = ((isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0))) * _3538) / ((_3549 * 0.699999988079071044921875) + 1.0);
                        float _3557 = (-0.0) - _2167;
                        float _3558 = (-0.0) - _2168;
                        float _3559 = (-0.0) - _2169;
                        float _3563 = inversesqrt(dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559)));
                        float _3564 = _3563 * _3557;
                        float _3565 = _3563 * _3558;
                        float _3566 = _3563 * _3559;
                        float _3573 = exp2(log2(1.0 / ((_3549 * 3.5) + 5.0)) * 0.25);
                        float _3574 = 1.0 - _1107;
                        float _3581 = sqrt(1.0 - ((1.0 - (_3574 * _3574)) * (1.0 - (_3573 * _3573))));
                        float _3582 = _3581 * _3581;
                        float _3583 = _3582 * _3582;
                        float _3584 = _3564 + _3529;
                        float _3585 = _3565 + _3530;
                        float _3586 = _3566 + _3531;
                        float _3590 = inversesqrt(dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586)));
                        float _3594 = dot(vec3(_1032, _1035, _1038), vec3(_3564, _3565, _3566));
                        float _4980 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3597 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                        float _3598 = dot(vec3(_1032, _1035, _1038), vec3(_3590 * _3584, _3590 * _3585, _3590 * _3586));
                        float _4991 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3601 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                        float _3605 = ((_3601 * _3601) * (_3583 + (-1.0))) + 1.0;
                        float _3606 = _3542 * _3582;
                        float _3607 = _3606 * _3606;
                        float _3610 = ((1.0 - _3607) * _3532) + _3607;
                        float _5002 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                        float _3611 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                        float _3612 = 1.0 - _3582;
                        float _3622 = (0.5 / (((_3611 * ((_3597 * _3612) + _3582)) + 9.9999999392252902907785028219223e-09) + (((_3611 * _3612) + _3582) * _3597))) * _3611;
                        float _5013 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                        float _3633 = (((_3583 * 3.1415927410125732421875) * (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0)))) / ((_3605 * _3605) * ((_3549 * 2.1991131305694580078125) + 3.141590118408203125))) * _3538;
                        _3391 = (_3553 * _3501.x) + _3459;
                        _3392 = (_3553 * _3501.y) + _3460;
                        _3393 = (_3553 * _3501.z) + _3461;
                        _3388 = (_3633 * _3518.x) + _3456;
                        _3389 = (_3633 * _3518.y) + _3457;
                        _3390 = (_3633 * _3518.z) + _3458;
                        if (_3463 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3456 = _3388;
                            _3457 = _3389;
                            _3458 = _3390;
                            _3459 = _3391;
                            _3460 = _3392;
                            _3461 = _3393;
                            _3462 = _3463;
                        }
                    }
                    frontier_phi_66_pred = _3393;
                    frontier_phi_66_pred_1 = _3392;
                    frontier_phi_66_pred_2 = _3391;
                    frontier_phi_66_pred_3 = _3390;
                    frontier_phi_66_pred_4 = _3389;
                    frontier_phi_66_pred_5 = _3388;
                }
                _3199 = frontier_phi_66_pred;
                _3197 = frontier_phi_66_pred_1;
                _3195 = frontier_phi_66_pred_2;
                _3193 = frontier_phi_66_pred_3;
                _3191 = frontier_phi_66_pred_4;
                _3189 = frontier_phi_66_pred_5;
                uint _3339 = _3338 + 1u;
                if (_3339 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3332 = _3189;
                    _3333 = _3191;
                    _3334 = _3193;
                    _3335 = _3195;
                    _3336 = _3197;
                    _3337 = _3199;
                    _3338 = _3339;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3188 = _3189;
            _3190 = _3191;
            _3192 = _3193;
            _3194 = _3195;
            _3196 = _3197;
            _3198 = _3199;
        }
        uvec4 _3202 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3203 = _3202.z;
        uint _3205 = (_3203 >> 8u) & 15u;
        float _3300;
        float _3302;
        float _3304;
        float _3306;
        float _3308;
        float _3310;
        if (((4294967295u << _3205) & _3108) == 0u)
        {
            _3300 = _3188;
            _3302 = _3190;
            _3304 = _3192;
            _3306 = _3194;
            _3308 = _3196;
            _3310 = _3198;
        }
        else
        {
            float _3325 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
            float _3326 = _3325 * _2167;
            float _3327 = _3325 * _2168;
            float _3328 = _3325 * _2169;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3205 < ((_3203 >> 12u) & 15u))
            {
                float _3301;
                float _3303;
                float _3305;
                float _3307;
                float _3309;
                float _3311;
                float _3439 = _3188;
                float _3440 = _3190;
                float _3441 = _3192;
                float _3442 = _3194;
                float _3443 = _3196;
                float _3444 = _3198;
                uint _3445 = _3205;
                uint _3454;
                bool _3455;
                for (;;)
                {
                    _3454 = texelFetch(g_lightClassification, int((((_3102 << 5u) + (_3088 << 9u)) + (_3445 << 2u)) >> 2u)).x;
                    _3455 = _3454 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3455)
                    {
                        frontier_phi_72_pred = _3444;
                        frontier_phi_72_pred_1 = _3443;
                        frontier_phi_72_pred_2 = _3442;
                        frontier_phi_72_pred_3 = _3441;
                        frontier_phi_72_pred_4 = _3440;
                        frontier_phi_72_pred_5 = _3439;
                    }
                    else
                    {
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3934;
                        float _3935;
                        float _3936;
                        float _3651 = _3439;
                        float _3652 = _3440;
                        float _3653 = _3441;
                        float _3654 = _3442;
                        float _3655 = _3443;
                        float _3656 = _3444;
                        uint _3657 = _3454;
                        uint _3658;
                        vec4 _3683;
                        float _3684;
                        vec4 _3699;
                        vec3 _3711;
                        vec4 _3726;
                        vec4 _3741;
                        float _3787;
                        bool _3788;
                        for (;;)
                        {
                            uint _3668 = ((_3445 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3657));
                            _3658 = (_3657 + 4294967295u) & _3657;
                            uint _3670 = _3668 * 40u;
                            _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            _3684 = _3683.w;
                            uint _3686 = (_3668 * 40u) + 4u;
                            _3699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 3u)).x));
                            uint _3701 = (_3668 * 40u) + 8u;
                            _3711 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x));
                            uint _3713 = (_3668 * 40u) + 16u;
                            _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            uint _3728 = (_3668 * 40u) + 20u;
                            _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3743 = (_3668 * 40u) + 24u;
                            vec4 _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3762 = (_3668 * 40u) + 28u;
                            vec4 _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            _3787 = fma(_2169, _3775.z, fma(_2168, _3775.y, _3775.x * _2167)) + _3775.w;
                            _3788 = !((fma(_2169, _3756.z, fma(_2168, _3756.y, _3756.x * _2167)) + _3756.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3788)
                            {
                                float _3815 = _3683.x - _2167;
                                float _3816 = _3683.y - _2168;
                                float _3817 = _3683.z - _2169;
                                float _3818 = dot(vec3(_3815, _3816, _3817), vec3(_3815, _3816, _3817));
                                float _3821 = inversesqrt(_3818);
                                float _3822 = _3821 * _3815;
                                float _3823 = _3821 * _3816;
                                float _3824 = _3821 * _3817;
                                float _3828 = 1.0 - (_3818 / (_3684 * _3684));
                                float _5024 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3829 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                                float _3833 = sqrt(_3818) * _3699.w;
                                float _3835 = 1.39999997615814208984375 / (_3833 + 1.39999997615814208984375);
                                float _3836 = _3835 * _3835;
                                float _3839 = ((1.0 - _3836) * dot(vec3(_3822, _3823, _3824), vec3(_1032, _1035, _1038))) + _3836;
                                float _3842 = _3833 * _3833;
                                float _3846 = (fma(_2169, _3726.z, fma(_2168, _3726.y, _3726.x * _2167)) + _3726.w) / _3787;
                                float _3847 = (fma(_2169, _3741.z, fma(_2168, _3741.y, _3741.x * _2167)) + _3741.w) / _3787;
                                float _3851 = 1.0 - dot(vec2(_3846, _3847), vec2(_3846, _3847));
                                float _5040 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3852 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                                float _3853 = _3852 * (((isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0))) * _3829) / ((_3842 * 0.699999988079071044921875) + 1.0));
                                float _3865 = exp2(log2(1.0 / ((_3842 * 3.5) + 5.0)) * 0.25);
                                float _3866 = 1.0 - _1107;
                                float _3873 = sqrt(1.0 - ((1.0 - (_3866 * _3866)) * (1.0 - (_3865 * _3865))));
                                float _3874 = _3873 * _3873;
                                float _3875 = _3874 * _3874;
                                float _3876 = _3822 - _3326;
                                float _3877 = _3823 - _3327;
                                float _3878 = _3824 - _3328;
                                float _3882 = inversesqrt(dot(vec3(_3876, _3877, _3878), vec3(_3876, _3877, _3878)));
                                float _3886 = dot(vec3(_1032, _1035, _1038), vec3((-0.0) - _3326, (-0.0) - _3327, (-0.0) - _3328));
                                float _5051 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3889 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                                float _3890 = dot(vec3(_1032, _1035, _1038), vec3(_3882 * _3876, _3882 * _3877, _3882 * _3878));
                                float _5062 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3893 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                                float _3897 = ((_3893 * _3893) * (_3875 + (-1.0))) + 1.0;
                                float _3898 = _3835 * _3874;
                                float _3899 = _3898 * _3898;
                                float _3905 = ((1.0 - _3899) * dot(vec3(_1032, _1035, _1038), vec3(_3822, _3823, _3824))) + _3899;
                                float _5073 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3906 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                                float _3907 = 1.0 - _3874;
                                float _3917 = (0.5 / (((_3906 * ((_3889 * _3907) + _3874)) + 9.9999999392252902907785028219223e-09) + (((_3906 * _3907) + _3874) * _3889))) * _3906;
                                float _5084 = isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0));
                                float _3927 = (_3852 * _3829) * (((_3875 * 3.1415927410125732421875) * (isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0)))) / ((_3897 * _3897) * ((_3842 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3853 * _3699.y;
                                frontier_phi_78_pred_1 = _3853 * _3699.x;
                                frontier_phi_78_pred_2 = _3927 * _3711.z;
                                frontier_phi_78_pred_3 = _3927 * _3711.y;
                                frontier_phi_78_pred_4 = _3927 * _3711.x;
                                frontier_phi_78_pred_5 = _3853 * _3699.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3935 = frontier_phi_78_pred;
                            _3934 = frontier_phi_78_pred_1;
                            _3933 = frontier_phi_78_pred_2;
                            _3932 = frontier_phi_78_pred_3;
                            _3931 = frontier_phi_78_pred_4;
                            _3936 = frontier_phi_78_pred_5;
                            _3641 = _3934 + _3654;
                            _3642 = _3935 + _3655;
                            _3643 = _3936 + _3656;
                            _3638 = _3931 + _3651;
                            _3639 = _3932 + _3652;
                            _3640 = _3933 + _3653;
                            if (_3658 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3640;
                                _3654 = _3641;
                                _3655 = _3642;
                                _3656 = _3643;
                                _3657 = _3658;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3643;
                        frontier_phi_72_pred_1 = _3642;
                        frontier_phi_72_pred_2 = _3641;
                        frontier_phi_72_pred_3 = _3640;
                        frontier_phi_72_pred_4 = _3639;
                        frontier_phi_72_pred_5 = _3638;
                    }
                    _3311 = frontier_phi_72_pred;
                    _3309 = frontier_phi_72_pred_1;
                    _3307 = frontier_phi_72_pred_2;
                    _3305 = frontier_phi_72_pred_3;
                    _3303 = frontier_phi_72_pred_4;
                    _3301 = frontier_phi_72_pred_5;
                    uint _3446 = _3445 + 1u;
                    if (_3446 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3439 = _3301;
                        _3440 = _3303;
                        _3441 = _3305;
                        _3442 = _3307;
                        _3443 = _3309;
                        _3444 = _3311;
                        _3445 = _3446;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3311;
                frontier_phi_60_61_ladder_1 = _3309;
                frontier_phi_60_61_ladder_2 = _3305;
                frontier_phi_60_61_ladder_3 = _3303;
                frontier_phi_60_61_ladder_4 = _3301;
                frontier_phi_60_61_ladder_5 = _3307;
            }
            else
            {
                frontier_phi_60_61_ladder = _3198;
                frontier_phi_60_61_ladder_1 = _3196;
                frontier_phi_60_61_ladder_2 = _3192;
                frontier_phi_60_61_ladder_3 = _3190;
                frontier_phi_60_61_ladder_4 = _3188;
                frontier_phi_60_61_ladder_5 = _3194;
            }
            _3300 = frontier_phi_60_61_ladder_4;
            _3302 = frontier_phi_60_61_ladder_3;
            _3304 = frontier_phi_60_61_ladder_2;
            _3306 = frontier_phi_60_61_ladder_5;
            _3308 = frontier_phi_60_61_ladder_1;
            _3310 = frontier_phi_60_61_ladder;
        }
        float _3315 = isnan(1.0) ? _1091 : (isnan(_1091) ? 1.0 : min(_1091, 1.0));
        _3121 = (_3315 * _3306) + _2633;
        _3123 = (_3315 * _3308) + _2635;
        _3125 = (_3315 * _3310) + _2637;
        _3127 = ((_3300 * _1075) * _3315) + _2971;
        _3129 = ((_3302 * _1077) * _3315) + _2973;
        _3131 = ((_3304 * _1078) * _3315) + _2975;
    }
    else
    {
        _3121 = _2633;
        _3123 = _2635;
        _3125 = _2637;
        _3127 = _2971;
        _3129 = _2973;
        _3131 = _2975;
    }
    float _5100 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _5111 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _5122 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    uint _3151 = _285 + 6u;
    float _3159 = _1013 / cbSceneParam._m0[86u].x;
    float _3160 = _1014 / cbSceneParam._m0[86u].y;
    vec4 _3174 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3159, _3160, (log2((isnan(cbSceneParam._m0[77u].w) ? _948 : (isnan(_948) ? cbSceneParam._m0[77u].w : min(_948, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3176 = _3174.x;
    float _3177 = _3174.y;
    float _3178 = _3174.z;
    float _3179 = _3174.w;
    float _3250;
    float _3252;
    float _3254;
    float _3256;
    if (_948 > cbSceneParam._m0[78u].w)
    {
        float _3213 = isnan(_948) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _948 : min(cbSceneParam._m0[80u].w, _948));
        float _3214 = _3213 / _948;
        float _3225 = _3214 * _998;
        float _3226 = _999 * _3214;
        float _3227 = (-0.0) - _3226;
        float _3228 = _3214 * _1000;
        float _3230 = (cbSceneParam._m0[77u].w * _3227) / _3213;
        float _3231 = _3230 + cbSceneParam._m0[79u].w;
        float _3232 = cbSceneParam._m0[79u].w - _3226;
        float _3238 = sqrt(((_3225 * _3225) + (_3226 * _3226)) + (_3228 * _3228));
        float _3241 = (1.0 - (cbSceneParam._m0[77u].w / _3213)) * _3238;
        float _3246 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3248 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3401;
        if (abs((_3227 - _3230) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3401 = ((((_3231 > 0.0) ? exp2(_3246 * _3231) : (2.0 - exp2(_3248 * _3231))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3241;
        }
        else
        {
            float _3361 = 1.0 / cbSceneParam._m0[80u].x;
            float _3362 = isnan(_3232) ? _3231 : (isnan(_3231) ? _3232 : max(_3231, _3232));
            float _3363 = isnan(_3232) ? _3231 : (isnan(_3231) ? _3232 : min(_3231, _3232));
            float _3372 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : min(_3362, 0.0));
            float _3373 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : min(_3363, 0.0));
            _3401 = ((abs(_3238 / _3227) * cbSceneParam._m0[80u].y) * ((((_3372 - _3373) * 2.0) - ((exp2(_3246 * (isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0)))) - exp2(_3246 * (isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0))))) * _3361)) - ((exp2(_3248 * _3372) - exp2(_3248 * _3373)) * _3361))) + (_3241 * cbSceneParam._m0[80u].z);
        }
        vec4 _3403 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3159, _3160, 1.0), 0.0);
        float _3412 = exp2((_3401 * (-1.44269502162933349609375)) * (1.0 - _3403.w));
        float _3413 = log2(_3412);
        float _3429 = log2(_3179);
        _3250 = (exp2(_3429 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3413 * cbSceneParam._m0[78u].x)) * _3403.x) / cbSceneParam._m0[78u].x)) + _3176;
        _3252 = (exp2(_3429 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3413 * cbSceneParam._m0[78u].y)) * _3403.y) / cbSceneParam._m0[78u].y)) + _3177;
        _3254 = (exp2(_3429 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3413 * cbSceneParam._m0[78u].z)) * _3403.z) / cbSceneParam._m0[78u].z)) + _3178;
        _3256 = _3412 * _3179;
    }
    else
    {
        _3250 = _3176;
        _3252 = _3177;
        _3254 = _3178;
        _3256 = _3179;
    }
    float _3268 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3269 = _3268 == 3.0;
    float _3270 = log2(_3256);
    float _3277 = exp2(_3270 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0))) * (_3121 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1091))) + ((_3127 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1899)) * cbPerFrame._m0[3u].x));
    float _3278 = exp2(_3270 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0))) * (_3123 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1091))) + ((_3129 + ((isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0))) * _1899)) * cbPerFrame._m0[3u].x));
    float _3279 = exp2(_3270 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0))) * (_3125 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1091))) + ((_3131 + ((isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0))) * _1899)) * cbPerFrame._m0[3u].x));
    float _3288 = (_3268 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3288 * (_3269 ? _3277 : (_3277 + (cbSceneParam._m0[72u].w * _3250)));
    SV_Target.y = _3288 * (_3269 ? _3278 : (_3278 + (cbSceneParam._m0[72u].w * _3252)));
    SV_Target.z = _3288 * (_3269 ? _3279 : (_3279 + (cbSceneParam._m0[72u].w * _3254)));
    SV_Target.w = cbInstanceData._m0[_3151].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3151].w;
}


