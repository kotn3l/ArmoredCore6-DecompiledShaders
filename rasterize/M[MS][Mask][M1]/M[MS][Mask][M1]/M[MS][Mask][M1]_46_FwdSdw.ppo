#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1358;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[23u].w) + _388) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3966 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _413 = (_406 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _414 = (_406 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _415 = (_406 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _434 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _471 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _473 = _471.x;
    float _474 = _471.y;
    float _475 = _471.z;
    float _484 = ((_454.z - _475) * _406) + _475;
    float _487 = ((((_454.x - _473) * _406) + _473) * 2.0) + (-1.0);
    float _489 = ((((_454.y - _474) * _406) + _474) * 2.0) + (-1.0);
    float _490 = dot(vec2(_487, _489), vec2(_487, _489));
    float _3977 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _495 = sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))));
    vec4 _511 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _523 = (((_511.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _487;
    float _524 = (((_511.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _489;
    float _527 = fma(_495, _243, fma(_524, _250, _523 * _236));
    float _530 = fma(_495, _244, fma(_524, _251, _523 * _237));
    float _533 = fma(_495, _245, fma(_524, _252, _523 * _238));
    float _537 = inversesqrt(dot(vec3(_527, _530, _533), vec3(_527, _530, _533)));
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _566 = _564.x;
    float _567 = 1.0 - _566;
    float _576 = (cbMtdParam._m0[19u].x + dot(vec4(_537 * _527, _537 * _530, _537 * _533, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_566 - _567) * cbMtdParam._m0[24u].z) + _567) * cbMtdParam._m0[21u].z);
    float _3988 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _579 = (-0.0) - cbMtdParam._m0[24u].x;
    float _581 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _581 : (isnan(_581) ? 1.0 : min(_581, 1.0));
    float _589 = _577 - ((_577 * TEXCOORD_8.x) * _582);
    float _590 = _577 - ((_577 * TEXCOORD_8.y) * _582);
    float _591 = _577 - ((_577 * TEXCOORD_8.z) * _582);
    float _598 = (_589 * ((_434.x * cbMtdParam._m0[18u].x) - _413)) + _413;
    float _599 = (_590 * ((_434.y * cbMtdParam._m0[18u].y) - _414)) + _414;
    float _600 = (_591 * ((_434.z * cbMtdParam._m0[18u].z) - _415)) + _415;
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _614 = _612.x;
    float _615 = 1.0 - _614;
    float _641 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_614 - _615) * cbMtdParam._m0[24u].w) + _615) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4009 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _650 = ((((cbMtdParam._m0[10u].x - _598) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _642) + _598;
    float _651 = ((((cbMtdParam._m0[10u].y - _599) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _642) + _599;
    float _652 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _600)) * _642) + _600;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _680 = _678.x;
    float _698 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _680) * _406) + _680;
    float _702 = ((_664.x - _698) * cbMtdParam._m0[19u].z) + _698;
    float _704 = _702 - (_702 * _589);
    float _706 = _704 - (_704 * _642);
    float _710 = (cbMtdParam._m0[19u].w * (_511.z - _484)) + _484;
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _731 = (_724.x * 2.0) + (-1.0);
    float _732 = (_724.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _4020 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _741 = ((_724.z - _710) * _589) + _710;
    float _744 = ((cbMtdParam._m0[23u].x - _741) * _642) + _741;
    vec4 _763 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _769 = (_763.x * 2.0) + (-1.0);
    float _770 = (_763.y * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _4031 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _786 = ((sqrt(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) - _495) * _591) + _495;
    float _789 = (((_731 - _523) * _589) + _523) + (cbMtdParam._m0[21u].x * _523);
    float _790 = (((_732 - _524) * _590) + _524) + (cbMtdParam._m0[21u].x * _524);
    float _801 = (((_769 - _789) + (_789 * cbMtdParam._m0[22u].z)) * _642) + _789;
    float _802 = (((_770 - _790) + (_790 * cbMtdParam._m0[22u].z)) * _642) + _790;
    float _803 = (_642 * (sqrt(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) - _786)) + _786;
    float _805 = cbMtdParam._m0[22u].x + _511.w;
    float _808 = fma(_803, _243, fma(_802, _250, _801 * _236));
    float _811 = fma(_803, _244, fma(_802, _251, _801 * _237));
    float _814 = fma(_803, _245, fma(_802, _252, _801 * _238));
    float _818 = inversesqrt(dot(vec3(_808, _811, _814), vec3(_808, _811, _814)));
    float _819 = _818 * _808;
    float _820 = _818 * _811;
    float _821 = _818 * _814;
    float _4042 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _822 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4064 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4075 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4086 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4097 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _827 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _841 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _891 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _881);
    float _892 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _881);
    float _893 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _881);
    float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
    float _898 = _891 * _897;
    float _899 = _892 * _897;
    float _900 = _893 * _897;
    float _906 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _907 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _925 = fma(_821, cbSceneParam._m0[5u].z, fma(_820, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _819));
    float _928 = fma(_821, cbSceneParam._m0[6u].z, fma(_820, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _819));
    float _931 = fma(_821, cbSceneParam._m0[7u].z, fma(_820, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _819));
    uint _945 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _951 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * cbInstanceData._m0[_945].x;
    float _952 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * cbInstanceData._m0[_945].y;
    float _953 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * cbInstanceData._m0[_945].z;
    float _4108 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _957 = 1.0 - _827;
    float _958 = _954 * _957;
    float _959 = _955 * _957;
    float _960 = _956 * _957;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _827;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _827;
    float _967 = (_956 + (-0.039999999105930328369140625)) * _827;
    float _968 = _965 + 0.039999999105930328369140625;
    float _970 = _966 + 0.039999999105930328369140625;
    float _971 = _967 + 0.039999999105930328369140625;
    vec4 _980 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _906, cbSceneParam._m0[86u].y * _907));
    float _984 = ((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * TEXCOORD_5.w) * _980.x;
    float _985 = dot(vec3(_819, _820, _821), vec3(_898, _899, _900));
    float _988 = _985 * 2.0;
    float _992 = (_988 * _819) - _898;
    float _993 = (_988 * _820) - _899;
    float _994 = (_988 * _821) - _900;
    float _998 = abs(dot(vec3(_898, _899, _900), vec3(_819, _820, _821)));
    float _4141 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1000 = sqrt(_822);
    float _1013 = exp2((_1000 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1000 * 3.0));
    float _1019 = (1.0 - _1013) * ((_1000 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1020 = _1013 * _1000;
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1357;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1082 = fma(_1056, cbModelParam._m0[26u].z, fma(_1052, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048));
        float _1086 = fma(_1056, cbModelParam._m0[27u].z, fma(_1052, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048));
        float _1090 = fma(_1056, cbModelParam._m0[28u].z, fma(_1052, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048));
        float _1115 = _1048 + _819;
        float _1116 = _1052 + _820;
        float _1117 = _1056 + _821;
        float _1127 = fma(_1117, cbModelParam._m0[26u].z, fma(_1116, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1115)) - _1082;
        float _1128 = fma(_1117, cbModelParam._m0[27u].z, fma(_1116, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1115)) - _1086;
        float _1129 = fma(_1117, cbModelParam._m0[28u].z, fma(_1116, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1115)) - _1090;
        float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
        float _1146 = ((_1133 * _1127) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1082 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1133 * _1128) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1086 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1133 * _1129) / cbModelParam._m0[34u].z) + ((((((_1090 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        float _1185 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1151.x + (-0.5));
        float _1187 = _1185 * (_1151.y + (-0.5));
        float _1188 = _1185 * (_1151.z + (-0.5));
        float _1195 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1158.x + (-0.5));
        float _1197 = _1195 * (_1158.y + (-0.5));
        float _1198 = _1195 * (_1158.z + (-0.5));
        float _1205 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1165.x + (-0.5));
        float _1207 = _1205 * (_1165.y + (-0.5));
        float _1208 = _1205 * (_1165.z + (-0.5));
        float _1215 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1172.x + (-0.5));
        float _1217 = _1215 * (_1172.y + (-0.5));
        float _1218 = _1215 * (_1172.z + (-0.5));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = _1186 * 0.5;
        float _1223 = _1196 * 0.5;
        float _1224 = _1206 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1239 = (dot(vec3(_819, _820, _821), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1249 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _4189 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1251 + 1.0))) + _1256) * _1219;
        float _1266 = _1187 * 0.5;
        float _1267 = _1197 * 0.5;
        float _1268 = _1207 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_819, _820, _821), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4222 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1293 + 1.0))) + _1298) * _1220;
        float _1308 = _1188 * 0.5;
        float _1309 = _1198 * 0.5;
        float _1310 = _1208 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_819, _820, _821), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4255 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1335 + 1.0))) + _1340) * _1221;
        _1357 = _1188;
        _1359 = _1187;
        _1360 = _1186;
        _1361 = _1198;
        _1362 = _1197;
        _1363 = _1196;
        _1364 = _1208;
        _1365 = _1207;
        _1366 = _1206;
        _1367 = _1221;
        _1368 = _1220;
        _1369 = _1219;
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
    }
    else
    {
        _1357 = _1358;
        _1359 = _1358;
        _1360 = _1358;
        _1361 = _1358;
        _1362 = _1358;
        _1363 = _1358;
        _1364 = _1358;
        _1365 = _1358;
        _1366 = _1358;
        _1367 = _1358;
        _1368 = _1358;
        _1369 = _1358;
        _1370 = 0.0;
        _1371 = 0.0;
        _1372 = 0.0;
    }
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1397 = fma(_1056, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1048));
        float _1401 = fma(_1056, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1048));
        float _1405 = fma(_1056, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1048));
        float _1428 = _1048 + _819;
        float _1429 = _1052 + _820;
        float _1430 = _1056 + _821;
        float _1440 = fma(_1430, cbModelParam._m0[30u].z, fma(_1429, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1428)) - _1397;
        float _1441 = fma(_1430, cbModelParam._m0[31u].z, fma(_1429, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1428)) - _1401;
        float _1442 = fma(_1430, cbModelParam._m0[32u].z, fma(_1429, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1428)) - _1405;
        float _1446 = inversesqrt(dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442)));
        float _1459 = ((_1446 * _1440) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1397 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1446 * _1441) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1401 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1446 * _1442) / cbModelParam._m0[35u].z) + ((((((_1405 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        float _1496 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1463.x + (-0.5));
        float _1498 = _1496 * (_1463.y + (-0.5));
        float _1499 = _1496 * (_1463.z + (-0.5));
        float _1506 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1470.x + (-0.5));
        float _1508 = _1506 * (_1470.y + (-0.5));
        float _1509 = _1506 * (_1470.z + (-0.5));
        float _1516 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1477.x + (-0.5));
        float _1518 = _1516 * (_1477.y + (-0.5));
        float _1519 = _1516 * (_1477.z + (-0.5));
        float _1526 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1484.x + (-0.5));
        float _1528 = _1526 * (_1484.y + (-0.5));
        float _1529 = _1526 * (_1484.z + (-0.5));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = _1497 * 0.5;
        float _1534 = _1507 * 0.5;
        float _1535 = _1517 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_819, _820, _821), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4318 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1560 + 1.0))) + _1565) * _1530;
        float _1575 = _1498 * 0.5;
        float _1576 = _1508 * 0.5;
        float _1577 = _1518 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_819, _820, _821), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4351 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1602 + 1.0))) + _1607) * _1531;
        float _1617 = _1499 * 0.5;
        float _1618 = _1509 * 0.5;
        float _1619 = _1519 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_819, _820, _821), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4384 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1644 + 1.0))) + _1649) * _1532;
        _1666 = _1499;
        _1667 = _1498;
        _1668 = _1497;
        _1669 = _1509;
        _1670 = _1508;
        _1671 = _1507;
        _1672 = _1519;
        _1673 = _1518;
        _1674 = _1517;
        _1675 = _1532;
        _1676 = _1531;
        _1677 = _1530;
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
    }
    else
    {
        _1666 = _1358;
        _1667 = _1358;
        _1668 = _1358;
        _1669 = _1358;
        _1670 = _1358;
        _1671 = _1358;
        _1672 = _1358;
        _1673 = _1358;
        _1674 = _1358;
        _1675 = _1358;
        _1676 = _1358;
        _1677 = _1358;
        _1678 = 0.0;
        _1679 = 0.0;
        _1680 = 0.0;
    }
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1370)) + _1370;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1371)) + _1371;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1372)) + _1372;
    float _1713 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1716 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1719 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1690));
    float _1734 = _992 * 0.5;
    float _1735 = _993 * 0.5;
    float _1736 = _994 * 0.5;
    float _1737 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1740 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1743 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1777;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1750 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1357, _1361, _1364, _1367));
        float _1754 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1758 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1765 = dot(vec4(cbModelParam._m0[39u]), vec4(_1734, _1735, _1736, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1788;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1779 = dot(vec4(cbModelParam._m0[40u]), vec4(_1734, _1735, _1736, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1779) ? 0.0 : (isnan(0.0) ? _1779 : max(0.0, _1779))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1792 = (_1788 * cbModelParam._m0[1u].x) + (_1777 * (1.0 - cbModelParam._m0[1u].x));
    float _1802 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1802 : min(cbModelParam._m0[25u].z, _1802));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1850 = fma(_1056, cbModelParam._m0[13u].z, fma(_1052, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048)) + cbModelParam._m0[13u].w;
        float _1854 = fma(_1056, cbModelParam._m0[14u].z, fma(_1052, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048)) + cbModelParam._m0[14u].w;
        float _1858 = fma(_1056, cbModelParam._m0[15u].z, fma(_1052, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048)) + cbModelParam._m0[15u].w;
        float _1861 = fma(_994, cbModelParam._m0[13u].z, fma(_993, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992));
        float _1864 = fma(_994, cbModelParam._m0[14u].z, fma(_993, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992));
        float _1867 = fma(_994, cbModelParam._m0[15u].z, fma(_993, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992));
        float _1895;
        if (_1861 > 0.0)
        {
            _1895 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1895 = frontier_phi_14_12_ladder;
        }
        float _2066;
        if (_1864 > 0.0)
        {
            _2066 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2066 = frontier_phi_23_19_ladder;
        }
        float _2361;
        if (_1867 > 0.0)
        {
            _2361 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2361 = frontier_phi_35_30_ladder;
        }
        float _2363 = isnan(_2066) ? _1895 : (isnan(_1895) ? _2066 : min(_1895, _2066));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1861) + _1850;
        float _2369 = (_2364 * _1864) + _1854;
        float _2370 = (_2364 * _1867) + _1858;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2373 = (-1.0) - _2371;
        float _2375 = _2371 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2370 > _2375) || ((_2370 < _2373) || ((_2369 > _2375) || ((_2369 < _2373) || ((_2368 < _2373) || (_2368 > _2375))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2370, cbModelParam._m0[9u].z, fma(_2369, cbModelParam._m0[9u].y, _2368 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2370, cbModelParam._m0[10u].z, fma(_2369, cbModelParam._m0[10u].y, _2368 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2370, cbModelParam._m0[11u].z, fma(_2369, cbModelParam._m0[11u].y, _2368 * cbModelParam._m0[11u].x))), _1803);
            frontier_phi_13_35_ladder = _2515.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2515.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2515.x * cbModelParam._m0[1u].y;
        }
        _1883 = frontier_phi_13_35_ladder_2;
        _1885 = frontier_phi_13_35_ladder_1;
        _1887 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_992, _993, _994), _1803);
        _1883 = _1871.x * cbModelParam._m0[1u].y;
        _1885 = _1871.y * cbModelParam._m0[1u].y;
        _1887 = _1871.z * cbModelParam._m0[1u].y;
    }
    float _1891 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1892 = isnan(_1891) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1891 : min(cbModelParam._m0[25u].w, _1891));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1945 = fma(_1056, cbModelParam._m0[21u].z, fma(_1052, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048)) + cbModelParam._m0[21u].w;
        float _1949 = fma(_1056, cbModelParam._m0[22u].z, fma(_1052, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048)) + cbModelParam._m0[22u].w;
        float _1953 = fma(_1056, cbModelParam._m0[23u].z, fma(_1052, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048)) + cbModelParam._m0[23u].w;
        float _1956 = fma(_994, cbModelParam._m0[21u].z, fma(_993, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992));
        float _1959 = fma(_994, cbModelParam._m0[22u].z, fma(_993, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992));
        float _1962 = fma(_994, cbModelParam._m0[23u].z, fma(_993, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992));
        float _2071;
        if (_1956 > 0.0)
        {
            _2071 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2071 = frontier_phi_25_21_ladder;
        }
        float _2388;
        if (_1959 > 0.0)
        {
            _2388 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2388 = frontier_phi_37_32_ladder;
        }
        float _2726;
        if (_1962 > 0.0)
        {
            _2726 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2726 = frontier_phi_47_44_ladder;
        }
        float _2728 = isnan(_2388) ? _2071 : (isnan(_2071) ? _2388 : min(_2071, _2388));
        float _2729 = isnan(_2726) ? _2728 : (isnan(_2728) ? _2726 : min(_2728, _2726));
        float _2733 = (_2729 * _1956) + _1945;
        float _2734 = (_2729 * _1959) + _1949;
        float _2735 = (_2729 * _1962) + _1953;
        float _2736 = _2729 * 9.9999997473787516355514526367188e-05;
        float _2737 = (-1.0) - _2736;
        float _2739 = _2736 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2735 > _2739) || ((_2735 < _2737) || ((_2734 > _2739) || ((_2734 < _2737) || ((_2733 < _2737) || (_2733 > _2739))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2857 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2735, cbModelParam._m0[17u].z, fma(_2734, cbModelParam._m0[17u].y, _2733 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2735, cbModelParam._m0[18u].z, fma(_2734, cbModelParam._m0[18u].y, _2733 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2735, cbModelParam._m0[19u].z, fma(_2734, cbModelParam._m0[19u].y, _2733 * cbModelParam._m0[19u].x))), _1892);
            frontier_phi_22_47_ladder = _2857.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2857.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2857.x * cbModelParam._m0[1u].z;
        }
        _1981 = frontier_phi_22_47_ladder_2;
        _1983 = frontier_phi_22_47_ladder_1;
        _1985 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_992, _993, _994), _1892);
        _1981 = _1965.x * cbModelParam._m0[1u].z;
        _1983 = _1965.y * cbModelParam._m0[1u].z;
        _1985 = _1965.z * cbModelParam._m0[1u].z;
    }
    float _1998 = (((_1019 * _968) + _1020) * _984) * ((cbModelParam._m0[1u].w * (_1981 - _1883)) + _1883);
    float _2000 = (((_1019 * _970) + _1020) * _984) * ((cbModelParam._m0[1u].w * (_1983 - _1885)) + _1885);
    float _2002 = (((_1019 * _971) + _1020) * _984) * ((cbModelParam._m0[1u].w * (_1985 - _1887)) + _1887);
    float _2005 = fma(_2002, cbSceneParam._m0[89u].z, fma(_2000, cbSceneParam._m0[89u].y, _1998 * cbSceneParam._m0[89u].x));
    float _2008 = fma(_2002, cbSceneParam._m0[90u].z, fma(_2000, cbSceneParam._m0[90u].y, _1998 * cbSceneParam._m0[90u].x));
    float _2011 = fma(_2002, cbSceneParam._m0[91u].z, fma(_2000, cbSceneParam._m0[91u].y, _1998 * cbSceneParam._m0[91u].x));
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2058 = _2045 / _2057;
    float _2059 = _2049 / _2057;
    float _2060 = _2053 / _2057;
    float _2207;
    float _2208;
    float _2209;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2087 = ((uint(_2060 > cbSceneParam._m0[59u].y) + uint(_2060 > cbSceneParam._m0[59u].x)) + uint(_2060 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2088 = _2087 + 43u;
        uint _2096 = _2087 + 44u;
        uint _2104 = _2087 + 45u;
        uint _2112 = _2087 + 46u;
        float _2123 = fma(_2057, cbSceneParam._m0[_2088].w, fma(_2053, cbSceneParam._m0[_2088].z, fma(_2049, cbSceneParam._m0[_2088].y, _2045 * cbSceneParam._m0[_2088].x)));
        float _2127 = fma(_2057, cbSceneParam._m0[_2096].w, fma(_2053, cbSceneParam._m0[_2096].z, fma(_2049, cbSceneParam._m0[_2096].y, _2045 * cbSceneParam._m0[_2096].x)));
        float _2135 = fma(_2057, cbSceneParam._m0[_2112].w, fma(_2053, cbSceneParam._m0[_2112].z, fma(_2049, cbSceneParam._m0[_2112].y, _2045 * cbSceneParam._m0[_2112].x)));
        float _2140 = cbSceneParam._m0[33u].z * _2135;
        float _2142 = cbSceneParam._m0[33u].w * _2135;
        float _2145 = fma(_2057, cbSceneParam._m0[_2104].w, fma(_2053, cbSceneParam._m0[_2104].z, fma(_2049, cbSceneParam._m0[_2104].y, _2045 * cbSceneParam._m0[_2104].x))) / _2135;
        float _2193 = (cbSceneParam._m0[33u].x - sqrt(((_2059 * _2059) + (_2058 * _2058)) + (_2060 * _2060))) * cbSceneParam._m0[33u].y;
        float _4510 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2200 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 + _2123) / _2135, (_2142 + _2127) / _2135), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 + _2123) / _2135, (_2127 - _2140) / _2135), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2123 - _2140) / _2135, (_2127 - _2142) / _2135), _2145), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2123 - _2142) / _2135, (_2140 + _2127) / _2135), _2145), 0.0)).x), vec4(0.25)));
        _2207 = 1.0 - (_2200 * cbSceneParam._m0[34u].x);
        _2208 = 1.0 - (_2200 * cbSceneParam._m0[34u].y);
        _2209 = 1.0 - (_2200 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2207 = 1.0;
        _2208 = 1.0;
        _2209 = 1.0;
    }
    float _2273;
    float _2275;
    float _2277;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2261 = fma(_2057, cbSceneParam._m0[63u].w, fma(_2053, cbSceneParam._m0[63u].z, fma(_2049, cbSceneParam._m0[63u].y, _2045 * cbSceneParam._m0[63u].x)));
        float _2262 = fma(_2057, cbSceneParam._m0[60u].w, fma(_2053, cbSceneParam._m0[60u].z, fma(_2049, cbSceneParam._m0[60u].y, _2045 * cbSceneParam._m0[60u].x))) / _2261;
        float _2263 = fma(_2057, cbSceneParam._m0[61u].w, fma(_2053, cbSceneParam._m0[61u].z, fma(_2049, cbSceneParam._m0[61u].y, _2045 * cbSceneParam._m0[61u].x))) / _2261;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2262 >= cbSceneParam._m0[64u].x) && (_2263 >= cbSceneParam._m0[64u].y)) && (_2262 <= cbSceneParam._m0[64u].z)) && (_2263 <= cbSceneParam._m0[64u].w))
        {
            float _2401 = fma(_2057, cbSceneParam._m0[62u].w, fma(_2053, cbSceneParam._m0[62u].z, fma(_2049, cbSceneParam._m0[62u].y, _2045 * cbSceneParam._m0[62u].x))) / _2261;
            float _2405 = isnan(cbSceneParam._m0[41u].w) ? _2401 : (isnan(_2401) ? cbSceneParam._m0[41u].w : max(_2401, cbSceneParam._m0[41u].w));
            float _2448 = (cbSceneParam._m0[33u].x - sqrt(((_2059 * _2059) + (_2058 * _2058)) + (_2060 * _2060))) * cbSceneParam._m0[33u].y;
            float _4526 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
            float _2455 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2262, cbSceneParam._m0[33u].w + _2263), _2405), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2262, _2263 - cbSceneParam._m0[33u].z), _2405), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2262 - cbSceneParam._m0[33u].z, _2263 - cbSceneParam._m0[33u].w), _2405), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2262 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2263), _2405), 0.0)).x), vec4(0.25)));
            float _2459 = 1.0 - (_2455 * cbSceneParam._m0[34u].x);
            float _2460 = 1.0 - (_2455 * cbSceneParam._m0[34u].y);
            float _2461 = 1.0 - (_2455 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2461) ? _2209 : (isnan(_2209) ? _2461 : min(_2209, _2461));
            frontier_phi_34_33_ladder_1 = isnan(_2460) ? _2208 : (isnan(_2208) ? _2460 : min(_2208, _2460));
            frontier_phi_34_33_ladder_2 = isnan(_2459) ? _2207 : (isnan(_2207) ? _2459 : min(_2207, _2459));
        }
        else
        {
            frontier_phi_34_33_ladder = _2209;
            frontier_phi_34_33_ladder_1 = _2208;
            frontier_phi_34_33_ladder_2 = _2207;
        }
        _2273 = frontier_phi_34_33_ladder_2;
        _2275 = frontier_phi_34_33_ladder_1;
        _2277 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2273 = _2207;
        _2275 = _2208;
        _2277 = _2209;
    }
    uvec4 _2282 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2284 = _2282.x * 14u;
    uint _2285 = _2284 + 13u;
    float _2292 = _984 + (-1.0);
    float _2297 = (cbLight._m0[_2285].x * _2292) + 1.0;
    float _2298 = (cbLight._m0[_2285].y * _2292) + 1.0;
    float _2299 = (cbLight._m0[_2285].z * _2292) + 1.0;
    float _2300 = (cbLight._m0[_2285].w * _2292) + 1.0;
    uint _2301 = _2284 + 5u;
    float _2307 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
    uint _2311 = _2284 + 4u;
    float _2320 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
    uint _2324 = _2284 | 1u;
    float _2335 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_819, _820, _821));
    float _2338 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_819, _820, _821));
    float _4562 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _4573 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2343 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * 0.3183098733425140380859375;
    float _2345 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * 0.3183098733425140380859375;
    float _2352 = ((cbLight._m0[_2301].x * _2307) * _2345) + (((cbLight._m0[_2311].x * _2273) * _2320) * _2343);
    float _2353 = ((_2307 * cbLight._m0[_2301].y) * _2345) + (((cbLight._m0[_2311].y * _2275) * _2320) * _2343);
    float _2354 = ((_2307 * cbLight._m0[_2301].z) * _2345) + (((cbLight._m0[_2311].z * _2277) * _2320) * _2343);
    uvec4 _2358 = floatBitsToUint(cbLight._m0[_2284 + 12u]);
    bool _2360 = _2358.x == 0u;
    float _2462;
    float _2464;
    float _2466;
    if (_2360)
    {
        _2462 = _2352;
        _2464 = _2353;
        _2466 = _2354;
    }
    else
    {
        uint _2470 = _2284 + 6u;
        float _2486 = (dot(vec3(cbLight._m0[_2284 + 2u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2487 = _2486 * _2486;
        float _4584 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2488 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2489 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2462 = (((cbLight._m0[_2470].x * 0.3183098733425140380859375) * _2488) * _2489) + _2352;
        _2464 = (((cbLight._m0[_2470].y * 0.3183098733425140380859375) * _2488) * _2489) + _2353;
        _2466 = (((cbLight._m0[_2470].z * 0.3183098733425140380859375) * _2488) * _2489) + _2354;
    }
    bool _2469 = _2358.y == 0u;
    float _2524;
    float _2526;
    float _2528;
    if (_2469)
    {
        _2524 = _2462;
        _2526 = _2464;
        _2528 = _2466;
    }
    else
    {
        uint _2697 = _2284 + 7u;
        float _2713 = (dot(vec3(cbLight._m0[_2284 + 3u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2714 = _2713 * _2713;
        float _4600 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2715 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2716 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2524 = (((cbLight._m0[_2697].x * 0.3183098733425140380859375) * _2715) * _2716) + _2462;
        _2526 = (((cbLight._m0[_2697].y * 0.3183098733425140380859375) * _2715) * _2716) + _2464;
        _2528 = (((cbLight._m0[_2697].z * 0.3183098733425140380859375) * _2715) * _2716) + _2466;
    }
    uint _2531 = _2284 + 8u;
    float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _822) * 0.949999988079071044921875);
    float _2545 = _2544 * _2544;
    float _2546 = cbLight._m0[_2284].x + _898;
    float _2547 = cbLight._m0[_2284].y + _899;
    float _2548 = cbLight._m0[_2284].z + _900;
    float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
    float _2553 = _2552 * _2546;
    float _2554 = _2552 * _2547;
    float _2555 = _2552 * _2548;
    float _2556 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2284].xyz));
    float _4616 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
    float _4627 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _2560 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _2561 = dot(vec3(_819, _820, _821), vec3(_2553, _2554, _2555));
    float _4638 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2565 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2553, _2554, _2555));
    float _4649 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2569 = _2545 * _2545;
    float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
    float _2581 = exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0);
    float _2582 = 0.959999978542327880859375 - _965;
    float _2584 = 0.959999978542327880859375 - _966;
    float _2585 = 0.959999978542327880859375 - _967;
    float _2592 = 1.0 - _2545;
    float _2603 = (0.5 / (((_2560 * ((_2559 * _2592) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2560 * _2592) + _2545) * _2559))) * _2559;
    float _4660 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2605 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
    uint _2619 = _2284 + 9u;
    float _2630 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _822) * 0.949999988079071044921875);
    float _2631 = _2630 * _2630;
    float _2632 = cbLight._m0[_2324].x + _898;
    float _2633 = cbLight._m0[_2324].y + _899;
    float _2634 = cbLight._m0[_2324].z + _900;
    float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
    float _2639 = _2638 * _2632;
    float _2640 = _2638 * _2633;
    float _2641 = _2638 * _2634;
    float _2642 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2324].xyz));
    float _4671 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2645 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
    float _2646 = dot(vec3(_819, _820, _821), vec3(_2639, _2640, _2641));
    float _4682 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2649 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _2650 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2639, _2640, _2641));
    float _4693 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2654 = _2631 * _2631;
    float _2658 = ((_2649 * _2649) * (_2654 + (-1.0))) + 1.0;
    float _2665 = exp2(log2(1.0 - (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) * 5.0);
    float _2672 = 1.0 - _2631;
    float _2682 = (0.5 / (((_2560 * ((_2645 * _2672) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2560 * _2672) + _2631) * _2645))) * _2645;
    float _4704 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
    float _2684 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2654 / ((_2658 * _2658) * 3.141590118408203125));
    float _2694 = (((((_2665 * _2582) + _968) * cbLight._m0[_2619].x) * _2684) * _2307) + ((((cbLight._m0[_2531].x * _2273) * ((_2581 * _2582) + _968)) * _2605) * _2320);
    float _2695 = (((((_2665 * _2584) + _970) * cbLight._m0[_2619].y) * _2684) * _2307) + ((((cbLight._m0[_2531].y * _2275) * ((_2581 * _2584) + _970)) * _2605) * _2320);
    float _2696 = (((((_2665 * _2585) + _971) * cbLight._m0[_2619].z) * _2684) * _2307) + ((((cbLight._m0[_2531].z * _2277) * ((_2581 * _2585) + _971)) * _2605) * _2320);
    float _2752;
    float _2754;
    float _2756;
    if (_2360)
    {
        _2752 = _2694;
        _2754 = _2695;
        _2756 = _2696;
    }
    else
    {
        uint _2758 = _2284 + 2u;
        uint _2762 = _2284 + 10u;
        float _2776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2758].w)) * _822) * 0.949999988079071044921875);
        float _2777 = _2776 * _2776;
        float _2778 = cbLight._m0[_2758].x + _898;
        float _2779 = cbLight._m0[_2758].y + _899;
        float _2780 = cbLight._m0[_2758].z + _900;
        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
        float _2785 = _2784 * _2778;
        float _2786 = _2784 * _2779;
        float _2787 = _2784 * _2780;
        float _2788 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2758].xyz));
        float _4715 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2791 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2792 = dot(vec3(_819, _820, _821), vec3(_2785, _2786, _2787));
        float _4726 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2795 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2796 = dot(vec3(cbLight._m0[_2758].xyz), vec3(_2785, _2786, _2787));
        float _4737 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2800 = _2777 * _2777;
        float _2804 = ((_2795 * _2795) * (_2800 + (-1.0))) + 1.0;
        float _2811 = exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0);
        float _2818 = 1.0 - _2777;
        float _2828 = (0.5 / (((_2560 * ((_2791 * _2818) + _2777)) + 9.9999999392252902907785028219223e-09) + (((_2560 * _2818) + _2777) * _2791))) * _2791;
        float _4748 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2830 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2800 / ((_2804 * _2804) * 3.141590118408203125));
        float _2831 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2752 = (((((_2811 * _2582) + _968) * cbLight._m0[_2762].x) * _2830) * _2831) + _2694;
        _2754 = (((((_2811 * _2584) + _970) * cbLight._m0[_2762].y) * _2830) * _2831) + _2695;
        _2756 = (((((_2811 * _2585) + _971) * cbLight._m0[_2762].z) * _2830) * _2831) + _2696;
    }
    float _2862;
    float _2864;
    float _2866;
    if (_2469)
    {
        _2862 = _2752;
        _2864 = _2754;
        _2866 = _2756;
    }
    else
    {
        uint _2873 = _2284 + 3u;
        uint _2877 = _2284 + 11u;
        float _2891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2873].w)) * _822) * 0.949999988079071044921875);
        float _2892 = _2891 * _2891;
        float _2893 = cbLight._m0[_2873].x + _898;
        float _2894 = cbLight._m0[_2873].y + _899;
        float _2895 = cbLight._m0[_2873].z + _900;
        float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
        float _2900 = _2899 * _2893;
        float _2901 = _2899 * _2894;
        float _2902 = _2899 * _2895;
        float _2903 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2873].xyz));
        float _4764 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2906 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2907 = dot(vec3(_819, _820, _821), vec3(_2900, _2901, _2902));
        float _4775 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2910 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2911 = dot(vec3(cbLight._m0[_2873].xyz), vec3(_2900, _2901, _2902));
        float _4786 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2915 = _2892 * _2892;
        float _2919 = ((_2910 * _2910) * (_2915 + (-1.0))) + 1.0;
        float _2926 = exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0);
        float _2933 = 1.0 - _2892;
        float _2943 = (0.5 / (((_2560 * ((_2906 * _2933) + _2892)) + 9.9999999392252902907785028219223e-09) + (((_2560 * _2933) + _2892) * _2906))) * _2906;
        float _4797 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2945 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2915 / ((_2919 * _2919) * 3.141590118408203125));
        float _2946 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2862 = (((((_2926 * _2582) + _968) * cbLight._m0[_2877].x) * _2945) * _2946) + _2752;
        _2864 = (((((_2926 * _2584) + _970) * cbLight._m0[_2877].y) * _2945) * _2946) + _2754;
        _2866 = (((((_2926 * _2585) + _971) * cbLight._m0[_2877].z) * _2945) * _2946) + _2756;
    }
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    if (_2282.y == 0u)
    {
        uvec4 _2967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2968 = _2967.x;
        uint _2979 = uint((float(_2967.y) * floor(float(uint(cbSceneParam._m0[85u].y * _907) / _2968))) + floor(float(uint(cbSceneParam._m0[85u].x * _906) / _2968)));
        float _2989 = (log2(_2060 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2990 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        uint _2993 = uint(isnan(14.0) ? _2990 : (isnan(_2990) ? 14.0 : min(_2990, 14.0)));
        uvec4 _2998 = texelFetch(g_lightClusterGridBuffer, int(((_2993 << 2u) + (_2979 << 6u)) >> 2u));
        uint _2999 = _2998.x;
        uint _3000 = _2967.z;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        if (((((1u << ((_3000 >> 4u) & 15u)) + 4294967295u) & _2999) == 0u) || ((_3000 & 240u) == 0u))
        {
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
        }
        else
        {
            float _3080;
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            uint _3229 = 0u;
            uint _3238;
            bool _3239;
            for (;;)
            {
                _3238 = texelFetch(g_lightClassification, int((((_2993 << 5u) + (_2979 << 9u)) + (_3229 << 2u)) >> 2u)).x;
                _3239 = _3238 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3239)
                {
                    frontier_phi_66_pred = _3228;
                    frontier_phi_66_pred_1 = _3227;
                    frontier_phi_66_pred_2 = _3226;
                    frontier_phi_66_pred_3 = _3225;
                    frontier_phi_66_pred_4 = _3224;
                    frontier_phi_66_pred_5 = _3223;
                }
                else
                {
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    uint _3353;
                    _3347 = _3223;
                    _3348 = _3224;
                    _3349 = _3225;
                    _3350 = _3226;
                    _3351 = _3227;
                    _3352 = _3228;
                    _3353 = _3238;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    for (;;)
                    {
                        uint _3357 = uint(findLSB(_3353)) + (_3229 << 5u);
                        uint _3354 = (_3353 + 4294967295u) & _3353;
                        uint _3359 = _3357 * 48u;
                        vec4 _3373 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 3u)).x));
                        uint _3379 = (_3357 * 48u) + 4u;
                        vec4 _3392 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 3u)).x));
                        uint _3398 = (_3357 * 48u) + 8u;
                        vec3 _3409 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3398)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 2u)).x));
                        float _3413 = _3373.x - _2058;
                        float _3414 = _3373.y - _2059;
                        float _3415 = _3373.z - _2060;
                        float _3416 = dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415));
                        float _3419 = inversesqrt(_3416);
                        float _3420 = _3419 * _3413;
                        float _3421 = _3419 * _3414;
                        float _3422 = _3419 * _3415;
                        float _3423 = dot(vec3(_925, _928, _931), vec3(_3420, _3421, _3422));
                        float _3428 = 1.0 - (_3416 * _3373.w);
                        float _4823 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3429 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3430 = sqrt(_3416) * _3392.w;
                        float _3433 = 1.39999997615814208984375 / (_3430 + 1.39999997615814208984375);
                        float _3434 = _3433 * _3433;
                        float _3437 = ((1.0 - _3434) * _3423) + _3434;
                        float _3440 = _3430 * _3430;
                        float _3444 = ((isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0))) * _3429) / ((_3440 * 0.699999988079071044921875) + 1.0);
                        float _3448 = (-0.0) - _2058;
                        float _3449 = (-0.0) - _2059;
                        float _3450 = (-0.0) - _2060;
                        float _3454 = inversesqrt(dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450)));
                        float _3455 = _3454 * _3448;
                        float _3456 = _3454 * _3449;
                        float _3457 = _3454 * _3450;
                        float _3464 = exp2(log2(1.0 / ((_3440 * 3.5) + 5.0)) * 0.25);
                        float _3465 = 1.0 - _1000;
                        float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                        float _3473 = _3472 * _3472;
                        float _3474 = _3473 * _3473;
                        float _3475 = _3455 + _3420;
                        float _3476 = _3456 + _3421;
                        float _3477 = _3457 + _3422;
                        float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                        float _3485 = dot(vec3(_925, _928, _931), vec3(_3455, _3456, _3457));
                        float _4839 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3488 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                        float _3489 = dot(vec3(_925, _928, _931), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                        float _4850 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3492 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                        float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                        float _3497 = _3433 * _3473;
                        float _3498 = _3497 * _3497;
                        float _3501 = ((1.0 - _3498) * _3423) + _3498;
                        float _4861 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3502 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                        float _3503 = 1.0 - _3473;
                        float _3513 = (0.5 / (((_3502 * ((_3488 * _3503) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3502 * _3503) + _3473) * _3488))) * _3502;
                        float _4872 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3524 = (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) / ((_3496 * _3496) * ((_3440 * 2.1991131305694580078125) + 3.141590118408203125))) * _3429;
                        _3282 = (_3444 * _3392.x) + _3350;
                        _3283 = (_3444 * _3392.y) + _3351;
                        _3284 = (_3444 * _3392.z) + _3352;
                        _3279 = (_3524 * _3409.x) + _3347;
                        _3280 = (_3524 * _3409.y) + _3348;
                        _3281 = (_3524 * _3409.z) + _3349;
                        if (_3354 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3347 = _3279;
                            _3348 = _3280;
                            _3349 = _3281;
                            _3350 = _3282;
                            _3351 = _3283;
                            _3352 = _3284;
                            _3353 = _3354;
                        }
                    }
                    frontier_phi_66_pred = _3284;
                    frontier_phi_66_pred_1 = _3283;
                    frontier_phi_66_pred_2 = _3282;
                    frontier_phi_66_pred_3 = _3281;
                    frontier_phi_66_pred_4 = _3280;
                    frontier_phi_66_pred_5 = _3279;
                }
                _3090 = frontier_phi_66_pred;
                _3088 = frontier_phi_66_pred_1;
                _3086 = frontier_phi_66_pred_2;
                _3084 = frontier_phi_66_pred_3;
                _3082 = frontier_phi_66_pred_4;
                _3080 = frontier_phi_66_pred_5;
                uint _3230 = _3229 + 1u;
                if (_3230 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3223 = _3080;
                    _3224 = _3082;
                    _3225 = _3084;
                    _3226 = _3086;
                    _3227 = _3088;
                    _3228 = _3090;
                    _3229 = _3230;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
        }
        uvec4 _3093 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3094 = _3093.z;
        uint _3096 = (_3094 >> 8u) & 15u;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        if (((4294967295u << _3096) & _2999) == 0u)
        {
            _3191 = _3079;
            _3193 = _3081;
            _3195 = _3083;
            _3197 = _3085;
            _3199 = _3087;
            _3201 = _3089;
        }
        else
        {
            float _3216 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
            float _3217 = _3216 * _2058;
            float _3218 = _3216 * _2059;
            float _3219 = _3216 * _2060;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3096 < ((_3094 >> 12u) & 15u))
            {
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3202;
                float _3330 = _3079;
                float _3331 = _3081;
                float _3332 = _3083;
                float _3333 = _3085;
                float _3334 = _3087;
                float _3335 = _3089;
                uint _3336 = _3096;
                uint _3345;
                bool _3346;
                for (;;)
                {
                    _3345 = texelFetch(g_lightClassification, int((((_2993 << 5u) + (_2979 << 9u)) + (_3336 << 2u)) >> 2u)).x;
                    _3346 = _3345 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3346)
                    {
                        frontier_phi_72_pred = _3335;
                        frontier_phi_72_pred_1 = _3334;
                        frontier_phi_72_pred_2 = _3333;
                        frontier_phi_72_pred_3 = _3332;
                        frontier_phi_72_pred_4 = _3331;
                        frontier_phi_72_pred_5 = _3330;
                    }
                    else
                    {
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3542 = _3330;
                        float _3543 = _3331;
                        float _3544 = _3332;
                        float _3545 = _3333;
                        float _3546 = _3334;
                        float _3547 = _3335;
                        uint _3548 = _3345;
                        uint _3549;
                        vec4 _3574;
                        float _3575;
                        vec4 _3590;
                        vec3 _3602;
                        vec4 _3617;
                        vec4 _3633;
                        float _3679;
                        bool _3680;
                        for (;;)
                        {
                            uint _3559 = ((_3336 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3548));
                            _3549 = (_3548 + 4294967295u) & _3548;
                            uint _3561 = _3559 * 40u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            _3575 = _3574.w;
                            uint _3577 = (_3559 * 40u) + 4u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3592 = (_3559 * 40u) + 8u;
                            _3602 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x));
                            uint _3604 = (_3559 * 40u) + 16u;
                            _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3620 = (_3559 * 40u) + 20u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3635 = (_3559 * 40u) + 24u;
                            vec4 _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            uint _3654 = (_3559 * 40u) + 28u;
                            vec4 _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            _3679 = fma(_2060, _3667.z, fma(_2059, _3667.y, _3667.x * _2058)) + _3667.w;
                            _3680 = !((fma(_2060, _3648.z, fma(_2059, _3648.y, _3648.x * _2058)) + _3648.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3680)
                            {
                                float _3707 = _3574.x - _2058;
                                float _3708 = _3574.y - _2059;
                                float _3709 = _3574.z - _2060;
                                float _3710 = dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709));
                                float _3713 = inversesqrt(_3710);
                                float _3714 = _3713 * _3707;
                                float _3715 = _3713 * _3708;
                                float _3716 = _3713 * _3709;
                                float _3720 = 1.0 - (_3710 / (_3575 * _3575));
                                float _4883 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3721 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3725 = sqrt(_3710) * _3590.w;
                                float _3727 = 1.39999997615814208984375 / (_3725 + 1.39999997615814208984375);
                                float _3728 = _3727 * _3727;
                                float _3731 = ((1.0 - _3728) * dot(vec3(_3714, _3715, _3716), vec3(_925, _928, _931))) + _3728;
                                float _3734 = _3725 * _3725;
                                float _3738 = (fma(_2060, _3617.z, fma(_2059, _3617.y, _3617.x * _2058)) + _3617.w) / _3679;
                                float _3739 = (fma(_2060, _3633.z, fma(_2059, _3633.y, _3633.x * _2058)) + _3633.w) / _3679;
                                float _3743 = 1.0 - dot(vec2(_3738, _3739), vec2(_3738, _3739));
                                float _4899 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3744 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                                float _3745 = _3744 * (((isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0))) * _3721) / ((_3734 * 0.699999988079071044921875) + 1.0));
                                float _3757 = exp2(log2(1.0 / ((_3734 * 3.5) + 5.0)) * 0.25);
                                float _3758 = 1.0 - _1000;
                                float _3765 = sqrt(1.0 - ((1.0 - (_3758 * _3758)) * (1.0 - (_3757 * _3757))));
                                float _3766 = _3765 * _3765;
                                float _3767 = _3766 * _3766;
                                float _3768 = _3714 - _3217;
                                float _3769 = _3715 - _3218;
                                float _3770 = _3716 - _3219;
                                float _3774 = inversesqrt(dot(vec3(_3768, _3769, _3770), vec3(_3768, _3769, _3770)));
                                float _3778 = dot(vec3(_925, _928, _931), vec3((-0.0) - _3217, (-0.0) - _3218, (-0.0) - _3219));
                                float _4910 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3781 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                                float _3782 = dot(vec3(_925, _928, _931), vec3(_3774 * _3768, _3774 * _3769, _3774 * _3770));
                                float _4921 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3785 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                                float _3789 = ((_3785 * _3785) * (_3767 + (-1.0))) + 1.0;
                                float _3790 = _3727 * _3766;
                                float _3791 = _3790 * _3790;
                                float _3797 = ((1.0 - _3791) * dot(vec3(_925, _928, _931), vec3(_3714, _3715, _3716))) + _3791;
                                float _4932 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3798 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3799 = 1.0 - _3766;
                                float _3809 = (0.5 / (((_3798 * ((_3781 * _3799) + _3766)) + 9.9999999392252902907785028219223e-09) + (((_3798 * _3799) + _3766) * _3781))) * _3798;
                                float _4943 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3819 = (_3744 * _3721) * (((_3767 * 3.1415927410125732421875) * (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0)))) / ((_3789 * _3789) * ((_3734 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3745 * _3590.y;
                                frontier_phi_78_pred_1 = _3745 * _3590.x;
                                frontier_phi_78_pred_2 = _3819 * _3602.z;
                                frontier_phi_78_pred_3 = _3819 * _3602.y;
                                frontier_phi_78_pred_4 = _3819 * _3602.x;
                                frontier_phi_78_pred_5 = _3745 * _3590.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3827 = frontier_phi_78_pred;
                            _3826 = frontier_phi_78_pred_1;
                            _3825 = frontier_phi_78_pred_2;
                            _3824 = frontier_phi_78_pred_3;
                            _3823 = frontier_phi_78_pred_4;
                            _3828 = frontier_phi_78_pred_5;
                            _3532 = _3826 + _3545;
                            _3533 = _3827 + _3546;
                            _3534 = _3828 + _3547;
                            _3529 = _3823 + _3542;
                            _3530 = _3824 + _3543;
                            _3531 = _3825 + _3544;
                            if (_3549 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3549;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3534;
                        frontier_phi_72_pred_1 = _3533;
                        frontier_phi_72_pred_2 = _3532;
                        frontier_phi_72_pred_3 = _3531;
                        frontier_phi_72_pred_4 = _3530;
                        frontier_phi_72_pred_5 = _3529;
                    }
                    _3202 = frontier_phi_72_pred;
                    _3200 = frontier_phi_72_pred_1;
                    _3198 = frontier_phi_72_pred_2;
                    _3196 = frontier_phi_72_pred_3;
                    _3194 = frontier_phi_72_pred_4;
                    _3192 = frontier_phi_72_pred_5;
                    uint _3337 = _3336 + 1u;
                    if (_3337 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3330 = _3192;
                        _3331 = _3194;
                        _3332 = _3196;
                        _3333 = _3198;
                        _3334 = _3200;
                        _3335 = _3202;
                        _3336 = _3337;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3202;
                frontier_phi_60_61_ladder_1 = _3200;
                frontier_phi_60_61_ladder_2 = _3196;
                frontier_phi_60_61_ladder_3 = _3194;
                frontier_phi_60_61_ladder_4 = _3192;
                frontier_phi_60_61_ladder_5 = _3198;
            }
            else
            {
                frontier_phi_60_61_ladder = _3089;
                frontier_phi_60_61_ladder_1 = _3087;
                frontier_phi_60_61_ladder_2 = _3083;
                frontier_phi_60_61_ladder_3 = _3081;
                frontier_phi_60_61_ladder_4 = _3079;
                frontier_phi_60_61_ladder_5 = _3085;
            }
            _3191 = frontier_phi_60_61_ladder_4;
            _3193 = frontier_phi_60_61_ladder_3;
            _3195 = frontier_phi_60_61_ladder_2;
            _3197 = frontier_phi_60_61_ladder_5;
            _3199 = frontier_phi_60_61_ladder_1;
            _3201 = frontier_phi_60_61_ladder;
        }
        float _3206 = isnan(1.0) ? _984 : (isnan(_984) ? 1.0 : min(_984, 1.0));
        _3012 = (_3206 * _3197) + _2524;
        _3014 = (_3206 * _3199) + _2526;
        _3016 = (_3206 * _3201) + _2528;
        _3018 = ((_3191 * _968) * _3206) + _2862;
        _3020 = ((_3193 * _970) * _3206) + _2864;
        _3022 = ((_3195 * _971) * _3206) + _2866;
    }
    else
    {
        _3012 = _2524;
        _3014 = _2526;
        _3016 = _2528;
        _3018 = _2862;
        _3020 = _2864;
        _3022 = _2866;
    }
    float _4959 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4970 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _4981 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    uint _3042 = _255 + 6u;
    float _3050 = _906 / cbSceneParam._m0[86u].x;
    float _3051 = _907 / cbSceneParam._m0[86u].y;
    vec4 _3065 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3050, _3051, (log2((isnan(cbSceneParam._m0[77u].w) ? _841 : (isnan(_841) ? cbSceneParam._m0[77u].w : min(_841, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3067 = _3065.x;
    float _3068 = _3065.y;
    float _3069 = _3065.z;
    float _3070 = _3065.w;
    float _3141;
    float _3143;
    float _3145;
    float _3147;
    if (_841 > cbSceneParam._m0[78u].w)
    {
        float _3104 = isnan(_841) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _841 : min(cbSceneParam._m0[80u].w, _841));
        float _3105 = _3104 / _841;
        float _3116 = _3105 * _891;
        float _3117 = _892 * _3105;
        float _3118 = (-0.0) - _3117;
        float _3119 = _3105 * _893;
        float _3121 = (cbSceneParam._m0[77u].w * _3118) / _3104;
        float _3122 = _3121 + cbSceneParam._m0[79u].w;
        float _3123 = cbSceneParam._m0[79u].w - _3117;
        float _3129 = sqrt(((_3116 * _3116) + (_3117 * _3117)) + (_3119 * _3119));
        float _3132 = (1.0 - (cbSceneParam._m0[77u].w / _3104)) * _3129;
        float _3137 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3139 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3292;
        if (abs((_3118 - _3121) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3292 = ((((_3122 > 0.0) ? exp2(_3137 * _3122) : (2.0 - exp2(_3139 * _3122))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3132;
        }
        else
        {
            float _3252 = 1.0 / cbSceneParam._m0[80u].x;
            float _3253 = isnan(_3123) ? _3122 : (isnan(_3122) ? _3123 : max(_3122, _3123));
            float _3254 = isnan(_3123) ? _3122 : (isnan(_3122) ? _3123 : min(_3122, _3123));
            float _3263 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : min(_3253, 0.0));
            float _3264 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : min(_3254, 0.0));
            _3292 = ((abs(_3129 / _3118) * cbSceneParam._m0[80u].y) * ((((_3263 - _3264) * 2.0) - ((exp2(_3137 * (isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0)))) - exp2(_3137 * (isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0))))) * _3252)) - ((exp2(_3139 * _3263) - exp2(_3139 * _3264)) * _3252))) + (_3132 * cbSceneParam._m0[80u].z);
        }
        vec4 _3294 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3050, _3051, 1.0), 0.0);
        float _3303 = exp2((_3292 * (-1.44269502162933349609375)) * (1.0 - _3294.w));
        float _3304 = log2(_3303);
        float _3320 = log2(_3070);
        _3141 = (exp2(_3320 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3304 * cbSceneParam._m0[78u].x)) * _3294.x) / cbSceneParam._m0[78u].x)) + _3067;
        _3143 = (exp2(_3320 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3304 * cbSceneParam._m0[78u].y)) * _3294.y) / cbSceneParam._m0[78u].y)) + _3068;
        _3145 = (exp2(_3320 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3304 * cbSceneParam._m0[78u].z)) * _3294.z) / cbSceneParam._m0[78u].z)) + _3069;
        _3147 = _3303 * _3070;
    }
    else
    {
        _3141 = _3067;
        _3143 = _3068;
        _3145 = _3069;
        _3147 = _3070;
    }
    float _3159 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3160 = _3159 == 3.0;
    float _3161 = log2(_3147);
    float _3168 = exp2(_3161 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0))) * (_3012 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _984))) + ((_3018 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _3169 = exp2(_3161 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0))) * (_3014 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _984))) + ((_3020 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _3170 = exp2(_3161 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0))) * (_3016 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _984))) + ((_3022 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _3179 = (_3159 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3179 * (_3160 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3141)));
    SV_Target.y = _3179 * (_3160 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3143)));
    SV_Target.z = _3179 * (_3160 ? _3170 : (_3170 + (cbSceneParam._m0[72u].w * _3145)));
    SV_Target.w = cbInstanceData._m0[_3042].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3042].w;
}


