#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1217;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3830 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3841 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3852 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _426 = _424.x;
    float _438 = dot(vec4(_426, _424.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _455 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_426 - _438) * cbMtdParam._m0[23u].w) + _438) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3863 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _466 = (_324.x * cbMtdParam._m0[9u].x) * ((_456 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355);
    float _467 = (_324.y * cbMtdParam._m0[9u].y) * ((_456 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356);
    float _468 = (_324.z * cbMtdParam._m0[9u].z) * ((_456 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357);
    float _472 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _466;
    float _475 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _467;
    float _478 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _468;
    float _486 = (((_466 - _472) * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) + _472) * 4.55000019073486328125;
    float _488 = (((_467 - _475) * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) + _475) * 4.55000019073486328125;
    float _490 = (((_468 - _478) * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) + _478) * 4.55000019073486328125;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _549 = _545.z;
    float _558 = ((_528.z - _549) * _456) + _549;
    float _561 = ((((_528.x - _547) * _456) + _547) * 2.0) + (-1.0);
    float _562 = ((((_528.y - _548) * _456) + _548) * 2.0) + (-1.0);
    float _563 = dot(vec2(_561, _562), vec2(_561, _562));
    float _3874 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _602 = (_561 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_503.x * 2.0) + (-1.0)))) + (((_590.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _603 = (_562 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_503.y * 2.0) + (-1.0)))) + (((_590.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _631 = _629.x;
    float _648 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _287) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _288) + cbTextureTilingScale._m0[9u].w)).x - _631) * _456) + _631;
    float _652 = ((_615.x - _648) * cbMtdParam._m0[19u].z) + _648;
    float _657 = (((_503.z - _558) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _558;
    float _661 = ((_590.z - _657) * cbMtdParam._m0[19u].w) + _657;
    float _663 = cbMtdParam._m0[22u].x + _590.w;
    float _666 = fma(_568, _234 * NORMAL.x, fma(_603, _241 * TANGENT.x, (_227 * _219) * _602));
    float _669 = fma(_568, _234 * NORMAL.y, fma(_603, _241 * TANGENT.y, (_227 * _220) * _602));
    float _672 = fma(_568, _234 * NORMAL.z, fma(_603, _241 * TANGENT.z, (_227 * _221) * _602));
    float _676 = inversesqrt(dot(vec3(_666, _669, _672), vec3(_666, _669, _672)));
    float _677 = _676 * _666;
    float _678 = _676 * _669;
    float _679 = _676 * _672;
    float _3885 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _680 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3907 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3918 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3929 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3940 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _685 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _699 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _750 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _740);
    float _751 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _740);
    float _752 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _740);
    float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
    float _757 = _750 * _756;
    float _758 = _751 * _756;
    float _759 = _752 * _756;
    float _765 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _766 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _784 = fma(_679, cbSceneParam._m0[5u].z, fma(_678, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _677));
    float _787 = fma(_679, cbSceneParam._m0[6u].z, fma(_678, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _677));
    float _790 = fma(_679, cbSceneParam._m0[7u].z, fma(_678, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _677));
    uint _804 = (_268 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _810 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_804].x;
    float _811 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_804].y;
    float _812 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_804].z;
    float _3951 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _816 = 1.0 - _685;
    float _817 = _813 * _816;
    float _818 = _814 * _816;
    float _819 = _815 * _816;
    float _824 = (_813 + (-0.039999999105930328369140625)) * _685;
    float _825 = (_814 + (-0.039999999105930328369140625)) * _685;
    float _826 = (_815 + (-0.039999999105930328369140625)) * _685;
    float _827 = _824 + 0.039999999105930328369140625;
    float _829 = _825 + 0.039999999105930328369140625;
    float _830 = _826 + 0.039999999105930328369140625;
    vec4 _839 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _765, cbSceneParam._m0[86u].y * _766));
    float _843 = ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * TEXCOORD_5.w) * _839.x;
    float _844 = dot(vec3(_677, _678, _679), vec3(_757, _758, _759));
    float _847 = _844 * 2.0;
    float _851 = (_847 * _677) - _757;
    float _852 = (_847 * _678) - _758;
    float _853 = (_847 * _679) - _759;
    float _857 = abs(dot(vec3(_757, _758, _759), vec3(_677, _678, _679)));
    float _3984 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _859 = sqrt(_680);
    float _872 = exp2((_859 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_859 * 3.0));
    float _878 = (1.0 - _872) * ((_859 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _879 = _872 * _859;
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1216;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _941 = fma(_915, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _907));
        float _945 = fma(_915, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _907));
        float _949 = fma(_915, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _907));
        float _974 = _907 + _677;
        float _975 = _911 + _678;
        float _976 = _915 + _679;
        float _986 = fma(_976, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974)) - _941;
        float _987 = fma(_976, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974)) - _945;
        float _988 = fma(_976, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974)) - _949;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_941 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_945 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[34u].z) + ((((((_949 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1044 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1010.x + (-0.5));
        float _1046 = _1044 * (_1010.y + (-0.5));
        float _1047 = _1044 * (_1010.z + (-0.5));
        float _1054 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1017.x + (-0.5));
        float _1056 = _1054 * (_1017.y + (-0.5));
        float _1057 = _1054 * (_1017.z + (-0.5));
        float _1064 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1024.x + (-0.5));
        float _1066 = _1064 * (_1024.y + (-0.5));
        float _1067 = _1064 * (_1024.z + (-0.5));
        float _1074 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1031.x + (-0.5));
        float _1076 = _1074 * (_1031.y + (-0.5));
        float _1077 = _1074 * (_1031.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1098 = (dot(vec3(_677, _678, _679), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1108 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _4032 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1110 + 1.0))) + _1115) * _1078;
        float _1125 = _1046 * 0.5;
        float _1126 = _1056 * 0.5;
        float _1127 = _1066 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_677, _678, _679), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _4065 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1152 + 1.0))) + _1157) * _1079;
        float _1167 = _1047 * 0.5;
        float _1168 = _1057 * 0.5;
        float _1169 = _1067 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_677, _678, _679), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _4098 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1194 + 1.0))) + _1199) * _1080;
        _1216 = _1047;
        _1218 = _1046;
        _1219 = _1045;
        _1220 = _1057;
        _1221 = _1056;
        _1222 = _1055;
        _1223 = _1067;
        _1224 = _1066;
        _1225 = _1065;
        _1226 = _1080;
        _1227 = _1079;
        _1228 = _1078;
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _1217;
        _1218 = _1217;
        _1219 = _1217;
        _1220 = _1217;
        _1221 = _1217;
        _1222 = _1217;
        _1223 = _1217;
        _1224 = _1217;
        _1225 = _1217;
        _1226 = _1217;
        _1227 = _1217;
        _1228 = _1217;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
    }
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1256 = fma(_915, cbModelParam._m0[30u].z, fma(_911, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _907));
        float _1260 = fma(_915, cbModelParam._m0[31u].z, fma(_911, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _907));
        float _1264 = fma(_915, cbModelParam._m0[32u].z, fma(_911, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _907));
        float _1287 = _907 + _677;
        float _1288 = _911 + _678;
        float _1289 = _915 + _679;
        float _1299 = fma(_1289, cbModelParam._m0[30u].z, fma(_1288, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1287)) - _1256;
        float _1300 = fma(_1289, cbModelParam._m0[31u].z, fma(_1288, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1287)) - _1260;
        float _1301 = fma(_1289, cbModelParam._m0[32u].z, fma(_1288, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1287)) - _1264;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1318 = ((_1305 * _1299) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1256 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1300) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1260 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1305 * _1301) / cbModelParam._m0[35u].z) + ((((((_1264 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1355 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1322.x + (-0.5));
        float _1357 = _1355 * (_1322.y + (-0.5));
        float _1358 = _1355 * (_1322.z + (-0.5));
        float _1365 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1329.x + (-0.5));
        float _1367 = _1365 * (_1329.y + (-0.5));
        float _1368 = _1365 * (_1329.z + (-0.5));
        float _1375 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1336.x + (-0.5));
        float _1377 = _1375 * (_1336.y + (-0.5));
        float _1378 = _1375 * (_1336.z + (-0.5));
        float _1385 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1343.x + (-0.5));
        float _1387 = _1385 * (_1343.y + (-0.5));
        float _1388 = _1385 * (_1343.z + (-0.5));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = _1356 * 0.5;
        float _1393 = _1366 * 0.5;
        float _1394 = _1376 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_677, _678, _679), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4161 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1419 + 1.0))) + _1424) * _1389;
        float _1434 = _1357 * 0.5;
        float _1435 = _1367 * 0.5;
        float _1436 = _1377 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_677, _678, _679), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4194 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1461 + 1.0))) + _1466) * _1390;
        float _1476 = _1358 * 0.5;
        float _1477 = _1368 * 0.5;
        float _1478 = _1378 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_677, _678, _679), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4227 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1503 + 1.0))) + _1508) * _1391;
        _1525 = _1358;
        _1526 = _1357;
        _1527 = _1356;
        _1528 = _1368;
        _1529 = _1367;
        _1530 = _1366;
        _1531 = _1378;
        _1532 = _1377;
        _1533 = _1376;
        _1534 = _1391;
        _1535 = _1390;
        _1536 = _1389;
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
    }
    else
    {
        _1525 = _1217;
        _1526 = _1217;
        _1527 = _1217;
        _1528 = _1217;
        _1529 = _1217;
        _1530 = _1217;
        _1531 = _1217;
        _1532 = _1217;
        _1533 = _1217;
        _1534 = _1217;
        _1535 = _1217;
        _1536 = _1217;
        _1537 = 0.0;
        _1538 = 0.0;
        _1539 = 0.0;
    }
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1229)) + _1229;
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1230)) + _1230;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1231)) + _1231;
    float _1572 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1550, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1550, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1550, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1549));
    float _1593 = _851 * 0.5;
    float _1594 = _852 * 0.5;
    float _1595 = _853 * 0.5;
    float _1596 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1599 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1602 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1636;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1609 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1216, _1220, _1223, _1226));
        float _1613 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1617 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1624 = dot(vec4(cbModelParam._m0[39u]), vec4(_1593, _1594, _1595, 1.0));
        _1636 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1624) ? 0.0 : (isnan(0.0) ? _1624 : max(0.0, _1624))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1636 = 1.0;
    }
    float _1647;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1638 = dot(vec4(cbModelParam._m0[40u]), vec4(_1593, _1594, _1595, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1651 = (_1647 * cbModelParam._m0[1u].x) + (_1636 * (1.0 - cbModelParam._m0[1u].x));
    float _1661 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _680);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1661 : min(cbModelParam._m0[25u].z, _1661));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1711 = fma(_915, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907)) + cbModelParam._m0[13u].w;
        float _1715 = fma(_915, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907)) + cbModelParam._m0[14u].w;
        float _1719 = fma(_915, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907)) + cbModelParam._m0[15u].w;
        float _1722 = fma(_853, cbModelParam._m0[13u].z, fma(_852, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _851));
        float _1725 = fma(_853, cbModelParam._m0[14u].z, fma(_852, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _851));
        float _1728 = fma(_853, cbModelParam._m0[15u].z, fma(_852, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _851));
        float _1756;
        if (_1722 > 0.0)
        {
            _1756 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1756 = frontier_phi_14_12_ladder;
        }
        float _1929;
        if (_1725 > 0.0)
        {
            _1929 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1929 = frontier_phi_23_19_ladder;
        }
        float _2224;
        if (_1728 > 0.0)
        {
            _2224 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2224 = frontier_phi_35_30_ladder;
        }
        float _2226 = isnan(_1929) ? _1756 : (isnan(_1756) ? _1929 : min(_1756, _1929));
        float _2227 = isnan(_2224) ? _2226 : (isnan(_2226) ? _2224 : min(_2226, _2224));
        float _2231 = (_2227 * _1722) + _1711;
        float _2232 = (_2227 * _1725) + _1715;
        float _2233 = (_2227 * _1728) + _1719;
        float _2234 = _2227 * 9.9999997473787516355514526367188e-05;
        float _2236 = (-1.0) - _2234;
        float _2238 = _2234 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2233 > _2238) || ((_2233 < _2236) || ((_2232 > _2238) || ((_2232 < _2236) || ((_2231 < _2236) || (_2231 > _2238))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2233, cbModelParam._m0[9u].z, fma(_2232, cbModelParam._m0[9u].y, _2231 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2233, cbModelParam._m0[10u].z, fma(_2232, cbModelParam._m0[10u].y, _2231 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2233, cbModelParam._m0[11u].z, fma(_2232, cbModelParam._m0[11u].y, _2231 * cbModelParam._m0[11u].x))), _1662);
            frontier_phi_13_35_ladder = _2378.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2378.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2378.x * cbModelParam._m0[1u].y;
        }
        _1744 = frontier_phi_13_35_ladder_2;
        _1746 = frontier_phi_13_35_ladder_1;
        _1748 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_851, _852, _853), _1662);
        _1744 = _1732.x * cbModelParam._m0[1u].y;
        _1746 = _1732.y * cbModelParam._m0[1u].y;
        _1748 = _1732.z * cbModelParam._m0[1u].y;
    }
    float _1752 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _680);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1752 : min(cbModelParam._m0[25u].w, _1752));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1808 = fma(_915, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907)) + cbModelParam._m0[21u].w;
        float _1812 = fma(_915, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907)) + cbModelParam._m0[22u].w;
        float _1816 = fma(_915, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907)) + cbModelParam._m0[23u].w;
        float _1819 = fma(_853, cbModelParam._m0[21u].z, fma(_852, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _851));
        float _1822 = fma(_853, cbModelParam._m0[22u].z, fma(_852, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _851));
        float _1825 = fma(_853, cbModelParam._m0[23u].z, fma(_852, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _851));
        float _1934;
        if (_1819 > 0.0)
        {
            _1934 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1934 = frontier_phi_25_21_ladder;
        }
        float _2251;
        if (_1822 > 0.0)
        {
            _2251 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2251 = frontier_phi_37_32_ladder;
        }
        float _2589;
        if (_1825 > 0.0)
        {
            _2589 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2589 = frontier_phi_47_44_ladder;
        }
        float _2591 = isnan(_2251) ? _1934 : (isnan(_1934) ? _2251 : min(_1934, _2251));
        float _2592 = isnan(_2589) ? _2591 : (isnan(_2591) ? _2589 : min(_2591, _2589));
        float _2596 = (_2592 * _1819) + _1808;
        float _2597 = (_2592 * _1822) + _1812;
        float _2598 = (_2592 * _1825) + _1816;
        float _2599 = _2592 * 9.9999997473787516355514526367188e-05;
        float _2600 = (-1.0) - _2599;
        float _2602 = _2599 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2598 > _2602) || ((_2598 < _2600) || ((_2597 > _2602) || ((_2597 < _2600) || ((_2596 < _2600) || (_2596 > _2602))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2720 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2598, cbModelParam._m0[17u].z, fma(_2597, cbModelParam._m0[17u].y, _2596 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2598, cbModelParam._m0[18u].z, fma(_2597, cbModelParam._m0[18u].y, _2596 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2598, cbModelParam._m0[19u].z, fma(_2597, cbModelParam._m0[19u].y, _2596 * cbModelParam._m0[19u].x))), _1753);
            frontier_phi_22_47_ladder = _2720.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2720.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2720.x * cbModelParam._m0[1u].z;
        }
        _1844 = frontier_phi_22_47_ladder_2;
        _1846 = frontier_phi_22_47_ladder_1;
        _1848 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1828 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_851, _852, _853), _1753);
        _1844 = _1828.x * cbModelParam._m0[1u].z;
        _1846 = _1828.y * cbModelParam._m0[1u].z;
        _1848 = _1828.z * cbModelParam._m0[1u].z;
    }
    float _1861 = (((_878 * _827) + _879) * _843) * ((cbModelParam._m0[1u].w * (_1844 - _1744)) + _1744);
    float _1863 = (((_878 * _829) + _879) * _843) * ((cbModelParam._m0[1u].w * (_1846 - _1746)) + _1746);
    float _1865 = (((_878 * _830) + _879) * _843) * ((cbModelParam._m0[1u].w * (_1848 - _1748)) + _1748);
    float _1868 = fma(_1865, cbSceneParam._m0[89u].z, fma(_1863, cbSceneParam._m0[89u].y, _1861 * cbSceneParam._m0[89u].x));
    float _1871 = fma(_1865, cbSceneParam._m0[90u].z, fma(_1863, cbSceneParam._m0[90u].y, _1861 * cbSceneParam._m0[90u].x));
    float _1874 = fma(_1865, cbSceneParam._m0[91u].z, fma(_1863, cbSceneParam._m0[91u].y, _1861 * cbSceneParam._m0[91u].x));
    float _1908 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1912 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1916 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1920 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1921 = _1908 / _1920;
    float _1922 = _1912 / _1920;
    float _1923 = _1916 / _1920;
    float _2070;
    float _2071;
    float _2072;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1950 = ((uint(_1923 > cbSceneParam._m0[59u].y) + uint(_1923 > cbSceneParam._m0[59u].x)) + uint(_1923 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1951 = _1950 + 43u;
        uint _1959 = _1950 + 44u;
        uint _1967 = _1950 + 45u;
        uint _1975 = _1950 + 46u;
        float _1986 = fma(_1920, cbSceneParam._m0[_1951].w, fma(_1916, cbSceneParam._m0[_1951].z, fma(_1912, cbSceneParam._m0[_1951].y, _1908 * cbSceneParam._m0[_1951].x)));
        float _1990 = fma(_1920, cbSceneParam._m0[_1959].w, fma(_1916, cbSceneParam._m0[_1959].z, fma(_1912, cbSceneParam._m0[_1959].y, _1908 * cbSceneParam._m0[_1959].x)));
        float _1998 = fma(_1920, cbSceneParam._m0[_1975].w, fma(_1916, cbSceneParam._m0[_1975].z, fma(_1912, cbSceneParam._m0[_1975].y, _1908 * cbSceneParam._m0[_1975].x)));
        float _2003 = cbSceneParam._m0[33u].z * _1998;
        float _2005 = cbSceneParam._m0[33u].w * _1998;
        float _2008 = fma(_1920, cbSceneParam._m0[_1967].w, fma(_1916, cbSceneParam._m0[_1967].z, fma(_1912, cbSceneParam._m0[_1967].y, _1908 * cbSceneParam._m0[_1967].x))) / _1998;
        float _2056 = (cbSceneParam._m0[33u].x - sqrt(((_1922 * _1922) + (_1921 * _1921)) + (_1923 * _1923))) * cbSceneParam._m0[33u].y;
        float _4353 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2063 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2003 + _1986) / _1998, (_2005 + _1990) / _1998), _2008), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 + _1986) / _1998, (_1990 - _2003) / _1998), _2008), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1986 - _2003) / _1998, (_1990 - _2005) / _1998), _2008), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1986 - _2005) / _1998, (_2003 + _1990) / _1998), _2008), 0.0)).x), vec4(0.25)));
        _2070 = 1.0 - (_2063 * cbSceneParam._m0[34u].x);
        _2071 = 1.0 - (_2063 * cbSceneParam._m0[34u].y);
        _2072 = 1.0 - (_2063 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2070 = 1.0;
        _2071 = 1.0;
        _2072 = 1.0;
    }
    float _2136;
    float _2138;
    float _2140;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2124 = fma(_1920, cbSceneParam._m0[63u].w, fma(_1916, cbSceneParam._m0[63u].z, fma(_1912, cbSceneParam._m0[63u].y, _1908 * cbSceneParam._m0[63u].x)));
        float _2125 = fma(_1920, cbSceneParam._m0[60u].w, fma(_1916, cbSceneParam._m0[60u].z, fma(_1912, cbSceneParam._m0[60u].y, _1908 * cbSceneParam._m0[60u].x))) / _2124;
        float _2126 = fma(_1920, cbSceneParam._m0[61u].w, fma(_1916, cbSceneParam._m0[61u].z, fma(_1912, cbSceneParam._m0[61u].y, _1908 * cbSceneParam._m0[61u].x))) / _2124;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2125 >= cbSceneParam._m0[64u].x) && (_2126 >= cbSceneParam._m0[64u].y)) && (_2125 <= cbSceneParam._m0[64u].z)) && (_2126 <= cbSceneParam._m0[64u].w))
        {
            float _2264 = fma(_1920, cbSceneParam._m0[62u].w, fma(_1916, cbSceneParam._m0[62u].z, fma(_1912, cbSceneParam._m0[62u].y, _1908 * cbSceneParam._m0[62u].x))) / _2124;
            float _2268 = isnan(cbSceneParam._m0[41u].w) ? _2264 : (isnan(_2264) ? cbSceneParam._m0[41u].w : max(_2264, cbSceneParam._m0[41u].w));
            float _2311 = (cbSceneParam._m0[33u].x - sqrt(((_1922 * _1922) + (_1921 * _1921)) + (_1923 * _1923))) * cbSceneParam._m0[33u].y;
            float _4369 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
            float _2318 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2125, cbSceneParam._m0[33u].w + _2126), _2268), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2125, _2126 - cbSceneParam._m0[33u].z), _2268), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2125 - cbSceneParam._m0[33u].z, _2126 - cbSceneParam._m0[33u].w), _2268), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2125 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2126), _2268), 0.0)).x), vec4(0.25)));
            float _2322 = 1.0 - (_2318 * cbSceneParam._m0[34u].x);
            float _2323 = 1.0 - (_2318 * cbSceneParam._m0[34u].y);
            float _2324 = 1.0 - (_2318 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2324) ? _2072 : (isnan(_2072) ? _2324 : min(_2072, _2324));
            frontier_phi_34_33_ladder_1 = isnan(_2323) ? _2071 : (isnan(_2071) ? _2323 : min(_2071, _2323));
            frontier_phi_34_33_ladder_2 = isnan(_2322) ? _2070 : (isnan(_2070) ? _2322 : min(_2070, _2322));
        }
        else
        {
            frontier_phi_34_33_ladder = _2072;
            frontier_phi_34_33_ladder_1 = _2071;
            frontier_phi_34_33_ladder_2 = _2070;
        }
        _2136 = frontier_phi_34_33_ladder_2;
        _2138 = frontier_phi_34_33_ladder_1;
        _2140 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2136 = _2070;
        _2138 = _2071;
        _2140 = _2072;
    }
    uvec4 _2145 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _2147 = _2145.x * 14u;
    uint _2148 = _2147 + 13u;
    float _2155 = _843 + (-1.0);
    float _2160 = (cbLight._m0[_2148].x * _2155) + 1.0;
    float _2161 = (cbLight._m0[_2148].y * _2155) + 1.0;
    float _2162 = (cbLight._m0[_2148].z * _2155) + 1.0;
    float _2163 = (cbLight._m0[_2148].w * _2155) + 1.0;
    uint _2164 = _2147 + 5u;
    float _2170 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
    uint _2174 = _2147 + 4u;
    float _2183 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
    uint _2187 = _2147 | 1u;
    float _2198 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_677, _678, _679));
    float _2201 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_677, _678, _679));
    float _4405 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _4416 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2206 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * 0.3183098733425140380859375;
    float _2208 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * 0.3183098733425140380859375;
    float _2215 = ((cbLight._m0[_2164].x * _2170) * _2208) + (((cbLight._m0[_2174].x * _2136) * _2183) * _2206);
    float _2216 = ((_2170 * cbLight._m0[_2164].y) * _2208) + (((cbLight._m0[_2174].y * _2138) * _2183) * _2206);
    float _2217 = ((_2170 * cbLight._m0[_2164].z) * _2208) + (((cbLight._m0[_2174].z * _2140) * _2183) * _2206);
    uvec4 _2221 = floatBitsToUint(cbLight._m0[_2147 + 12u]);
    bool _2223 = _2221.x == 0u;
    float _2325;
    float _2327;
    float _2329;
    if (_2223)
    {
        _2325 = _2215;
        _2327 = _2216;
        _2329 = _2217;
    }
    else
    {
        uint _2333 = _2147 + 6u;
        float _2349 = (dot(vec3(cbLight._m0[_2147 + 2u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2350 = _2349 * _2349;
        float _4427 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2351 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2352 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2325 = (((cbLight._m0[_2333].x * 0.3183098733425140380859375) * _2351) * _2352) + _2215;
        _2327 = (((cbLight._m0[_2333].y * 0.3183098733425140380859375) * _2351) * _2352) + _2216;
        _2329 = (((cbLight._m0[_2333].z * 0.3183098733425140380859375) * _2351) * _2352) + _2217;
    }
    bool _2332 = _2221.y == 0u;
    float _2387;
    float _2389;
    float _2391;
    if (_2332)
    {
        _2387 = _2325;
        _2389 = _2327;
        _2391 = _2329;
    }
    else
    {
        uint _2560 = _2147 + 7u;
        float _2576 = (dot(vec3(cbLight._m0[_2147 + 3u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2577 = _2576 * _2576;
        float _4443 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2578 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2579 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2387 = (((cbLight._m0[_2560].x * 0.3183098733425140380859375) * _2578) * _2579) + _2325;
        _2389 = (((cbLight._m0[_2560].y * 0.3183098733425140380859375) * _2578) * _2579) + _2327;
        _2391 = (((cbLight._m0[_2560].z * 0.3183098733425140380859375) * _2578) * _2579) + _2329;
    }
    uint _2394 = _2147 + 8u;
    float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _680) * 0.949999988079071044921875);
    float _2408 = _2407 * _2407;
    float _2409 = cbLight._m0[_2147].x + _757;
    float _2410 = cbLight._m0[_2147].y + _758;
    float _2411 = cbLight._m0[_2147].z + _759;
    float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
    float _2416 = _2415 * _2409;
    float _2417 = _2415 * _2410;
    float _2418 = _2415 * _2411;
    float _2419 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2147].xyz));
    float _4459 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _4470 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _2423 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2424 = dot(vec3(_677, _678, _679), vec3(_2416, _2417, _2418));
    float _4481 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2428 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2416, _2417, _2418));
    float _4492 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2432 = _2408 * _2408;
    float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
    float _2444 = exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0);
    float _2445 = 0.959999978542327880859375 - _824;
    float _2447 = 0.959999978542327880859375 - _825;
    float _2448 = 0.959999978542327880859375 - _826;
    float _2455 = 1.0 - _2408;
    float _2466 = (0.5 / (((_2423 * ((_2422 * _2455) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2423 * _2455) + _2408) * _2422))) * _2422;
    float _4503 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2468 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
    uint _2482 = _2147 + 9u;
    float _2493 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _680) * 0.949999988079071044921875);
    float _2494 = _2493 * _2493;
    float _2495 = cbLight._m0[_2187].x + _757;
    float _2496 = cbLight._m0[_2187].y + _758;
    float _2497 = cbLight._m0[_2187].z + _759;
    float _2501 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
    float _2502 = _2501 * _2495;
    float _2503 = _2501 * _2496;
    float _2504 = _2501 * _2497;
    float _2505 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2187].xyz));
    float _4514 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2508 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2509 = dot(vec3(_677, _678, _679), vec3(_2502, _2503, _2504));
    float _4525 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2513 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2502, _2503, _2504));
    float _4536 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2517 = _2494 * _2494;
    float _2521 = ((_2512 * _2512) * (_2517 + (-1.0))) + 1.0;
    float _2528 = exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0);
    float _2535 = 1.0 - _2494;
    float _2545 = (0.5 / (((_2423 * ((_2508 * _2535) + _2494)) + 9.9999999392252902907785028219223e-09) + (((_2423 * _2535) + _2494) * _2508))) * _2508;
    float _4547 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2547 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2517 / ((_2521 * _2521) * 3.141590118408203125));
    float _2557 = (((((_2528 * _2445) + _827) * cbLight._m0[_2482].x) * _2547) * _2170) + ((((cbLight._m0[_2394].x * _2136) * ((_2444 * _2445) + _827)) * _2468) * _2183);
    float _2558 = (((((_2528 * _2447) + _829) * cbLight._m0[_2482].y) * _2547) * _2170) + ((((cbLight._m0[_2394].y * _2138) * ((_2444 * _2447) + _829)) * _2468) * _2183);
    float _2559 = (((((_2528 * _2448) + _830) * cbLight._m0[_2482].z) * _2547) * _2170) + ((((cbLight._m0[_2394].z * _2140) * ((_2444 * _2448) + _830)) * _2468) * _2183);
    float _2615;
    float _2617;
    float _2619;
    if (_2223)
    {
        _2615 = _2557;
        _2617 = _2558;
        _2619 = _2559;
    }
    else
    {
        uint _2621 = _2147 + 2u;
        uint _2625 = _2147 + 10u;
        float _2639 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2621].w)) * _680) * 0.949999988079071044921875);
        float _2640 = _2639 * _2639;
        float _2641 = cbLight._m0[_2621].x + _757;
        float _2642 = cbLight._m0[_2621].y + _758;
        float _2643 = cbLight._m0[_2621].z + _759;
        float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
        float _2648 = _2647 * _2641;
        float _2649 = _2647 * _2642;
        float _2650 = _2647 * _2643;
        float _2651 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2621].xyz));
        float _4558 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2655 = dot(vec3(_677, _678, _679), vec3(_2648, _2649, _2650));
        float _4569 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2659 = dot(vec3(cbLight._m0[_2621].xyz), vec3(_2648, _2649, _2650));
        float _4580 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2663 = _2640 * _2640;
        float _2667 = ((_2658 * _2658) * (_2663 + (-1.0))) + 1.0;
        float _2674 = exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0);
        float _2681 = 1.0 - _2640;
        float _2691 = (0.5 / (((_2423 * ((_2654 * _2681) + _2640)) + 9.9999999392252902907785028219223e-09) + (((_2423 * _2681) + _2640) * _2654))) * _2654;
        float _4591 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2693 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2663 / ((_2667 * _2667) * 3.141590118408203125));
        float _2694 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2615 = (((((_2674 * _2445) + _827) * cbLight._m0[_2625].x) * _2693) * _2694) + _2557;
        _2617 = (((((_2674 * _2447) + _829) * cbLight._m0[_2625].y) * _2693) * _2694) + _2558;
        _2619 = (((((_2674 * _2448) + _830) * cbLight._m0[_2625].z) * _2693) * _2694) + _2559;
    }
    float _2725;
    float _2727;
    float _2729;
    if (_2332)
    {
        _2725 = _2615;
        _2727 = _2617;
        _2729 = _2619;
    }
    else
    {
        uint _2736 = _2147 + 3u;
        uint _2740 = _2147 + 11u;
        float _2754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2736].w)) * _680) * 0.949999988079071044921875);
        float _2755 = _2754 * _2754;
        float _2756 = cbLight._m0[_2736].x + _757;
        float _2757 = cbLight._m0[_2736].y + _758;
        float _2758 = cbLight._m0[_2736].z + _759;
        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
        float _2763 = _2762 * _2756;
        float _2764 = _2762 * _2757;
        float _2765 = _2762 * _2758;
        float _2766 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2736].xyz));
        float _4607 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2769 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2770 = dot(vec3(_677, _678, _679), vec3(_2763, _2764, _2765));
        float _4618 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2773 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2774 = dot(vec3(cbLight._m0[_2736].xyz), vec3(_2763, _2764, _2765));
        float _4629 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2778 = _2755 * _2755;
        float _2782 = ((_2773 * _2773) * (_2778 + (-1.0))) + 1.0;
        float _2789 = exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0);
        float _2796 = 1.0 - _2755;
        float _2806 = (0.5 / (((_2423 * ((_2769 * _2796) + _2755)) + 9.9999999392252902907785028219223e-09) + (((_2423 * _2796) + _2755) * _2769))) * _2769;
        float _4640 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2808 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2778 / ((_2782 * _2782) * 3.141590118408203125));
        float _2809 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2725 = (((((_2789 * _2445) + _827) * cbLight._m0[_2740].x) * _2808) * _2809) + _2615;
        _2727 = (((((_2789 * _2447) + _829) * cbLight._m0[_2740].y) * _2808) * _2809) + _2617;
        _2729 = (((((_2789 * _2448) + _830) * cbLight._m0[_2740].z) * _2808) * _2809) + _2619;
    }
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_2145.y == 0u)
    {
        uvec4 _2830 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2831 = _2830.x;
        uint _2842 = uint((float(_2830.y) * floor(float(uint(cbSceneParam._m0[85u].y * _766) / _2831))) + floor(float(uint(cbSceneParam._m0[85u].x * _765) / _2831)));
        float _2852 = (log2(_1923 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2853 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        uint _2856 = uint(isnan(14.0) ? _2853 : (isnan(_2853) ? 14.0 : min(_2853, 14.0)));
        uvec4 _2861 = texelFetch(g_lightClusterGridBuffer, int(((_2856 << 2u) + (_2842 << 6u)) >> 2u));
        uint _2862 = _2861.x;
        uint _2863 = _2830.z;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        if (((((1u << ((_2863 >> 4u) & 15u)) + 4294967295u) & _2862) == 0u) || ((_2863 & 240u) == 0u))
        {
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
        }
        else
        {
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            uint _3093 = 0u;
            uint _3102;
            bool _3103;
            for (;;)
            {
                _3102 = texelFetch(g_lightClassification, int((((_2856 << 5u) + (_2842 << 9u)) + (_3093 << 2u)) >> 2u)).x;
                _3103 = _3102 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3103)
                {
                    frontier_phi_66_pred = _3092;
                    frontier_phi_66_pred_1 = _3091;
                    frontier_phi_66_pred_2 = _3090;
                    frontier_phi_66_pred_3 = _3089;
                    frontier_phi_66_pred_4 = _3088;
                    frontier_phi_66_pred_5 = _3087;
                }
                else
                {
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    uint _3217;
                    _3211 = _3087;
                    _3212 = _3088;
                    _3213 = _3089;
                    _3214 = _3090;
                    _3215 = _3091;
                    _3216 = _3092;
                    _3217 = _3102;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    for (;;)
                    {
                        uint _3221 = uint(findLSB(_3217)) + (_3093 << 5u);
                        uint _3218 = (_3217 + 4294967295u) & _3217;
                        uint _3223 = _3221 * 48u;
                        vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 3u)).x));
                        uint _3243 = (_3221 * 48u) + 4u;
                        vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 3u)).x));
                        uint _3262 = (_3221 * 48u) + 8u;
                        vec3 _3273 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x));
                        float _3277 = _3237.x - _1921;
                        float _3278 = _3237.y - _1922;
                        float _3279 = _3237.z - _1923;
                        float _3280 = dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279));
                        float _3283 = inversesqrt(_3280);
                        float _3284 = _3283 * _3277;
                        float _3285 = _3283 * _3278;
                        float _3286 = _3283 * _3279;
                        float _3287 = dot(vec3(_784, _787, _790), vec3(_3284, _3285, _3286));
                        float _3292 = 1.0 - (_3280 * _3237.w);
                        float _4666 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3293 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3294 = sqrt(_3280) * _3256.w;
                        float _3297 = 1.39999997615814208984375 / (_3294 + 1.39999997615814208984375);
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3287) + _3298;
                        float _3304 = _3294 * _3294;
                        float _3308 = ((isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0))) * _3293) / ((_3304 * 0.699999988079071044921875) + 1.0);
                        float _3312 = (-0.0) - _1921;
                        float _3313 = (-0.0) - _1922;
                        float _3314 = (-0.0) - _1923;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3319 = _3318 * _3312;
                        float _3320 = _3318 * _3313;
                        float _3321 = _3318 * _3314;
                        float _3328 = exp2(log2(1.0 / ((_3304 * 3.5) + 5.0)) * 0.25);
                        float _3329 = 1.0 - _859;
                        float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                        float _3337 = _3336 * _3336;
                        float _3338 = _3337 * _3337;
                        float _3339 = _3319 + _3284;
                        float _3340 = _3320 + _3285;
                        float _3341 = _3321 + _3286;
                        float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                        float _3349 = dot(vec3(_784, _787, _790), vec3(_3319, _3320, _3321));
                        float _4682 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3353 = dot(vec3(_784, _787, _790), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                        float _4693 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3356 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                        float _3361 = _3297 * _3337;
                        float _3362 = _3361 * _3361;
                        float _3365 = ((1.0 - _3362) * _3287) + _3362;
                        float _4704 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3366 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3367 = 1.0 - _3337;
                        float _3377 = (0.5 / (((_3366 * ((_3352 * _3367) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3366 * _3367) + _3337) * _3352))) * _3366;
                        float _4715 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3388 = (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) / ((_3360 * _3360) * ((_3304 * 2.1991131305694580078125) + 3.141590118408203125))) * _3293;
                        _3146 = (_3308 * _3256.x) + _3214;
                        _3147 = (_3308 * _3256.y) + _3215;
                        _3148 = (_3308 * _3256.z) + _3216;
                        _3143 = (_3388 * _3273.x) + _3211;
                        _3144 = (_3388 * _3273.y) + _3212;
                        _3145 = (_3388 * _3273.z) + _3213;
                        if (_3218 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3211 = _3143;
                            _3212 = _3144;
                            _3213 = _3145;
                            _3214 = _3146;
                            _3215 = _3147;
                            _3216 = _3148;
                            _3217 = _3218;
                        }
                    }
                    frontier_phi_66_pred = _3148;
                    frontier_phi_66_pred_1 = _3147;
                    frontier_phi_66_pred_2 = _3146;
                    frontier_phi_66_pred_3 = _3145;
                    frontier_phi_66_pred_4 = _3144;
                    frontier_phi_66_pred_5 = _3143;
                }
                _2953 = frontier_phi_66_pred;
                _2951 = frontier_phi_66_pred_1;
                _2949 = frontier_phi_66_pred_2;
                _2947 = frontier_phi_66_pred_3;
                _2945 = frontier_phi_66_pred_4;
                _2943 = frontier_phi_66_pred_5;
                uint _3094 = _3093 + 1u;
                if (_3094 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3087 = _2943;
                    _3088 = _2945;
                    _3089 = _2947;
                    _3090 = _2949;
                    _3091 = _2951;
                    _3092 = _2953;
                    _3093 = _3094;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
        }
        uvec4 _2956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2957 = _2956.z;
        uint _2959 = (_2957 >> 8u) & 15u;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((4294967295u << _2959) & _2862) == 0u)
        {
            _3055 = _2942;
            _3057 = _2944;
            _3059 = _2946;
            _3061 = _2948;
            _3063 = _2950;
            _3065 = _2952;
        }
        else
        {
            float _3080 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
            float _3081 = _3080 * _1921;
            float _3082 = _3080 * _1922;
            float _3083 = _3080 * _1923;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2959 < ((_2957 >> 12u) & 15u))
            {
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3064;
                float _3066;
                float _3194 = _2942;
                float _3195 = _2944;
                float _3196 = _2946;
                float _3197 = _2948;
                float _3198 = _2950;
                float _3199 = _2952;
                uint _3200 = _2959;
                uint _3209;
                bool _3210;
                for (;;)
                {
                    _3209 = texelFetch(g_lightClassification, int((((_2856 << 5u) + (_2842 << 9u)) + (_3200 << 2u)) >> 2u)).x;
                    _3210 = _3209 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3210)
                    {
                        frontier_phi_72_pred = _3199;
                        frontier_phi_72_pred_1 = _3198;
                        frontier_phi_72_pred_2 = _3197;
                        frontier_phi_72_pred_3 = _3196;
                        frontier_phi_72_pred_4 = _3195;
                        frontier_phi_72_pred_5 = _3194;
                    }
                    else
                    {
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3406 = _3194;
                        float _3407 = _3195;
                        float _3408 = _3196;
                        float _3409 = _3197;
                        float _3410 = _3198;
                        float _3411 = _3199;
                        uint _3412 = _3209;
                        uint _3413;
                        vec4 _3438;
                        float _3439;
                        vec4 _3454;
                        vec3 _3466;
                        vec4 _3481;
                        vec4 _3496;
                        float _3543;
                        bool _3544;
                        for (;;)
                        {
                            uint _3423 = ((_3200 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3412));
                            _3413 = (_3412 + 4294967295u) & _3412;
                            uint _3425 = _3423 * 40u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            _3439 = _3438.w;
                            uint _3441 = (_3423 * 40u) + 4u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3423 * 40u) + 8u;
                            _3466 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x));
                            uint _3468 = (_3423 * 40u) + 16u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3423 * 40u) + 20u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3499 = (_3423 * 40u) + 24u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3518 = (_3423 * 40u) + 28u;
                            vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            _3543 = fma(_1923, _3531.z, fma(_1922, _3531.y, _3531.x * _1921)) + _3531.w;
                            _3544 = !((fma(_1923, _3512.z, fma(_1922, _3512.y, _3512.x * _1921)) + _3512.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3544)
                            {
                                float _3571 = _3438.x - _1921;
                                float _3572 = _3438.y - _1922;
                                float _3573 = _3438.z - _1923;
                                float _3574 = dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573));
                                float _3577 = inversesqrt(_3574);
                                float _3578 = _3577 * _3571;
                                float _3579 = _3577 * _3572;
                                float _3580 = _3577 * _3573;
                                float _3584 = 1.0 - (_3574 / (_3439 * _3439));
                                float _4726 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3589 = sqrt(_3574) * _3454.w;
                                float _3591 = 1.39999997615814208984375 / (_3589 + 1.39999997615814208984375);
                                float _3592 = _3591 * _3591;
                                float _3595 = ((1.0 - _3592) * dot(vec3(_3578, _3579, _3580), vec3(_784, _787, _790))) + _3592;
                                float _3598 = _3589 * _3589;
                                float _3602 = (fma(_1923, _3481.z, fma(_1922, _3481.y, _3481.x * _1921)) + _3481.w) / _3543;
                                float _3603 = (fma(_1923, _3496.z, fma(_1922, _3496.y, _3496.x * _1921)) + _3496.w) / _3543;
                                float _3607 = 1.0 - dot(vec2(_3602, _3603), vec2(_3602, _3603));
                                float _4742 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3609 = _3608 * (((isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0))) * _3585) / ((_3598 * 0.699999988079071044921875) + 1.0));
                                float _3621 = exp2(log2(1.0 / ((_3598 * 3.5) + 5.0)) * 0.25);
                                float _3622 = 1.0 - _859;
                                float _3629 = sqrt(1.0 - ((1.0 - (_3622 * _3622)) * (1.0 - (_3621 * _3621))));
                                float _3630 = _3629 * _3629;
                                float _3631 = _3630 * _3630;
                                float _3632 = _3578 - _3081;
                                float _3633 = _3579 - _3082;
                                float _3634 = _3580 - _3083;
                                float _3638 = inversesqrt(dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634)));
                                float _3642 = dot(vec3(_784, _787, _790), vec3((-0.0) - _3081, (-0.0) - _3082, (-0.0) - _3083));
                                float _4753 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3645 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3646 = dot(vec3(_784, _787, _790), vec3(_3638 * _3632, _3638 * _3633, _3638 * _3634));
                                float _4764 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3649 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3653 = ((_3649 * _3649) * (_3631 + (-1.0))) + 1.0;
                                float _3654 = _3591 * _3630;
                                float _3655 = _3654 * _3654;
                                float _3661 = ((1.0 - _3655) * dot(vec3(_784, _787, _790), vec3(_3578, _3579, _3580))) + _3655;
                                float _4775 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3663 = 1.0 - _3630;
                                float _3673 = (0.5 / (((_3662 * ((_3645 * _3663) + _3630)) + 9.9999999392252902907785028219223e-09) + (((_3662 * _3663) + _3630) * _3645))) * _3662;
                                float _4786 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3683 = (_3608 * _3585) * (((_3631 * 3.1415927410125732421875) * (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) / ((_3653 * _3653) * ((_3598 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3609 * _3454.y;
                                frontier_phi_78_pred_1 = _3609 * _3454.x;
                                frontier_phi_78_pred_2 = _3683 * _3466.z;
                                frontier_phi_78_pred_3 = _3683 * _3466.y;
                                frontier_phi_78_pred_4 = _3683 * _3466.x;
                                frontier_phi_78_pred_5 = _3609 * _3454.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3691 = frontier_phi_78_pred;
                            _3690 = frontier_phi_78_pred_1;
                            _3689 = frontier_phi_78_pred_2;
                            _3688 = frontier_phi_78_pred_3;
                            _3687 = frontier_phi_78_pred_4;
                            _3692 = frontier_phi_78_pred_5;
                            _3396 = _3690 + _3409;
                            _3397 = _3691 + _3410;
                            _3398 = _3692 + _3411;
                            _3393 = _3687 + _3406;
                            _3394 = _3688 + _3407;
                            _3395 = _3689 + _3408;
                            if (_3413 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3413;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3398;
                        frontier_phi_72_pred_1 = _3397;
                        frontier_phi_72_pred_2 = _3396;
                        frontier_phi_72_pred_3 = _3395;
                        frontier_phi_72_pred_4 = _3394;
                        frontier_phi_72_pred_5 = _3393;
                    }
                    _3066 = frontier_phi_72_pred;
                    _3064 = frontier_phi_72_pred_1;
                    _3062 = frontier_phi_72_pred_2;
                    _3060 = frontier_phi_72_pred_3;
                    _3058 = frontier_phi_72_pred_4;
                    _3056 = frontier_phi_72_pred_5;
                    uint _3201 = _3200 + 1u;
                    if (_3201 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3194 = _3056;
                        _3195 = _3058;
                        _3196 = _3060;
                        _3197 = _3062;
                        _3198 = _3064;
                        _3199 = _3066;
                        _3200 = _3201;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3066;
                frontier_phi_60_61_ladder_1 = _3064;
                frontier_phi_60_61_ladder_2 = _3060;
                frontier_phi_60_61_ladder_3 = _3058;
                frontier_phi_60_61_ladder_4 = _3056;
                frontier_phi_60_61_ladder_5 = _3062;
            }
            else
            {
                frontier_phi_60_61_ladder = _2952;
                frontier_phi_60_61_ladder_1 = _2950;
                frontier_phi_60_61_ladder_2 = _2946;
                frontier_phi_60_61_ladder_3 = _2944;
                frontier_phi_60_61_ladder_4 = _2942;
                frontier_phi_60_61_ladder_5 = _2948;
            }
            _3055 = frontier_phi_60_61_ladder_4;
            _3057 = frontier_phi_60_61_ladder_3;
            _3059 = frontier_phi_60_61_ladder_2;
            _3061 = frontier_phi_60_61_ladder_5;
            _3063 = frontier_phi_60_61_ladder_1;
            _3065 = frontier_phi_60_61_ladder;
        }
        float _3070 = isnan(1.0) ? _843 : (isnan(_843) ? 1.0 : min(_843, 1.0));
        _2875 = (_3070 * _3061) + _2387;
        _2877 = (_3070 * _3063) + _2389;
        _2879 = (_3070 * _3065) + _2391;
        _2881 = ((_3055 * _827) * _3070) + _2725;
        _2883 = ((_3057 * _829) * _3070) + _2727;
        _2885 = ((_3059 * _830) * _3070) + _2729;
    }
    else
    {
        _2875 = _2387;
        _2877 = _2389;
        _2879 = _2391;
        _2881 = _2725;
        _2883 = _2727;
        _2885 = _2729;
    }
    float _4802 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4813 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4824 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    uint _2905 = _268 + 6u;
    float _2913 = _765 / cbSceneParam._m0[86u].x;
    float _2914 = _766 / cbSceneParam._m0[86u].y;
    vec4 _2928 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2913, _2914, (log2((isnan(cbSceneParam._m0[77u].w) ? _699 : (isnan(_699) ? cbSceneParam._m0[77u].w : min(_699, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2930 = _2928.x;
    float _2931 = _2928.y;
    float _2932 = _2928.z;
    float _2933 = _2928.w;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    if (_699 > cbSceneParam._m0[78u].w)
    {
        float _2967 = isnan(_699) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _699 : min(cbSceneParam._m0[80u].w, _699));
        float _2968 = _2967 / _699;
        float _2979 = _2968 * _750;
        float _2980 = _751 * _2968;
        float _2981 = (-0.0) - _2980;
        float _2983 = _2968 * _752;
        float _2985 = (cbSceneParam._m0[77u].w * _2981) / _2967;
        float _2986 = _2985 + cbSceneParam._m0[79u].w;
        float _2987 = cbSceneParam._m0[79u].w - _2980;
        float _2993 = sqrt(((_2979 * _2979) + (_2980 * _2980)) + (_2983 * _2983));
        float _2996 = (1.0 - (cbSceneParam._m0[77u].w / _2967)) * _2993;
        float _3001 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3003 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3156;
        if (abs((_2981 - _2985) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3156 = ((((_2986 > 0.0) ? exp2(_3001 * _2986) : (2.0 - exp2(_3003 * _2986))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2996;
        }
        else
        {
            float _3116 = 1.0 / cbSceneParam._m0[80u].x;
            float _3117 = isnan(_2987) ? _2986 : (isnan(_2986) ? _2987 : max(_2986, _2987));
            float _3118 = isnan(_2987) ? _2986 : (isnan(_2986) ? _2987 : min(_2986, _2987));
            float _3127 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : min(_3117, 0.0));
            float _3128 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : min(_3118, 0.0));
            _3156 = ((abs(_2993 / _2981) * cbSceneParam._m0[80u].y) * ((((_3127 - _3128) * 2.0) - ((exp2(_3001 * (isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0)))) - exp2(_3001 * (isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0))))) * _3116)) - ((exp2(_3003 * _3127) - exp2(_3003 * _3128)) * _3116))) + (_2996 * cbSceneParam._m0[80u].z);
        }
        vec4 _3158 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2913, _2914, 1.0), 0.0);
        float _3167 = exp2((_3156 * (-1.44269502162933349609375)) * (1.0 - _3158.w));
        float _3168 = log2(_3167);
        float _3184 = log2(_2933);
        _3005 = (exp2(_3184 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].x)) * _3158.x) / cbSceneParam._m0[78u].x)) + _2930;
        _3007 = (exp2(_3184 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].y)) * _3158.y) / cbSceneParam._m0[78u].y)) + _2931;
        _3009 = (exp2(_3184 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].z)) * _3158.z) / cbSceneParam._m0[78u].z)) + _2932;
        _3011 = _3167 * _2933;
    }
    else
    {
        _3005 = _2930;
        _3007 = _2931;
        _3009 = _2932;
        _3011 = _2933;
    }
    float _3023 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3024 = _3023 == 3.0;
    float _3025 = log2(_3011);
    float _3032 = exp2(_3025 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2875 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _843))) + ((_2881 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1651)) * cbPerFrame._m0[3u].x));
    float _3033 = exp2(_3025 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2877 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _843))) + ((_2883 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1651)) * cbPerFrame._m0[3u].x));
    float _3034 = exp2(_3025 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2879 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _843))) + ((_2885 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1651)) * cbPerFrame._m0[3u].x));
    float _3043 = (_3023 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3043 * (_3024 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3005)));
    SV_Target.y = _3043 * (_3024 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3007)));
    SV_Target.z = _3043 * (_3024 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3009)));
    SV_Target.w = cbInstanceData._m0[_2905].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2905].w;
}


