#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1502;
float _4165;
float _4166;
float _4167;
float _4168;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4177 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _4188 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4199 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _371 = _366.x * cbMtdParam._m0[11u].x;
    float _372 = _366.y * cbMtdParam._m0[11u].y;
    float _373 = _366.z * cbMtdParam._m0[11u].z;
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _457 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _474 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _411.x) * 2.0) - ((((_445 - _457) * cbMtdParam._m0[23u].w) + _457) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4210 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _482 = (_475 * ((_392.x * cbMtdParam._m0[12u].x) - _371)) + _371;
    float _483 = (_475 * ((_392.y * cbMtdParam._m0[12u].y) - _372)) + _372;
    float _484 = (_475 * ((_392.z * cbMtdParam._m0[12u].z) - _373)) + _373;
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _523 = _521.x;
    float _533 = dot(vec4(_523, _521.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _547 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _411.y) * 2.0) - ((((_523 - _533) * cbMtdParam._m0[23u].w) + _533) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4221 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _558 = (_340.x * cbMtdParam._m0[9u].x) * ((_548 * ((_501.x * cbMtdParam._m0[13u].x) - _482)) + _482);
    float _559 = (_340.y * cbMtdParam._m0[9u].y) * ((_548 * ((_501.y * cbMtdParam._m0[13u].y) - _483)) + _483);
    float _560 = (_340.z * cbMtdParam._m0[9u].z) * ((_548 * ((_501.z * cbMtdParam._m0[13u].z) - _484)) + _484);
    float _564 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _558;
    float _567 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _559;
    float _570 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _560;
    float _578 = (((_558 - _564) * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) + _564) * 4.55000019073486328125;
    float _580 = (((_559 - _567) * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) + _567) * 4.55000019073486328125;
    float _582 = (((_560 - _570) * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) + _570) * 4.55000019073486328125;
    vec4 _599 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _641 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _643 = _641.x;
    float _644 = _641.y;
    float _645 = _641.z;
    float _652 = ((_624.x - _643) * _475) + _643;
    float _653 = ((_624.y - _644) * _475) + _644;
    float _654 = ((_624.z - _645) * _475) + _645;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _679 = ((_666.z - _654) * _548) + _654;
    float _682 = ((((_666.x - _652) * _548) + _652) * 2.0) + (-1.0);
    float _683 = ((((_666.y - _653) * _548) + _653) * 2.0) + (-1.0);
    float _684 = dot(vec2(_682, _683), vec2(_682, _683));
    float _4232 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _689 = sqrt(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _719 = (_682 + ((((_599.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_707.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _720 = (_683 + ((((_599.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_707.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _723 = fma(_689, _251, fma(_720, _258, _719 * _244));
    float _726 = fma(_689, _252, fma(_720, _259, _719 * _245));
    float _729 = fma(_689, _253, fma(_720, _260, _719 * _246));
    float _733 = inversesqrt(dot(vec3(_723, _726, _729), vec3(_723, _726, _729)));
    vec4 _760 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _762 = _760.x;
    float _763 = 1.0 - _762;
    float _772 = (cbMtdParam._m0[19u].x + dot(vec4(_733 * _723, _733 * _726, _733 * _729, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_762 - _763) * cbMtdParam._m0[24u].z) + _763) * cbMtdParam._m0[21u].z);
    float _4243 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _773 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _780 = (_773 * (cbMtdParam._m0[17u].x - _578)) + _578;
    float _781 = (_773 * (cbMtdParam._m0[17u].y - _580)) + _580;
    float _782 = (_773 * (cbMtdParam._m0[17u].z - _582)) + _582;
    vec4 _808 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _810 = _808.x;
    float _827 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w)).x - _810) * _475) + _810;
    float _844 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _303) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _304) + cbTextureTilingScale._m0[21u].w)).x - _827) * _548) + _827;
    float _848 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _844) * cbMtdParam._m0[19u].z) + _844;
    float _850 = _848 - (_848 * _773);
    float _855 = (((_599.z - _679) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _679;
    float _859 = ((_707.z - _855) * cbMtdParam._m0[19u].w) + _855;
    vec4 _872 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _879 = (_872.x * 2.0) + (-1.0);
    float _880 = (_872.y * 2.0) + (-1.0);
    float _881 = dot(vec2(_879, _880), vec2(_879, _880));
    float _4254 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _889 = ((_872.z - _859) * _773) + _859;
    float _899 = ((sqrt(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) - _689) * _773) + _689;
    float _902 = (((_879 - _719) * _773) + _719) + (cbMtdParam._m0[21u].x * _719);
    float _903 = (((_880 - _720) * _773) + _720) + (cbMtdParam._m0[21u].x * _720);
    float _907 = cbMtdParam._m0[22u].x + _707.w;
    float _910 = fma(_899, _251, fma(_903, _258, _902 * _244));
    float _913 = fma(_899, _252, fma(_903, _259, _902 * _245));
    float _916 = fma(_899, _253, fma(_903, _260, _902 * _246));
    float _920 = inversesqrt(dot(vec3(_910, _913, _916), vec3(_910, _913, _916)));
    float _921 = _920 * _910;
    float _922 = _920 * _913;
    float _923 = _920 * _916;
    float _4265 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _924 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _4276 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4287 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4298 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4309 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4320 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _929 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _943 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _994 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _984);
    float _995 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _984);
    float _996 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _984);
    float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
    float _1001 = _994 * _1000;
    float _1002 = _995 * _1000;
    float _1003 = _996 * _1000;
    vec4 _1008 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1010 = _1008.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1182 = sqrt(((_994 * _994) + (_995 * _995)) + (_996 * _996));
        float _1188 = (cbMatDynParam._m0[5u].x * _1182) + cbMatDynParam._m0[5u].y;
        float _4331 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1193 = (cbMatDynParam._m0[5u].z * _1182) + cbMatDynParam._m0[5u].w;
        float _4342 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) - _1189)) + _1189) < ((_1010 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1021 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1022 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1040 = fma(_923, cbSceneParam._m0[5u].z, fma(_922, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _921));
    float _1043 = fma(_923, cbSceneParam._m0[6u].z, fma(_922, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _921));
    float _1046 = fma(_923, cbSceneParam._m0[7u].z, fma(_922, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _921));
    uint _1059 = _284 + 9u;
    uint _1060 = _1059 + uint(cbMatDynParam._m0[0u].w);
    float _1066 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * cbInstanceData._m0[_1060].x;
    float _1067 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * cbInstanceData._m0[_1060].y;
    float _1068 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * cbInstanceData._m0[_1060].z;
    float _4353 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _4364 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _4375 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _1072 = 1.0 - _929;
    float _1073 = _1069 * _1072;
    float _1074 = _1070 * _1072;
    float _1075 = _1071 * _1072;
    float _1080 = (_1069 + (-0.039999999105930328369140625)) * _929;
    float _1081 = (_1070 + (-0.039999999105930328369140625)) * _929;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _929;
    float _1083 = _1080 + 0.039999999105930328369140625;
    float _1085 = _1081 + 0.039999999105930328369140625;
    float _1086 = _1082 + 0.039999999105930328369140625;
    vec4 _1095 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1021, cbSceneParam._m0[86u].y * _1022));
    float _1099 = ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * TEXCOORD_5.w) * _1095.x;
    float _1100 = dot(vec3(_921, _922, _923), vec3(_1001, _1002, _1003));
    float _1103 = _1100 * 2.0;
    float _1107 = (_1103 * _921) - _1001;
    float _1108 = (_1103 * _922) - _1002;
    float _1109 = (_1103 * _923) - _1003;
    float _1113 = abs(dot(vec3(_1001, _1002, _1003), vec3(_921, _922, _923)));
    float _4386 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1115 = sqrt(_924);
    float _1128 = exp2((_1115 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1115 * 3.0));
    float _1134 = (1.0 - _1128) * ((_1115 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1135 = _1128 * _1115;
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1501;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1226 = fma(_1171, cbModelParam._m0[26u].z, fma(_1167, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163));
        float _1230 = fma(_1171, cbModelParam._m0[27u].z, fma(_1167, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163));
        float _1234 = fma(_1171, cbModelParam._m0[28u].z, fma(_1167, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163));
        float _1259 = _1163 + _921;
        float _1260 = _1167 + _922;
        float _1261 = _1171 + _923;
        float _1271 = fma(_1261, cbModelParam._m0[26u].z, fma(_1260, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1259)) - _1226;
        float _1272 = fma(_1261, cbModelParam._m0[27u].z, fma(_1260, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1259)) - _1230;
        float _1273 = fma(_1261, cbModelParam._m0[28u].z, fma(_1260, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1259)) - _1234;
        float _1277 = inversesqrt(dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273)));
        float _1290 = ((_1277 * _1271) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1226 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1277 * _1272) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1230 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1277 * _1273) / cbModelParam._m0[34u].z) + ((((((_1234 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        float _1329 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1295.x + (-0.5));
        float _1331 = _1329 * (_1295.y + (-0.5));
        float _1332 = _1329 * (_1295.z + (-0.5));
        float _1339 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1302.x + (-0.5));
        float _1341 = _1339 * (_1302.y + (-0.5));
        float _1342 = _1339 * (_1302.z + (-0.5));
        float _1349 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1309.x + (-0.5));
        float _1351 = _1349 * (_1309.y + (-0.5));
        float _1352 = _1349 * (_1309.z + (-0.5));
        float _1359 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1316.x + (-0.5));
        float _1361 = _1359 * (_1316.y + (-0.5));
        float _1362 = _1359 * (_1316.z + (-0.5));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = _1330 * 0.5;
        float _1367 = _1340 * 0.5;
        float _1368 = _1350 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1383 = (dot(vec3(_921, _922, _923), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1393 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4434 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1395 + 1.0))) + _1400) * _1363;
        float _1410 = _1331 * 0.5;
        float _1411 = _1341 * 0.5;
        float _1412 = _1351 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_921, _922, _923), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4445 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4456 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4467 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_1437 + 1.0))) + _1442) * _1364;
        float _1452 = _1332 * 0.5;
        float _1453 = _1342 * 0.5;
        float _1454 = _1352 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_921, _922, _923), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4478 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4489 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4500 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_1479 + 1.0))) + _1484) * _1365;
        _1501 = _1332;
        _1503 = _1331;
        _1504 = _1330;
        _1505 = _1342;
        _1506 = _1341;
        _1507 = _1340;
        _1508 = _1352;
        _1509 = _1351;
        _1510 = _1350;
        _1511 = _1365;
        _1512 = _1364;
        _1513 = _1363;
        _1514 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1516 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
    }
    else
    {
        _1501 = _1502;
        _1503 = _1502;
        _1504 = _1502;
        _1505 = _1502;
        _1506 = _1502;
        _1507 = _1502;
        _1508 = _1502;
        _1509 = _1502;
        _1510 = _1502;
        _1511 = _1502;
        _1512 = _1502;
        _1513 = _1502;
        _1514 = 0.0;
        _1515 = 0.0;
        _1516 = 0.0;
    }
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1543 = fma(_1171, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163));
        float _1547 = fma(_1171, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163));
        float _1551 = fma(_1171, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163));
        float _1574 = _1163 + _921;
        float _1575 = _1167 + _922;
        float _1576 = _1171 + _923;
        float _1586 = fma(_1576, cbModelParam._m0[30u].z, fma(_1575, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1574)) - _1543;
        float _1587 = fma(_1576, cbModelParam._m0[31u].z, fma(_1575, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1574)) - _1547;
        float _1588 = fma(_1576, cbModelParam._m0[32u].z, fma(_1575, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1574)) - _1551;
        float _1592 = inversesqrt(dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588)));
        float _1605 = ((_1592 * _1586) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1543 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1606 = ((_1592 * _1587) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1547 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1607 = ((_1592 * _1588) / cbModelParam._m0[35u].z) + ((((((_1551 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1605, _1606, _1607), 0.0);
        vec4 _1616 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1605, _1606, _1607), 0.0);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1605, _1606, _1607), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1605, _1606, _1607), 0.0);
        float _1642 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1609.x + (-0.5));
        float _1644 = _1642 * (_1609.y + (-0.5));
        float _1645 = _1642 * (_1609.z + (-0.5));
        float _1652 = exp2((_1616.w + (-0.5)) * 20.0) * 2.0;
        float _1653 = _1652 * (_1616.x + (-0.5));
        float _1654 = _1652 * (_1616.y + (-0.5));
        float _1655 = _1652 * (_1616.z + (-0.5));
        float _1662 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1663 = _1662 * (_1623.x + (-0.5));
        float _1664 = _1662 * (_1623.y + (-0.5));
        float _1665 = _1662 * (_1623.z + (-0.5));
        float _1672 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1630.x + (-0.5));
        float _1674 = _1672 * (_1630.y + (-0.5));
        float _1675 = _1672 * (_1630.z + (-0.5));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = _1643 * 0.5;
        float _1680 = _1653 * 0.5;
        float _1681 = _1663 * 0.5;
        float _1682 = dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681));
        float _1687 = (_1682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1682);
        float _1695 = (dot(vec3(_921, _922, _923), vec3(_1687 * _1679, _1687 * _1680, _1687 * _1681)) + 1.0) * 0.5;
        float _4541 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1704 = sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4552 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _1706 = _1705 * 2.0;
        float _1710 = (1.0 - _1705) / (_1705 + 1.0);
        float _4563 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _1720 = ((((1.0 - _1711) * (_1706 + 2.0)) * exp2(log2(isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_1706 + 1.0))) + _1711) * _1676;
        float _1721 = _1644 * 0.5;
        float _1722 = _1654 * 0.5;
        float _1723 = _1664 * 0.5;
        float _1724 = dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723));
        float _1729 = (_1724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1724);
        float _1737 = (dot(vec3(_921, _922, _923), vec3(_1729 * _1721, _1729 * _1722, _1729 * _1723)) + 1.0) * 0.5;
        float _4574 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1746 = sqrt(((_1722 * _1722) + (_1721 * _1721)) + (_1723 * _1723)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4585 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _1748 = _1747 * 2.0;
        float _1752 = (1.0 - _1747) / (_1747 + 1.0);
        float _4596 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _1762 = ((((1.0 - _1753) * (_1748 + 2.0)) * exp2(log2(isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_1748 + 1.0))) + _1753) * _1677;
        float _1763 = _1645 * 0.5;
        float _1764 = _1655 * 0.5;
        float _1765 = _1665 * 0.5;
        float _1766 = dot(vec3(_1763, _1764, _1765), vec3(_1763, _1764, _1765));
        float _1771 = (_1766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1766);
        float _1779 = (dot(vec3(_921, _922, _923), vec3(_1771 * _1763, _1771 * _1764, _1771 * _1765)) + 1.0) * 0.5;
        float _4607 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1788 = sqrt(((_1764 * _1764) + (_1763 * _1763)) + (_1765 * _1765)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4618 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1789 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _1790 = _1789 * 2.0;
        float _1794 = (1.0 - _1789) / (_1789 + 1.0);
        float _4629 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _1804 = ((((1.0 - _1795) * (_1790 + 2.0)) * exp2(log2(isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_1790 + 1.0))) + _1795) * _1678;
        _1812 = _1645;
        _1813 = _1644;
        _1814 = _1643;
        _1815 = _1655;
        _1816 = _1654;
        _1817 = _1653;
        _1818 = _1665;
        _1819 = _1664;
        _1820 = _1663;
        _1821 = _1678;
        _1822 = _1677;
        _1823 = _1676;
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)));
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)));
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)));
    }
    else
    {
        _1812 = _1502;
        _1813 = _1502;
        _1814 = _1502;
        _1815 = _1502;
        _1816 = _1502;
        _1817 = _1502;
        _1818 = _1502;
        _1819 = _1502;
        _1820 = _1502;
        _1821 = _1502;
        _1822 = _1502;
        _1823 = _1502;
        _1824 = 0.0;
        _1825 = 0.0;
        _1826 = 0.0;
    }
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1514)) + _1514;
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1515)) + _1515;
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1516)) + _1516;
    float _1859 = fma(_1838, cbSceneParam._m0[89u].z, fma(_1837, cbSceneParam._m0[89u].y, _1836 * cbSceneParam._m0[89u].x));
    float _1862 = fma(_1838, cbSceneParam._m0[90u].z, fma(_1837, cbSceneParam._m0[90u].y, _1836 * cbSceneParam._m0[90u].x));
    float _1865 = fma(_1838, cbSceneParam._m0[91u].z, fma(_1837, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1836));
    float _1880 = _1107 * 0.5;
    float _1881 = _1108 * 0.5;
    float _1882 = _1109 * 0.5;
    float _1883 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1886 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1889 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1923;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1896 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1501, _1505, _1508, _1511));
        float _1900 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1503, _1506, _1509, _1512));
        float _1904 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1504, _1507, _1510, _1513));
        float _1911 = dot(vec4(cbModelParam._m0[39u]), vec4(_1880, _1881, _1882, 1.0));
        _1923 = dot(vec3(isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0)), isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1911) ? 0.0 : (isnan(0.0) ? _1911 : max(0.0, _1911))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1923 = 1.0;
    }
    float _1934;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1925 = dot(vec4(cbModelParam._m0[40u]), vec4(_1880, _1881, _1882, 1.0));
        _1934 = dot(vec3(isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1925) ? 0.0 : (isnan(0.0) ? _1925 : max(0.0, _1925))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1934 = 1.0;
    }
    float _1938 = (_1934 * cbModelParam._m0[1u].x) + (_1923 * (1.0 - cbModelParam._m0[1u].x));
    float _1948 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _924);
    float _1949 = isnan(_1948) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1948 : min(cbModelParam._m0[25u].z, _1948));
    float _2030;
    float _2032;
    float _2034;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1997 = fma(_1171, cbModelParam._m0[13u].z, fma(_1167, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1163)) + cbModelParam._m0[13u].w;
        float _2001 = fma(_1171, cbModelParam._m0[14u].z, fma(_1167, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1163)) + cbModelParam._m0[14u].w;
        float _2005 = fma(_1171, cbModelParam._m0[15u].z, fma(_1167, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1163)) + cbModelParam._m0[15u].w;
        float _2008 = fma(_1109, cbModelParam._m0[13u].z, fma(_1108, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1107));
        float _2011 = fma(_1109, cbModelParam._m0[14u].z, fma(_1108, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1107));
        float _2014 = fma(_1109, cbModelParam._m0[15u].z, fma(_1108, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1107));
        float _2042;
        if (_2008 > 0.0)
        {
            _2042 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2042 = frontier_phi_17_15_ladder;
        }
        float _2214;
        if (_2011 > 0.0)
        {
            _2214 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2214 = frontier_phi_26_22_ladder;
        }
        float _2509;
        if (_2014 > 0.0)
        {
            _2509 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2509 = frontier_phi_38_33_ladder;
        }
        float _2511 = isnan(_2214) ? _2042 : (isnan(_2042) ? _2214 : min(_2042, _2214));
        float _2512 = isnan(_2509) ? _2511 : (isnan(_2511) ? _2509 : min(_2511, _2509));
        float _2516 = (_2512 * _2008) + _1997;
        float _2517 = (_2512 * _2011) + _2001;
        float _2518 = (_2512 * _2014) + _2005;
        float _2519 = _2512 * 9.9999997473787516355514526367188e-05;
        float _2521 = (-1.0) - _2519;
        float _2523 = _2519 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2518 > _2523) || ((_2518 < _2521) || ((_2517 > _2523) || ((_2517 < _2521) || ((_2516 < _2521) || (_2516 > _2523))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2518, cbModelParam._m0[9u].z, fma(_2517, cbModelParam._m0[9u].y, _2516 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2518, cbModelParam._m0[10u].z, fma(_2517, cbModelParam._m0[10u].y, _2516 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2518, cbModelParam._m0[11u].z, fma(_2517, cbModelParam._m0[11u].y, _2516 * cbModelParam._m0[11u].x))), _1949);
            frontier_phi_16_38_ladder = _2663.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2663.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2663.x * cbModelParam._m0[1u].y;
        }
        _2030 = frontier_phi_16_38_ladder_2;
        _2032 = frontier_phi_16_38_ladder_1;
        _2034 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1107, _1108, _1109), _1949);
        _2030 = _2018.x * cbModelParam._m0[1u].y;
        _2032 = _2018.y * cbModelParam._m0[1u].y;
        _2034 = _2018.z * cbModelParam._m0[1u].y;
    }
    float _2038 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _924);
    float _2039 = isnan(_2038) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2038 : min(cbModelParam._m0[25u].w, _2038));
    float _2129;
    float _2131;
    float _2133;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2093 = fma(_1171, cbModelParam._m0[21u].z, fma(_1167, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1163)) + cbModelParam._m0[21u].w;
        float _2097 = fma(_1171, cbModelParam._m0[22u].z, fma(_1167, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1163)) + cbModelParam._m0[22u].w;
        float _2101 = fma(_1171, cbModelParam._m0[23u].z, fma(_1167, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1163)) + cbModelParam._m0[23u].w;
        float _2104 = fma(_1109, cbModelParam._m0[21u].z, fma(_1108, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1107));
        float _2107 = fma(_1109, cbModelParam._m0[22u].z, fma(_1108, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1107));
        float _2110 = fma(_1109, cbModelParam._m0[23u].z, fma(_1108, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1107));
        float _2219;
        if (_2104 > 0.0)
        {
            _2219 = abs((1.0 - _2093) / _2104);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2093 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2219 = frontier_phi_28_24_ladder;
        }
        float _2536;
        if (_2107 > 0.0)
        {
            _2536 = abs((1.0 - _2097) / _2107);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2097 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2536 = frontier_phi_40_35_ladder;
        }
        float _2874;
        if (_2110 > 0.0)
        {
            _2874 = abs((1.0 - _2101) / _2110);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2101 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2874 = frontier_phi_50_47_ladder;
        }
        float _2876 = isnan(_2536) ? _2219 : (isnan(_2219) ? _2536 : min(_2219, _2536));
        float _2877 = isnan(_2874) ? _2876 : (isnan(_2876) ? _2874 : min(_2876, _2874));
        float _2881 = (_2877 * _2104) + _2093;
        float _2882 = (_2877 * _2107) + _2097;
        float _2883 = (_2877 * _2110) + _2101;
        float _2884 = _2877 * 9.9999997473787516355514526367188e-05;
        float _2885 = (-1.0) - _2884;
        float _2887 = _2884 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2883 > _2887) || ((_2883 < _2885) || ((_2882 > _2887) || ((_2882 < _2885) || ((_2881 < _2885) || (_2881 > _2887))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3005 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2883, cbModelParam._m0[17u].z, fma(_2882, cbModelParam._m0[17u].y, _2881 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2883, cbModelParam._m0[18u].z, fma(_2882, cbModelParam._m0[18u].y, _2881 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2883, cbModelParam._m0[19u].z, fma(_2882, cbModelParam._m0[19u].y, _2881 * cbModelParam._m0[19u].x))), _2039);
            frontier_phi_25_50_ladder = _3005.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3005.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3005.x * cbModelParam._m0[1u].z;
        }
        _2129 = frontier_phi_25_50_ladder_2;
        _2131 = frontier_phi_25_50_ladder_1;
        _2133 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2113 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1107, _1108, _1109), _2039);
        _2129 = _2113.x * cbModelParam._m0[1u].z;
        _2131 = _2113.y * cbModelParam._m0[1u].z;
        _2133 = _2113.z * cbModelParam._m0[1u].z;
    }
    float _2146 = (((_1134 * _1083) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2129 - _2030)) + _2030);
    float _2148 = (((_1134 * _1085) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2131 - _2032)) + _2032);
    float _2150 = (((_1134 * _1086) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2133 - _2034)) + _2034);
    float _2153 = fma(_2150, cbSceneParam._m0[89u].z, fma(_2148, cbSceneParam._m0[89u].y, _2146 * cbSceneParam._m0[89u].x));
    float _2156 = fma(_2150, cbSceneParam._m0[90u].z, fma(_2148, cbSceneParam._m0[90u].y, _2146 * cbSceneParam._m0[90u].x));
    float _2159 = fma(_2150, cbSceneParam._m0[91u].z, fma(_2148, cbSceneParam._m0[91u].y, _2146 * cbSceneParam._m0[91u].x));
    float _2193 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2197 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2201 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2205 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2206 = _2193 / _2205;
    float _2207 = _2197 / _2205;
    float _2208 = _2201 / _2205;
    float _2355;
    float _2356;
    float _2357;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2235 = ((uint(_2208 > cbSceneParam._m0[59u].y) + uint(_2208 > cbSceneParam._m0[59u].x)) + uint(_2208 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2236 = _2235 + 43u;
        uint _2244 = _2235 + 44u;
        uint _2252 = _2235 + 45u;
        uint _2260 = _2235 + 46u;
        float _2271 = fma(_2205, cbSceneParam._m0[_2236].w, fma(_2201, cbSceneParam._m0[_2236].z, fma(_2197, cbSceneParam._m0[_2236].y, _2193 * cbSceneParam._m0[_2236].x)));
        float _2275 = fma(_2205, cbSceneParam._m0[_2244].w, fma(_2201, cbSceneParam._m0[_2244].z, fma(_2197, cbSceneParam._m0[_2244].y, _2193 * cbSceneParam._m0[_2244].x)));
        float _2283 = fma(_2205, cbSceneParam._m0[_2260].w, fma(_2201, cbSceneParam._m0[_2260].z, fma(_2197, cbSceneParam._m0[_2260].y, _2193 * cbSceneParam._m0[_2260].x)));
        float _2288 = cbSceneParam._m0[33u].z * _2283;
        float _2290 = cbSceneParam._m0[33u].w * _2283;
        float _2293 = fma(_2205, cbSceneParam._m0[_2252].w, fma(_2201, cbSceneParam._m0[_2252].z, fma(_2197, cbSceneParam._m0[_2252].y, _2193 * cbSceneParam._m0[_2252].x))) / _2283;
        float _2341 = (cbSceneParam._m0[33u].x - sqrt(((_2207 * _2207) + (_2206 * _2206)) + (_2208 * _2208))) * cbSceneParam._m0[33u].y;
        float _4755 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2348 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2288 + _2271) / _2283, (_2290 + _2275) / _2283), _2293), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2290 + _2271) / _2283, (_2275 - _2288) / _2283), _2293), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2271 - _2288) / _2283, (_2275 - _2290) / _2283), _2293), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2271 - _2290) / _2283, (_2288 + _2275) / _2283), _2293), 0.0)).x), vec4(0.25)));
        _2355 = 1.0 - (_2348 * cbSceneParam._m0[34u].x);
        _2356 = 1.0 - (_2348 * cbSceneParam._m0[34u].y);
        _2357 = 1.0 - (_2348 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2355 = 1.0;
        _2356 = 1.0;
        _2357 = 1.0;
    }
    float _2421;
    float _2423;
    float _2425;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2409 = fma(_2205, cbSceneParam._m0[63u].w, fma(_2201, cbSceneParam._m0[63u].z, fma(_2197, cbSceneParam._m0[63u].y, _2193 * cbSceneParam._m0[63u].x)));
        float _2410 = fma(_2205, cbSceneParam._m0[60u].w, fma(_2201, cbSceneParam._m0[60u].z, fma(_2197, cbSceneParam._m0[60u].y, _2193 * cbSceneParam._m0[60u].x))) / _2409;
        float _2411 = fma(_2205, cbSceneParam._m0[61u].w, fma(_2201, cbSceneParam._m0[61u].z, fma(_2197, cbSceneParam._m0[61u].y, _2193 * cbSceneParam._m0[61u].x))) / _2409;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2410 >= cbSceneParam._m0[64u].x) && (_2411 >= cbSceneParam._m0[64u].y)) && (_2410 <= cbSceneParam._m0[64u].z)) && (_2411 <= cbSceneParam._m0[64u].w))
        {
            float _2549 = fma(_2205, cbSceneParam._m0[62u].w, fma(_2201, cbSceneParam._m0[62u].z, fma(_2197, cbSceneParam._m0[62u].y, _2193 * cbSceneParam._m0[62u].x))) / _2409;
            float _2553 = isnan(cbSceneParam._m0[41u].w) ? _2549 : (isnan(_2549) ? cbSceneParam._m0[41u].w : max(_2549, cbSceneParam._m0[41u].w));
            float _2596 = (cbSceneParam._m0[33u].x - sqrt(((_2207 * _2207) + (_2206 * _2206)) + (_2208 * _2208))) * cbSceneParam._m0[33u].y;
            float _4771 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
            float _2603 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2410, cbSceneParam._m0[33u].w + _2411), _2553), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2410, _2411 - cbSceneParam._m0[33u].z), _2553), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2410 - cbSceneParam._m0[33u].z, _2411 - cbSceneParam._m0[33u].w), _2553), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2410 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2411), _2553), 0.0)).x), vec4(0.25)));
            float _2607 = 1.0 - (_2603 * cbSceneParam._m0[34u].x);
            float _2608 = 1.0 - (_2603 * cbSceneParam._m0[34u].y);
            float _2609 = 1.0 - (_2603 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2609) ? _2357 : (isnan(_2357) ? _2609 : min(_2357, _2609));
            frontier_phi_37_36_ladder_1 = isnan(_2608) ? _2356 : (isnan(_2356) ? _2608 : min(_2356, _2608));
            frontier_phi_37_36_ladder_2 = isnan(_2607) ? _2355 : (isnan(_2355) ? _2607 : min(_2355, _2607));
        }
        else
        {
            frontier_phi_37_36_ladder = _2357;
            frontier_phi_37_36_ladder_1 = _2356;
            frontier_phi_37_36_ladder_2 = _2355;
        }
        _2421 = frontier_phi_37_36_ladder_2;
        _2423 = frontier_phi_37_36_ladder_1;
        _2425 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2421 = _2355;
        _2423 = _2356;
        _2425 = _2357;
    }
    uvec4 _2430 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2432 = _2430.x * 14u;
    uint _2433 = _2432 + 13u;
    float _2440 = _1099 + (-1.0);
    float _2445 = (cbLight._m0[_2433].x * _2440) + 1.0;
    float _2446 = (cbLight._m0[_2433].y * _2440) + 1.0;
    float _2447 = (cbLight._m0[_2433].z * _2440) + 1.0;
    float _2448 = (cbLight._m0[_2433].w * _2440) + 1.0;
    uint _2449 = _2432 + 5u;
    float _2455 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
    uint _2459 = _2432 + 4u;
    float _2468 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
    uint _2472 = _2432 | 1u;
    float _2483 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_921, _922, _923));
    float _2486 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_921, _922, _923));
    float _4807 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _4818 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2491 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * 0.3183098733425140380859375;
    float _2493 = (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * 0.3183098733425140380859375;
    float _2500 = ((cbLight._m0[_2449].x * _2455) * _2493) + (((cbLight._m0[_2459].x * _2421) * _2468) * _2491);
    float _2501 = ((_2455 * cbLight._m0[_2449].y) * _2493) + (((cbLight._m0[_2459].y * _2423) * _2468) * _2491);
    float _2502 = ((_2455 * cbLight._m0[_2449].z) * _2493) + (((cbLight._m0[_2459].z * _2425) * _2468) * _2491);
    uvec4 _2506 = floatBitsToUint(cbLight._m0[_2432 + 12u]);
    bool _2508 = _2506.x == 0u;
    float _2610;
    float _2612;
    float _2614;
    if (_2508)
    {
        _2610 = _2500;
        _2612 = _2501;
        _2614 = _2502;
    }
    else
    {
        uint _2618 = _2432 + 6u;
        float _2634 = (dot(vec3(cbLight._m0[_2432 + 2u].xyz), vec3(_921, _922, _923)) * 0.5) + 0.5;
        float _2635 = _2634 * _2634;
        float _4829 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2636 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2637 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
        _2610 = (((cbLight._m0[_2618].x * 0.3183098733425140380859375) * _2636) * _2637) + _2500;
        _2612 = (((cbLight._m0[_2618].y * 0.3183098733425140380859375) * _2636) * _2637) + _2501;
        _2614 = (((cbLight._m0[_2618].z * 0.3183098733425140380859375) * _2636) * _2637) + _2502;
    }
    bool _2617 = _2506.y == 0u;
    float _2672;
    float _2674;
    float _2676;
    if (_2617)
    {
        _2672 = _2610;
        _2674 = _2612;
        _2676 = _2614;
    }
    else
    {
        uint _2845 = _2432 + 7u;
        float _2861 = (dot(vec3(cbLight._m0[_2432 + 3u].xyz), vec3(_921, _922, _923)) * 0.5) + 0.5;
        float _2862 = _2861 * _2861;
        float _4845 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2863 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2864 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
        _2672 = (((cbLight._m0[_2845].x * 0.3183098733425140380859375) * _2863) * _2864) + _2610;
        _2674 = (((cbLight._m0[_2845].y * 0.3183098733425140380859375) * _2863) * _2864) + _2612;
        _2676 = (((cbLight._m0[_2845].z * 0.3183098733425140380859375) * _2863) * _2864) + _2614;
    }
    uint _2679 = _2432 + 8u;
    float _2692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _924) * 0.949999988079071044921875);
    float _2693 = _2692 * _2692;
    float _2694 = cbLight._m0[_2432].x + _1001;
    float _2695 = cbLight._m0[_2432].y + _1002;
    float _2696 = cbLight._m0[_2432].z + _1003;
    float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
    float _2701 = _2700 * _2694;
    float _2702 = _2700 * _2695;
    float _2703 = _2700 * _2696;
    float _2704 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2432].xyz));
    float _4861 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2707 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
    float _4872 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _2708 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
    float _2709 = dot(vec3(_921, _922, _923), vec3(_2701, _2702, _2703));
    float _4883 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2712 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
    float _2713 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2701, _2702, _2703));
    float _4894 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2717 = _2693 * _2693;
    float _2721 = ((_2712 * _2712) * (_2717 + (-1.0))) + 1.0;
    float _2729 = exp2(log2(1.0 - (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) * 5.0);
    float _2730 = 0.959999978542327880859375 - _1080;
    float _2732 = 0.959999978542327880859375 - _1081;
    float _2733 = 0.959999978542327880859375 - _1082;
    float _2740 = 1.0 - _2693;
    float _2751 = (0.5 / (((_2708 * ((_2707 * _2740) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2708 * _2740) + _2693) * _2707))) * _2707;
    float _4905 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
    float _2753 = (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2717 / ((_2721 * _2721) * 3.141590118408203125));
    uint _2767 = _2432 + 9u;
    float _2778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2472].w)) * _924) * 0.949999988079071044921875);
    float _2779 = _2778 * _2778;
    float _2780 = cbLight._m0[_2472].x + _1001;
    float _2781 = cbLight._m0[_2472].y + _1002;
    float _2782 = cbLight._m0[_2472].z + _1003;
    float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
    float _2787 = _2786 * _2780;
    float _2788 = _2786 * _2781;
    float _2789 = _2786 * _2782;
    float _2790 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2472].xyz));
    float _4916 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2793 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
    float _2794 = dot(vec3(_921, _922, _923), vec3(_2787, _2788, _2789));
    float _4927 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2797 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
    float _2798 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_2787, _2788, _2789));
    float _4938 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
    float _2802 = _2779 * _2779;
    float _2806 = ((_2797 * _2797) * (_2802 + (-1.0))) + 1.0;
    float _2813 = exp2(log2(1.0 - (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0)))) * 5.0);
    float _2820 = 1.0 - _2779;
    float _2830 = (0.5 / (((_2708 * ((_2793 * _2820) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2708 * _2820) + _2779) * _2793))) * _2793;
    float _4949 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
    float _2832 = (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2802 / ((_2806 * _2806) * 3.141590118408203125));
    float _2842 = (((((_2813 * _2730) + _1083) * cbLight._m0[_2767].x) * _2832) * _2455) + ((((cbLight._m0[_2679].x * _2421) * ((_2729 * _2730) + _1083)) * _2753) * _2468);
    float _2843 = (((((_2813 * _2732) + _1085) * cbLight._m0[_2767].y) * _2832) * _2455) + ((((cbLight._m0[_2679].y * _2423) * ((_2729 * _2732) + _1085)) * _2753) * _2468);
    float _2844 = (((((_2813 * _2733) + _1086) * cbLight._m0[_2767].z) * _2832) * _2455) + ((((cbLight._m0[_2679].z * _2425) * ((_2729 * _2733) + _1086)) * _2753) * _2468);
    float _2900;
    float _2902;
    float _2904;
    if (_2508)
    {
        _2900 = _2842;
        _2902 = _2843;
        _2904 = _2844;
    }
    else
    {
        uint _2906 = _2432 + 2u;
        uint _2910 = _2432 + 10u;
        float _2924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2906].w)) * _924) * 0.949999988079071044921875);
        float _2925 = _2924 * _2924;
        float _2926 = cbLight._m0[_2906].x + _1001;
        float _2927 = cbLight._m0[_2906].y + _1002;
        float _2928 = cbLight._m0[_2906].z + _1003;
        float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
        float _2933 = _2932 * _2926;
        float _2934 = _2932 * _2927;
        float _2935 = _2932 * _2928;
        float _2936 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2906].xyz));
        float _4960 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2939 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
        float _2940 = dot(vec3(_921, _922, _923), vec3(_2933, _2934, _2935));
        float _4971 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2943 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
        float _2944 = dot(vec3(cbLight._m0[_2906].xyz), vec3(_2933, _2934, _2935));
        float _4982 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2948 = _2925 * _2925;
        float _2952 = ((_2943 * _2943) * (_2948 + (-1.0))) + 1.0;
        float _2959 = exp2(log2(1.0 - (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0)))) * 5.0);
        float _2966 = 1.0 - _2925;
        float _2976 = (0.5 / (((_2708 * ((_2939 * _2966) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2708 * _2966) + _2925) * _2939))) * _2939;
        float _4993 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2978 = (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_2948 / ((_2952 * _2952) * 3.141590118408203125));
        float _2979 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
        _2900 = (((((_2959 * _2730) + _1083) * cbLight._m0[_2910].x) * _2978) * _2979) + _2842;
        _2902 = (((((_2959 * _2732) + _1085) * cbLight._m0[_2910].y) * _2978) * _2979) + _2843;
        _2904 = (((((_2959 * _2733) + _1086) * cbLight._m0[_2910].z) * _2978) * _2979) + _2844;
    }
    float _3010;
    float _3012;
    float _3014;
    if (_2617)
    {
        _3010 = _2900;
        _3012 = _2902;
        _3014 = _2904;
    }
    else
    {
        uint _3021 = _2432 + 3u;
        uint _3025 = _2432 + 11u;
        float _3039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3021].w)) * _924) * 0.949999988079071044921875);
        float _3040 = _3039 * _3039;
        float _3041 = cbLight._m0[_3021].x + _1001;
        float _3042 = cbLight._m0[_3021].y + _1002;
        float _3043 = cbLight._m0[_3021].z + _1003;
        float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
        float _3048 = _3047 * _3041;
        float _3049 = _3047 * _3042;
        float _3050 = _3047 * _3043;
        float _3051 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_3021].xyz));
        float _5009 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
        float _3054 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
        float _3055 = dot(vec3(_921, _922, _923), vec3(_3048, _3049, _3050));
        float _5020 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
        float _3058 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
        float _3059 = dot(vec3(cbLight._m0[_3021].xyz), vec3(_3048, _3049, _3050));
        float _5031 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
        float _3063 = _3040 * _3040;
        float _3067 = ((_3058 * _3058) * (_3063 + (-1.0))) + 1.0;
        float _3074 = exp2(log2(1.0 - (isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0)))) * 5.0);
        float _3081 = 1.0 - _3040;
        float _3091 = (0.5 / (((_2708 * ((_3054 * _3081) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_2708 * _3081) + _3040) * _3054))) * _3054;
        float _5042 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
        float _3093 = (isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0))) * (_3063 / ((_3067 * _3067) * 3.141590118408203125));
        float _3094 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
        _3010 = (((((_3074 * _2730) + _1083) * cbLight._m0[_3025].x) * _3093) * _3094) + _2900;
        _3012 = (((((_3074 * _2732) + _1085) * cbLight._m0[_3025].y) * _3093) * _3094) + _2902;
        _3014 = (((((_3074 * _2733) + _1086) * cbLight._m0[_3025].z) * _3093) * _3094) + _2904;
    }
    float _3160;
    float _3162;
    float _3164;
    float _3166;
    float _3168;
    float _3170;
    if (_2430.y == 0u)
    {
        uvec4 _3115 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3116 = _3115.x;
        uint _3127 = uint((float(_3115.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1022) / _3116))) + floor(float(uint(cbSceneParam._m0[85u].x * _1021) / _3116)));
        float _3137 = (log2(_2208 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3138 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
        uint _3141 = uint(isnan(14.0) ? _3138 : (isnan(_3138) ? 14.0 : min(_3138, 14.0)));
        uvec4 _3146 = texelFetch(g_lightClusterGridBuffer, int(((_3141 << 2u) + (_3127 << 6u)) >> 2u));
        uint _3147 = _3146.x;
        uint _3148 = _3115.z;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        if (((((1u << ((_3148 >> 4u) & 15u)) + 4294967295u) & _3147) == 0u) || ((_3148 & 240u) == 0u))
        {
            _3227 = 0.0;
            _3229 = 0.0;
            _3231 = 0.0;
            _3233 = 0.0;
            _3235 = 0.0;
            _3237 = 0.0;
        }
        else
        {
            float _3228;
            float _3230;
            float _3232;
            float _3234;
            float _3236;
            float _3238;
            float _3380 = 0.0;
            float _3381 = 0.0;
            float _3382 = 0.0;
            float _3383 = 0.0;
            float _3384 = 0.0;
            float _3385 = 0.0;
            uint _3386 = 0u;
            uint _3395;
            bool _3396;
            for (;;)
            {
                _3395 = texelFetch(g_lightClassification, int((((_3141 << 5u) + (_3127 << 9u)) + (_3386 << 2u)) >> 2u)).x;
                _3396 = _3395 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3396)
                {
                    frontier_phi_71_pred = _3385;
                    frontier_phi_71_pred_1 = _3384;
                    frontier_phi_71_pred_2 = _3383;
                    frontier_phi_71_pred_3 = _3382;
                    frontier_phi_71_pred_4 = _3381;
                    frontier_phi_71_pred_5 = _3380;
                }
                else
                {
                    float _3525;
                    float _3526;
                    float _3527;
                    float _3528;
                    float _3529;
                    float _3530;
                    uint _3531;
                    _3525 = _3380;
                    _3526 = _3381;
                    _3527 = _3382;
                    _3528 = _3383;
                    _3529 = _3384;
                    _3530 = _3385;
                    _3531 = _3395;
                    float _3452;
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    for (;;)
                    {
                        uint _3535 = uint(findLSB(_3531)) + (_3386 << 5u);
                        uint _3532 = (_3531 + 4294967295u) & _3531;
                        uint _3537 = _3535 * 48u;
                        vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3537)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 3u)).x));
                        uint _3557 = (_3535 * 48u) + 4u;
                        vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3557)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 3u)).x));
                        uint _3576 = (_3535 * 48u) + 8u;
                        vec3 _3587 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3576)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 2u)).x));
                        float _3591 = _3551.x - _2206;
                        float _3592 = _3551.y - _2207;
                        float _3593 = _3551.z - _2208;
                        float _3594 = dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593));
                        float _3597 = inversesqrt(_3594);
                        float _3598 = _3597 * _3591;
                        float _3599 = _3597 * _3592;
                        float _3600 = _3597 * _3593;
                        float _3601 = dot(vec3(_1040, _1043, _1046), vec3(_3598, _3599, _3600));
                        float _3606 = 1.0 - (_3594 * _3551.w);
                        float _5068 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3607 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                        float _3608 = sqrt(_3594) * _3570.w;
                        float _3611 = 1.39999997615814208984375 / (_3608 + 1.39999997615814208984375);
                        float _3612 = _3611 * _3611;
                        float _3615 = ((1.0 - _3612) * _3601) + _3612;
                        float _3618 = _3608 * _3608;
                        float _3622 = ((isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0))) * _3607) / ((_3618 * 0.699999988079071044921875) + 1.0);
                        float _3626 = (-0.0) - _2206;
                        float _3627 = (-0.0) - _2207;
                        float _3628 = (-0.0) - _2208;
                        float _3632 = inversesqrt(dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628)));
                        float _3633 = _3632 * _3626;
                        float _3634 = _3632 * _3627;
                        float _3635 = _3632 * _3628;
                        float _3642 = exp2(log2(1.0 / ((_3618 * 3.5) + 5.0)) * 0.25);
                        float _3643 = 1.0 - _1115;
                        float _3650 = sqrt(1.0 - ((1.0 - (_3643 * _3643)) * (1.0 - (_3642 * _3642))));
                        float _3651 = _3650 * _3650;
                        float _3652 = _3651 * _3651;
                        float _3653 = _3633 + _3598;
                        float _3654 = _3634 + _3599;
                        float _3655 = _3635 + _3600;
                        float _3659 = inversesqrt(dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655)));
                        float _3663 = dot(vec3(_1040, _1043, _1046), vec3(_3633, _3634, _3635));
                        float _5084 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3666 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                        float _3667 = dot(vec3(_1040, _1043, _1046), vec3(_3659 * _3653, _3659 * _3654, _3659 * _3655));
                        float _5095 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                        float _3670 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                        float _3674 = ((_3670 * _3670) * (_3652 + (-1.0))) + 1.0;
                        float _3675 = _3611 * _3651;
                        float _3676 = _3675 * _3675;
                        float _3679 = ((1.0 - _3676) * _3601) + _3676;
                        float _5106 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                        float _3680 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                        float _3681 = 1.0 - _3651;
                        float _3691 = (0.5 / (((_3680 * ((_3666 * _3681) + _3651)) + 9.9999999392252902907785028219223e-09) + (((_3680 * _3681) + _3651) * _3666))) * _3680;
                        float _5117 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                        float _3702 = (((_3652 * 3.1415927410125732421875) * (isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0)))) / ((_3674 * _3674) * ((_3618 * 2.1991131305694580078125) + 3.141590118408203125))) * _3607;
                        _3455 = (_3622 * _3570.x) + _3528;
                        _3456 = (_3622 * _3570.y) + _3529;
                        _3457 = (_3622 * _3570.z) + _3530;
                        _3452 = (_3702 * _3587.x) + _3525;
                        _3453 = (_3702 * _3587.y) + _3526;
                        _3454 = (_3702 * _3587.z) + _3527;
                        if (_3532 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3525 = _3452;
                            _3526 = _3453;
                            _3527 = _3454;
                            _3528 = _3455;
                            _3529 = _3456;
                            _3530 = _3457;
                            _3531 = _3532;
                        }
                    }
                    frontier_phi_71_pred = _3457;
                    frontier_phi_71_pred_1 = _3456;
                    frontier_phi_71_pred_2 = _3455;
                    frontier_phi_71_pred_3 = _3454;
                    frontier_phi_71_pred_4 = _3453;
                    frontier_phi_71_pred_5 = _3452;
                }
                _3238 = frontier_phi_71_pred;
                _3236 = frontier_phi_71_pred_1;
                _3234 = frontier_phi_71_pred_2;
                _3232 = frontier_phi_71_pred_3;
                _3230 = frontier_phi_71_pred_4;
                _3228 = frontier_phi_71_pred_5;
                uint _3387 = _3386 + 1u;
                if (_3387 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3380 = _3228;
                    _3381 = _3230;
                    _3382 = _3232;
                    _3383 = _3234;
                    _3384 = _3236;
                    _3385 = _3238;
                    _3386 = _3387;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3227 = _3228;
            _3229 = _3230;
            _3231 = _3232;
            _3233 = _3234;
            _3235 = _3236;
            _3237 = _3238;
        }
        uvec4 _3241 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3242 = _3241.z;
        uint _3244 = (_3242 >> 8u) & 15u;
        float _3348;
        float _3350;
        float _3352;
        float _3354;
        float _3356;
        float _3358;
        if (((4294967295u << _3244) & _3147) == 0u)
        {
            _3348 = _3227;
            _3350 = _3229;
            _3352 = _3231;
            _3354 = _3233;
            _3356 = _3235;
            _3358 = _3237;
        }
        else
        {
            float _3373 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
            float _3374 = _3373 * _2206;
            float _3375 = _3373 * _2207;
            float _3376 = _3373 * _2208;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3244 < ((_3242 >> 12u) & 15u))
            {
                float _3349;
                float _3351;
                float _3353;
                float _3355;
                float _3357;
                float _3359;
                float _3508 = _3227;
                float _3509 = _3229;
                float _3510 = _3231;
                float _3511 = _3233;
                float _3512 = _3235;
                float _3513 = _3237;
                uint _3514 = _3244;
                uint _3523;
                bool _3524;
                for (;;)
                {
                    _3523 = texelFetch(g_lightClassification, int((((_3141 << 5u) + (_3127 << 9u)) + (_3514 << 2u)) >> 2u)).x;
                    _3524 = _3523 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3524)
                    {
                        frontier_phi_82_pred = _3513;
                        frontier_phi_82_pred_1 = _3512;
                        frontier_phi_82_pred_2 = _3511;
                        frontier_phi_82_pred_3 = _3510;
                        frontier_phi_82_pred_4 = _3509;
                        frontier_phi_82_pred_5 = _3508;
                    }
                    else
                    {
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _4009;
                        float _4010;
                        float _4011;
                        float _4012;
                        float _4013;
                        float _4014;
                        float _3729 = _3508;
                        float _3730 = _3509;
                        float _3731 = _3510;
                        float _3732 = _3511;
                        float _3733 = _3512;
                        float _3734 = _3513;
                        uint _3735 = _3523;
                        uint _3736;
                        vec4 _3761;
                        float _3762;
                        vec4 _3777;
                        vec3 _3789;
                        vec4 _3804;
                        vec4 _3819;
                        float _3865;
                        bool _3866;
                        for (;;)
                        {
                            uint _3746 = ((_3514 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3735));
                            _3736 = (_3735 + 4294967295u) & _3735;
                            uint _3748 = _3746 * 40u;
                            _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            _3762 = _3761.w;
                            uint _3764 = (_3746 * 40u) + 4u;
                            _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            uint _3779 = (_3746 * 40u) + 8u;
                            _3789 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 2u)).x));
                            uint _3791 = (_3746 * 40u) + 16u;
                            _3804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 3u)).x));
                            uint _3806 = (_3746 * 40u) + 20u;
                            _3819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 3u)).x));
                            uint _3821 = (_3746 * 40u) + 24u;
                            vec4 _3834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 3u)).x));
                            uint _3840 = (_3746 * 40u) + 28u;
                            vec4 _3853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 3u)).x));
                            _3865 = fma(_2208, _3853.z, fma(_2207, _3853.y, _3853.x * _2206)) + _3853.w;
                            _3866 = !((fma(_2208, _3834.z, fma(_2207, _3834.y, _3834.x * _2206)) + _3834.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3866)
                            {
                                float _3893 = _3761.x - _2206;
                                float _3894 = _3761.y - _2207;
                                float _3895 = _3761.z - _2208;
                                float _3896 = dot(vec3(_3893, _3894, _3895), vec3(_3893, _3894, _3895));
                                float _3899 = inversesqrt(_3896);
                                float _3900 = _3899 * _3893;
                                float _3901 = _3899 * _3894;
                                float _3902 = _3899 * _3895;
                                float _3906 = 1.0 - (_3896 / (_3762 * _3762));
                                float _5128 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3907 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
                                float _3911 = sqrt(_3896) * _3777.w;
                                float _3913 = 1.39999997615814208984375 / (_3911 + 1.39999997615814208984375);
                                float _3914 = _3913 * _3913;
                                float _3917 = ((1.0 - _3914) * dot(vec3(_3900, _3901, _3902), vec3(_1040, _1043, _1046))) + _3914;
                                float _3920 = _3911 * _3911;
                                float _3924 = (fma(_2208, _3804.z, fma(_2207, _3804.y, _3804.x * _2206)) + _3804.w) / _3865;
                                float _3925 = (fma(_2208, _3819.z, fma(_2207, _3819.y, _3819.x * _2206)) + _3819.w) / _3865;
                                float _3929 = 1.0 - dot(vec2(_3924, _3925), vec2(_3924, _3925));
                                float _5144 = isnan(0.0) ? _3929 : (isnan(_3929) ? 0.0 : max(_3929, 0.0));
                                float _3930 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
                                float _3931 = _3930 * (((isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0))) * _3907) / ((_3920 * 0.699999988079071044921875) + 1.0));
                                float _3943 = exp2(log2(1.0 / ((_3920 * 3.5) + 5.0)) * 0.25);
                                float _3944 = 1.0 - _1115;
                                float _3951 = sqrt(1.0 - ((1.0 - (_3944 * _3944)) * (1.0 - (_3943 * _3943))));
                                float _3952 = _3951 * _3951;
                                float _3953 = _3952 * _3952;
                                float _3954 = _3900 - _3374;
                                float _3955 = _3901 - _3375;
                                float _3956 = _3902 - _3376;
                                float _3960 = inversesqrt(dot(vec3(_3954, _3955, _3956), vec3(_3954, _3955, _3956)));
                                float _3964 = dot(vec3(_1040, _1043, _1046), vec3((-0.0) - _3374, (-0.0) - _3375, (-0.0) - _3376));
                                float _5155 = isnan(0.0) ? _3964 : (isnan(_3964) ? 0.0 : max(_3964, 0.0));
                                float _3967 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
                                float _3968 = dot(vec3(_1040, _1043, _1046), vec3(_3960 * _3954, _3960 * _3955, _3960 * _3956));
                                float _5166 = isnan(0.0) ? _3968 : (isnan(_3968) ? 0.0 : max(_3968, 0.0));
                                float _3971 = isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0));
                                float _3975 = ((_3971 * _3971) * (_3953 + (-1.0))) + 1.0;
                                float _3976 = _3913 * _3952;
                                float _3977 = _3976 * _3976;
                                float _3983 = ((1.0 - _3977) * dot(vec3(_1040, _1043, _1046), vec3(_3900, _3901, _3902))) + _3977;
                                float _5177 = isnan(0.0) ? _3983 : (isnan(_3983) ? 0.0 : max(_3983, 0.0));
                                float _3984 = isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0));
                                float _3985 = 1.0 - _3952;
                                float _3995 = (0.5 / (((_3984 * ((_3967 * _3985) + _3952)) + 9.9999999392252902907785028219223e-09) + (((_3984 * _3985) + _3952) * _3967))) * _3984;
                                float _5188 = isnan(0.0) ? _3995 : (isnan(_3995) ? 0.0 : max(_3995, 0.0));
                                float _4005 = (_3930 * _3907) * (((_3953 * 3.1415927410125732421875) * (isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0)))) / ((_3975 * _3975) * ((_3920 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3931 * _3777.z;
                                frontier_phi_88_pred_1 = _3931 * _3777.y;
                                frontier_phi_88_pred_2 = _3931 * _3777.x;
                                frontier_phi_88_pred_3 = _4005 * _3789.z;
                                frontier_phi_88_pred_4 = _4005 * _3789.y;
                                frontier_phi_88_pred_5 = _4005 * _3789.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4014 = frontier_phi_88_pred;
                            _4013 = frontier_phi_88_pred_1;
                            _4012 = frontier_phi_88_pred_2;
                            _4011 = frontier_phi_88_pred_3;
                            _4010 = frontier_phi_88_pred_4;
                            _4009 = frontier_phi_88_pred_5;
                            _3719 = _4012 + _3732;
                            _3720 = _4013 + _3733;
                            _3721 = _4014 + _3734;
                            _3716 = _4009 + _3729;
                            _3717 = _4010 + _3730;
                            _3718 = _4011 + _3731;
                            if (_3736 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3729 = _3716;
                                _3730 = _3717;
                                _3731 = _3718;
                                _3732 = _3719;
                                _3733 = _3720;
                                _3734 = _3721;
                                _3735 = _3736;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3721;
                        frontier_phi_82_pred_1 = _3720;
                        frontier_phi_82_pred_2 = _3719;
                        frontier_phi_82_pred_3 = _3718;
                        frontier_phi_82_pred_4 = _3717;
                        frontier_phi_82_pred_5 = _3716;
                    }
                    _3359 = frontier_phi_82_pred;
                    _3357 = frontier_phi_82_pred_1;
                    _3355 = frontier_phi_82_pred_2;
                    _3353 = frontier_phi_82_pred_3;
                    _3351 = frontier_phi_82_pred_4;
                    _3349 = frontier_phi_82_pred_5;
                    uint _3515 = _3514 + 1u;
                    if (_3515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3508 = _3349;
                        _3509 = _3351;
                        _3510 = _3353;
                        _3511 = _3355;
                        _3512 = _3357;
                        _3513 = _3359;
                        _3514 = _3515;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3355;
                frontier_phi_63_64_ladder_1 = _3359;
                frontier_phi_63_64_ladder_2 = _3357;
                frontier_phi_63_64_ladder_3 = _3353;
                frontier_phi_63_64_ladder_4 = _3351;
                frontier_phi_63_64_ladder_5 = _3349;
            }
            else
            {
                frontier_phi_63_64_ladder = _3233;
                frontier_phi_63_64_ladder_1 = _3237;
                frontier_phi_63_64_ladder_2 = _3235;
                frontier_phi_63_64_ladder_3 = _3231;
                frontier_phi_63_64_ladder_4 = _3229;
                frontier_phi_63_64_ladder_5 = _3227;
            }
            _3348 = frontier_phi_63_64_ladder_5;
            _3350 = frontier_phi_63_64_ladder_4;
            _3352 = frontier_phi_63_64_ladder_3;
            _3354 = frontier_phi_63_64_ladder;
            _3356 = frontier_phi_63_64_ladder_2;
            _3358 = frontier_phi_63_64_ladder_1;
        }
        float _3363 = isnan(1.0) ? _1099 : (isnan(_1099) ? 1.0 : min(_1099, 1.0));
        _3160 = (_3363 * _3354) + _2672;
        _3162 = (_3363 * _3356) + _2674;
        _3164 = (_3363 * _3358) + _2676;
        _3166 = ((_3348 * _1083) * _3363) + _3010;
        _3168 = ((_3350 * _1085) * _3363) + _3012;
        _3170 = ((_3352 * _1086) * _3363) + _3014;
    }
    else
    {
        _3160 = _2672;
        _3162 = _2674;
        _3164 = _2676;
        _3166 = _3010;
        _3168 = _3012;
        _3170 = _3014;
    }
    float _5204 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _5215 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _5226 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _3187 = ((isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0))) * (_3160 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1099))) + ((_3166 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1938)) * cbPerFrame._m0[3u].x);
    float _3188 = ((isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0))) * (_3162 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1099))) + ((_3168 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1938)) * cbPerFrame._m0[3u].x);
    float _3189 = ((isnan(1.0) ? _5226 : (isnan(_5226) ? 1.0 : min(_5226, 1.0))) * (_3164 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1099))) + ((_3170 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1938)) * cbPerFrame._m0[3u].x);
    uint _3190 = _284 + 6u;
    float _3198 = _1021 / cbSceneParam._m0[86u].x;
    float _3199 = _1022 / cbSceneParam._m0[86u].y;
    vec4 _3213 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3198, _3199, (log2((isnan(cbSceneParam._m0[77u].w) ? _943 : (isnan(_943) ? cbSceneParam._m0[77u].w : min(_943, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3215 = _3213.x;
    float _3216 = _3213.y;
    float _3217 = _3213.z;
    float _3218 = _3213.w;
    float _3290;
    float _3292;
    float _3294;
    float _3296;
    if (_943 > cbSceneParam._m0[78u].w)
    {
        float _3252 = isnan(_943) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _943 : min(cbSceneParam._m0[80u].w, _943));
        float _3253 = _3252 / _943;
        float _3264 = _3253 * _994;
        float _3265 = _995 * _3253;
        float _3266 = (-0.0) - _3265;
        float _3268 = _3253 * _996;
        float _3270 = (cbSceneParam._m0[77u].w * _3266) / _3252;
        float _3271 = _3270 + cbSceneParam._m0[79u].w;
        float _3272 = cbSceneParam._m0[79u].w - _3265;
        float _3278 = sqrt(((_3264 * _3264) + (_3265 * _3265)) + (_3268 * _3268));
        float _3281 = (1.0 - (cbSceneParam._m0[77u].w / _3252)) * _3278;
        float _3286 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3288 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3465;
        if (abs((_3266 - _3270) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3465 = ((((_3271 > 0.0) ? exp2(_3286 * _3271) : (2.0 - exp2(_3288 * _3271))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3281;
        }
        else
        {
            float _3409 = 1.0 / cbSceneParam._m0[80u].x;
            float _3410 = isnan(_3272) ? _3271 : (isnan(_3271) ? _3272 : max(_3271, _3272));
            float _3411 = isnan(_3272) ? _3271 : (isnan(_3271) ? _3272 : min(_3271, _3272));
            float _3420 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : min(_3410, 0.0));
            float _3421 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : min(_3411, 0.0));
            _3465 = ((abs(_3278 / _3266) * cbSceneParam._m0[80u].y) * ((((_3420 - _3421) * 2.0) - ((exp2(_3286 * (isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0)))) - exp2(_3286 * (isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0))))) * _3409)) - ((exp2(_3288 * _3420) - exp2(_3288 * _3421)) * _3409))) + (_3281 * cbSceneParam._m0[80u].z);
        }
        vec4 _3467 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3198, _3199, 1.0), 0.0);
        float _3476 = exp2((_3465 * (-1.44269502162933349609375)) * (1.0 - _3467.w));
        float _3477 = log2(_3476);
        float _3493 = log2(_3218);
        _3290 = (exp2(_3493 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].x)) * _3467.x) / cbSceneParam._m0[78u].x)) + _3215;
        _3292 = (exp2(_3493 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].y)) * _3467.y) / cbSceneParam._m0[78u].y)) + _3216;
        _3294 = (exp2(_3493 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].z)) * _3467.z) / cbSceneParam._m0[78u].z)) + _3217;
        _3296 = _3476 * _3218;
    }
    else
    {
        _3290 = _3215;
        _3292 = _3216;
        _3294 = _3217;
        _3296 = _3218;
    }
    bool _3503;
    vec4 _3306;
    vec4 _3328;
    float _3330;
    float _3334;
    float _3335;
    float _3336;
    float _3337;
    bool _3347;
    for (;;)
    {
        _3306 = cbMatDynParam._m0[0u];
        float _3308 = roundEven(_3306.y);
        bool _3309 = _3308 == 3.0;
        float _3310 = log2(_3296);
        float _3317 = exp2(_3310 * cbSceneParam._m0[78u].x) * _3187;
        float _3318 = exp2(_3310 * cbSceneParam._m0[78u].y) * _3188;
        float _3319 = exp2(_3310 * cbSceneParam._m0[78u].z) * _3189;
        float _3326 = _1010 + (-0.5);
        _3328 = cbMtdParam._m0[1u];
        _3330 = _3328.y * _3326;
        float _3333 = (_3308 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3334 = _3333 * (_3309 ? _3317 : (_3317 + (cbSceneParam._m0[72u].w * _3290)));
        _3335 = _3333 * (_3309 ? _3318 : (_3318 + (cbSceneParam._m0[72u].w * _3292)));
        _3336 = _3333 * (_3309 ? _3319 : (_3319 + (cbSceneParam._m0[72u].w * _3294)));
        _3337 = _3326 * 0.999000012874603271484375;
        _3347 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3347)
        {
            if ((cbInstanceData._m0[_284 + 7u].x + _3337) < 0.5)
            {
                _3503 = true;
                break;
            }
        }
        uint _3444 = _1059 + uint(_3306.w);
        if ((cbInstanceData._m0[_3444].w < 1.0) && ((cbInstanceData._m0[_3444].w + _3337) < 0.5))
        {
            _3503 = true;
            break;
        }
        if ((_3330 + 1.0) < _3328.x)
        {
            _3503 = true;
            break;
        }
        _3503 = false;
        break;
    }
    float _3707;
    if (_3503)
    {
        discard_state = true;
        _3707 = 0.0;
    }
    else
    {
        _3707 = cbInstanceData._m0[_3190].w;
    }
    SV_Target.x = _3334;
    SV_Target.y = _3335;
    SV_Target.z = _3336;
    SV_Target.w = _3707;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3190].w;
    discard_exit();
}


