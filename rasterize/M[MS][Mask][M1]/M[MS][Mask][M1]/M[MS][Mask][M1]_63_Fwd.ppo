#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1406;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3732 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3743 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3754 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _410 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _412 = _410.x;
    float _424 = dot(vec4(_412, _410.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _441 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _378.x) * 2.0) - ((((_412 - _424) * cbMtdParam._m0[23u].w) + _424) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3765 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _449 = (_442 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _450 = (_442 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _451 = (_442 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _468 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _488 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _490 = _488.x;
    float _500 = dot(vec4(_490, _488.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _514 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _378.y) * 2.0) - ((((_490 - _500) * cbMtdParam._m0[23u].w) + _500) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3776 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _522 = (_515 * ((_468.x * cbMtdParam._m0[13u].x) - _449)) + _449;
    float _523 = (_515 * ((_468.y * cbMtdParam._m0[13u].y) - _450)) + _450;
    float _524 = (_515 * ((_468.z * cbMtdParam._m0[13u].z) - _451)) + _451;
    float _528 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _522;
    float _531 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _523;
    float _534 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _524;
    float _541 = ((_522 - _528) * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) + _528;
    float _542 = ((_523 - _531) * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) + _531;
    float _543 = ((_524 - _534) * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) + _534;
    vec4 _560 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _602 = _600.x;
    float _603 = _600.y;
    float _604 = _600.z;
    float _611 = ((_583.x - _602) * _442) + _602;
    float _612 = ((_583.y - _603) * _442) + _603;
    float _613 = ((_583.z - _604) * _442) + _604;
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _638 = ((_625.z - _613) * _515) + _613;
    float _641 = ((((_625.x - _611) * _515) + _611) * 2.0) + (-1.0);
    float _642 = ((((_625.y - _612) * _515) + _612) * 2.0) + (-1.0);
    float _643 = dot(vec2(_641, _642), vec2(_641, _642));
    float _3787 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _648 = sqrt(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))));
    vec4 _662 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _689 = _687.x;
    float _690 = 1.0 - _689;
    float _706 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_689 - _690) * cbMtdParam._m0[24u].z) + _690) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3798 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _707 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _714 = (_707 * (cbMtdParam._m0[17u].x - _541)) + _541;
    float _715 = (_707 * (cbMtdParam._m0[17u].y - _542)) + _542;
    float _716 = (_707 * (cbMtdParam._m0[17u].z - _543)) + _543;
    vec4 _742 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _744 = _742.x;
    float _762 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w)).x - _744) * _442) + _744;
    float _779 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _295) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _296) + cbTextureTilingScale._m0[21u].w)).x - _762) * _515) + _762;
    float _783 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _779) * cbMtdParam._m0[19u].z) + _779;
    float _785 = _783 - (_783 * _707);
    float _790 = (((_560.z - _638) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _638;
    float _794 = ((_662.z - _790) * cbMtdParam._m0[19u].w) + _790;
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _814 = (_807.x * 2.0) + (-1.0);
    float _815 = (_807.y * 2.0) + (-1.0);
    float _816 = dot(vec2(_814, _815), vec2(_814, _815));
    float _3809 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _824 = (_707 * (_807.z - _794)) + _794;
    float _833 = (_641 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_560.x * 2.0) + (-1.0)))) + (((_662.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _834 = (_642 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_560.y * 2.0) + (-1.0)))) + (((_662.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _846 = (((_814 - _833) + (cbMtdParam._m0[21u].x * _833)) * _707) + _833;
    float _847 = (((_815 - _834) + (cbMtdParam._m0[21u].x * _834)) * _707) + _834;
    float _848 = (_707 * (sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) - _648)) + _648;
    float _852 = cbMtdParam._m0[22u].x + _662.w;
    float _855 = fma(_848, _242 * NORMAL.x, fma(_847, _249 * TANGENT.x, (_235 * _227) * _846));
    float _858 = fma(_848, _242 * NORMAL.y, fma(_847, _249 * TANGENT.y, (_235 * _228) * _846));
    float _861 = fma(_848, _242 * NORMAL.z, fma(_847, _249 * TANGENT.z, (_235 * _229) * _846));
    float _865 = inversesqrt(dot(vec3(_855, _858, _861), vec3(_855, _858, _861)));
    float _866 = _865 * _855;
    float _867 = _865 * _858;
    float _868 = _865 * _861;
    float _3820 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _869 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _3842 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _3853 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _3864 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _3875 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _874 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _888 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _939 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _929);
    float _940 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _929);
    float _941 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _929);
    float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
    float _946 = _939 * _945;
    float _947 = _940 * _945;
    float _948 = _941 * _945;
    float _954 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _955 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _973 = fma(_868, cbSceneParam._m0[5u].z, fma(_867, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _866));
    float _976 = fma(_868, cbSceneParam._m0[6u].z, fma(_867, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _866));
    float _979 = fma(_868, cbSceneParam._m0[7u].z, fma(_867, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _866));
    uint _993 = (_276 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _999 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_993].x;
    float _1000 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_993].y;
    float _1001 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_993].z;
    float _3886 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1003 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1004 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _1005 = 1.0 - _874;
    float _1006 = _1002 * _1005;
    float _1007 = _1003 * _1005;
    float _1008 = _1004 * _1005;
    float _1013 = (_1002 + (-0.039999999105930328369140625)) * _874;
    float _1014 = (_1003 + (-0.039999999105930328369140625)) * _874;
    float _1015 = (_1004 + (-0.039999999105930328369140625)) * _874;
    float _1016 = _1013 + 0.039999999105930328369140625;
    float _1018 = _1014 + 0.039999999105930328369140625;
    float _1019 = _1015 + 0.039999999105930328369140625;
    vec4 _1028 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _954, cbSceneParam._m0[86u].y * _955));
    float _1032 = ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * TEXCOORD_5.w) * _1028.x;
    float _1033 = dot(vec3(_866, _867, _868), vec3(_946, _947, _948));
    float _1036 = _1033 * 2.0;
    float _1040 = (_1036 * _866) - _946;
    float _1041 = (_1036 * _867) - _947;
    float _1042 = (_1036 * _868) - _948;
    float _1046 = abs(dot(vec3(_946, _947, _948), vec3(_866, _867, _868)));
    float _3919 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1048 = sqrt(_869);
    float _1061 = exp2((_1048 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1048 * 3.0));
    float _1067 = (1.0 - _1061) * ((_1048 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1068 = _1061 * _1048;
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1405;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1130 = fma(_1104, cbModelParam._m0[26u].z, fma(_1100, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1096));
        float _1134 = fma(_1104, cbModelParam._m0[27u].z, fma(_1100, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1096));
        float _1138 = fma(_1104, cbModelParam._m0[28u].z, fma(_1100, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1096));
        float _1163 = _1096 + _866;
        float _1164 = _1100 + _867;
        float _1165 = _1104 + _868;
        float _1175 = fma(_1165, cbModelParam._m0[26u].z, fma(_1164, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163)) - _1130;
        float _1176 = fma(_1165, cbModelParam._m0[27u].z, fma(_1164, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163)) - _1134;
        float _1177 = fma(_1165, cbModelParam._m0[28u].z, fma(_1164, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163)) - _1138;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1130 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1134 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[34u].z) + ((((((_1138 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1233 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1199.x + (-0.5));
        float _1235 = _1233 * (_1199.y + (-0.5));
        float _1236 = _1233 * (_1199.z + (-0.5));
        float _1243 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1206.x + (-0.5));
        float _1245 = _1243 * (_1206.y + (-0.5));
        float _1246 = _1243 * (_1206.z + (-0.5));
        float _1253 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1213.x + (-0.5));
        float _1255 = _1253 * (_1213.y + (-0.5));
        float _1256 = _1253 * (_1213.z + (-0.5));
        float _1263 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1220.x + (-0.5));
        float _1265 = _1263 * (_1220.y + (-0.5));
        float _1266 = _1263 * (_1220.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1287 = (dot(vec3(_866, _867, _868), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1297 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3967 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1299 + 1.0))) + _1304) * _1267;
        float _1314 = _1235 * 0.5;
        float _1315 = _1245 * 0.5;
        float _1316 = _1255 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_866, _867, _868), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4000 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1341 + 1.0))) + _1346) * _1268;
        float _1356 = _1236 * 0.5;
        float _1357 = _1246 * 0.5;
        float _1358 = _1256 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_866, _867, _868), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4033 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1383 + 1.0))) + _1388) * _1269;
        _1405 = _1236;
        _1407 = _1235;
        _1408 = _1234;
        _1409 = _1246;
        _1410 = _1245;
        _1411 = _1244;
        _1412 = _1256;
        _1413 = _1255;
        _1414 = _1254;
        _1415 = _1269;
        _1416 = _1268;
        _1417 = _1267;
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
    }
    else
    {
        _1405 = _1406;
        _1407 = _1406;
        _1408 = _1406;
        _1409 = _1406;
        _1410 = _1406;
        _1411 = _1406;
        _1412 = _1406;
        _1413 = _1406;
        _1414 = _1406;
        _1415 = _1406;
        _1416 = _1406;
        _1417 = _1406;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1444 = fma(_1104, cbModelParam._m0[30u].z, fma(_1100, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1096));
        float _1448 = fma(_1104, cbModelParam._m0[31u].z, fma(_1100, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1096));
        float _1452 = fma(_1104, cbModelParam._m0[32u].z, fma(_1100, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1096));
        float _1475 = _1096 + _866;
        float _1476 = _1100 + _867;
        float _1477 = _1104 + _868;
        float _1487 = fma(_1477, cbModelParam._m0[30u].z, fma(_1476, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1475)) - _1444;
        float _1488 = fma(_1477, cbModelParam._m0[31u].z, fma(_1476, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1475)) - _1448;
        float _1489 = fma(_1477, cbModelParam._m0[32u].z, fma(_1476, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1475)) - _1452;
        float _1493 = inversesqrt(dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489)));
        float _1506 = ((_1493 * _1487) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1444 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1493 * _1488) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1448 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1493 * _1489) / cbModelParam._m0[35u].z) + ((((((_1452 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        float _1543 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1510.x + (-0.5));
        float _1545 = _1543 * (_1510.y + (-0.5));
        float _1546 = _1543 * (_1510.z + (-0.5));
        float _1553 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1517.x + (-0.5));
        float _1555 = _1553 * (_1517.y + (-0.5));
        float _1556 = _1553 * (_1517.z + (-0.5));
        float _1563 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1524.x + (-0.5));
        float _1565 = _1563 * (_1524.y + (-0.5));
        float _1566 = _1563 * (_1524.z + (-0.5));
        float _1573 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1531.x + (-0.5));
        float _1575 = _1573 * (_1531.y + (-0.5));
        float _1576 = _1573 * (_1531.z + (-0.5));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = _1544 * 0.5;
        float _1581 = _1554 * 0.5;
        float _1582 = _1564 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_866, _867, _868), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4096 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1607 + 1.0))) + _1612) * _1577;
        float _1622 = _1545 * 0.5;
        float _1623 = _1555 * 0.5;
        float _1624 = _1565 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_866, _867, _868), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4129 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1649 + 1.0))) + _1654) * _1578;
        float _1664 = _1546 * 0.5;
        float _1665 = _1556 * 0.5;
        float _1666 = _1566 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_866, _867, _868), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4162 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1691 + 1.0))) + _1696) * _1579;
        _1713 = _1546;
        _1714 = _1545;
        _1715 = _1544;
        _1716 = _1556;
        _1717 = _1555;
        _1718 = _1554;
        _1719 = _1566;
        _1720 = _1565;
        _1721 = _1564;
        _1722 = _1579;
        _1723 = _1578;
        _1724 = _1577;
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
    }
    else
    {
        _1713 = _1406;
        _1714 = _1406;
        _1715 = _1406;
        _1716 = _1406;
        _1717 = _1406;
        _1718 = _1406;
        _1719 = _1406;
        _1720 = _1406;
        _1721 = _1406;
        _1722 = _1406;
        _1723 = _1406;
        _1724 = _1406;
        _1725 = 0.0;
        _1726 = 0.0;
        _1727 = 0.0;
    }
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1418)) + _1418;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1419)) + _1419;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1420)) + _1420;
    float _1760 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1737));
    float _1781 = _1040 * 0.5;
    float _1782 = _1041 * 0.5;
    float _1783 = _1042 * 0.5;
    float _1784 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1787 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1790 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1824;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1797 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1405, _1409, _1412, _1415));
        float _1801 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1407, _1410, _1413, _1416));
        float _1805 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1812 = dot(vec4(cbModelParam._m0[39u]), vec4(_1781, _1782, _1783, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1835;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1826 = dot(vec4(cbModelParam._m0[40u]), vec4(_1781, _1782, _1783, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1826) ? 0.0 : (isnan(0.0) ? _1826 : max(0.0, _1826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1839 = (_1835 * cbModelParam._m0[1u].x) + (_1824 * (1.0 - cbModelParam._m0[1u].x));
    float _1849 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _869);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1849 : min(cbModelParam._m0[25u].z, _1849));
    float _1931;
    float _1933;
    float _1935;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1898 = fma(_1104, cbModelParam._m0[13u].z, fma(_1100, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1096)) + cbModelParam._m0[13u].w;
        float _1902 = fma(_1104, cbModelParam._m0[14u].z, fma(_1100, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1096)) + cbModelParam._m0[14u].w;
        float _1906 = fma(_1104, cbModelParam._m0[15u].z, fma(_1100, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1096)) + cbModelParam._m0[15u].w;
        float _1909 = fma(_1042, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1040));
        float _1912 = fma(_1042, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1040));
        float _1915 = fma(_1042, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1040));
        float _1943;
        if (_1909 > 0.0)
        {
            _1943 = abs((1.0 - _1898) / _1909);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1898 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1943 = frontier_phi_14_12_ladder;
        }
        float _2146;
        if (_1912 > 0.0)
        {
            _2146 = abs((1.0 - _1902) / _1912);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1902 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2146 = frontier_phi_23_19_ladder;
        }
        float _2400;
        if (_1915 > 0.0)
        {
            _2400 = abs((1.0 - _1906) / _1915);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1906 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2400 = frontier_phi_35_30_ladder;
        }
        float _2402 = isnan(_2146) ? _1943 : (isnan(_1943) ? _2146 : min(_1943, _2146));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1909) + _1898;
        float _2408 = (_2403 * _1912) + _1902;
        float _2409 = (_2403 * _1915) + _1906;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2412 = (-1.0) - _2410;
        float _2414 = _2410 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2409 > _2414) || ((_2409 < _2412) || ((_2408 > _2414) || ((_2408 < _2412) || ((_2407 < _2412) || (_2407 > _2414))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2409, cbModelParam._m0[9u].z, fma(_2408, cbModelParam._m0[9u].y, _2407 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2409, cbModelParam._m0[10u].z, fma(_2408, cbModelParam._m0[10u].y, _2407 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2409, cbModelParam._m0[11u].z, fma(_2408, cbModelParam._m0[11u].y, _2407 * cbModelParam._m0[11u].x))), _1850);
            frontier_phi_13_35_ladder = _2537.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2537.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2537.x * cbModelParam._m0[1u].y;
        }
        _1931 = frontier_phi_13_35_ladder_2;
        _1933 = frontier_phi_13_35_ladder_1;
        _1935 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1919 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1040, _1041, _1042), _1850);
        _1931 = _1919.x * cbModelParam._m0[1u].y;
        _1933 = _1919.y * cbModelParam._m0[1u].y;
        _1935 = _1919.z * cbModelParam._m0[1u].y;
    }
    float _1939 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _869);
    float _1940 = isnan(_1939) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1939 : min(cbModelParam._m0[25u].w, _1939));
    float _2030;
    float _2032;
    float _2034;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1994 = fma(_1104, cbModelParam._m0[21u].z, fma(_1100, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1096)) + cbModelParam._m0[21u].w;
        float _1998 = fma(_1104, cbModelParam._m0[22u].z, fma(_1100, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1096)) + cbModelParam._m0[22u].w;
        float _2002 = fma(_1104, cbModelParam._m0[23u].z, fma(_1100, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1096)) + cbModelParam._m0[23u].w;
        float _2005 = fma(_1042, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1040));
        float _2008 = fma(_1042, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1040));
        float _2011 = fma(_1042, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1040));
        float _2151;
        if (_2005 > 0.0)
        {
            _2151 = abs((1.0 - _1994) / _2005);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1994 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2151 = frontier_phi_25_21_ladder;
        }
        float _2427;
        if (_2008 > 0.0)
        {
            _2427 = abs((1.0 - _1998) / _2008);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1998 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2427 = frontier_phi_37_32_ladder;
        }
        float _2640;
        if (_2011 > 0.0)
        {
            _2640 = abs((1.0 - _2002) / _2011);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2002 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2640 = frontier_phi_46_43_ladder;
        }
        float _2642 = isnan(_2427) ? _2151 : (isnan(_2151) ? _2427 : min(_2151, _2427));
        float _2643 = isnan(_2640) ? _2642 : (isnan(_2642) ? _2640 : min(_2642, _2640));
        float _2647 = (_2643 * _2005) + _1994;
        float _2648 = (_2643 * _2008) + _1998;
        float _2649 = (_2643 * _2011) + _2002;
        float _2650 = _2643 * 9.9999997473787516355514526367188e-05;
        float _2651 = (-1.0) - _2650;
        float _2653 = _2650 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2649 > _2653) || ((_2649 < _2651) || ((_2648 > _2653) || ((_2648 < _2651) || ((_2647 < _2651) || (_2647 > _2653))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2649, cbModelParam._m0[17u].z, fma(_2648, cbModelParam._m0[17u].y, _2647 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2649, cbModelParam._m0[18u].z, fma(_2648, cbModelParam._m0[18u].y, _2647 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2649, cbModelParam._m0[19u].z, fma(_2648, cbModelParam._m0[19u].y, _2647 * cbModelParam._m0[19u].x))), _1940);
            frontier_phi_22_46_ladder = _2848.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2848.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2848.x * cbModelParam._m0[1u].z;
        }
        _2030 = frontier_phi_22_46_ladder_2;
        _2032 = frontier_phi_22_46_ladder_1;
        _2034 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2014 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1040, _1041, _1042), _1940);
        _2030 = _2014.x * cbModelParam._m0[1u].z;
        _2032 = _2014.y * cbModelParam._m0[1u].z;
        _2034 = _2014.z * cbModelParam._m0[1u].z;
    }
    float _2047 = (((_1067 * _1016) + _1068) * _1032) * ((cbModelParam._m0[1u].w * (_2030 - _1931)) + _1931);
    float _2049 = (((_1067 * _1018) + _1068) * _1032) * ((cbModelParam._m0[1u].w * (_2032 - _1933)) + _1933);
    float _2051 = (((_1067 * _1019) + _1068) * _1032) * ((cbModelParam._m0[1u].w * (_2034 - _1935)) + _1935);
    float _2054 = fma(_2051, cbSceneParam._m0[89u].z, fma(_2049, cbSceneParam._m0[89u].y, _2047 * cbSceneParam._m0[89u].x));
    float _2057 = fma(_2051, cbSceneParam._m0[90u].z, fma(_2049, cbSceneParam._m0[90u].y, _2047 * cbSceneParam._m0[90u].x));
    float _2060 = fma(_2051, cbSceneParam._m0[91u].z, fma(_2049, cbSceneParam._m0[91u].y, _2047 * cbSceneParam._m0[91u].x));
    uvec4 _2070 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2072 = _2070.x * 14u;
    uint _2073 = _2072 + 13u;
    float _2080 = _1032 + (-1.0);
    float _2085 = (cbLight._m0[_2073].x * _2080) + 1.0;
    float _2086 = (cbLight._m0[_2073].y * _2080) + 1.0;
    float _2087 = (cbLight._m0[_2073].z * _2080) + 1.0;
    float _2088 = (cbLight._m0[_2073].w * _2080) + 1.0;
    uint _2089 = _2072 + 5u;
    float _2095 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
    uint _2099 = _2072 + 4u;
    float _2105 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
    uint _2109 = _2072 | 1u;
    float _2120 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_866, _867, _868));
    float _2123 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_866, _867, _868));
    float _4298 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _4309 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2128 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.3183098733425140380859375;
    float _2130 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * 0.3183098733425140380859375;
    float _2137 = ((cbLight._m0[_2089].x * _2095) * _2130) + ((cbLight._m0[_2099].x * _2105) * _2128);
    float _2138 = ((_2095 * cbLight._m0[_2089].y) * _2130) + ((_2105 * cbLight._m0[_2099].y) * _2128);
    float _2139 = ((_2095 * cbLight._m0[_2089].z) * _2130) + ((_2105 * cbLight._m0[_2099].z) * _2128);
    uvec4 _2143 = floatBitsToUint(cbLight._m0[_2072 + 12u]);
    bool _2145 = _2143.x == 0u;
    float _2156;
    float _2158;
    float _2160;
    if (_2145)
    {
        _2156 = _2137;
        _2158 = _2138;
        _2160 = _2139;
    }
    else
    {
        uint _2164 = _2072 + 6u;
        float _2180 = (dot(vec3(cbLight._m0[_2072 + 2u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2181 = _2180 * _2180;
        float _4320 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2182 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2183 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2156 = (((cbLight._m0[_2164].x * 0.3183098733425140380859375) * _2182) * _2183) + _2137;
        _2158 = (((cbLight._m0[_2164].y * 0.3183098733425140380859375) * _2182) * _2183) + _2138;
        _2160 = (((cbLight._m0[_2164].z * 0.3183098733425140380859375) * _2182) * _2183) + _2139;
    }
    bool _2163 = _2143.y == 0u;
    float _2201;
    float _2203;
    float _2205;
    if (_2163)
    {
        _2201 = _2156;
        _2203 = _2158;
        _2205 = _2160;
    }
    else
    {
        uint _2371 = _2072 + 7u;
        float _2387 = (dot(vec3(cbLight._m0[_2072 + 3u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2388 = _2387 * _2387;
        float _4336 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2389 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2390 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2201 = (((cbLight._m0[_2371].x * 0.3183098733425140380859375) * _2389) * _2390) + _2156;
        _2203 = (((cbLight._m0[_2371].y * 0.3183098733425140380859375) * _2389) * _2390) + _2158;
        _2205 = (((cbLight._m0[_2371].z * 0.3183098733425140380859375) * _2389) * _2390) + _2160;
    }
    uint _2208 = _2072 + 8u;
    float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _869) * 0.949999988079071044921875);
    float _2222 = _2221 * _2221;
    float _2223 = cbLight._m0[_2072].x + _946;
    float _2224 = cbLight._m0[_2072].y + _947;
    float _2225 = cbLight._m0[_2072].z + _948;
    float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
    float _2230 = _2229 * _2223;
    float _2231 = _2229 * _2224;
    float _2232 = _2229 * _2225;
    float _2233 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2072].xyz));
    float _4352 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _2237 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2238 = dot(vec3(_866, _867, _868), vec3(_2230, _2231, _2232));
    float _4374 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2242 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2230, _2231, _2232));
    float _4385 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2246 = _2222 * _2222;
    float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
    float _2258 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
    float _2259 = 0.959999978542327880859375 - _1013;
    float _2261 = 0.959999978542327880859375 - _1014;
    float _2262 = 0.959999978542327880859375 - _1015;
    float _2269 = 1.0 - _2222;
    float _2280 = (0.5 / (((_2237 * ((_2236 * _2269) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2269) + _2222) * _2236))) * _2236;
    float _4396 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2282 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
    uint _2293 = _2072 + 9u;
    float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _869) * 0.949999988079071044921875);
    float _2305 = _2304 * _2304;
    float _2306 = cbLight._m0[_2109].x + _946;
    float _2307 = cbLight._m0[_2109].y + _947;
    float _2308 = cbLight._m0[_2109].z + _948;
    float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
    float _2313 = _2312 * _2306;
    float _2314 = _2312 * _2307;
    float _2315 = _2312 * _2308;
    float _2316 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2109].xyz));
    float _4407 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2320 = dot(vec3(_866, _867, _868), vec3(_2313, _2314, _2315));
    float _4418 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2324 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2313, _2314, _2315));
    float _4429 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2328 = _2305 * _2305;
    float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
    float _2339 = exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0);
    float _2346 = 1.0 - _2305;
    float _2356 = (0.5 / (((_2237 * ((_2319 * _2346) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2346) + _2305) * _2319))) * _2319;
    float _4440 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2358 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
    float _2368 = (((((_2339 * _2259) + _1016) * cbLight._m0[_2293].x) * _2358) * _2095) + (((((_2258 * _2259) + _1016) * cbLight._m0[_2208].x) * _2282) * _2105);
    float _2369 = (((((_2339 * _2261) + _1018) * cbLight._m0[_2293].y) * _2358) * _2095) + (((((_2258 * _2261) + _1018) * cbLight._m0[_2208].y) * _2282) * _2105);
    float _2370 = (((((_2339 * _2262) + _1019) * cbLight._m0[_2293].z) * _2358) * _2095) + (((((_2258 * _2262) + _1019) * cbLight._m0[_2208].z) * _2282) * _2105);
    float _2432;
    float _2434;
    float _2436;
    if (_2145)
    {
        _2432 = _2368;
        _2434 = _2369;
        _2436 = _2370;
    }
    else
    {
        uint _2438 = _2072 + 2u;
        uint _2442 = _2072 + 10u;
        float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _869) * 0.949999988079071044921875);
        float _2457 = _2456 * _2456;
        float _2458 = cbLight._m0[_2438].x + _946;
        float _2459 = cbLight._m0[_2438].y + _947;
        float _2460 = cbLight._m0[_2438].z + _948;
        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
        float _2465 = _2464 * _2458;
        float _2466 = _2464 * _2459;
        float _2467 = _2464 * _2460;
        float _2468 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2438].xyz));
        float _4451 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2472 = dot(vec3(_866, _867, _868), vec3(_2465, _2466, _2467));
        float _4462 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2476 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2465, _2466, _2467));
        float _4473 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2480 = _2457 * _2457;
        float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
        float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0);
        float _2498 = 1.0 - _2457;
        float _2508 = (0.5 / (((_2237 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2498) + _2457) * _2471))) * _2471;
        float _4484 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2432 = (((((_2491 * _2259) + _1016) * cbLight._m0[_2442].x) * _2510) * _2511) + _2368;
        _2434 = (((((_2491 * _2261) + _1018) * cbLight._m0[_2442].y) * _2510) * _2511) + _2369;
        _2436 = (((((_2491 * _2262) + _1019) * cbLight._m0[_2442].z) * _2510) * _2511) + _2370;
    }
    float _2546;
    float _2548;
    float _2550;
    if (_2163)
    {
        _2546 = _2432;
        _2548 = _2434;
        _2550 = _2436;
    }
    else
    {
        uint _2557 = _2072 + 3u;
        uint _2561 = _2072 + 11u;
        float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2557].w)) * _869) * 0.949999988079071044921875);
        float _2576 = _2575 * _2575;
        float _2577 = cbLight._m0[_2557].x + _946;
        float _2578 = cbLight._m0[_2557].y + _947;
        float _2579 = cbLight._m0[_2557].z + _948;
        float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
        float _2584 = _2583 * _2577;
        float _2585 = _2583 * _2578;
        float _2586 = _2583 * _2579;
        float _2587 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2557].xyz));
        float _4500 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2591 = dot(vec3(_866, _867, _868), vec3(_2584, _2585, _2586));
        float _4511 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2595 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_2584, _2585, _2586));
        float _4522 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2599 = _2576 * _2576;
        float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
        float _2610 = exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0);
        float _2617 = 1.0 - _2576;
        float _2627 = (0.5 / (((_2237 * ((_2590 * _2617) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2237 * _2617) + _2576) * _2590))) * _2590;
        float _4533 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2629 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
        float _2630 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2546 = (((((_2610 * _2259) + _1016) * cbLight._m0[_2561].x) * _2629) * _2630) + _2432;
        _2548 = (((((_2610 * _2261) + _1018) * cbLight._m0[_2561].y) * _2629) * _2630) + _2434;
        _2550 = (((((_2610 * _2262) + _1019) * cbLight._m0[_2561].z) * _2629) * _2630) + _2436;
    }
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_2070.y == 0u)
    {
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2705;
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2705;
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2705;
        uvec4 _2720 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2721 = _2720.x;
        uint _2732 = uint((float(_2720.y) * floor(float(uint(cbSceneParam._m0[85u].y * _955) / _2721))) + floor(float(uint(cbSceneParam._m0[85u].x * _954) / _2721)));
        float _2742 = (log2(_2708 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2743 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        uint _2746 = uint(isnan(14.0) ? _2743 : (isnan(_2743) ? 14.0 : min(_2743, 14.0)));
        uvec4 _2751 = texelFetch(g_lightClusterGridBuffer, int(((_2746 << 2u) + (_2732 << 6u)) >> 2u));
        uint _2752 = _2751.x;
        uint _2753 = _2720.z;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        if (((((1u << ((_2753 >> 4u) & 15u)) + 4294967295u) & _2752) == 0u) || ((_2753 & 240u) == 0u))
        {
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
        }
        else
        {
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            uint _3004 = 0u;
            uint _3013;
            bool _3014;
            for (;;)
            {
                _3013 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_3004 << 2u)) >> 2u)).x;
                _3014 = _3013 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3014)
                {
                    frontier_phi_61_pred = _2998;
                    frontier_phi_61_pred_1 = _3003;
                    frontier_phi_61_pred_2 = _3002;
                    frontier_phi_61_pred_3 = _3001;
                    frontier_phi_61_pred_4 = _3000;
                    frontier_phi_61_pred_5 = _2999;
                }
                else
                {
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    uint _3128;
                    _3122 = _2998;
                    _3123 = _2999;
                    _3124 = _3000;
                    _3125 = _3001;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3013;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    for (;;)
                    {
                        uint _3132 = uint(findLSB(_3128)) + (_3004 << 5u);
                        uint _3129 = (_3128 + 4294967295u) & _3128;
                        uint _3134 = _3132 * 48u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3134)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 3u)).x));
                        uint _3154 = (_3132 * 48u) + 4u;
                        vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 3u)).x));
                        uint _3173 = (_3132 * 48u) + 8u;
                        vec3 _3184 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x));
                        float _3188 = _3148.x - _2706;
                        float _3189 = _3148.y - _2707;
                        float _3190 = _3148.z - _2708;
                        float _3191 = dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190));
                        float _3194 = inversesqrt(_3191);
                        float _3195 = _3194 * _3188;
                        float _3196 = _3194 * _3189;
                        float _3197 = _3194 * _3190;
                        float _3198 = dot(vec3(_973, _976, _979), vec3(_3195, _3196, _3197));
                        float _3203 = 1.0 - (_3191 * _3148.w);
                        float _4559 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3205 = sqrt(_3191) * _3167.w;
                        float _3208 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                        float _3209 = _3208 * _3208;
                        float _3212 = ((1.0 - _3209) * _3198) + _3209;
                        float _3215 = _3205 * _3205;
                        float _3219 = ((isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * _3204) / ((_3215 * 0.699999988079071044921875) + 1.0);
                        float _3223 = (-0.0) - _2706;
                        float _3224 = (-0.0) - _2707;
                        float _3225 = (-0.0) - _2708;
                        float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                        float _3230 = _3229 * _3223;
                        float _3231 = _3229 * _3224;
                        float _3232 = _3229 * _3225;
                        float _3240 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                        float _3241 = 1.0 - _1048;
                        float _3248 = sqrt(1.0 - ((1.0 - (_3241 * _3241)) * (1.0 - (_3240 * _3240))));
                        float _3249 = _3248 * _3248;
                        float _3250 = _3249 * _3249;
                        float _3251 = _3230 + _3195;
                        float _3252 = _3231 + _3196;
                        float _3253 = _3232 + _3197;
                        float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                        float _3261 = dot(vec3(_973, _976, _979), vec3(_3230, _3231, _3232));
                        float _4575 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3264 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3265 = dot(vec3(_973, _976, _979), vec3(_3257 * _3251, _3257 * _3252, _3257 * _3253));
                        float _4586 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3268 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3272 = ((_3268 * _3268) * (_3250 + (-1.0))) + 1.0;
                        float _3273 = _3208 * _3249;
                        float _3274 = _3273 * _3273;
                        float _3277 = ((1.0 - _3274) * _3198) + _3274;
                        float _4597 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3278 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3279 = 1.0 - _3249;
                        float _3289 = (0.5 / (((_3278 * ((_3264 * _3279) + _3249)) + 9.9999999392252902907785028219223e-09) + (((_3278 * _3279) + _3249) * _3264))) * _3278;
                        float _4608 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3300 = (((_3250 * 3.1415927410125732421875) * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) / ((_3272 * _3272) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125))) * _3204;
                        _3057 = (_3219 * _3167.x) + _3125;
                        _3058 = (_3219 * _3167.y) + _3126;
                        _3059 = (_3219 * _3167.z) + _3127;
                        _3054 = (_3300 * _3184.x) + _3122;
                        _3055 = (_3300 * _3184.y) + _3123;
                        _3056 = (_3300 * _3184.z) + _3124;
                        if (_3129 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3122 = _3054;
                            _3123 = _3055;
                            _3124 = _3056;
                            _3125 = _3057;
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3129;
                        }
                    }
                    frontier_phi_61_pred = _3054;
                    frontier_phi_61_pred_1 = _3059;
                    frontier_phi_61_pred_2 = _3058;
                    frontier_phi_61_pred_3 = _3057;
                    frontier_phi_61_pred_4 = _3056;
                    frontier_phi_61_pred_5 = _3055;
                }
                _2854 = frontier_phi_61_pred;
                _2864 = frontier_phi_61_pred_1;
                _2862 = frontier_phi_61_pred_2;
                _2860 = frontier_phi_61_pred_3;
                _2858 = frontier_phi_61_pred_4;
                _2856 = frontier_phi_61_pred_5;
                uint _3005 = _3004 + 1u;
                if (_3005 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2998 = _2854;
                    _2999 = _2856;
                    _3000 = _2858;
                    _3001 = _2860;
                    _3002 = _2862;
                    _3003 = _2864;
                    _3004 = _3005;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
        }
        uvec4 _2867 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2868 = _2867.z;
        uint _2870 = (_2868 >> 8u) & 15u;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        if (((4294967295u << _2870) & _2752) == 0u)
        {
            _2966 = _2853;
            _2968 = _2855;
            _2970 = _2857;
            _2972 = _2859;
            _2974 = _2861;
            _2976 = _2863;
        }
        else
        {
            float _2991 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
            float _2992 = _2991 * _2706;
            float _2993 = _2991 * _2707;
            float _2994 = _2991 * _2708;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2870 < ((_2868 >> 12u) & 15u))
            {
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _3105 = _2853;
                float _3106 = _2855;
                float _3107 = _2857;
                float _3108 = _2859;
                float _3109 = _2861;
                float _3110 = _2863;
                uint _3111 = _2870;
                uint _3120;
                bool _3121;
                for (;;)
                {
                    _3120 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_3111 << 2u)) >> 2u)).x;
                    _3121 = _3120 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3121)
                    {
                        frontier_phi_67_pred = _3108;
                        frontier_phi_67_pred_1 = _3109;
                        frontier_phi_67_pred_2 = _3110;
                        frontier_phi_67_pred_3 = _3107;
                        frontier_phi_67_pred_4 = _3106;
                        frontier_phi_67_pred_5 = _3105;
                    }
                    else
                    {
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3318 = _3105;
                        float _3319 = _3106;
                        float _3320 = _3107;
                        float _3321 = _3108;
                        float _3322 = _3109;
                        float _3323 = _3110;
                        uint _3324 = _3120;
                        uint _3325;
                        vec4 _3350;
                        float _3351;
                        vec4 _3366;
                        vec3 _3378;
                        vec4 _3393;
                        vec4 _3408;
                        float _3454;
                        bool _3455;
                        for (;;)
                        {
                            uint _3335 = ((_3111 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3324));
                            _3325 = (_3324 + 4294967295u) & _3324;
                            uint _3337 = _3335 * 40u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            _3351 = _3350.w;
                            uint _3353 = (_3335 * 40u) + 4u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3335 * 40u) + 8u;
                            _3378 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x));
                            uint _3380 = (_3335 * 40u) + 16u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3335 * 40u) + 20u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3410 = (_3335 * 40u) + 24u;
                            vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3429 = (_3335 * 40u) + 28u;
                            vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            _3454 = fma(_2708, _3442.z, fma(_2707, _3442.y, _3442.x * _2706)) + _3442.w;
                            _3455 = !((fma(_2708, _3423.z, fma(_2707, _3423.y, _3423.x * _2706)) + _3423.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3455)
                            {
                                float _3482 = _3350.x - _2706;
                                float _3483 = _3350.y - _2707;
                                float _3484 = _3350.z - _2708;
                                float _3485 = dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484));
                                float _3488 = inversesqrt(_3485);
                                float _3489 = _3488 * _3482;
                                float _3490 = _3488 * _3483;
                                float _3491 = _3488 * _3484;
                                float _3495 = 1.0 - (_3485 / (_3351 * _3351));
                                float _4619 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3500 = sqrt(_3485) * _3366.w;
                                float _3502 = 1.39999997615814208984375 / (_3500 + 1.39999997615814208984375);
                                float _3503 = _3502 * _3502;
                                float _3506 = ((1.0 - _3503) * dot(vec3(_3489, _3490, _3491), vec3(_973, _976, _979))) + _3503;
                                float _3509 = _3500 * _3500;
                                float _3513 = (fma(_2708, _3393.z, fma(_2707, _3393.y, _3393.x * _2706)) + _3393.w) / _3454;
                                float _3514 = (fma(_2708, _3408.z, fma(_2707, _3408.y, _3408.x * _2706)) + _3408.w) / _3454;
                                float _3518 = 1.0 - dot(vec2(_3513, _3514), vec2(_3513, _3514));
                                float _4635 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3520 = _3519 * (((isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0))) * _3496) / ((_3509 * 0.699999988079071044921875) + 1.0));
                                float _3532 = exp2(log2(1.0 / ((_3509 * 3.5) + 5.0)) * 0.25);
                                float _3533 = 1.0 - _1048;
                                float _3540 = sqrt(1.0 - ((1.0 - (_3533 * _3533)) * (1.0 - (_3532 * _3532))));
                                float _3541 = _3540 * _3540;
                                float _3542 = _3541 * _3541;
                                float _3543 = _3489 - _2992;
                                float _3544 = _3490 - _2993;
                                float _3545 = _3491 - _2994;
                                float _3549 = inversesqrt(dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545)));
                                float _3553 = dot(vec3(_973, _976, _979), vec3((-0.0) - _2992, (-0.0) - _2993, (-0.0) - _2994));
                                float _4646 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3556 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3557 = dot(vec3(_973, _976, _979), vec3(_3549 * _3543, _3549 * _3544, _3549 * _3545));
                                float _4657 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3560 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3564 = ((_3560 * _3560) * (_3542 + (-1.0))) + 1.0;
                                float _3565 = _3502 * _3541;
                                float _3566 = _3565 * _3565;
                                float _3572 = ((1.0 - _3566) * dot(vec3(_973, _976, _979), vec3(_3489, _3490, _3491))) + _3566;
                                float _4668 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3573 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3574 = 1.0 - _3541;
                                float _3584 = (0.5 / (((_3573 * ((_3556 * _3574) + _3541)) + 9.9999999392252902907785028219223e-09) + (((_3573 * _3574) + _3541) * _3556))) * _3573;
                                float _4679 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3594 = (_3519 * _3496) * (((_3542 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3564 * _3564) * ((_3509 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3594 * _3378.x;
                                frontier_phi_73_pred_1 = _3594 * _3378.y;
                                frontier_phi_73_pred_2 = _3520 * _3366.z;
                                frontier_phi_73_pred_3 = _3520 * _3366.y;
                                frontier_phi_73_pred_4 = _3520 * _3366.x;
                                frontier_phi_73_pred_5 = _3594 * _3378.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3598 = frontier_phi_73_pred;
                            _3599 = frontier_phi_73_pred_1;
                            _3603 = frontier_phi_73_pred_2;
                            _3602 = frontier_phi_73_pred_3;
                            _3601 = frontier_phi_73_pred_4;
                            _3600 = frontier_phi_73_pred_5;
                            _3308 = _3601 + _3321;
                            _3309 = _3602 + _3322;
                            _3310 = _3603 + _3323;
                            _3305 = _3598 + _3318;
                            _3306 = _3599 + _3319;
                            _3307 = _3600 + _3320;
                            if (_3325 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3325;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3308;
                        frontier_phi_67_pred_1 = _3309;
                        frontier_phi_67_pred_2 = _3310;
                        frontier_phi_67_pred_3 = _3307;
                        frontier_phi_67_pred_4 = _3306;
                        frontier_phi_67_pred_5 = _3305;
                    }
                    _2973 = frontier_phi_67_pred;
                    _2975 = frontier_phi_67_pred_1;
                    _2977 = frontier_phi_67_pred_2;
                    _2971 = frontier_phi_67_pred_3;
                    _2969 = frontier_phi_67_pred_4;
                    _2967 = frontier_phi_67_pred_5;
                    uint _3112 = _3111 + 1u;
                    if (_3112 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3105 = _2967;
                        _3106 = _2969;
                        _3107 = _2971;
                        _3108 = _2973;
                        _3109 = _2975;
                        _3110 = _2977;
                        _3111 = _3112;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2975;
                frontier_phi_55_56_ladder_1 = _2977;
                frontier_phi_55_56_ladder_2 = _2973;
                frontier_phi_55_56_ladder_3 = _2971;
                frontier_phi_55_56_ladder_4 = _2969;
                frontier_phi_55_56_ladder_5 = _2967;
            }
            else
            {
                frontier_phi_55_56_ladder = _2861;
                frontier_phi_55_56_ladder_1 = _2863;
                frontier_phi_55_56_ladder_2 = _2859;
                frontier_phi_55_56_ladder_3 = _2857;
                frontier_phi_55_56_ladder_4 = _2855;
                frontier_phi_55_56_ladder_5 = _2853;
            }
            _2966 = frontier_phi_55_56_ladder_5;
            _2968 = frontier_phi_55_56_ladder_4;
            _2970 = frontier_phi_55_56_ladder_3;
            _2972 = frontier_phi_55_56_ladder_2;
            _2974 = frontier_phi_55_56_ladder;
            _2976 = frontier_phi_55_56_ladder_1;
        }
        float _2981 = isnan(1.0) ? _1032 : (isnan(_1032) ? 1.0 : min(_1032, 1.0));
        _2765 = (_2981 * _2972) + _2201;
        _2767 = (_2981 * _2974) + _2203;
        _2769 = (_2981 * _2976) + _2205;
        _2771 = ((_2966 * _1016) * _2981) + _2546;
        _2773 = ((_2968 * _1018) * _2981) + _2548;
        _2775 = ((_2970 * _1019) * _2981) + _2550;
    }
    else
    {
        _2765 = _2201;
        _2767 = _2203;
        _2769 = _2205;
        _2771 = _2546;
        _2773 = _2548;
        _2775 = _2550;
    }
    float _4695 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _4706 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4717 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    uint _2795 = _276 + 6u;
    float _2803 = _954 / cbSceneParam._m0[86u].x;
    float _2804 = _955 / cbSceneParam._m0[86u].y;
    vec4 _2818 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, (log2((isnan(cbSceneParam._m0[77u].w) ? _888 : (isnan(_888) ? cbSceneParam._m0[77u].w : min(_888, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2820 = _2818.x;
    float _2821 = _2818.y;
    float _2822 = _2818.z;
    float _2823 = _2818.w;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    if (_888 > cbSceneParam._m0[78u].w)
    {
        float _2878 = isnan(_888) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _888 : min(cbSceneParam._m0[80u].w, _888));
        float _2879 = _2878 / _888;
        float _2890 = _2879 * _939;
        float _2891 = _940 * _2879;
        float _2892 = (-0.0) - _2891;
        float _2894 = _2879 * _941;
        float _2896 = (cbSceneParam._m0[77u].w * _2892) / _2878;
        float _2897 = _2896 + cbSceneParam._m0[79u].w;
        float _2898 = cbSceneParam._m0[79u].w - _2891;
        float _2904 = sqrt(((_2890 * _2890) + (_2891 * _2891)) + (_2894 * _2894));
        float _2907 = (1.0 - (cbSceneParam._m0[77u].w / _2878)) * _2904;
        float _2912 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2914 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3067;
        if (abs((_2892 - _2896) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3067 = ((((_2897 > 0.0) ? exp2(_2912 * _2897) : (2.0 - exp2(_2914 * _2897))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2907;
        }
        else
        {
            float _3027 = 1.0 / cbSceneParam._m0[80u].x;
            float _3028 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : max(_2897, _2898));
            float _3029 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : min(_2897, _2898));
            float _3038 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : min(_3028, 0.0));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            _3067 = ((abs(_2904 / _2892) * cbSceneParam._m0[80u].y) * ((((_3038 - _3039) * 2.0) - ((exp2(_2912 * (isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0)))) - exp2(_2912 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0))))) * _3027)) - ((exp2(_2914 * _3038) - exp2(_2914 * _3039)) * _3027))) + (_2907 * cbSceneParam._m0[80u].z);
        }
        vec4 _3069 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, 1.0), 0.0);
        float _3078 = exp2((_3067 * (-1.44269502162933349609375)) * (1.0 - _3069.w));
        float _3079 = log2(_3078);
        float _3095 = log2(_2823);
        _2916 = (exp2(_3095 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].x)) * _3069.x) / cbSceneParam._m0[78u].x)) + _2820;
        _2918 = (exp2(_3095 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].y)) * _3069.y) / cbSceneParam._m0[78u].y)) + _2821;
        _2920 = (exp2(_3095 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].z)) * _3069.z) / cbSceneParam._m0[78u].z)) + _2822;
        _2922 = _3078 * _2823;
    }
    else
    {
        _2916 = _2820;
        _2918 = _2821;
        _2920 = _2822;
        _2922 = _2823;
    }
    float _2934 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2935 = _2934 == 3.0;
    float _2936 = log2(_2922);
    float _2943 = exp2(_2936 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2765 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1032))) + ((_2771 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1839)) * cbPerFrame._m0[3u].x));
    float _2944 = exp2(_2936 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2767 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1032))) + ((_2773 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1839)) * cbPerFrame._m0[3u].x));
    float _2945 = exp2(_2936 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2769 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1032))) + ((_2775 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1839)) * cbPerFrame._m0[3u].x));
    float _2954 = (_2934 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2954 * (_2935 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2916)));
    SV_Target.y = _2954 * (_2935 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2918)));
    SV_Target.z = _2954 * (_2935 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2920)));
    SV_Target.w = cbInstanceData._m0[_2795].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2795].w;
}


