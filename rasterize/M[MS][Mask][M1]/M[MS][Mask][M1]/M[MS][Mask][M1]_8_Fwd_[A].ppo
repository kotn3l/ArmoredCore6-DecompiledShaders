#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1343;
float _3726;
float _3727;
float _3728;
float _3729;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3738 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3749 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3760 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _410 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _412 = _410.x;
    float _424 = dot(vec4(_412, _410.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _441 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_412 - _424) * cbMtdParam._m0[23u].w) + _424) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3771 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _449 = (_442 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _450 = (_442 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _451 = (_442 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _455 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _449;
    float _458 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _450;
    float _461 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _451;
    float _468 = ((_449 - _455) * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) + _455;
    float _469 = ((_450 - _458) * (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) + _458;
    float _470 = ((_451 - _461) * (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) + _461;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _529 = _525.z;
    float _538 = ((_508.z - _529) * _442) + _529;
    float _541 = ((((_508.x - _527) * _442) + _527) * 2.0) + (-1.0);
    float _542 = ((((_508.y - _528) * _442) + _528) * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3782 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _548 = sqrt(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _582 = (_541 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_483.x * 2.0) + (-1.0)))) + (((_570.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _583 = (_542 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_483.y * 2.0) + (-1.0)))) + (((_570.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _597 = _595.x;
    float _598 = 1.0 - _597;
    float _627 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_597 - _598) * cbMtdParam._m0[24u].w) + _598) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3793 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _636 = ((((cbMtdParam._m0[10u].x - _468) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _628) + _468;
    float _637 = ((((cbMtdParam._m0[10u].y - _469) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _628) + _469;
    float _638 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _470)) * _628) + _470;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _666 = _664.x;
    float _684 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _298) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _299) + cbTextureTilingScale._m0[9u].w)).x - _666) * _442) + _666;
    float _688 = ((_650.x - _684) * cbMtdParam._m0[19u].z) + _684;
    float _690 = _688 - (_688 * _628);
    float _695 = (((_483.z - _538) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _538;
    float _699 = ((_570.z - _695) * cbMtdParam._m0[19u].w) + _695;
    float _703 = ((cbMtdParam._m0[23u].x - _699) * _628) + _699;
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _728 = (_722.x * 2.0) + (-1.0);
    float _729 = (_722.y * 2.0) + (-1.0);
    float _730 = dot(vec2(_728, _729), vec2(_728, _729));
    float _3804 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _746 = (_628 * (((cbMtdParam._m0[22u].z * _582) - _582) + _728)) + _582;
    float _747 = (_628 * (((cbMtdParam._m0[22u].z * _583) - _583) + _729)) + _583;
    float _748 = (_628 * (sqrt(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) - _548)) + _548;
    float _750 = cbMtdParam._m0[22u].x + _570.w;
    float _753 = fma(_748, _247 * NORMAL.x, fma(_747, _254 * TANGENT.x, (_240 * _232) * _746));
    float _756 = fma(_748, _247 * NORMAL.y, fma(_747, _254 * TANGENT.y, (_240 * _233) * _746));
    float _759 = fma(_748, _247 * NORMAL.z, fma(_747, _254 * TANGENT.z, (_240 * _234) * _746));
    float _763 = inversesqrt(dot(vec3(_753, _756, _759), vec3(_753, _756, _759)));
    float _764 = _763 * _753;
    float _765 = _763 * _756;
    float _766 = _763 * _759;
    float _3815 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _767 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _3837 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3848 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3859 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3870 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _772 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _786 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _836 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _826);
    float _837 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _826);
    float _838 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _826);
    float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
    float _843 = _836 * _842;
    float _844 = _837 * _842;
    float _845 = _838 * _842;
    vec4 _850 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _852 = _850.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1024 = sqrt(((_836 * _836) + (_837 * _837)) + (_838 * _838));
        float _1030 = (cbMatDynParam._m0[5u].x * _1024) + cbMatDynParam._m0[5u].y;
        float _3881 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1035 = (cbMatDynParam._m0[5u].z * _1024) + cbMatDynParam._m0[5u].w;
        float _3892 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) - _1031)) + _1031) < ((_852 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _863 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _864 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _882 = fma(_766, cbSceneParam._m0[5u].z, fma(_765, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _764));
    float _885 = fma(_766, cbSceneParam._m0[6u].z, fma(_765, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _764));
    float _888 = fma(_766, cbSceneParam._m0[7u].z, fma(_765, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _764));
    uint _901 = _279 + 9u;
    uint _902 = _901 + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_902].z;
    float _3903 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _914 = 1.0 - _772;
    float _915 = _911 * _914;
    float _916 = _912 * _914;
    float _917 = _913 * _914;
    float _922 = (_911 + (-0.039999999105930328369140625)) * _772;
    float _923 = (_912 + (-0.039999999105930328369140625)) * _772;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _772;
    float _925 = _922 + 0.039999999105930328369140625;
    float _927 = _923 + 0.039999999105930328369140625;
    float _928 = _924 + 0.039999999105930328369140625;
    vec4 _937 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _863, cbSceneParam._m0[86u].y * _864));
    float _941 = ((isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * TEXCOORD_5.w) * _937.x;
    float _942 = dot(vec3(_764, _765, _766), vec3(_843, _844, _845));
    float _945 = _942 * 2.0;
    float _949 = (_945 * _764) - _843;
    float _950 = (_945 * _765) - _844;
    float _951 = (_945 * _766) - _845;
    float _955 = abs(dot(vec3(_843, _844, _845), vec3(_764, _765, _766)));
    float _3936 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _957 = sqrt(_767);
    float _970 = exp2((_957 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_957 * 3.0));
    float _976 = (1.0 - _970) * ((_957 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _977 = _970 * _957;
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1342;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1067 = fma(_1013, cbModelParam._m0[26u].z, fma(_1009, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1005));
        float _1071 = fma(_1013, cbModelParam._m0[27u].z, fma(_1009, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1005));
        float _1075 = fma(_1013, cbModelParam._m0[28u].z, fma(_1009, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1005));
        float _1100 = _1005 + _764;
        float _1101 = _1009 + _765;
        float _1102 = _1013 + _766;
        float _1112 = fma(_1102, cbModelParam._m0[26u].z, fma(_1101, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1100)) - _1067;
        float _1113 = fma(_1102, cbModelParam._m0[27u].z, fma(_1101, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1100)) - _1071;
        float _1114 = fma(_1102, cbModelParam._m0[28u].z, fma(_1101, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1100)) - _1075;
        float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
        float _1131 = ((_1118 * _1112) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1067 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1118 * _1113) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1071 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1118 * _1114) / cbModelParam._m0[34u].z) + ((((((_1075 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        float _1170 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1136.x + (-0.5));
        float _1172 = _1170 * (_1136.y + (-0.5));
        float _1173 = _1170 * (_1136.z + (-0.5));
        float _1180 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1143.x + (-0.5));
        float _1182 = _1180 * (_1143.y + (-0.5));
        float _1183 = _1180 * (_1143.z + (-0.5));
        float _1190 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1150.x + (-0.5));
        float _1192 = _1190 * (_1150.y + (-0.5));
        float _1193 = _1190 * (_1150.z + (-0.5));
        float _1200 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1157.x + (-0.5));
        float _1202 = _1200 * (_1157.y + (-0.5));
        float _1203 = _1200 * (_1157.z + (-0.5));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = _1171 * 0.5;
        float _1208 = _1181 * 0.5;
        float _1209 = _1191 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1224 = (dot(vec3(_764, _765, _766), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1234 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3984 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1236 + 1.0))) + _1241) * _1204;
        float _1251 = _1172 * 0.5;
        float _1252 = _1182 * 0.5;
        float _1253 = _1192 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_764, _765, _766), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _4017 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1278 + 1.0))) + _1283) * _1205;
        float _1293 = _1173 * 0.5;
        float _1294 = _1183 * 0.5;
        float _1295 = _1193 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_764, _765, _766), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4050 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1320 + 1.0))) + _1325) * _1206;
        _1342 = _1173;
        _1344 = _1172;
        _1345 = _1171;
        _1346 = _1183;
        _1347 = _1182;
        _1348 = _1181;
        _1349 = _1193;
        _1350 = _1192;
        _1351 = _1191;
        _1352 = _1206;
        _1353 = _1205;
        _1354 = _1204;
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
    }
    else
    {
        _1342 = _1343;
        _1344 = _1343;
        _1345 = _1343;
        _1346 = _1343;
        _1347 = _1343;
        _1348 = _1343;
        _1349 = _1343;
        _1350 = _1343;
        _1351 = _1343;
        _1352 = _1343;
        _1353 = _1343;
        _1354 = _1343;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1385 = fma(_1013, cbModelParam._m0[30u].z, fma(_1009, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1005));
        float _1389 = fma(_1013, cbModelParam._m0[31u].z, fma(_1009, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1005));
        float _1393 = fma(_1013, cbModelParam._m0[32u].z, fma(_1009, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1005));
        float _1416 = _1005 + _764;
        float _1417 = _1009 + _765;
        float _1418 = _1013 + _766;
        float _1428 = fma(_1418, cbModelParam._m0[30u].z, fma(_1417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1416)) - _1385;
        float _1429 = fma(_1418, cbModelParam._m0[31u].z, fma(_1417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1416)) - _1389;
        float _1430 = fma(_1418, cbModelParam._m0[32u].z, fma(_1417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1416)) - _1393;
        float _1434 = inversesqrt(dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430)));
        float _1447 = ((_1434 * _1428) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1385 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1434 * _1429) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1389 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1434 * _1430) / cbModelParam._m0[35u].z) + ((((((_1393 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        float _1484 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1451.x + (-0.5));
        float _1486 = _1484 * (_1451.y + (-0.5));
        float _1487 = _1484 * (_1451.z + (-0.5));
        float _1494 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1458.x + (-0.5));
        float _1496 = _1494 * (_1458.y + (-0.5));
        float _1497 = _1494 * (_1458.z + (-0.5));
        float _1504 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1465.x + (-0.5));
        float _1506 = _1504 * (_1465.y + (-0.5));
        float _1507 = _1504 * (_1465.z + (-0.5));
        float _1514 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1472.x + (-0.5));
        float _1516 = _1514 * (_1472.y + (-0.5));
        float _1517 = _1514 * (_1472.z + (-0.5));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = _1485 * 0.5;
        float _1522 = _1495 * 0.5;
        float _1523 = _1505 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_764, _765, _766), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4113 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1548 + 1.0))) + _1553) * _1518;
        float _1563 = _1486 * 0.5;
        float _1564 = _1496 * 0.5;
        float _1565 = _1506 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_764, _765, _766), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4146 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1590 + 1.0))) + _1595) * _1519;
        float _1605 = _1487 * 0.5;
        float _1606 = _1497 * 0.5;
        float _1607 = _1507 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_764, _765, _766), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4179 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1632 + 1.0))) + _1637) * _1520;
        _1654 = _1487;
        _1655 = _1486;
        _1656 = _1485;
        _1657 = _1497;
        _1658 = _1496;
        _1659 = _1495;
        _1660 = _1507;
        _1661 = _1506;
        _1662 = _1505;
        _1663 = _1520;
        _1664 = _1519;
        _1665 = _1518;
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
    }
    else
    {
        _1654 = _1343;
        _1655 = _1343;
        _1656 = _1343;
        _1657 = _1343;
        _1658 = _1343;
        _1659 = _1343;
        _1660 = _1343;
        _1661 = _1343;
        _1662 = _1343;
        _1663 = _1343;
        _1664 = _1343;
        _1665 = _1343;
        _1666 = 0.0;
        _1667 = 0.0;
        _1668 = 0.0;
    }
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1355)) + _1355;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1356)) + _1356;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1357)) + _1357;
    float _1701 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1704 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1707 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1678));
    float _1722 = _949 * 0.5;
    float _1723 = _950 * 0.5;
    float _1724 = _951 * 0.5;
    float _1725 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1728 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1731 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1765;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1738 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1342, _1346, _1349, _1352));
        float _1742 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1344, _1347, _1350, _1353));
        float _1746 = dot(vec4(_1722, _1723, _1724, 1.0), vec4(_1345, _1348, _1351, _1354));
        float _1753 = dot(vec4(cbModelParam._m0[39u]), vec4(_1722, _1723, _1724, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1776;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1767 = dot(vec4(cbModelParam._m0[40u]), vec4(_1722, _1723, _1724, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1780 = (_1776 * cbModelParam._m0[1u].x) + (_1765 * (1.0 - cbModelParam._m0[1u].x));
    float _1790 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _767);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1790 : min(cbModelParam._m0[25u].z, _1790));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1840 = fma(_1013, cbModelParam._m0[13u].z, fma(_1009, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005)) + cbModelParam._m0[13u].w;
        float _1844 = fma(_1013, cbModelParam._m0[14u].z, fma(_1009, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005)) + cbModelParam._m0[14u].w;
        float _1848 = fma(_1013, cbModelParam._m0[15u].z, fma(_1009, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005)) + cbModelParam._m0[15u].w;
        float _1851 = fma(_951, cbModelParam._m0[13u].z, fma(_950, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949));
        float _1854 = fma(_951, cbModelParam._m0[14u].z, fma(_950, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949));
        float _1857 = fma(_951, cbModelParam._m0[15u].z, fma(_950, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949));
        float _1885;
        if (_1851 > 0.0)
        {
            _1885 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1885 = frontier_phi_17_15_ladder;
        }
        float _2089;
        if (_1854 > 0.0)
        {
            _2089 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2089 = frontier_phi_26_22_ladder;
        }
        float _2343;
        if (_1857 > 0.0)
        {
            _2343 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2343 = frontier_phi_38_33_ladder;
        }
        float _2345 = isnan(_2089) ? _1885 : (isnan(_1885) ? _2089 : min(_1885, _2089));
        float _2346 = isnan(_2343) ? _2345 : (isnan(_2345) ? _2343 : min(_2345, _2343));
        float _2350 = (_2346 * _1851) + _1840;
        float _2351 = (_2346 * _1854) + _1844;
        float _2352 = (_2346 * _1857) + _1848;
        float _2353 = _2346 * 9.9999997473787516355514526367188e-05;
        float _2355 = (-1.0) - _2353;
        float _2357 = _2353 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2352 > _2357) || ((_2352 < _2355) || ((_2351 > _2357) || ((_2351 < _2355) || ((_2350 < _2355) || (_2350 > _2357))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2480 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2352, cbModelParam._m0[9u].z, fma(_2351, cbModelParam._m0[9u].y, _2350 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2352, cbModelParam._m0[10u].z, fma(_2351, cbModelParam._m0[10u].y, _2350 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2352, cbModelParam._m0[11u].z, fma(_2351, cbModelParam._m0[11u].y, _2350 * cbModelParam._m0[11u].x))), _1791);
            frontier_phi_16_38_ladder = _2480.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2480.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2480.x * cbModelParam._m0[1u].y;
        }
        _1873 = frontier_phi_16_38_ladder_2;
        _1875 = frontier_phi_16_38_ladder_1;
        _1877 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_949, _950, _951), _1791);
        _1873 = _1861.x * cbModelParam._m0[1u].y;
        _1875 = _1861.y * cbModelParam._m0[1u].y;
        _1877 = _1861.z * cbModelParam._m0[1u].y;
    }
    float _1881 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _767);
    float _1882 = isnan(_1881) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1881 : min(cbModelParam._m0[25u].w, _1881));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1937 = fma(_1013, cbModelParam._m0[21u].z, fma(_1009, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005)) + cbModelParam._m0[21u].w;
        float _1941 = fma(_1013, cbModelParam._m0[22u].z, fma(_1009, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005)) + cbModelParam._m0[22u].w;
        float _1945 = fma(_1013, cbModelParam._m0[23u].z, fma(_1009, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005)) + cbModelParam._m0[23u].w;
        float _1948 = fma(_951, cbModelParam._m0[21u].z, fma(_950, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949));
        float _1951 = fma(_951, cbModelParam._m0[22u].z, fma(_950, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949));
        float _1954 = fma(_951, cbModelParam._m0[23u].z, fma(_950, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949));
        float _2094;
        if (_1948 > 0.0)
        {
            _2094 = abs((1.0 - _1937) / _1948);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1937 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2094 = frontier_phi_28_24_ladder;
        }
        float _2370;
        if (_1951 > 0.0)
        {
            _2370 = abs((1.0 - _1941) / _1951);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1941 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2370 = frontier_phi_40_35_ladder;
        }
        float _2583;
        if (_1954 > 0.0)
        {
            _2583 = abs((1.0 - _1945) / _1954);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1945 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2583 = frontier_phi_49_46_ladder;
        }
        float _2585 = isnan(_2370) ? _2094 : (isnan(_2094) ? _2370 : min(_2094, _2370));
        float _2586 = isnan(_2583) ? _2585 : (isnan(_2585) ? _2583 : min(_2585, _2583));
        float _2590 = (_2586 * _1948) + _1937;
        float _2591 = (_2586 * _1951) + _1941;
        float _2592 = (_2586 * _1954) + _1945;
        float _2593 = _2586 * 9.9999997473787516355514526367188e-05;
        float _2594 = (-1.0) - _2593;
        float _2596 = _2593 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2592 > _2596) || ((_2592 < _2594) || ((_2591 > _2596) || ((_2591 < _2594) || ((_2590 < _2594) || (_2590 > _2596))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2791 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2592, cbModelParam._m0[17u].z, fma(_2591, cbModelParam._m0[17u].y, _2590 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2592, cbModelParam._m0[18u].z, fma(_2591, cbModelParam._m0[18u].y, _2590 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2592, cbModelParam._m0[19u].z, fma(_2591, cbModelParam._m0[19u].y, _2590 * cbModelParam._m0[19u].x))), _1882);
            frontier_phi_25_49_ladder = _2791.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2791.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2791.x * cbModelParam._m0[1u].z;
        }
        _1973 = frontier_phi_25_49_ladder_2;
        _1975 = frontier_phi_25_49_ladder_1;
        _1977 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_949, _950, _951), _1882);
        _1973 = _1957.x * cbModelParam._m0[1u].z;
        _1975 = _1957.y * cbModelParam._m0[1u].z;
        _1977 = _1957.z * cbModelParam._m0[1u].z;
    }
    float _1990 = (((_976 * _925) + _977) * _941) * ((cbModelParam._m0[1u].w * (_1973 - _1873)) + _1873);
    float _1992 = (((_976 * _927) + _977) * _941) * ((cbModelParam._m0[1u].w * (_1975 - _1875)) + _1875);
    float _1994 = (((_976 * _928) + _977) * _941) * ((cbModelParam._m0[1u].w * (_1977 - _1877)) + _1877);
    float _1997 = fma(_1994, cbSceneParam._m0[89u].z, fma(_1992, cbSceneParam._m0[89u].y, _1990 * cbSceneParam._m0[89u].x));
    float _2000 = fma(_1994, cbSceneParam._m0[90u].z, fma(_1992, cbSceneParam._m0[90u].y, _1990 * cbSceneParam._m0[90u].x));
    float _2003 = fma(_1994, cbSceneParam._m0[91u].z, fma(_1992, cbSceneParam._m0[91u].y, _1990 * cbSceneParam._m0[91u].x));
    uvec4 _2013 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2015 = _2013.x * 14u;
    uint _2016 = _2015 + 13u;
    float _2023 = _941 + (-1.0);
    float _2028 = (cbLight._m0[_2016].x * _2023) + 1.0;
    float _2029 = (cbLight._m0[_2016].y * _2023) + 1.0;
    float _2030 = (cbLight._m0[_2016].z * _2023) + 1.0;
    float _2031 = (cbLight._m0[_2016].w * _2023) + 1.0;
    uint _2032 = _2015 + 5u;
    float _2038 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
    uint _2042 = _2015 + 4u;
    float _2048 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
    uint _2052 = _2015 | 1u;
    float _2063 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_764, _765, _766));
    float _2066 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_764, _765, _766));
    float _4315 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _4326 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2071 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * 0.3183098733425140380859375;
    float _2073 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * 0.3183098733425140380859375;
    float _2080 = ((cbLight._m0[_2032].x * _2038) * _2073) + ((cbLight._m0[_2042].x * _2048) * _2071);
    float _2081 = ((_2038 * cbLight._m0[_2032].y) * _2073) + ((_2048 * cbLight._m0[_2042].y) * _2071);
    float _2082 = ((_2038 * cbLight._m0[_2032].z) * _2073) + ((_2048 * cbLight._m0[_2042].z) * _2071);
    uvec4 _2086 = floatBitsToUint(cbLight._m0[_2015 + 12u]);
    bool _2088 = _2086.x == 0u;
    float _2099;
    float _2101;
    float _2103;
    if (_2088)
    {
        _2099 = _2080;
        _2101 = _2081;
        _2103 = _2082;
    }
    else
    {
        uint _2107 = _2015 + 6u;
        float _2123 = (dot(vec3(cbLight._m0[_2015 + 2u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2124 = _2123 * _2123;
        float _4337 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2125 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2126 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
        _2099 = (((cbLight._m0[_2107].x * 0.3183098733425140380859375) * _2125) * _2126) + _2080;
        _2101 = (((cbLight._m0[_2107].y * 0.3183098733425140380859375) * _2125) * _2126) + _2081;
        _2103 = (((cbLight._m0[_2107].z * 0.3183098733425140380859375) * _2125) * _2126) + _2082;
    }
    bool _2106 = _2086.y == 0u;
    float _2144;
    float _2146;
    float _2148;
    if (_2106)
    {
        _2144 = _2099;
        _2146 = _2101;
        _2148 = _2103;
    }
    else
    {
        uint _2314 = _2015 + 7u;
        float _2330 = (dot(vec3(cbLight._m0[_2015 + 3u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2331 = _2330 * _2330;
        float _4353 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2332 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2333 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
        _2144 = (((cbLight._m0[_2314].x * 0.3183098733425140380859375) * _2332) * _2333) + _2099;
        _2146 = (((cbLight._m0[_2314].y * 0.3183098733425140380859375) * _2332) * _2333) + _2101;
        _2148 = (((cbLight._m0[_2314].z * 0.3183098733425140380859375) * _2332) * _2333) + _2103;
    }
    uint _2151 = _2015 + 8u;
    float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _767) * 0.949999988079071044921875);
    float _2165 = _2164 * _2164;
    float _2166 = cbLight._m0[_2015].x + _843;
    float _2167 = cbLight._m0[_2015].y + _844;
    float _2168 = cbLight._m0[_2015].z + _845;
    float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
    float _2173 = _2172 * _2166;
    float _2174 = _2172 * _2167;
    float _2175 = _2172 * _2168;
    float _2176 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2015].xyz));
    float _4369 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _4380 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _2180 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2181 = dot(vec3(_764, _765, _766), vec3(_2173, _2174, _2175));
    float _4391 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2185 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2173, _2174, _2175));
    float _4402 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2189 = _2165 * _2165;
    float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
    float _2201 = exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0);
    float _2202 = 0.959999978542327880859375 - _922;
    float _2204 = 0.959999978542327880859375 - _923;
    float _2205 = 0.959999978542327880859375 - _924;
    float _2212 = 1.0 - _2165;
    float _2223 = (0.5 / (((_2180 * ((_2179 * _2212) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2212) + _2165) * _2179))) * _2179;
    float _4413 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2225 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
    uint _2236 = _2015 + 9u;
    float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2052].w)) * _767) * 0.949999988079071044921875);
    float _2248 = _2247 * _2247;
    float _2249 = cbLight._m0[_2052].x + _843;
    float _2250 = cbLight._m0[_2052].y + _844;
    float _2251 = cbLight._m0[_2052].z + _845;
    float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
    float _2256 = _2255 * _2249;
    float _2257 = _2255 * _2250;
    float _2258 = _2255 * _2251;
    float _2259 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2052].xyz));
    float _4424 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2263 = dot(vec3(_764, _765, _766), vec3(_2256, _2257, _2258));
    float _4435 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2267 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_2256, _2257, _2258));
    float _4446 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2271 = _2248 * _2248;
    float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
    float _2282 = exp2(log2(1.0 - (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) * 5.0);
    float _2289 = 1.0 - _2248;
    float _2299 = (0.5 / (((_2180 * ((_2262 * _2289) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2289) + _2248) * _2262))) * _2262;
    float _4457 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2301 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
    float _2311 = (((((_2282 * _2202) + _925) * cbLight._m0[_2236].x) * _2301) * _2038) + (((((_2201 * _2202) + _925) * cbLight._m0[_2151].x) * _2225) * _2048);
    float _2312 = (((((_2282 * _2204) + _927) * cbLight._m0[_2236].y) * _2301) * _2038) + (((((_2201 * _2204) + _927) * cbLight._m0[_2151].y) * _2225) * _2048);
    float _2313 = (((((_2282 * _2205) + _928) * cbLight._m0[_2236].z) * _2301) * _2038) + (((((_2201 * _2205) + _928) * cbLight._m0[_2151].z) * _2225) * _2048);
    float _2375;
    float _2377;
    float _2379;
    if (_2088)
    {
        _2375 = _2311;
        _2377 = _2312;
        _2379 = _2313;
    }
    else
    {
        uint _2381 = _2015 + 2u;
        uint _2385 = _2015 + 10u;
        float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2381].w)) * _767) * 0.949999988079071044921875);
        float _2400 = _2399 * _2399;
        float _2401 = cbLight._m0[_2381].x + _843;
        float _2402 = cbLight._m0[_2381].y + _844;
        float _2403 = cbLight._m0[_2381].z + _845;
        float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
        float _2408 = _2407 * _2401;
        float _2409 = _2407 * _2402;
        float _2410 = _2407 * _2403;
        float _2411 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2381].xyz));
        float _4468 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2415 = dot(vec3(_764, _765, _766), vec3(_2408, _2409, _2410));
        float _4479 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2419 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_2408, _2409, _2410));
        float _4490 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2423 = _2400 * _2400;
        float _2427 = ((_2418 * _2418) * (_2423 + (-1.0))) + 1.0;
        float _2434 = exp2(log2(1.0 - (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) * 5.0);
        float _2441 = 1.0 - _2400;
        float _2451 = (0.5 / (((_2180 * ((_2414 * _2441) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2441) + _2400) * _2414))) * _2414;
        float _4501 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2453 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2423 / ((_2427 * _2427) * 3.141590118408203125));
        float _2454 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
        _2375 = (((((_2434 * _2202) + _925) * cbLight._m0[_2385].x) * _2453) * _2454) + _2311;
        _2377 = (((((_2434 * _2204) + _927) * cbLight._m0[_2385].y) * _2453) * _2454) + _2312;
        _2379 = (((((_2434 * _2205) + _928) * cbLight._m0[_2385].z) * _2453) * _2454) + _2313;
    }
    float _2489;
    float _2491;
    float _2493;
    if (_2106)
    {
        _2489 = _2375;
        _2491 = _2377;
        _2493 = _2379;
    }
    else
    {
        uint _2500 = _2015 + 3u;
        uint _2504 = _2015 + 11u;
        float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _767) * 0.949999988079071044921875);
        float _2519 = _2518 * _2518;
        float _2520 = cbLight._m0[_2500].x + _843;
        float _2521 = cbLight._m0[_2500].y + _844;
        float _2522 = cbLight._m0[_2500].z + _845;
        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
        float _2527 = _2526 * _2520;
        float _2528 = _2526 * _2521;
        float _2529 = _2526 * _2522;
        float _2530 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2500].xyz));
        float _4517 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2534 = dot(vec3(_764, _765, _766), vec3(_2527, _2528, _2529));
        float _4528 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2538 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2527, _2528, _2529));
        float _4539 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2542 = _2519 * _2519;
        float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
        float _2553 = exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0);
        float _2560 = 1.0 - _2519;
        float _2570 = (0.5 / (((_2180 * ((_2533 * _2560) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2560) + _2519) * _2533))) * _2533;
        float _4550 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2572 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
        float _2573 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
        _2489 = (((((_2553 * _2202) + _925) * cbLight._m0[_2504].x) * _2572) * _2573) + _2375;
        _2491 = (((((_2553 * _2204) + _927) * cbLight._m0[_2504].y) * _2572) * _2573) + _2377;
        _2493 = (((((_2553 * _2205) + _928) * cbLight._m0[_2504].z) * _2572) * _2573) + _2379;
    }
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    float _2718;
    if (_2013.y == 0u)
    {
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2648;
        float _2650 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2648;
        float _2651 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2648;
        uvec4 _2663 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2664 = _2663.x;
        uint _2675 = uint((float(_2663.y) * floor(float(uint(cbSceneParam._m0[85u].y * _864) / _2664))) + floor(float(uint(cbSceneParam._m0[85u].x * _863) / _2664)));
        float _2685 = (log2(_2651 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2686 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        uint _2689 = uint(isnan(14.0) ? _2686 : (isnan(_2686) ? 14.0 : min(_2686, 14.0)));
        uvec4 _2694 = texelFetch(g_lightClusterGridBuffer, int(((_2689 << 2u) + (_2675 << 6u)) >> 2u));
        uint _2695 = _2694.x;
        uint _2696 = _2663.z;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        if (((((1u << ((_2696 >> 4u) & 15u)) + 4294967295u) & _2695) == 0u) || ((_2696 & 240u) == 0u))
        {
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
        }
        else
        {
            float _2797;
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            uint _2955 = 0u;
            uint _2964;
            bool _2965;
            for (;;)
            {
                _2964 = texelFetch(g_lightClassification, int((((_2689 << 5u) + (_2675 << 9u)) + (_2955 << 2u)) >> 2u)).x;
                _2965 = _2964 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2965)
                {
                    frontier_phi_66_pred = _2949;
                    frontier_phi_66_pred_1 = _2954;
                    frontier_phi_66_pred_2 = _2953;
                    frontier_phi_66_pred_3 = _2952;
                    frontier_phi_66_pred_4 = _2951;
                    frontier_phi_66_pred_5 = _2950;
                }
                else
                {
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    uint _3100;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2964;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    for (;;)
                    {
                        uint _3104 = uint(findLSB(_3100)) + (_2955 << 5u);
                        uint _3101 = (_3100 + 4294967295u) & _3100;
                        uint _3106 = _3104 * 48u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3126 = (_3104 * 48u) + 4u;
                        vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 3u)).x));
                        uint _3145 = (_3104 * 48u) + 8u;
                        vec3 _3156 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3145)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 2u)).x));
                        float _3160 = _3120.x - _2649;
                        float _3161 = _3120.y - _2650;
                        float _3162 = _3120.z - _2651;
                        float _3163 = dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162));
                        float _3166 = inversesqrt(_3163);
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3170 = dot(vec3(_882, _885, _888), vec3(_3167, _3168, _3169));
                        float _3175 = 1.0 - (_3163 * _3120.w);
                        float _4576 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3176 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3177 = sqrt(_3163) * _3139.w;
                        float _3180 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3170) + _3181;
                        float _3187 = _3177 * _3177;
                        float _3191 = ((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3176) / ((_3187 * 0.699999988079071044921875) + 1.0);
                        float _3195 = (-0.0) - _2649;
                        float _3196 = (-0.0) - _2650;
                        float _3197 = (-0.0) - _2651;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3212 = exp2(log2(1.0 / ((_3187 * 3.5) + 5.0)) * 0.25);
                        float _3213 = 1.0 - _957;
                        float _3220 = sqrt(1.0 - ((1.0 - (_3213 * _3213)) * (1.0 - (_3212 * _3212))));
                        float _3221 = _3220 * _3220;
                        float _3222 = _3221 * _3221;
                        float _3223 = _3202 + _3167;
                        float _3224 = _3203 + _3168;
                        float _3225 = _3204 + _3169;
                        float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                        float _3233 = dot(vec3(_882, _885, _888), vec3(_3202, _3203, _3204));
                        float _4592 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3236 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3237 = dot(vec3(_882, _885, _888), vec3(_3229 * _3223, _3229 * _3224, _3229 * _3225));
                        float _4603 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3240 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3244 = ((_3240 * _3240) * (_3222 + (-1.0))) + 1.0;
                        float _3245 = _3180 * _3221;
                        float _3246 = _3245 * _3245;
                        float _3249 = ((1.0 - _3246) * _3170) + _3246;
                        float _4614 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3250 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3251 = 1.0 - _3221;
                        float _3261 = (0.5 / (((_3250 * ((_3236 * _3251) + _3221)) + 9.9999999392252902907785028219223e-09) + (((_3250 * _3251) + _3221) * _3236))) * _3250;
                        float _4625 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3272 = (((_3222 * 3.1415927410125732421875) * (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) / ((_3244 * _3244) * ((_3187 * 2.1991131305694580078125) + 3.141590118408203125))) * _3176;
                        _3024 = (_3191 * _3139.x) + _3097;
                        _3025 = (_3191 * _3139.y) + _3098;
                        _3026 = (_3191 * _3139.z) + _3099;
                        _3021 = (_3272 * _3156.x) + _3094;
                        _3022 = (_3272 * _3156.y) + _3095;
                        _3023 = (_3272 * _3156.z) + _3096;
                        if (_3101 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3101;
                        }
                    }
                    frontier_phi_66_pred = _3021;
                    frontier_phi_66_pred_1 = _3026;
                    frontier_phi_66_pred_2 = _3025;
                    frontier_phi_66_pred_3 = _3024;
                    frontier_phi_66_pred_4 = _3023;
                    frontier_phi_66_pred_5 = _3022;
                }
                _2797 = frontier_phi_66_pred;
                _2807 = frontier_phi_66_pred_1;
                _2805 = frontier_phi_66_pred_2;
                _2803 = frontier_phi_66_pred_3;
                _2801 = frontier_phi_66_pred_4;
                _2799 = frontier_phi_66_pred_5;
                uint _2956 = _2955 + 1u;
                if (_2956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2949 = _2797;
                    _2950 = _2799;
                    _2951 = _2801;
                    _2952 = _2803;
                    _2953 = _2805;
                    _2954 = _2807;
                    _2955 = _2956;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
        }
        uvec4 _2810 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2811 = _2810.z;
        uint _2813 = (_2811 >> 8u) & 15u;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        if (((4294967295u << _2813) & _2695) == 0u)
        {
            _2917 = _2796;
            _2919 = _2798;
            _2921 = _2800;
            _2923 = _2802;
            _2925 = _2804;
            _2927 = _2806;
        }
        else
        {
            float _2942 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
            float _2943 = _2942 * _2649;
            float _2944 = _2942 * _2650;
            float _2945 = _2942 * _2651;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2813 < ((_2811 >> 12u) & 15u))
            {
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _3077 = _2796;
                float _3078 = _2798;
                float _3079 = _2800;
                float _3080 = _2802;
                float _3081 = _2804;
                float _3082 = _2806;
                uint _3083 = _2813;
                uint _3092;
                bool _3093;
                for (;;)
                {
                    _3092 = texelFetch(g_lightClassification, int((((_2689 << 5u) + (_2675 << 9u)) + (_3083 << 2u)) >> 2u)).x;
                    _3093 = _3092 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3093)
                    {
                        frontier_phi_77_pred = _3082;
                        frontier_phi_77_pred_1 = _3081;
                        frontier_phi_77_pred_2 = _3080;
                        frontier_phi_77_pred_3 = _3079;
                        frontier_phi_77_pred_4 = _3078;
                        frontier_phi_77_pred_5 = _3077;
                    }
                    else
                    {
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3299 = _3077;
                        float _3300 = _3078;
                        float _3301 = _3079;
                        float _3302 = _3080;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        uint _3305 = _3092;
                        uint _3306;
                        vec4 _3331;
                        float _3332;
                        vec4 _3347;
                        vec3 _3359;
                        vec4 _3374;
                        vec4 _3389;
                        float _3435;
                        bool _3436;
                        for (;;)
                        {
                            uint _3316 = ((_3083 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3305));
                            _3306 = (_3305 + 4294967295u) & _3305;
                            uint _3318 = _3316 * 40u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            _3332 = _3331.w;
                            uint _3334 = (_3316 * 40u) + 4u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3349 = (_3316 * 40u) + 8u;
                            _3359 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x));
                            uint _3361 = (_3316 * 40u) + 16u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3376 = (_3316 * 40u) + 20u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3391 = (_3316 * 40u) + 24u;
                            vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3410 = (_3316 * 40u) + 28u;
                            vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3435 = fma(_2651, _3423.z, fma(_2650, _3423.y, _3423.x * _2649)) + _3423.w;
                            _3436 = !((fma(_2651, _3404.z, fma(_2650, _3404.y, _3404.x * _2649)) + _3404.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3436)
                            {
                                float _3463 = _3331.x - _2649;
                                float _3464 = _3331.y - _2650;
                                float _3465 = _3331.z - _2651;
                                float _3466 = dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465));
                                float _3469 = inversesqrt(_3466);
                                float _3470 = _3469 * _3463;
                                float _3471 = _3469 * _3464;
                                float _3472 = _3469 * _3465;
                                float _3476 = 1.0 - (_3466 / (_3332 * _3332));
                                float _4636 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3481 = sqrt(_3466) * _3347.w;
                                float _3483 = 1.39999997615814208984375 / (_3481 + 1.39999997615814208984375);
                                float _3484 = _3483 * _3483;
                                float _3487 = ((1.0 - _3484) * dot(vec3(_3470, _3471, _3472), vec3(_882, _885, _888))) + _3484;
                                float _3490 = _3481 * _3481;
                                float _3494 = (fma(_2651, _3374.z, fma(_2650, _3374.y, _3374.x * _2649)) + _3374.w) / _3435;
                                float _3495 = (fma(_2651, _3389.z, fma(_2650, _3389.y, _3389.x * _2649)) + _3389.w) / _3435;
                                float _3499 = 1.0 - dot(vec2(_3494, _3495), vec2(_3494, _3495));
                                float _4652 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3501 = _3500 * (((isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0))) * _3477) / ((_3490 * 0.699999988079071044921875) + 1.0));
                                float _3513 = exp2(log2(1.0 / ((_3490 * 3.5) + 5.0)) * 0.25);
                                float _3514 = 1.0 - _957;
                                float _3521 = sqrt(1.0 - ((1.0 - (_3514 * _3514)) * (1.0 - (_3513 * _3513))));
                                float _3522 = _3521 * _3521;
                                float _3523 = _3522 * _3522;
                                float _3524 = _3470 - _2943;
                                float _3525 = _3471 - _2944;
                                float _3526 = _3472 - _2945;
                                float _3530 = inversesqrt(dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526)));
                                float _3534 = dot(vec3(_882, _885, _888), vec3((-0.0) - _2943, (-0.0) - _2944, (-0.0) - _2945));
                                float _4663 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3537 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3538 = dot(vec3(_882, _885, _888), vec3(_3530 * _3524, _3530 * _3525, _3530 * _3526));
                                float _4674 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3545 = ((_3541 * _3541) * (_3523 + (-1.0))) + 1.0;
                                float _3546 = _3483 * _3522;
                                float _3547 = _3546 * _3546;
                                float _3553 = ((1.0 - _3547) * dot(vec3(_882, _885, _888), vec3(_3470, _3471, _3472))) + _3547;
                                float _4685 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3555 = 1.0 - _3522;
                                float _3565 = (0.5 / (((_3554 * ((_3537 * _3555) + _3522)) + 9.9999999392252902907785028219223e-09) + (((_3554 * _3555) + _3522) * _3537))) * _3554;
                                float _4696 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3575 = (_3500 * _3477) * (((_3523 * 3.1415927410125732421875) * (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) / ((_3545 * _3545) * ((_3490 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3501 * _3347.y;
                                frontier_phi_83_pred_1 = _3501 * _3347.x;
                                frontier_phi_83_pred_2 = _3575 * _3359.z;
                                frontier_phi_83_pred_3 = _3575 * _3359.y;
                                frontier_phi_83_pred_4 = _3575 * _3359.x;
                                frontier_phi_83_pred_5 = _3501 * _3347.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3583 = frontier_phi_83_pred;
                            _3582 = frontier_phi_83_pred_1;
                            _3581 = frontier_phi_83_pred_2;
                            _3580 = frontier_phi_83_pred_3;
                            _3579 = frontier_phi_83_pred_4;
                            _3584 = frontier_phi_83_pred_5;
                            _3289 = _3582 + _3302;
                            _3290 = _3583 + _3303;
                            _3291 = _3584 + _3304;
                            _3286 = _3579 + _3299;
                            _3287 = _3580 + _3300;
                            _3288 = _3581 + _3301;
                            if (_3306 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3306;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3291;
                        frontier_phi_77_pred_1 = _3290;
                        frontier_phi_77_pred_2 = _3289;
                        frontier_phi_77_pred_3 = _3288;
                        frontier_phi_77_pred_4 = _3287;
                        frontier_phi_77_pred_5 = _3286;
                    }
                    _2928 = frontier_phi_77_pred;
                    _2926 = frontier_phi_77_pred_1;
                    _2924 = frontier_phi_77_pred_2;
                    _2922 = frontier_phi_77_pred_3;
                    _2920 = frontier_phi_77_pred_4;
                    _2918 = frontier_phi_77_pred_5;
                    uint _3084 = _3083 + 1u;
                    if (_3084 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3077 = _2918;
                        _3078 = _2920;
                        _3079 = _2922;
                        _3080 = _2924;
                        _3081 = _2926;
                        _3082 = _2928;
                        _3083 = _3084;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2922;
                frontier_phi_58_59_ladder_1 = _2928;
                frontier_phi_58_59_ladder_2 = _2926;
                frontier_phi_58_59_ladder_3 = _2924;
                frontier_phi_58_59_ladder_4 = _2920;
                frontier_phi_58_59_ladder_5 = _2918;
            }
            else
            {
                frontier_phi_58_59_ladder = _2800;
                frontier_phi_58_59_ladder_1 = _2806;
                frontier_phi_58_59_ladder_2 = _2804;
                frontier_phi_58_59_ladder_3 = _2802;
                frontier_phi_58_59_ladder_4 = _2798;
                frontier_phi_58_59_ladder_5 = _2796;
            }
            _2917 = frontier_phi_58_59_ladder_5;
            _2919 = frontier_phi_58_59_ladder_4;
            _2921 = frontier_phi_58_59_ladder;
            _2923 = frontier_phi_58_59_ladder_3;
            _2925 = frontier_phi_58_59_ladder_2;
            _2927 = frontier_phi_58_59_ladder_1;
        }
        float _2932 = isnan(1.0) ? _941 : (isnan(_941) ? 1.0 : min(_941, 1.0));
        _2708 = (_2932 * _2923) + _2144;
        _2710 = (_2932 * _2925) + _2146;
        _2712 = (_2932 * _2927) + _2148;
        _2714 = ((_2917 * _925) * _2932) + _2489;
        _2716 = ((_2919 * _927) * _2932) + _2491;
        _2718 = ((_2921 * _928) * _2932) + _2493;
    }
    else
    {
        _2708 = _2144;
        _2710 = _2146;
        _2712 = _2148;
        _2714 = _2489;
        _2716 = _2491;
        _2718 = _2493;
    }
    float _4712 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4723 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4734 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _2735 = ((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2708 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _941))) + ((_2714 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1780)) * cbPerFrame._m0[3u].x);
    float _2736 = ((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2710 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _941))) + ((_2716 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1780)) * cbPerFrame._m0[3u].x);
    float _2737 = ((isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2712 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _941))) + ((_2718 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1780)) * cbPerFrame._m0[3u].x);
    uint _2738 = _279 + 6u;
    float _2746 = _863 / cbSceneParam._m0[86u].x;
    float _2747 = _864 / cbSceneParam._m0[86u].y;
    vec4 _2761 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2746, _2747, (log2((isnan(cbSceneParam._m0[77u].w) ? _786 : (isnan(_786) ? cbSceneParam._m0[77u].w : min(_786, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2763 = _2761.x;
    float _2764 = _2761.y;
    float _2765 = _2761.z;
    float _2766 = _2761.w;
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    if (_786 > cbSceneParam._m0[78u].w)
    {
        float _2821 = isnan(_786) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _786 : min(cbSceneParam._m0[80u].w, _786));
        float _2822 = _2821 / _786;
        float _2833 = _2822 * _836;
        float _2834 = _837 * _2822;
        float _2835 = (-0.0) - _2834;
        float _2837 = _2822 * _838;
        float _2839 = (cbSceneParam._m0[77u].w * _2835) / _2821;
        float _2840 = _2839 + cbSceneParam._m0[79u].w;
        float _2841 = cbSceneParam._m0[79u].w - _2834;
        float _2847 = sqrt(((_2833 * _2833) + (_2834 * _2834)) + (_2837 * _2837));
        float _2850 = (1.0 - (cbSceneParam._m0[77u].w / _2821)) * _2847;
        float _2855 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2857 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3034;
        if (abs((_2835 - _2839) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3034 = ((((_2840 > 0.0) ? exp2(_2855 * _2840) : (2.0 - exp2(_2857 * _2840))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2850;
        }
        else
        {
            float _2978 = 1.0 / cbSceneParam._m0[80u].x;
            float _2979 = isnan(_2841) ? _2840 : (isnan(_2840) ? _2841 : max(_2840, _2841));
            float _2980 = isnan(_2841) ? _2840 : (isnan(_2840) ? _2841 : min(_2840, _2841));
            float _2989 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : min(_2979, 0.0));
            float _2990 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : min(_2980, 0.0));
            _3034 = ((abs(_2847 / _2835) * cbSceneParam._m0[80u].y) * ((((_2989 - _2990) * 2.0) - ((exp2(_2855 * (isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0)))) - exp2(_2855 * (isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))))) * _2978)) - ((exp2(_2857 * _2989) - exp2(_2857 * _2990)) * _2978))) + (_2850 * cbSceneParam._m0[80u].z);
        }
        vec4 _3036 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2746, _2747, 1.0), 0.0);
        float _3045 = exp2((_3034 * (-1.44269502162933349609375)) * (1.0 - _3036.w));
        float _3046 = log2(_3045);
        float _3062 = log2(_2766);
        _2859 = (exp2(_3062 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].x)) * _3036.x) / cbSceneParam._m0[78u].x)) + _2763;
        _2861 = (exp2(_3062 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].y)) * _3036.y) / cbSceneParam._m0[78u].y)) + _2764;
        _2863 = (exp2(_3062 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].z)) * _3036.z) / cbSceneParam._m0[78u].z)) + _2765;
        _2865 = _3045 * _2766;
    }
    else
    {
        _2859 = _2763;
        _2861 = _2764;
        _2863 = _2765;
        _2865 = _2766;
    }
    bool _3072;
    vec4 _2875;
    vec4 _2897;
    float _2899;
    float _2903;
    float _2904;
    float _2905;
    float _2906;
    bool _2916;
    for (;;)
    {
        _2875 = cbMatDynParam._m0[0u];
        float _2877 = roundEven(_2875.y);
        bool _2878 = _2877 == 3.0;
        float _2879 = log2(_2865);
        float _2886 = exp2(_2879 * cbSceneParam._m0[78u].x) * _2735;
        float _2887 = exp2(_2879 * cbSceneParam._m0[78u].y) * _2736;
        float _2888 = exp2(_2879 * cbSceneParam._m0[78u].z) * _2737;
        float _2895 = _852 + (-0.5);
        _2897 = cbMtdParam._m0[1u];
        _2899 = _2897.y * _2895;
        float _2902 = (_2877 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2903 = _2902 * (_2878 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2859)));
        _2904 = _2902 * (_2878 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2861)));
        _2905 = _2902 * (_2878 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2863)));
        _2906 = _2895 * 0.999000012874603271484375;
        _2916 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2916)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _2906) < 0.5)
            {
                _3072 = true;
                break;
            }
        }
        uint _3013 = _901 + uint(_2875.w);
        if ((cbInstanceData._m0[_3013].w < 1.0) && ((cbInstanceData._m0[_3013].w + _2906) < 0.5))
        {
            _3072 = true;
            break;
        }
        if ((_2899 + 1.0) < _2897.x)
        {
            _3072 = true;
            break;
        }
        _3072 = false;
        break;
    }
    float _3277;
    if (_3072)
    {
        discard_state = true;
        _3277 = 0.0;
    }
    else
    {
        _3277 = cbInstanceData._m0[_2738].w;
    }
    SV_Target.x = _2903;
    SV_Target.y = _2904;
    SV_Target.z = _2905;
    SV_Target.w = _3277;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2738].w;
    discard_exit();
}


