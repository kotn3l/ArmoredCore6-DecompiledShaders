#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1691;
float _4067;
float _4068;
float _4069;
float _4070;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _254 = _253 * _245;
    float _255 = _253 * _246;
    float _256 = _253 * _247;
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = _260 * NORMAL.x;
    float _262 = _260 * NORMAL.y;
    float _263 = _260 * NORMAL.z;
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = _267 * TANGENT.x;
    float _269 = _267 * TANGENT.y;
    float _270 = _267 * TANGENT.z;
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _287 = cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x;
    float _289 = cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x;
    float _291 = sqrt((_287 + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + _289);
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _381.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[23u].w) + _434) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4079 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _459 = (_452 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _460 = (_452 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _461 = (_452 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _292) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _293) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _381.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[23u].w) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4090 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _292) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _293) + cbTextureTilingScale._m0[24u].w));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _572 = _570.x;
    float _582 = dot(vec4(_572, _570.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _594 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _381.z) * 2.0) - ((((_572 - _582) * cbMtdParam._m0[23u].w) + _582) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4101 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _608 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _312.x) * ((_595 * ((_553.x * cbMtdParam._m0[14u].x) - _532)) + _532);
    float _611 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _312.y) * ((_595 * ((_553.y * cbMtdParam._m0[14u].y) - _533)) + _533);
    float _614 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _312.z) * ((_595 * ((_553.z * cbMtdParam._m0[14u].z) - _534)) + _534);
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _292) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _293) + cbTextureTilingScale._m0[14u].w));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _671 = _669.x;
    float _672 = _669.y;
    float _673 = _669.z;
    float _680 = ((_652.x - _671) * _452) + _671;
    float _681 = ((_652.y - _672) * _452) + _672;
    float _682 = ((_652.z - _673) * _452) + _673;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _292) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _293) + cbTextureTilingScale._m0[2u].w));
    float _705 = ((_694.x - _680) * _525) + _680;
    float _706 = ((_694.y - _681) * _525) + _681;
    float _707 = ((_694.z - _682) * _525) + _682;
    vec4 _719 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _292) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _293) + cbTextureTilingScale._m0[23u].w));
    float _732 = ((_719.z - _707) * _595) + _707;
    float _735 = ((((_719.x - _705) * _595) + _705) * 2.0) + (-1.0);
    float _737 = ((((_719.y - _706) * _595) + _706) * 2.0) + (-1.0);
    float _738 = dot(vec2(_735, _737), vec2(_735, _737));
    float _4112 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _743 = sqrt(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))));
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _769 = (((_757.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _735;
    float _770 = (((_757.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _737;
    float _773 = fma(_743, _261, fma(_770, _268, _769 * _254));
    float _776 = fma(_743, _262, fma(_770, _269, _769 * _255));
    float _779 = fma(_743, _263, fma(_770, _270, _769 * _256));
    float _783 = inversesqrt(dot(vec3(_773, _776, _779), vec3(_773, _776, _779)));
    vec4 _810 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _812 = _810.x;
    float _813 = 1.0 - _812;
    float _821 = (cbMtdParam._m0[19u].x + dot(vec4(_783 * _773, _783 * _776, _783 * _779, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_812 - _813) * cbMtdParam._m0[24u].z) + _813) * cbMtdParam._m0[21u].z);
    float _4123 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _822 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _824 = (-0.0) - cbMtdParam._m0[24u].x;
    float _826 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _826 : (isnan(_826) ? 1.0 : min(_826, 1.0));
    float _834 = _822 - ((_822 * TEXCOORD_8.x) * _827);
    float _835 = _822 - ((_822 * TEXCOORD_8.y) * _827);
    float _836 = _822 - ((_822 * TEXCOORD_8.z) * _827);
    float _843 = (_834 * ((_632.x * cbMtdParam._m0[18u].x) - _608)) + _608;
    float _844 = (_835 * ((_632.y * cbMtdParam._m0[18u].y) - _611)) + _611;
    float _845 = (_836 * ((_632.z * cbMtdParam._m0[18u].z) - _614)) + _614;
    float _852 = sqrt((_287 + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + _289);
    float _853 = _852 * TEXCOORD.z;
    float _854 = _852 * TEXCOORD.w;
    vec4 _866 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _853) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _854) + cbTextureTilingScale._m0[19u].w));
    float _868 = _866.x;
    float _869 = 1.0 - _868;
    float _895 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_868 - _869) * cbMtdParam._m0[24u].w) + _869) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4144 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _896 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _904 = ((((cbMtdParam._m0[10u].x - _843) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _896) + _843;
    float _905 = ((((cbMtdParam._m0[10u].y - _844) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _896) + _844;
    float _906 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _845)) * _896) + _845;
    vec4 _932 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _934 = _932.x;
    float _951 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _292) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _293) + cbTextureTilingScale._m0[9u].w)).x - _934) * _452) + _934;
    float _968 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _292) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _293) + cbTextureTilingScale._m0[21u].w)).x - _951) * _525) + _951;
    float _985 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _292) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _293) + cbTextureTilingScale._m0[10u].w)).x - _968) * _595) + _968;
    float _989 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _985) * cbMtdParam._m0[19u].z) + _985;
    float _991 = _989 - (_989 * _834);
    float _993 = _991 - (_991 * _896);
    float _997 = (cbMtdParam._m0[19u].w * (_757.z - _732)) + _732;
    vec4 _1013 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _1020 = (_1013.x * 2.0) + (-1.0);
    float _1021 = (_1013.y * 2.0) + (-1.0);
    float _1022 = dot(vec2(_1020, _1021), vec2(_1020, _1021));
    float _4155 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1030 = ((_1013.z - _997) * _834) + _997;
    float _1033 = ((cbMtdParam._m0[23u].x - _1030) * _896) + _1030;
    vec4 _1056 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _853) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _854) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1062 = (_1056.x * 2.0) + (-1.0);
    float _1063 = (_1056.y * 2.0) + (-1.0);
    float _1064 = dot(vec2(_1062, _1063), vec2(_1062, _1063));
    float _4166 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1079 = ((sqrt(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) - _743) * _836) + _743;
    float _1082 = (((_1020 - _769) * _834) + _769) + (cbMtdParam._m0[21u].x * _769);
    float _1083 = (((_1021 - _770) * _835) + _770) + (cbMtdParam._m0[21u].x * _770);
    float _1094 = (((_1062 - _1082) + (_1082 * cbMtdParam._m0[22u].z)) * _896) + _1082;
    float _1095 = (((_1063 - _1083) + (_1083 * cbMtdParam._m0[22u].z)) * _896) + _1083;
    float _1096 = (_896 * (sqrt(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) - _1079)) + _1079;
    float _1098 = cbMtdParam._m0[22u].x + _757.w;
    float _1101 = fma(_1096, _261, fma(_1095, _268, _1094 * _254));
    float _1104 = fma(_1096, _262, fma(_1095, _269, _1094 * _255));
    float _1107 = fma(_1096, _263, fma(_1095, _270, _1094 * _256));
    float _1111 = inversesqrt(dot(vec3(_1101, _1104, _1107), vec3(_1101, _1104, _1107)));
    float _1112 = _1111 * _1101;
    float _1113 = _1111 * _1104;
    float _1114 = _1111 * _1107;
    float _4177 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1115 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _4188 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _4199 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4210 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4221 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4232 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1120 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _1134 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1184 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1174);
    float _1185 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1174);
    float _1186 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1174);
    float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
    float _1191 = _1184 * _1190;
    float _1192 = _1185 * _1190;
    float _1193 = _1186 * _1190;
    vec4 _1198 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1200 = _1198.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1372 = sqrt(((_1184 * _1184) + (_1185 * _1185)) + (_1186 * _1186));
        float _1378 = (cbMatDynParam._m0[5u].x * _1372) + cbMatDynParam._m0[5u].y;
        float _4243 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1383 = (cbMatDynParam._m0[5u].z * _1372) + cbMatDynParam._m0[5u].w;
        float _4254 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) - _1379)) + _1379) < ((_1200 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1211 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1212 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1230 = fma(_1114, cbSceneParam._m0[5u].z, fma(_1113, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1112));
    float _1233 = fma(_1114, cbSceneParam._m0[6u].z, fma(_1113, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1112));
    float _1236 = fma(_1114, cbSceneParam._m0[7u].z, fma(_1113, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1112));
    uint _1249 = _273 + 9u;
    uint _1250 = _1249 + uint(cbMatDynParam._m0[0u].w);
    float _1256 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * cbInstanceData._m0[_1250].x;
    float _1257 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * cbInstanceData._m0[_1250].y;
    float _1258 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * cbInstanceData._m0[_1250].z;
    float _4265 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
    float _1259 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _4276 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
    float _1260 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _4287 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
    float _1261 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _1262 = 1.0 - _1120;
    float _1263 = _1259 * _1262;
    float _1264 = _1260 * _1262;
    float _1265 = _1261 * _1262;
    float _1270 = (_1259 + (-0.039999999105930328369140625)) * _1120;
    float _1271 = (_1260 + (-0.039999999105930328369140625)) * _1120;
    float _1272 = (_1261 + (-0.039999999105930328369140625)) * _1120;
    float _1273 = _1270 + 0.039999999105930328369140625;
    float _1275 = _1271 + 0.039999999105930328369140625;
    float _1276 = _1272 + 0.039999999105930328369140625;
    vec4 _1285 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1211, cbSceneParam._m0[86u].y * _1212));
    float _1289 = ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * TEXCOORD_5.w) * _1285.x;
    float _1290 = dot(vec3(_1112, _1113, _1114), vec3(_1191, _1192, _1193));
    float _1293 = _1290 * 2.0;
    float _1297 = (_1293 * _1112) - _1191;
    float _1298 = (_1293 * _1113) - _1192;
    float _1299 = (_1293 * _1114) - _1193;
    float _1303 = abs(dot(vec3(_1191, _1192, _1193), vec3(_1112, _1113, _1114)));
    float _4298 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
    float _1305 = sqrt(_1115);
    float _1318 = exp2((_1305 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1305 * 3.0));
    float _1324 = (1.0 - _1318) * ((_1305 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1325 = _1318 * _1305;
    float _1353 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1357 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1361 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1690;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1415 = fma(_1361, cbModelParam._m0[26u].z, fma(_1357, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1353));
        float _1419 = fma(_1361, cbModelParam._m0[27u].z, fma(_1357, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1353));
        float _1423 = fma(_1361, cbModelParam._m0[28u].z, fma(_1357, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1353));
        float _1448 = _1353 + _1112;
        float _1449 = _1357 + _1113;
        float _1450 = _1361 + _1114;
        float _1460 = fma(_1450, cbModelParam._m0[26u].z, fma(_1449, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1448)) - _1415;
        float _1461 = fma(_1450, cbModelParam._m0[27u].z, fma(_1449, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1448)) - _1419;
        float _1462 = fma(_1450, cbModelParam._m0[28u].z, fma(_1449, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1448)) - _1423;
        float _1466 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
        float _1479 = ((_1466 * _1460) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1415 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1466 * _1461) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1419 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1466 * _1462) / cbModelParam._m0[34u].z) + ((((((_1423 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        float _1518 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1484.x + (-0.5));
        float _1520 = _1518 * (_1484.y + (-0.5));
        float _1521 = _1518 * (_1484.z + (-0.5));
        float _1528 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1491.x + (-0.5));
        float _1530 = _1528 * (_1491.y + (-0.5));
        float _1531 = _1528 * (_1491.z + (-0.5));
        float _1538 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1498.x + (-0.5));
        float _1540 = _1538 * (_1498.y + (-0.5));
        float _1541 = _1538 * (_1498.z + (-0.5));
        float _1548 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1505.x + (-0.5));
        float _1550 = _1548 * (_1505.y + (-0.5));
        float _1551 = _1548 * (_1505.z + (-0.5));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = _1519 * 0.5;
        float _1556 = _1529 * 0.5;
        float _1557 = _1539 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1572 = (dot(vec3(_1112, _1113, _1114), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1582 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4346 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1584 + 1.0))) + _1589) * _1552;
        float _1599 = _1520 * 0.5;
        float _1600 = _1530 * 0.5;
        float _1601 = _1540 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_1112, _1113, _1114), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4357 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4368 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4379 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_1626 + 1.0))) + _1631) * _1553;
        float _1641 = _1521 * 0.5;
        float _1642 = _1531 * 0.5;
        float _1643 = _1541 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_1112, _1113, _1114), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4412 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1668 + 1.0))) + _1673) * _1554;
        _1690 = _1521;
        _1692 = _1520;
        _1693 = _1519;
        _1694 = _1531;
        _1695 = _1530;
        _1696 = _1529;
        _1697 = _1541;
        _1698 = _1540;
        _1699 = _1539;
        _1700 = _1554;
        _1701 = _1553;
        _1702 = _1552;
        _1703 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1704 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1705 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
    }
    else
    {
        _1690 = _1691;
        _1692 = _1691;
        _1693 = _1691;
        _1694 = _1691;
        _1695 = _1691;
        _1696 = _1691;
        _1697 = _1691;
        _1698 = _1691;
        _1699 = _1691;
        _1700 = _1691;
        _1701 = _1691;
        _1702 = _1691;
        _1703 = 0.0;
        _1704 = 0.0;
        _1705 = 0.0;
    }
    float _2000;
    float _2001;
    float _2002;
    float _2003;
    float _2004;
    float _2005;
    float _2006;
    float _2007;
    float _2008;
    float _2009;
    float _2010;
    float _2011;
    float _2012;
    float _2013;
    float _2014;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1731 = fma(_1361, cbModelParam._m0[30u].z, fma(_1357, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1353));
        float _1735 = fma(_1361, cbModelParam._m0[31u].z, fma(_1357, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1353));
        float _1739 = fma(_1361, cbModelParam._m0[32u].z, fma(_1357, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1353));
        float _1762 = _1353 + _1112;
        float _1763 = _1357 + _1113;
        float _1764 = _1361 + _1114;
        float _1774 = fma(_1764, cbModelParam._m0[30u].z, fma(_1763, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1762)) - _1731;
        float _1775 = fma(_1764, cbModelParam._m0[31u].z, fma(_1763, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1762)) - _1735;
        float _1776 = fma(_1764, cbModelParam._m0[32u].z, fma(_1763, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1762)) - _1739;
        float _1780 = inversesqrt(dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776)));
        float _1793 = ((_1780 * _1774) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1731 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1794 = ((_1780 * _1775) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1735 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1795 = ((_1780 * _1776) / cbModelParam._m0[35u].z) + ((((((_1739 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1797 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1793, _1794, _1795), 0.0);
        vec4 _1804 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1793, _1794, _1795), 0.0);
        vec4 _1811 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1793, _1794, _1795), 0.0);
        vec4 _1818 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1793, _1794, _1795), 0.0);
        float _1830 = exp2((_1797.w + (-0.5)) * 20.0) * 2.0;
        float _1831 = _1830 * (_1797.x + (-0.5));
        float _1832 = _1830 * (_1797.y + (-0.5));
        float _1833 = _1830 * (_1797.z + (-0.5));
        float _1840 = exp2((_1804.w + (-0.5)) * 20.0) * 2.0;
        float _1841 = _1840 * (_1804.x + (-0.5));
        float _1842 = _1840 * (_1804.y + (-0.5));
        float _1843 = _1840 * (_1804.z + (-0.5));
        float _1850 = exp2((_1811.w + (-0.5)) * 20.0) * 2.0;
        float _1851 = _1850 * (_1811.x + (-0.5));
        float _1852 = _1850 * (_1811.y + (-0.5));
        float _1853 = _1850 * (_1811.z + (-0.5));
        float _1860 = exp2((_1818.w + (-0.5)) * 20.0) * 2.0;
        float _1861 = _1860 * (_1818.x + (-0.5));
        float _1862 = _1860 * (_1818.y + (-0.5));
        float _1863 = _1860 * (_1818.z + (-0.5));
        float _1864 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1865 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1866 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1867 = _1831 * 0.5;
        float _1868 = _1841 * 0.5;
        float _1869 = _1851 * 0.5;
        float _1870 = dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869));
        float _1875 = (_1870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1870);
        float _1883 = (dot(vec3(_1112, _1113, _1114), vec3(_1875 * _1867, _1875 * _1868, _1875 * _1869)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1892 = sqrt(((_1868 * _1868) + (_1867 * _1867)) + (_1869 * _1869)) / (_1864 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1894 = _1893 * 2.0;
        float _1898 = (1.0 - _1893) / (_1893 + 1.0);
        float _4475 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1908 = ((((1.0 - _1899) * (_1894 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1894 + 1.0))) + _1899) * _1864;
        float _1909 = _1832 * 0.5;
        float _1910 = _1842 * 0.5;
        float _1911 = _1852 * 0.5;
        float _1912 = dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911));
        float _1917 = (_1912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1912);
        float _1925 = (dot(vec3(_1112, _1113, _1114), vec3(_1917 * _1909, _1917 * _1910, _1917 * _1911)) + 1.0) * 0.5;
        float _4486 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1934 = sqrt(((_1910 * _1910) + (_1909 * _1909)) + (_1911 * _1911)) / (_1865 + 9.9999997473787516355514526367188e-06);
        float _4497 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1936 = _1935 * 2.0;
        float _1940 = (1.0 - _1935) / (_1935 + 1.0);
        float _4508 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1941 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1950 = ((((1.0 - _1941) * (_1936 + 2.0)) * exp2(log2(isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_1936 + 1.0))) + _1941) * _1865;
        float _1951 = _1833 * 0.5;
        float _1952 = _1843 * 0.5;
        float _1953 = _1853 * 0.5;
        float _1954 = dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953));
        float _1959 = (_1954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1954);
        float _1967 = (dot(vec3(_1112, _1113, _1114), vec3(_1959 * _1951, _1959 * _1952, _1959 * _1953)) + 1.0) * 0.5;
        float _4519 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1976 = sqrt(((_1952 * _1952) + (_1951 * _1951)) + (_1953 * _1953)) / (_1866 + 9.9999997473787516355514526367188e-06);
        float _4530 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1977 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _1978 = _1977 * 2.0;
        float _1982 = (1.0 - _1977) / (_1977 + 1.0);
        float _4541 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _1992 = ((((1.0 - _1983) * (_1978 + 2.0)) * exp2(log2(isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_1978 + 1.0))) + _1983) * _1866;
        _2000 = _1833;
        _2001 = _1832;
        _2002 = _1831;
        _2003 = _1843;
        _2004 = _1842;
        _2005 = _1841;
        _2006 = _1853;
        _2007 = _1852;
        _2008 = _1851;
        _2009 = _1866;
        _2010 = _1865;
        _2011 = _1864;
        _2012 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)));
        _2013 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0)));
        _2014 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0)));
    }
    else
    {
        _2000 = _1691;
        _2001 = _1691;
        _2002 = _1691;
        _2003 = _1691;
        _2004 = _1691;
        _2005 = _1691;
        _2006 = _1691;
        _2007 = _1691;
        _2008 = _1691;
        _2009 = _1691;
        _2010 = _1691;
        _2011 = _1691;
        _2012 = 0.0;
        _2013 = 0.0;
        _2014 = 0.0;
    }
    float _2024 = (cbModelParam._m0[1u].x * (_2012 - _1703)) + _1703;
    float _2025 = (cbModelParam._m0[1u].x * (_2013 - _1704)) + _1704;
    float _2026 = (cbModelParam._m0[1u].x * (_2014 - _1705)) + _1705;
    float _2047 = fma(_2026, cbSceneParam._m0[89u].z, fma(_2025, cbSceneParam._m0[89u].y, _2024 * cbSceneParam._m0[89u].x));
    float _2050 = fma(_2026, cbSceneParam._m0[90u].z, fma(_2025, cbSceneParam._m0[90u].y, _2024 * cbSceneParam._m0[90u].x));
    float _2053 = fma(_2026, cbSceneParam._m0[91u].z, fma(_2025, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2024));
    float _2068 = _1297 * 0.5;
    float _2069 = _1298 * 0.5;
    float _2070 = _1299 * 0.5;
    float _2071 = dot(vec4(_2068, _2069, _2070, 1.0), vec4(_2002, _2005, _2008, _2011));
    float _2074 = dot(vec4(_2068, _2069, _2070, 1.0), vec4(_2001, _2004, _2007, _2010));
    float _2077 = dot(vec4(_2068, _2069, _2070, 1.0), vec4(_2000, _2003, _2006, _2009));
    float _2111;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2084 = dot(vec4(_2068, _2069, _2070, 1.0), vec4(_1690, _1694, _1697, _1700));
        float _2088 = dot(vec4(_2068, _2069, _2070, 1.0), vec4(_1692, _1695, _1698, _1701));
        float _2092 = dot(vec4(_2068, _2069, _2070, 1.0), vec4(_1693, _1696, _1699, _1702));
        float _2099 = dot(vec4(cbModelParam._m0[39u]), vec4(_2068, _2069, _2070, 1.0));
        _2111 = dot(vec3(isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0)), isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0)), isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2099) ? 0.0 : (isnan(0.0) ? _2099 : max(0.0, _2099))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2111 = 1.0;
    }
    float _2122;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2113 = dot(vec4(cbModelParam._m0[40u]), vec4(_2068, _2069, _2070, 1.0));
        _2122 = dot(vec3(isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0)), isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0)), isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2113) ? 0.0 : (isnan(0.0) ? _2113 : max(0.0, _2113))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2122 = 1.0;
    }
    float _2126 = (_2122 * cbModelParam._m0[1u].x) + (_2111 * (1.0 - cbModelParam._m0[1u].x));
    float _2136 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1115);
    float _2137 = isnan(_2136) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2136 : min(cbModelParam._m0[25u].z, _2136));
    float _2217;
    float _2219;
    float _2221;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2184 = fma(_1361, cbModelParam._m0[13u].z, fma(_1357, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1353)) + cbModelParam._m0[13u].w;
        float _2188 = fma(_1361, cbModelParam._m0[14u].z, fma(_1357, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1353)) + cbModelParam._m0[14u].w;
        float _2192 = fma(_1361, cbModelParam._m0[15u].z, fma(_1357, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1353)) + cbModelParam._m0[15u].w;
        float _2195 = fma(_1299, cbModelParam._m0[13u].z, fma(_1298, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1297));
        float _2198 = fma(_1299, cbModelParam._m0[14u].z, fma(_1298, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1297));
        float _2201 = fma(_1299, cbModelParam._m0[15u].z, fma(_1298, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1297));
        float _2229;
        if (_2195 > 0.0)
        {
            _2229 = abs((1.0 - _2184) / _2195);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2195 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2184 + 1.0) / _2195);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2229 = frontier_phi_17_15_ladder;
        }
        float _2431;
        if (_2198 > 0.0)
        {
            _2431 = abs((1.0 - _2188) / _2198);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2198 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2188 + 1.0) / _2198);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2431 = frontier_phi_26_22_ladder;
        }
        float _2685;
        if (_2201 > 0.0)
        {
            _2685 = abs((1.0 - _2192) / _2201);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2201 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2192 + 1.0) / _2201);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2685 = frontier_phi_38_33_ladder;
        }
        float _2687 = isnan(_2431) ? _2229 : (isnan(_2229) ? _2431 : min(_2229, _2431));
        float _2688 = isnan(_2685) ? _2687 : (isnan(_2687) ? _2685 : min(_2687, _2685));
        float _2692 = (_2688 * _2195) + _2184;
        float _2693 = (_2688 * _2198) + _2188;
        float _2694 = (_2688 * _2201) + _2192;
        float _2695 = _2688 * 9.9999997473787516355514526367188e-05;
        float _2697 = (-1.0) - _2695;
        float _2699 = _2695 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2694 > _2699) || ((_2694 < _2697) || ((_2693 > _2699) || ((_2693 < _2697) || ((_2692 < _2697) || (_2692 > _2699))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2694, cbModelParam._m0[9u].z, fma(_2693, cbModelParam._m0[9u].y, _2692 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2694, cbModelParam._m0[10u].z, fma(_2693, cbModelParam._m0[10u].y, _2692 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2694, cbModelParam._m0[11u].z, fma(_2693, cbModelParam._m0[11u].y, _2692 * cbModelParam._m0[11u].x))), _2137);
            frontier_phi_16_38_ladder = _2822.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2822.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2822.x * cbModelParam._m0[1u].y;
        }
        _2217 = frontier_phi_16_38_ladder_2;
        _2219 = frontier_phi_16_38_ladder_1;
        _2221 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2205 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1297, _1298, _1299), _2137);
        _2217 = _2205.x * cbModelParam._m0[1u].y;
        _2219 = _2205.y * cbModelParam._m0[1u].y;
        _2221 = _2205.z * cbModelParam._m0[1u].y;
    }
    float _2225 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1115);
    float _2226 = isnan(_2225) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2225 : min(cbModelParam._m0[25u].w, _2225));
    float _2315;
    float _2317;
    float _2319;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2279 = fma(_1361, cbModelParam._m0[21u].z, fma(_1357, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1353)) + cbModelParam._m0[21u].w;
        float _2283 = fma(_1361, cbModelParam._m0[22u].z, fma(_1357, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1353)) + cbModelParam._m0[22u].w;
        float _2287 = fma(_1361, cbModelParam._m0[23u].z, fma(_1357, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1353)) + cbModelParam._m0[23u].w;
        float _2290 = fma(_1299, cbModelParam._m0[21u].z, fma(_1298, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1297));
        float _2293 = fma(_1299, cbModelParam._m0[22u].z, fma(_1298, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1297));
        float _2296 = fma(_1299, cbModelParam._m0[23u].z, fma(_1298, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1297));
        float _2436;
        if (_2290 > 0.0)
        {
            _2436 = abs((1.0 - _2279) / _2290);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2290 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2279 + 1.0) / _2290);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2436 = frontier_phi_28_24_ladder;
        }
        float _2712;
        if (_2293 > 0.0)
        {
            _2712 = abs((1.0 - _2283) / _2293);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2293 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2283 + 1.0) / _2293);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2712 = frontier_phi_40_35_ladder;
        }
        float _2925;
        if (_2296 > 0.0)
        {
            _2925 = abs((1.0 - _2287) / _2296);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2296 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2287 + 1.0) / _2296);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2925 = frontier_phi_49_46_ladder;
        }
        float _2927 = isnan(_2712) ? _2436 : (isnan(_2436) ? _2712 : min(_2436, _2712));
        float _2928 = isnan(_2925) ? _2927 : (isnan(_2927) ? _2925 : min(_2927, _2925));
        float _2932 = (_2928 * _2290) + _2279;
        float _2933 = (_2928 * _2293) + _2283;
        float _2934 = (_2928 * _2296) + _2287;
        float _2935 = _2928 * 9.9999997473787516355514526367188e-05;
        float _2936 = (-1.0) - _2935;
        float _2938 = _2935 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2934 > _2938) || ((_2934 < _2936) || ((_2933 > _2938) || ((_2933 < _2936) || ((_2932 < _2936) || (_2932 > _2938))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3133 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2934, cbModelParam._m0[17u].z, fma(_2933, cbModelParam._m0[17u].y, _2932 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2934, cbModelParam._m0[18u].z, fma(_2933, cbModelParam._m0[18u].y, _2932 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2934, cbModelParam._m0[19u].z, fma(_2933, cbModelParam._m0[19u].y, _2932 * cbModelParam._m0[19u].x))), _2226);
            frontier_phi_25_49_ladder = _3133.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3133.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3133.x * cbModelParam._m0[1u].z;
        }
        _2315 = frontier_phi_25_49_ladder_2;
        _2317 = frontier_phi_25_49_ladder_1;
        _2319 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2299 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1297, _1298, _1299), _2226);
        _2315 = _2299.x * cbModelParam._m0[1u].z;
        _2317 = _2299.y * cbModelParam._m0[1u].z;
        _2319 = _2299.z * cbModelParam._m0[1u].z;
    }
    float _2332 = (((_1324 * _1273) + _1325) * _1289) * ((cbModelParam._m0[1u].w * (_2315 - _2217)) + _2217);
    float _2334 = (((_1324 * _1275) + _1325) * _1289) * ((cbModelParam._m0[1u].w * (_2317 - _2219)) + _2219);
    float _2336 = (((_1324 * _1276) + _1325) * _1289) * ((cbModelParam._m0[1u].w * (_2319 - _2221)) + _2221);
    float _2339 = fma(_2336, cbSceneParam._m0[89u].z, fma(_2334, cbSceneParam._m0[89u].y, _2332 * cbSceneParam._m0[89u].x));
    float _2342 = fma(_2336, cbSceneParam._m0[90u].z, fma(_2334, cbSceneParam._m0[90u].y, _2332 * cbSceneParam._m0[90u].x));
    float _2345 = fma(_2336, cbSceneParam._m0[91u].z, fma(_2334, cbSceneParam._m0[91u].y, _2332 * cbSceneParam._m0[91u].x));
    uvec4 _2355 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2357 = _2355.x * 14u;
    uint _2358 = _2357 + 13u;
    float _2365 = _1289 + (-1.0);
    float _2370 = (cbLight._m0[_2358].x * _2365) + 1.0;
    float _2371 = (cbLight._m0[_2358].y * _2365) + 1.0;
    float _2372 = (cbLight._m0[_2358].z * _2365) + 1.0;
    float _2373 = (cbLight._m0[_2358].w * _2365) + 1.0;
    uint _2374 = _2357 + 5u;
    float _2380 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
    uint _2384 = _2357 + 4u;
    float _2390 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
    uint _2394 = _2357 | 1u;
    float _2405 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_1112, _1113, _1114));
    float _2408 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_1112, _1113, _1114));
    float _4677 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _4688 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2413 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * 0.3183098733425140380859375;
    float _2415 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * 0.3183098733425140380859375;
    float _2422 = ((cbLight._m0[_2374].x * _2380) * _2415) + ((cbLight._m0[_2384].x * _2390) * _2413);
    float _2423 = ((_2380 * cbLight._m0[_2374].y) * _2415) + ((_2390 * cbLight._m0[_2384].y) * _2413);
    float _2424 = ((_2380 * cbLight._m0[_2374].z) * _2415) + ((_2390 * cbLight._m0[_2384].z) * _2413);
    uvec4 _2428 = floatBitsToUint(cbLight._m0[_2357 + 12u]);
    bool _2430 = _2428.x == 0u;
    float _2441;
    float _2443;
    float _2445;
    if (_2430)
    {
        _2441 = _2422;
        _2443 = _2423;
        _2445 = _2424;
    }
    else
    {
        uint _2449 = _2357 + 6u;
        float _2465 = (dot(vec3(cbLight._m0[_2357 + 2u].xyz), vec3(_1112, _1113, _1114)) * 0.5) + 0.5;
        float _2466 = _2465 * _2465;
        float _4699 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2467 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2468 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2441 = (((cbLight._m0[_2449].x * 0.3183098733425140380859375) * _2467) * _2468) + _2422;
        _2443 = (((cbLight._m0[_2449].y * 0.3183098733425140380859375) * _2467) * _2468) + _2423;
        _2445 = (((cbLight._m0[_2449].z * 0.3183098733425140380859375) * _2467) * _2468) + _2424;
    }
    bool _2448 = _2428.y == 0u;
    float _2486;
    float _2488;
    float _2490;
    if (_2448)
    {
        _2486 = _2441;
        _2488 = _2443;
        _2490 = _2445;
    }
    else
    {
        uint _2656 = _2357 + 7u;
        float _2672 = (dot(vec3(cbLight._m0[_2357 + 3u].xyz), vec3(_1112, _1113, _1114)) * 0.5) + 0.5;
        float _2673 = _2672 * _2672;
        float _4715 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2674 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2675 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
        _2486 = (((cbLight._m0[_2656].x * 0.3183098733425140380859375) * _2674) * _2675) + _2441;
        _2488 = (((cbLight._m0[_2656].y * 0.3183098733425140380859375) * _2674) * _2675) + _2443;
        _2490 = (((cbLight._m0[_2656].z * 0.3183098733425140380859375) * _2674) * _2675) + _2445;
    }
    uint _2493 = _2357 + 8u;
    float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _1115) * 0.949999988079071044921875);
    float _2507 = _2506 * _2506;
    float _2508 = cbLight._m0[_2357].x + _1191;
    float _2509 = cbLight._m0[_2357].y + _1192;
    float _2510 = cbLight._m0[_2357].z + _1193;
    float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
    float _2515 = _2514 * _2508;
    float _2516 = _2514 * _2509;
    float _2517 = _2514 * _2510;
    float _2518 = dot(vec3(_1112, _1113, _1114), vec3(cbLight._m0[_2357].xyz));
    float _4731 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _4742 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
    float _2522 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2523 = dot(vec3(_1112, _1113, _1114), vec3(_2515, _2516, _2517));
    float _4753 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2527 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2515, _2516, _2517));
    float _4764 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2531 = _2507 * _2507;
    float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
    float _2543 = exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0);
    float _2544 = 0.959999978542327880859375 - _1270;
    float _2546 = 0.959999978542327880859375 - _1271;
    float _2547 = 0.959999978542327880859375 - _1272;
    float _2554 = 1.0 - _2507;
    float _2565 = (0.5 / (((_2522 * ((_2521 * _2554) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2554) + _2507) * _2521))) * _2521;
    float _4775 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2567 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
    uint _2578 = _2357 + 9u;
    float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2394].w)) * _1115) * 0.949999988079071044921875);
    float _2590 = _2589 * _2589;
    float _2591 = cbLight._m0[_2394].x + _1191;
    float _2592 = cbLight._m0[_2394].y + _1192;
    float _2593 = cbLight._m0[_2394].z + _1193;
    float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
    float _2598 = _2597 * _2591;
    float _2599 = _2597 * _2592;
    float _2600 = _2597 * _2593;
    float _2601 = dot(vec3(_1112, _1113, _1114), vec3(cbLight._m0[_2394].xyz));
    float _4786 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2604 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
    float _2605 = dot(vec3(_1112, _1113, _1114), vec3(_2598, _2599, _2600));
    float _4797 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2608 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
    float _2609 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_2598, _2599, _2600));
    float _4808 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2613 = _2590 * _2590;
    float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
    float _2624 = exp2(log2(1.0 - (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) * 5.0);
    float _2631 = 1.0 - _2590;
    float _2641 = (0.5 / (((_2522 * ((_2604 * _2631) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2631) + _2590) * _2604))) * _2604;
    float _4819 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2643 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
    float _2653 = (((((_2624 * _2544) + _1273) * cbLight._m0[_2578].x) * _2643) * _2380) + (((((_2543 * _2544) + _1273) * cbLight._m0[_2493].x) * _2567) * _2390);
    float _2654 = (((((_2624 * _2546) + _1275) * cbLight._m0[_2578].y) * _2643) * _2380) + (((((_2543 * _2546) + _1275) * cbLight._m0[_2493].y) * _2567) * _2390);
    float _2655 = (((((_2624 * _2547) + _1276) * cbLight._m0[_2578].z) * _2643) * _2380) + (((((_2543 * _2547) + _1276) * cbLight._m0[_2493].z) * _2567) * _2390);
    float _2717;
    float _2719;
    float _2721;
    if (_2430)
    {
        _2717 = _2653;
        _2719 = _2654;
        _2721 = _2655;
    }
    else
    {
        uint _2723 = _2357 + 2u;
        uint _2727 = _2357 + 10u;
        float _2741 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2723].w)) * _1115) * 0.949999988079071044921875);
        float _2742 = _2741 * _2741;
        float _2743 = cbLight._m0[_2723].x + _1191;
        float _2744 = cbLight._m0[_2723].y + _1192;
        float _2745 = cbLight._m0[_2723].z + _1193;
        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
        float _2750 = _2749 * _2743;
        float _2751 = _2749 * _2744;
        float _2752 = _2749 * _2745;
        float _2753 = dot(vec3(_1112, _1113, _1114), vec3(cbLight._m0[_2723].xyz));
        float _4830 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2757 = dot(vec3(_1112, _1113, _1114), vec3(_2750, _2751, _2752));
        float _4841 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2761 = dot(vec3(cbLight._m0[_2723].xyz), vec3(_2750, _2751, _2752));
        float _4852 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2765 = _2742 * _2742;
        float _2769 = ((_2760 * _2760) * (_2765 + (-1.0))) + 1.0;
        float _2776 = exp2(log2(1.0 - (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) * 5.0);
        float _2783 = 1.0 - _2742;
        float _2793 = (0.5 / (((_2522 * ((_2756 * _2783) + _2742)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2783) + _2742) * _2756))) * _2756;
        float _4863 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2795 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2765 / ((_2769 * _2769) * 3.141590118408203125));
        float _2796 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2717 = (((((_2776 * _2544) + _1273) * cbLight._m0[_2727].x) * _2795) * _2796) + _2653;
        _2719 = (((((_2776 * _2546) + _1275) * cbLight._m0[_2727].y) * _2795) * _2796) + _2654;
        _2721 = (((((_2776 * _2547) + _1276) * cbLight._m0[_2727].z) * _2795) * _2796) + _2655;
    }
    float _2831;
    float _2833;
    float _2835;
    if (_2448)
    {
        _2831 = _2717;
        _2833 = _2719;
        _2835 = _2721;
    }
    else
    {
        uint _2842 = _2357 + 3u;
        uint _2846 = _2357 + 11u;
        float _2860 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2842].w)) * _1115) * 0.949999988079071044921875);
        float _2861 = _2860 * _2860;
        float _2862 = cbLight._m0[_2842].x + _1191;
        float _2863 = cbLight._m0[_2842].y + _1192;
        float _2864 = cbLight._m0[_2842].z + _1193;
        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
        float _2869 = _2868 * _2862;
        float _2870 = _2868 * _2863;
        float _2871 = _2868 * _2864;
        float _2872 = dot(vec3(_1112, _1113, _1114), vec3(cbLight._m0[_2842].xyz));
        float _4879 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2875 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _2876 = dot(vec3(_1112, _1113, _1114), vec3(_2869, _2870, _2871));
        float _4890 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2879 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
        float _2880 = dot(vec3(cbLight._m0[_2842].xyz), vec3(_2869, _2870, _2871));
        float _4901 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2884 = _2861 * _2861;
        float _2888 = ((_2879 * _2879) * (_2884 + (-1.0))) + 1.0;
        float _2895 = exp2(log2(1.0 - (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) * 5.0);
        float _2902 = 1.0 - _2861;
        float _2912 = (0.5 / (((_2522 * ((_2875 * _2902) + _2861)) + 9.9999999392252902907785028219223e-09) + (((_2522 * _2902) + _2861) * _2875))) * _2875;
        float _4912 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2914 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2884 / ((_2888 * _2888) * 3.141590118408203125));
        float _2915 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
        _2831 = (((((_2895 * _2544) + _1273) * cbLight._m0[_2846].x) * _2914) * _2915) + _2717;
        _2833 = (((((_2895 * _2546) + _1275) * cbLight._m0[_2846].y) * _2914) * _2915) + _2719;
        _2835 = (((((_2895 * _2547) + _1276) * cbLight._m0[_2846].z) * _2914) * _2915) + _2721;
    }
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    float _3058;
    float _3060;
    if (_2355.y == 0u)
    {
        float _2990 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2991 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2990;
        float _2992 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2990;
        float _2993 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2990;
        uvec4 _3005 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3006 = _3005.x;
        uint _3017 = uint((float(_3005.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1212) / _3006))) + floor(float(uint(cbSceneParam._m0[85u].x * _1211) / _3006)));
        float _3027 = (log2(_2993 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3028 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        uint _3031 = uint(isnan(14.0) ? _3028 : (isnan(_3028) ? 14.0 : min(_3028, 14.0)));
        uvec4 _3036 = texelFetch(g_lightClusterGridBuffer, int(((_3031 << 2u) + (_3017 << 6u)) >> 2u));
        uint _3037 = _3036.x;
        uint _3038 = _3005.z;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        if (((((1u << ((_3038 >> 4u) & 15u)) + 4294967295u) & _3037) == 0u) || ((_3038 & 240u) == 0u))
        {
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
            _3146 = 0.0;
            _3148 = 0.0;
        }
        else
        {
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3147;
            float _3149;
            float _3290 = 0.0;
            float _3291 = 0.0;
            float _3292 = 0.0;
            float _3293 = 0.0;
            float _3294 = 0.0;
            float _3295 = 0.0;
            uint _3296 = 0u;
            uint _3305;
            bool _3306;
            for (;;)
            {
                _3305 = texelFetch(g_lightClassification, int((((_3031 << 5u) + (_3017 << 9u)) + (_3296 << 2u)) >> 2u)).x;
                _3306 = _3305 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3306)
                {
                    frontier_phi_66_pred = _3290;
                    frontier_phi_66_pred_1 = _3295;
                    frontier_phi_66_pred_2 = _3294;
                    frontier_phi_66_pred_3 = _3293;
                    frontier_phi_66_pred_4 = _3292;
                    frontier_phi_66_pred_5 = _3291;
                }
                else
                {
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    uint _3441;
                    _3435 = _3290;
                    _3436 = _3291;
                    _3437 = _3292;
                    _3438 = _3293;
                    _3439 = _3294;
                    _3440 = _3295;
                    _3441 = _3305;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    for (;;)
                    {
                        uint _3445 = uint(findLSB(_3441)) + (_3296 << 5u);
                        uint _3442 = (_3441 + 4294967295u) & _3441;
                        uint _3447 = _3445 * 48u;
                        vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3447)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 3u)).x));
                        uint _3467 = (_3445 * 48u) + 4u;
                        vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3467)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 3u)).x));
                        uint _3486 = (_3445 * 48u) + 8u;
                        vec3 _3497 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3486)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 2u)).x));
                        float _3501 = _3461.x - _2991;
                        float _3502 = _3461.y - _2992;
                        float _3503 = _3461.z - _2993;
                        float _3504 = dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503));
                        float _3507 = inversesqrt(_3504);
                        float _3508 = _3507 * _3501;
                        float _3509 = _3507 * _3502;
                        float _3510 = _3507 * _3503;
                        float _3511 = dot(vec3(_1230, _1233, _1236), vec3(_3508, _3509, _3510));
                        float _3516 = 1.0 - (_3504 * _3461.w);
                        float _4938 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3517 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3518 = sqrt(_3504) * _3480.w;
                        float _3521 = 1.39999997615814208984375 / (_3518 + 1.39999997615814208984375);
                        float _3522 = _3521 * _3521;
                        float _3525 = ((1.0 - _3522) * _3511) + _3522;
                        float _3528 = _3518 * _3518;
                        float _3532 = ((isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0))) * _3517) / ((_3528 * 0.699999988079071044921875) + 1.0);
                        float _3536 = (-0.0) - _2991;
                        float _3537 = (-0.0) - _2992;
                        float _3538 = (-0.0) - _2993;
                        float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                        float _3543 = _3542 * _3536;
                        float _3544 = _3542 * _3537;
                        float _3545 = _3542 * _3538;
                        float _3553 = exp2(log2(1.0 / ((_3528 * 3.5) + 5.0)) * 0.25);
                        float _3554 = 1.0 - _1305;
                        float _3561 = sqrt(1.0 - ((1.0 - (_3554 * _3554)) * (1.0 - (_3553 * _3553))));
                        float _3562 = _3561 * _3561;
                        float _3563 = _3562 * _3562;
                        float _3564 = _3543 + _3508;
                        float _3565 = _3544 + _3509;
                        float _3566 = _3545 + _3510;
                        float _3570 = inversesqrt(dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566)));
                        float _3574 = dot(vec3(_1230, _1233, _1236), vec3(_3543, _3544, _3545));
                        float _4954 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3577 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                        float _3578 = dot(vec3(_1230, _1233, _1236), vec3(_3570 * _3564, _3570 * _3565, _3570 * _3566));
                        float _4965 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3581 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                        float _3585 = ((_3581 * _3581) * (_3563 + (-1.0))) + 1.0;
                        float _3586 = _3521 * _3562;
                        float _3587 = _3586 * _3586;
                        float _3590 = ((1.0 - _3587) * _3511) + _3587;
                        float _4976 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3591 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                        float _3592 = 1.0 - _3562;
                        float _3602 = (0.5 / (((_3591 * ((_3577 * _3592) + _3562)) + 9.9999999392252902907785028219223e-09) + (((_3591 * _3592) + _3562) * _3577))) * _3591;
                        float _4987 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                        float _3613 = (((_3563 * 3.1415927410125732421875) * (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0)))) / ((_3585 * _3585) * ((_3528 * 2.1991131305694580078125) + 3.141590118408203125))) * _3517;
                        _3365 = (_3532 * _3480.x) + _3438;
                        _3366 = (_3532 * _3480.y) + _3439;
                        _3367 = (_3532 * _3480.z) + _3440;
                        _3362 = (_3613 * _3497.x) + _3435;
                        _3363 = (_3613 * _3497.y) + _3436;
                        _3364 = (_3613 * _3497.z) + _3437;
                        if (_3442 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3435 = _3362;
                            _3436 = _3363;
                            _3437 = _3364;
                            _3438 = _3365;
                            _3439 = _3366;
                            _3440 = _3367;
                            _3441 = _3442;
                        }
                    }
                    frontier_phi_66_pred = _3362;
                    frontier_phi_66_pred_1 = _3367;
                    frontier_phi_66_pred_2 = _3366;
                    frontier_phi_66_pred_3 = _3365;
                    frontier_phi_66_pred_4 = _3364;
                    frontier_phi_66_pred_5 = _3363;
                }
                _3139 = frontier_phi_66_pred;
                _3149 = frontier_phi_66_pred_1;
                _3147 = frontier_phi_66_pred_2;
                _3145 = frontier_phi_66_pred_3;
                _3143 = frontier_phi_66_pred_4;
                _3141 = frontier_phi_66_pred_5;
                uint _3297 = _3296 + 1u;
                if (_3297 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3290 = _3139;
                    _3291 = _3141;
                    _3292 = _3143;
                    _3293 = _3145;
                    _3294 = _3147;
                    _3295 = _3149;
                    _3296 = _3297;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
            _3146 = _3147;
            _3148 = _3149;
        }
        uvec4 _3152 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3153 = _3152.z;
        uint _3155 = (_3153 >> 8u) & 15u;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        float _3268;
        if (((4294967295u << _3155) & _3037) == 0u)
        {
            _3258 = _3138;
            _3260 = _3140;
            _3262 = _3142;
            _3264 = _3144;
            _3266 = _3146;
            _3268 = _3148;
        }
        else
        {
            float _3283 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
            float _3284 = _3283 * _2991;
            float _3285 = _3283 * _2992;
            float _3286 = _3283 * _2993;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3155 < ((_3153 >> 12u) & 15u))
            {
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3269;
                float _3418 = _3138;
                float _3419 = _3140;
                float _3420 = _3142;
                float _3421 = _3144;
                float _3422 = _3146;
                float _3423 = _3148;
                uint _3424 = _3155;
                uint _3433;
                bool _3434;
                for (;;)
                {
                    _3433 = texelFetch(g_lightClassification, int((((_3031 << 5u) + (_3017 << 9u)) + (_3424 << 2u)) >> 2u)).x;
                    _3434 = _3433 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3434)
                    {
                        frontier_phi_77_pred = _3423;
                        frontier_phi_77_pred_1 = _3422;
                        frontier_phi_77_pred_2 = _3421;
                        frontier_phi_77_pred_3 = _3420;
                        frontier_phi_77_pred_4 = _3419;
                        frontier_phi_77_pred_5 = _3418;
                    }
                    else
                    {
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3925;
                        float _3640 = _3418;
                        float _3641 = _3419;
                        float _3642 = _3420;
                        float _3643 = _3421;
                        float _3644 = _3422;
                        float _3645 = _3423;
                        uint _3646 = _3433;
                        uint _3647;
                        vec4 _3672;
                        float _3673;
                        vec4 _3688;
                        vec3 _3700;
                        vec4 _3715;
                        vec4 _3730;
                        float _3776;
                        bool _3777;
                        for (;;)
                        {
                            uint _3657 = ((_3424 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3646));
                            _3647 = (_3646 + 4294967295u) & _3646;
                            uint _3659 = _3657 * 40u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3673 = _3672.w;
                            uint _3675 = (_3657 * 40u) + 4u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3690 = (_3657 * 40u) + 8u;
                            _3700 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x));
                            uint _3702 = (_3657 * 40u) + 16u;
                            _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3717 = (_3657 * 40u) + 20u;
                            _3730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 3u)).x));
                            uint _3732 = (_3657 * 40u) + 24u;
                            vec4 _3745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 3u)).x));
                            uint _3751 = (_3657 * 40u) + 28u;
                            vec4 _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            _3776 = fma(_2993, _3764.z, fma(_2992, _3764.y, _3764.x * _2991)) + _3764.w;
                            _3777 = !((fma(_2993, _3745.z, fma(_2992, _3745.y, _3745.x * _2991)) + _3745.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3777)
                            {
                                float _3804 = _3672.x - _2991;
                                float _3805 = _3672.y - _2992;
                                float _3806 = _3672.z - _2993;
                                float _3807 = dot(vec3(_3804, _3805, _3806), vec3(_3804, _3805, _3806));
                                float _3810 = inversesqrt(_3807);
                                float _3811 = _3810 * _3804;
                                float _3812 = _3810 * _3805;
                                float _3813 = _3810 * _3806;
                                float _3817 = 1.0 - (_3807 / (_3673 * _3673));
                                float _4998 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3818 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3822 = sqrt(_3807) * _3688.w;
                                float _3824 = 1.39999997615814208984375 / (_3822 + 1.39999997615814208984375);
                                float _3825 = _3824 * _3824;
                                float _3828 = ((1.0 - _3825) * dot(vec3(_3811, _3812, _3813), vec3(_1230, _1233, _1236))) + _3825;
                                float _3831 = _3822 * _3822;
                                float _3835 = (fma(_2993, _3715.z, fma(_2992, _3715.y, _3715.x * _2991)) + _3715.w) / _3776;
                                float _3836 = (fma(_2993, _3730.z, fma(_2992, _3730.y, _3730.x * _2991)) + _3730.w) / _3776;
                                float _3840 = 1.0 - dot(vec2(_3835, _3836), vec2(_3835, _3836));
                                float _5014 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3841 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3842 = _3841 * (((isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0))) * _3818) / ((_3831 * 0.699999988079071044921875) + 1.0));
                                float _3854 = exp2(log2(1.0 / ((_3831 * 3.5) + 5.0)) * 0.25);
                                float _3855 = 1.0 - _1305;
                                float _3862 = sqrt(1.0 - ((1.0 - (_3855 * _3855)) * (1.0 - (_3854 * _3854))));
                                float _3863 = _3862 * _3862;
                                float _3864 = _3863 * _3863;
                                float _3865 = _3811 - _3284;
                                float _3866 = _3812 - _3285;
                                float _3867 = _3813 - _3286;
                                float _3871 = inversesqrt(dot(vec3(_3865, _3866, _3867), vec3(_3865, _3866, _3867)));
                                float _3875 = dot(vec3(_1230, _1233, _1236), vec3((-0.0) - _3284, (-0.0) - _3285, (-0.0) - _3286));
                                float _5025 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3878 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3879 = dot(vec3(_1230, _1233, _1236), vec3(_3871 * _3865, _3871 * _3866, _3871 * _3867));
                                float _5036 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3882 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                                float _3886 = ((_3882 * _3882) * (_3864 + (-1.0))) + 1.0;
                                float _3887 = _3824 * _3863;
                                float _3888 = _3887 * _3887;
                                float _3894 = ((1.0 - _3888) * dot(vec3(_1230, _1233, _1236), vec3(_3811, _3812, _3813))) + _3888;
                                float _5047 = isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0));
                                float _3895 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                                float _3896 = 1.0 - _3863;
                                float _3906 = (0.5 / (((_3895 * ((_3878 * _3896) + _3863)) + 9.9999999392252902907785028219223e-09) + (((_3895 * _3896) + _3863) * _3878))) * _3895;
                                float _5058 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3916 = (_3841 * _3818) * (((_3864 * 3.1415927410125732421875) * (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0)))) / ((_3886 * _3886) * ((_3831 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3842 * _3688.y;
                                frontier_phi_83_pred_1 = _3842 * _3688.x;
                                frontier_phi_83_pred_2 = _3916 * _3700.z;
                                frontier_phi_83_pred_3 = _3916 * _3700.y;
                                frontier_phi_83_pred_4 = _3916 * _3700.x;
                                frontier_phi_83_pred_5 = _3842 * _3688.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3924 = frontier_phi_83_pred;
                            _3923 = frontier_phi_83_pred_1;
                            _3922 = frontier_phi_83_pred_2;
                            _3921 = frontier_phi_83_pred_3;
                            _3920 = frontier_phi_83_pred_4;
                            _3925 = frontier_phi_83_pred_5;
                            _3630 = _3923 + _3643;
                            _3631 = _3924 + _3644;
                            _3632 = _3925 + _3645;
                            _3627 = _3920 + _3640;
                            _3628 = _3921 + _3641;
                            _3629 = _3922 + _3642;
                            if (_3647 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3647;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3632;
                        frontier_phi_77_pred_1 = _3631;
                        frontier_phi_77_pred_2 = _3630;
                        frontier_phi_77_pred_3 = _3629;
                        frontier_phi_77_pred_4 = _3628;
                        frontier_phi_77_pred_5 = _3627;
                    }
                    _3269 = frontier_phi_77_pred;
                    _3267 = frontier_phi_77_pred_1;
                    _3265 = frontier_phi_77_pred_2;
                    _3263 = frontier_phi_77_pred_3;
                    _3261 = frontier_phi_77_pred_4;
                    _3259 = frontier_phi_77_pred_5;
                    uint _3425 = _3424 + 1u;
                    if (_3425 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3418 = _3259;
                        _3419 = _3261;
                        _3420 = _3263;
                        _3421 = _3265;
                        _3422 = _3267;
                        _3423 = _3269;
                        _3424 = _3425;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3263;
                frontier_phi_58_59_ladder_1 = _3269;
                frontier_phi_58_59_ladder_2 = _3267;
                frontier_phi_58_59_ladder_3 = _3265;
                frontier_phi_58_59_ladder_4 = _3261;
                frontier_phi_58_59_ladder_5 = _3259;
            }
            else
            {
                frontier_phi_58_59_ladder = _3142;
                frontier_phi_58_59_ladder_1 = _3148;
                frontier_phi_58_59_ladder_2 = _3146;
                frontier_phi_58_59_ladder_3 = _3144;
                frontier_phi_58_59_ladder_4 = _3140;
                frontier_phi_58_59_ladder_5 = _3138;
            }
            _3258 = frontier_phi_58_59_ladder_5;
            _3260 = frontier_phi_58_59_ladder_4;
            _3262 = frontier_phi_58_59_ladder;
            _3264 = frontier_phi_58_59_ladder_3;
            _3266 = frontier_phi_58_59_ladder_2;
            _3268 = frontier_phi_58_59_ladder_1;
        }
        float _3273 = isnan(1.0) ? _1289 : (isnan(_1289) ? 1.0 : min(_1289, 1.0));
        _3050 = (_3273 * _3264) + _2486;
        _3052 = (_3273 * _3266) + _2488;
        _3054 = (_3273 * _3268) + _2490;
        _3056 = ((_3258 * _1273) * _3273) + _2831;
        _3058 = ((_3260 * _1275) * _3273) + _2833;
        _3060 = ((_3262 * _1276) * _3273) + _2835;
    }
    else
    {
        _3050 = _2486;
        _3052 = _2488;
        _3054 = _2490;
        _3056 = _2831;
        _3058 = _2833;
        _3060 = _2835;
    }
    float _5074 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _5085 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
    float _5096 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
    float _3077 = ((isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0))) * (_3050 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1289))) + ((_3056 + ((isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0))) * _2126)) * cbPerFrame._m0[3u].x);
    float _3078 = ((isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0))) * (_3052 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1289))) + ((_3058 + ((isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0))) * _2126)) * cbPerFrame._m0[3u].x);
    float _3079 = ((isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0))) * (_3054 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1289))) + ((_3060 + ((isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0))) * _2126)) * cbPerFrame._m0[3u].x);
    uint _3080 = _273 + 6u;
    float _3088 = _1211 / cbSceneParam._m0[86u].x;
    float _3089 = _1212 / cbSceneParam._m0[86u].y;
    vec4 _3103 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3088, _3089, (log2((isnan(cbSceneParam._m0[77u].w) ? _1134 : (isnan(_1134) ? cbSceneParam._m0[77u].w : min(_1134, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3105 = _3103.x;
    float _3106 = _3103.y;
    float _3107 = _3103.z;
    float _3108 = _3103.w;
    float _3200;
    float _3202;
    float _3204;
    float _3206;
    if (_1134 > cbSceneParam._m0[78u].w)
    {
        float _3163 = isnan(_1134) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1134 : min(cbSceneParam._m0[80u].w, _1134));
        float _3164 = _3163 / _1134;
        float _3175 = _3164 * _1184;
        float _3176 = _1185 * _3164;
        float _3177 = (-0.0) - _3176;
        float _3178 = _3164 * _1186;
        float _3180 = (cbSceneParam._m0[77u].w * _3177) / _3163;
        float _3181 = _3180 + cbSceneParam._m0[79u].w;
        float _3182 = cbSceneParam._m0[79u].w - _3176;
        float _3188 = sqrt(((_3175 * _3175) + (_3176 * _3176)) + (_3178 * _3178));
        float _3191 = (1.0 - (cbSceneParam._m0[77u].w / _3163)) * _3188;
        float _3196 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3198 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3375;
        if (abs((_3177 - _3180) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3375 = ((((_3181 > 0.0) ? exp2(_3196 * _3181) : (2.0 - exp2(_3198 * _3181))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3191;
        }
        else
        {
            float _3319 = 1.0 / cbSceneParam._m0[80u].x;
            float _3320 = isnan(_3182) ? _3181 : (isnan(_3181) ? _3182 : max(_3181, _3182));
            float _3321 = isnan(_3182) ? _3181 : (isnan(_3181) ? _3182 : min(_3181, _3182));
            float _3330 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : min(_3320, 0.0));
            float _3331 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : min(_3321, 0.0));
            _3375 = ((abs(_3188 / _3177) * cbSceneParam._m0[80u].y) * ((((_3330 - _3331) * 2.0) - ((exp2(_3196 * (isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0)))) - exp2(_3196 * (isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0))))) * _3319)) - ((exp2(_3198 * _3330) - exp2(_3198 * _3331)) * _3319))) + (_3191 * cbSceneParam._m0[80u].z);
        }
        vec4 _3377 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3088, _3089, 1.0), 0.0);
        float _3386 = exp2((_3375 * (-1.44269502162933349609375)) * (1.0 - _3377.w));
        float _3387 = log2(_3386);
        float _3403 = log2(_3108);
        _3200 = (exp2(_3403 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3387 * cbSceneParam._m0[78u].x)) * _3377.x) / cbSceneParam._m0[78u].x)) + _3105;
        _3202 = (exp2(_3403 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3387 * cbSceneParam._m0[78u].y)) * _3377.y) / cbSceneParam._m0[78u].y)) + _3106;
        _3204 = (exp2(_3403 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3387 * cbSceneParam._m0[78u].z)) * _3377.z) / cbSceneParam._m0[78u].z)) + _3107;
        _3206 = _3386 * _3108;
    }
    else
    {
        _3200 = _3105;
        _3202 = _3106;
        _3204 = _3107;
        _3206 = _3108;
    }
    bool _3413;
    vec4 _3216;
    vec4 _3238;
    float _3240;
    float _3244;
    float _3245;
    float _3246;
    float _3247;
    bool _3257;
    for (;;)
    {
        _3216 = cbMatDynParam._m0[0u];
        float _3218 = roundEven(_3216.y);
        bool _3219 = _3218 == 3.0;
        float _3220 = log2(_3206);
        float _3227 = exp2(_3220 * cbSceneParam._m0[78u].x) * _3077;
        float _3228 = exp2(_3220 * cbSceneParam._m0[78u].y) * _3078;
        float _3229 = exp2(_3220 * cbSceneParam._m0[78u].z) * _3079;
        float _3236 = _1200 + (-0.5);
        _3238 = cbMtdParam._m0[1u];
        _3240 = _3238.y * _3236;
        float _3243 = (_3218 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3244 = _3243 * (_3219 ? _3227 : (_3227 + (cbSceneParam._m0[72u].w * _3200)));
        _3245 = _3243 * (_3219 ? _3228 : (_3228 + (cbSceneParam._m0[72u].w * _3202)));
        _3246 = _3243 * (_3219 ? _3229 : (_3229 + (cbSceneParam._m0[72u].w * _3204)));
        _3247 = _3236 * 0.999000012874603271484375;
        _3257 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3257)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _3247) < 0.5)
            {
                _3413 = true;
                break;
            }
        }
        uint _3354 = _1249 + uint(_3216.w);
        if ((cbInstanceData._m0[_3354].w < 1.0) && ((cbInstanceData._m0[_3354].w + _3247) < 0.5))
        {
            _3413 = true;
            break;
        }
        if ((_3240 + 1.0) < _3238.x)
        {
            _3413 = true;
            break;
        }
        _3413 = false;
        break;
    }
    float _3618;
    if (_3413)
    {
        discard_state = true;
        _3618 = 0.0;
    }
    else
    {
        _3618 = cbInstanceData._m0[_3080].w;
    }
    SV_Target.x = _3244;
    SV_Target.y = _3245;
    SV_Target.z = _3246;
    SV_Target.w = _3618;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3080].w;
    discard_exit();
}


