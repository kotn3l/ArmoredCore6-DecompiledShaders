#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1619;
float _4020;
float _4021;
float _4022;
float _4023;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _257 = _256 * _248;
    float _258 = _256 * _249;
    float _259 = _256 * _250;
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = _263 * NORMAL.x;
    float _265 = _263 * NORMAL.y;
    float _266 = _263 * NORMAL.z;
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = _270 * TANGENT.x;
    float _272 = _270 * TANGENT.y;
    float _273 = _270 * TANGENT.z;
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4032 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4043 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4054 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _397.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[23u].w) + _443) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4065 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _468 = (_461 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _469 = (_461 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _470 = (_461 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _397.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[23u].w) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4076 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    float _547 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _541;
    float _550 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _542;
    float _553 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _543;
    float _560 = ((_541 - _547) * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) + _547;
    float _561 = ((_542 - _550) * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) + _550;
    float _562 = ((_543 - _553) * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) + _553;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _314) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _315) + cbTextureTilingScale._m0[14u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _642 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _644 = _642.x;
    float _645 = _642.y;
    float _646 = _642.z;
    float _653 = ((_625.x - _644) * _461) + _644;
    float _654 = ((_625.y - _645) * _461) + _645;
    float _655 = ((_625.z - _646) * _461) + _646;
    vec4 _667 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _680 = ((_667.z - _655) * _534) + _655;
    float _683 = ((((_667.x - _653) * _534) + _653) * 2.0) + (-1.0);
    float _684 = ((((_667.y - _654) * _534) + _654) * 2.0) + (-1.0);
    float _685 = dot(vec2(_683, _684), vec2(_683, _684));
    float _4087 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _690 = sqrt(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))));
    vec4 _708 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _720 = (_683 + ((((_600.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_708.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _721 = (_684 + ((((_600.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_708.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _724 = fma(_690, _264, fma(_721, _271, _720 * _257));
    float _727 = fma(_690, _265, fma(_721, _272, _720 * _258));
    float _730 = fma(_690, _266, fma(_721, _273, _720 * _259));
    float _734 = inversesqrt(dot(vec3(_724, _727, _730), vec3(_724, _727, _730)));
    vec4 _761 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _763 = _761.x;
    float _764 = 1.0 - _763;
    float _773 = (cbMtdParam._m0[19u].x + dot(vec4(_734 * _724, _734 * _727, _734 * _730, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_763 - _764) * cbMtdParam._m0[24u].z) + _764) * cbMtdParam._m0[21u].z);
    float _4098 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _774 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _776 = (-0.0) - cbMtdParam._m0[24u].x;
    float _778 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _778 : (isnan(_778) ? 1.0 : min(_778, 1.0));
    float _786 = _774 - ((_774 * TEXCOORD_8.x) * _779);
    float _787 = _774 - ((_774 * TEXCOORD_8.y) * _779);
    float _788 = _774 - ((_774 * TEXCOORD_8.z) * _779);
    float _795 = (_786 * ((_581.x * cbMtdParam._m0[18u].x) - _560)) + _560;
    float _796 = (_787 * ((_581.y * cbMtdParam._m0[18u].y) - _561)) + _561;
    float _797 = (_788 * ((_581.z * cbMtdParam._m0[18u].z) - _562)) + _562;
    vec4 _809 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _811 = _809.x;
    float _812 = 1.0 - _811;
    float _838 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_811 - _812) * cbMtdParam._m0[24u].w) + _812) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4119 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _839 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _847 = ((((cbMtdParam._m0[10u].x - _795) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _839) + _795;
    float _848 = ((((cbMtdParam._m0[10u].y - _796) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _839) + _796;
    float _849 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _797)) * _839) + _797;
    vec4 _875 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _877 = _875.x;
    float _895 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _877) * _461) + _877;
    float _912 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _895) * _534) + _895;
    float _916 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _912) * cbMtdParam._m0[19u].z) + _912;
    float _918 = _916 - (_916 * _786);
    float _920 = _918 - (_918 * _839);
    float _925 = (((_600.z - _680) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _680;
    float _929 = ((_708.z - _925) * cbMtdParam._m0[19u].w) + _925;
    vec4 _943 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _950 = (_943.x * 2.0) + (-1.0);
    float _951 = (_943.y * 2.0) + (-1.0);
    float _952 = dot(vec2(_950, _951), vec2(_950, _951));
    float _4130 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _960 = ((_943.z - _929) * _786) + _929;
    float _963 = ((cbMtdParam._m0[23u].x - _960) * _839) + _960;
    vec4 _984 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _990 = (_984.x * 2.0) + (-1.0);
    float _991 = (_984.y * 2.0) + (-1.0);
    float _992 = dot(vec2(_990, _991), vec2(_990, _991));
    float _4141 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _1007 = ((sqrt(1.0 - (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) - _690) * _788) + _690;
    float _1010 = (((_950 - _720) * _786) + _720) + (cbMtdParam._m0[21u].x * _720);
    float _1011 = (((_951 - _721) * _787) + _721) + (cbMtdParam._m0[21u].x * _721);
    float _1022 = (((_990 - _1010) + (_1010 * cbMtdParam._m0[22u].z)) * _839) + _1010;
    float _1023 = (((_991 - _1011) + (_1011 * cbMtdParam._m0[22u].z)) * _839) + _1011;
    float _1024 = (_839 * (sqrt(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) - _1007)) + _1007;
    float _1026 = cbMtdParam._m0[22u].x + _708.w;
    float _1029 = fma(_1024, _264, fma(_1023, _271, _1022 * _257));
    float _1032 = fma(_1024, _265, fma(_1023, _272, _1022 * _258));
    float _1035 = fma(_1024, _266, fma(_1023, _273, _1022 * _259));
    float _1039 = inversesqrt(dot(vec3(_1029, _1032, _1035), vec3(_1029, _1032, _1035)));
    float _1040 = _1039 * _1029;
    float _1041 = _1039 * _1032;
    float _1042 = _1039 * _1035;
    float _4152 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _1043 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _4163 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _4174 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4185 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4196 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4207 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _1048 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _1062 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1112 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1102);
    float _1113 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1102);
    float _1114 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1102);
    float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
    float _1119 = _1112 * _1118;
    float _1120 = _1113 * _1118;
    float _1121 = _1114 * _1118;
    vec4 _1126 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1128 = _1126.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1300 = sqrt(((_1112 * _1112) + (_1113 * _1113)) + (_1114 * _1114));
        float _1306 = (cbMatDynParam._m0[5u].x * _1300) + cbMatDynParam._m0[5u].y;
        float _4218 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1311 = (cbMatDynParam._m0[5u].z * _1300) + cbMatDynParam._m0[5u].w;
        float _4229 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) - _1307)) + _1307) < ((_1128 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1139 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1140 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1158 = fma(_1042, cbSceneParam._m0[5u].z, fma(_1041, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1040));
    float _1161 = fma(_1042, cbSceneParam._m0[6u].z, fma(_1041, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1040));
    float _1164 = fma(_1042, cbSceneParam._m0[7u].z, fma(_1041, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1040));
    uint _1177 = _295 + 9u;
    uint _1178 = _1177 + uint(cbMatDynParam._m0[0u].w);
    float _1184 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * cbInstanceData._m0[_1178].x;
    float _1185 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * cbInstanceData._m0[_1178].y;
    float _1186 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * cbInstanceData._m0[_1178].z;
    float _4240 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _1187 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _4251 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1188 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _1189 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _1190 = 1.0 - _1048;
    float _1191 = _1187 * _1190;
    float _1192 = _1188 * _1190;
    float _1193 = _1189 * _1190;
    float _1198 = (_1187 + (-0.039999999105930328369140625)) * _1048;
    float _1199 = (_1188 + (-0.039999999105930328369140625)) * _1048;
    float _1200 = (_1189 + (-0.039999999105930328369140625)) * _1048;
    float _1201 = _1198 + 0.039999999105930328369140625;
    float _1203 = _1199 + 0.039999999105930328369140625;
    float _1204 = _1200 + 0.039999999105930328369140625;
    vec4 _1213 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1139, cbSceneParam._m0[86u].y * _1140));
    float _1217 = ((isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * TEXCOORD_5.w) * _1213.x;
    float _1218 = dot(vec3(_1040, _1041, _1042), vec3(_1119, _1120, _1121));
    float _1221 = _1218 * 2.0;
    float _1225 = (_1221 * _1040) - _1119;
    float _1226 = (_1221 * _1041) - _1120;
    float _1227 = (_1221 * _1042) - _1121;
    float _1231 = abs(dot(vec3(_1119, _1120, _1121), vec3(_1040, _1041, _1042)));
    float _4273 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _1233 = sqrt(_1043);
    float _1246 = exp2((_1233 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1233 * 3.0));
    float _1252 = (1.0 - _1246) * ((_1233 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1253 = _1246 * _1233;
    float _1281 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1285 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1289 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1618;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1343 = fma(_1289, cbModelParam._m0[26u].z, fma(_1285, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1281));
        float _1347 = fma(_1289, cbModelParam._m0[27u].z, fma(_1285, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1281));
        float _1351 = fma(_1289, cbModelParam._m0[28u].z, fma(_1285, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1281));
        float _1376 = _1281 + _1040;
        float _1377 = _1285 + _1041;
        float _1378 = _1289 + _1042;
        float _1388 = fma(_1378, cbModelParam._m0[26u].z, fma(_1377, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1376)) - _1343;
        float _1389 = fma(_1378, cbModelParam._m0[27u].z, fma(_1377, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1376)) - _1347;
        float _1390 = fma(_1378, cbModelParam._m0[28u].z, fma(_1377, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1376)) - _1351;
        float _1394 = inversesqrt(dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390)));
        float _1407 = ((_1394 * _1388) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1343 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1394 * _1389) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1347 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1394 * _1390) / cbModelParam._m0[34u].z) + ((((((_1351 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        float _1446 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1412.x + (-0.5));
        float _1448 = _1446 * (_1412.y + (-0.5));
        float _1449 = _1446 * (_1412.z + (-0.5));
        float _1456 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1419.x + (-0.5));
        float _1458 = _1456 * (_1419.y + (-0.5));
        float _1459 = _1456 * (_1419.z + (-0.5));
        float _1466 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1426.x + (-0.5));
        float _1468 = _1466 * (_1426.y + (-0.5));
        float _1469 = _1466 * (_1426.z + (-0.5));
        float _1476 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1433.x + (-0.5));
        float _1478 = _1476 * (_1433.y + (-0.5));
        float _1479 = _1476 * (_1433.z + (-0.5));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = _1447 * 0.5;
        float _1484 = _1457 * 0.5;
        float _1485 = _1467 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1500 = (dot(vec3(_1040, _1041, _1042), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1510 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4321 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1512 + 1.0))) + _1517) * _1480;
        float _1527 = _1448 * 0.5;
        float _1528 = _1458 * 0.5;
        float _1529 = _1468 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_1040, _1041, _1042), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4354 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1554 + 1.0))) + _1559) * _1481;
        float _1569 = _1449 * 0.5;
        float _1570 = _1459 * 0.5;
        float _1571 = _1469 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_1040, _1041, _1042), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4387 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1596 + 1.0))) + _1601) * _1482;
        _1618 = _1449;
        _1620 = _1448;
        _1621 = _1447;
        _1622 = _1459;
        _1623 = _1458;
        _1624 = _1457;
        _1625 = _1469;
        _1626 = _1468;
        _1627 = _1467;
        _1628 = _1482;
        _1629 = _1481;
        _1630 = _1480;
        _1631 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1632 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
        _1633 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
    }
    else
    {
        _1618 = _1619;
        _1620 = _1619;
        _1621 = _1619;
        _1622 = _1619;
        _1623 = _1619;
        _1624 = _1619;
        _1625 = _1619;
        _1626 = _1619;
        _1627 = _1619;
        _1628 = _1619;
        _1629 = _1619;
        _1630 = _1619;
        _1631 = 0.0;
        _1632 = 0.0;
        _1633 = 0.0;
    }
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1660 = fma(_1289, cbModelParam._m0[30u].z, fma(_1285, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1281));
        float _1664 = fma(_1289, cbModelParam._m0[31u].z, fma(_1285, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1281));
        float _1668 = fma(_1289, cbModelParam._m0[32u].z, fma(_1285, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1281));
        float _1691 = _1281 + _1040;
        float _1692 = _1285 + _1041;
        float _1693 = _1289 + _1042;
        float _1703 = fma(_1693, cbModelParam._m0[30u].z, fma(_1692, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1691)) - _1660;
        float _1704 = fma(_1693, cbModelParam._m0[31u].z, fma(_1692, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1691)) - _1664;
        float _1705 = fma(_1693, cbModelParam._m0[32u].z, fma(_1692, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1691)) - _1668;
        float _1709 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
        float _1722 = ((_1709 * _1703) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1660 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1723 = ((_1709 * _1704) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1664 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1724 = ((_1709 * _1705) / cbModelParam._m0[35u].z) + ((((((_1668 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1726 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1722, _1723, _1724), 0.0);
        vec4 _1733 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1722, _1723, _1724), 0.0);
        vec4 _1740 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1722, _1723, _1724), 0.0);
        vec4 _1747 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1722, _1723, _1724), 0.0);
        float _1759 = exp2((_1726.w + (-0.5)) * 20.0) * 2.0;
        float _1760 = _1759 * (_1726.x + (-0.5));
        float _1761 = _1759 * (_1726.y + (-0.5));
        float _1762 = _1759 * (_1726.z + (-0.5));
        float _1769 = exp2((_1733.w + (-0.5)) * 20.0) * 2.0;
        float _1770 = _1769 * (_1733.x + (-0.5));
        float _1771 = _1769 * (_1733.y + (-0.5));
        float _1772 = _1769 * (_1733.z + (-0.5));
        float _1779 = exp2((_1740.w + (-0.5)) * 20.0) * 2.0;
        float _1780 = _1779 * (_1740.x + (-0.5));
        float _1781 = _1779 * (_1740.y + (-0.5));
        float _1782 = _1779 * (_1740.z + (-0.5));
        float _1789 = exp2((_1747.w + (-0.5)) * 20.0) * 2.0;
        float _1790 = _1789 * (_1747.x + (-0.5));
        float _1791 = _1789 * (_1747.y + (-0.5));
        float _1792 = _1789 * (_1747.z + (-0.5));
        float _1793 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1794 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1795 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1796 = _1760 * 0.5;
        float _1797 = _1770 * 0.5;
        float _1798 = _1780 * 0.5;
        float _1799 = dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798));
        float _1804 = (_1799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1799);
        float _1812 = (dot(vec3(_1040, _1041, _1042), vec3(_1804 * _1796, _1804 * _1797, _1804 * _1798)) + 1.0) * 0.5;
        float _4428 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1821 = sqrt(((_1797 * _1797) + (_1796 * _1796)) + (_1798 * _1798)) / (_1793 + 9.9999997473787516355514526367188e-06);
        float _4439 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1823 = _1822 * 2.0;
        float _1827 = (1.0 - _1822) / (_1822 + 1.0);
        float _4450 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1837 = ((((1.0 - _1828) * (_1823 + 2.0)) * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_1823 + 1.0))) + _1828) * _1793;
        float _1838 = _1761 * 0.5;
        float _1839 = _1771 * 0.5;
        float _1840 = _1781 * 0.5;
        float _1841 = dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840));
        float _1846 = (_1841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1841);
        float _1854 = (dot(vec3(_1040, _1041, _1042), vec3(_1846 * _1838, _1846 * _1839, _1846 * _1840)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1863 = sqrt(((_1839 * _1839) + (_1838 * _1838)) + (_1840 * _1840)) / (_1794 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1865 = _1864 * 2.0;
        float _1869 = (1.0 - _1864) / (_1864 + 1.0);
        float _4483 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1879 = ((((1.0 - _1870) * (_1865 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1865 + 1.0))) + _1870) * _1794;
        float _1880 = _1762 * 0.5;
        float _1881 = _1772 * 0.5;
        float _1882 = _1782 * 0.5;
        float _1883 = dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882));
        float _1888 = (_1883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1883);
        float _1896 = (dot(vec3(_1040, _1041, _1042), vec3(_1888 * _1880, _1888 * _1881, _1888 * _1882)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1905 = sqrt(((_1881 * _1881) + (_1880 * _1880)) + (_1882 * _1882)) / (_1795 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1907 = _1906 * 2.0;
        float _1911 = (1.0 - _1906) / (_1906 + 1.0);
        float _4516 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1912 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1921 = ((((1.0 - _1912) * (_1907 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1907 + 1.0))) + _1912) * _1795;
        _1929 = _1762;
        _1930 = _1761;
        _1931 = _1760;
        _1932 = _1772;
        _1933 = _1771;
        _1934 = _1770;
        _1935 = _1782;
        _1936 = _1781;
        _1937 = _1780;
        _1938 = _1795;
        _1939 = _1794;
        _1940 = _1793;
        _1941 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)));
        _1942 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)));
        _1943 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0)));
    }
    else
    {
        _1929 = _1619;
        _1930 = _1619;
        _1931 = _1619;
        _1932 = _1619;
        _1933 = _1619;
        _1934 = _1619;
        _1935 = _1619;
        _1936 = _1619;
        _1937 = _1619;
        _1938 = _1619;
        _1939 = _1619;
        _1940 = _1619;
        _1941 = 0.0;
        _1942 = 0.0;
        _1943 = 0.0;
    }
    float _1953 = (cbModelParam._m0[1u].x * (_1941 - _1631)) + _1631;
    float _1954 = (cbModelParam._m0[1u].x * (_1942 - _1632)) + _1632;
    float _1955 = (cbModelParam._m0[1u].x * (_1943 - _1633)) + _1633;
    float _1976 = fma(_1955, cbSceneParam._m0[89u].z, fma(_1954, cbSceneParam._m0[89u].y, _1953 * cbSceneParam._m0[89u].x));
    float _1979 = fma(_1955, cbSceneParam._m0[90u].z, fma(_1954, cbSceneParam._m0[90u].y, _1953 * cbSceneParam._m0[90u].x));
    float _1982 = fma(_1955, cbSceneParam._m0[91u].z, fma(_1954, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1953));
    float _1997 = _1225 * 0.5;
    float _1998 = _1226 * 0.5;
    float _1999 = _1227 * 0.5;
    float _2000 = dot(vec4(_1997, _1998, _1999, 1.0), vec4(_1931, _1934, _1937, _1940));
    float _2003 = dot(vec4(_1997, _1998, _1999, 1.0), vec4(_1930, _1933, _1936, _1939));
    float _2006 = dot(vec4(_1997, _1998, _1999, 1.0), vec4(_1929, _1932, _1935, _1938));
    float _2040;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2013 = dot(vec4(_1997, _1998, _1999, 1.0), vec4(_1618, _1622, _1625, _1628));
        float _2017 = dot(vec4(_1997, _1998, _1999, 1.0), vec4(_1620, _1623, _1626, _1629));
        float _2021 = dot(vec4(_1997, _1998, _1999, 1.0), vec4(_1621, _1624, _1627, _1630));
        float _2028 = dot(vec4(cbModelParam._m0[39u]), vec4(_1997, _1998, _1999, 1.0));
        _2040 = dot(vec3(isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0)), isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0)), isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2028) ? 0.0 : (isnan(0.0) ? _2028 : max(0.0, _2028))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2040 = 1.0;
    }
    float _2051;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2042 = dot(vec4(cbModelParam._m0[40u]), vec4(_1997, _1998, _1999, 1.0));
        _2051 = dot(vec3(isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0)), isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0)), isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2042) ? 0.0 : (isnan(0.0) ? _2042 : max(0.0, _2042))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2051 = 1.0;
    }
    float _2055 = (_2051 * cbModelParam._m0[1u].x) + (_2040 * (1.0 - cbModelParam._m0[1u].x));
    float _2065 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1043);
    float _2066 = isnan(_2065) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2065 : min(cbModelParam._m0[25u].z, _2065));
    float _2146;
    float _2148;
    float _2150;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2113 = fma(_1289, cbModelParam._m0[13u].z, fma(_1285, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1281)) + cbModelParam._m0[13u].w;
        float _2117 = fma(_1289, cbModelParam._m0[14u].z, fma(_1285, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1281)) + cbModelParam._m0[14u].w;
        float _2121 = fma(_1289, cbModelParam._m0[15u].z, fma(_1285, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1281)) + cbModelParam._m0[15u].w;
        float _2124 = fma(_1227, cbModelParam._m0[13u].z, fma(_1226, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1225));
        float _2127 = fma(_1227, cbModelParam._m0[14u].z, fma(_1226, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1225));
        float _2130 = fma(_1227, cbModelParam._m0[15u].z, fma(_1226, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1225));
        float _2158;
        if (_2124 > 0.0)
        {
            _2158 = abs((1.0 - _2113) / _2124);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2113 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2158 = frontier_phi_17_15_ladder;
        }
        float _2381;
        if (_2127 > 0.0)
        {
            _2381 = abs((1.0 - _2117) / _2127);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2127 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2117 + 1.0) / _2127);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2381 = frontier_phi_26_22_ladder;
        }
        float _2638;
        if (_2130 > 0.0)
        {
            _2638 = abs((1.0 - _2121) / _2130);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2121 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2638 = frontier_phi_38_33_ladder;
        }
        float _2640 = isnan(_2381) ? _2158 : (isnan(_2158) ? _2381 : min(_2158, _2381));
        float _2641 = isnan(_2638) ? _2640 : (isnan(_2640) ? _2638 : min(_2640, _2638));
        float _2645 = (_2641 * _2124) + _2113;
        float _2646 = (_2641 * _2127) + _2117;
        float _2647 = (_2641 * _2130) + _2121;
        float _2648 = _2641 * 9.9999997473787516355514526367188e-05;
        float _2650 = (-1.0) - _2648;
        float _2652 = _2648 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2647 > _2652) || ((_2647 < _2650) || ((_2646 > _2652) || ((_2646 < _2650) || ((_2645 < _2650) || (_2645 > _2652))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2775 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2647, cbModelParam._m0[9u].z, fma(_2646, cbModelParam._m0[9u].y, _2645 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2647, cbModelParam._m0[10u].z, fma(_2646, cbModelParam._m0[10u].y, _2645 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2647, cbModelParam._m0[11u].z, fma(_2646, cbModelParam._m0[11u].y, _2645 * cbModelParam._m0[11u].x))), _2066);
            frontier_phi_16_38_ladder = _2775.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2775.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2775.x * cbModelParam._m0[1u].y;
        }
        _2146 = frontier_phi_16_38_ladder_2;
        _2148 = frontier_phi_16_38_ladder_1;
        _2150 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2134 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1225, _1226, _1227), _2066);
        _2146 = _2134.x * cbModelParam._m0[1u].y;
        _2148 = _2134.y * cbModelParam._m0[1u].y;
        _2150 = _2134.z * cbModelParam._m0[1u].y;
    }
    float _2154 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1043);
    float _2155 = isnan(_2154) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2154 : min(cbModelParam._m0[25u].w, _2154));
    float _2244;
    float _2246;
    float _2248;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2208 = fma(_1289, cbModelParam._m0[21u].z, fma(_1285, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1281)) + cbModelParam._m0[21u].w;
        float _2212 = fma(_1289, cbModelParam._m0[22u].z, fma(_1285, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1281)) + cbModelParam._m0[22u].w;
        float _2216 = fma(_1289, cbModelParam._m0[23u].z, fma(_1285, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1281)) + cbModelParam._m0[23u].w;
        float _2219 = fma(_1227, cbModelParam._m0[21u].z, fma(_1226, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1225));
        float _2222 = fma(_1227, cbModelParam._m0[22u].z, fma(_1226, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1225));
        float _2225 = fma(_1227, cbModelParam._m0[23u].z, fma(_1226, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1225));
        float _2386;
        if (_2219 > 0.0)
        {
            _2386 = abs((1.0 - _2208) / _2219);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2219 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2208 + 1.0) / _2219);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2386 = frontier_phi_28_24_ladder;
        }
        float _2665;
        if (_2222 > 0.0)
        {
            _2665 = abs((1.0 - _2212) / _2222);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2222 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2212 + 1.0) / _2222);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2665 = frontier_phi_40_35_ladder;
        }
        float _2878;
        if (_2225 > 0.0)
        {
            _2878 = abs((1.0 - _2216) / _2225);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2225 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2216 + 1.0) / _2225);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2878 = frontier_phi_49_46_ladder;
        }
        float _2880 = isnan(_2665) ? _2386 : (isnan(_2386) ? _2665 : min(_2386, _2665));
        float _2881 = isnan(_2878) ? _2880 : (isnan(_2880) ? _2878 : min(_2880, _2878));
        float _2885 = (_2881 * _2219) + _2208;
        float _2886 = (_2881 * _2222) + _2212;
        float _2887 = (_2881 * _2225) + _2216;
        float _2888 = _2881 * 9.9999997473787516355514526367188e-05;
        float _2889 = (-1.0) - _2888;
        float _2891 = _2888 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2887 > _2891) || ((_2887 < _2889) || ((_2886 > _2891) || ((_2886 < _2889) || ((_2885 < _2889) || (_2885 > _2891))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3086 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2887, cbModelParam._m0[17u].z, fma(_2886, cbModelParam._m0[17u].y, _2885 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2887, cbModelParam._m0[18u].z, fma(_2886, cbModelParam._m0[18u].y, _2885 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2887, cbModelParam._m0[19u].z, fma(_2886, cbModelParam._m0[19u].y, _2885 * cbModelParam._m0[19u].x))), _2155);
            frontier_phi_25_49_ladder = _3086.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3086.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3086.x * cbModelParam._m0[1u].z;
        }
        _2244 = frontier_phi_25_49_ladder_2;
        _2246 = frontier_phi_25_49_ladder_1;
        _2248 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2228 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1225, _1226, _1227), _2155);
        _2244 = _2228.x * cbModelParam._m0[1u].z;
        _2246 = _2228.y * cbModelParam._m0[1u].z;
        _2248 = _2228.z * cbModelParam._m0[1u].z;
    }
    float _2261 = (((_1252 * _1201) + _1253) * _1217) * ((cbModelParam._m0[1u].w * (_2244 - _2146)) + _2146);
    float _2263 = (((_1252 * _1203) + _1253) * _1217) * ((cbModelParam._m0[1u].w * (_2246 - _2148)) + _2148);
    float _2265 = (((_1252 * _1204) + _1253) * _1217) * ((cbModelParam._m0[1u].w * (_2248 - _2150)) + _2150);
    float _2268 = fma(_2265, cbSceneParam._m0[89u].z, fma(_2263, cbSceneParam._m0[89u].y, _2261 * cbSceneParam._m0[89u].x));
    float _2271 = fma(_2265, cbSceneParam._m0[90u].z, fma(_2263, cbSceneParam._m0[90u].y, _2261 * cbSceneParam._m0[90u].x));
    float _2274 = fma(_2265, cbSceneParam._m0[91u].z, fma(_2263, cbSceneParam._m0[91u].y, _2261 * cbSceneParam._m0[91u].x));
    vec4 _2282 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1139, _1140));
    float _2284 = _2282.w;
    float _2296 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2284);
    float _2297 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2284);
    float _2298 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2284);
    uvec4 _2302 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2304 = _2302.x * 14u;
    uint _2305 = _2304 + 13u;
    float _2312 = _1217 + (-1.0);
    float _2317 = (cbLight._m0[_2305].x * _2312) + 1.0;
    float _2318 = (cbLight._m0[_2305].y * _2312) + 1.0;
    float _2319 = (cbLight._m0[_2305].z * _2312) + 1.0;
    float _2320 = (cbLight._m0[_2305].w * _2312) + 1.0;
    uint _2321 = _2304 + 5u;
    float _2327 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
    uint _2331 = _2304 + 4u;
    float _2340 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
    uint _2344 = _2304 | 1u;
    float _2355 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_1040, _1041, _1042));
    float _2358 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_1040, _1041, _1042));
    float _4652 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _4663 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2363 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * 0.3183098733425140380859375;
    float _2365 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * 0.3183098733425140380859375;
    float _2372 = ((cbLight._m0[_2321].x * _2327) * _2365) + (((cbLight._m0[_2331].x * _2296) * _2340) * _2363);
    float _2373 = ((_2327 * cbLight._m0[_2321].y) * _2365) + (((cbLight._m0[_2331].y * _2297) * _2340) * _2363);
    float _2374 = ((_2327 * cbLight._m0[_2321].z) * _2365) + (((cbLight._m0[_2331].z * _2298) * _2340) * _2363);
    uvec4 _2378 = floatBitsToUint(cbLight._m0[_2304 + 12u]);
    bool _2380 = _2378.x == 0u;
    float _2391;
    float _2393;
    float _2395;
    if (_2380)
    {
        _2391 = _2372;
        _2393 = _2373;
        _2395 = _2374;
    }
    else
    {
        uint _2399 = _2304 + 6u;
        float _2415 = (dot(vec3(cbLight._m0[_2304 + 2u].xyz), vec3(_1040, _1041, _1042)) * 0.5) + 0.5;
        float _2416 = _2415 * _2415;
        float _4674 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2417 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2418 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2391 = (((cbLight._m0[_2399].x * 0.3183098733425140380859375) * _2417) * _2418) + _2372;
        _2393 = (((cbLight._m0[_2399].y * 0.3183098733425140380859375) * _2417) * _2418) + _2373;
        _2395 = (((cbLight._m0[_2399].z * 0.3183098733425140380859375) * _2417) * _2418) + _2374;
    }
    bool _2398 = _2378.y == 0u;
    float _2436;
    float _2438;
    float _2440;
    if (_2398)
    {
        _2436 = _2391;
        _2438 = _2393;
        _2440 = _2395;
    }
    else
    {
        uint _2609 = _2304 + 7u;
        float _2625 = (dot(vec3(cbLight._m0[_2304 + 3u].xyz), vec3(_1040, _1041, _1042)) * 0.5) + 0.5;
        float _2626 = _2625 * _2625;
        float _4690 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2627 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2628 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
        _2436 = (((cbLight._m0[_2609].x * 0.3183098733425140380859375) * _2627) * _2628) + _2391;
        _2438 = (((cbLight._m0[_2609].y * 0.3183098733425140380859375) * _2627) * _2628) + _2393;
        _2440 = (((cbLight._m0[_2609].z * 0.3183098733425140380859375) * _2627) * _2628) + _2395;
    }
    uint _2443 = _2304 + 8u;
    float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _1043) * 0.949999988079071044921875);
    float _2457 = _2456 * _2456;
    float _2458 = cbLight._m0[_2304].x + _1119;
    float _2459 = cbLight._m0[_2304].y + _1120;
    float _2460 = cbLight._m0[_2304].z + _1121;
    float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
    float _2465 = _2464 * _2458;
    float _2466 = _2464 * _2459;
    float _2467 = _2464 * _2460;
    float _2468 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2304].xyz));
    float _4706 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _4717 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _2472 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
    float _2473 = dot(vec3(_1040, _1041, _1042), vec3(_2465, _2466, _2467));
    float _4728 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _2477 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2465, _2466, _2467));
    float _4739 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2481 = _2457 * _2457;
    float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
    float _2493 = exp2(log2(1.0 - (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) * 5.0);
    float _2494 = 0.959999978542327880859375 - _1198;
    float _2496 = 0.959999978542327880859375 - _1199;
    float _2497 = 0.959999978542327880859375 - _1200;
    float _2504 = 1.0 - _2457;
    float _2515 = (0.5 / (((_2472 * ((_2471 * _2504) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2504) + _2457) * _2471))) * _2471;
    float _4750 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2517 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
    uint _2531 = _2304 + 9u;
    float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _1043) * 0.949999988079071044921875);
    float _2543 = _2542 * _2542;
    float _2544 = cbLight._m0[_2344].x + _1119;
    float _2545 = cbLight._m0[_2344].y + _1120;
    float _2546 = cbLight._m0[_2344].z + _1121;
    float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
    float _2551 = _2550 * _2544;
    float _2552 = _2550 * _2545;
    float _2553 = _2550 * _2546;
    float _2554 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2344].xyz));
    float _4761 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
    float _2558 = dot(vec3(_1040, _1041, _1042), vec3(_2551, _2552, _2553));
    float _4772 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
    float _2562 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2551, _2552, _2553));
    float _4783 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2566 = _2543 * _2543;
    float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
    float _2577 = exp2(log2(1.0 - (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) * 5.0);
    float _2584 = 1.0 - _2543;
    float _2594 = (0.5 / (((_2472 * ((_2557 * _2584) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2584) + _2543) * _2557))) * _2557;
    float _4794 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2596 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
    float _2606 = (((((_2577 * _2494) + _1201) * cbLight._m0[_2531].x) * _2596) * _2327) + ((((cbLight._m0[_2443].x * _2296) * ((_2493 * _2494) + _1201)) * _2517) * _2340);
    float _2607 = (((((_2577 * _2496) + _1203) * cbLight._m0[_2531].y) * _2596) * _2327) + ((((cbLight._m0[_2443].y * _2297) * ((_2493 * _2496) + _1203)) * _2517) * _2340);
    float _2608 = (((((_2577 * _2497) + _1204) * cbLight._m0[_2531].z) * _2596) * _2327) + ((((cbLight._m0[_2443].z * _2298) * ((_2493 * _2497) + _1204)) * _2517) * _2340);
    float _2670;
    float _2672;
    float _2674;
    if (_2380)
    {
        _2670 = _2606;
        _2672 = _2607;
        _2674 = _2608;
    }
    else
    {
        uint _2676 = _2304 + 2u;
        uint _2680 = _2304 + 10u;
        float _2694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2676].w)) * _1043) * 0.949999988079071044921875);
        float _2695 = _2694 * _2694;
        float _2696 = cbLight._m0[_2676].x + _1119;
        float _2697 = cbLight._m0[_2676].y + _1120;
        float _2698 = cbLight._m0[_2676].z + _1121;
        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
        float _2703 = _2702 * _2696;
        float _2704 = _2702 * _2697;
        float _2705 = _2702 * _2698;
        float _2706 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2676].xyz));
        float _4805 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
        float _2710 = dot(vec3(_1040, _1041, _1042), vec3(_2703, _2704, _2705));
        float _4816 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2714 = dot(vec3(cbLight._m0[_2676].xyz), vec3(_2703, _2704, _2705));
        float _4827 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2718 = _2695 * _2695;
        float _2722 = ((_2713 * _2713) * (_2718 + (-1.0))) + 1.0;
        float _2729 = exp2(log2(1.0 - (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)))) * 5.0);
        float _2736 = 1.0 - _2695;
        float _2746 = (0.5 / (((_2472 * ((_2709 * _2736) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2736) + _2695) * _2709))) * _2709;
        float _4838 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2748 = (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2718 / ((_2722 * _2722) * 3.141590118408203125));
        float _2749 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2670 = (((((_2729 * _2494) + _1201) * cbLight._m0[_2680].x) * _2748) * _2749) + _2606;
        _2672 = (((((_2729 * _2496) + _1203) * cbLight._m0[_2680].y) * _2748) * _2749) + _2607;
        _2674 = (((((_2729 * _2497) + _1204) * cbLight._m0[_2680].z) * _2748) * _2749) + _2608;
    }
    float _2784;
    float _2786;
    float _2788;
    if (_2398)
    {
        _2784 = _2670;
        _2786 = _2672;
        _2788 = _2674;
    }
    else
    {
        uint _2795 = _2304 + 3u;
        uint _2799 = _2304 + 11u;
        float _2813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2795].w)) * _1043) * 0.949999988079071044921875);
        float _2814 = _2813 * _2813;
        float _2815 = cbLight._m0[_2795].x + _1119;
        float _2816 = cbLight._m0[_2795].y + _1120;
        float _2817 = cbLight._m0[_2795].z + _1121;
        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
        float _2822 = _2821 * _2815;
        float _2823 = _2821 * _2816;
        float _2824 = _2821 * _2817;
        float _2825 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2795].xyz));
        float _4854 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2828 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2829 = dot(vec3(_1040, _1041, _1042), vec3(_2822, _2823, _2824));
        float _4865 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2833 = dot(vec3(cbLight._m0[_2795].xyz), vec3(_2822, _2823, _2824));
        float _4876 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2837 = _2814 * _2814;
        float _2841 = ((_2832 * _2832) * (_2837 + (-1.0))) + 1.0;
        float _2848 = exp2(log2(1.0 - (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) * 5.0);
        float _2855 = 1.0 - _2814;
        float _2865 = (0.5 / (((_2472 * ((_2828 * _2855) + _2814)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2855) + _2814) * _2828))) * _2828;
        float _4887 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2867 = (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2837 / ((_2841 * _2841) * 3.141590118408203125));
        float _2868 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
        _2784 = (((((_2848 * _2494) + _1201) * cbLight._m0[_2799].x) * _2867) * _2868) + _2670;
        _2786 = (((((_2848 * _2496) + _1203) * cbLight._m0[_2799].y) * _2867) * _2868) + _2672;
        _2788 = (((((_2848 * _2497) + _1204) * cbLight._m0[_2799].z) * _2867) * _2868) + _2674;
    }
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    if (_2302.y == 0u)
    {
        float _2943 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2944 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2943;
        float _2945 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2943;
        float _2946 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2943;
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.x;
        uint _2970 = uint((float(_2958.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1140) / _2959))) + floor(float(uint(cbSceneParam._m0[85u].x * _1139) / _2959)));
        float _2980 = (log2(_2946 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2981 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        uint _2984 = uint(isnan(14.0) ? _2981 : (isnan(_2981) ? 14.0 : min(_2981, 14.0)));
        uvec4 _2989 = texelFetch(g_lightClusterGridBuffer, int(((_2984 << 2u) + (_2970 << 6u)) >> 2u));
        uint _2990 = _2989.x;
        uint _2991 = _2958.z;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        if (((((1u << ((_2991 >> 4u) & 15u)) + 4294967295u) & _2990) == 0u) || ((_2991 & 240u) == 0u))
        {
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
        }
        else
        {
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            float _3248 = 0.0;
            uint _3249 = 0u;
            uint _3258;
            bool _3259;
            for (;;)
            {
                _3258 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3249 << 2u)) >> 2u)).x;
                _3259 = _3258 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3259)
                {
                    frontier_phi_66_pred = _3243;
                    frontier_phi_66_pred_1 = _3248;
                    frontier_phi_66_pred_2 = _3247;
                    frontier_phi_66_pred_3 = _3246;
                    frontier_phi_66_pred_4 = _3245;
                    frontier_phi_66_pred_5 = _3244;
                }
                else
                {
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    uint _3394;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3246;
                    _3392 = _3247;
                    _3393 = _3248;
                    _3394 = _3258;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    for (;;)
                    {
                        uint _3398 = uint(findLSB(_3394)) + (_3249 << 5u);
                        uint _3395 = (_3394 + 4294967295u) & _3394;
                        uint _3400 = _3398 * 48u;
                        vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 3u)).x));
                        uint _3420 = (_3398 * 48u) + 4u;
                        vec4 _3433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3420)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 3u)).x));
                        uint _3439 = (_3398 * 48u) + 8u;
                        vec3 _3450 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3439)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 2u)).x));
                        float _3454 = _3414.x - _2944;
                        float _3455 = _3414.y - _2945;
                        float _3456 = _3414.z - _2946;
                        float _3457 = dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456));
                        float _3460 = inversesqrt(_3457);
                        float _3461 = _3460 * _3454;
                        float _3462 = _3460 * _3455;
                        float _3463 = _3460 * _3456;
                        float _3464 = dot(vec3(_1158, _1161, _1164), vec3(_3461, _3462, _3463));
                        float _3469 = 1.0 - (_3457 * _3414.w);
                        float _4913 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3470 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                        float _3471 = sqrt(_3457) * _3433.w;
                        float _3474 = 1.39999997615814208984375 / (_3471 + 1.39999997615814208984375);
                        float _3475 = _3474 * _3474;
                        float _3478 = ((1.0 - _3475) * _3464) + _3475;
                        float _3481 = _3471 * _3471;
                        float _3485 = ((isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0))) * _3470) / ((_3481 * 0.699999988079071044921875) + 1.0);
                        float _3489 = (-0.0) - _2944;
                        float _3490 = (-0.0) - _2945;
                        float _3491 = (-0.0) - _2946;
                        float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                        float _3496 = _3495 * _3489;
                        float _3497 = _3495 * _3490;
                        float _3498 = _3495 * _3491;
                        float _3506 = exp2(log2(1.0 / ((_3481 * 3.5) + 5.0)) * 0.25);
                        float _3507 = 1.0 - _1233;
                        float _3514 = sqrt(1.0 - ((1.0 - (_3507 * _3507)) * (1.0 - (_3506 * _3506))));
                        float _3515 = _3514 * _3514;
                        float _3516 = _3515 * _3515;
                        float _3517 = _3496 + _3461;
                        float _3518 = _3497 + _3462;
                        float _3519 = _3498 + _3463;
                        float _3523 = inversesqrt(dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519)));
                        float _3527 = dot(vec3(_1158, _1161, _1164), vec3(_3496, _3497, _3498));
                        float _4929 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3530 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3531 = dot(vec3(_1158, _1161, _1164), vec3(_3523 * _3517, _3523 * _3518, _3523 * _3519));
                        float _4940 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3534 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                        float _3538 = ((_3534 * _3534) * (_3516 + (-1.0))) + 1.0;
                        float _3539 = _3474 * _3515;
                        float _3540 = _3539 * _3539;
                        float _3543 = ((1.0 - _3540) * _3464) + _3540;
                        float _4951 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3544 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                        float _3545 = 1.0 - _3515;
                        float _3555 = (0.5 / (((_3544 * ((_3530 * _3545) + _3515)) + 9.9999999392252902907785028219223e-09) + (((_3544 * _3545) + _3515) * _3530))) * _3544;
                        float _4962 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                        float _3566 = (((_3516 * 3.1415927410125732421875) * (isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0)))) / ((_3538 * _3538) * ((_3481 * 2.1991131305694580078125) + 3.141590118408203125))) * _3470;
                        _3318 = (_3485 * _3433.x) + _3391;
                        _3319 = (_3485 * _3433.y) + _3392;
                        _3320 = (_3485 * _3433.z) + _3393;
                        _3315 = (_3566 * _3450.x) + _3388;
                        _3316 = (_3566 * _3450.y) + _3389;
                        _3317 = (_3566 * _3450.z) + _3390;
                        if (_3395 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3318;
                            _3392 = _3319;
                            _3393 = _3320;
                            _3394 = _3395;
                        }
                    }
                    frontier_phi_66_pred = _3315;
                    frontier_phi_66_pred_1 = _3320;
                    frontier_phi_66_pred_2 = _3319;
                    frontier_phi_66_pred_3 = _3318;
                    frontier_phi_66_pred_4 = _3317;
                    frontier_phi_66_pred_5 = _3316;
                }
                _3092 = frontier_phi_66_pred;
                _3102 = frontier_phi_66_pred_1;
                _3100 = frontier_phi_66_pred_2;
                _3098 = frontier_phi_66_pred_3;
                _3096 = frontier_phi_66_pred_4;
                _3094 = frontier_phi_66_pred_5;
                uint _3250 = _3249 + 1u;
                if (_3250 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3243 = _3092;
                    _3244 = _3094;
                    _3245 = _3096;
                    _3246 = _3098;
                    _3247 = _3100;
                    _3248 = _3102;
                    _3249 = _3250;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
        }
        uvec4 _3105 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3106 = _3105.z;
        uint _3108 = (_3106 >> 8u) & 15u;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        if (((4294967295u << _3108) & _2990) == 0u)
        {
            _3211 = _3091;
            _3213 = _3093;
            _3215 = _3095;
            _3217 = _3097;
            _3219 = _3099;
            _3221 = _3101;
        }
        else
        {
            float _3236 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
            float _3237 = _3236 * _2944;
            float _3238 = _3236 * _2945;
            float _3239 = _3236 * _2946;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3108 < ((_3106 >> 12u) & 15u))
            {
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3220;
                float _3222;
                float _3371 = _3091;
                float _3372 = _3093;
                float _3373 = _3095;
                float _3374 = _3097;
                float _3375 = _3099;
                float _3376 = _3101;
                uint _3377 = _3108;
                uint _3386;
                bool _3387;
                for (;;)
                {
                    _3386 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3377 << 2u)) >> 2u)).x;
                    _3387 = _3386 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3387)
                    {
                        frontier_phi_77_pred = _3376;
                        frontier_phi_77_pred_1 = _3375;
                        frontier_phi_77_pred_2 = _3374;
                        frontier_phi_77_pred_3 = _3373;
                        frontier_phi_77_pred_4 = _3372;
                        frontier_phi_77_pred_5 = _3371;
                    }
                    else
                    {
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3593 = _3371;
                        float _3594 = _3372;
                        float _3595 = _3373;
                        float _3596 = _3374;
                        float _3597 = _3375;
                        float _3598 = _3376;
                        uint _3599 = _3386;
                        uint _3600;
                        vec4 _3625;
                        float _3626;
                        vec4 _3641;
                        vec3 _3653;
                        vec4 _3668;
                        vec4 _3683;
                        float _3729;
                        bool _3730;
                        for (;;)
                        {
                            uint _3610 = ((_3377 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3599));
                            _3600 = (_3599 + 4294967295u) & _3599;
                            uint _3612 = _3610 * 40u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            _3626 = _3625.w;
                            uint _3628 = (_3610 * 40u) + 4u;
                            _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            uint _3643 = (_3610 * 40u) + 8u;
                            _3653 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x));
                            uint _3655 = (_3610 * 40u) + 16u;
                            _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3670 = (_3610 * 40u) + 20u;
                            _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            uint _3685 = (_3610 * 40u) + 24u;
                            vec4 _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3704 = (_3610 * 40u) + 28u;
                            vec4 _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            _3729 = fma(_2946, _3717.z, fma(_2945, _3717.y, _3717.x * _2944)) + _3717.w;
                            _3730 = !((fma(_2946, _3698.z, fma(_2945, _3698.y, _3698.x * _2944)) + _3698.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3730)
                            {
                                float _3757 = _3625.x - _2944;
                                float _3758 = _3625.y - _2945;
                                float _3759 = _3625.z - _2946;
                                float _3760 = dot(vec3(_3757, _3758, _3759), vec3(_3757, _3758, _3759));
                                float _3763 = inversesqrt(_3760);
                                float _3764 = _3763 * _3757;
                                float _3765 = _3763 * _3758;
                                float _3766 = _3763 * _3759;
                                float _3770 = 1.0 - (_3760 / (_3626 * _3626));
                                float _4973 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3771 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3775 = sqrt(_3760) * _3641.w;
                                float _3777 = 1.39999997615814208984375 / (_3775 + 1.39999997615814208984375);
                                float _3778 = _3777 * _3777;
                                float _3781 = ((1.0 - _3778) * dot(vec3(_3764, _3765, _3766), vec3(_1158, _1161, _1164))) + _3778;
                                float _3784 = _3775 * _3775;
                                float _3788 = (fma(_2946, _3668.z, fma(_2945, _3668.y, _3668.x * _2944)) + _3668.w) / _3729;
                                float _3789 = (fma(_2946, _3683.z, fma(_2945, _3683.y, _3683.x * _2944)) + _3683.w) / _3729;
                                float _3793 = 1.0 - dot(vec2(_3788, _3789), vec2(_3788, _3789));
                                float _4989 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3794 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3795 = _3794 * (((isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0))) * _3771) / ((_3784 * 0.699999988079071044921875) + 1.0));
                                float _3807 = exp2(log2(1.0 / ((_3784 * 3.5) + 5.0)) * 0.25);
                                float _3808 = 1.0 - _1233;
                                float _3815 = sqrt(1.0 - ((1.0 - (_3808 * _3808)) * (1.0 - (_3807 * _3807))));
                                float _3816 = _3815 * _3815;
                                float _3817 = _3816 * _3816;
                                float _3818 = _3764 - _3237;
                                float _3819 = _3765 - _3238;
                                float _3820 = _3766 - _3239;
                                float _3824 = inversesqrt(dot(vec3(_3818, _3819, _3820), vec3(_3818, _3819, _3820)));
                                float _3828 = dot(vec3(_1158, _1161, _1164), vec3((-0.0) - _3237, (-0.0) - _3238, (-0.0) - _3239));
                                float _5000 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3831 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3832 = dot(vec3(_1158, _1161, _1164), vec3(_3824 * _3818, _3824 * _3819, _3824 * _3820));
                                float _5011 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3835 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3839 = ((_3835 * _3835) * (_3817 + (-1.0))) + 1.0;
                                float _3840 = _3777 * _3816;
                                float _3841 = _3840 * _3840;
                                float _3847 = ((1.0 - _3841) * dot(vec3(_1158, _1161, _1164), vec3(_3764, _3765, _3766))) + _3841;
                                float _5022 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3848 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3849 = 1.0 - _3816;
                                float _3859 = (0.5 / (((_3848 * ((_3831 * _3849) + _3816)) + 9.9999999392252902907785028219223e-09) + (((_3848 * _3849) + _3816) * _3831))) * _3848;
                                float _5033 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3869 = (_3794 * _3771) * (((_3817 * 3.1415927410125732421875) * (isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0)))) / ((_3839 * _3839) * ((_3784 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3795 * _3641.y;
                                frontier_phi_83_pred_1 = _3795 * _3641.x;
                                frontier_phi_83_pred_2 = _3869 * _3653.z;
                                frontier_phi_83_pred_3 = _3869 * _3653.y;
                                frontier_phi_83_pred_4 = _3869 * _3653.x;
                                frontier_phi_83_pred_5 = _3795 * _3641.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3877 = frontier_phi_83_pred;
                            _3876 = frontier_phi_83_pred_1;
                            _3875 = frontier_phi_83_pred_2;
                            _3874 = frontier_phi_83_pred_3;
                            _3873 = frontier_phi_83_pred_4;
                            _3878 = frontier_phi_83_pred_5;
                            _3583 = _3876 + _3596;
                            _3584 = _3877 + _3597;
                            _3585 = _3878 + _3598;
                            _3580 = _3873 + _3593;
                            _3581 = _3874 + _3594;
                            _3582 = _3875 + _3595;
                            if (_3600 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3600;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3585;
                        frontier_phi_77_pred_1 = _3584;
                        frontier_phi_77_pred_2 = _3583;
                        frontier_phi_77_pred_3 = _3582;
                        frontier_phi_77_pred_4 = _3581;
                        frontier_phi_77_pred_5 = _3580;
                    }
                    _3222 = frontier_phi_77_pred;
                    _3220 = frontier_phi_77_pred_1;
                    _3218 = frontier_phi_77_pred_2;
                    _3216 = frontier_phi_77_pred_3;
                    _3214 = frontier_phi_77_pred_4;
                    _3212 = frontier_phi_77_pred_5;
                    uint _3378 = _3377 + 1u;
                    if (_3378 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3371 = _3212;
                        _3372 = _3214;
                        _3373 = _3216;
                        _3374 = _3218;
                        _3375 = _3220;
                        _3376 = _3222;
                        _3377 = _3378;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3216;
                frontier_phi_58_59_ladder_1 = _3222;
                frontier_phi_58_59_ladder_2 = _3220;
                frontier_phi_58_59_ladder_3 = _3218;
                frontier_phi_58_59_ladder_4 = _3214;
                frontier_phi_58_59_ladder_5 = _3212;
            }
            else
            {
                frontier_phi_58_59_ladder = _3095;
                frontier_phi_58_59_ladder_1 = _3101;
                frontier_phi_58_59_ladder_2 = _3099;
                frontier_phi_58_59_ladder_3 = _3097;
                frontier_phi_58_59_ladder_4 = _3093;
                frontier_phi_58_59_ladder_5 = _3091;
            }
            _3211 = frontier_phi_58_59_ladder_5;
            _3213 = frontier_phi_58_59_ladder_4;
            _3215 = frontier_phi_58_59_ladder;
            _3217 = frontier_phi_58_59_ladder_3;
            _3219 = frontier_phi_58_59_ladder_2;
            _3221 = frontier_phi_58_59_ladder_1;
        }
        float _3226 = isnan(1.0) ? _1217 : (isnan(_1217) ? 1.0 : min(_1217, 1.0));
        _3003 = (_3226 * _3217) + _2436;
        _3005 = (_3226 * _3219) + _2438;
        _3007 = (_3226 * _3221) + _2440;
        _3009 = ((_3211 * _1201) * _3226) + _2784;
        _3011 = ((_3213 * _1203) * _3226) + _2786;
        _3013 = ((_3215 * _1204) * _3226) + _2788;
    }
    else
    {
        _3003 = _2436;
        _3005 = _2438;
        _3007 = _2440;
        _3009 = _2784;
        _3011 = _2786;
        _3013 = _2788;
    }
    float _5049 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _5060 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _5071 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _3030 = ((isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_3003 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1217))) + ((_3009 + ((isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0))) * _2055)) * cbPerFrame._m0[3u].x);
    float _3031 = ((isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0))) * (_3005 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1217))) + ((_3011 + ((isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0))) * _2055)) * cbPerFrame._m0[3u].x);
    float _3032 = ((isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0))) * (_3007 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1217))) + ((_3013 + ((isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0))) * _2055)) * cbPerFrame._m0[3u].x);
    uint _3033 = _295 + 6u;
    float _3041 = _1139 / cbSceneParam._m0[86u].x;
    float _3042 = _1140 / cbSceneParam._m0[86u].y;
    vec4 _3056 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3041, _3042, (log2((isnan(cbSceneParam._m0[77u].w) ? _1062 : (isnan(_1062) ? cbSceneParam._m0[77u].w : min(_1062, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3058 = _3056.x;
    float _3059 = _3056.y;
    float _3060 = _3056.z;
    float _3061 = _3056.w;
    float _3153;
    float _3155;
    float _3157;
    float _3159;
    if (_1062 > cbSceneParam._m0[78u].w)
    {
        float _3116 = isnan(_1062) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1062 : min(cbSceneParam._m0[80u].w, _1062));
        float _3117 = _3116 / _1062;
        float _3128 = _3117 * _1112;
        float _3129 = _1113 * _3117;
        float _3130 = (-0.0) - _3129;
        float _3131 = _3117 * _1114;
        float _3133 = (cbSceneParam._m0[77u].w * _3130) / _3116;
        float _3134 = _3133 + cbSceneParam._m0[79u].w;
        float _3135 = cbSceneParam._m0[79u].w - _3129;
        float _3141 = sqrt(((_3128 * _3128) + (_3129 * _3129)) + (_3131 * _3131));
        float _3144 = (1.0 - (cbSceneParam._m0[77u].w / _3116)) * _3141;
        float _3149 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3151 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3328;
        if (abs((_3130 - _3133) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3328 = ((((_3134 > 0.0) ? exp2(_3149 * _3134) : (2.0 - exp2(_3151 * _3134))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3144;
        }
        else
        {
            float _3272 = 1.0 / cbSceneParam._m0[80u].x;
            float _3273 = isnan(_3135) ? _3134 : (isnan(_3134) ? _3135 : max(_3134, _3135));
            float _3274 = isnan(_3135) ? _3134 : (isnan(_3134) ? _3135 : min(_3134, _3135));
            float _3283 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : min(_3273, 0.0));
            float _3284 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : min(_3274, 0.0));
            _3328 = ((abs(_3141 / _3130) * cbSceneParam._m0[80u].y) * ((((_3283 - _3284) * 2.0) - ((exp2(_3149 * (isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0)))) - exp2(_3149 * (isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))))) * _3272)) - ((exp2(_3151 * _3283) - exp2(_3151 * _3284)) * _3272))) + (_3144 * cbSceneParam._m0[80u].z);
        }
        vec4 _3330 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3041, _3042, 1.0), 0.0);
        float _3339 = exp2((_3328 * (-1.44269502162933349609375)) * (1.0 - _3330.w));
        float _3340 = log2(_3339);
        float _3356 = log2(_3061);
        _3153 = (exp2(_3356 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].x)) * _3330.x) / cbSceneParam._m0[78u].x)) + _3058;
        _3155 = (exp2(_3356 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].y)) * _3330.y) / cbSceneParam._m0[78u].y)) + _3059;
        _3157 = (exp2(_3356 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3340 * cbSceneParam._m0[78u].z)) * _3330.z) / cbSceneParam._m0[78u].z)) + _3060;
        _3159 = _3339 * _3061;
    }
    else
    {
        _3153 = _3058;
        _3155 = _3059;
        _3157 = _3060;
        _3159 = _3061;
    }
    bool _3366;
    vec4 _3169;
    vec4 _3191;
    float _3193;
    float _3197;
    float _3198;
    float _3199;
    float _3200;
    bool _3210;
    for (;;)
    {
        _3169 = cbMatDynParam._m0[0u];
        float _3171 = roundEven(_3169.y);
        bool _3172 = _3171 == 3.0;
        float _3173 = log2(_3159);
        float _3180 = exp2(_3173 * cbSceneParam._m0[78u].x) * _3030;
        float _3181 = exp2(_3173 * cbSceneParam._m0[78u].y) * _3031;
        float _3182 = exp2(_3173 * cbSceneParam._m0[78u].z) * _3032;
        float _3189 = _1128 + (-0.5);
        _3191 = cbMtdParam._m0[1u];
        _3193 = _3191.y * _3189;
        float _3196 = (_3171 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3197 = _3196 * (_3172 ? _3180 : (_3180 + (cbSceneParam._m0[72u].w * _3153)));
        _3198 = _3196 * (_3172 ? _3181 : (_3181 + (cbSceneParam._m0[72u].w * _3155)));
        _3199 = _3196 * (_3172 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3157)));
        _3200 = _3189 * 0.999000012874603271484375;
        _3210 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3210)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3200) < 0.5)
            {
                _3366 = true;
                break;
            }
        }
        uint _3307 = _1177 + uint(_3169.w);
        if ((cbInstanceData._m0[_3307].w < 1.0) && ((cbInstanceData._m0[_3307].w + _3200) < 0.5))
        {
            _3366 = true;
            break;
        }
        if ((_3193 + 1.0) < _3191.x)
        {
            _3366 = true;
            break;
        }
        _3366 = false;
        break;
    }
    float _3571;
    if (_3366)
    {
        discard_state = true;
        _3571 = 0.0;
    }
    else
    {
        _3571 = cbInstanceData._m0[_3033].w;
    }
    SV_Target.x = _3197;
    SV_Target.y = _3198;
    SV_Target.z = _3199;
    SV_Target.w = _3571;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3033].w;
    discard_exit();
}


