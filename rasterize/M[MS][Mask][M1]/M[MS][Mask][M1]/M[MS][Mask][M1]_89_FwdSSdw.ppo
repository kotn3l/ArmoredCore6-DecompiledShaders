#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1582;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3930 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3941 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _3952 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _382 = _377.x * cbMtdParam._m0[11u].x;
    float _383 = _377.y * cbMtdParam._m0[11u].y;
    float _384 = _377.z * cbMtdParam._m0[11u].z;
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _468 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _485 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _422.x) * 2.0) - ((((_456 - _468) * cbMtdParam._m0[23u].w) + _468) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3963 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _493 = (_486 * ((_403.x * cbMtdParam._m0[12u].x) - _382)) + _382;
    float _494 = (_486 * ((_403.y * cbMtdParam._m0[12u].y) - _383)) + _383;
    float _495 = (_486 * ((_403.z * cbMtdParam._m0[12u].z) - _384)) + _384;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _558 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _422.y) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[23u].w) + _544) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3974 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _569 = (_351.x * cbMtdParam._m0[9u].x) * ((_559 * ((_512.x * cbMtdParam._m0[13u].x) - _493)) + _493);
    float _570 = (_351.y * cbMtdParam._m0[9u].y) * ((_559 * ((_512.y * cbMtdParam._m0[13u].y) - _494)) + _494);
    float _571 = (_351.z * cbMtdParam._m0[9u].z) * ((_559 * ((_512.z * cbMtdParam._m0[13u].z) - _495)) + _495);
    float _575 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _569;
    float _578 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _570;
    float _581 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _571;
    float _589 = (((_569 - _575) * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) + _575) * 4.55000019073486328125;
    float _591 = (((_570 - _578) * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) + _578) * 4.55000019073486328125;
    float _593 = (((_571 - _581) * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) + _581) * 4.55000019073486328125;
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _314) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _315) + cbTextureTilingScale._m0[14u].w));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _673 = _671.x;
    float _674 = _671.y;
    float _675 = _671.z;
    float _682 = ((_654.x - _673) * _486) + _673;
    float _683 = ((_654.y - _674) * _486) + _674;
    float _684 = ((_654.z - _675) * _486) + _675;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _709 = ((_696.z - _684) * _559) + _684;
    float _712 = ((((_696.x - _682) * _559) + _682) * 2.0) + (-1.0);
    float _713 = ((((_696.y - _683) * _559) + _683) * 2.0) + (-1.0);
    float _714 = dot(vec2(_712, _713), vec2(_712, _713));
    float _3985 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _719 = sqrt(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))));
    vec4 _733 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _758 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _760 = _758.x;
    float _761 = 1.0 - _760;
    float _770 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _773 = ((isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : min(_770, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _782 = (_773 - ((((((_760 - _761) * cbMtdParam._m0[24u].z) + _761) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _773))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4006 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _783 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _790 = (_783 * ((_612.x * cbMtdParam._m0[18u].x) - _589)) + _589;
    float _791 = (_783 * ((_612.y * cbMtdParam._m0[18u].y) - _591)) + _591;
    float _792 = (_783 * ((_612.z * cbMtdParam._m0[18u].z) - _593)) + _593;
    vec4 _804 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _806 = _804.x;
    float _807 = 1.0 - _806;
    float _832 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_806 - _807) * cbMtdParam._m0[24u].w) + _807) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4017 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _833 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _841 = ((((cbMtdParam._m0[10u].x - _790) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _833) + _790;
    float _842 = ((((cbMtdParam._m0[10u].y - _791) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _833) + _791;
    float _843 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _792)) * _833) + _792;
    vec4 _869 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _871 = _869.x;
    float _888 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _871) * _486) + _871;
    float _905 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _888) * _559) + _888;
    float _909 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _905) * cbMtdParam._m0[19u].z) + _905;
    float _911 = _909 - (_909 * _783);
    float _913 = _911 - (_911 * _833);
    float _918 = (((_631.z - _709) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _709;
    float _922 = ((_733.z - _918) * cbMtdParam._m0[19u].w) + _918;
    vec4 _936 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _943 = (_936.x * 2.0) + (-1.0);
    float _944 = (_936.y * 2.0) + (-1.0);
    float _945 = dot(vec2(_943, _944), vec2(_943, _944));
    float _4028 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _953 = (_783 * (_936.z - _922)) + _922;
    float _956 = ((cbMtdParam._m0[23u].x - _953) * _833) + _953;
    vec4 _977 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _983 = (_977.x * 2.0) + (-1.0);
    float _984 = (_977.y * 2.0) + (-1.0);
    float _985 = dot(vec2(_983, _984), vec2(_983, _984));
    float _4039 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _999 = (_712 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_631.x * 2.0) + (-1.0)))) + (((_733.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1000 = (_713 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_631.y * 2.0) + (-1.0)))) + (((_733.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1012 = (((_943 - _999) + (cbMtdParam._m0[21u].x * _999)) * _783) + _999;
    float _1013 = (((_944 - _1000) + (cbMtdParam._m0[21u].x * _1000)) * _783) + _1000;
    float _1014 = (_783 * (sqrt(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) - _719)) + _719;
    float _1025 = (((_983 - _1012) + (_1012 * cbMtdParam._m0[22u].z)) * _833) + _1012;
    float _1026 = (((_984 - _1013) + (_1013 * cbMtdParam._m0[22u].z)) * _833) + _1013;
    float _1027 = ((sqrt(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) - _1014) * _833) + _1014;
    float _1029 = cbMtdParam._m0[22u].x + _733.w;
    float _1032 = fma(_1027, _263 * NORMAL.x, fma(_1026, _270 * TANGENT.x, (_256 * _248) * _1025));
    float _1035 = fma(_1027, _263 * NORMAL.y, fma(_1026, _270 * TANGENT.y, (_256 * _249) * _1025));
    float _1038 = fma(_1027, _263 * NORMAL.z, fma(_1026, _270 * TANGENT.z, (_256 * _250) * _1025));
    float _1042 = inversesqrt(dot(vec3(_1032, _1035, _1038), vec3(_1032, _1035, _1038)));
    float _1043 = _1042 * _1032;
    float _1044 = _1042 * _1035;
    float _1045 = _1042 * _1038;
    float _4050 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _1046 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _4072 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4083 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4094 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4105 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _1051 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _1065 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1115 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1105);
    float _1116 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1105);
    float _1117 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1105);
    float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
    float _1122 = _1115 * _1121;
    float _1123 = _1116 * _1121;
    float _1124 = _1117 * _1121;
    float _1130 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1131 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1149 = fma(_1045, cbSceneParam._m0[5u].z, fma(_1044, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1043));
    float _1152 = fma(_1045, cbSceneParam._m0[6u].z, fma(_1044, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1043));
    float _1155 = fma(_1045, cbSceneParam._m0[7u].z, fma(_1044, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1043));
    uint _1169 = (_295 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1175 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * cbInstanceData._m0[_1169].x;
    float _1176 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * cbInstanceData._m0[_1169].y;
    float _1177 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * cbInstanceData._m0[_1169].z;
    float _4116 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1178 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _1179 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1180 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _1181 = 1.0 - _1051;
    float _1182 = _1178 * _1181;
    float _1183 = _1179 * _1181;
    float _1184 = _1180 * _1181;
    float _1189 = (_1178 + (-0.039999999105930328369140625)) * _1051;
    float _1190 = (_1179 + (-0.039999999105930328369140625)) * _1051;
    float _1191 = (_1180 + (-0.039999999105930328369140625)) * _1051;
    float _1192 = _1189 + 0.039999999105930328369140625;
    float _1194 = _1190 + 0.039999999105930328369140625;
    float _1195 = _1191 + 0.039999999105930328369140625;
    vec4 _1204 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1130, cbSceneParam._m0[86u].y * _1131));
    float _1208 = ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * TEXCOORD_5.w) * _1204.x;
    float _1209 = dot(vec3(_1043, _1044, _1045), vec3(_1122, _1123, _1124));
    float _1212 = _1209 * 2.0;
    float _1216 = (_1212 * _1043) - _1122;
    float _1217 = (_1212 * _1044) - _1123;
    float _1218 = (_1212 * _1045) - _1124;
    float _1222 = abs(dot(vec3(_1122, _1123, _1124), vec3(_1043, _1044, _1045)));
    float _4149 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _1224 = sqrt(_1046);
    float _1237 = exp2((_1224 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1224 * 3.0));
    float _1243 = (1.0 - _1237) * ((_1224 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1244 = _1237 * _1224;
    float _1272 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1276 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1280 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1581;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1306 = fma(_1280, cbModelParam._m0[26u].z, fma(_1276, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1272));
        float _1310 = fma(_1280, cbModelParam._m0[27u].z, fma(_1276, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1272));
        float _1314 = fma(_1280, cbModelParam._m0[28u].z, fma(_1276, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1272));
        float _1339 = _1272 + _1043;
        float _1340 = _1276 + _1044;
        float _1341 = _1280 + _1045;
        float _1351 = fma(_1341, cbModelParam._m0[26u].z, fma(_1340, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1339)) - _1306;
        float _1352 = fma(_1341, cbModelParam._m0[27u].z, fma(_1340, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1339)) - _1310;
        float _1353 = fma(_1341, cbModelParam._m0[28u].z, fma(_1340, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1339)) - _1314;
        float _1357 = inversesqrt(dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353)));
        float _1370 = ((_1357 * _1351) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1306 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1357 * _1352) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1310 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1357 * _1353) / cbModelParam._m0[34u].z) + ((((((_1314 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        float _1409 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1375.x + (-0.5));
        float _1411 = _1409 * (_1375.y + (-0.5));
        float _1412 = _1409 * (_1375.z + (-0.5));
        float _1419 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1382.x + (-0.5));
        float _1421 = _1419 * (_1382.y + (-0.5));
        float _1422 = _1419 * (_1382.z + (-0.5));
        float _1429 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1389.x + (-0.5));
        float _1431 = _1429 * (_1389.y + (-0.5));
        float _1432 = _1429 * (_1389.z + (-0.5));
        float _1439 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1396.x + (-0.5));
        float _1441 = _1439 * (_1396.y + (-0.5));
        float _1442 = _1439 * (_1396.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1463 = (dot(vec3(_1043, _1044, _1045), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1473 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4197 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1475 + 1.0))) + _1480) * _1443;
        float _1490 = _1411 * 0.5;
        float _1491 = _1421 * 0.5;
        float _1492 = _1431 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_1043, _1044, _1045), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4230 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1517 + 1.0))) + _1522) * _1444;
        float _1532 = _1412 * 0.5;
        float _1533 = _1422 * 0.5;
        float _1534 = _1432 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_1043, _1044, _1045), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4263 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1559 + 1.0))) + _1564) * _1445;
        _1581 = _1412;
        _1583 = _1411;
        _1584 = _1410;
        _1585 = _1422;
        _1586 = _1421;
        _1587 = _1420;
        _1588 = _1432;
        _1589 = _1431;
        _1590 = _1430;
        _1591 = _1445;
        _1592 = _1444;
        _1593 = _1443;
        _1594 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1595 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1596 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1582;
        _1583 = _1582;
        _1584 = _1582;
        _1585 = _1582;
        _1586 = _1582;
        _1587 = _1582;
        _1588 = _1582;
        _1589 = _1582;
        _1590 = _1582;
        _1591 = _1582;
        _1592 = _1582;
        _1593 = _1582;
        _1594 = 0.0;
        _1595 = 0.0;
        _1596 = 0.0;
    }
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1620 = fma(_1280, cbModelParam._m0[30u].z, fma(_1276, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1272));
        float _1624 = fma(_1280, cbModelParam._m0[31u].z, fma(_1276, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1272));
        float _1628 = fma(_1280, cbModelParam._m0[32u].z, fma(_1276, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1272));
        float _1651 = _1272 + _1043;
        float _1652 = _1276 + _1044;
        float _1653 = _1280 + _1045;
        float _1663 = fma(_1653, cbModelParam._m0[30u].z, fma(_1652, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1651)) - _1620;
        float _1664 = fma(_1653, cbModelParam._m0[31u].z, fma(_1652, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1651)) - _1624;
        float _1665 = fma(_1653, cbModelParam._m0[32u].z, fma(_1652, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1651)) - _1628;
        float _1669 = inversesqrt(dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665)));
        float _1682 = ((_1669 * _1663) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1620 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1683 = ((_1669 * _1664) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1624 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1684 = ((_1669 * _1665) / cbModelParam._m0[35u].z) + ((((((_1628 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1686 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1682, _1683, _1684), 0.0);
        vec4 _1693 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1682, _1683, _1684), 0.0);
        vec4 _1700 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1682, _1683, _1684), 0.0);
        vec4 _1707 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1682, _1683, _1684), 0.0);
        float _1719 = exp2((_1686.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1686.x + (-0.5));
        float _1721 = _1719 * (_1686.y + (-0.5));
        float _1722 = _1719 * (_1686.z + (-0.5));
        float _1729 = exp2((_1693.w + (-0.5)) * 20.0) * 2.0;
        float _1730 = _1729 * (_1693.x + (-0.5));
        float _1731 = _1729 * (_1693.y + (-0.5));
        float _1732 = _1729 * (_1693.z + (-0.5));
        float _1739 = exp2((_1700.w + (-0.5)) * 20.0) * 2.0;
        float _1740 = _1739 * (_1700.x + (-0.5));
        float _1741 = _1739 * (_1700.y + (-0.5));
        float _1742 = _1739 * (_1700.z + (-0.5));
        float _1749 = exp2((_1707.w + (-0.5)) * 20.0) * 2.0;
        float _1750 = _1749 * (_1707.x + (-0.5));
        float _1751 = _1749 * (_1707.y + (-0.5));
        float _1752 = _1749 * (_1707.z + (-0.5));
        float _1753 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1754 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1755 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1756 = _1720 * 0.5;
        float _1757 = _1730 * 0.5;
        float _1758 = _1740 * 0.5;
        float _1759 = dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758));
        float _1764 = (_1759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1759);
        float _1772 = (dot(vec3(_1043, _1044, _1045), vec3(_1764 * _1756, _1764 * _1757, _1764 * _1758)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1781 = sqrt(((_1757 * _1757) + (_1756 * _1756)) + (_1758 * _1758)) / (_1753 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1783 = _1782 * 2.0;
        float _1787 = (1.0 - _1782) / (_1782 + 1.0);
        float _4326 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1797 = ((((1.0 - _1788) * (_1783 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1783 + 1.0))) + _1788) * _1753;
        float _1798 = _1721 * 0.5;
        float _1799 = _1731 * 0.5;
        float _1800 = _1741 * 0.5;
        float _1801 = dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800));
        float _1806 = (_1801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1801);
        float _1814 = (dot(vec3(_1043, _1044, _1045), vec3(_1806 * _1798, _1806 * _1799, _1806 * _1800)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1823 = sqrt(((_1799 * _1799) + (_1798 * _1798)) + (_1800 * _1800)) / (_1754 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1825 = _1824 * 2.0;
        float _1829 = (1.0 - _1824) / (_1824 + 1.0);
        float _4359 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1839 = ((((1.0 - _1830) * (_1825 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1825 + 1.0))) + _1830) * _1754;
        float _1840 = _1722 * 0.5;
        float _1841 = _1732 * 0.5;
        float _1842 = _1742 * 0.5;
        float _1843 = dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842));
        float _1848 = (_1843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1843);
        float _1856 = (dot(vec3(_1043, _1044, _1045), vec3(_1848 * _1840, _1848 * _1841, _1848 * _1842)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1865 = sqrt(((_1841 * _1841) + (_1840 * _1840)) + (_1842 * _1842)) / (_1755 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1867 = _1866 * 2.0;
        float _1871 = (1.0 - _1866) / (_1866 + 1.0);
        float _4392 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1881 = ((((1.0 - _1872) * (_1867 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1867 + 1.0))) + _1872) * _1755;
        _1889 = _1722;
        _1890 = _1721;
        _1891 = _1720;
        _1892 = _1732;
        _1893 = _1731;
        _1894 = _1730;
        _1895 = _1742;
        _1896 = _1741;
        _1897 = _1740;
        _1898 = _1755;
        _1899 = _1754;
        _1900 = _1753;
        _1901 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)));
        _1902 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)));
        _1903 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)));
    }
    else
    {
        _1889 = _1582;
        _1890 = _1582;
        _1891 = _1582;
        _1892 = _1582;
        _1893 = _1582;
        _1894 = _1582;
        _1895 = _1582;
        _1896 = _1582;
        _1897 = _1582;
        _1898 = _1582;
        _1899 = _1582;
        _1900 = _1582;
        _1901 = 0.0;
        _1902 = 0.0;
        _1903 = 0.0;
    }
    float _1913 = (cbModelParam._m0[1u].x * (_1901 - _1594)) + _1594;
    float _1914 = (cbModelParam._m0[1u].x * (_1902 - _1595)) + _1595;
    float _1915 = (cbModelParam._m0[1u].x * (_1903 - _1596)) + _1596;
    float _1936 = fma(_1915, cbSceneParam._m0[89u].z, fma(_1914, cbSceneParam._m0[89u].y, _1913 * cbSceneParam._m0[89u].x));
    float _1939 = fma(_1915, cbSceneParam._m0[90u].z, fma(_1914, cbSceneParam._m0[90u].y, _1913 * cbSceneParam._m0[90u].x));
    float _1942 = fma(_1915, cbSceneParam._m0[91u].z, fma(_1914, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1913));
    float _1957 = _1216 * 0.5;
    float _1958 = _1217 * 0.5;
    float _1959 = _1218 * 0.5;
    float _1960 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1891, _1894, _1897, _1900));
    float _1963 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1890, _1893, _1896, _1899));
    float _1966 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1889, _1892, _1895, _1898));
    float _2000;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1973 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1581, _1585, _1588, _1591));
        float _1977 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1583, _1586, _1589, _1592));
        float _1981 = dot(vec4(_1957, _1958, _1959, 1.0), vec4(_1584, _1587, _1590, _1593));
        float _1988 = dot(vec4(cbModelParam._m0[39u]), vec4(_1957, _1958, _1959, 1.0));
        _2000 = dot(vec3(isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0)), isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)), isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1988) ? 0.0 : (isnan(0.0) ? _1988 : max(0.0, _1988))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2000 = 1.0;
    }
    float _2011;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2002 = dot(vec4(cbModelParam._m0[40u]), vec4(_1957, _1958, _1959, 1.0));
        _2011 = dot(vec3(isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0)), isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)), isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2002) ? 0.0 : (isnan(0.0) ? _2002 : max(0.0, _2002))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2011 = 1.0;
    }
    float _2015 = (_2011 * cbModelParam._m0[1u].x) + (_2000 * (1.0 - cbModelParam._m0[1u].x));
    float _2025 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1046);
    float _2026 = isnan(_2025) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2025 : min(cbModelParam._m0[25u].z, _2025));
    float _2106;
    float _2108;
    float _2110;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2073 = fma(_1280, cbModelParam._m0[13u].z, fma(_1276, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1272)) + cbModelParam._m0[13u].w;
        float _2077 = fma(_1280, cbModelParam._m0[14u].z, fma(_1276, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1272)) + cbModelParam._m0[14u].w;
        float _2081 = fma(_1280, cbModelParam._m0[15u].z, fma(_1276, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1272)) + cbModelParam._m0[15u].w;
        float _2084 = fma(_1218, cbModelParam._m0[13u].z, fma(_1217, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1216));
        float _2087 = fma(_1218, cbModelParam._m0[14u].z, fma(_1217, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1216));
        float _2090 = fma(_1218, cbModelParam._m0[15u].z, fma(_1217, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1216));
        float _2118;
        if (_2084 > 0.0)
        {
            _2118 = abs((1.0 - _2073) / _2084);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2073 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2118 = frontier_phi_14_12_ladder;
        }
        float _2341;
        if (_2087 > 0.0)
        {
            _2341 = abs((1.0 - _2077) / _2087);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2077 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2341 = frontier_phi_23_19_ladder;
        }
        float _2598;
        if (_2090 > 0.0)
        {
            _2598 = abs((1.0 - _2081) / _2090);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2081 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2598 = frontier_phi_35_30_ladder;
        }
        float _2600 = isnan(_2341) ? _2118 : (isnan(_2118) ? _2341 : min(_2118, _2341));
        float _2601 = isnan(_2598) ? _2600 : (isnan(_2600) ? _2598 : min(_2600, _2598));
        float _2605 = (_2601 * _2084) + _2073;
        float _2606 = (_2601 * _2087) + _2077;
        float _2607 = (_2601 * _2090) + _2081;
        float _2608 = _2601 * 9.9999997473787516355514526367188e-05;
        float _2610 = (-1.0) - _2608;
        float _2612 = _2608 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2607 > _2612) || ((_2607 < _2610) || ((_2606 > _2612) || ((_2606 < _2610) || ((_2605 < _2610) || (_2605 > _2612))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2735 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2607, cbModelParam._m0[9u].z, fma(_2606, cbModelParam._m0[9u].y, _2605 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2607, cbModelParam._m0[10u].z, fma(_2606, cbModelParam._m0[10u].y, _2605 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2607, cbModelParam._m0[11u].z, fma(_2606, cbModelParam._m0[11u].y, _2605 * cbModelParam._m0[11u].x))), _2026);
            frontier_phi_13_35_ladder = _2735.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2735.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2735.x * cbModelParam._m0[1u].y;
        }
        _2106 = frontier_phi_13_35_ladder_2;
        _2108 = frontier_phi_13_35_ladder_1;
        _2110 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2094 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1216, _1217, _1218), _2026);
        _2106 = _2094.x * cbModelParam._m0[1u].y;
        _2108 = _2094.y * cbModelParam._m0[1u].y;
        _2110 = _2094.z * cbModelParam._m0[1u].y;
    }
    float _2114 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1046);
    float _2115 = isnan(_2114) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2114 : min(cbModelParam._m0[25u].w, _2114));
    float _2204;
    float _2206;
    float _2208;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2168 = fma(_1280, cbModelParam._m0[21u].z, fma(_1276, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1272)) + cbModelParam._m0[21u].w;
        float _2172 = fma(_1280, cbModelParam._m0[22u].z, fma(_1276, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1272)) + cbModelParam._m0[22u].w;
        float _2176 = fma(_1280, cbModelParam._m0[23u].z, fma(_1276, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1272)) + cbModelParam._m0[23u].w;
        float _2179 = fma(_1218, cbModelParam._m0[21u].z, fma(_1217, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1216));
        float _2182 = fma(_1218, cbModelParam._m0[22u].z, fma(_1217, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1216));
        float _2185 = fma(_1218, cbModelParam._m0[23u].z, fma(_1217, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1216));
        float _2346;
        if (_2179 > 0.0)
        {
            _2346 = abs((1.0 - _2168) / _2179);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2179 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2168 + 1.0) / _2179);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2346 = frontier_phi_25_21_ladder;
        }
        float _2625;
        if (_2182 > 0.0)
        {
            _2625 = abs((1.0 - _2172) / _2182);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2182 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2172 + 1.0) / _2182);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2625 = frontier_phi_37_32_ladder;
        }
        float _2838;
        if (_2185 > 0.0)
        {
            _2838 = abs((1.0 - _2176) / _2185);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2185 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2176 + 1.0) / _2185);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2838 = frontier_phi_46_43_ladder;
        }
        float _2840 = isnan(_2625) ? _2346 : (isnan(_2346) ? _2625 : min(_2346, _2625));
        float _2841 = isnan(_2838) ? _2840 : (isnan(_2840) ? _2838 : min(_2840, _2838));
        float _2845 = (_2841 * _2179) + _2168;
        float _2846 = (_2841 * _2182) + _2172;
        float _2847 = (_2841 * _2185) + _2176;
        float _2848 = _2841 * 9.9999997473787516355514526367188e-05;
        float _2849 = (-1.0) - _2848;
        float _2851 = _2848 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2847 > _2851) || ((_2847 < _2849) || ((_2846 > _2851) || ((_2846 < _2849) || ((_2845 < _2849) || (_2845 > _2851))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3046 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2847, cbModelParam._m0[17u].z, fma(_2846, cbModelParam._m0[17u].y, _2845 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2847, cbModelParam._m0[18u].z, fma(_2846, cbModelParam._m0[18u].y, _2845 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2847, cbModelParam._m0[19u].z, fma(_2846, cbModelParam._m0[19u].y, _2845 * cbModelParam._m0[19u].x))), _2115);
            frontier_phi_22_46_ladder = _3046.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3046.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3046.x * cbModelParam._m0[1u].z;
        }
        _2204 = frontier_phi_22_46_ladder_2;
        _2206 = frontier_phi_22_46_ladder_1;
        _2208 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2188 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1216, _1217, _1218), _2115);
        _2204 = _2188.x * cbModelParam._m0[1u].z;
        _2206 = _2188.y * cbModelParam._m0[1u].z;
        _2208 = _2188.z * cbModelParam._m0[1u].z;
    }
    float _2221 = (((_1243 * _1192) + _1244) * _1208) * ((cbModelParam._m0[1u].w * (_2204 - _2106)) + _2106);
    float _2223 = (((_1243 * _1194) + _1244) * _1208) * ((cbModelParam._m0[1u].w * (_2206 - _2108)) + _2108);
    float _2225 = (((_1243 * _1195) + _1244) * _1208) * ((cbModelParam._m0[1u].w * (_2208 - _2110)) + _2110);
    float _2228 = fma(_2225, cbSceneParam._m0[89u].z, fma(_2223, cbSceneParam._m0[89u].y, _2221 * cbSceneParam._m0[89u].x));
    float _2231 = fma(_2225, cbSceneParam._m0[90u].z, fma(_2223, cbSceneParam._m0[90u].y, _2221 * cbSceneParam._m0[90u].x));
    float _2234 = fma(_2225, cbSceneParam._m0[91u].z, fma(_2223, cbSceneParam._m0[91u].y, _2221 * cbSceneParam._m0[91u].x));
    vec4 _2242 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1130, _1131));
    float _2244 = _2242.w;
    float _2256 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2244);
    float _2257 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2244);
    float _2258 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2244);
    uvec4 _2262 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2264 = _2262.x * 14u;
    uint _2265 = _2264 + 13u;
    float _2272 = _1208 + (-1.0);
    float _2277 = (cbLight._m0[_2265].x * _2272) + 1.0;
    float _2278 = (cbLight._m0[_2265].y * _2272) + 1.0;
    float _2279 = (cbLight._m0[_2265].z * _2272) + 1.0;
    float _2280 = (cbLight._m0[_2265].w * _2272) + 1.0;
    uint _2281 = _2264 + 5u;
    float _2287 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
    uint _2291 = _2264 + 4u;
    float _2300 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
    uint _2304 = _2264 | 1u;
    float _2315 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_1043, _1044, _1045));
    float _2318 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_1043, _1044, _1045));
    float _4528 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _4539 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2323 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * 0.3183098733425140380859375;
    float _2325 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2332 = ((cbLight._m0[_2281].x * _2287) * _2325) + (((cbLight._m0[_2291].x * _2256) * _2300) * _2323);
    float _2333 = ((_2287 * cbLight._m0[_2281].y) * _2325) + (((cbLight._m0[_2291].y * _2257) * _2300) * _2323);
    float _2334 = ((_2287 * cbLight._m0[_2281].z) * _2325) + (((cbLight._m0[_2291].z * _2258) * _2300) * _2323);
    uvec4 _2338 = floatBitsToUint(cbLight._m0[_2264 + 12u]);
    bool _2340 = _2338.x == 0u;
    float _2351;
    float _2353;
    float _2355;
    if (_2340)
    {
        _2351 = _2332;
        _2353 = _2333;
        _2355 = _2334;
    }
    else
    {
        uint _2359 = _2264 + 6u;
        float _2375 = (dot(vec3(cbLight._m0[_2264 + 2u].xyz), vec3(_1043, _1044, _1045)) * 0.5) + 0.5;
        float _2376 = _2375 * _2375;
        float _4550 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2377 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2378 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2351 = (((cbLight._m0[_2359].x * 0.3183098733425140380859375) * _2377) * _2378) + _2332;
        _2353 = (((cbLight._m0[_2359].y * 0.3183098733425140380859375) * _2377) * _2378) + _2333;
        _2355 = (((cbLight._m0[_2359].z * 0.3183098733425140380859375) * _2377) * _2378) + _2334;
    }
    bool _2358 = _2338.y == 0u;
    float _2396;
    float _2398;
    float _2400;
    if (_2358)
    {
        _2396 = _2351;
        _2398 = _2353;
        _2400 = _2355;
    }
    else
    {
        uint _2569 = _2264 + 7u;
        float _2585 = (dot(vec3(cbLight._m0[_2264 + 3u].xyz), vec3(_1043, _1044, _1045)) * 0.5) + 0.5;
        float _2586 = _2585 * _2585;
        float _4566 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2587 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2588 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2396 = (((cbLight._m0[_2569].x * 0.3183098733425140380859375) * _2587) * _2588) + _2351;
        _2398 = (((cbLight._m0[_2569].y * 0.3183098733425140380859375) * _2587) * _2588) + _2353;
        _2400 = (((cbLight._m0[_2569].z * 0.3183098733425140380859375) * _2587) * _2588) + _2355;
    }
    uint _2403 = _2264 + 8u;
    float _2416 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2264].w)) * _1046) * 0.949999988079071044921875);
    float _2417 = _2416 * _2416;
    float _2418 = cbLight._m0[_2264].x + _1122;
    float _2419 = cbLight._m0[_2264].y + _1123;
    float _2420 = cbLight._m0[_2264].z + _1124;
    float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
    float _2425 = _2424 * _2418;
    float _2426 = _2424 * _2419;
    float _2427 = _2424 * _2420;
    float _2428 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2264].xyz));
    float _4582 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2431 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _4593 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _2432 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2433 = dot(vec3(_1043, _1044, _1045), vec3(_2425, _2426, _2427));
    float _4604 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2436 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2437 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_2425, _2426, _2427));
    float _4615 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2441 = _2417 * _2417;
    float _2445 = ((_2436 * _2436) * (_2441 + (-1.0))) + 1.0;
    float _2453 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
    float _2454 = 0.959999978542327880859375 - _1189;
    float _2456 = 0.959999978542327880859375 - _1190;
    float _2457 = 0.959999978542327880859375 - _1191;
    float _2464 = 1.0 - _2417;
    float _2475 = (0.5 / (((_2432 * ((_2431 * _2464) + _2417)) + 9.9999999392252902907785028219223e-09) + (((_2432 * _2464) + _2417) * _2431))) * _2431;
    float _4626 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2477 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2441 / ((_2445 * _2445) * 3.141590118408203125));
    uint _2491 = _2264 + 9u;
    float _2502 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _1046) * 0.949999988079071044921875);
    float _2503 = _2502 * _2502;
    float _2504 = cbLight._m0[_2304].x + _1122;
    float _2505 = cbLight._m0[_2304].y + _1123;
    float _2506 = cbLight._m0[_2304].z + _1124;
    float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
    float _2511 = _2510 * _2504;
    float _2512 = _2510 * _2505;
    float _2513 = _2510 * _2506;
    float _2514 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2304].xyz));
    float _4637 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2517 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2518 = dot(vec3(_1043, _1044, _1045), vec3(_2511, _2512, _2513));
    float _4648 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2522 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2511, _2512, _2513));
    float _4659 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2526 = _2503 * _2503;
    float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
    float _2537 = exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0);
    float _2544 = 1.0 - _2503;
    float _2554 = (0.5 / (((_2432 * ((_2517 * _2544) + _2503)) + 9.9999999392252902907785028219223e-09) + (((_2432 * _2544) + _2503) * _2517))) * _2517;
    float _4670 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2556 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
    float _2566 = (((((_2537 * _2454) + _1192) * cbLight._m0[_2491].x) * _2556) * _2287) + ((((cbLight._m0[_2403].x * _2256) * ((_2453 * _2454) + _1192)) * _2477) * _2300);
    float _2567 = (((((_2537 * _2456) + _1194) * cbLight._m0[_2491].y) * _2556) * _2287) + ((((cbLight._m0[_2403].y * _2257) * ((_2453 * _2456) + _1194)) * _2477) * _2300);
    float _2568 = (((((_2537 * _2457) + _1195) * cbLight._m0[_2491].z) * _2556) * _2287) + ((((cbLight._m0[_2403].z * _2258) * ((_2453 * _2457) + _1195)) * _2477) * _2300);
    float _2630;
    float _2632;
    float _2634;
    if (_2340)
    {
        _2630 = _2566;
        _2632 = _2567;
        _2634 = _2568;
    }
    else
    {
        uint _2636 = _2264 + 2u;
        uint _2640 = _2264 + 10u;
        float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2636].w)) * _1046) * 0.949999988079071044921875);
        float _2655 = _2654 * _2654;
        float _2656 = cbLight._m0[_2636].x + _1122;
        float _2657 = cbLight._m0[_2636].y + _1123;
        float _2658 = cbLight._m0[_2636].z + _1124;
        float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
        float _2663 = _2662 * _2656;
        float _2664 = _2662 * _2657;
        float _2665 = _2662 * _2658;
        float _2666 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2636].xyz));
        float _4681 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2670 = dot(vec3(_1043, _1044, _1045), vec3(_2663, _2664, _2665));
        float _4692 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2674 = dot(vec3(cbLight._m0[_2636].xyz), vec3(_2663, _2664, _2665));
        float _4703 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2678 = _2655 * _2655;
        float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
        float _2689 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
        float _2696 = 1.0 - _2655;
        float _2706 = (0.5 / (((_2432 * ((_2669 * _2696) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2432 * _2696) + _2655) * _2669))) * _2669;
        float _4714 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2708 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
        float _2709 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2630 = (((((_2689 * _2454) + _1192) * cbLight._m0[_2640].x) * _2708) * _2709) + _2566;
        _2632 = (((((_2689 * _2456) + _1194) * cbLight._m0[_2640].y) * _2708) * _2709) + _2567;
        _2634 = (((((_2689 * _2457) + _1195) * cbLight._m0[_2640].z) * _2708) * _2709) + _2568;
    }
    float _2744;
    float _2746;
    float _2748;
    if (_2358)
    {
        _2744 = _2630;
        _2746 = _2632;
        _2748 = _2634;
    }
    else
    {
        uint _2755 = _2264 + 3u;
        uint _2759 = _2264 + 11u;
        float _2773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2755].w)) * _1046) * 0.949999988079071044921875);
        float _2774 = _2773 * _2773;
        float _2775 = cbLight._m0[_2755].x + _1122;
        float _2776 = cbLight._m0[_2755].y + _1123;
        float _2777 = cbLight._m0[_2755].z + _1124;
        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
        float _2782 = _2781 * _2775;
        float _2783 = _2781 * _2776;
        float _2784 = _2781 * _2777;
        float _2785 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2755].xyz));
        float _4730 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2789 = dot(vec3(_1043, _1044, _1045), vec3(_2782, _2783, _2784));
        float _4741 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2793 = dot(vec3(cbLight._m0[_2755].xyz), vec3(_2782, _2783, _2784));
        float _4752 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2797 = _2774 * _2774;
        float _2801 = ((_2792 * _2792) * (_2797 + (-1.0))) + 1.0;
        float _2808 = exp2(log2(1.0 - (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) * 5.0);
        float _2815 = 1.0 - _2774;
        float _2825 = (0.5 / (((_2432 * ((_2788 * _2815) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2432 * _2815) + _2774) * _2788))) * _2788;
        float _4763 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2827 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2797 / ((_2801 * _2801) * 3.141590118408203125));
        float _2828 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2744 = (((((_2808 * _2454) + _1192) * cbLight._m0[_2759].x) * _2827) * _2828) + _2630;
        _2746 = (((((_2808 * _2456) + _1194) * cbLight._m0[_2759].y) * _2827) * _2828) + _2632;
        _2748 = (((((_2808 * _2457) + _1195) * cbLight._m0[_2759].z) * _2827) * _2828) + _2634;
    }
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    if (_2262.y == 0u)
    {
        float _2903 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2904 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2903;
        float _2905 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2903;
        float _2906 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2903;
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.x;
        uint _2930 = uint((float(_2918.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1131) / _2919))) + floor(float(uint(cbSceneParam._m0[85u].x * _1130) / _2919)));
        float _2940 = (log2(_2906 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2941 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        uint _2944 = uint(isnan(14.0) ? _2941 : (isnan(_2941) ? 14.0 : min(_2941, 14.0)));
        uvec4 _2949 = texelFetch(g_lightClusterGridBuffer, int(((_2944 << 2u) + (_2930 << 6u)) >> 2u));
        uint _2950 = _2949.x;
        uint _2951 = _2918.z;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        if (((((1u << ((_2951 >> 4u) & 15u)) + 4294967295u) & _2950) == 0u) || ((_2951 & 240u) == 0u))
        {
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
        }
        else
        {
            float _3052;
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            uint _3202 = 0u;
            uint _3211;
            bool _3212;
            for (;;)
            {
                _3211 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3202 << 2u)) >> 2u)).x;
                _3212 = _3211 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3212)
                {
                    frontier_phi_61_pred = _3196;
                    frontier_phi_61_pred_1 = _3201;
                    frontier_phi_61_pred_2 = _3200;
                    frontier_phi_61_pred_3 = _3199;
                    frontier_phi_61_pred_4 = _3198;
                    frontier_phi_61_pred_5 = _3197;
                }
                else
                {
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    uint _3326;
                    _3320 = _3196;
                    _3321 = _3197;
                    _3322 = _3198;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3211;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    for (;;)
                    {
                        uint _3330 = uint(findLSB(_3326)) + (_3202 << 5u);
                        uint _3327 = (_3326 + 4294967295u) & _3326;
                        uint _3332 = _3330 * 48u;
                        vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 3u)).x));
                        uint _3352 = (_3330 * 48u) + 4u;
                        vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 3u)).x));
                        uint _3371 = (_3330 * 48u) + 8u;
                        vec3 _3382 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3371)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 2u)).x));
                        float _3386 = _3346.x - _2904;
                        float _3387 = _3346.y - _2905;
                        float _3388 = _3346.z - _2906;
                        float _3389 = dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388));
                        float _3392 = inversesqrt(_3389);
                        float _3393 = _3392 * _3386;
                        float _3394 = _3392 * _3387;
                        float _3395 = _3392 * _3388;
                        float _3396 = dot(vec3(_1149, _1152, _1155), vec3(_3393, _3394, _3395));
                        float _3401 = 1.0 - (_3389 * _3346.w);
                        float _4789 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3402 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3403 = sqrt(_3389) * _3365.w;
                        float _3406 = 1.39999997615814208984375 / (_3403 + 1.39999997615814208984375);
                        float _3407 = _3406 * _3406;
                        float _3410 = ((1.0 - _3407) * _3396) + _3407;
                        float _3413 = _3403 * _3403;
                        float _3417 = ((isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0))) * _3402) / ((_3413 * 0.699999988079071044921875) + 1.0);
                        float _3421 = (-0.0) - _2904;
                        float _3422 = (-0.0) - _2905;
                        float _3423 = (-0.0) - _2906;
                        float _3427 = inversesqrt(dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423)));
                        float _3428 = _3427 * _3421;
                        float _3429 = _3427 * _3422;
                        float _3430 = _3427 * _3423;
                        float _3438 = exp2(log2(1.0 / ((_3413 * 3.5) + 5.0)) * 0.25);
                        float _3439 = 1.0 - _1224;
                        float _3446 = sqrt(1.0 - ((1.0 - (_3439 * _3439)) * (1.0 - (_3438 * _3438))));
                        float _3447 = _3446 * _3446;
                        float _3448 = _3447 * _3447;
                        float _3449 = _3428 + _3393;
                        float _3450 = _3429 + _3394;
                        float _3451 = _3430 + _3395;
                        float _3455 = inversesqrt(dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451)));
                        float _3459 = dot(vec3(_1149, _1152, _1155), vec3(_3428, _3429, _3430));
                        float _4805 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3462 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3463 = dot(vec3(_1149, _1152, _1155), vec3(_3455 * _3449, _3455 * _3450, _3455 * _3451));
                        float _4816 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3466 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3470 = ((_3466 * _3466) * (_3448 + (-1.0))) + 1.0;
                        float _3471 = _3406 * _3447;
                        float _3472 = _3471 * _3471;
                        float _3475 = ((1.0 - _3472) * _3396) + _3472;
                        float _4827 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3476 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3477 = 1.0 - _3447;
                        float _3487 = (0.5 / (((_3476 * ((_3462 * _3477) + _3447)) + 9.9999999392252902907785028219223e-09) + (((_3476 * _3477) + _3447) * _3462))) * _3476;
                        float _4838 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3498 = (((_3448 * 3.1415927410125732421875) * (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) / ((_3470 * _3470) * ((_3413 * 2.1991131305694580078125) + 3.141590118408203125))) * _3402;
                        _3255 = (_3417 * _3365.x) + _3323;
                        _3256 = (_3417 * _3365.y) + _3324;
                        _3257 = (_3417 * _3365.z) + _3325;
                        _3252 = (_3498 * _3382.x) + _3320;
                        _3253 = (_3498 * _3382.y) + _3321;
                        _3254 = (_3498 * _3382.z) + _3322;
                        if (_3327 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3320 = _3252;
                            _3321 = _3253;
                            _3322 = _3254;
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3327;
                        }
                    }
                    frontier_phi_61_pred = _3252;
                    frontier_phi_61_pred_1 = _3257;
                    frontier_phi_61_pred_2 = _3256;
                    frontier_phi_61_pred_3 = _3255;
                    frontier_phi_61_pred_4 = _3254;
                    frontier_phi_61_pred_5 = _3253;
                }
                _3052 = frontier_phi_61_pred;
                _3062 = frontier_phi_61_pred_1;
                _3060 = frontier_phi_61_pred_2;
                _3058 = frontier_phi_61_pred_3;
                _3056 = frontier_phi_61_pred_4;
                _3054 = frontier_phi_61_pred_5;
                uint _3203 = _3202 + 1u;
                if (_3203 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3196 = _3052;
                    _3197 = _3054;
                    _3198 = _3056;
                    _3199 = _3058;
                    _3200 = _3060;
                    _3201 = _3062;
                    _3202 = _3203;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
        }
        uvec4 _3065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3066 = _3065.z;
        uint _3068 = (_3066 >> 8u) & 15u;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        if (((4294967295u << _3068) & _2950) == 0u)
        {
            _3164 = _3051;
            _3166 = _3053;
            _3168 = _3055;
            _3170 = _3057;
            _3172 = _3059;
            _3174 = _3061;
        }
        else
        {
            float _3189 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
            float _3190 = _3189 * _2904;
            float _3191 = _3189 * _2905;
            float _3192 = _3189 * _2906;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3068 < ((_3066 >> 12u) & 15u))
            {
                float _3165;
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3303 = _3051;
                float _3304 = _3053;
                float _3305 = _3055;
                float _3306 = _3057;
                float _3307 = _3059;
                float _3308 = _3061;
                uint _3309 = _3068;
                uint _3318;
                bool _3319;
                for (;;)
                {
                    _3318 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3309 << 2u)) >> 2u)).x;
                    _3319 = _3318 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3319)
                    {
                        frontier_phi_67_pred = _3306;
                        frontier_phi_67_pred_1 = _3307;
                        frontier_phi_67_pred_2 = _3308;
                        frontier_phi_67_pred_3 = _3305;
                        frontier_phi_67_pred_4 = _3304;
                        frontier_phi_67_pred_5 = _3303;
                    }
                    else
                    {
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3516 = _3303;
                        float _3517 = _3304;
                        float _3518 = _3305;
                        float _3519 = _3306;
                        float _3520 = _3307;
                        float _3521 = _3308;
                        uint _3522 = _3318;
                        uint _3523;
                        vec4 _3548;
                        float _3549;
                        vec4 _3564;
                        vec3 _3576;
                        vec4 _3591;
                        vec4 _3606;
                        float _3652;
                        bool _3653;
                        for (;;)
                        {
                            uint _3533 = ((_3309 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3522));
                            _3523 = (_3522 + 4294967295u) & _3522;
                            uint _3535 = _3533 * 40u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            _3549 = _3548.w;
                            uint _3551 = (_3533 * 40u) + 4u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3566 = (_3533 * 40u) + 8u;
                            _3576 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x));
                            uint _3578 = (_3533 * 40u) + 16u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3593 = (_3533 * 40u) + 20u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3608 = (_3533 * 40u) + 24u;
                            vec4 _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3627 = (_3533 * 40u) + 28u;
                            vec4 _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            _3652 = fma(_2906, _3640.z, fma(_2905, _3640.y, _3640.x * _2904)) + _3640.w;
                            _3653 = !((fma(_2906, _3621.z, fma(_2905, _3621.y, _3621.x * _2904)) + _3621.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3653)
                            {
                                float _3680 = _3548.x - _2904;
                                float _3681 = _3548.y - _2905;
                                float _3682 = _3548.z - _2906;
                                float _3683 = dot(vec3(_3680, _3681, _3682), vec3(_3680, _3681, _3682));
                                float _3686 = inversesqrt(_3683);
                                float _3687 = _3686 * _3680;
                                float _3688 = _3686 * _3681;
                                float _3689 = _3686 * _3682;
                                float _3693 = 1.0 - (_3683 / (_3549 * _3549));
                                float _4849 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3698 = sqrt(_3683) * _3564.w;
                                float _3700 = 1.39999997615814208984375 / (_3698 + 1.39999997615814208984375);
                                float _3701 = _3700 * _3700;
                                float _3704 = ((1.0 - _3701) * dot(vec3(_3687, _3688, _3689), vec3(_1149, _1152, _1155))) + _3701;
                                float _3707 = _3698 * _3698;
                                float _3711 = (fma(_2906, _3591.z, fma(_2905, _3591.y, _3591.x * _2904)) + _3591.w) / _3652;
                                float _3712 = (fma(_2906, _3606.z, fma(_2905, _3606.y, _3606.x * _2904)) + _3606.w) / _3652;
                                float _3716 = 1.0 - dot(vec2(_3711, _3712), vec2(_3711, _3712));
                                float _4865 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3717 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3718 = _3717 * (((isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0))) * _3694) / ((_3707 * 0.699999988079071044921875) + 1.0));
                                float _3730 = exp2(log2(1.0 / ((_3707 * 3.5) + 5.0)) * 0.25);
                                float _3731 = 1.0 - _1224;
                                float _3738 = sqrt(1.0 - ((1.0 - (_3731 * _3731)) * (1.0 - (_3730 * _3730))));
                                float _3739 = _3738 * _3738;
                                float _3740 = _3739 * _3739;
                                float _3741 = _3687 - _3190;
                                float _3742 = _3688 - _3191;
                                float _3743 = _3689 - _3192;
                                float _3747 = inversesqrt(dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743)));
                                float _3751 = dot(vec3(_1149, _1152, _1155), vec3((-0.0) - _3190, (-0.0) - _3191, (-0.0) - _3192));
                                float _4876 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3754 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3755 = dot(vec3(_1149, _1152, _1155), vec3(_3747 * _3741, _3747 * _3742, _3747 * _3743));
                                float _4887 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3758 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3762 = ((_3758 * _3758) * (_3740 + (-1.0))) + 1.0;
                                float _3763 = _3700 * _3739;
                                float _3764 = _3763 * _3763;
                                float _3770 = ((1.0 - _3764) * dot(vec3(_1149, _1152, _1155), vec3(_3687, _3688, _3689))) + _3764;
                                float _4898 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3771 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3772 = 1.0 - _3739;
                                float _3782 = (0.5 / (((_3771 * ((_3754 * _3772) + _3739)) + 9.9999999392252902907785028219223e-09) + (((_3771 * _3772) + _3739) * _3754))) * _3771;
                                float _4909 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3792 = (_3717 * _3694) * (((_3740 * 3.1415927410125732421875) * (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) / ((_3762 * _3762) * ((_3707 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3792 * _3576.x;
                                frontier_phi_73_pred_1 = _3792 * _3576.y;
                                frontier_phi_73_pred_2 = _3718 * _3564.z;
                                frontier_phi_73_pred_3 = _3718 * _3564.y;
                                frontier_phi_73_pred_4 = _3718 * _3564.x;
                                frontier_phi_73_pred_5 = _3792 * _3576.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3796 = frontier_phi_73_pred;
                            _3797 = frontier_phi_73_pred_1;
                            _3801 = frontier_phi_73_pred_2;
                            _3800 = frontier_phi_73_pred_3;
                            _3799 = frontier_phi_73_pred_4;
                            _3798 = frontier_phi_73_pred_5;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            _3508 = _3801 + _3521;
                            _3503 = _3796 + _3516;
                            _3504 = _3797 + _3517;
                            _3505 = _3798 + _3518;
                            if (_3523 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3523;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3506;
                        frontier_phi_67_pred_1 = _3507;
                        frontier_phi_67_pred_2 = _3508;
                        frontier_phi_67_pred_3 = _3505;
                        frontier_phi_67_pred_4 = _3504;
                        frontier_phi_67_pred_5 = _3503;
                    }
                    _3171 = frontier_phi_67_pred;
                    _3173 = frontier_phi_67_pred_1;
                    _3175 = frontier_phi_67_pred_2;
                    _3169 = frontier_phi_67_pred_3;
                    _3167 = frontier_phi_67_pred_4;
                    _3165 = frontier_phi_67_pred_5;
                    uint _3310 = _3309 + 1u;
                    if (_3310 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3303 = _3165;
                        _3304 = _3167;
                        _3305 = _3169;
                        _3306 = _3171;
                        _3307 = _3173;
                        _3308 = _3175;
                        _3309 = _3310;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3173;
                frontier_phi_55_56_ladder_1 = _3175;
                frontier_phi_55_56_ladder_2 = _3171;
                frontier_phi_55_56_ladder_3 = _3169;
                frontier_phi_55_56_ladder_4 = _3167;
                frontier_phi_55_56_ladder_5 = _3165;
            }
            else
            {
                frontier_phi_55_56_ladder = _3059;
                frontier_phi_55_56_ladder_1 = _3061;
                frontier_phi_55_56_ladder_2 = _3057;
                frontier_phi_55_56_ladder_3 = _3055;
                frontier_phi_55_56_ladder_4 = _3053;
                frontier_phi_55_56_ladder_5 = _3051;
            }
            _3164 = frontier_phi_55_56_ladder_5;
            _3166 = frontier_phi_55_56_ladder_4;
            _3168 = frontier_phi_55_56_ladder_3;
            _3170 = frontier_phi_55_56_ladder_2;
            _3172 = frontier_phi_55_56_ladder;
            _3174 = frontier_phi_55_56_ladder_1;
        }
        float _3179 = isnan(1.0) ? _1208 : (isnan(_1208) ? 1.0 : min(_1208, 1.0));
        _2963 = (_3179 * _3170) + _2396;
        _2965 = (_3179 * _3172) + _2398;
        _2967 = (_3179 * _3174) + _2400;
        _2969 = ((_3164 * _1192) * _3179) + _2744;
        _2971 = ((_3166 * _1194) * _3179) + _2746;
        _2973 = ((_3168 * _1195) * _3179) + _2748;
    }
    else
    {
        _2963 = _2396;
        _2965 = _2398;
        _2967 = _2400;
        _2969 = _2744;
        _2971 = _2746;
        _2973 = _2748;
    }
    float _4925 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _4936 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _4947 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    uint _2993 = _295 + 6u;
    float _3001 = _1130 / cbSceneParam._m0[86u].x;
    float _3002 = _1131 / cbSceneParam._m0[86u].y;
    vec4 _3016 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, (log2((isnan(cbSceneParam._m0[77u].w) ? _1065 : (isnan(_1065) ? cbSceneParam._m0[77u].w : min(_1065, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3018 = _3016.x;
    float _3019 = _3016.y;
    float _3020 = _3016.z;
    float _3021 = _3016.w;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    if (_1065 > cbSceneParam._m0[78u].w)
    {
        float _3076 = isnan(_1065) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1065 : min(cbSceneParam._m0[80u].w, _1065));
        float _3077 = _3076 / _1065;
        float _3088 = _3077 * _1115;
        float _3089 = _1116 * _3077;
        float _3090 = (-0.0) - _3089;
        float _3092 = _3077 * _1117;
        float _3094 = (cbSceneParam._m0[77u].w * _3090) / _3076;
        float _3095 = _3094 + cbSceneParam._m0[79u].w;
        float _3096 = cbSceneParam._m0[79u].w - _3089;
        float _3102 = sqrt(((_3088 * _3088) + (_3089 * _3089)) + (_3092 * _3092));
        float _3105 = (1.0 - (cbSceneParam._m0[77u].w / _3076)) * _3102;
        float _3110 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3112 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3265;
        if (abs((_3090 - _3094) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3265 = ((((_3095 > 0.0) ? exp2(_3110 * _3095) : (2.0 - exp2(_3112 * _3095))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3105;
        }
        else
        {
            float _3225 = 1.0 / cbSceneParam._m0[80u].x;
            float _3226 = isnan(_3096) ? _3095 : (isnan(_3095) ? _3096 : max(_3095, _3096));
            float _3227 = isnan(_3096) ? _3095 : (isnan(_3095) ? _3096 : min(_3095, _3096));
            float _3236 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : min(_3226, 0.0));
            float _3237 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : min(_3227, 0.0));
            _3265 = ((abs(_3102 / _3090) * cbSceneParam._m0[80u].y) * ((((_3236 - _3237) * 2.0) - ((exp2(_3110 * (isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0)))) - exp2(_3110 * (isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))))) * _3225)) - ((exp2(_3112 * _3236) - exp2(_3112 * _3237)) * _3225))) + (_3105 * cbSceneParam._m0[80u].z);
        }
        vec4 _3267 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, 1.0), 0.0);
        float _3276 = exp2((_3265 * (-1.44269502162933349609375)) * (1.0 - _3267.w));
        float _3277 = log2(_3276);
        float _3293 = log2(_3021);
        _3114 = (exp2(_3293 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3277 * cbSceneParam._m0[78u].x)) * _3267.x) / cbSceneParam._m0[78u].x)) + _3018;
        _3116 = (exp2(_3293 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3277 * cbSceneParam._m0[78u].y)) * _3267.y) / cbSceneParam._m0[78u].y)) + _3019;
        _3118 = (exp2(_3293 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3277 * cbSceneParam._m0[78u].z)) * _3267.z) / cbSceneParam._m0[78u].z)) + _3020;
        _3120 = _3276 * _3021;
    }
    else
    {
        _3114 = _3018;
        _3116 = _3019;
        _3118 = _3020;
        _3120 = _3021;
    }
    float _3132 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3133 = _3132 == 3.0;
    float _3134 = log2(_3120);
    float _3141 = exp2(_3134 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2963 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1208))) + ((_2969 + ((isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0))) * _2015)) * cbPerFrame._m0[3u].x));
    float _3142 = exp2(_3134 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2965 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1208))) + ((_2971 + ((isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0))) * _2015)) * cbPerFrame._m0[3u].x));
    float _3143 = exp2(_3134 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2967 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1208))) + ((_2973 + ((isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0))) * _2015)) * cbPerFrame._m0[3u].x));
    float _3152 = (_3132 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3152 * (_3133 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3114)));
    SV_Target.y = _3152 * (_3133 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3116)));
    SV_Target.z = _3152 * (_3133 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3118)));
    SV_Target.w = cbInstanceData._m0[_2993].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2993].w;
}


