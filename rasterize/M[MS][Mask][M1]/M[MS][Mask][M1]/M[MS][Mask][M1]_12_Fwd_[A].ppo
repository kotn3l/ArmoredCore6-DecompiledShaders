#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1264;
float _3646;
float _3647;
float _3648;
float _3649;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _306.x * cbMtdParam._m0[11u].x;
    float _312 = _306.y * cbMtdParam._m0[11u].y;
    float _313 = _306.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[23u].w) + _399) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3658 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _430 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _282.x) * ((_417 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311);
    float _433 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _282.y) * ((_417 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312);
    float _436 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _282.z) * ((_417 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313);
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _471 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _473 = _471.x;
    float _474 = _471.y;
    float _475 = _471.z;
    float _484 = ((_454.z - _475) * _417) + _475;
    float _487 = ((((_454.x - _473) * _417) + _473) * 2.0) + (-1.0);
    float _489 = ((((_454.y - _474) * _417) + _474) * 2.0) + (-1.0);
    float _490 = dot(vec2(_487, _489), vec2(_487, _489));
    float _3669 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _495 = sqrt(1.0 - (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))));
    vec4 _511 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _538 = _536.x;
    float _539 = 1.0 - _538;
    float _555 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_538 - _539) * cbMtdParam._m0[24u].z) + _539) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3680 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _563 = (_556 * (cbMtdParam._m0[17u].x - _430)) + _430;
    float _564 = (_556 * (cbMtdParam._m0[17u].y - _433)) + _433;
    float _565 = (_556 * (cbMtdParam._m0[17u].z - _436)) + _436;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _593 = _591.x;
    float _610 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _593) * _417) + _593;
    float _614 = ((_577.x - _610) * cbMtdParam._m0[19u].z) + _610;
    float _616 = _614 - (_614 * _556);
    float _620 = (cbMtdParam._m0[19u].w * (_511.z - _484)) + _484;
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _640 = (_633.x * 2.0) + (-1.0);
    float _641 = (_633.y * 2.0) + (-1.0);
    float _642 = dot(vec2(_640, _641), vec2(_640, _641));
    float _3691 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _650 = (_556 * (_633.z - _620)) + _620;
    float _653 = (((_511.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _487;
    float _654 = (((_511.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _489;
    float _666 = (((_640 - _653) + (cbMtdParam._m0[21u].x * _653)) * _556) + _653;
    float _667 = (((_641 - _654) + (cbMtdParam._m0[21u].x * _654)) * _556) + _654;
    float _668 = (_556 * (sqrt(1.0 - (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) - _495)) + _495;
    float _670 = cbMtdParam._m0[22u].x + _511.w;
    float _673 = fma(_668, _229 * NORMAL.x, fma(_667, _236 * TANGENT.x, (_222 * _214) * _666));
    float _676 = fma(_668, _229 * NORMAL.y, fma(_667, _236 * TANGENT.y, (_222 * _215) * _666));
    float _679 = fma(_668, _229 * NORMAL.z, fma(_667, _236 * TANGENT.z, (_222 * _216) * _666));
    float _683 = inversesqrt(dot(vec3(_673, _676, _679), vec3(_673, _676, _679)));
    float _684 = _683 * _673;
    float _685 = _683 * _676;
    float _686 = _683 * _679;
    float _3702 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _687 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3724 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3735 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3746 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3757 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _692 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _706 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _757 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _747);
    float _758 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _747);
    float _759 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _747);
    float _763 = inversesqrt(dot(vec3(_757, _758, _759), vec3(_757, _758, _759)));
    float _764 = _757 * _763;
    float _765 = _758 * _763;
    float _766 = _759 * _763;
    vec4 _771 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _773 = _771.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _945 = sqrt(((_757 * _757) + (_758 * _758)) + (_759 * _759));
        float _951 = (cbMatDynParam._m0[5u].x * _945) + cbMatDynParam._m0[5u].y;
        float _3768 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _956 = (cbMatDynParam._m0[5u].z * _945) + cbMatDynParam._m0[5u].w;
        float _3779 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) - _952)) + _952) < ((_773 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _784 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _785 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _803 = fma(_686, cbSceneParam._m0[5u].z, fma(_685, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _684));
    float _806 = fma(_686, cbSceneParam._m0[6u].z, fma(_685, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _684));
    float _809 = fma(_686, cbSceneParam._m0[7u].z, fma(_685, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _684));
    uint _822 = _242 + 9u;
    uint _823 = _822 + uint(cbMatDynParam._m0[0u].w);
    float _829 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * cbInstanceData._m0[_823].x;
    float _830 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * cbInstanceData._m0[_823].y;
    float _831 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * cbInstanceData._m0[_823].z;
    float _3790 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _3801 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _835 = 1.0 - _692;
    float _836 = _832 * _835;
    float _837 = _833 * _835;
    float _838 = _834 * _835;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _692;
    float _844 = (_833 + (-0.039999999105930328369140625)) * _692;
    float _845 = (_834 + (-0.039999999105930328369140625)) * _692;
    float _846 = _843 + 0.039999999105930328369140625;
    float _848 = _844 + 0.039999999105930328369140625;
    float _849 = _845 + 0.039999999105930328369140625;
    vec4 _858 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _784, cbSceneParam._m0[86u].y * _785));
    float _862 = ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * TEXCOORD_5.w) * _858.x;
    float _863 = dot(vec3(_684, _685, _686), vec3(_764, _765, _766));
    float _866 = _863 * 2.0;
    float _870 = (_866 * _684) - _764;
    float _871 = (_866 * _685) - _765;
    float _872 = (_866 * _686) - _766;
    float _876 = abs(dot(vec3(_764, _765, _766), vec3(_684, _685, _686)));
    float _3823 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _878 = sqrt(_687);
    float _891 = exp2((_878 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_878 * 3.0));
    float _897 = (1.0 - _891) * ((_878 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _898 = _891 * _878;
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1263;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _988 = fma(_934, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926));
        float _992 = fma(_934, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926));
        float _996 = fma(_934, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926));
        float _1021 = _926 + _684;
        float _1022 = _930 + _685;
        float _1023 = _934 + _686;
        float _1033 = fma(_1023, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1021)) - _988;
        float _1034 = fma(_1023, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1021)) - _992;
        float _1035 = fma(_1023, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1021)) - _996;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1052 = ((_1039 * _1033) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_988 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1039 * _1034) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_992 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1039 * _1035) / cbModelParam._m0[34u].z) + ((((((_996 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1091 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1057.x + (-0.5));
        float _1093 = _1091 * (_1057.y + (-0.5));
        float _1094 = _1091 * (_1057.z + (-0.5));
        float _1101 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1064.x + (-0.5));
        float _1103 = _1101 * (_1064.y + (-0.5));
        float _1104 = _1101 * (_1064.z + (-0.5));
        float _1111 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1071.x + (-0.5));
        float _1113 = _1111 * (_1071.y + (-0.5));
        float _1114 = _1111 * (_1071.z + (-0.5));
        float _1121 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1078.x + (-0.5));
        float _1123 = _1121 * (_1078.y + (-0.5));
        float _1124 = _1121 * (_1078.z + (-0.5));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = _1092 * 0.5;
        float _1129 = _1102 * 0.5;
        float _1130 = _1112 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1145 = (dot(vec3(_684, _685, _686), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1155 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3871 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1157 + 1.0))) + _1162) * _1125;
        float _1172 = _1093 * 0.5;
        float _1173 = _1103 * 0.5;
        float _1174 = _1113 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_684, _685, _686), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3904 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1199 + 1.0))) + _1204) * _1126;
        float _1214 = _1094 * 0.5;
        float _1215 = _1104 * 0.5;
        float _1216 = _1114 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_684, _685, _686), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3937 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1241 + 1.0))) + _1246) * _1127;
        _1263 = _1094;
        _1265 = _1093;
        _1266 = _1092;
        _1267 = _1104;
        _1268 = _1103;
        _1269 = _1102;
        _1270 = _1114;
        _1271 = _1113;
        _1272 = _1112;
        _1273 = _1127;
        _1274 = _1126;
        _1275 = _1125;
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
    }
    else
    {
        _1263 = _1264;
        _1265 = _1264;
        _1266 = _1264;
        _1267 = _1264;
        _1268 = _1264;
        _1269 = _1264;
        _1270 = _1264;
        _1271 = _1264;
        _1272 = _1264;
        _1273 = _1264;
        _1274 = _1264;
        _1275 = _1264;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
    }
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1306 = fma(_934, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926));
        float _1310 = fma(_934, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926));
        float _1314 = fma(_934, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926));
        float _1337 = _926 + _684;
        float _1338 = _930 + _685;
        float _1339 = _934 + _686;
        float _1349 = fma(_1339, cbModelParam._m0[30u].z, fma(_1338, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1337)) - _1306;
        float _1350 = fma(_1339, cbModelParam._m0[31u].z, fma(_1338, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1337)) - _1310;
        float _1351 = fma(_1339, cbModelParam._m0[32u].z, fma(_1338, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1337)) - _1314;
        float _1355 = inversesqrt(dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351)));
        float _1368 = ((_1355 * _1349) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1306 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1355 * _1350) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1310 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1355 * _1351) / cbModelParam._m0[35u].z) + ((((((_1314 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        float _1405 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1372.x + (-0.5));
        float _1407 = _1405 * (_1372.y + (-0.5));
        float _1408 = _1405 * (_1372.z + (-0.5));
        float _1415 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1379.x + (-0.5));
        float _1417 = _1415 * (_1379.y + (-0.5));
        float _1418 = _1415 * (_1379.z + (-0.5));
        float _1425 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1386.x + (-0.5));
        float _1427 = _1425 * (_1386.y + (-0.5));
        float _1428 = _1425 * (_1386.z + (-0.5));
        float _1435 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1393.x + (-0.5));
        float _1437 = _1435 * (_1393.y + (-0.5));
        float _1438 = _1435 * (_1393.z + (-0.5));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = _1406 * 0.5;
        float _1443 = _1416 * 0.5;
        float _1444 = _1426 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_684, _685, _686), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4000 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1469 + 1.0))) + _1474) * _1439;
        float _1484 = _1407 * 0.5;
        float _1485 = _1417 * 0.5;
        float _1486 = _1427 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_684, _685, _686), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4033 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1511 + 1.0))) + _1516) * _1440;
        float _1526 = _1408 * 0.5;
        float _1527 = _1418 * 0.5;
        float _1528 = _1428 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_684, _685, _686), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4066 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1553 + 1.0))) + _1558) * _1441;
        _1575 = _1408;
        _1576 = _1407;
        _1577 = _1406;
        _1578 = _1418;
        _1579 = _1417;
        _1580 = _1416;
        _1581 = _1428;
        _1582 = _1427;
        _1583 = _1426;
        _1584 = _1441;
        _1585 = _1440;
        _1586 = _1439;
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
    }
    else
    {
        _1575 = _1264;
        _1576 = _1264;
        _1577 = _1264;
        _1578 = _1264;
        _1579 = _1264;
        _1580 = _1264;
        _1581 = _1264;
        _1582 = _1264;
        _1583 = _1264;
        _1584 = _1264;
        _1585 = _1264;
        _1586 = _1264;
        _1587 = 0.0;
        _1588 = 0.0;
        _1589 = 0.0;
    }
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1276)) + _1276;
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1277)) + _1277;
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1278)) + _1278;
    float _1622 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1600, cbSceneParam._m0[89u].y, _1599 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1600, cbSceneParam._m0[90u].y, _1599 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1600, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1599));
    float _1643 = _870 * 0.5;
    float _1644 = _871 * 0.5;
    float _1645 = _872 * 0.5;
    float _1646 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1649 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1652 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1686;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1659 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1263, _1267, _1270, _1273));
        float _1663 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1667 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1266, _1269, _1272, _1275));
        float _1674 = dot(vec4(cbModelParam._m0[39u]), vec4(_1643, _1644, _1645, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1697;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1688 = dot(vec4(cbModelParam._m0[40u]), vec4(_1643, _1644, _1645, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1701 = (_1697 * cbModelParam._m0[1u].x) + (_1686 * (1.0 - cbModelParam._m0[1u].x));
    float _1711 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _687);
    float _1712 = isnan(_1711) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1711 : min(cbModelParam._m0[25u].z, _1711));
    float _1793;
    float _1795;
    float _1797;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1760 = fma(_934, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926)) + cbModelParam._m0[13u].w;
        float _1764 = fma(_934, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926)) + cbModelParam._m0[14u].w;
        float _1768 = fma(_934, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926)) + cbModelParam._m0[15u].w;
        float _1771 = fma(_872, cbModelParam._m0[13u].z, fma(_871, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _870));
        float _1774 = fma(_872, cbModelParam._m0[14u].z, fma(_871, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _870));
        float _1777 = fma(_872, cbModelParam._m0[15u].z, fma(_871, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _870));
        float _1805;
        if (_1771 > 0.0)
        {
            _1805 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1805 = frontier_phi_17_15_ladder;
        }
        float _2008;
        if (_1774 > 0.0)
        {
            _2008 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2008 = frontier_phi_26_22_ladder;
        }
        float _2262;
        if (_1777 > 0.0)
        {
            _2262 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2262 = frontier_phi_38_33_ladder;
        }
        float _2264 = isnan(_2008) ? _1805 : (isnan(_1805) ? _2008 : min(_1805, _2008));
        float _2265 = isnan(_2262) ? _2264 : (isnan(_2264) ? _2262 : min(_2264, _2262));
        float _2269 = (_2265 * _1771) + _1760;
        float _2270 = (_2265 * _1774) + _1764;
        float _2271 = (_2265 * _1777) + _1768;
        float _2272 = _2265 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2272;
        float _2276 = _2272 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 > _2276) || ((_2270 < _2274) || ((_2269 < _2274) || (_2269 > _2276))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2399 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2271, cbModelParam._m0[9u].z, fma(_2270, cbModelParam._m0[9u].y, _2269 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2271, cbModelParam._m0[10u].z, fma(_2270, cbModelParam._m0[10u].y, _2269 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2271, cbModelParam._m0[11u].z, fma(_2270, cbModelParam._m0[11u].y, _2269 * cbModelParam._m0[11u].x))), _1712);
            frontier_phi_16_38_ladder = _2399.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2399.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2399.x * cbModelParam._m0[1u].y;
        }
        _1793 = frontier_phi_16_38_ladder_2;
        _1795 = frontier_phi_16_38_ladder_1;
        _1797 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_870, _871, _872), _1712);
        _1793 = _1781.x * cbModelParam._m0[1u].y;
        _1795 = _1781.y * cbModelParam._m0[1u].y;
        _1797 = _1781.z * cbModelParam._m0[1u].y;
    }
    float _1801 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _687);
    float _1802 = isnan(_1801) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1801 : min(cbModelParam._m0[25u].w, _1801));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1856 = fma(_934, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926)) + cbModelParam._m0[21u].w;
        float _1860 = fma(_934, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926)) + cbModelParam._m0[22u].w;
        float _1864 = fma(_934, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926)) + cbModelParam._m0[23u].w;
        float _1867 = fma(_872, cbModelParam._m0[21u].z, fma(_871, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _870));
        float _1870 = fma(_872, cbModelParam._m0[22u].z, fma(_871, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _870));
        float _1873 = fma(_872, cbModelParam._m0[23u].z, fma(_871, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _870));
        float _2013;
        if (_1867 > 0.0)
        {
            _2013 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2013 = frontier_phi_28_24_ladder;
        }
        float _2289;
        if (_1870 > 0.0)
        {
            _2289 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2289 = frontier_phi_40_35_ladder;
        }
        float _2502;
        if (_1873 > 0.0)
        {
            _2502 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2502 = frontier_phi_49_46_ladder;
        }
        float _2504 = isnan(_2289) ? _2013 : (isnan(_2013) ? _2289 : min(_2013, _2289));
        float _2505 = isnan(_2502) ? _2504 : (isnan(_2504) ? _2502 : min(_2504, _2502));
        float _2509 = (_2505 * _1867) + _1856;
        float _2510 = (_2505 * _1870) + _1860;
        float _2511 = (_2505 * _1873) + _1864;
        float _2512 = _2505 * 9.9999997473787516355514526367188e-05;
        float _2513 = (-1.0) - _2512;
        float _2515 = _2512 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2511 > _2515) || ((_2511 < _2513) || ((_2510 > _2515) || ((_2510 < _2513) || ((_2509 < _2513) || (_2509 > _2515))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2710 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2511, cbModelParam._m0[17u].z, fma(_2510, cbModelParam._m0[17u].y, _2509 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2511, cbModelParam._m0[18u].z, fma(_2510, cbModelParam._m0[18u].y, _2509 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2511, cbModelParam._m0[19u].z, fma(_2510, cbModelParam._m0[19u].y, _2509 * cbModelParam._m0[19u].x))), _1802);
            frontier_phi_25_49_ladder = _2710.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2710.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2710.x * cbModelParam._m0[1u].z;
        }
        _1892 = frontier_phi_25_49_ladder_2;
        _1894 = frontier_phi_25_49_ladder_1;
        _1896 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_870, _871, _872), _1802);
        _1892 = _1876.x * cbModelParam._m0[1u].z;
        _1894 = _1876.y * cbModelParam._m0[1u].z;
        _1896 = _1876.z * cbModelParam._m0[1u].z;
    }
    float _1909 = (((_897 * _846) + _898) * _862) * ((cbModelParam._m0[1u].w * (_1892 - _1793)) + _1793);
    float _1911 = (((_897 * _848) + _898) * _862) * ((cbModelParam._m0[1u].w * (_1894 - _1795)) + _1795);
    float _1913 = (((_897 * _849) + _898) * _862) * ((cbModelParam._m0[1u].w * (_1896 - _1797)) + _1797);
    float _1916 = fma(_1913, cbSceneParam._m0[89u].z, fma(_1911, cbSceneParam._m0[89u].y, _1909 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1913, cbSceneParam._m0[90u].z, fma(_1911, cbSceneParam._m0[90u].y, _1909 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1913, cbSceneParam._m0[91u].z, fma(_1911, cbSceneParam._m0[91u].y, _1909 * cbSceneParam._m0[91u].x));
    uvec4 _1932 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1934 = _1932.x * 14u;
    uint _1935 = _1934 + 13u;
    float _1942 = _862 + (-1.0);
    float _1947 = (cbLight._m0[_1935].x * _1942) + 1.0;
    float _1948 = (cbLight._m0[_1935].y * _1942) + 1.0;
    float _1949 = (cbLight._m0[_1935].z * _1942) + 1.0;
    float _1950 = (cbLight._m0[_1935].w * _1942) + 1.0;
    uint _1951 = _1934 + 5u;
    float _1957 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1961 = _1934 + 4u;
    float _1967 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
    uint _1971 = _1934 | 1u;
    float _1982 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_684, _685, _686));
    float _1985 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_684, _685, _686));
    float _4202 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _4213 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1990 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * 0.3183098733425140380859375;
    float _1992 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 0.3183098733425140380859375;
    float _1999 = ((cbLight._m0[_1951].x * _1957) * _1992) + ((cbLight._m0[_1961].x * _1967) * _1990);
    float _2000 = ((_1957 * cbLight._m0[_1951].y) * _1992) + ((_1967 * cbLight._m0[_1961].y) * _1990);
    float _2001 = ((_1957 * cbLight._m0[_1951].z) * _1992) + ((_1967 * cbLight._m0[_1961].z) * _1990);
    uvec4 _2005 = floatBitsToUint(cbLight._m0[_1934 + 12u]);
    bool _2007 = _2005.x == 0u;
    float _2018;
    float _2020;
    float _2022;
    if (_2007)
    {
        _2018 = _1999;
        _2020 = _2000;
        _2022 = _2001;
    }
    else
    {
        uint _2026 = _1934 + 6u;
        float _2042 = (dot(vec3(cbLight._m0[_1934 + 2u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2043 = _2042 * _2042;
        float _4224 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2044 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2045 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2018 = (((cbLight._m0[_2026].x * 0.3183098733425140380859375) * _2044) * _2045) + _1999;
        _2020 = (((cbLight._m0[_2026].y * 0.3183098733425140380859375) * _2044) * _2045) + _2000;
        _2022 = (((cbLight._m0[_2026].z * 0.3183098733425140380859375) * _2044) * _2045) + _2001;
    }
    bool _2025 = _2005.y == 0u;
    float _2063;
    float _2065;
    float _2067;
    if (_2025)
    {
        _2063 = _2018;
        _2065 = _2020;
        _2067 = _2022;
    }
    else
    {
        uint _2233 = _1934 + 7u;
        float _2249 = (dot(vec3(cbLight._m0[_1934 + 3u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4240 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2252 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2063 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _2018;
        _2065 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2020;
        _2067 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2022;
    }
    uint _2070 = _1934 + 8u;
    float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _687) * 0.949999988079071044921875);
    float _2084 = _2083 * _2083;
    float _2085 = cbLight._m0[_1934].x + _764;
    float _2086 = cbLight._m0[_1934].y + _765;
    float _2087 = cbLight._m0[_1934].z + _766;
    float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
    float _2092 = _2091 * _2085;
    float _2093 = _2091 * _2086;
    float _2094 = _2091 * _2087;
    float _2095 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_1934].xyz));
    float _4256 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _4267 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2099 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2100 = dot(vec3(_684, _685, _686), vec3(_2092, _2093, _2094));
    float _4278 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2092, _2093, _2094));
    float _4289 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2084 * _2084;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2120 = exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0);
    float _2121 = 0.959999978542327880859375 - _843;
    float _2123 = 0.959999978542327880859375 - _844;
    float _2124 = 0.959999978542327880859375 - _845;
    float _2131 = 1.0 - _2084;
    float _2142 = (0.5 / (((_2099 * ((_2098 * _2131) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2131) + _2084) * _2098))) * _2098;
    float _4300 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2144 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    uint _2155 = _1934 + 9u;
    float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _687) * 0.949999988079071044921875);
    float _2167 = _2166 * _2166;
    float _2168 = cbLight._m0[_1971].x + _764;
    float _2169 = cbLight._m0[_1971].y + _765;
    float _2170 = cbLight._m0[_1971].z + _766;
    float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
    float _2175 = _2174 * _2168;
    float _2176 = _2174 * _2169;
    float _2177 = _2174 * _2170;
    float _2178 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_1971].xyz));
    float _4311 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2182 = dot(vec3(_684, _685, _686), vec3(_2175, _2176, _2177));
    float _4322 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2175, _2176, _2177));
    float _4333 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2167 * _2167;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2201 = exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0);
    float _2208 = 1.0 - _2167;
    float _2218 = (0.5 / (((_2099 * ((_2181 * _2208) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2208) + _2167) * _2181))) * _2181;
    float _4344 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    float _2230 = (((((_2201 * _2121) + _846) * cbLight._m0[_2155].x) * _2220) * _1957) + (((((_2120 * _2121) + _846) * cbLight._m0[_2070].x) * _2144) * _1967);
    float _2231 = (((((_2201 * _2123) + _848) * cbLight._m0[_2155].y) * _2220) * _1957) + (((((_2120 * _2123) + _848) * cbLight._m0[_2070].y) * _2144) * _1967);
    float _2232 = (((((_2201 * _2124) + _849) * cbLight._m0[_2155].z) * _2220) * _1957) + (((((_2120 * _2124) + _849) * cbLight._m0[_2070].z) * _2144) * _1967);
    float _2294;
    float _2296;
    float _2298;
    if (_2007)
    {
        _2294 = _2230;
        _2296 = _2231;
        _2298 = _2232;
    }
    else
    {
        uint _2300 = _1934 + 2u;
        uint _2304 = _1934 + 10u;
        float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _687) * 0.949999988079071044921875);
        float _2319 = _2318 * _2318;
        float _2320 = cbLight._m0[_2300].x + _764;
        float _2321 = cbLight._m0[_2300].y + _765;
        float _2322 = cbLight._m0[_2300].z + _766;
        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
        float _2327 = _2326 * _2320;
        float _2328 = _2326 * _2321;
        float _2329 = _2326 * _2322;
        float _2330 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2300].xyz));
        float _4355 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2334 = dot(vec3(_684, _685, _686), vec3(_2327, _2328, _2329));
        float _4366 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2338 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2327, _2328, _2329));
        float _4377 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2342 = _2319 * _2319;
        float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
        float _2353 = exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0);
        float _2360 = 1.0 - _2319;
        float _2370 = (0.5 / (((_2099 * ((_2333 * _2360) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2360) + _2319) * _2333))) * _2333;
        float _4388 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2372 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
        float _2373 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2294 = (((((_2353 * _2121) + _846) * cbLight._m0[_2304].x) * _2372) * _2373) + _2230;
        _2296 = (((((_2353 * _2123) + _848) * cbLight._m0[_2304].y) * _2372) * _2373) + _2231;
        _2298 = (((((_2353 * _2124) + _849) * cbLight._m0[_2304].z) * _2372) * _2373) + _2232;
    }
    float _2408;
    float _2410;
    float _2412;
    if (_2025)
    {
        _2408 = _2294;
        _2410 = _2296;
        _2412 = _2298;
    }
    else
    {
        uint _2419 = _1934 + 3u;
        uint _2423 = _1934 + 11u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _687) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _764;
        float _2440 = cbLight._m0[_2419].y + _765;
        float _2441 = cbLight._m0[_2419].z + _766;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2419].xyz));
        float _4404 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2453 = dot(vec3(_684, _685, _686), vec3(_2446, _2447, _2448));
        float _4415 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4426 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2472 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
        float _2479 = 1.0 - _2438;
        float _2489 = (0.5 / (((_2099 * ((_2452 * _2479) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2479) + _2438) * _2452))) * _2452;
        float _4437 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2491 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2492 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2408 = (((((_2472 * _2121) + _846) * cbLight._m0[_2423].x) * _2491) * _2492) + _2294;
        _2410 = (((((_2472 * _2123) + _848) * cbLight._m0[_2423].y) * _2491) * _2492) + _2296;
        _2412 = (((((_2472 * _2124) + _849) * cbLight._m0[_2423].z) * _2491) * _2492) + _2298;
    }
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    if (_1932.y == 0u)
    {
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2567;
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2567;
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2567;
        uvec4 _2582 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2583 = _2582.x;
        uint _2594 = uint((float(_2582.y) * floor(float(uint(cbSceneParam._m0[85u].y * _785) / _2583))) + floor(float(uint(cbSceneParam._m0[85u].x * _784) / _2583)));
        float _2604 = (log2(_2570 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2605 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        uint _2608 = uint(isnan(14.0) ? _2605 : (isnan(_2605) ? 14.0 : min(_2605, 14.0)));
        uvec4 _2613 = texelFetch(g_lightClusterGridBuffer, int(((_2608 << 2u) + (_2594 << 6u)) >> 2u));
        uint _2614 = _2613.x;
        uint _2615 = _2582.z;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        if (((((1u << ((_2615 >> 4u) & 15u)) + 4294967295u) & _2614) == 0u) || ((_2615 & 240u) == 0u))
        {
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
        }
        else
        {
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2726;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            uint _2874 = 0u;
            uint _2883;
            bool _2884;
            for (;;)
            {
                _2883 = texelFetch(g_lightClassification, int((((_2608 << 5u) + (_2594 << 9u)) + (_2874 << 2u)) >> 2u)).x;
                _2884 = _2883 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2884)
                {
                    frontier_phi_66_pred = _2868;
                    frontier_phi_66_pred_1 = _2873;
                    frontier_phi_66_pred_2 = _2872;
                    frontier_phi_66_pred_3 = _2871;
                    frontier_phi_66_pred_4 = _2870;
                    frontier_phi_66_pred_5 = _2869;
                }
                else
                {
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    uint _3019;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2870;
                    _3016 = _2871;
                    _3017 = _2872;
                    _3018 = _2873;
                    _3019 = _2883;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    for (;;)
                    {
                        uint _3023 = uint(findLSB(_3019)) + (_2874 << 5u);
                        uint _3020 = (_3019 + 4294967295u) & _3019;
                        uint _3025 = _3023 * 48u;
                        vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 3u)).x));
                        uint _3045 = (_3023 * 48u) + 4u;
                        vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 3u)).x));
                        uint _3064 = (_3023 * 48u) + 8u;
                        vec3 _3075 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x));
                        float _3079 = _3039.x - _2568;
                        float _3080 = _3039.y - _2569;
                        float _3081 = _3039.z - _2570;
                        float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                        float _3085 = inversesqrt(_3082);
                        float _3086 = _3085 * _3079;
                        float _3087 = _3085 * _3080;
                        float _3088 = _3085 * _3081;
                        float _3089 = dot(vec3(_803, _806, _809), vec3(_3086, _3087, _3088));
                        float _3094 = 1.0 - (_3082 * _3039.w);
                        float _4463 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3095 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3096 = sqrt(_3082) * _3058.w;
                        float _3099 = 1.39999997615814208984375 / (_3096 + 1.39999997615814208984375);
                        float _3100 = _3099 * _3099;
                        float _3103 = ((1.0 - _3100) * _3089) + _3100;
                        float _3106 = _3096 * _3096;
                        float _3110 = ((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3095) / ((_3106 * 0.699999988079071044921875) + 1.0);
                        float _3114 = (-0.0) - _2568;
                        float _3115 = (-0.0) - _2569;
                        float _3116 = (-0.0) - _2570;
                        float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                        float _3121 = _3120 * _3114;
                        float _3122 = _3120 * _3115;
                        float _3123 = _3120 * _3116;
                        float _3131 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                        float _3132 = 1.0 - _878;
                        float _3139 = sqrt(1.0 - ((1.0 - (_3132 * _3132)) * (1.0 - (_3131 * _3131))));
                        float _3140 = _3139 * _3139;
                        float _3141 = _3140 * _3140;
                        float _3142 = _3121 + _3086;
                        float _3143 = _3122 + _3087;
                        float _3144 = _3123 + _3088;
                        float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                        float _3152 = dot(vec3(_803, _806, _809), vec3(_3121, _3122, _3123));
                        float _4479 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3155 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3156 = dot(vec3(_803, _806, _809), vec3(_3148 * _3142, _3148 * _3143, _3148 * _3144));
                        float _4490 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3159 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3163 = ((_3159 * _3159) * (_3141 + (-1.0))) + 1.0;
                        float _3164 = _3099 * _3140;
                        float _3165 = _3164 * _3164;
                        float _3168 = ((1.0 - _3165) * _3089) + _3165;
                        float _4501 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3169 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3170 = 1.0 - _3140;
                        float _3180 = (0.5 / (((_3169 * ((_3155 * _3170) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_3169 * _3170) + _3140) * _3155))) * _3169;
                        float _4512 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3191 = (((_3141 * 3.1415927410125732421875) * (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) / ((_3163 * _3163) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125))) * _3095;
                        _2943 = (_3110 * _3058.x) + _3016;
                        _2944 = (_3110 * _3058.y) + _3017;
                        _2945 = (_3110 * _3058.z) + _3018;
                        _2940 = (_3191 * _3075.x) + _3013;
                        _2941 = (_3191 * _3075.y) + _3014;
                        _2942 = (_3191 * _3075.z) + _3015;
                        if (_3020 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _2942;
                            _3016 = _2943;
                            _3017 = _2944;
                            _3018 = _2945;
                            _3019 = _3020;
                        }
                    }
                    frontier_phi_66_pred = _2940;
                    frontier_phi_66_pred_1 = _2945;
                    frontier_phi_66_pred_2 = _2944;
                    frontier_phi_66_pred_3 = _2943;
                    frontier_phi_66_pred_4 = _2942;
                    frontier_phi_66_pred_5 = _2941;
                }
                _2716 = frontier_phi_66_pred;
                _2726 = frontier_phi_66_pred_1;
                _2724 = frontier_phi_66_pred_2;
                _2722 = frontier_phi_66_pred_3;
                _2720 = frontier_phi_66_pred_4;
                _2718 = frontier_phi_66_pred_5;
                uint _2875 = _2874 + 1u;
                if (_2875 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2868 = _2716;
                    _2869 = _2718;
                    _2870 = _2720;
                    _2871 = _2722;
                    _2872 = _2724;
                    _2873 = _2726;
                    _2874 = _2875;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
        }
        uvec4 _2729 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2730 = _2729.z;
        uint _2732 = (_2730 >> 8u) & 15u;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        if (((4294967295u << _2732) & _2614) == 0u)
        {
            _2836 = _2715;
            _2838 = _2717;
            _2840 = _2719;
            _2842 = _2721;
            _2844 = _2723;
            _2846 = _2725;
        }
        else
        {
            float _2861 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
            float _2862 = _2861 * _2568;
            float _2863 = _2861 * _2569;
            float _2864 = _2861 * _2570;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2732 < ((_2730 >> 12u) & 15u))
            {
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2845;
                float _2847;
                float _2996 = _2715;
                float _2997 = _2717;
                float _2998 = _2719;
                float _2999 = _2721;
                float _3000 = _2723;
                float _3001 = _2725;
                uint _3002 = _2732;
                uint _3011;
                bool _3012;
                for (;;)
                {
                    _3011 = texelFetch(g_lightClassification, int((((_2608 << 5u) + (_2594 << 9u)) + (_3002 << 2u)) >> 2u)).x;
                    _3012 = _3011 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3012)
                    {
                        frontier_phi_77_pred = _3001;
                        frontier_phi_77_pred_1 = _3000;
                        frontier_phi_77_pred_2 = _2999;
                        frontier_phi_77_pred_3 = _2998;
                        frontier_phi_77_pred_4 = _2997;
                        frontier_phi_77_pred_5 = _2996;
                    }
                    else
                    {
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3218 = _2996;
                        float _3219 = _2997;
                        float _3220 = _2998;
                        float _3221 = _2999;
                        float _3222 = _3000;
                        float _3223 = _3001;
                        uint _3224 = _3011;
                        uint _3225;
                        vec4 _3250;
                        float _3251;
                        vec4 _3266;
                        vec3 _3278;
                        vec4 _3293;
                        vec4 _3309;
                        float _3355;
                        bool _3356;
                        for (;;)
                        {
                            uint _3235 = ((_3002 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3224));
                            _3225 = (_3224 + 4294967295u) & _3224;
                            uint _3237 = _3235 * 40u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            _3251 = _3250.w;
                            uint _3253 = (_3235 * 40u) + 4u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3268 = (_3235 * 40u) + 8u;
                            _3278 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x));
                            uint _3280 = (_3235 * 40u) + 16u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3296 = (_3235 * 40u) + 20u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3311 = (_3235 * 40u) + 24u;
                            vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3330 = (_3235 * 40u) + 28u;
                            vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            _3355 = fma(_2570, _3343.z, fma(_2569, _3343.y, _3343.x * _2568)) + _3343.w;
                            _3356 = !((fma(_2570, _3324.z, fma(_2569, _3324.y, _3324.x * _2568)) + _3324.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3356)
                            {
                                float _3383 = _3250.x - _2568;
                                float _3384 = _3250.y - _2569;
                                float _3385 = _3250.z - _2570;
                                float _3386 = dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385));
                                float _3389 = inversesqrt(_3386);
                                float _3390 = _3389 * _3383;
                                float _3391 = _3389 * _3384;
                                float _3392 = _3389 * _3385;
                                float _3396 = 1.0 - (_3386 / (_3251 * _3251));
                                float _4523 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3397 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3401 = sqrt(_3386) * _3266.w;
                                float _3403 = 1.39999997615814208984375 / (_3401 + 1.39999997615814208984375);
                                float _3404 = _3403 * _3403;
                                float _3407 = ((1.0 - _3404) * dot(vec3(_3390, _3391, _3392), vec3(_803, _806, _809))) + _3404;
                                float _3410 = _3401 * _3401;
                                float _3414 = (fma(_2570, _3293.z, fma(_2569, _3293.y, _3293.x * _2568)) + _3293.w) / _3355;
                                float _3415 = (fma(_2570, _3309.z, fma(_2569, _3309.y, _3309.x * _2568)) + _3309.w) / _3355;
                                float _3419 = 1.0 - dot(vec2(_3414, _3415), vec2(_3414, _3415));
                                float _4539 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3420 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3421 = _3420 * (((isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0))) * _3397) / ((_3410 * 0.699999988079071044921875) + 1.0));
                                float _3433 = exp2(log2(1.0 / ((_3410 * 3.5) + 5.0)) * 0.25);
                                float _3434 = 1.0 - _878;
                                float _3441 = sqrt(1.0 - ((1.0 - (_3434 * _3434)) * (1.0 - (_3433 * _3433))));
                                float _3442 = _3441 * _3441;
                                float _3443 = _3442 * _3442;
                                float _3444 = _3390 - _2862;
                                float _3445 = _3391 - _2863;
                                float _3446 = _3392 - _2864;
                                float _3450 = inversesqrt(dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446)));
                                float _3454 = dot(vec3(_803, _806, _809), vec3((-0.0) - _2862, (-0.0) - _2863, (-0.0) - _2864));
                                float _4550 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3457 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3458 = dot(vec3(_803, _806, _809), vec3(_3450 * _3444, _3450 * _3445, _3450 * _3446));
                                float _4561 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3461 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3465 = ((_3461 * _3461) * (_3443 + (-1.0))) + 1.0;
                                float _3466 = _3403 * _3442;
                                float _3467 = _3466 * _3466;
                                float _3473 = ((1.0 - _3467) * dot(vec3(_803, _806, _809), vec3(_3390, _3391, _3392))) + _3467;
                                float _4572 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3475 = 1.0 - _3442;
                                float _3485 = (0.5 / (((_3474 * ((_3457 * _3475) + _3442)) + 9.9999999392252902907785028219223e-09) + (((_3474 * _3475) + _3442) * _3457))) * _3474;
                                float _4583 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3495 = (_3420 * _3397) * (((_3443 * 3.1415927410125732421875) * (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) / ((_3465 * _3465) * ((_3410 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3421 * _3266.y;
                                frontier_phi_83_pred_1 = _3421 * _3266.x;
                                frontier_phi_83_pred_2 = _3495 * _3278.z;
                                frontier_phi_83_pred_3 = _3495 * _3278.y;
                                frontier_phi_83_pred_4 = _3495 * _3278.x;
                                frontier_phi_83_pred_5 = _3421 * _3266.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3503 = frontier_phi_83_pred;
                            _3502 = frontier_phi_83_pred_1;
                            _3501 = frontier_phi_83_pred_2;
                            _3500 = frontier_phi_83_pred_3;
                            _3499 = frontier_phi_83_pred_4;
                            _3504 = frontier_phi_83_pred_5;
                            _3208 = _3502 + _3221;
                            _3209 = _3503 + _3222;
                            _3210 = _3504 + _3223;
                            _3205 = _3499 + _3218;
                            _3206 = _3500 + _3219;
                            _3207 = _3501 + _3220;
                            if (_3225 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3225;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3210;
                        frontier_phi_77_pred_1 = _3209;
                        frontier_phi_77_pred_2 = _3208;
                        frontier_phi_77_pred_3 = _3207;
                        frontier_phi_77_pred_4 = _3206;
                        frontier_phi_77_pred_5 = _3205;
                    }
                    _2847 = frontier_phi_77_pred;
                    _2845 = frontier_phi_77_pred_1;
                    _2843 = frontier_phi_77_pred_2;
                    _2841 = frontier_phi_77_pred_3;
                    _2839 = frontier_phi_77_pred_4;
                    _2837 = frontier_phi_77_pred_5;
                    uint _3003 = _3002 + 1u;
                    if (_3003 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2996 = _2837;
                        _2997 = _2839;
                        _2998 = _2841;
                        _2999 = _2843;
                        _3000 = _2845;
                        _3001 = _2847;
                        _3002 = _3003;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2841;
                frontier_phi_58_59_ladder_1 = _2847;
                frontier_phi_58_59_ladder_2 = _2845;
                frontier_phi_58_59_ladder_3 = _2843;
                frontier_phi_58_59_ladder_4 = _2839;
                frontier_phi_58_59_ladder_5 = _2837;
            }
            else
            {
                frontier_phi_58_59_ladder = _2719;
                frontier_phi_58_59_ladder_1 = _2725;
                frontier_phi_58_59_ladder_2 = _2723;
                frontier_phi_58_59_ladder_3 = _2721;
                frontier_phi_58_59_ladder_4 = _2717;
                frontier_phi_58_59_ladder_5 = _2715;
            }
            _2836 = frontier_phi_58_59_ladder_5;
            _2838 = frontier_phi_58_59_ladder_4;
            _2840 = frontier_phi_58_59_ladder;
            _2842 = frontier_phi_58_59_ladder_3;
            _2844 = frontier_phi_58_59_ladder_2;
            _2846 = frontier_phi_58_59_ladder_1;
        }
        float _2851 = isnan(1.0) ? _862 : (isnan(_862) ? 1.0 : min(_862, 1.0));
        _2627 = (_2851 * _2842) + _2063;
        _2629 = (_2851 * _2844) + _2065;
        _2631 = (_2851 * _2846) + _2067;
        _2633 = ((_2836 * _846) * _2851) + _2408;
        _2635 = ((_2838 * _848) * _2851) + _2410;
        _2637 = ((_2840 * _849) * _2851) + _2412;
    }
    else
    {
        _2627 = _2063;
        _2629 = _2065;
        _2631 = _2067;
        _2633 = _2408;
        _2635 = _2410;
        _2637 = _2412;
    }
    float _4599 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4610 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4621 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _2654 = ((isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2627 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _862))) + ((_2633 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    float _2655 = ((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2629 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _862))) + ((_2635 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    float _2656 = ((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2631 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _862))) + ((_2637 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    uint _2657 = _242 + 6u;
    float _2665 = _784 / cbSceneParam._m0[86u].x;
    float _2666 = _785 / cbSceneParam._m0[86u].y;
    vec4 _2680 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2665, _2666, (log2((isnan(cbSceneParam._m0[77u].w) ? _706 : (isnan(_706) ? cbSceneParam._m0[77u].w : min(_706, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2682 = _2680.x;
    float _2683 = _2680.y;
    float _2684 = _2680.z;
    float _2685 = _2680.w;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    if (_706 > cbSceneParam._m0[78u].w)
    {
        float _2740 = isnan(_706) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _706 : min(cbSceneParam._m0[80u].w, _706));
        float _2741 = _2740 / _706;
        float _2752 = _2741 * _757;
        float _2753 = _758 * _2741;
        float _2754 = (-0.0) - _2753;
        float _2756 = _2741 * _759;
        float _2758 = (cbSceneParam._m0[77u].w * _2754) / _2740;
        float _2759 = _2758 + cbSceneParam._m0[79u].w;
        float _2760 = cbSceneParam._m0[79u].w - _2753;
        float _2766 = sqrt(((_2752 * _2752) + (_2753 * _2753)) + (_2756 * _2756));
        float _2769 = (1.0 - (cbSceneParam._m0[77u].w / _2740)) * _2766;
        float _2774 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2776 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2953;
        if (abs((_2754 - _2758) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2953 = ((((_2759 > 0.0) ? exp2(_2774 * _2759) : (2.0 - exp2(_2776 * _2759))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2769;
        }
        else
        {
            float _2897 = 1.0 / cbSceneParam._m0[80u].x;
            float _2898 = isnan(_2760) ? _2759 : (isnan(_2759) ? _2760 : max(_2759, _2760));
            float _2899 = isnan(_2760) ? _2759 : (isnan(_2759) ? _2760 : min(_2759, _2760));
            float _2908 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : min(_2898, 0.0));
            float _2909 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : min(_2899, 0.0));
            _2953 = ((abs(_2766 / _2754) * cbSceneParam._m0[80u].y) * ((((_2908 - _2909) * 2.0) - ((exp2(_2774 * (isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0)))) - exp2(_2774 * (isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0))))) * _2897)) - ((exp2(_2776 * _2908) - exp2(_2776 * _2909)) * _2897))) + (_2769 * cbSceneParam._m0[80u].z);
        }
        vec4 _2955 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2665, _2666, 1.0), 0.0);
        float _2964 = exp2((_2953 * (-1.44269502162933349609375)) * (1.0 - _2955.w));
        float _2965 = log2(_2964);
        float _2981 = log2(_2685);
        _2778 = (exp2(_2981 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2965 * cbSceneParam._m0[78u].x)) * _2955.x) / cbSceneParam._m0[78u].x)) + _2682;
        _2780 = (exp2(_2981 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2965 * cbSceneParam._m0[78u].y)) * _2955.y) / cbSceneParam._m0[78u].y)) + _2683;
        _2782 = (exp2(_2981 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2965 * cbSceneParam._m0[78u].z)) * _2955.z) / cbSceneParam._m0[78u].z)) + _2684;
        _2784 = _2964 * _2685;
    }
    else
    {
        _2778 = _2682;
        _2780 = _2683;
        _2782 = _2684;
        _2784 = _2685;
    }
    bool _2991;
    vec4 _2794;
    vec4 _2816;
    float _2818;
    float _2822;
    float _2823;
    float _2824;
    float _2825;
    bool _2835;
    for (;;)
    {
        _2794 = cbMatDynParam._m0[0u];
        float _2796 = roundEven(_2794.y);
        bool _2797 = _2796 == 3.0;
        float _2798 = log2(_2784);
        float _2805 = exp2(_2798 * cbSceneParam._m0[78u].x) * _2654;
        float _2806 = exp2(_2798 * cbSceneParam._m0[78u].y) * _2655;
        float _2807 = exp2(_2798 * cbSceneParam._m0[78u].z) * _2656;
        float _2814 = _773 + (-0.5);
        _2816 = cbMtdParam._m0[1u];
        _2818 = _2816.y * _2814;
        float _2821 = (_2796 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2822 = _2821 * (_2797 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2778)));
        _2823 = _2821 * (_2797 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2780)));
        _2824 = _2821 * (_2797 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2782)));
        _2825 = _2814 * 0.999000012874603271484375;
        _2835 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2835)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _2825) < 0.5)
            {
                _2991 = true;
                break;
            }
        }
        uint _2932 = _822 + uint(_2794.w);
        if ((cbInstanceData._m0[_2932].w < 1.0) && ((cbInstanceData._m0[_2932].w + _2825) < 0.5))
        {
            _2991 = true;
            break;
        }
        if ((_2818 + 1.0) < _2816.x)
        {
            _2991 = true;
            break;
        }
        _2991 = false;
        break;
    }
    float _3196;
    if (_2991)
    {
        discard_state = true;
        _3196 = 0.0;
    }
    else
    {
        _3196 = cbInstanceData._m0[_2657].w;
    }
    SV_Target.x = _2822;
    SV_Target.y = _2823;
    SV_Target.z = _2824;
    SV_Target.w = _3196;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2657].w;
    discard_exit();
}


