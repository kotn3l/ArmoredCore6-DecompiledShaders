#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1509;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _258 + 1u;
    uint _268 = _258 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _368.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[23u].w) + _421) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4115 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _446 = (_439 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327;
    float _447 = (_439 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328;
    float _448 = (_439 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _368.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[23u].w) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4126 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _519 = (_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446;
    float _520 = (_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447;
    float _521 = (_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448;
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _278) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _279) + cbTextureTilingScale._m0[24u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _559 = _557.x;
    float _569 = dot(vec4(_559, _557.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _581 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _368.z) * 2.0) - ((((_559 - _569) * cbMtdParam._m0[23u].w) + _569) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4137 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _595 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_582 * ((_540.x * cbMtdParam._m0[14u].x) - _519)) + _519);
    float _598 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_582 * ((_540.y * cbMtdParam._m0[14u].y) - _520)) + _520);
    float _601 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_582 * ((_540.z * cbMtdParam._m0[14u].z) - _521)) + _521);
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _658 = _656.x;
    float _659 = _656.y;
    float _660 = _656.z;
    float _667 = ((_639.x - _658) * _439) + _658;
    float _668 = ((_639.y - _659) * _439) + _659;
    float _669 = ((_639.z - _660) * _439) + _660;
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _692 = ((_681.x - _667) * _512) + _667;
    float _693 = ((_681.y - _668) * _512) + _668;
    float _694 = ((_681.z - _669) * _512) + _669;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _278) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _279) + cbTextureTilingScale._m0[23u].w));
    float _719 = ((_706.z - _694) * _582) + _694;
    float _722 = ((((_706.x - _692) * _582) + _692) * 2.0) + (-1.0);
    float _724 = ((((_706.y - _693) * _582) + _693) * 2.0) + (-1.0);
    float _725 = dot(vec2(_722, _724), vec2(_722, _724));
    float _4148 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _730 = sqrt(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))));
    vec4 _744 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _756 = (((_744.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _722;
    float _757 = (((_744.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _724;
    float _760 = fma(_730, _246, fma(_757, _253, _756 * _239));
    float _763 = fma(_730, _247, fma(_757, _254, _756 * _240));
    float _766 = fma(_730, _248, fma(_757, _255, _756 * _241));
    float _770 = inversesqrt(dot(vec3(_760, _763, _766), vec3(_760, _763, _766)));
    vec4 _797 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _799 = _797.x;
    float _800 = 1.0 - _799;
    float _808 = (cbMtdParam._m0[19u].x + dot(vec4(_770 * _760, _770 * _763, _770 * _766, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_799 - _800) * cbMtdParam._m0[24u].z) + _800) * cbMtdParam._m0[21u].z);
    float _4159 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _809 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _816 = (_809 * ((_619.x * cbMtdParam._m0[18u].x) - _595)) + _595;
    float _817 = (_809 * ((_619.y * cbMtdParam._m0[18u].y) - _598)) + _598;
    float _818 = (_809 * ((_619.z * cbMtdParam._m0[18u].z) - _601)) + _601;
    vec4 _844 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _846 = _844.x;
    float _863 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _846) * _439) + _846;
    float _880 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _863) * _512) + _863;
    float _898 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _278) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _279) + cbTextureTilingScale._m0[10u].w)).x - _880) * _582) + _880;
    float _902 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _898) * cbMtdParam._m0[19u].z) + _898;
    float _904 = _902 - (_902 * _809);
    float _908 = (cbMtdParam._m0[19u].w * (_744.z - _719)) + _719;
    vec4 _921 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _928 = (_921.x * 2.0) + (-1.0);
    float _929 = (_921.y * 2.0) + (-1.0);
    float _930 = dot(vec2(_928, _929), vec2(_928, _929));
    float _4170 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _938 = ((_921.z - _908) * _809) + _908;
    float _948 = ((sqrt(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) - _730) * _809) + _730;
    float _951 = (((_928 - _756) * _809) + _756) + (cbMtdParam._m0[21u].x * _756);
    float _952 = (((_929 - _757) * _809) + _757) + (cbMtdParam._m0[21u].x * _757);
    float _956 = cbMtdParam._m0[22u].x + _744.w;
    float _959 = fma(_948, _246, fma(_952, _253, _951 * _239));
    float _962 = fma(_948, _247, fma(_952, _254, _951 * _240));
    float _965 = fma(_948, _248, fma(_952, _255, _951 * _241));
    float _969 = inversesqrt(dot(vec3(_959, _962, _965), vec3(_959, _962, _965)));
    float _970 = _969 * _959;
    float _971 = _969 * _962;
    float _972 = _969 * _965;
    float _4181 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _973 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _4203 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4214 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4225 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4236 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _978 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _992 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1042 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1032);
    float _1043 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1032);
    float _1044 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1032);
    float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
    float _1049 = _1042 * _1048;
    float _1050 = _1043 * _1048;
    float _1051 = _1044 * _1048;
    float _1057 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1058 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1076 = fma(_972, cbSceneParam._m0[5u].z, fma(_971, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _970));
    float _1079 = fma(_972, cbSceneParam._m0[6u].z, fma(_971, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _970));
    float _1082 = fma(_972, cbSceneParam._m0[7u].z, fma(_971, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _970));
    uint _1096 = (_258 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1102 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * cbInstanceData._m0[_1096].x;
    float _1103 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * cbInstanceData._m0[_1096].y;
    float _1104 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * cbInstanceData._m0[_1096].z;
    float _4247 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1105 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1107 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _1108 = 1.0 - _978;
    float _1109 = _1105 * _1108;
    float _1110 = _1106 * _1108;
    float _1111 = _1107 * _1108;
    float _1116 = (_1105 + (-0.039999999105930328369140625)) * _978;
    float _1117 = (_1106 + (-0.039999999105930328369140625)) * _978;
    float _1118 = (_1107 + (-0.039999999105930328369140625)) * _978;
    float _1119 = _1116 + 0.039999999105930328369140625;
    float _1121 = _1117 + 0.039999999105930328369140625;
    float _1122 = _1118 + 0.039999999105930328369140625;
    vec4 _1131 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1057, cbSceneParam._m0[86u].y * _1058));
    float _1135 = ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * TEXCOORD_5.w) * _1131.x;
    float _1136 = dot(vec3(_970, _971, _972), vec3(_1049, _1050, _1051));
    float _1139 = _1136 * 2.0;
    float _1143 = (_1139 * _970) - _1049;
    float _1144 = (_1139 * _971) - _1050;
    float _1145 = (_1139 * _972) - _1051;
    float _1149 = abs(dot(vec3(_1049, _1050, _1051), vec3(_970, _971, _972)));
    float _4280 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _1151 = sqrt(_973);
    float _1164 = exp2((_1151 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1151 * 3.0));
    float _1170 = (1.0 - _1164) * ((_1151 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1171 = _1164 * _1151;
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1203 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1207 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1508;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1233 = fma(_1207, cbModelParam._m0[26u].z, fma(_1203, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1199));
        float _1237 = fma(_1207, cbModelParam._m0[27u].z, fma(_1203, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1199));
        float _1241 = fma(_1207, cbModelParam._m0[28u].z, fma(_1203, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1199));
        float _1266 = _1199 + _970;
        float _1267 = _1203 + _971;
        float _1268 = _1207 + _972;
        float _1278 = fma(_1268, cbModelParam._m0[26u].z, fma(_1267, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1266)) - _1233;
        float _1279 = fma(_1268, cbModelParam._m0[27u].z, fma(_1267, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1266)) - _1237;
        float _1280 = fma(_1268, cbModelParam._m0[28u].z, fma(_1267, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1266)) - _1241;
        float _1284 = inversesqrt(dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280)));
        float _1297 = ((_1284 * _1278) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1233 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1284 * _1279) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1237 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1284 * _1280) / cbModelParam._m0[34u].z) + ((((((_1241 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        float _1336 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1302.x + (-0.5));
        float _1338 = _1336 * (_1302.y + (-0.5));
        float _1339 = _1336 * (_1302.z + (-0.5));
        float _1346 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1309.x + (-0.5));
        float _1348 = _1346 * (_1309.y + (-0.5));
        float _1349 = _1346 * (_1309.z + (-0.5));
        float _1356 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1316.x + (-0.5));
        float _1358 = _1356 * (_1316.y + (-0.5));
        float _1359 = _1356 * (_1316.z + (-0.5));
        float _1366 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1323.x + (-0.5));
        float _1368 = _1366 * (_1323.y + (-0.5));
        float _1369 = _1366 * (_1323.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1390 = (dot(vec3(_970, _971, _972), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1400 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4328 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1402 + 1.0))) + _1407) * _1370;
        float _1417 = _1338 * 0.5;
        float _1418 = _1348 * 0.5;
        float _1419 = _1358 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_970, _971, _972), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4361 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1444 + 1.0))) + _1449) * _1371;
        float _1459 = _1339 * 0.5;
        float _1460 = _1349 * 0.5;
        float _1461 = _1359 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_970, _971, _972), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4394 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1486 + 1.0))) + _1491) * _1372;
        _1508 = _1339;
        _1510 = _1338;
        _1511 = _1337;
        _1512 = _1349;
        _1513 = _1348;
        _1514 = _1347;
        _1515 = _1359;
        _1516 = _1358;
        _1517 = _1357;
        _1518 = _1372;
        _1519 = _1371;
        _1520 = _1370;
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
    }
    else
    {
        _1508 = _1509;
        _1510 = _1509;
        _1511 = _1509;
        _1512 = _1509;
        _1513 = _1509;
        _1514 = _1509;
        _1515 = _1509;
        _1516 = _1509;
        _1517 = _1509;
        _1518 = _1509;
        _1519 = _1509;
        _1520 = _1509;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1546 = fma(_1207, cbModelParam._m0[30u].z, fma(_1203, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199));
        float _1550 = fma(_1207, cbModelParam._m0[31u].z, fma(_1203, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199));
        float _1554 = fma(_1207, cbModelParam._m0[32u].z, fma(_1203, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199));
        float _1577 = _1199 + _970;
        float _1578 = _1203 + _971;
        float _1579 = _1207 + _972;
        float _1589 = fma(_1579, cbModelParam._m0[30u].z, fma(_1578, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1577)) - _1546;
        float _1590 = fma(_1579, cbModelParam._m0[31u].z, fma(_1578, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1577)) - _1550;
        float _1591 = fma(_1579, cbModelParam._m0[32u].z, fma(_1578, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1577)) - _1554;
        float _1595 = inversesqrt(dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591)));
        float _1608 = ((_1595 * _1589) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1546 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1609 = ((_1595 * _1590) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1550 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1610 = ((_1595 * _1591) / cbModelParam._m0[35u].z) + ((((((_1554 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1619 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1626 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1608, _1609, _1610), 0.0);
        float _1645 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1612.x + (-0.5));
        float _1647 = _1645 * (_1612.y + (-0.5));
        float _1648 = _1645 * (_1612.z + (-0.5));
        float _1655 = exp2((_1619.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1619.x + (-0.5));
        float _1657 = _1655 * (_1619.y + (-0.5));
        float _1658 = _1655 * (_1619.z + (-0.5));
        float _1665 = exp2((_1626.w + (-0.5)) * 20.0) * 2.0;
        float _1666 = _1665 * (_1626.x + (-0.5));
        float _1667 = _1665 * (_1626.y + (-0.5));
        float _1668 = _1665 * (_1626.z + (-0.5));
        float _1675 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1676 = _1675 * (_1633.x + (-0.5));
        float _1677 = _1675 * (_1633.y + (-0.5));
        float _1678 = _1675 * (_1633.z + (-0.5));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = _1646 * 0.5;
        float _1683 = _1656 * 0.5;
        float _1684 = _1666 * 0.5;
        float _1685 = dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684));
        float _1690 = (_1685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1685);
        float _1698 = (dot(vec3(_970, _971, _972), vec3(_1690 * _1682, _1690 * _1683, _1690 * _1684)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1709 = _1708 * 2.0;
        float _1713 = (1.0 - _1708) / (_1708 + 1.0);
        float _4457 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1723 = ((((1.0 - _1714) * (_1709 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1709 + 1.0))) + _1714) * _1679;
        float _1724 = _1647 * 0.5;
        float _1725 = _1657 * 0.5;
        float _1726 = _1667 * 0.5;
        float _1727 = dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726));
        float _1732 = (_1727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1727);
        float _1740 = (dot(vec3(_970, _971, _972), vec3(_1732 * _1724, _1732 * _1725, _1732 * _1726)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1749 = sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1751 = _1750 * 2.0;
        float _1755 = (1.0 - _1750) / (_1750 + 1.0);
        float _4490 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1765 = ((((1.0 - _1756) * (_1751 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1751 + 1.0))) + _1756) * _1680;
        float _1766 = _1648 * 0.5;
        float _1767 = _1658 * 0.5;
        float _1768 = _1668 * 0.5;
        float _1769 = dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768));
        float _1774 = (_1769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1769);
        float _1782 = (dot(vec3(_970, _971, _972), vec3(_1774 * _1766, _1774 * _1767, _1774 * _1768)) + 1.0) * 0.5;
        float _4501 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1791 = sqrt(((_1767 * _1767) + (_1766 * _1766)) + (_1768 * _1768)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4512 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1793 = _1792 * 2.0;
        float _1797 = (1.0 - _1792) / (_1792 + 1.0);
        float _4523 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1807 = ((((1.0 - _1798) * (_1793 + 2.0)) * exp2(log2(isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_1793 + 1.0))) + _1798) * _1681;
        _1815 = _1648;
        _1816 = _1647;
        _1817 = _1646;
        _1818 = _1658;
        _1819 = _1657;
        _1820 = _1656;
        _1821 = _1668;
        _1822 = _1667;
        _1823 = _1666;
        _1824 = _1681;
        _1825 = _1680;
        _1826 = _1679;
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)));
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)));
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)));
    }
    else
    {
        _1815 = _1509;
        _1816 = _1509;
        _1817 = _1509;
        _1818 = _1509;
        _1819 = _1509;
        _1820 = _1509;
        _1821 = _1509;
        _1822 = _1509;
        _1823 = _1509;
        _1824 = _1509;
        _1825 = _1509;
        _1826 = _1509;
        _1827 = 0.0;
        _1828 = 0.0;
        _1829 = 0.0;
    }
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1521)) + _1521;
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1522)) + _1522;
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1523)) + _1523;
    float _1862 = fma(_1841, cbSceneParam._m0[89u].z, fma(_1840, cbSceneParam._m0[89u].y, _1839 * cbSceneParam._m0[89u].x));
    float _1865 = fma(_1841, cbSceneParam._m0[90u].z, fma(_1840, cbSceneParam._m0[90u].y, _1839 * cbSceneParam._m0[90u].x));
    float _1868 = fma(_1841, cbSceneParam._m0[91u].z, fma(_1840, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1839));
    float _1883 = _1143 * 0.5;
    float _1884 = _1144 * 0.5;
    float _1885 = _1145 * 0.5;
    float _1886 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1889 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1892 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1926;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1899 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1508, _1512, _1515, _1518));
        float _1903 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1907 = dot(vec4(_1883, _1884, _1885, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1914 = dot(vec4(cbModelParam._m0[39u]), vec4(_1883, _1884, _1885, 1.0));
        _1926 = dot(vec3(isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1914) ? 0.0 : (isnan(0.0) ? _1914 : max(0.0, _1914))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1926 = 1.0;
    }
    float _1937;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1928 = dot(vec4(cbModelParam._m0[40u]), vec4(_1883, _1884, _1885, 1.0));
        _1937 = dot(vec3(isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1928) ? 0.0 : (isnan(0.0) ? _1928 : max(0.0, _1928))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1937 = 1.0;
    }
    float _1941 = (_1937 * cbModelParam._m0[1u].x) + (_1926 * (1.0 - cbModelParam._m0[1u].x));
    float _1951 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _973);
    float _1952 = isnan(_1951) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1951 : min(cbModelParam._m0[25u].z, _1951));
    float _2032;
    float _2034;
    float _2036;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1999 = fma(_1207, cbModelParam._m0[13u].z, fma(_1203, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1199)) + cbModelParam._m0[13u].w;
        float _2003 = fma(_1207, cbModelParam._m0[14u].z, fma(_1203, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1199)) + cbModelParam._m0[14u].w;
        float _2007 = fma(_1207, cbModelParam._m0[15u].z, fma(_1203, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1199)) + cbModelParam._m0[15u].w;
        float _2010 = fma(_1145, cbModelParam._m0[13u].z, fma(_1144, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1143));
        float _2013 = fma(_1145, cbModelParam._m0[14u].z, fma(_1144, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1143));
        float _2016 = fma(_1145, cbModelParam._m0[15u].z, fma(_1144, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1143));
        float _2044;
        if (_2010 > 0.0)
        {
            _2044 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2044 = frontier_phi_14_12_ladder;
        }
        float _2215;
        if (_2013 > 0.0)
        {
            _2215 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2215 = frontier_phi_23_19_ladder;
        }
        float _2510;
        if (_2016 > 0.0)
        {
            _2510 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2510 = frontier_phi_35_30_ladder;
        }
        float _2512 = isnan(_2215) ? _2044 : (isnan(_2044) ? _2215 : min(_2044, _2215));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _2010) + _1999;
        float _2518 = (_2513 * _2013) + _2003;
        float _2519 = (_2513 * _2016) + _2007;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2522 = (-1.0) - _2520;
        float _2524 = _2520 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2519 > _2524) || ((_2519 < _2522) || ((_2518 > _2524) || ((_2518 < _2522) || ((_2517 < _2522) || (_2517 > _2524))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2664 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2519, cbModelParam._m0[9u].z, fma(_2518, cbModelParam._m0[9u].y, _2517 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2519, cbModelParam._m0[10u].z, fma(_2518, cbModelParam._m0[10u].y, _2517 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2519, cbModelParam._m0[11u].z, fma(_2518, cbModelParam._m0[11u].y, _2517 * cbModelParam._m0[11u].x))), _1952);
            frontier_phi_13_35_ladder = _2664.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2664.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2664.x * cbModelParam._m0[1u].y;
        }
        _2032 = frontier_phi_13_35_ladder_2;
        _2034 = frontier_phi_13_35_ladder_1;
        _2036 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1143, _1144, _1145), _1952);
        _2032 = _2020.x * cbModelParam._m0[1u].y;
        _2034 = _2020.y * cbModelParam._m0[1u].y;
        _2036 = _2020.z * cbModelParam._m0[1u].y;
    }
    float _2040 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _973);
    float _2041 = isnan(_2040) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2040 : min(cbModelParam._m0[25u].w, _2040));
    float _2130;
    float _2132;
    float _2134;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2094 = fma(_1207, cbModelParam._m0[21u].z, fma(_1203, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1199)) + cbModelParam._m0[21u].w;
        float _2098 = fma(_1207, cbModelParam._m0[22u].z, fma(_1203, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1199)) + cbModelParam._m0[22u].w;
        float _2102 = fma(_1207, cbModelParam._m0[23u].z, fma(_1203, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1199)) + cbModelParam._m0[23u].w;
        float _2105 = fma(_1145, cbModelParam._m0[21u].z, fma(_1144, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1143));
        float _2108 = fma(_1145, cbModelParam._m0[22u].z, fma(_1144, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1143));
        float _2111 = fma(_1145, cbModelParam._m0[23u].z, fma(_1144, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1143));
        float _2220;
        if (_2105 > 0.0)
        {
            _2220 = abs((1.0 - _2094) / _2105);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2094 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2220 = frontier_phi_25_21_ladder;
        }
        float _2537;
        if (_2108 > 0.0)
        {
            _2537 = abs((1.0 - _2098) / _2108);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2098 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2537 = frontier_phi_37_32_ladder;
        }
        float _2875;
        if (_2111 > 0.0)
        {
            _2875 = abs((1.0 - _2102) / _2111);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2102 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2875 = frontier_phi_47_44_ladder;
        }
        float _2877 = isnan(_2537) ? _2220 : (isnan(_2220) ? _2537 : min(_2220, _2537));
        float _2878 = isnan(_2875) ? _2877 : (isnan(_2877) ? _2875 : min(_2877, _2875));
        float _2882 = (_2878 * _2105) + _2094;
        float _2883 = (_2878 * _2108) + _2098;
        float _2884 = (_2878 * _2111) + _2102;
        float _2885 = _2878 * 9.9999997473787516355514526367188e-05;
        float _2886 = (-1.0) - _2885;
        float _2888 = _2885 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2884 > _2888) || ((_2884 < _2886) || ((_2883 > _2888) || ((_2883 < _2886) || ((_2882 < _2886) || (_2882 > _2888))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3006 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2884, cbModelParam._m0[17u].z, fma(_2883, cbModelParam._m0[17u].y, _2882 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2884, cbModelParam._m0[18u].z, fma(_2883, cbModelParam._m0[18u].y, _2882 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2884, cbModelParam._m0[19u].z, fma(_2883, cbModelParam._m0[19u].y, _2882 * cbModelParam._m0[19u].x))), _2041);
            frontier_phi_22_47_ladder = _3006.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3006.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3006.x * cbModelParam._m0[1u].z;
        }
        _2130 = frontier_phi_22_47_ladder_2;
        _2132 = frontier_phi_22_47_ladder_1;
        _2134 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2114 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1143, _1144, _1145), _2041);
        _2130 = _2114.x * cbModelParam._m0[1u].z;
        _2132 = _2114.y * cbModelParam._m0[1u].z;
        _2134 = _2114.z * cbModelParam._m0[1u].z;
    }
    float _2147 = (((_1170 * _1119) + _1171) * _1135) * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2149 = (((_1170 * _1121) + _1171) * _1135) * ((cbModelParam._m0[1u].w * (_2132 - _2034)) + _2034);
    float _2151 = (((_1170 * _1122) + _1171) * _1135) * ((cbModelParam._m0[1u].w * (_2134 - _2036)) + _2036);
    float _2154 = fma(_2151, cbSceneParam._m0[89u].z, fma(_2149, cbSceneParam._m0[89u].y, _2147 * cbSceneParam._m0[89u].x));
    float _2157 = fma(_2151, cbSceneParam._m0[90u].z, fma(_2149, cbSceneParam._m0[90u].y, _2147 * cbSceneParam._m0[90u].x));
    float _2160 = fma(_2151, cbSceneParam._m0[91u].z, fma(_2149, cbSceneParam._m0[91u].y, _2147 * cbSceneParam._m0[91u].x));
    float _2194 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2198 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2202 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2206 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2207 = _2194 / _2206;
    float _2208 = _2198 / _2206;
    float _2209 = _2202 / _2206;
    float _2356;
    float _2357;
    float _2358;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2236 = ((uint(_2209 > cbSceneParam._m0[59u].y) + uint(_2209 > cbSceneParam._m0[59u].x)) + uint(_2209 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2237 = _2236 + 43u;
        uint _2245 = _2236 + 44u;
        uint _2253 = _2236 + 45u;
        uint _2261 = _2236 + 46u;
        float _2272 = fma(_2206, cbSceneParam._m0[_2237].w, fma(_2202, cbSceneParam._m0[_2237].z, fma(_2198, cbSceneParam._m0[_2237].y, _2194 * cbSceneParam._m0[_2237].x)));
        float _2276 = fma(_2206, cbSceneParam._m0[_2245].w, fma(_2202, cbSceneParam._m0[_2245].z, fma(_2198, cbSceneParam._m0[_2245].y, _2194 * cbSceneParam._m0[_2245].x)));
        float _2284 = fma(_2206, cbSceneParam._m0[_2261].w, fma(_2202, cbSceneParam._m0[_2261].z, fma(_2198, cbSceneParam._m0[_2261].y, _2194 * cbSceneParam._m0[_2261].x)));
        float _2289 = cbSceneParam._m0[33u].z * _2284;
        float _2291 = cbSceneParam._m0[33u].w * _2284;
        float _2294 = fma(_2206, cbSceneParam._m0[_2253].w, fma(_2202, cbSceneParam._m0[_2253].z, fma(_2198, cbSceneParam._m0[_2253].y, _2194 * cbSceneParam._m0[_2253].x))) / _2284;
        float _2342 = (cbSceneParam._m0[33u].x - sqrt(((_2208 * _2208) + (_2207 * _2207)) + (_2209 * _2209))) * cbSceneParam._m0[33u].y;
        float _4649 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2349 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2289 + _2272) / _2284, (_2291 + _2276) / _2284), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2291 + _2272) / _2284, (_2276 - _2289) / _2284), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2272 - _2289) / _2284, (_2276 - _2291) / _2284), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2272 - _2291) / _2284, (_2289 + _2276) / _2284), _2294), 0.0)).x), vec4(0.25)));
        _2356 = 1.0 - (_2349 * cbSceneParam._m0[34u].x);
        _2357 = 1.0 - (_2349 * cbSceneParam._m0[34u].y);
        _2358 = 1.0 - (_2349 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2356 = 1.0;
        _2357 = 1.0;
        _2358 = 1.0;
    }
    float _2422;
    float _2424;
    float _2426;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2410 = fma(_2206, cbSceneParam._m0[63u].w, fma(_2202, cbSceneParam._m0[63u].z, fma(_2198, cbSceneParam._m0[63u].y, _2194 * cbSceneParam._m0[63u].x)));
        float _2411 = fma(_2206, cbSceneParam._m0[60u].w, fma(_2202, cbSceneParam._m0[60u].z, fma(_2198, cbSceneParam._m0[60u].y, _2194 * cbSceneParam._m0[60u].x))) / _2410;
        float _2412 = fma(_2206, cbSceneParam._m0[61u].w, fma(_2202, cbSceneParam._m0[61u].z, fma(_2198, cbSceneParam._m0[61u].y, _2194 * cbSceneParam._m0[61u].x))) / _2410;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2411 >= cbSceneParam._m0[64u].x) && (_2412 >= cbSceneParam._m0[64u].y)) && (_2411 <= cbSceneParam._m0[64u].z)) && (_2412 <= cbSceneParam._m0[64u].w))
        {
            float _2550 = fma(_2206, cbSceneParam._m0[62u].w, fma(_2202, cbSceneParam._m0[62u].z, fma(_2198, cbSceneParam._m0[62u].y, _2194 * cbSceneParam._m0[62u].x))) / _2410;
            float _2554 = isnan(cbSceneParam._m0[41u].w) ? _2550 : (isnan(_2550) ? cbSceneParam._m0[41u].w : max(_2550, cbSceneParam._m0[41u].w));
            float _2597 = (cbSceneParam._m0[33u].x - sqrt(((_2208 * _2208) + (_2207 * _2207)) + (_2209 * _2209))) * cbSceneParam._m0[33u].y;
            float _4665 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
            float _2604 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2411, cbSceneParam._m0[33u].w + _2412), _2554), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2411, _2412 - cbSceneParam._m0[33u].z), _2554), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2411 - cbSceneParam._m0[33u].z, _2412 - cbSceneParam._m0[33u].w), _2554), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2411 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2412), _2554), 0.0)).x), vec4(0.25)));
            float _2608 = 1.0 - (_2604 * cbSceneParam._m0[34u].x);
            float _2609 = 1.0 - (_2604 * cbSceneParam._m0[34u].y);
            float _2610 = 1.0 - (_2604 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2610) ? _2358 : (isnan(_2358) ? _2610 : min(_2358, _2610));
            frontier_phi_34_33_ladder_1 = isnan(_2609) ? _2357 : (isnan(_2357) ? _2609 : min(_2357, _2609));
            frontier_phi_34_33_ladder_2 = isnan(_2608) ? _2356 : (isnan(_2356) ? _2608 : min(_2356, _2608));
        }
        else
        {
            frontier_phi_34_33_ladder = _2358;
            frontier_phi_34_33_ladder_1 = _2357;
            frontier_phi_34_33_ladder_2 = _2356;
        }
        _2422 = frontier_phi_34_33_ladder_2;
        _2424 = frontier_phi_34_33_ladder_1;
        _2426 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2422 = _2356;
        _2424 = _2357;
        _2426 = _2358;
    }
    uvec4 _2431 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2433 = _2431.x * 14u;
    uint _2434 = _2433 + 13u;
    float _2441 = _1135 + (-1.0);
    float _2446 = (cbLight._m0[_2434].x * _2441) + 1.0;
    float _2447 = (cbLight._m0[_2434].y * _2441) + 1.0;
    float _2448 = (cbLight._m0[_2434].z * _2441) + 1.0;
    float _2449 = (cbLight._m0[_2434].w * _2441) + 1.0;
    uint _2450 = _2433 + 5u;
    float _2456 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
    uint _2460 = _2433 + 4u;
    float _2469 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
    uint _2473 = _2433 | 1u;
    float _2484 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_970, _971, _972));
    float _2487 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_970, _971, _972));
    float _4701 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _4712 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2492 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * 0.3183098733425140380859375;
    float _2494 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * 0.3183098733425140380859375;
    float _2501 = ((cbLight._m0[_2450].x * _2456) * _2494) + (((cbLight._m0[_2460].x * _2422) * _2469) * _2492);
    float _2502 = ((_2456 * cbLight._m0[_2450].y) * _2494) + (((cbLight._m0[_2460].y * _2424) * _2469) * _2492);
    float _2503 = ((_2456 * cbLight._m0[_2450].z) * _2494) + (((cbLight._m0[_2460].z * _2426) * _2469) * _2492);
    uvec4 _2507 = floatBitsToUint(cbLight._m0[_2433 + 12u]);
    bool _2509 = _2507.x == 0u;
    float _2611;
    float _2613;
    float _2615;
    if (_2509)
    {
        _2611 = _2501;
        _2613 = _2502;
        _2615 = _2503;
    }
    else
    {
        uint _2619 = _2433 + 6u;
        float _2635 = (dot(vec3(cbLight._m0[_2433 + 2u].xyz), vec3(_970, _971, _972)) * 0.5) + 0.5;
        float _2636 = _2635 * _2635;
        float _4723 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2637 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2638 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
        _2611 = (((cbLight._m0[_2619].x * 0.3183098733425140380859375) * _2637) * _2638) + _2501;
        _2613 = (((cbLight._m0[_2619].y * 0.3183098733425140380859375) * _2637) * _2638) + _2502;
        _2615 = (((cbLight._m0[_2619].z * 0.3183098733425140380859375) * _2637) * _2638) + _2503;
    }
    bool _2618 = _2507.y == 0u;
    float _2673;
    float _2675;
    float _2677;
    if (_2618)
    {
        _2673 = _2611;
        _2675 = _2613;
        _2677 = _2615;
    }
    else
    {
        uint _2846 = _2433 + 7u;
        float _2862 = (dot(vec3(cbLight._m0[_2433 + 3u].xyz), vec3(_970, _971, _972)) * 0.5) + 0.5;
        float _2863 = _2862 * _2862;
        float _4739 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2864 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2865 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2673 = (((cbLight._m0[_2846].x * 0.3183098733425140380859375) * _2864) * _2865) + _2611;
        _2675 = (((cbLight._m0[_2846].y * 0.3183098733425140380859375) * _2864) * _2865) + _2613;
        _2677 = (((cbLight._m0[_2846].z * 0.3183098733425140380859375) * _2864) * _2865) + _2615;
    }
    uint _2680 = _2433 + 8u;
    float _2693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _973) * 0.949999988079071044921875);
    float _2694 = _2693 * _2693;
    float _2695 = cbLight._m0[_2433].x + _1049;
    float _2696 = cbLight._m0[_2433].y + _1050;
    float _2697 = cbLight._m0[_2433].z + _1051;
    float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
    float _2702 = _2701 * _2695;
    float _2703 = _2701 * _2696;
    float _2704 = _2701 * _2697;
    float _2705 = dot(vec3(_970, _971, _972), vec3(cbLight._m0[_2433].xyz));
    float _4755 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2708 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _4766 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _2709 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
    float _2710 = dot(vec3(_970, _971, _972), vec3(_2702, _2703, _2704));
    float _4777 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2713 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
    float _2714 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2702, _2703, _2704));
    float _4788 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2718 = _2694 * _2694;
    float _2722 = ((_2713 * _2713) * (_2718 + (-1.0))) + 1.0;
    float _2730 = exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0);
    float _2731 = 0.959999978542327880859375 - _1116;
    float _2733 = 0.959999978542327880859375 - _1117;
    float _2734 = 0.959999978542327880859375 - _1118;
    float _2741 = 1.0 - _2694;
    float _2752 = (0.5 / (((_2709 * ((_2708 * _2741) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2709 * _2741) + _2694) * _2708))) * _2708;
    float _4799 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
    float _2754 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2718 / ((_2722 * _2722) * 3.141590118408203125));
    uint _2768 = _2433 + 9u;
    float _2779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _973) * 0.949999988079071044921875);
    float _2780 = _2779 * _2779;
    float _2781 = cbLight._m0[_2473].x + _1049;
    float _2782 = cbLight._m0[_2473].y + _1050;
    float _2783 = cbLight._m0[_2473].z + _1051;
    float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
    float _2788 = _2787 * _2781;
    float _2789 = _2787 * _2782;
    float _2790 = _2787 * _2783;
    float _2791 = dot(vec3(_970, _971, _972), vec3(cbLight._m0[_2473].xyz));
    float _4810 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2794 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
    float _2795 = dot(vec3(_970, _971, _972), vec3(_2788, _2789, _2790));
    float _4821 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
    float _2798 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
    float _2799 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2788, _2789, _2790));
    float _4832 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
    float _2803 = _2780 * _2780;
    float _2807 = ((_2798 * _2798) * (_2803 + (-1.0))) + 1.0;
    float _2814 = exp2(log2(1.0 - (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) * 5.0);
    float _2821 = 1.0 - _2780;
    float _2831 = (0.5 / (((_2709 * ((_2794 * _2821) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2709 * _2821) + _2780) * _2794))) * _2794;
    float _4843 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
    float _2833 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2803 / ((_2807 * _2807) * 3.141590118408203125));
    float _2843 = (((((_2814 * _2731) + _1119) * cbLight._m0[_2768].x) * _2833) * _2456) + ((((cbLight._m0[_2680].x * _2422) * ((_2730 * _2731) + _1119)) * _2754) * _2469);
    float _2844 = (((((_2814 * _2733) + _1121) * cbLight._m0[_2768].y) * _2833) * _2456) + ((((cbLight._m0[_2680].y * _2424) * ((_2730 * _2733) + _1121)) * _2754) * _2469);
    float _2845 = (((((_2814 * _2734) + _1122) * cbLight._m0[_2768].z) * _2833) * _2456) + ((((cbLight._m0[_2680].z * _2426) * ((_2730 * _2734) + _1122)) * _2754) * _2469);
    float _2901;
    float _2903;
    float _2905;
    if (_2509)
    {
        _2901 = _2843;
        _2903 = _2844;
        _2905 = _2845;
    }
    else
    {
        uint _2907 = _2433 + 2u;
        uint _2911 = _2433 + 10u;
        float _2925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2907].w)) * _973) * 0.949999988079071044921875);
        float _2926 = _2925 * _2925;
        float _2927 = cbLight._m0[_2907].x + _1049;
        float _2928 = cbLight._m0[_2907].y + _1050;
        float _2929 = cbLight._m0[_2907].z + _1051;
        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
        float _2934 = _2933 * _2927;
        float _2935 = _2933 * _2928;
        float _2936 = _2933 * _2929;
        float _2937 = dot(vec3(_970, _971, _972), vec3(cbLight._m0[_2907].xyz));
        float _4854 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2940 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2941 = dot(vec3(_970, _971, _972), vec3(_2934, _2935, _2936));
        float _4865 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2944 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2945 = dot(vec3(cbLight._m0[_2907].xyz), vec3(_2934, _2935, _2936));
        float _4876 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2949 = _2926 * _2926;
        float _2953 = ((_2944 * _2944) * (_2949 + (-1.0))) + 1.0;
        float _2960 = exp2(log2(1.0 - (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) * 5.0);
        float _2967 = 1.0 - _2926;
        float _2977 = (0.5 / (((_2709 * ((_2940 * _2967) + _2926)) + 9.9999999392252902907785028219223e-09) + (((_2709 * _2967) + _2926) * _2940))) * _2940;
        float _4887 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
        float _2979 = (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2949 / ((_2953 * _2953) * 3.141590118408203125));
        float _2980 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
        _2901 = (((((_2960 * _2731) + _1119) * cbLight._m0[_2911].x) * _2979) * _2980) + _2843;
        _2903 = (((((_2960 * _2733) + _1121) * cbLight._m0[_2911].y) * _2979) * _2980) + _2844;
        _2905 = (((((_2960 * _2734) + _1122) * cbLight._m0[_2911].z) * _2979) * _2980) + _2845;
    }
    float _3011;
    float _3013;
    float _3015;
    if (_2618)
    {
        _3011 = _2901;
        _3013 = _2903;
        _3015 = _2905;
    }
    else
    {
        uint _3022 = _2433 + 3u;
        uint _3026 = _2433 + 11u;
        float _3040 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3022].w)) * _973) * 0.949999988079071044921875);
        float _3041 = _3040 * _3040;
        float _3042 = cbLight._m0[_3022].x + _1049;
        float _3043 = cbLight._m0[_3022].y + _1050;
        float _3044 = cbLight._m0[_3022].z + _1051;
        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
        float _3049 = _3048 * _3042;
        float _3050 = _3048 * _3043;
        float _3051 = _3048 * _3044;
        float _3052 = dot(vec3(_970, _971, _972), vec3(cbLight._m0[_3022].xyz));
        float _4903 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
        float _3055 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
        float _3056 = dot(vec3(_970, _971, _972), vec3(_3049, _3050, _3051));
        float _4914 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
        float _3059 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
        float _3060 = dot(vec3(cbLight._m0[_3022].xyz), vec3(_3049, _3050, _3051));
        float _4925 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
        float _3064 = _3041 * _3041;
        float _3068 = ((_3059 * _3059) * (_3064 + (-1.0))) + 1.0;
        float _3075 = exp2(log2(1.0 - (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) * 5.0);
        float _3082 = 1.0 - _3041;
        float _3092 = (0.5 / (((_2709 * ((_3055 * _3082) + _3041)) + 9.9999999392252902907785028219223e-09) + (((_2709 * _3082) + _3041) * _3055))) * _3055;
        float _4936 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
        float _3094 = (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_3064 / ((_3068 * _3068) * 3.141590118408203125));
        float _3095 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _3011 = (((((_3075 * _2731) + _1119) * cbLight._m0[_3026].x) * _3094) * _3095) + _2901;
        _3013 = (((((_3075 * _2733) + _1121) * cbLight._m0[_3026].y) * _3094) * _3095) + _2903;
        _3015 = (((((_3075 * _2734) + _1122) * cbLight._m0[_3026].z) * _3094) * _3095) + _2905;
    }
    float _3161;
    float _3163;
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    if (_2431.y == 0u)
    {
        uvec4 _3116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3117 = _3116.x;
        uint _3128 = uint((float(_3116.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1058) / _3117))) + floor(float(uint(cbSceneParam._m0[85u].x * _1057) / _3117)));
        float _3138 = (log2(_2209 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3139 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
        uint _3142 = uint(isnan(14.0) ? _3139 : (isnan(_3139) ? 14.0 : min(_3139, 14.0)));
        uvec4 _3147 = texelFetch(g_lightClusterGridBuffer, int(((_3142 << 2u) + (_3128 << 6u)) >> 2u));
        uint _3148 = _3147.x;
        uint _3149 = _3116.z;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        if (((((1u << ((_3149 >> 4u) & 15u)) + 4294967295u) & _3148) == 0u) || ((_3149 & 240u) == 0u))
        {
            _3228 = 0.0;
            _3230 = 0.0;
            _3232 = 0.0;
            _3234 = 0.0;
            _3236 = 0.0;
            _3238 = 0.0;
        }
        else
        {
            float _3229;
            float _3231;
            float _3233;
            float _3235;
            float _3237;
            float _3239;
            float _3373 = 0.0;
            float _3374 = 0.0;
            float _3375 = 0.0;
            float _3376 = 0.0;
            float _3377 = 0.0;
            float _3378 = 0.0;
            uint _3379 = 0u;
            uint _3388;
            bool _3389;
            for (;;)
            {
                _3388 = texelFetch(g_lightClassification, int((((_3142 << 5u) + (_3128 << 9u)) + (_3379 << 2u)) >> 2u)).x;
                _3389 = _3388 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3389)
                {
                    frontier_phi_66_pred = _3378;
                    frontier_phi_66_pred_1 = _3377;
                    frontier_phi_66_pred_2 = _3376;
                    frontier_phi_66_pred_3 = _3375;
                    frontier_phi_66_pred_4 = _3374;
                    frontier_phi_66_pred_5 = _3373;
                }
                else
                {
                    float _3497;
                    float _3498;
                    float _3499;
                    float _3500;
                    float _3501;
                    float _3502;
                    uint _3503;
                    _3497 = _3373;
                    _3498 = _3374;
                    _3499 = _3375;
                    _3500 = _3376;
                    _3501 = _3377;
                    _3502 = _3378;
                    _3503 = _3388;
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    for (;;)
                    {
                        uint _3507 = uint(findLSB(_3503)) + (_3379 << 5u);
                        uint _3504 = (_3503 + 4294967295u) & _3503;
                        uint _3509 = _3507 * 48u;
                        vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3509)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 3u)).x));
                        uint _3529 = (_3507 * 48u) + 4u;
                        vec4 _3542 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3529)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3529 + 3u)).x));
                        uint _3548 = (_3507 * 48u) + 8u;
                        vec3 _3559 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3548)).x, texelFetch(g_PointLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3548 + 2u)).x));
                        float _3563 = _3523.x - _2207;
                        float _3564 = _3523.y - _2208;
                        float _3565 = _3523.z - _2209;
                        float _3566 = dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565));
                        float _3569 = inversesqrt(_3566);
                        float _3570 = _3569 * _3563;
                        float _3571 = _3569 * _3564;
                        float _3572 = _3569 * _3565;
                        float _3573 = dot(vec3(_1076, _1079, _1082), vec3(_3570, _3571, _3572));
                        float _3578 = 1.0 - (_3566 * _3523.w);
                        float _4962 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3579 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3580 = sqrt(_3566) * _3542.w;
                        float _3583 = 1.39999997615814208984375 / (_3580 + 1.39999997615814208984375);
                        float _3584 = _3583 * _3583;
                        float _3587 = ((1.0 - _3584) * _3573) + _3584;
                        float _3590 = _3580 * _3580;
                        float _3594 = ((isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0))) * _3579) / ((_3590 * 0.699999988079071044921875) + 1.0);
                        float _3598 = (-0.0) - _2207;
                        float _3599 = (-0.0) - _2208;
                        float _3600 = (-0.0) - _2209;
                        float _3604 = inversesqrt(dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600)));
                        float _3605 = _3604 * _3598;
                        float _3606 = _3604 * _3599;
                        float _3607 = _3604 * _3600;
                        float _3614 = exp2(log2(1.0 / ((_3590 * 3.5) + 5.0)) * 0.25);
                        float _3615 = 1.0 - _1151;
                        float _3622 = sqrt(1.0 - ((1.0 - (_3615 * _3615)) * (1.0 - (_3614 * _3614))));
                        float _3623 = _3622 * _3622;
                        float _3624 = _3623 * _3623;
                        float _3625 = _3605 + _3570;
                        float _3626 = _3606 + _3571;
                        float _3627 = _3607 + _3572;
                        float _3631 = inversesqrt(dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627)));
                        float _3635 = dot(vec3(_1076, _1079, _1082), vec3(_3605, _3606, _3607));
                        float _4978 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                        float _3638 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                        float _3639 = dot(vec3(_1076, _1079, _1082), vec3(_3631 * _3625, _3631 * _3626, _3631 * _3627));
                        float _4989 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3642 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                        float _3646 = ((_3642 * _3642) * (_3624 + (-1.0))) + 1.0;
                        float _3647 = _3583 * _3623;
                        float _3648 = _3647 * _3647;
                        float _3651 = ((1.0 - _3648) * _3573) + _3648;
                        float _5000 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                        float _3652 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                        float _3653 = 1.0 - _3623;
                        float _3663 = (0.5 / (((_3652 * ((_3638 * _3653) + _3623)) + 9.9999999392252902907785028219223e-09) + (((_3652 * _3653) + _3623) * _3638))) * _3652;
                        float _5011 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3674 = (((_3624 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3646 * _3646) * ((_3590 * 2.1991131305694580078125) + 3.141590118408203125))) * _3579;
                        _3432 = (_3594 * _3542.x) + _3500;
                        _3433 = (_3594 * _3542.y) + _3501;
                        _3434 = (_3594 * _3542.z) + _3502;
                        _3429 = (_3674 * _3559.x) + _3497;
                        _3430 = (_3674 * _3559.y) + _3498;
                        _3431 = (_3674 * _3559.z) + _3499;
                        if (_3504 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3497 = _3429;
                            _3498 = _3430;
                            _3499 = _3431;
                            _3500 = _3432;
                            _3501 = _3433;
                            _3502 = _3434;
                            _3503 = _3504;
                        }
                    }
                    frontier_phi_66_pred = _3434;
                    frontier_phi_66_pred_1 = _3433;
                    frontier_phi_66_pred_2 = _3432;
                    frontier_phi_66_pred_3 = _3431;
                    frontier_phi_66_pred_4 = _3430;
                    frontier_phi_66_pred_5 = _3429;
                }
                _3239 = frontier_phi_66_pred;
                _3237 = frontier_phi_66_pred_1;
                _3235 = frontier_phi_66_pred_2;
                _3233 = frontier_phi_66_pred_3;
                _3231 = frontier_phi_66_pred_4;
                _3229 = frontier_phi_66_pred_5;
                uint _3380 = _3379 + 1u;
                if (_3380 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3373 = _3229;
                    _3374 = _3231;
                    _3375 = _3233;
                    _3376 = _3235;
                    _3377 = _3237;
                    _3378 = _3239;
                    _3379 = _3380;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3228 = _3229;
            _3230 = _3231;
            _3232 = _3233;
            _3234 = _3235;
            _3236 = _3237;
            _3238 = _3239;
        }
        uvec4 _3242 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3243 = _3242.z;
        uint _3245 = (_3243 >> 8u) & 15u;
        float _3341;
        float _3343;
        float _3345;
        float _3347;
        float _3349;
        float _3351;
        if (((4294967295u << _3245) & _3148) == 0u)
        {
            _3341 = _3228;
            _3343 = _3230;
            _3345 = _3232;
            _3347 = _3234;
            _3349 = _3236;
            _3351 = _3238;
        }
        else
        {
            float _3366 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
            float _3367 = _3366 * _2207;
            float _3368 = _3366 * _2208;
            float _3369 = _3366 * _2209;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3245 < ((_3243 >> 12u) & 15u))
            {
                float _3342;
                float _3344;
                float _3346;
                float _3348;
                float _3350;
                float _3352;
                float _3480 = _3228;
                float _3481 = _3230;
                float _3482 = _3232;
                float _3483 = _3234;
                float _3484 = _3236;
                float _3485 = _3238;
                uint _3486 = _3245;
                uint _3495;
                bool _3496;
                for (;;)
                {
                    _3495 = texelFetch(g_lightClassification, int((((_3142 << 5u) + (_3128 << 9u)) + (_3486 << 2u)) >> 2u)).x;
                    _3496 = _3495 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3496)
                    {
                        frontier_phi_72_pred = _3485;
                        frontier_phi_72_pred_1 = _3484;
                        frontier_phi_72_pred_2 = _3483;
                        frontier_phi_72_pred_3 = _3482;
                        frontier_phi_72_pred_4 = _3481;
                        frontier_phi_72_pred_5 = _3480;
                    }
                    else
                    {
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3972;
                        float _3973;
                        float _3974;
                        float _3975;
                        float _3976;
                        float _3977;
                        float _3692 = _3480;
                        float _3693 = _3481;
                        float _3694 = _3482;
                        float _3695 = _3483;
                        float _3696 = _3484;
                        float _3697 = _3485;
                        uint _3698 = _3495;
                        uint _3699;
                        vec4 _3724;
                        float _3725;
                        vec4 _3740;
                        vec3 _3752;
                        vec4 _3767;
                        vec4 _3782;
                        float _3828;
                        bool _3829;
                        for (;;)
                        {
                            uint _3709 = ((_3486 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3698));
                            _3699 = (_3698 + 4294967295u) & _3698;
                            uint _3711 = _3709 * 40u;
                            _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            _3725 = _3724.w;
                            uint _3727 = (_3709 * 40u) + 4u;
                            _3740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 3u)).x));
                            uint _3742 = (_3709 * 40u) + 8u;
                            _3752 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 2u)).x));
                            uint _3754 = (_3709 * 40u) + 16u;
                            _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            uint _3769 = (_3709 * 40u) + 20u;
                            _3782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 3u)).x));
                            uint _3784 = (_3709 * 40u) + 24u;
                            vec4 _3797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 3u)).x));
                            uint _3803 = (_3709 * 40u) + 28u;
                            vec4 _3816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 3u)).x));
                            _3828 = fma(_2209, _3816.z, fma(_2208, _3816.y, _3816.x * _2207)) + _3816.w;
                            _3829 = !((fma(_2209, _3797.z, fma(_2208, _3797.y, _3797.x * _2207)) + _3797.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3829)
                            {
                                float _3856 = _3724.x - _2207;
                                float _3857 = _3724.y - _2208;
                                float _3858 = _3724.z - _2209;
                                float _3859 = dot(vec3(_3856, _3857, _3858), vec3(_3856, _3857, _3858));
                                float _3862 = inversesqrt(_3859);
                                float _3863 = _3862 * _3856;
                                float _3864 = _3862 * _3857;
                                float _3865 = _3862 * _3858;
                                float _3869 = 1.0 - (_3859 / (_3725 * _3725));
                                float _5022 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3870 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3874 = sqrt(_3859) * _3740.w;
                                float _3876 = 1.39999997615814208984375 / (_3874 + 1.39999997615814208984375);
                                float _3877 = _3876 * _3876;
                                float _3880 = ((1.0 - _3877) * dot(vec3(_3863, _3864, _3865), vec3(_1076, _1079, _1082))) + _3877;
                                float _3883 = _3874 * _3874;
                                float _3887 = (fma(_2209, _3767.z, fma(_2208, _3767.y, _3767.x * _2207)) + _3767.w) / _3828;
                                float _3888 = (fma(_2209, _3782.z, fma(_2208, _3782.y, _3782.x * _2207)) + _3782.w) / _3828;
                                float _3892 = 1.0 - dot(vec2(_3887, _3888), vec2(_3887, _3888));
                                float _5038 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3893 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                                float _3894 = _3893 * (((isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0))) * _3870) / ((_3883 * 0.699999988079071044921875) + 1.0));
                                float _3906 = exp2(log2(1.0 / ((_3883 * 3.5) + 5.0)) * 0.25);
                                float _3907 = 1.0 - _1151;
                                float _3914 = sqrt(1.0 - ((1.0 - (_3907 * _3907)) * (1.0 - (_3906 * _3906))));
                                float _3915 = _3914 * _3914;
                                float _3916 = _3915 * _3915;
                                float _3917 = _3863 - _3367;
                                float _3918 = _3864 - _3368;
                                float _3919 = _3865 - _3369;
                                float _3923 = inversesqrt(dot(vec3(_3917, _3918, _3919), vec3(_3917, _3918, _3919)));
                                float _3927 = dot(vec3(_1076, _1079, _1082), vec3((-0.0) - _3367, (-0.0) - _3368, (-0.0) - _3369));
                                float _5049 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3930 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
                                float _3931 = dot(vec3(_1076, _1079, _1082), vec3(_3923 * _3917, _3923 * _3918, _3923 * _3919));
                                float _5060 = isnan(0.0) ? _3931 : (isnan(_3931) ? 0.0 : max(_3931, 0.0));
                                float _3934 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                                float _3938 = ((_3934 * _3934) * (_3916 + (-1.0))) + 1.0;
                                float _3939 = _3876 * _3915;
                                float _3940 = _3939 * _3939;
                                float _3946 = ((1.0 - _3940) * dot(vec3(_1076, _1079, _1082), vec3(_3863, _3864, _3865))) + _3940;
                                float _5071 = isnan(0.0) ? _3946 : (isnan(_3946) ? 0.0 : max(_3946, 0.0));
                                float _3947 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                                float _3948 = 1.0 - _3915;
                                float _3958 = (0.5 / (((_3947 * ((_3930 * _3948) + _3915)) + 9.9999999392252902907785028219223e-09) + (((_3947 * _3948) + _3915) * _3930))) * _3947;
                                float _5082 = isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0));
                                float _3968 = (_3893 * _3870) * (((_3916 * 3.1415927410125732421875) * (isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0)))) / ((_3938 * _3938) * ((_3883 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3894 * _3740.y;
                                frontier_phi_78_pred_1 = _3894 * _3740.x;
                                frontier_phi_78_pred_2 = _3968 * _3752.z;
                                frontier_phi_78_pred_3 = _3968 * _3752.y;
                                frontier_phi_78_pred_4 = _3968 * _3752.x;
                                frontier_phi_78_pred_5 = _3894 * _3740.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3976 = frontier_phi_78_pred;
                            _3975 = frontier_phi_78_pred_1;
                            _3974 = frontier_phi_78_pred_2;
                            _3973 = frontier_phi_78_pred_3;
                            _3972 = frontier_phi_78_pred_4;
                            _3977 = frontier_phi_78_pred_5;
                            _3682 = _3975 + _3695;
                            _3683 = _3976 + _3696;
                            _3684 = _3977 + _3697;
                            _3679 = _3972 + _3692;
                            _3680 = _3973 + _3693;
                            _3681 = _3974 + _3694;
                            if (_3699 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3692 = _3679;
                                _3693 = _3680;
                                _3694 = _3681;
                                _3695 = _3682;
                                _3696 = _3683;
                                _3697 = _3684;
                                _3698 = _3699;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3684;
                        frontier_phi_72_pred_1 = _3683;
                        frontier_phi_72_pred_2 = _3682;
                        frontier_phi_72_pred_3 = _3681;
                        frontier_phi_72_pred_4 = _3680;
                        frontier_phi_72_pred_5 = _3679;
                    }
                    _3352 = frontier_phi_72_pred;
                    _3350 = frontier_phi_72_pred_1;
                    _3348 = frontier_phi_72_pred_2;
                    _3346 = frontier_phi_72_pred_3;
                    _3344 = frontier_phi_72_pred_4;
                    _3342 = frontier_phi_72_pred_5;
                    uint _3487 = _3486 + 1u;
                    if (_3487 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3480 = _3342;
                        _3481 = _3344;
                        _3482 = _3346;
                        _3483 = _3348;
                        _3484 = _3350;
                        _3485 = _3352;
                        _3486 = _3487;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3352;
                frontier_phi_60_61_ladder_1 = _3350;
                frontier_phi_60_61_ladder_2 = _3346;
                frontier_phi_60_61_ladder_3 = _3344;
                frontier_phi_60_61_ladder_4 = _3342;
                frontier_phi_60_61_ladder_5 = _3348;
            }
            else
            {
                frontier_phi_60_61_ladder = _3238;
                frontier_phi_60_61_ladder_1 = _3236;
                frontier_phi_60_61_ladder_2 = _3232;
                frontier_phi_60_61_ladder_3 = _3230;
                frontier_phi_60_61_ladder_4 = _3228;
                frontier_phi_60_61_ladder_5 = _3234;
            }
            _3341 = frontier_phi_60_61_ladder_4;
            _3343 = frontier_phi_60_61_ladder_3;
            _3345 = frontier_phi_60_61_ladder_2;
            _3347 = frontier_phi_60_61_ladder_5;
            _3349 = frontier_phi_60_61_ladder_1;
            _3351 = frontier_phi_60_61_ladder;
        }
        float _3356 = isnan(1.0) ? _1135 : (isnan(_1135) ? 1.0 : min(_1135, 1.0));
        _3161 = (_3356 * _3347) + _2673;
        _3163 = (_3356 * _3349) + _2675;
        _3165 = (_3356 * _3351) + _2677;
        _3167 = ((_3341 * _1119) * _3356) + _3011;
        _3169 = ((_3343 * _1121) * _3356) + _3013;
        _3171 = ((_3345 * _1122) * _3356) + _3015;
    }
    else
    {
        _3161 = _2673;
        _3163 = _2675;
        _3165 = _2677;
        _3167 = _3011;
        _3169 = _3013;
        _3171 = _3015;
    }
    float _5098 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _5109 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _5120 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    uint _3191 = _258 + 6u;
    float _3199 = _1057 / cbSceneParam._m0[86u].x;
    float _3200 = _1058 / cbSceneParam._m0[86u].y;
    vec4 _3214 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3199, _3200, (log2((isnan(cbSceneParam._m0[77u].w) ? _992 : (isnan(_992) ? cbSceneParam._m0[77u].w : min(_992, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3216 = _3214.x;
    float _3217 = _3214.y;
    float _3218 = _3214.z;
    float _3219 = _3214.w;
    float _3291;
    float _3293;
    float _3295;
    float _3297;
    if (_992 > cbSceneParam._m0[78u].w)
    {
        float _3253 = isnan(_992) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _992 : min(cbSceneParam._m0[80u].w, _992));
        float _3254 = _3253 / _992;
        float _3265 = _3254 * _1042;
        float _3266 = _1043 * _3254;
        float _3267 = (-0.0) - _3266;
        float _3269 = _3254 * _1044;
        float _3271 = (cbSceneParam._m0[77u].w * _3267) / _3253;
        float _3272 = _3271 + cbSceneParam._m0[79u].w;
        float _3273 = cbSceneParam._m0[79u].w - _3266;
        float _3279 = sqrt(((_3265 * _3265) + (_3266 * _3266)) + (_3269 * _3269));
        float _3282 = (1.0 - (cbSceneParam._m0[77u].w / _3253)) * _3279;
        float _3287 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3289 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3442;
        if (abs((_3267 - _3271) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3442 = ((((_3272 > 0.0) ? exp2(_3287 * _3272) : (2.0 - exp2(_3289 * _3272))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3282;
        }
        else
        {
            float _3402 = 1.0 / cbSceneParam._m0[80u].x;
            float _3403 = isnan(_3273) ? _3272 : (isnan(_3272) ? _3273 : max(_3272, _3273));
            float _3404 = isnan(_3273) ? _3272 : (isnan(_3272) ? _3273 : min(_3272, _3273));
            float _3413 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : min(_3403, 0.0));
            float _3414 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : min(_3404, 0.0));
            _3442 = ((abs(_3279 / _3267) * cbSceneParam._m0[80u].y) * ((((_3413 - _3414) * 2.0) - ((exp2(_3287 * (isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0)))) - exp2(_3287 * (isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))))) * _3402)) - ((exp2(_3289 * _3413) - exp2(_3289 * _3414)) * _3402))) + (_3282 * cbSceneParam._m0[80u].z);
        }
        vec4 _3444 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3199, _3200, 1.0), 0.0);
        float _3453 = exp2((_3442 * (-1.44269502162933349609375)) * (1.0 - _3444.w));
        float _3454 = log2(_3453);
        float _3470 = log2(_3219);
        _3291 = (exp2(_3470 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3454 * cbSceneParam._m0[78u].x)) * _3444.x) / cbSceneParam._m0[78u].x)) + _3216;
        _3293 = (exp2(_3470 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3454 * cbSceneParam._m0[78u].y)) * _3444.y) / cbSceneParam._m0[78u].y)) + _3217;
        _3295 = (exp2(_3470 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3454 * cbSceneParam._m0[78u].z)) * _3444.z) / cbSceneParam._m0[78u].z)) + _3218;
        _3297 = _3453 * _3219;
    }
    else
    {
        _3291 = _3216;
        _3293 = _3217;
        _3295 = _3218;
        _3297 = _3219;
    }
    float _3309 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3310 = _3309 == 3.0;
    float _3311 = log2(_3297);
    float _3318 = exp2(_3311 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0))) * (_3161 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1135))) + ((_3167 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1941)) * cbPerFrame._m0[3u].x));
    float _3319 = exp2(_3311 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0))) * (_3163 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1135))) + ((_3169 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1941)) * cbPerFrame._m0[3u].x));
    float _3320 = exp2(_3311 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0))) * (_3165 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1135))) + ((_3171 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1941)) * cbPerFrame._m0[3u].x));
    float _3329 = (_3309 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3329 * (_3310 ? _3318 : (_3318 + (cbSceneParam._m0[72u].w * _3291)));
    SV_Target.y = _3329 * (_3310 ? _3319 : (_3319 + (cbSceneParam._m0[72u].w * _3293)));
    SV_Target.z = _3329 * (_3310 ? _3320 : (_3320 + (cbSceneParam._m0[72u].w * _3295)));
    SV_Target.w = cbInstanceData._m0[_3191].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3191].w;
}


