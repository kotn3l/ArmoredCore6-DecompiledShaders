#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1604;
float _4265;
float _4266;
float _4267;
float _4268;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _247 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _248 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _249 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _255 = inversesqrt(dot(vec3(_247, _248, _249), vec3(_247, _248, _249)));
    float _262 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _269 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _315.x * cbMtdParam._m0[11u].x;
    float _322 = _315.y * cbMtdParam._m0[11u].y;
    float _323 = _315.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _361.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[23u].w) + _414) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4277 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _439 = (_432 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _440 = (_432 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _441 = (_432 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _458 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _294) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _295) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _361.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[23u].w) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4288 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _512 = (_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439;
    float _513 = (_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440;
    float _514 = (_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441;
    vec4 _533 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _294) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _295) + cbTextureTilingScale._m0[24u].w));
    vec4 _550 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _552 = _550.x;
    float _562 = dot(vec4(_552, _550.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _574 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _361.z) * 2.0) - ((((_552 - _562) * cbMtdParam._m0[23u].w) + _562) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4299 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _582 = (_575 * ((_533.x * cbMtdParam._m0[14u].x) - _512)) + _512;
    float _583 = (_575 * ((_533.y * cbMtdParam._m0[14u].y) - _513)) + _513;
    float _584 = (_575 * ((_533.z * cbMtdParam._m0[14u].z) - _514)) + _514;
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _621 = _619.x;
    float _622 = _619.y;
    float _623 = _619.z;
    float _630 = ((_602.x - _621) * _432) + _621;
    float _631 = ((_602.y - _622) * _432) + _622;
    float _632 = ((_602.z - _623) * _432) + _623;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _294) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _295) + cbTextureTilingScale._m0[2u].w));
    float _655 = ((_644.x - _630) * _505) + _630;
    float _656 = ((_644.y - _631) * _505) + _631;
    float _657 = ((_644.z - _632) * _505) + _632;
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _294) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _295) + cbTextureTilingScale._m0[23u].w));
    float _682 = ((_669.z - _657) * _575) + _657;
    float _685 = ((((_669.x - _655) * _575) + _655) * 2.0) + (-1.0);
    float _687 = ((((_669.y - _656) * _575) + _656) * 2.0) + (-1.0);
    float _688 = dot(vec2(_685, _687), vec2(_685, _687));
    float _4310 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _693 = sqrt(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _734 = _732.x;
    float _735 = 1.0 - _734;
    float _743 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _746 = ((isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : min(_743, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _755 = (_746 - ((((((_734 - _735) * cbMtdParam._m0[24u].z) + _735) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _746))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4331 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _756 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _763 = (_756 * (cbMtdParam._m0[17u].x - _582)) + _582;
    float _764 = (_756 * (cbMtdParam._m0[17u].y - _583)) + _583;
    float _765 = (_756 * (cbMtdParam._m0[17u].z - _584)) + _584;
    vec4 _777 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _779 = _777.x;
    float _780 = 1.0 - _779;
    float _805 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_779 - _780) * cbMtdParam._m0[24u].w) + _780) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4342 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _806 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _814 = ((((cbMtdParam._m0[10u].x - _763) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _806) + _763;
    float _815 = ((((cbMtdParam._m0[10u].y - _764) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _806) + _764;
    float _816 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _765)) * _806) + _765;
    vec4 _842 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _844 = _842.x;
    float _862 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _294) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _295) + cbTextureTilingScale._m0[9u].w)).x - _844) * _432) + _844;
    float _879 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _294) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _295) + cbTextureTilingScale._m0[21u].w)).x - _862) * _505) + _862;
    float _896 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _294) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _295) + cbTextureTilingScale._m0[10u].w)).x - _879) * _575) + _879;
    float _900 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _896) * cbMtdParam._m0[19u].z) + _896;
    float _902 = _900 - (_900 * _756);
    float _904 = _902 - (_902 * _806);
    float _908 = (cbMtdParam._m0[19u].w * (_707.z - _682)) + _682;
    vec4 _922 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _929 = (_922.x * 2.0) + (-1.0);
    float _930 = (_922.y * 2.0) + (-1.0);
    float _931 = dot(vec2(_929, _930), vec2(_929, _930));
    float _4353 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _939 = (_756 * (_922.z - _908)) + _908;
    float _942 = ((cbMtdParam._m0[23u].x - _939) * _806) + _939;
    vec4 _965 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _971 = (_965.x * 2.0) + (-1.0);
    float _972 = (_965.y * 2.0) + (-1.0);
    float _973 = dot(vec2(_971, _972), vec2(_971, _972));
    float _4364 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _981 = (((_707.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _685;
    float _982 = (((_707.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _687;
    float _994 = (((_929 - _981) + (cbMtdParam._m0[21u].x * _981)) * _756) + _981;
    float _995 = (((_930 - _982) + (cbMtdParam._m0[21u].x * _982)) * _756) + _982;
    float _996 = (_756 * (sqrt(1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) - _693)) + _693;
    float _1007 = (((_971 - _994) + (_994 * cbMtdParam._m0[22u].z)) * _806) + _994;
    float _1008 = (((_972 - _995) + (_995 * cbMtdParam._m0[22u].z)) * _806) + _995;
    float _1009 = ((sqrt(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) - _996) * _806) + _996;
    float _1011 = cbMtdParam._m0[22u].x + _707.w;
    float _1014 = fma(_1009, _262 * NORMAL.x, fma(_1008, _269 * TANGENT.x, (_255 * _247) * _1007));
    float _1017 = fma(_1009, _262 * NORMAL.y, fma(_1008, _269 * TANGENT.y, (_255 * _248) * _1007));
    float _1020 = fma(_1009, _262 * NORMAL.z, fma(_1008, _269 * TANGENT.z, (_255 * _249) * _1007));
    float _1024 = inversesqrt(dot(vec3(_1014, _1017, _1020), vec3(_1014, _1017, _1020)));
    float _1025 = _1024 * _1014;
    float _1026 = _1024 * _1017;
    float _1027 = _1024 * _1020;
    float _4375 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _1028 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _4386 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4397 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4408 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4419 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4430 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _1033 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _1047 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1097 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1087);
    float _1098 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1087);
    float _1099 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1087);
    float _1103 = inversesqrt(dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099)));
    float _1104 = _1097 * _1103;
    float _1105 = _1098 * _1103;
    float _1106 = _1099 * _1103;
    vec4 _1111 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1113 = _1111.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1285 = sqrt(((_1097 * _1097) + (_1098 * _1098)) + (_1099 * _1099));
        float _1291 = (cbMatDynParam._m0[5u].x * _1285) + cbMatDynParam._m0[5u].y;
        float _4441 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1296 = (cbMatDynParam._m0[5u].z * _1285) + cbMatDynParam._m0[5u].w;
        float _4452 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) - _1292)) + _1292) < ((_1113 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1124 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1125 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1143 = fma(_1027, cbSceneParam._m0[5u].z, fma(_1026, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1025));
    float _1146 = fma(_1027, cbSceneParam._m0[6u].z, fma(_1026, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1025));
    float _1149 = fma(_1027, cbSceneParam._m0[7u].z, fma(_1026, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1025));
    uint _1162 = _275 + 9u;
    uint _1163 = _1162 + uint(cbMatDynParam._m0[0u].w);
    float _1169 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * cbInstanceData._m0[_1163].x;
    float _1170 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * cbInstanceData._m0[_1163].y;
    float _1171 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * cbInstanceData._m0[_1163].z;
    float _4463 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _1172 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _4474 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1173 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _4485 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _1174 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _1175 = 1.0 - _1033;
    float _1176 = _1172 * _1175;
    float _1177 = _1173 * _1175;
    float _1178 = _1174 * _1175;
    float _1183 = (_1172 + (-0.039999999105930328369140625)) * _1033;
    float _1184 = (_1173 + (-0.039999999105930328369140625)) * _1033;
    float _1185 = (_1174 + (-0.039999999105930328369140625)) * _1033;
    float _1186 = _1183 + 0.039999999105930328369140625;
    float _1188 = _1184 + 0.039999999105930328369140625;
    float _1189 = _1185 + 0.039999999105930328369140625;
    vec4 _1198 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1124, cbSceneParam._m0[86u].y * _1125));
    float _1202 = ((isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * TEXCOORD_5.w) * _1198.x;
    float _1203 = dot(vec3(_1025, _1026, _1027), vec3(_1104, _1105, _1106));
    float _1206 = _1203 * 2.0;
    float _1210 = (_1206 * _1025) - _1104;
    float _1211 = (_1206 * _1026) - _1105;
    float _1212 = (_1206 * _1027) - _1106;
    float _1216 = abs(dot(vec3(_1104, _1105, _1106), vec3(_1025, _1026, _1027)));
    float _4496 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1218 = sqrt(_1028);
    float _1231 = exp2((_1218 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1218 * 3.0));
    float _1237 = (1.0 - _1231) * ((_1218 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1238 = _1231 * _1218;
    float _1266 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1270 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1274 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1603;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1328 = fma(_1274, cbModelParam._m0[26u].z, fma(_1270, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1266));
        float _1332 = fma(_1274, cbModelParam._m0[27u].z, fma(_1270, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1266));
        float _1336 = fma(_1274, cbModelParam._m0[28u].z, fma(_1270, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1266));
        float _1361 = _1266 + _1025;
        float _1362 = _1270 + _1026;
        float _1363 = _1274 + _1027;
        float _1373 = fma(_1363, cbModelParam._m0[26u].z, fma(_1362, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1361)) - _1328;
        float _1374 = fma(_1363, cbModelParam._m0[27u].z, fma(_1362, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1361)) - _1332;
        float _1375 = fma(_1363, cbModelParam._m0[28u].z, fma(_1362, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1361)) - _1336;
        float _1379 = inversesqrt(dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375)));
        float _1392 = ((_1379 * _1373) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1328 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1379 * _1374) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1332 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1394 = ((_1379 * _1375) / cbModelParam._m0[34u].z) + ((((((_1336 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        float _1431 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1397.x + (-0.5));
        float _1433 = _1431 * (_1397.y + (-0.5));
        float _1434 = _1431 * (_1397.z + (-0.5));
        float _1441 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1404.x + (-0.5));
        float _1443 = _1441 * (_1404.y + (-0.5));
        float _1444 = _1441 * (_1404.z + (-0.5));
        float _1451 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1411.x + (-0.5));
        float _1453 = _1451 * (_1411.y + (-0.5));
        float _1454 = _1451 * (_1411.z + (-0.5));
        float _1461 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1418.x + (-0.5));
        float _1463 = _1461 * (_1418.y + (-0.5));
        float _1464 = _1461 * (_1418.z + (-0.5));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = _1432 * 0.5;
        float _1469 = _1442 * 0.5;
        float _1470 = _1452 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1485 = (dot(vec3(_1025, _1026, _1027), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4522 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1495 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4533 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4544 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_1497 + 1.0))) + _1502) * _1465;
        float _1512 = _1433 * 0.5;
        float _1513 = _1443 * 0.5;
        float _1514 = _1453 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_1025, _1026, _1027), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4555 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4566 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4577 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_1539 + 1.0))) + _1544) * _1466;
        float _1554 = _1434 * 0.5;
        float _1555 = _1444 * 0.5;
        float _1556 = _1454 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_1025, _1026, _1027), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4588 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4599 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4610 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_1581 + 1.0))) + _1586) * _1467;
        _1603 = _1434;
        _1605 = _1433;
        _1606 = _1432;
        _1607 = _1444;
        _1608 = _1443;
        _1609 = _1442;
        _1610 = _1454;
        _1611 = _1453;
        _1612 = _1452;
        _1613 = _1467;
        _1614 = _1466;
        _1615 = _1465;
        _1616 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1617 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1618 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
    }
    else
    {
        _1603 = _1604;
        _1605 = _1604;
        _1606 = _1604;
        _1607 = _1604;
        _1608 = _1604;
        _1609 = _1604;
        _1610 = _1604;
        _1611 = _1604;
        _1612 = _1604;
        _1613 = _1604;
        _1614 = _1604;
        _1615 = _1604;
        _1616 = 0.0;
        _1617 = 0.0;
        _1618 = 0.0;
    }
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1644 = fma(_1274, cbModelParam._m0[30u].z, fma(_1270, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1266));
        float _1648 = fma(_1274, cbModelParam._m0[31u].z, fma(_1270, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1266));
        float _1652 = fma(_1274, cbModelParam._m0[32u].z, fma(_1270, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1266));
        float _1675 = _1266 + _1025;
        float _1676 = _1270 + _1026;
        float _1677 = _1274 + _1027;
        float _1687 = fma(_1677, cbModelParam._m0[30u].z, fma(_1676, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1675)) - _1644;
        float _1688 = fma(_1677, cbModelParam._m0[31u].z, fma(_1676, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1675)) - _1648;
        float _1689 = fma(_1677, cbModelParam._m0[32u].z, fma(_1676, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1675)) - _1652;
        float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
        float _1706 = ((_1693 * _1687) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1644 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1707 = ((_1693 * _1688) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1648 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1708 = ((_1693 * _1689) / cbModelParam._m0[35u].z) + ((((((_1652 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1724 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1731 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        float _1743 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1710.x + (-0.5));
        float _1745 = _1743 * (_1710.y + (-0.5));
        float _1746 = _1743 * (_1710.z + (-0.5));
        float _1753 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = _1753 * (_1717.x + (-0.5));
        float _1755 = _1753 * (_1717.y + (-0.5));
        float _1756 = _1753 * (_1717.z + (-0.5));
        float _1763 = exp2((_1724.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = _1763 * (_1724.x + (-0.5));
        float _1765 = _1763 * (_1724.y + (-0.5));
        float _1766 = _1763 * (_1724.z + (-0.5));
        float _1773 = exp2((_1731.w + (-0.5)) * 20.0) * 2.0;
        float _1774 = _1773 * (_1731.x + (-0.5));
        float _1775 = _1773 * (_1731.y + (-0.5));
        float _1776 = _1773 * (_1731.z + (-0.5));
        float _1777 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1778 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1779 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1780 = _1744 * 0.5;
        float _1781 = _1754 * 0.5;
        float _1782 = _1764 * 0.5;
        float _1783 = dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782));
        float _1788 = (_1783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1783);
        float _1796 = (dot(vec3(_1025, _1026, _1027), vec3(_1788 * _1780, _1788 * _1781, _1788 * _1782)) + 1.0) * 0.5;
        float _4651 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1805 = sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782)) / (_1777 + 9.9999997473787516355514526367188e-06);
        float _4662 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _1807 = _1806 * 2.0;
        float _1811 = (1.0 - _1806) / (_1806 + 1.0);
        float _4673 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _1821 = ((((1.0 - _1812) * (_1807 + 2.0)) * exp2(log2(isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_1807 + 1.0))) + _1812) * _1777;
        float _1822 = _1745 * 0.5;
        float _1823 = _1755 * 0.5;
        float _1824 = _1765 * 0.5;
        float _1825 = dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824));
        float _1830 = (_1825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1825);
        float _1838 = (dot(vec3(_1025, _1026, _1027), vec3(_1830 * _1822, _1830 * _1823, _1830 * _1824)) + 1.0) * 0.5;
        float _4684 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824)) / (_1778 + 9.9999997473787516355514526367188e-06);
        float _4695 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _1849 = _1848 * 2.0;
        float _1853 = (1.0 - _1848) / (_1848 + 1.0);
        float _4706 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _1863 = ((((1.0 - _1854) * (_1849 + 2.0)) * exp2(log2(isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_1849 + 1.0))) + _1854) * _1778;
        float _1864 = _1746 * 0.5;
        float _1865 = _1756 * 0.5;
        float _1866 = _1766 * 0.5;
        float _1867 = dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866));
        float _1872 = (_1867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1867);
        float _1880 = (dot(vec3(_1025, _1026, _1027), vec3(_1872 * _1864, _1872 * _1865, _1872 * _1866)) + 1.0) * 0.5;
        float _4717 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1889 = sqrt(((_1865 * _1865) + (_1864 * _1864)) + (_1866 * _1866)) / (_1779 + 9.9999997473787516355514526367188e-06);
        float _4728 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _1891 = _1890 * 2.0;
        float _1895 = (1.0 - _1890) / (_1890 + 1.0);
        float _4739 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _1905 = ((((1.0 - _1896) * (_1891 + 2.0)) * exp2(log2(isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_1891 + 1.0))) + _1896) * _1779;
        _1913 = _1746;
        _1914 = _1745;
        _1915 = _1744;
        _1916 = _1756;
        _1917 = _1755;
        _1918 = _1754;
        _1919 = _1766;
        _1920 = _1765;
        _1921 = _1764;
        _1922 = _1779;
        _1923 = _1778;
        _1924 = _1777;
        _1925 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)));
        _1926 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)));
        _1927 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)));
    }
    else
    {
        _1913 = _1604;
        _1914 = _1604;
        _1915 = _1604;
        _1916 = _1604;
        _1917 = _1604;
        _1918 = _1604;
        _1919 = _1604;
        _1920 = _1604;
        _1921 = _1604;
        _1922 = _1604;
        _1923 = _1604;
        _1924 = _1604;
        _1925 = 0.0;
        _1926 = 0.0;
        _1927 = 0.0;
    }
    float _1937 = (cbModelParam._m0[1u].x * (_1925 - _1616)) + _1616;
    float _1938 = (cbModelParam._m0[1u].x * (_1926 - _1617)) + _1617;
    float _1939 = (cbModelParam._m0[1u].x * (_1927 - _1618)) + _1618;
    float _1960 = fma(_1939, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1937 * cbSceneParam._m0[89u].x));
    float _1963 = fma(_1939, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1937 * cbSceneParam._m0[90u].x));
    float _1966 = fma(_1939, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1937));
    float _1981 = _1210 * 0.5;
    float _1982 = _1211 * 0.5;
    float _1983 = _1212 * 0.5;
    float _1984 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1915, _1918, _1921, _1924));
    float _1987 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1914, _1917, _1920, _1923));
    float _1990 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1913, _1916, _1919, _1922));
    float _2024;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1997 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1603, _1607, _1610, _1613));
        float _2001 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1605, _1608, _1611, _1614));
        float _2005 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1606, _1609, _1612, _1615));
        float _2012 = dot(vec4(cbModelParam._m0[39u]), vec4(_1981, _1982, _1983, 1.0));
        _2024 = dot(vec3(isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)), isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0)), isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2012) ? 0.0 : (isnan(0.0) ? _2012 : max(0.0, _2012))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2024 = 1.0;
    }
    float _2035;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2026 = dot(vec4(cbModelParam._m0[40u]), vec4(_1981, _1982, _1983, 1.0));
        _2035 = dot(vec3(isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)), isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0)), isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2026) ? 0.0 : (isnan(0.0) ? _2026 : max(0.0, _2026))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2035 = 1.0;
    }
    float _2039 = (_2035 * cbModelParam._m0[1u].x) + (_2024 * (1.0 - cbModelParam._m0[1u].x));
    float _2049 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1028);
    float _2050 = isnan(_2049) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2049 : min(cbModelParam._m0[25u].z, _2049));
    float _2130;
    float _2132;
    float _2134;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2097 = fma(_1274, cbModelParam._m0[13u].z, fma(_1270, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1266)) + cbModelParam._m0[13u].w;
        float _2101 = fma(_1274, cbModelParam._m0[14u].z, fma(_1270, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1266)) + cbModelParam._m0[14u].w;
        float _2105 = fma(_1274, cbModelParam._m0[15u].z, fma(_1270, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1266)) + cbModelParam._m0[15u].w;
        float _2108 = fma(_1212, cbModelParam._m0[13u].z, fma(_1211, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1210));
        float _2111 = fma(_1212, cbModelParam._m0[14u].z, fma(_1211, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1210));
        float _2114 = fma(_1212, cbModelParam._m0[15u].z, fma(_1211, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1210));
        float _2142;
        if (_2108 > 0.0)
        {
            _2142 = abs((1.0 - _2097) / _2108);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2097 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2142 = frontier_phi_17_15_ladder;
        }
        float _2314;
        if (_2111 > 0.0)
        {
            _2314 = abs((1.0 - _2101) / _2111);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2101 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2314 = frontier_phi_26_22_ladder;
        }
        float _2609;
        if (_2114 > 0.0)
        {
            _2609 = abs((1.0 - _2105) / _2114);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2105 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2609 = frontier_phi_38_33_ladder;
        }
        float _2611 = isnan(_2314) ? _2142 : (isnan(_2142) ? _2314 : min(_2142, _2314));
        float _2612 = isnan(_2609) ? _2611 : (isnan(_2611) ? _2609 : min(_2611, _2609));
        float _2616 = (_2612 * _2108) + _2097;
        float _2617 = (_2612 * _2111) + _2101;
        float _2618 = (_2612 * _2114) + _2105;
        float _2619 = _2612 * 9.9999997473787516355514526367188e-05;
        float _2621 = (-1.0) - _2619;
        float _2623 = _2619 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2618 > _2623) || ((_2618 < _2621) || ((_2617 > _2623) || ((_2617 < _2621) || ((_2616 < _2621) || (_2616 > _2623))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2763 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2618, cbModelParam._m0[9u].z, fma(_2617, cbModelParam._m0[9u].y, _2616 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2618, cbModelParam._m0[10u].z, fma(_2617, cbModelParam._m0[10u].y, _2616 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2618, cbModelParam._m0[11u].z, fma(_2617, cbModelParam._m0[11u].y, _2616 * cbModelParam._m0[11u].x))), _2050);
            frontier_phi_16_38_ladder = _2763.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2763.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2763.x * cbModelParam._m0[1u].y;
        }
        _2130 = frontier_phi_16_38_ladder_2;
        _2132 = frontier_phi_16_38_ladder_1;
        _2134 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2118 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1210, _1211, _1212), _2050);
        _2130 = _2118.x * cbModelParam._m0[1u].y;
        _2132 = _2118.y * cbModelParam._m0[1u].y;
        _2134 = _2118.z * cbModelParam._m0[1u].y;
    }
    float _2138 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1028);
    float _2139 = isnan(_2138) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2138 : min(cbModelParam._m0[25u].w, _2138));
    float _2229;
    float _2231;
    float _2233;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2193 = fma(_1274, cbModelParam._m0[21u].z, fma(_1270, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1266)) + cbModelParam._m0[21u].w;
        float _2197 = fma(_1274, cbModelParam._m0[22u].z, fma(_1270, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1266)) + cbModelParam._m0[22u].w;
        float _2201 = fma(_1274, cbModelParam._m0[23u].z, fma(_1270, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1266)) + cbModelParam._m0[23u].w;
        float _2204 = fma(_1212, cbModelParam._m0[21u].z, fma(_1211, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1210));
        float _2207 = fma(_1212, cbModelParam._m0[22u].z, fma(_1211, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1210));
        float _2210 = fma(_1212, cbModelParam._m0[23u].z, fma(_1211, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1210));
        float _2319;
        if (_2204 > 0.0)
        {
            _2319 = abs((1.0 - _2193) / _2204);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2204 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2193 + 1.0) / _2204);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2319 = frontier_phi_28_24_ladder;
        }
        float _2636;
        if (_2207 > 0.0)
        {
            _2636 = abs((1.0 - _2197) / _2207);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2207 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2197 + 1.0) / _2207);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2636 = frontier_phi_40_35_ladder;
        }
        float _2974;
        if (_2210 > 0.0)
        {
            _2974 = abs((1.0 - _2201) / _2210);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2210 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2201 + 1.0) / _2210);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2974 = frontier_phi_50_47_ladder;
        }
        float _2976 = isnan(_2636) ? _2319 : (isnan(_2319) ? _2636 : min(_2319, _2636));
        float _2977 = isnan(_2974) ? _2976 : (isnan(_2976) ? _2974 : min(_2976, _2974));
        float _2981 = (_2977 * _2204) + _2193;
        float _2982 = (_2977 * _2207) + _2197;
        float _2983 = (_2977 * _2210) + _2201;
        float _2984 = _2977 * 9.9999997473787516355514526367188e-05;
        float _2985 = (-1.0) - _2984;
        float _2987 = _2984 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2983 > _2987) || ((_2983 < _2985) || ((_2982 > _2987) || ((_2982 < _2985) || ((_2981 < _2985) || (_2981 > _2987))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3105 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2983, cbModelParam._m0[17u].z, fma(_2982, cbModelParam._m0[17u].y, _2981 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2983, cbModelParam._m0[18u].z, fma(_2982, cbModelParam._m0[18u].y, _2981 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2983, cbModelParam._m0[19u].z, fma(_2982, cbModelParam._m0[19u].y, _2981 * cbModelParam._m0[19u].x))), _2139);
            frontier_phi_25_50_ladder = _3105.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3105.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3105.x * cbModelParam._m0[1u].z;
        }
        _2229 = frontier_phi_25_50_ladder_2;
        _2231 = frontier_phi_25_50_ladder_1;
        _2233 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2213 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1210, _1211, _1212), _2139);
        _2229 = _2213.x * cbModelParam._m0[1u].z;
        _2231 = _2213.y * cbModelParam._m0[1u].z;
        _2233 = _2213.z * cbModelParam._m0[1u].z;
    }
    float _2246 = (((_1237 * _1186) + _1238) * _1202) * ((cbModelParam._m0[1u].w * (_2229 - _2130)) + _2130);
    float _2248 = (((_1237 * _1188) + _1238) * _1202) * ((cbModelParam._m0[1u].w * (_2231 - _2132)) + _2132);
    float _2250 = (((_1237 * _1189) + _1238) * _1202) * ((cbModelParam._m0[1u].w * (_2233 - _2134)) + _2134);
    float _2253 = fma(_2250, cbSceneParam._m0[89u].z, fma(_2248, cbSceneParam._m0[89u].y, _2246 * cbSceneParam._m0[89u].x));
    float _2256 = fma(_2250, cbSceneParam._m0[90u].z, fma(_2248, cbSceneParam._m0[90u].y, _2246 * cbSceneParam._m0[90u].x));
    float _2259 = fma(_2250, cbSceneParam._m0[91u].z, fma(_2248, cbSceneParam._m0[91u].y, _2246 * cbSceneParam._m0[91u].x));
    float _2293 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2297 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2301 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2305 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2306 = _2293 / _2305;
    float _2307 = _2297 / _2305;
    float _2308 = _2301 / _2305;
    float _2455;
    float _2456;
    float _2457;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2335 = ((uint(_2308 > cbSceneParam._m0[59u].y) + uint(_2308 > cbSceneParam._m0[59u].x)) + uint(_2308 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2336 = _2335 + 43u;
        uint _2344 = _2335 + 44u;
        uint _2352 = _2335 + 45u;
        uint _2360 = _2335 + 46u;
        float _2371 = fma(_2305, cbSceneParam._m0[_2336].w, fma(_2301, cbSceneParam._m0[_2336].z, fma(_2297, cbSceneParam._m0[_2336].y, _2293 * cbSceneParam._m0[_2336].x)));
        float _2375 = fma(_2305, cbSceneParam._m0[_2344].w, fma(_2301, cbSceneParam._m0[_2344].z, fma(_2297, cbSceneParam._m0[_2344].y, _2293 * cbSceneParam._m0[_2344].x)));
        float _2383 = fma(_2305, cbSceneParam._m0[_2360].w, fma(_2301, cbSceneParam._m0[_2360].z, fma(_2297, cbSceneParam._m0[_2360].y, _2293 * cbSceneParam._m0[_2360].x)));
        float _2388 = cbSceneParam._m0[33u].z * _2383;
        float _2390 = cbSceneParam._m0[33u].w * _2383;
        float _2393 = fma(_2305, cbSceneParam._m0[_2352].w, fma(_2301, cbSceneParam._m0[_2352].z, fma(_2297, cbSceneParam._m0[_2352].y, _2293 * cbSceneParam._m0[_2352].x))) / _2383;
        float _2441 = (cbSceneParam._m0[33u].x - sqrt(((_2307 * _2307) + (_2306 * _2306)) + (_2308 * _2308))) * cbSceneParam._m0[33u].y;
        float _4865 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2448 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2388 + _2371) / _2383, (_2390 + _2375) / _2383), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2390 + _2371) / _2383, (_2375 - _2388) / _2383), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2371 - _2388) / _2383, (_2375 - _2390) / _2383), _2393), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2371 - _2390) / _2383, (_2388 + _2375) / _2383), _2393), 0.0)).x), vec4(0.25)));
        _2455 = 1.0 - (_2448 * cbSceneParam._m0[34u].x);
        _2456 = 1.0 - (_2448 * cbSceneParam._m0[34u].y);
        _2457 = 1.0 - (_2448 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2455 = 1.0;
        _2456 = 1.0;
        _2457 = 1.0;
    }
    float _2521;
    float _2523;
    float _2525;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2509 = fma(_2305, cbSceneParam._m0[63u].w, fma(_2301, cbSceneParam._m0[63u].z, fma(_2297, cbSceneParam._m0[63u].y, _2293 * cbSceneParam._m0[63u].x)));
        float _2510 = fma(_2305, cbSceneParam._m0[60u].w, fma(_2301, cbSceneParam._m0[60u].z, fma(_2297, cbSceneParam._m0[60u].y, _2293 * cbSceneParam._m0[60u].x))) / _2509;
        float _2511 = fma(_2305, cbSceneParam._m0[61u].w, fma(_2301, cbSceneParam._m0[61u].z, fma(_2297, cbSceneParam._m0[61u].y, _2293 * cbSceneParam._m0[61u].x))) / _2509;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2510 >= cbSceneParam._m0[64u].x) && (_2511 >= cbSceneParam._m0[64u].y)) && (_2510 <= cbSceneParam._m0[64u].z)) && (_2511 <= cbSceneParam._m0[64u].w))
        {
            float _2649 = fma(_2305, cbSceneParam._m0[62u].w, fma(_2301, cbSceneParam._m0[62u].z, fma(_2297, cbSceneParam._m0[62u].y, _2293 * cbSceneParam._m0[62u].x))) / _2509;
            float _2653 = isnan(cbSceneParam._m0[41u].w) ? _2649 : (isnan(_2649) ? cbSceneParam._m0[41u].w : max(_2649, cbSceneParam._m0[41u].w));
            float _2696 = (cbSceneParam._m0[33u].x - sqrt(((_2307 * _2307) + (_2306 * _2306)) + (_2308 * _2308))) * cbSceneParam._m0[33u].y;
            float _4881 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
            float _2703 = (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2510, cbSceneParam._m0[33u].w + _2511), _2653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2510, _2511 - cbSceneParam._m0[33u].z), _2653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2510 - cbSceneParam._m0[33u].z, _2511 - cbSceneParam._m0[33u].w), _2653), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2510 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2511), _2653), 0.0)).x), vec4(0.25)));
            float _2707 = 1.0 - (_2703 * cbSceneParam._m0[34u].x);
            float _2708 = 1.0 - (_2703 * cbSceneParam._m0[34u].y);
            float _2709 = 1.0 - (_2703 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2709) ? _2457 : (isnan(_2457) ? _2709 : min(_2457, _2709));
            frontier_phi_37_36_ladder_1 = isnan(_2708) ? _2456 : (isnan(_2456) ? _2708 : min(_2456, _2708));
            frontier_phi_37_36_ladder_2 = isnan(_2707) ? _2455 : (isnan(_2455) ? _2707 : min(_2455, _2707));
        }
        else
        {
            frontier_phi_37_36_ladder = _2457;
            frontier_phi_37_36_ladder_1 = _2456;
            frontier_phi_37_36_ladder_2 = _2455;
        }
        _2521 = frontier_phi_37_36_ladder_2;
        _2523 = frontier_phi_37_36_ladder_1;
        _2525 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2521 = _2455;
        _2523 = _2456;
        _2525 = _2457;
    }
    uvec4 _2530 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2532 = _2530.x * 14u;
    uint _2533 = _2532 + 13u;
    float _2540 = _1202 + (-1.0);
    float _2545 = (cbLight._m0[_2533].x * _2540) + 1.0;
    float _2546 = (cbLight._m0[_2533].y * _2540) + 1.0;
    float _2547 = (cbLight._m0[_2533].z * _2540) + 1.0;
    float _2548 = (cbLight._m0[_2533].w * _2540) + 1.0;
    uint _2549 = _2532 + 5u;
    float _2555 = isnan(1.0) ? _2546 : (isnan(_2546) ? 1.0 : min(_2546, 1.0));
    uint _2559 = _2532 + 4u;
    float _2568 = isnan(1.0) ? _2545 : (isnan(_2545) ? 1.0 : min(_2545, 1.0));
    uint _2572 = _2532 | 1u;
    float _2583 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_1025, _1026, _1027));
    float _2586 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_1025, _1026, _1027));
    float _4917 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _4928 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2591 = (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * 0.3183098733425140380859375;
    float _2593 = (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * 0.3183098733425140380859375;
    float _2600 = ((cbLight._m0[_2549].x * _2555) * _2593) + (((cbLight._m0[_2559].x * _2521) * _2568) * _2591);
    float _2601 = ((_2555 * cbLight._m0[_2549].y) * _2593) + (((cbLight._m0[_2559].y * _2523) * _2568) * _2591);
    float _2602 = ((_2555 * cbLight._m0[_2549].z) * _2593) + (((cbLight._m0[_2559].z * _2525) * _2568) * _2591);
    uvec4 _2606 = floatBitsToUint(cbLight._m0[_2532 + 12u]);
    bool _2608 = _2606.x == 0u;
    float _2710;
    float _2712;
    float _2714;
    if (_2608)
    {
        _2710 = _2600;
        _2712 = _2601;
        _2714 = _2602;
    }
    else
    {
        uint _2718 = _2532 + 6u;
        float _2734 = (dot(vec3(cbLight._m0[_2532 + 2u].xyz), vec3(_1025, _1026, _1027)) * 0.5) + 0.5;
        float _2735 = _2734 * _2734;
        float _4939 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2736 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
        float _2737 = isnan(1.0) ? _2547 : (isnan(_2547) ? 1.0 : min(_2547, 1.0));
        _2710 = (((cbLight._m0[_2718].x * 0.3183098733425140380859375) * _2736) * _2737) + _2600;
        _2712 = (((cbLight._m0[_2718].y * 0.3183098733425140380859375) * _2736) * _2737) + _2601;
        _2714 = (((cbLight._m0[_2718].z * 0.3183098733425140380859375) * _2736) * _2737) + _2602;
    }
    bool _2717 = _2606.y == 0u;
    float _2772;
    float _2774;
    float _2776;
    if (_2717)
    {
        _2772 = _2710;
        _2774 = _2712;
        _2776 = _2714;
    }
    else
    {
        uint _2945 = _2532 + 7u;
        float _2961 = (dot(vec3(cbLight._m0[_2532 + 3u].xyz), vec3(_1025, _1026, _1027)) * 0.5) + 0.5;
        float _2962 = _2961 * _2961;
        float _4955 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2963 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
        float _2964 = isnan(1.0) ? _2548 : (isnan(_2548) ? 1.0 : min(_2548, 1.0));
        _2772 = (((cbLight._m0[_2945].x * 0.3183098733425140380859375) * _2963) * _2964) + _2710;
        _2774 = (((cbLight._m0[_2945].y * 0.3183098733425140380859375) * _2963) * _2964) + _2712;
        _2776 = (((cbLight._m0[_2945].z * 0.3183098733425140380859375) * _2963) * _2964) + _2714;
    }
    uint _2779 = _2532 + 8u;
    float _2792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2532].w)) * _1028) * 0.949999988079071044921875);
    float _2793 = _2792 * _2792;
    float _2794 = cbLight._m0[_2532].x + _1104;
    float _2795 = cbLight._m0[_2532].y + _1105;
    float _2796 = cbLight._m0[_2532].z + _1106;
    float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
    float _2801 = _2800 * _2794;
    float _2802 = _2800 * _2795;
    float _2803 = _2800 * _2796;
    float _2804 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_2532].xyz));
    float _4971 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
    float _2807 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
    float _4982 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _2808 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
    float _2809 = dot(vec3(_1025, _1026, _1027), vec3(_2801, _2802, _2803));
    float _4993 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
    float _2812 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
    float _2813 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_2801, _2802, _2803));
    float _5004 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2817 = _2793 * _2793;
    float _2821 = ((_2812 * _2812) * (_2817 + (-1.0))) + 1.0;
    float _2829 = exp2(log2(1.0 - (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0)))) * 5.0);
    float _2830 = 0.959999978542327880859375 - _1183;
    float _2832 = 0.959999978542327880859375 - _1184;
    float _2833 = 0.959999978542327880859375 - _1185;
    float _2840 = 1.0 - _2793;
    float _2851 = (0.5 / (((_2808 * ((_2807 * _2840) + _2793)) + 9.9999999392252902907785028219223e-09) + (((_2808 * _2840) + _2793) * _2807))) * _2807;
    float _5015 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2853 = (isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * (_2817 / ((_2821 * _2821) * 3.141590118408203125));
    uint _2867 = _2532 + 9u;
    float _2878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _1028) * 0.949999988079071044921875);
    float _2879 = _2878 * _2878;
    float _2880 = cbLight._m0[_2572].x + _1104;
    float _2881 = cbLight._m0[_2572].y + _1105;
    float _2882 = cbLight._m0[_2572].z + _1106;
    float _2886 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
    float _2887 = _2886 * _2880;
    float _2888 = _2886 * _2881;
    float _2889 = _2886 * _2882;
    float _2890 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_2572].xyz));
    float _5026 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
    float _2893 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
    float _2894 = dot(vec3(_1025, _1026, _1027), vec3(_2887, _2888, _2889));
    float _5037 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
    float _2897 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
    float _2898 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2887, _2888, _2889));
    float _5048 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
    float _2902 = _2879 * _2879;
    float _2906 = ((_2897 * _2897) * (_2902 + (-1.0))) + 1.0;
    float _2913 = exp2(log2(1.0 - (isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0)))) * 5.0);
    float _2920 = 1.0 - _2879;
    float _2930 = (0.5 / (((_2808 * ((_2893 * _2920) + _2879)) + 9.9999999392252902907785028219223e-09) + (((_2808 * _2920) + _2879) * _2893))) * _2893;
    float _5059 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
    float _2932 = (isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0))) * (_2902 / ((_2906 * _2906) * 3.141590118408203125));
    float _2942 = (((((_2913 * _2830) + _1186) * cbLight._m0[_2867].x) * _2932) * _2555) + ((((cbLight._m0[_2779].x * _2521) * ((_2829 * _2830) + _1186)) * _2853) * _2568);
    float _2943 = (((((_2913 * _2832) + _1188) * cbLight._m0[_2867].y) * _2932) * _2555) + ((((cbLight._m0[_2779].y * _2523) * ((_2829 * _2832) + _1188)) * _2853) * _2568);
    float _2944 = (((((_2913 * _2833) + _1189) * cbLight._m0[_2867].z) * _2932) * _2555) + ((((cbLight._m0[_2779].z * _2525) * ((_2829 * _2833) + _1189)) * _2853) * _2568);
    float _3000;
    float _3002;
    float _3004;
    if (_2608)
    {
        _3000 = _2942;
        _3002 = _2943;
        _3004 = _2944;
    }
    else
    {
        uint _3006 = _2532 + 2u;
        uint _3010 = _2532 + 10u;
        float _3024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3006].w)) * _1028) * 0.949999988079071044921875);
        float _3025 = _3024 * _3024;
        float _3026 = cbLight._m0[_3006].x + _1104;
        float _3027 = cbLight._m0[_3006].y + _1105;
        float _3028 = cbLight._m0[_3006].z + _1106;
        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
        float _3033 = _3032 * _3026;
        float _3034 = _3032 * _3027;
        float _3035 = _3032 * _3028;
        float _3036 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_3006].xyz));
        float _5070 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
        float _3039 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
        float _3040 = dot(vec3(_1025, _1026, _1027), vec3(_3033, _3034, _3035));
        float _5081 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        float _3043 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
        float _3044 = dot(vec3(cbLight._m0[_3006].xyz), vec3(_3033, _3034, _3035));
        float _5092 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        float _3048 = _3025 * _3025;
        float _3052 = ((_3043 * _3043) * (_3048 + (-1.0))) + 1.0;
        float _3059 = exp2(log2(1.0 - (isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0)))) * 5.0);
        float _3066 = 1.0 - _3025;
        float _3076 = (0.5 / (((_2808 * ((_3039 * _3066) + _3025)) + 9.9999999392252902907785028219223e-09) + (((_2808 * _3066) + _3025) * _3039))) * _3039;
        float _5103 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
        float _3078 = (isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0))) * (_3048 / ((_3052 * _3052) * 3.141590118408203125));
        float _3079 = isnan(1.0) ? _2547 : (isnan(_2547) ? 1.0 : min(_2547, 1.0));
        _3000 = (((((_3059 * _2830) + _1186) * cbLight._m0[_3010].x) * _3078) * _3079) + _2942;
        _3002 = (((((_3059 * _2832) + _1188) * cbLight._m0[_3010].y) * _3078) * _3079) + _2943;
        _3004 = (((((_3059 * _2833) + _1189) * cbLight._m0[_3010].z) * _3078) * _3079) + _2944;
    }
    float _3110;
    float _3112;
    float _3114;
    if (_2717)
    {
        _3110 = _3000;
        _3112 = _3002;
        _3114 = _3004;
    }
    else
    {
        uint _3121 = _2532 + 3u;
        uint _3125 = _2532 + 11u;
        float _3139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3121].w)) * _1028) * 0.949999988079071044921875);
        float _3140 = _3139 * _3139;
        float _3141 = cbLight._m0[_3121].x + _1104;
        float _3142 = cbLight._m0[_3121].y + _1105;
        float _3143 = cbLight._m0[_3121].z + _1106;
        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
        float _3148 = _3147 * _3141;
        float _3149 = _3147 * _3142;
        float _3150 = _3147 * _3143;
        float _3151 = dot(vec3(_1025, _1026, _1027), vec3(cbLight._m0[_3121].xyz));
        float _5119 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
        float _3154 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
        float _3155 = dot(vec3(_1025, _1026, _1027), vec3(_3148, _3149, _3150));
        float _5130 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
        float _3158 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
        float _3159 = dot(vec3(cbLight._m0[_3121].xyz), vec3(_3148, _3149, _3150));
        float _5141 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
        float _3163 = _3140 * _3140;
        float _3167 = ((_3158 * _3158) * (_3163 + (-1.0))) + 1.0;
        float _3174 = exp2(log2(1.0 - (isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0)))) * 5.0);
        float _3181 = 1.0 - _3140;
        float _3191 = (0.5 / (((_2808 * ((_3154 * _3181) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_2808 * _3181) + _3140) * _3154))) * _3154;
        float _5152 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
        float _3193 = (isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0))) * (_3163 / ((_3167 * _3167) * 3.141590118408203125));
        float _3194 = isnan(1.0) ? _2548 : (isnan(_2548) ? 1.0 : min(_2548, 1.0));
        _3110 = (((((_3174 * _2830) + _1186) * cbLight._m0[_3125].x) * _3193) * _3194) + _3000;
        _3112 = (((((_3174 * _2832) + _1188) * cbLight._m0[_3125].y) * _3193) * _3194) + _3002;
        _3114 = (((((_3174 * _2833) + _1189) * cbLight._m0[_3125].z) * _3193) * _3194) + _3004;
    }
    float _3260;
    float _3262;
    float _3264;
    float _3266;
    float _3268;
    float _3270;
    if (_2530.y == 0u)
    {
        uvec4 _3215 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3216 = _3215.x;
        uint _3227 = uint((float(_3215.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1125) / _3216))) + floor(float(uint(cbSceneParam._m0[85u].x * _1124) / _3216)));
        float _3237 = (log2(_2308 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3238 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
        uint _3241 = uint(isnan(14.0) ? _3238 : (isnan(_3238) ? 14.0 : min(_3238, 14.0)));
        uvec4 _3246 = texelFetch(g_lightClusterGridBuffer, int(((_3241 << 2u) + (_3227 << 6u)) >> 2u));
        uint _3247 = _3246.x;
        uint _3248 = _3215.z;
        float _3327;
        float _3329;
        float _3331;
        float _3333;
        float _3335;
        float _3337;
        if (((((1u << ((_3248 >> 4u) & 15u)) + 4294967295u) & _3247) == 0u) || ((_3248 & 240u) == 0u))
        {
            _3327 = 0.0;
            _3329 = 0.0;
            _3331 = 0.0;
            _3333 = 0.0;
            _3335 = 0.0;
            _3337 = 0.0;
        }
        else
        {
            float _3328;
            float _3330;
            float _3332;
            float _3334;
            float _3336;
            float _3338;
            float _3480 = 0.0;
            float _3481 = 0.0;
            float _3482 = 0.0;
            float _3483 = 0.0;
            float _3484 = 0.0;
            float _3485 = 0.0;
            uint _3486 = 0u;
            uint _3495;
            bool _3496;
            for (;;)
            {
                _3495 = texelFetch(g_lightClassification, int((((_3241 << 5u) + (_3227 << 9u)) + (_3486 << 2u)) >> 2u)).x;
                _3496 = _3495 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3496)
                {
                    frontier_phi_71_pred = _3485;
                    frontier_phi_71_pred_1 = _3484;
                    frontier_phi_71_pred_2 = _3483;
                    frontier_phi_71_pred_3 = _3482;
                    frontier_phi_71_pred_4 = _3481;
                    frontier_phi_71_pred_5 = _3480;
                }
                else
                {
                    float _3625;
                    float _3626;
                    float _3627;
                    float _3628;
                    float _3629;
                    float _3630;
                    uint _3631;
                    _3625 = _3480;
                    _3626 = _3481;
                    _3627 = _3482;
                    _3628 = _3483;
                    _3629 = _3484;
                    _3630 = _3485;
                    _3631 = _3495;
                    float _3552;
                    float _3553;
                    float _3554;
                    float _3555;
                    float _3556;
                    float _3557;
                    for (;;)
                    {
                        uint _3635 = uint(findLSB(_3631)) + (_3486 << 5u);
                        uint _3632 = (_3631 + 4294967295u) & _3631;
                        uint _3637 = _3635 * 48u;
                        vec4 _3651 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3637)).x, texelFetch(g_PointLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3637 + 3u)).x));
                        uint _3657 = (_3635 * 48u) + 4u;
                        vec4 _3670 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3657)).x, texelFetch(g_PointLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3657 + 3u)).x));
                        uint _3676 = (_3635 * 48u) + 8u;
                        vec3 _3687 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3676)).x, texelFetch(g_PointLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3676 + 2u)).x));
                        float _3691 = _3651.x - _2306;
                        float _3692 = _3651.y - _2307;
                        float _3693 = _3651.z - _2308;
                        float _3694 = dot(vec3(_3691, _3692, _3693), vec3(_3691, _3692, _3693));
                        float _3697 = inversesqrt(_3694);
                        float _3698 = _3697 * _3691;
                        float _3699 = _3697 * _3692;
                        float _3700 = _3697 * _3693;
                        float _3701 = dot(vec3(_1143, _1146, _1149), vec3(_3698, _3699, _3700));
                        float _3706 = 1.0 - (_3694 * _3651.w);
                        float _5178 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                        float _3707 = isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0));
                        float _3708 = sqrt(_3694) * _3670.w;
                        float _3711 = 1.39999997615814208984375 / (_3708 + 1.39999997615814208984375);
                        float _3712 = _3711 * _3711;
                        float _3715 = ((1.0 - _3712) * _3701) + _3712;
                        float _3718 = _3708 * _3708;
                        float _3722 = ((isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0))) * _3707) / ((_3718 * 0.699999988079071044921875) + 1.0);
                        float _3726 = (-0.0) - _2306;
                        float _3727 = (-0.0) - _2307;
                        float _3728 = (-0.0) - _2308;
                        float _3732 = inversesqrt(dot(vec3(_3726, _3727, _3728), vec3(_3726, _3727, _3728)));
                        float _3733 = _3732 * _3726;
                        float _3734 = _3732 * _3727;
                        float _3735 = _3732 * _3728;
                        float _3742 = exp2(log2(1.0 / ((_3718 * 3.5) + 5.0)) * 0.25);
                        float _3743 = 1.0 - _1218;
                        float _3750 = sqrt(1.0 - ((1.0 - (_3743 * _3743)) * (1.0 - (_3742 * _3742))));
                        float _3751 = _3750 * _3750;
                        float _3752 = _3751 * _3751;
                        float _3753 = _3733 + _3698;
                        float _3754 = _3734 + _3699;
                        float _3755 = _3735 + _3700;
                        float _3759 = inversesqrt(dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755)));
                        float _3763 = dot(vec3(_1143, _1146, _1149), vec3(_3733, _3734, _3735));
                        float _5194 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                        float _3766 = isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0));
                        float _3767 = dot(vec3(_1143, _1146, _1149), vec3(_3759 * _3753, _3759 * _3754, _3759 * _3755));
                        float _5205 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                        float _3770 = isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0));
                        float _3774 = ((_3770 * _3770) * (_3752 + (-1.0))) + 1.0;
                        float _3775 = _3711 * _3751;
                        float _3776 = _3775 * _3775;
                        float _3779 = ((1.0 - _3776) * _3701) + _3776;
                        float _5216 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                        float _3780 = isnan(1.0) ? _5216 : (isnan(_5216) ? 1.0 : min(_5216, 1.0));
                        float _3781 = 1.0 - _3751;
                        float _3791 = (0.5 / (((_3780 * ((_3766 * _3781) + _3751)) + 9.9999999392252902907785028219223e-09) + (((_3780 * _3781) + _3751) * _3766))) * _3780;
                        float _5227 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                        float _3802 = (((_3752 * 3.1415927410125732421875) * (isnan(1.0) ? _5227 : (isnan(_5227) ? 1.0 : min(_5227, 1.0)))) / ((_3774 * _3774) * ((_3718 * 2.1991131305694580078125) + 3.141590118408203125))) * _3707;
                        _3555 = (_3722 * _3670.x) + _3628;
                        _3556 = (_3722 * _3670.y) + _3629;
                        _3557 = (_3722 * _3670.z) + _3630;
                        _3552 = (_3802 * _3687.x) + _3625;
                        _3553 = (_3802 * _3687.y) + _3626;
                        _3554 = (_3802 * _3687.z) + _3627;
                        if (_3632 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3625 = _3552;
                            _3626 = _3553;
                            _3627 = _3554;
                            _3628 = _3555;
                            _3629 = _3556;
                            _3630 = _3557;
                            _3631 = _3632;
                        }
                    }
                    frontier_phi_71_pred = _3557;
                    frontier_phi_71_pred_1 = _3556;
                    frontier_phi_71_pred_2 = _3555;
                    frontier_phi_71_pred_3 = _3554;
                    frontier_phi_71_pred_4 = _3553;
                    frontier_phi_71_pred_5 = _3552;
                }
                _3338 = frontier_phi_71_pred;
                _3336 = frontier_phi_71_pred_1;
                _3334 = frontier_phi_71_pred_2;
                _3332 = frontier_phi_71_pred_3;
                _3330 = frontier_phi_71_pred_4;
                _3328 = frontier_phi_71_pred_5;
                uint _3487 = _3486 + 1u;
                if (_3487 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3480 = _3328;
                    _3481 = _3330;
                    _3482 = _3332;
                    _3483 = _3334;
                    _3484 = _3336;
                    _3485 = _3338;
                    _3486 = _3487;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3327 = _3328;
            _3329 = _3330;
            _3331 = _3332;
            _3333 = _3334;
            _3335 = _3336;
            _3337 = _3338;
        }
        uvec4 _3341 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3342 = _3341.z;
        uint _3344 = (_3342 >> 8u) & 15u;
        float _3448;
        float _3450;
        float _3452;
        float _3454;
        float _3456;
        float _3458;
        if (((4294967295u << _3344) & _3247) == 0u)
        {
            _3448 = _3327;
            _3450 = _3329;
            _3452 = _3331;
            _3454 = _3333;
            _3456 = _3335;
            _3458 = _3337;
        }
        else
        {
            float _3473 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
            float _3474 = _3473 * _2306;
            float _3475 = _3473 * _2307;
            float _3476 = _3473 * _2308;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3344 < ((_3342 >> 12u) & 15u))
            {
                float _3449;
                float _3451;
                float _3453;
                float _3455;
                float _3457;
                float _3459;
                float _3608 = _3327;
                float _3609 = _3329;
                float _3610 = _3331;
                float _3611 = _3333;
                float _3612 = _3335;
                float _3613 = _3337;
                uint _3614 = _3344;
                uint _3623;
                bool _3624;
                for (;;)
                {
                    _3623 = texelFetch(g_lightClassification, int((((_3241 << 5u) + (_3227 << 9u)) + (_3614 << 2u)) >> 2u)).x;
                    _3624 = _3623 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3624)
                    {
                        frontier_phi_82_pred = _3613;
                        frontier_phi_82_pred_1 = _3612;
                        frontier_phi_82_pred_2 = _3611;
                        frontier_phi_82_pred_3 = _3610;
                        frontier_phi_82_pred_4 = _3609;
                        frontier_phi_82_pred_5 = _3608;
                    }
                    else
                    {
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3820;
                        float _3821;
                        float _4109;
                        float _4110;
                        float _4111;
                        float _4112;
                        float _4113;
                        float _4114;
                        float _3829 = _3608;
                        float _3830 = _3609;
                        float _3831 = _3610;
                        float _3832 = _3611;
                        float _3833 = _3612;
                        float _3834 = _3613;
                        uint _3835 = _3623;
                        uint _3836;
                        vec4 _3861;
                        float _3862;
                        vec4 _3877;
                        vec3 _3889;
                        vec4 _3904;
                        vec4 _3919;
                        float _3965;
                        bool _3966;
                        for (;;)
                        {
                            uint _3846 = ((_3614 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3835));
                            _3836 = (_3835 + 4294967295u) & _3835;
                            uint _3848 = _3846 * 40u;
                            _3861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 3u)).x));
                            _3862 = _3861.w;
                            uint _3864 = (_3846 * 40u) + 4u;
                            _3877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3864 + 3u)).x));
                            uint _3879 = (_3846 * 40u) + 8u;
                            _3889 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3879 + 2u)).x));
                            uint _3891 = (_3846 * 40u) + 16u;
                            _3904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3891 + 3u)).x));
                            uint _3906 = (_3846 * 40u) + 20u;
                            _3919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3906 + 3u)).x));
                            uint _3921 = (_3846 * 40u) + 24u;
                            vec4 _3934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3921 + 3u)).x));
                            uint _3940 = (_3846 * 40u) + 28u;
                            vec4 _3953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3940 + 3u)).x));
                            _3965 = fma(_2308, _3953.z, fma(_2307, _3953.y, _3953.x * _2306)) + _3953.w;
                            _3966 = !((fma(_2308, _3934.z, fma(_2307, _3934.y, _3934.x * _2306)) + _3934.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3966)
                            {
                                float _3993 = _3861.x - _2306;
                                float _3994 = _3861.y - _2307;
                                float _3995 = _3861.z - _2308;
                                float _3996 = dot(vec3(_3993, _3994, _3995), vec3(_3993, _3994, _3995));
                                float _3999 = inversesqrt(_3996);
                                float _4000 = _3999 * _3993;
                                float _4001 = _3999 * _3994;
                                float _4002 = _3999 * _3995;
                                float _4006 = 1.0 - (_3996 / (_3862 * _3862));
                                float _5238 = isnan(0.0) ? _4006 : (isnan(_4006) ? 0.0 : max(_4006, 0.0));
                                float _4007 = isnan(1.0) ? _5238 : (isnan(_5238) ? 1.0 : min(_5238, 1.0));
                                float _4011 = sqrt(_3996) * _3877.w;
                                float _4013 = 1.39999997615814208984375 / (_4011 + 1.39999997615814208984375);
                                float _4014 = _4013 * _4013;
                                float _4017 = ((1.0 - _4014) * dot(vec3(_4000, _4001, _4002), vec3(_1143, _1146, _1149))) + _4014;
                                float _4020 = _4011 * _4011;
                                float _4024 = (fma(_2308, _3904.z, fma(_2307, _3904.y, _3904.x * _2306)) + _3904.w) / _3965;
                                float _4025 = (fma(_2308, _3919.z, fma(_2307, _3919.y, _3919.x * _2306)) + _3919.w) / _3965;
                                float _4029 = 1.0 - dot(vec2(_4024, _4025), vec2(_4024, _4025));
                                float _5254 = isnan(0.0) ? _4029 : (isnan(_4029) ? 0.0 : max(_4029, 0.0));
                                float _4030 = isnan(1.0) ? _5254 : (isnan(_5254) ? 1.0 : min(_5254, 1.0));
                                float _4031 = _4030 * (((isnan(0.0) ? _4017 : (isnan(_4017) ? 0.0 : max(_4017, 0.0))) * _4007) / ((_4020 * 0.699999988079071044921875) + 1.0));
                                float _4043 = exp2(log2(1.0 / ((_4020 * 3.5) + 5.0)) * 0.25);
                                float _4044 = 1.0 - _1218;
                                float _4051 = sqrt(1.0 - ((1.0 - (_4044 * _4044)) * (1.0 - (_4043 * _4043))));
                                float _4052 = _4051 * _4051;
                                float _4053 = _4052 * _4052;
                                float _4054 = _4000 - _3474;
                                float _4055 = _4001 - _3475;
                                float _4056 = _4002 - _3476;
                                float _4060 = inversesqrt(dot(vec3(_4054, _4055, _4056), vec3(_4054, _4055, _4056)));
                                float _4064 = dot(vec3(_1143, _1146, _1149), vec3((-0.0) - _3474, (-0.0) - _3475, (-0.0) - _3476));
                                float _5265 = isnan(0.0) ? _4064 : (isnan(_4064) ? 0.0 : max(_4064, 0.0));
                                float _4067 = isnan(1.0) ? _5265 : (isnan(_5265) ? 1.0 : min(_5265, 1.0));
                                float _4068 = dot(vec3(_1143, _1146, _1149), vec3(_4060 * _4054, _4060 * _4055, _4060 * _4056));
                                float _5276 = isnan(0.0) ? _4068 : (isnan(_4068) ? 0.0 : max(_4068, 0.0));
                                float _4071 = isnan(1.0) ? _5276 : (isnan(_5276) ? 1.0 : min(_5276, 1.0));
                                float _4075 = ((_4071 * _4071) * (_4053 + (-1.0))) + 1.0;
                                float _4076 = _4013 * _4052;
                                float _4077 = _4076 * _4076;
                                float _4083 = ((1.0 - _4077) * dot(vec3(_1143, _1146, _1149), vec3(_4000, _4001, _4002))) + _4077;
                                float _5287 = isnan(0.0) ? _4083 : (isnan(_4083) ? 0.0 : max(_4083, 0.0));
                                float _4084 = isnan(1.0) ? _5287 : (isnan(_5287) ? 1.0 : min(_5287, 1.0));
                                float _4085 = 1.0 - _4052;
                                float _4095 = (0.5 / (((_4084 * ((_4067 * _4085) + _4052)) + 9.9999999392252902907785028219223e-09) + (((_4084 * _4085) + _4052) * _4067))) * _4084;
                                float _5298 = isnan(0.0) ? _4095 : (isnan(_4095) ? 0.0 : max(_4095, 0.0));
                                float _4105 = (_4030 * _4007) * (((_4053 * 3.1415927410125732421875) * (isnan(1.0) ? _5298 : (isnan(_5298) ? 1.0 : min(_5298, 1.0)))) / ((_4075 * _4075) * ((_4020 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4031 * _3877.z;
                                frontier_phi_88_pred_1 = _4031 * _3877.y;
                                frontier_phi_88_pred_2 = _4031 * _3877.x;
                                frontier_phi_88_pred_3 = _4105 * _3889.z;
                                frontier_phi_88_pred_4 = _4105 * _3889.y;
                                frontier_phi_88_pred_5 = _4105 * _3889.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4114 = frontier_phi_88_pred;
                            _4113 = frontier_phi_88_pred_1;
                            _4112 = frontier_phi_88_pred_2;
                            _4111 = frontier_phi_88_pred_3;
                            _4110 = frontier_phi_88_pred_4;
                            _4109 = frontier_phi_88_pred_5;
                            _3819 = _4112 + _3832;
                            _3820 = _4113 + _3833;
                            _3821 = _4114 + _3834;
                            _3816 = _4109 + _3829;
                            _3817 = _4110 + _3830;
                            _3818 = _4111 + _3831;
                            if (_3836 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3829 = _3816;
                                _3830 = _3817;
                                _3831 = _3818;
                                _3832 = _3819;
                                _3833 = _3820;
                                _3834 = _3821;
                                _3835 = _3836;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3821;
                        frontier_phi_82_pred_1 = _3820;
                        frontier_phi_82_pred_2 = _3819;
                        frontier_phi_82_pred_3 = _3818;
                        frontier_phi_82_pred_4 = _3817;
                        frontier_phi_82_pred_5 = _3816;
                    }
                    _3459 = frontier_phi_82_pred;
                    _3457 = frontier_phi_82_pred_1;
                    _3455 = frontier_phi_82_pred_2;
                    _3453 = frontier_phi_82_pred_3;
                    _3451 = frontier_phi_82_pred_4;
                    _3449 = frontier_phi_82_pred_5;
                    uint _3615 = _3614 + 1u;
                    if (_3615 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3608 = _3449;
                        _3609 = _3451;
                        _3610 = _3453;
                        _3611 = _3455;
                        _3612 = _3457;
                        _3613 = _3459;
                        _3614 = _3615;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3455;
                frontier_phi_63_64_ladder_1 = _3459;
                frontier_phi_63_64_ladder_2 = _3457;
                frontier_phi_63_64_ladder_3 = _3453;
                frontier_phi_63_64_ladder_4 = _3451;
                frontier_phi_63_64_ladder_5 = _3449;
            }
            else
            {
                frontier_phi_63_64_ladder = _3333;
                frontier_phi_63_64_ladder_1 = _3337;
                frontier_phi_63_64_ladder_2 = _3335;
                frontier_phi_63_64_ladder_3 = _3331;
                frontier_phi_63_64_ladder_4 = _3329;
                frontier_phi_63_64_ladder_5 = _3327;
            }
            _3448 = frontier_phi_63_64_ladder_5;
            _3450 = frontier_phi_63_64_ladder_4;
            _3452 = frontier_phi_63_64_ladder_3;
            _3454 = frontier_phi_63_64_ladder;
            _3456 = frontier_phi_63_64_ladder_2;
            _3458 = frontier_phi_63_64_ladder_1;
        }
        float _3463 = isnan(1.0) ? _1202 : (isnan(_1202) ? 1.0 : min(_1202, 1.0));
        _3260 = (_3463 * _3454) + _2772;
        _3262 = (_3463 * _3456) + _2774;
        _3264 = (_3463 * _3458) + _2776;
        _3266 = ((_3448 * _1186) * _3463) + _3110;
        _3268 = ((_3450 * _1188) * _3463) + _3112;
        _3270 = ((_3452 * _1189) * _3463) + _3114;
    }
    else
    {
        _3260 = _2772;
        _3262 = _2774;
        _3264 = _2776;
        _3266 = _3110;
        _3268 = _3112;
        _3270 = _3114;
    }
    float _5314 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _5325 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _5336 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _3287 = ((isnan(1.0) ? _5314 : (isnan(_5314) ? 1.0 : min(_5314, 1.0))) * (_3260 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1202))) + ((_3266 + ((isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0))) * _2039)) * cbPerFrame._m0[3u].x);
    float _3288 = ((isnan(1.0) ? _5325 : (isnan(_5325) ? 1.0 : min(_5325, 1.0))) * (_3262 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1202))) + ((_3268 + ((isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0))) * _2039)) * cbPerFrame._m0[3u].x);
    float _3289 = ((isnan(1.0) ? _5336 : (isnan(_5336) ? 1.0 : min(_5336, 1.0))) * (_3264 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1202))) + ((_3270 + ((isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0))) * _2039)) * cbPerFrame._m0[3u].x);
    uint _3290 = _275 + 6u;
    float _3298 = _1124 / cbSceneParam._m0[86u].x;
    float _3299 = _1125 / cbSceneParam._m0[86u].y;
    vec4 _3313 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3298, _3299, (log2((isnan(cbSceneParam._m0[77u].w) ? _1047 : (isnan(_1047) ? cbSceneParam._m0[77u].w : min(_1047, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3315 = _3313.x;
    float _3316 = _3313.y;
    float _3317 = _3313.z;
    float _3318 = _3313.w;
    float _3390;
    float _3392;
    float _3394;
    float _3396;
    if (_1047 > cbSceneParam._m0[78u].w)
    {
        float _3352 = isnan(_1047) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1047 : min(cbSceneParam._m0[80u].w, _1047));
        float _3353 = _3352 / _1047;
        float _3364 = _3353 * _1097;
        float _3365 = _1098 * _3353;
        float _3366 = (-0.0) - _3365;
        float _3368 = _3353 * _1099;
        float _3370 = (cbSceneParam._m0[77u].w * _3366) / _3352;
        float _3371 = _3370 + cbSceneParam._m0[79u].w;
        float _3372 = cbSceneParam._m0[79u].w - _3365;
        float _3378 = sqrt(((_3364 * _3364) + (_3365 * _3365)) + (_3368 * _3368));
        float _3381 = (1.0 - (cbSceneParam._m0[77u].w / _3352)) * _3378;
        float _3386 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3388 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3565;
        if (abs((_3366 - _3370) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3565 = ((((_3371 > 0.0) ? exp2(_3386 * _3371) : (2.0 - exp2(_3388 * _3371))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3381;
        }
        else
        {
            float _3509 = 1.0 / cbSceneParam._m0[80u].x;
            float _3510 = isnan(_3372) ? _3371 : (isnan(_3371) ? _3372 : max(_3371, _3372));
            float _3511 = isnan(_3372) ? _3371 : (isnan(_3371) ? _3372 : min(_3371, _3372));
            float _3520 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : min(_3510, 0.0));
            float _3521 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : min(_3511, 0.0));
            _3565 = ((abs(_3378 / _3366) * cbSceneParam._m0[80u].y) * ((((_3520 - _3521) * 2.0) - ((exp2(_3386 * (isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0)))) - exp2(_3386 * (isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0))))) * _3509)) - ((exp2(_3388 * _3520) - exp2(_3388 * _3521)) * _3509))) + (_3381 * cbSceneParam._m0[80u].z);
        }
        vec4 _3567 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3298, _3299, 1.0), 0.0);
        float _3576 = exp2((_3565 * (-1.44269502162933349609375)) * (1.0 - _3567.w));
        float _3577 = log2(_3576);
        float _3593 = log2(_3318);
        _3390 = (exp2(_3593 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3577 * cbSceneParam._m0[78u].x)) * _3567.x) / cbSceneParam._m0[78u].x)) + _3315;
        _3392 = (exp2(_3593 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3577 * cbSceneParam._m0[78u].y)) * _3567.y) / cbSceneParam._m0[78u].y)) + _3316;
        _3394 = (exp2(_3593 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3577 * cbSceneParam._m0[78u].z)) * _3567.z) / cbSceneParam._m0[78u].z)) + _3317;
        _3396 = _3576 * _3318;
    }
    else
    {
        _3390 = _3315;
        _3392 = _3316;
        _3394 = _3317;
        _3396 = _3318;
    }
    bool _3603;
    vec4 _3406;
    vec4 _3428;
    float _3430;
    float _3434;
    float _3435;
    float _3436;
    float _3437;
    bool _3447;
    for (;;)
    {
        _3406 = cbMatDynParam._m0[0u];
        float _3408 = roundEven(_3406.y);
        bool _3409 = _3408 == 3.0;
        float _3410 = log2(_3396);
        float _3417 = exp2(_3410 * cbSceneParam._m0[78u].x) * _3287;
        float _3418 = exp2(_3410 * cbSceneParam._m0[78u].y) * _3288;
        float _3419 = exp2(_3410 * cbSceneParam._m0[78u].z) * _3289;
        float _3426 = _1113 + (-0.5);
        _3428 = cbMtdParam._m0[1u];
        _3430 = _3428.y * _3426;
        float _3433 = (_3408 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3434 = _3433 * (_3409 ? _3417 : (_3417 + (cbSceneParam._m0[72u].w * _3390)));
        _3435 = _3433 * (_3409 ? _3418 : (_3418 + (cbSceneParam._m0[72u].w * _3392)));
        _3436 = _3433 * (_3409 ? _3419 : (_3419 + (cbSceneParam._m0[72u].w * _3394)));
        _3437 = _3426 * 0.999000012874603271484375;
        _3447 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3447)
        {
            if ((cbInstanceData._m0[_275 + 7u].x + _3437) < 0.5)
            {
                _3603 = true;
                break;
            }
        }
        uint _3544 = _1162 + uint(_3406.w);
        if ((cbInstanceData._m0[_3544].w < 1.0) && ((cbInstanceData._m0[_3544].w + _3437) < 0.5))
        {
            _3603 = true;
            break;
        }
        if ((_3430 + 1.0) < _3428.x)
        {
            _3603 = true;
            break;
        }
        _3603 = false;
        break;
    }
    float _3807;
    if (_3603)
    {
        discard_state = true;
        _3807 = 0.0;
    }
    else
    {
        _3807 = cbInstanceData._m0[_3290].w;
    }
    SV_Target.x = _3434;
    SV_Target.y = _3435;
    SV_Target.z = _3436;
    SV_Target.w = _3807;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3290].w;
    discard_exit();
}


