#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1408;
float _4071;
float _4072;
float _4073;
float _4074;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _233 = _232 * _224;
    float _234 = _232 * _225;
    float _235 = _232 * _226;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _362.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[23u].w) + _412) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4083 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _437 = (_430 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _438 = (_430 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _439 = (_430 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _362.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[23u].w) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4094 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _516 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437);
    float _519 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438);
    float _522 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439);
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _559 = _557.x;
    float _560 = _557.y;
    float _561 = _557.z;
    float _568 = ((_540.x - _559) * _430) + _559;
    float _569 = ((_540.y - _560) * _430) + _560;
    float _570 = ((_540.z - _561) * _430) + _561;
    vec4 _582 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _595 = ((_582.z - _570) * _503) + _570;
    float _598 = ((((_582.x - _568) * _503) + _568) * 2.0) + (-1.0);
    float _600 = ((((_582.y - _569) * _503) + _569) * 2.0) + (-1.0);
    float _601 = dot(vec2(_598, _600), vec2(_598, _600));
    float _4105 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _606 = sqrt(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _632 = (((_620.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _598;
    float _633 = (((_620.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _600;
    float _636 = fma(_606, _240, fma(_633, _247, _632 * _233));
    float _639 = fma(_606, _241, fma(_633, _248, _632 * _234));
    float _642 = fma(_606, _242, fma(_633, _249, _632 * _235));
    float _646 = inversesqrt(dot(vec3(_636, _639, _642), vec3(_636, _639, _642)));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _675 = _673.x;
    float _676 = 1.0 - _675;
    float _685 = (cbMtdParam._m0[19u].x + dot(vec4(_646 * _636, _646 * _639, _646 * _642, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_675 - _676) * cbMtdParam._m0[24u].z) + _676) * cbMtdParam._m0[21u].z);
    float _4116 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _686 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _693 = (_686 * (cbMtdParam._m0[17u].x - _516)) + _516;
    float _694 = (_686 * (cbMtdParam._m0[17u].y - _519)) + _519;
    float _695 = (_686 * (cbMtdParam._m0[17u].z - _522)) + _522;
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _723 = _721.x;
    float _740 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _723) * _430) + _723;
    float _757 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _740) * _503) + _740;
    float _761 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _757) * cbMtdParam._m0[19u].z) + _757;
    float _763 = _761 - (_761 * _686);
    float _767 = (cbMtdParam._m0[19u].w * (_620.z - _595)) + _595;
    vec4 _780 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _787 = (_780.x * 2.0) + (-1.0);
    float _788 = (_780.y * 2.0) + (-1.0);
    float _789 = dot(vec2(_787, _788), vec2(_787, _788));
    float _4127 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _797 = ((_780.z - _767) * _686) + _767;
    float _807 = ((sqrt(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) - _606) * _686) + _606;
    float _810 = (((_787 - _632) * _686) + _632) + (cbMtdParam._m0[21u].x * _632);
    float _811 = (((_788 - _633) * _686) + _633) + (cbMtdParam._m0[21u].x * _633);
    float _813 = cbMtdParam._m0[22u].x + _620.w;
    float _816 = fma(_807, _240, fma(_811, _247, _810 * _233));
    float _819 = fma(_807, _241, fma(_811, _248, _810 * _234));
    float _822 = fma(_807, _242, fma(_811, _249, _810 * _235));
    float _826 = inversesqrt(dot(vec3(_816, _819, _822), vec3(_816, _819, _822)));
    float _827 = _826 * _816;
    float _828 = _826 * _819;
    float _829 = _826 * _822;
    float _4138 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _830 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _4149 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4160 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4171 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _4182 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4193 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _835 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _849 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _900 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _890);
    float _901 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _890);
    float _902 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _890);
    float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
    float _907 = _900 * _906;
    float _908 = _901 * _906;
    float _909 = _902 * _906;
    vec4 _914 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _916 = _914.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1088 = sqrt(((_900 * _900) + (_901 * _901)) + (_902 * _902));
        float _1094 = (cbMatDynParam._m0[5u].x * _1088) + cbMatDynParam._m0[5u].y;
        float _4204 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1099 = (cbMatDynParam._m0[5u].z * _1088) + cbMatDynParam._m0[5u].w;
        float _4215 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) - _1095)) + _1095) < ((_916 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _927 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _928 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _946 = fma(_829, cbSceneParam._m0[5u].z, fma(_828, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _827));
    float _949 = fma(_829, cbSceneParam._m0[6u].z, fma(_828, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _827));
    float _952 = fma(_829, cbSceneParam._m0[7u].z, fma(_828, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _827));
    uint _965 = _252 + 9u;
    uint _966 = _965 + uint(cbMatDynParam._m0[0u].w);
    float _972 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * cbInstanceData._m0[_966].x;
    float _973 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * cbInstanceData._m0[_966].y;
    float _974 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * cbInstanceData._m0[_966].z;
    float _4226 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _975 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _4237 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _4248 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _978 = 1.0 - _835;
    float _979 = _975 * _978;
    float _980 = _976 * _978;
    float _981 = _977 * _978;
    float _986 = (_975 + (-0.039999999105930328369140625)) * _835;
    float _987 = (_976 + (-0.039999999105930328369140625)) * _835;
    float _988 = (_977 + (-0.039999999105930328369140625)) * _835;
    float _989 = _986 + 0.039999999105930328369140625;
    float _991 = _987 + 0.039999999105930328369140625;
    float _992 = _988 + 0.039999999105930328369140625;
    vec4 _1001 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _927, cbSceneParam._m0[86u].y * _928));
    float _1005 = ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * TEXCOORD_5.w) * _1001.x;
    float _1006 = dot(vec3(_827, _828, _829), vec3(_907, _908, _909));
    float _1009 = _1006 * 2.0;
    float _1013 = (_1009 * _827) - _907;
    float _1014 = (_1009 * _828) - _908;
    float _1015 = (_1009 * _829) - _909;
    float _1019 = abs(dot(vec3(_907, _908, _909), vec3(_827, _828, _829)));
    float _4259 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1021 = sqrt(_830);
    float _1034 = exp2((_1021 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1021 * 3.0));
    float _1040 = (1.0 - _1034) * ((_1021 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1041 = _1034 * _1021;
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1407;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1132 = fma(_1077, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1069));
        float _1136 = fma(_1077, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1069));
        float _1140 = fma(_1077, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1069));
        float _1165 = _1069 + _827;
        float _1166 = _1073 + _828;
        float _1167 = _1077 + _829;
        float _1177 = fma(_1167, cbModelParam._m0[26u].z, fma(_1166, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1165)) - _1132;
        float _1178 = fma(_1167, cbModelParam._m0[27u].z, fma(_1166, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1165)) - _1136;
        float _1179 = fma(_1167, cbModelParam._m0[28u].z, fma(_1166, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1165)) - _1140;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1132 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1136 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[34u].z) + ((((((_1140 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1235 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1201.x + (-0.5));
        float _1237 = _1235 * (_1201.y + (-0.5));
        float _1238 = _1235 * (_1201.z + (-0.5));
        float _1245 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1208.x + (-0.5));
        float _1247 = _1245 * (_1208.y + (-0.5));
        float _1248 = _1245 * (_1208.z + (-0.5));
        float _1255 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1215.x + (-0.5));
        float _1257 = _1255 * (_1215.y + (-0.5));
        float _1258 = _1255 * (_1215.z + (-0.5));
        float _1265 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1222.x + (-0.5));
        float _1267 = _1265 * (_1222.y + (-0.5));
        float _1268 = _1265 * (_1222.z + (-0.5));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = _1236 * 0.5;
        float _1273 = _1246 * 0.5;
        float _1274 = _1256 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1289 = (dot(vec3(_827, _828, _829), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1299 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4307 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1301 + 1.0))) + _1306) * _1269;
        float _1316 = _1237 * 0.5;
        float _1317 = _1247 * 0.5;
        float _1318 = _1257 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_827, _828, _829), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4340 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1343 + 1.0))) + _1348) * _1270;
        float _1358 = _1238 * 0.5;
        float _1359 = _1248 * 0.5;
        float _1360 = _1258 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_827, _828, _829), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4351 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4362 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4373 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_1385 + 1.0))) + _1390) * _1271;
        _1407 = _1238;
        _1409 = _1237;
        _1410 = _1236;
        _1411 = _1248;
        _1412 = _1247;
        _1413 = _1246;
        _1414 = _1258;
        _1415 = _1257;
        _1416 = _1256;
        _1417 = _1271;
        _1418 = _1270;
        _1419 = _1269;
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
    }
    else
    {
        _1407 = _1408;
        _1409 = _1408;
        _1410 = _1408;
        _1411 = _1408;
        _1412 = _1408;
        _1413 = _1408;
        _1414 = _1408;
        _1415 = _1408;
        _1416 = _1408;
        _1417 = _1408;
        _1418 = _1408;
        _1419 = _1408;
        _1420 = 0.0;
        _1421 = 0.0;
        _1422 = 0.0;
    }
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1449 = fma(_1077, cbModelParam._m0[30u].z, fma(_1073, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069));
        float _1453 = fma(_1077, cbModelParam._m0[31u].z, fma(_1073, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069));
        float _1457 = fma(_1077, cbModelParam._m0[32u].z, fma(_1073, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069));
        float _1480 = _1069 + _827;
        float _1481 = _1073 + _828;
        float _1482 = _1077 + _829;
        float _1492 = fma(_1482, cbModelParam._m0[30u].z, fma(_1481, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1480)) - _1449;
        float _1493 = fma(_1482, cbModelParam._m0[31u].z, fma(_1481, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1480)) - _1453;
        float _1494 = fma(_1482, cbModelParam._m0[32u].z, fma(_1481, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1480)) - _1457;
        float _1498 = inversesqrt(dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494)));
        float _1511 = ((_1498 * _1492) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1449 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1498 * _1493) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1453 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1498 * _1494) / cbModelParam._m0[35u].z) + ((((((_1457 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        float _1548 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1515.x + (-0.5));
        float _1550 = _1548 * (_1515.y + (-0.5));
        float _1551 = _1548 * (_1515.z + (-0.5));
        float _1558 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1522.x + (-0.5));
        float _1560 = _1558 * (_1522.y + (-0.5));
        float _1561 = _1558 * (_1522.z + (-0.5));
        float _1568 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1529.x + (-0.5));
        float _1570 = _1568 * (_1529.y + (-0.5));
        float _1571 = _1568 * (_1529.z + (-0.5));
        float _1578 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1536.x + (-0.5));
        float _1580 = _1578 * (_1536.y + (-0.5));
        float _1581 = _1578 * (_1536.z + (-0.5));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = _1549 * 0.5;
        float _1586 = _1559 * 0.5;
        float _1587 = _1569 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_827, _828, _829), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4436 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1612 + 1.0))) + _1617) * _1582;
        float _1627 = _1550 * 0.5;
        float _1628 = _1560 * 0.5;
        float _1629 = _1570 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_827, _828, _829), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4447 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4458 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4469 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_1654 + 1.0))) + _1659) * _1583;
        float _1669 = _1551 * 0.5;
        float _1670 = _1561 * 0.5;
        float _1671 = _1571 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_827, _828, _829), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4480 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4491 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4502 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_1696 + 1.0))) + _1701) * _1584;
        _1718 = _1551;
        _1719 = _1550;
        _1720 = _1549;
        _1721 = _1561;
        _1722 = _1560;
        _1723 = _1559;
        _1724 = _1571;
        _1725 = _1570;
        _1726 = _1569;
        _1727 = _1584;
        _1728 = _1583;
        _1729 = _1582;
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
    }
    else
    {
        _1718 = _1408;
        _1719 = _1408;
        _1720 = _1408;
        _1721 = _1408;
        _1722 = _1408;
        _1723 = _1408;
        _1724 = _1408;
        _1725 = _1408;
        _1726 = _1408;
        _1727 = _1408;
        _1728 = _1408;
        _1729 = _1408;
        _1730 = 0.0;
        _1731 = 0.0;
        _1732 = 0.0;
    }
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1420)) + _1420;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1421)) + _1421;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1422)) + _1422;
    float _1765 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1743, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1743, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1743, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1742));
    float _1786 = _1013 * 0.5;
    float _1787 = _1014 * 0.5;
    float _1788 = _1015 * 0.5;
    float _1789 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1792 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1795 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1829;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1802 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1407, _1411, _1414, _1417));
        float _1806 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1409, _1412, _1415, _1418));
        float _1810 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1410, _1413, _1416, _1419));
        float _1817 = dot(vec4(cbModelParam._m0[39u]), vec4(_1786, _1787, _1788, 1.0));
        _1829 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1817) ? 0.0 : (isnan(0.0) ? _1817 : max(0.0, _1817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1829 = 1.0;
    }
    float _1840;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1831 = dot(vec4(cbModelParam._m0[40u]), vec4(_1786, _1787, _1788, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1844 = (_1840 * cbModelParam._m0[1u].x) + (_1829 * (1.0 - cbModelParam._m0[1u].x));
    float _1854 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _830);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1854 : min(cbModelParam._m0[25u].z, _1854));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1903 = fma(_1077, cbModelParam._m0[13u].z, fma(_1073, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069)) + cbModelParam._m0[13u].w;
        float _1907 = fma(_1077, cbModelParam._m0[14u].z, fma(_1073, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069)) + cbModelParam._m0[14u].w;
        float _1911 = fma(_1077, cbModelParam._m0[15u].z, fma(_1073, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069)) + cbModelParam._m0[15u].w;
        float _1914 = fma(_1015, cbModelParam._m0[13u].z, fma(_1014, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1013));
        float _1917 = fma(_1015, cbModelParam._m0[14u].z, fma(_1014, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1013));
        float _1920 = fma(_1015, cbModelParam._m0[15u].z, fma(_1014, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1013));
        float _1948;
        if (_1914 > 0.0)
        {
            _1948 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1948 = frontier_phi_17_15_ladder;
        }
        float _2120;
        if (_1917 > 0.0)
        {
            _2120 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2120 = frontier_phi_26_22_ladder;
        }
        float _2415;
        if (_1920 > 0.0)
        {
            _2415 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2415 = frontier_phi_38_33_ladder;
        }
        float _2417 = isnan(_2120) ? _1948 : (isnan(_1948) ? _2120 : min(_1948, _2120));
        float _2418 = isnan(_2415) ? _2417 : (isnan(_2417) ? _2415 : min(_2417, _2415));
        float _2422 = (_2418 * _1914) + _1903;
        float _2423 = (_2418 * _1917) + _1907;
        float _2424 = (_2418 * _1920) + _1911;
        float _2425 = _2418 * 9.9999997473787516355514526367188e-05;
        float _2427 = (-1.0) - _2425;
        float _2429 = _2425 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2424 > _2429) || ((_2424 < _2427) || ((_2423 > _2429) || ((_2423 < _2427) || ((_2422 < _2427) || (_2422 > _2429))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2424, cbModelParam._m0[9u].z, fma(_2423, cbModelParam._m0[9u].y, _2422 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2424, cbModelParam._m0[10u].z, fma(_2423, cbModelParam._m0[10u].y, _2422 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2424, cbModelParam._m0[11u].z, fma(_2423, cbModelParam._m0[11u].y, _2422 * cbModelParam._m0[11u].x))), _1855);
            frontier_phi_16_38_ladder = _2569.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2569.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2569.x * cbModelParam._m0[1u].y;
        }
        _1936 = frontier_phi_16_38_ladder_2;
        _1938 = frontier_phi_16_38_ladder_1;
        _1940 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1013, _1014, _1015), _1855);
        _1936 = _1924.x * cbModelParam._m0[1u].y;
        _1938 = _1924.y * cbModelParam._m0[1u].y;
        _1940 = _1924.z * cbModelParam._m0[1u].y;
    }
    float _1944 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _830);
    float _1945 = isnan(_1944) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1944 : min(cbModelParam._m0[25u].w, _1944));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1999 = fma(_1077, cbModelParam._m0[21u].z, fma(_1073, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069)) + cbModelParam._m0[21u].w;
        float _2003 = fma(_1077, cbModelParam._m0[22u].z, fma(_1073, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069)) + cbModelParam._m0[22u].w;
        float _2007 = fma(_1077, cbModelParam._m0[23u].z, fma(_1073, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069)) + cbModelParam._m0[23u].w;
        float _2010 = fma(_1015, cbModelParam._m0[21u].z, fma(_1014, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1013));
        float _2013 = fma(_1015, cbModelParam._m0[22u].z, fma(_1014, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1013));
        float _2016 = fma(_1015, cbModelParam._m0[23u].z, fma(_1014, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1013));
        float _2125;
        if (_2010 > 0.0)
        {
            _2125 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2125 = frontier_phi_28_24_ladder;
        }
        float _2442;
        if (_2013 > 0.0)
        {
            _2442 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2442 = frontier_phi_40_35_ladder;
        }
        float _2780;
        if (_2016 > 0.0)
        {
            _2780 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2780 = frontier_phi_50_47_ladder;
        }
        float _2782 = isnan(_2442) ? _2125 : (isnan(_2125) ? _2442 : min(_2125, _2442));
        float _2783 = isnan(_2780) ? _2782 : (isnan(_2782) ? _2780 : min(_2782, _2780));
        float _2787 = (_2783 * _2010) + _1999;
        float _2788 = (_2783 * _2013) + _2003;
        float _2789 = (_2783 * _2016) + _2007;
        float _2790 = _2783 * 9.9999997473787516355514526367188e-05;
        float _2791 = (-1.0) - _2790;
        float _2793 = _2790 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2789 > _2793) || ((_2789 < _2791) || ((_2788 > _2793) || ((_2788 < _2791) || ((_2787 < _2791) || (_2787 > _2793))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2911 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2789, cbModelParam._m0[17u].z, fma(_2788, cbModelParam._m0[17u].y, _2787 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2789, cbModelParam._m0[18u].z, fma(_2788, cbModelParam._m0[18u].y, _2787 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2789, cbModelParam._m0[19u].z, fma(_2788, cbModelParam._m0[19u].y, _2787 * cbModelParam._m0[19u].x))), _1945);
            frontier_phi_25_50_ladder = _2911.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2911.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2911.x * cbModelParam._m0[1u].z;
        }
        _2035 = frontier_phi_25_50_ladder_2;
        _2037 = frontier_phi_25_50_ladder_1;
        _2039 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2019 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1013, _1014, _1015), _1945);
        _2035 = _2019.x * cbModelParam._m0[1u].z;
        _2037 = _2019.y * cbModelParam._m0[1u].z;
        _2039 = _2019.z * cbModelParam._m0[1u].z;
    }
    float _2052 = (((_1040 * _989) + _1041) * _1005) * ((cbModelParam._m0[1u].w * (_2035 - _1936)) + _1936);
    float _2054 = (((_1040 * _991) + _1041) * _1005) * ((cbModelParam._m0[1u].w * (_2037 - _1938)) + _1938);
    float _2056 = (((_1040 * _992) + _1041) * _1005) * ((cbModelParam._m0[1u].w * (_2039 - _1940)) + _1940);
    float _2059 = fma(_2056, cbSceneParam._m0[89u].z, fma(_2054, cbSceneParam._m0[89u].y, _2052 * cbSceneParam._m0[89u].x));
    float _2062 = fma(_2056, cbSceneParam._m0[90u].z, fma(_2054, cbSceneParam._m0[90u].y, _2052 * cbSceneParam._m0[90u].x));
    float _2065 = fma(_2056, cbSceneParam._m0[91u].z, fma(_2054, cbSceneParam._m0[91u].y, _2052 * cbSceneParam._m0[91u].x));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2103 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2107 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2111 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2112 = _2099 / _2111;
    float _2113 = _2103 / _2111;
    float _2114 = _2107 / _2111;
    float _2261;
    float _2262;
    float _2263;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2141 = ((uint(_2114 > cbSceneParam._m0[59u].y) + uint(_2114 > cbSceneParam._m0[59u].x)) + uint(_2114 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2142 = _2141 + 43u;
        uint _2150 = _2141 + 44u;
        uint _2158 = _2141 + 45u;
        uint _2166 = _2141 + 46u;
        float _2177 = fma(_2111, cbSceneParam._m0[_2142].w, fma(_2107, cbSceneParam._m0[_2142].z, fma(_2103, cbSceneParam._m0[_2142].y, _2099 * cbSceneParam._m0[_2142].x)));
        float _2181 = fma(_2111, cbSceneParam._m0[_2150].w, fma(_2107, cbSceneParam._m0[_2150].z, fma(_2103, cbSceneParam._m0[_2150].y, _2099 * cbSceneParam._m0[_2150].x)));
        float _2189 = fma(_2111, cbSceneParam._m0[_2166].w, fma(_2107, cbSceneParam._m0[_2166].z, fma(_2103, cbSceneParam._m0[_2166].y, _2099 * cbSceneParam._m0[_2166].x)));
        float _2194 = cbSceneParam._m0[33u].z * _2189;
        float _2196 = cbSceneParam._m0[33u].w * _2189;
        float _2199 = fma(_2111, cbSceneParam._m0[_2158].w, fma(_2107, cbSceneParam._m0[_2158].z, fma(_2103, cbSceneParam._m0[_2158].y, _2099 * cbSceneParam._m0[_2158].x))) / _2189;
        float _2247 = (cbSceneParam._m0[33u].x - sqrt(((_2113 * _2113) + (_2112 * _2112)) + (_2114 * _2114))) * cbSceneParam._m0[33u].y;
        float _4628 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2254 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 + _2177) / _2189, (_2196 + _2181) / _2189), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2196 + _2177) / _2189, (_2181 - _2194) / _2189), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2177 - _2194) / _2189, (_2181 - _2196) / _2189), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2177 - _2196) / _2189, (_2194 + _2181) / _2189), _2199), 0.0)).x), vec4(0.25)));
        _2261 = 1.0 - (_2254 * cbSceneParam._m0[34u].x);
        _2262 = 1.0 - (_2254 * cbSceneParam._m0[34u].y);
        _2263 = 1.0 - (_2254 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2261 = 1.0;
        _2262 = 1.0;
        _2263 = 1.0;
    }
    float _2327;
    float _2329;
    float _2331;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2315 = fma(_2111, cbSceneParam._m0[63u].w, fma(_2107, cbSceneParam._m0[63u].z, fma(_2103, cbSceneParam._m0[63u].y, _2099 * cbSceneParam._m0[63u].x)));
        float _2316 = fma(_2111, cbSceneParam._m0[60u].w, fma(_2107, cbSceneParam._m0[60u].z, fma(_2103, cbSceneParam._m0[60u].y, _2099 * cbSceneParam._m0[60u].x))) / _2315;
        float _2317 = fma(_2111, cbSceneParam._m0[61u].w, fma(_2107, cbSceneParam._m0[61u].z, fma(_2103, cbSceneParam._m0[61u].y, _2099 * cbSceneParam._m0[61u].x))) / _2315;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2316 >= cbSceneParam._m0[64u].x) && (_2317 >= cbSceneParam._m0[64u].y)) && (_2316 <= cbSceneParam._m0[64u].z)) && (_2317 <= cbSceneParam._m0[64u].w))
        {
            float _2455 = fma(_2111, cbSceneParam._m0[62u].w, fma(_2107, cbSceneParam._m0[62u].z, fma(_2103, cbSceneParam._m0[62u].y, _2099 * cbSceneParam._m0[62u].x))) / _2315;
            float _2459 = isnan(cbSceneParam._m0[41u].w) ? _2455 : (isnan(_2455) ? cbSceneParam._m0[41u].w : max(_2455, cbSceneParam._m0[41u].w));
            float _2502 = (cbSceneParam._m0[33u].x - sqrt(((_2113 * _2113) + (_2112 * _2112)) + (_2114 * _2114))) * cbSceneParam._m0[33u].y;
            float _4644 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
            float _2509 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2316, cbSceneParam._m0[33u].w + _2317), _2459), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2316, _2317 - cbSceneParam._m0[33u].z), _2459), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2316 - cbSceneParam._m0[33u].z, _2317 - cbSceneParam._m0[33u].w), _2459), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2316 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2317), _2459), 0.0)).x), vec4(0.25)));
            float _2513 = 1.0 - (_2509 * cbSceneParam._m0[34u].x);
            float _2514 = 1.0 - (_2509 * cbSceneParam._m0[34u].y);
            float _2515 = 1.0 - (_2509 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2515) ? _2263 : (isnan(_2263) ? _2515 : min(_2263, _2515));
            frontier_phi_37_36_ladder_1 = isnan(_2514) ? _2262 : (isnan(_2262) ? _2514 : min(_2262, _2514));
            frontier_phi_37_36_ladder_2 = isnan(_2513) ? _2261 : (isnan(_2261) ? _2513 : min(_2261, _2513));
        }
        else
        {
            frontier_phi_37_36_ladder = _2263;
            frontier_phi_37_36_ladder_1 = _2262;
            frontier_phi_37_36_ladder_2 = _2261;
        }
        _2327 = frontier_phi_37_36_ladder_2;
        _2329 = frontier_phi_37_36_ladder_1;
        _2331 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2327 = _2261;
        _2329 = _2262;
        _2331 = _2263;
    }
    uvec4 _2336 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2338 = _2336.x * 14u;
    uint _2339 = _2338 + 13u;
    float _2346 = _1005 + (-1.0);
    float _2351 = (cbLight._m0[_2339].x * _2346) + 1.0;
    float _2352 = (cbLight._m0[_2339].y * _2346) + 1.0;
    float _2353 = (cbLight._m0[_2339].z * _2346) + 1.0;
    float _2354 = (cbLight._m0[_2339].w * _2346) + 1.0;
    uint _2355 = _2338 + 5u;
    float _2361 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
    uint _2365 = _2338 + 4u;
    float _2374 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
    uint _2378 = _2338 | 1u;
    float _2389 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_827, _828, _829));
    float _2392 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_827, _828, _829));
    float _4680 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _4691 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2397 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * 0.3183098733425140380859375;
    float _2399 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * 0.3183098733425140380859375;
    float _2406 = ((cbLight._m0[_2355].x * _2361) * _2399) + (((cbLight._m0[_2365].x * _2327) * _2374) * _2397);
    float _2407 = ((_2361 * cbLight._m0[_2355].y) * _2399) + (((cbLight._m0[_2365].y * _2329) * _2374) * _2397);
    float _2408 = ((_2361 * cbLight._m0[_2355].z) * _2399) + (((cbLight._m0[_2365].z * _2331) * _2374) * _2397);
    uvec4 _2412 = floatBitsToUint(cbLight._m0[_2338 + 12u]);
    bool _2414 = _2412.x == 0u;
    float _2516;
    float _2518;
    float _2520;
    if (_2414)
    {
        _2516 = _2406;
        _2518 = _2407;
        _2520 = _2408;
    }
    else
    {
        uint _2524 = _2338 + 6u;
        float _2540 = (dot(vec3(cbLight._m0[_2338 + 2u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2541 = _2540 * _2540;
        float _4702 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2542 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2543 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2516 = (((cbLight._m0[_2524].x * 0.3183098733425140380859375) * _2542) * _2543) + _2406;
        _2518 = (((cbLight._m0[_2524].y * 0.3183098733425140380859375) * _2542) * _2543) + _2407;
        _2520 = (((cbLight._m0[_2524].z * 0.3183098733425140380859375) * _2542) * _2543) + _2408;
    }
    bool _2523 = _2412.y == 0u;
    float _2578;
    float _2580;
    float _2582;
    if (_2523)
    {
        _2578 = _2516;
        _2580 = _2518;
        _2582 = _2520;
    }
    else
    {
        uint _2751 = _2338 + 7u;
        float _2767 = (dot(vec3(cbLight._m0[_2338 + 3u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2768 = _2767 * _2767;
        float _4718 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2769 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2770 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2578 = (((cbLight._m0[_2751].x * 0.3183098733425140380859375) * _2769) * _2770) + _2516;
        _2580 = (((cbLight._m0[_2751].y * 0.3183098733425140380859375) * _2769) * _2770) + _2518;
        _2582 = (((cbLight._m0[_2751].z * 0.3183098733425140380859375) * _2769) * _2770) + _2520;
    }
    uint _2585 = _2338 + 8u;
    float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2338].w)) * _830) * 0.949999988079071044921875);
    float _2599 = _2598 * _2598;
    float _2600 = cbLight._m0[_2338].x + _907;
    float _2601 = cbLight._m0[_2338].y + _908;
    float _2602 = cbLight._m0[_2338].z + _909;
    float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
    float _2607 = _2606 * _2600;
    float _2608 = _2606 * _2601;
    float _2609 = _2606 * _2602;
    float _2610 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2338].xyz));
    float _4734 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _4745 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _2614 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
    float _2615 = dot(vec3(_827, _828, _829), vec3(_2607, _2608, _2609));
    float _4756 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2618 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
    float _2619 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_2607, _2608, _2609));
    float _4767 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2623 = _2599 * _2599;
    float _2627 = ((_2618 * _2618) * (_2623 + (-1.0))) + 1.0;
    float _2635 = exp2(log2(1.0 - (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) * 5.0);
    float _2636 = 0.959999978542327880859375 - _986;
    float _2638 = 0.959999978542327880859375 - _987;
    float _2639 = 0.959999978542327880859375 - _988;
    float _2646 = 1.0 - _2599;
    float _2657 = (0.5 / (((_2614 * ((_2613 * _2646) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2614 * _2646) + _2599) * _2613))) * _2613;
    float _4778 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2659 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2623 / ((_2627 * _2627) * 3.141590118408203125));
    uint _2673 = _2338 + 9u;
    float _2684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _830) * 0.949999988079071044921875);
    float _2685 = _2684 * _2684;
    float _2686 = cbLight._m0[_2378].x + _907;
    float _2687 = cbLight._m0[_2378].y + _908;
    float _2688 = cbLight._m0[_2378].z + _909;
    float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
    float _2693 = _2692 * _2686;
    float _2694 = _2692 * _2687;
    float _2695 = _2692 * _2688;
    float _2696 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2378].xyz));
    float _4789 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2699 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
    float _2700 = dot(vec3(_827, _828, _829), vec3(_2693, _2694, _2695));
    float _4800 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2703 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
    float _2704 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2693, _2694, _2695));
    float _4811 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2708 = _2685 * _2685;
    float _2712 = ((_2703 * _2703) * (_2708 + (-1.0))) + 1.0;
    float _2719 = exp2(log2(1.0 - (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) * 5.0);
    float _2726 = 1.0 - _2685;
    float _2736 = (0.5 / (((_2614 * ((_2699 * _2726) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2614 * _2726) + _2685) * _2699))) * _2699;
    float _4822 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2738 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2708 / ((_2712 * _2712) * 3.141590118408203125));
    float _2748 = (((((_2719 * _2636) + _989) * cbLight._m0[_2673].x) * _2738) * _2361) + ((((cbLight._m0[_2585].x * _2327) * ((_2635 * _2636) + _989)) * _2659) * _2374);
    float _2749 = (((((_2719 * _2638) + _991) * cbLight._m0[_2673].y) * _2738) * _2361) + ((((cbLight._m0[_2585].y * _2329) * ((_2635 * _2638) + _991)) * _2659) * _2374);
    float _2750 = (((((_2719 * _2639) + _992) * cbLight._m0[_2673].z) * _2738) * _2361) + ((((cbLight._m0[_2585].z * _2331) * ((_2635 * _2639) + _992)) * _2659) * _2374);
    float _2806;
    float _2808;
    float _2810;
    if (_2414)
    {
        _2806 = _2748;
        _2808 = _2749;
        _2810 = _2750;
    }
    else
    {
        uint _2812 = _2338 + 2u;
        uint _2816 = _2338 + 10u;
        float _2830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2812].w)) * _830) * 0.949999988079071044921875);
        float _2831 = _2830 * _2830;
        float _2832 = cbLight._m0[_2812].x + _907;
        float _2833 = cbLight._m0[_2812].y + _908;
        float _2834 = cbLight._m0[_2812].z + _909;
        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
        float _2839 = _2838 * _2832;
        float _2840 = _2838 * _2833;
        float _2841 = _2838 * _2834;
        float _2842 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2812].xyz));
        float _4833 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2846 = dot(vec3(_827, _828, _829), vec3(_2839, _2840, _2841));
        float _4844 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2849 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2850 = dot(vec3(cbLight._m0[_2812].xyz), vec3(_2839, _2840, _2841));
        float _4855 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2854 = _2831 * _2831;
        float _2858 = ((_2849 * _2849) * (_2854 + (-1.0))) + 1.0;
        float _2865 = exp2(log2(1.0 - (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) * 5.0);
        float _2872 = 1.0 - _2831;
        float _2882 = (0.5 / (((_2614 * ((_2845 * _2872) + _2831)) + 9.9999999392252902907785028219223e-09) + (((_2614 * _2872) + _2831) * _2845))) * _2845;
        float _4866 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2884 = (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2854 / ((_2858 * _2858) * 3.141590118408203125));
        float _2885 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2806 = (((((_2865 * _2636) + _989) * cbLight._m0[_2816].x) * _2884) * _2885) + _2748;
        _2808 = (((((_2865 * _2638) + _991) * cbLight._m0[_2816].y) * _2884) * _2885) + _2749;
        _2810 = (((((_2865 * _2639) + _992) * cbLight._m0[_2816].z) * _2884) * _2885) + _2750;
    }
    float _2916;
    float _2918;
    float _2920;
    if (_2523)
    {
        _2916 = _2806;
        _2918 = _2808;
        _2920 = _2810;
    }
    else
    {
        uint _2927 = _2338 + 3u;
        uint _2931 = _2338 + 11u;
        float _2945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2927].w)) * _830) * 0.949999988079071044921875);
        float _2946 = _2945 * _2945;
        float _2947 = cbLight._m0[_2927].x + _907;
        float _2948 = cbLight._m0[_2927].y + _908;
        float _2949 = cbLight._m0[_2927].z + _909;
        float _2953 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
        float _2954 = _2953 * _2947;
        float _2955 = _2953 * _2948;
        float _2956 = _2953 * _2949;
        float _2957 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2927].xyz));
        float _4882 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2960 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
        float _2961 = dot(vec3(_827, _828, _829), vec3(_2954, _2955, _2956));
        float _4893 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2964 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
        float _2965 = dot(vec3(cbLight._m0[_2927].xyz), vec3(_2954, _2955, _2956));
        float _4904 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2969 = _2946 * _2946;
        float _2973 = ((_2964 * _2964) * (_2969 + (-1.0))) + 1.0;
        float _2980 = exp2(log2(1.0 - (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) * 5.0);
        float _2987 = 1.0 - _2946;
        float _2997 = (0.5 / (((_2614 * ((_2960 * _2987) + _2946)) + 9.9999999392252902907785028219223e-09) + (((_2614 * _2987) + _2946) * _2960))) * _2960;
        float _4915 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _2999 = (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2969 / ((_2973 * _2973) * 3.141590118408203125));
        float _3000 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2916 = (((((_2980 * _2636) + _989) * cbLight._m0[_2931].x) * _2999) * _3000) + _2806;
        _2918 = (((((_2980 * _2638) + _991) * cbLight._m0[_2931].y) * _2999) * _3000) + _2808;
        _2920 = (((((_2980 * _2639) + _992) * cbLight._m0[_2931].z) * _2999) * _3000) + _2810;
    }
    float _3066;
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    float _3076;
    if (_2336.y == 0u)
    {
        uvec4 _3021 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3022 = _3021.x;
        uint _3033 = uint((float(_3021.y) * floor(float(uint(cbSceneParam._m0[85u].y * _928) / _3022))) + floor(float(uint(cbSceneParam._m0[85u].x * _927) / _3022)));
        float _3043 = (log2(_2114 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3044 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        uint _3047 = uint(isnan(14.0) ? _3044 : (isnan(_3044) ? 14.0 : min(_3044, 14.0)));
        uvec4 _3052 = texelFetch(g_lightClusterGridBuffer, int(((_3047 << 2u) + (_3033 << 6u)) >> 2u));
        uint _3053 = _3052.x;
        uint _3054 = _3021.z;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        if (((((1u << ((_3054 >> 4u) & 15u)) + 4294967295u) & _3053) == 0u) || ((_3054 & 240u) == 0u))
        {
            _3133 = 0.0;
            _3135 = 0.0;
            _3137 = 0.0;
            _3139 = 0.0;
            _3141 = 0.0;
            _3143 = 0.0;
        }
        else
        {
            float _3134;
            float _3136;
            float _3138;
            float _3140;
            float _3142;
            float _3144;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            float _3291 = 0.0;
            uint _3292 = 0u;
            uint _3301;
            bool _3302;
            for (;;)
            {
                _3301 = texelFetch(g_lightClassification, int((((_3047 << 5u) + (_3033 << 9u)) + (_3292 << 2u)) >> 2u)).x;
                _3302 = _3301 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3302)
                {
                    frontier_phi_71_pred = _3291;
                    frontier_phi_71_pred_1 = _3290;
                    frontier_phi_71_pred_2 = _3289;
                    frontier_phi_71_pred_3 = _3288;
                    frontier_phi_71_pred_4 = _3287;
                    frontier_phi_71_pred_5 = _3286;
                }
                else
                {
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    uint _3437;
                    _3431 = _3286;
                    _3432 = _3287;
                    _3433 = _3288;
                    _3434 = _3289;
                    _3435 = _3290;
                    _3436 = _3291;
                    _3437 = _3301;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    for (;;)
                    {
                        uint _3441 = uint(findLSB(_3437)) + (_3292 << 5u);
                        uint _3438 = (_3437 + 4294967295u) & _3437;
                        uint _3443 = _3441 * 48u;
                        vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3443)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 3u)).x));
                        uint _3463 = (_3441 * 48u) + 4u;
                        vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3463)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 3u)).x));
                        uint _3482 = (_3441 * 48u) + 8u;
                        vec3 _3493 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3482)).x, texelFetch(g_PointLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3482 + 2u)).x));
                        float _3497 = _3457.x - _2112;
                        float _3498 = _3457.y - _2113;
                        float _3499 = _3457.z - _2114;
                        float _3500 = dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499));
                        float _3503 = inversesqrt(_3500);
                        float _3504 = _3503 * _3497;
                        float _3505 = _3503 * _3498;
                        float _3506 = _3503 * _3499;
                        float _3507 = dot(vec3(_946, _949, _952), vec3(_3504, _3505, _3506));
                        float _3512 = 1.0 - (_3500 * _3457.w);
                        float _4941 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                        float _3513 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3514 = sqrt(_3500) * _3476.w;
                        float _3517 = 1.39999997615814208984375 / (_3514 + 1.39999997615814208984375);
                        float _3518 = _3517 * _3517;
                        float _3521 = ((1.0 - _3518) * _3507) + _3518;
                        float _3524 = _3514 * _3514;
                        float _3528 = ((isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0))) * _3513) / ((_3524 * 0.699999988079071044921875) + 1.0);
                        float _3532 = (-0.0) - _2112;
                        float _3533 = (-0.0) - _2113;
                        float _3534 = (-0.0) - _2114;
                        float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                        float _3539 = _3538 * _3532;
                        float _3540 = _3538 * _3533;
                        float _3541 = _3538 * _3534;
                        float _3548 = exp2(log2(1.0 / ((_3524 * 3.5) + 5.0)) * 0.25);
                        float _3549 = 1.0 - _1021;
                        float _3556 = sqrt(1.0 - ((1.0 - (_3549 * _3549)) * (1.0 - (_3548 * _3548))));
                        float _3557 = _3556 * _3556;
                        float _3558 = _3557 * _3557;
                        float _3559 = _3539 + _3504;
                        float _3560 = _3540 + _3505;
                        float _3561 = _3541 + _3506;
                        float _3565 = inversesqrt(dot(vec3(_3559, _3560, _3561), vec3(_3559, _3560, _3561)));
                        float _3569 = dot(vec3(_946, _949, _952), vec3(_3539, _3540, _3541));
                        float _4957 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                        float _3572 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                        float _3573 = dot(vec3(_946, _949, _952), vec3(_3565 * _3559, _3565 * _3560, _3565 * _3561));
                        float _4968 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                        float _3576 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                        float _3580 = ((_3576 * _3576) * (_3558 + (-1.0))) + 1.0;
                        float _3581 = _3517 * _3557;
                        float _3582 = _3581 * _3581;
                        float _3585 = ((1.0 - _3582) * _3507) + _3582;
                        float _4979 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                        float _3586 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                        float _3587 = 1.0 - _3557;
                        float _3597 = (0.5 / (((_3586 * ((_3572 * _3587) + _3557)) + 9.9999999392252902907785028219223e-09) + (((_3586 * _3587) + _3557) * _3572))) * _3586;
                        float _4990 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                        float _3608 = (((_3558 * 3.1415927410125732421875) * (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) / ((_3580 * _3580) * ((_3524 * 2.1991131305694580078125) + 3.141590118408203125))) * _3513;
                        _3361 = (_3528 * _3476.x) + _3434;
                        _3362 = (_3528 * _3476.y) + _3435;
                        _3363 = (_3528 * _3476.z) + _3436;
                        _3358 = (_3608 * _3493.x) + _3431;
                        _3359 = (_3608 * _3493.y) + _3432;
                        _3360 = (_3608 * _3493.z) + _3433;
                        if (_3438 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3431 = _3358;
                            _3432 = _3359;
                            _3433 = _3360;
                            _3434 = _3361;
                            _3435 = _3362;
                            _3436 = _3363;
                            _3437 = _3438;
                        }
                    }
                    frontier_phi_71_pred = _3363;
                    frontier_phi_71_pred_1 = _3362;
                    frontier_phi_71_pred_2 = _3361;
                    frontier_phi_71_pred_3 = _3360;
                    frontier_phi_71_pred_4 = _3359;
                    frontier_phi_71_pred_5 = _3358;
                }
                _3144 = frontier_phi_71_pred;
                _3142 = frontier_phi_71_pred_1;
                _3140 = frontier_phi_71_pred_2;
                _3138 = frontier_phi_71_pred_3;
                _3136 = frontier_phi_71_pred_4;
                _3134 = frontier_phi_71_pred_5;
                uint _3293 = _3292 + 1u;
                if (_3293 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3286 = _3134;
                    _3287 = _3136;
                    _3288 = _3138;
                    _3289 = _3140;
                    _3290 = _3142;
                    _3291 = _3144;
                    _3292 = _3293;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3133 = _3134;
            _3135 = _3136;
            _3137 = _3138;
            _3139 = _3140;
            _3141 = _3142;
            _3143 = _3144;
        }
        uvec4 _3147 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3148 = _3147.z;
        uint _3150 = (_3148 >> 8u) & 15u;
        float _3254;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        if (((4294967295u << _3150) & _3053) == 0u)
        {
            _3254 = _3133;
            _3256 = _3135;
            _3258 = _3137;
            _3260 = _3139;
            _3262 = _3141;
            _3264 = _3143;
        }
        else
        {
            float _3279 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
            float _3280 = _3279 * _2112;
            float _3281 = _3279 * _2113;
            float _3282 = _3279 * _2114;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3150 < ((_3148 >> 12u) & 15u))
            {
                float _3255;
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3414 = _3133;
                float _3415 = _3135;
                float _3416 = _3137;
                float _3417 = _3139;
                float _3418 = _3141;
                float _3419 = _3143;
                uint _3420 = _3150;
                uint _3429;
                bool _3430;
                for (;;)
                {
                    _3429 = texelFetch(g_lightClassification, int((((_3047 << 5u) + (_3033 << 9u)) + (_3420 << 2u)) >> 2u)).x;
                    _3430 = _3429 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3430)
                    {
                        frontier_phi_82_pred = _3419;
                        frontier_phi_82_pred_1 = _3418;
                        frontier_phi_82_pred_2 = _3417;
                        frontier_phi_82_pred_3 = _3416;
                        frontier_phi_82_pred_4 = _3415;
                        frontier_phi_82_pred_5 = _3414;
                    }
                    else
                    {
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3915;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3920;
                        float _3635 = _3414;
                        float _3636 = _3415;
                        float _3637 = _3416;
                        float _3638 = _3417;
                        float _3639 = _3418;
                        float _3640 = _3419;
                        uint _3641 = _3429;
                        uint _3642;
                        vec4 _3667;
                        float _3668;
                        vec4 _3683;
                        vec3 _3695;
                        vec4 _3710;
                        vec4 _3725;
                        float _3771;
                        bool _3772;
                        for (;;)
                        {
                            uint _3652 = ((_3420 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3641));
                            _3642 = (_3641 + 4294967295u) & _3641;
                            uint _3654 = _3652 * 40u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            _3668 = _3667.w;
                            uint _3670 = (_3652 * 40u) + 4u;
                            _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            uint _3685 = (_3652 * 40u) + 8u;
                            _3695 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x));
                            uint _3697 = (_3652 * 40u) + 16u;
                            _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            uint _3712 = (_3652 * 40u) + 20u;
                            _3725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 3u)).x));
                            uint _3727 = (_3652 * 40u) + 24u;
                            vec4 _3740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 3u)).x));
                            uint _3746 = (_3652 * 40u) + 28u;
                            vec4 _3759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 3u)).x));
                            _3771 = fma(_2114, _3759.z, fma(_2113, _3759.y, _3759.x * _2112)) + _3759.w;
                            _3772 = !((fma(_2114, _3740.z, fma(_2113, _3740.y, _3740.x * _2112)) + _3740.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3772)
                            {
                                float _3799 = _3667.x - _2112;
                                float _3800 = _3667.y - _2113;
                                float _3801 = _3667.z - _2114;
                                float _3802 = dot(vec3(_3799, _3800, _3801), vec3(_3799, _3800, _3801));
                                float _3805 = inversesqrt(_3802);
                                float _3806 = _3805 * _3799;
                                float _3807 = _3805 * _3800;
                                float _3808 = _3805 * _3801;
                                float _3812 = 1.0 - (_3802 / (_3668 * _3668));
                                float _5001 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3813 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3817 = sqrt(_3802) * _3683.w;
                                float _3819 = 1.39999997615814208984375 / (_3817 + 1.39999997615814208984375);
                                float _3820 = _3819 * _3819;
                                float _3823 = ((1.0 - _3820) * dot(vec3(_3806, _3807, _3808), vec3(_946, _949, _952))) + _3820;
                                float _3826 = _3817 * _3817;
                                float _3830 = (fma(_2114, _3710.z, fma(_2113, _3710.y, _3710.x * _2112)) + _3710.w) / _3771;
                                float _3831 = (fma(_2114, _3725.z, fma(_2113, _3725.y, _3725.x * _2112)) + _3725.w) / _3771;
                                float _3835 = 1.0 - dot(vec2(_3830, _3831), vec2(_3830, _3831));
                                float _5017 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3836 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3837 = _3836 * (((isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0))) * _3813) / ((_3826 * 0.699999988079071044921875) + 1.0));
                                float _3849 = exp2(log2(1.0 / ((_3826 * 3.5) + 5.0)) * 0.25);
                                float _3850 = 1.0 - _1021;
                                float _3857 = sqrt(1.0 - ((1.0 - (_3850 * _3850)) * (1.0 - (_3849 * _3849))));
                                float _3858 = _3857 * _3857;
                                float _3859 = _3858 * _3858;
                                float _3860 = _3806 - _3280;
                                float _3861 = _3807 - _3281;
                                float _3862 = _3808 - _3282;
                                float _3866 = inversesqrt(dot(vec3(_3860, _3861, _3862), vec3(_3860, _3861, _3862)));
                                float _3870 = dot(vec3(_946, _949, _952), vec3((-0.0) - _3280, (-0.0) - _3281, (-0.0) - _3282));
                                float _5028 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3873 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                                float _3874 = dot(vec3(_946, _949, _952), vec3(_3866 * _3860, _3866 * _3861, _3866 * _3862));
                                float _5039 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3877 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                                float _3881 = ((_3877 * _3877) * (_3859 + (-1.0))) + 1.0;
                                float _3882 = _3819 * _3858;
                                float _3883 = _3882 * _3882;
                                float _3889 = ((1.0 - _3883) * dot(vec3(_946, _949, _952), vec3(_3806, _3807, _3808))) + _3883;
                                float _5050 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3890 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
                                float _3891 = 1.0 - _3858;
                                float _3901 = (0.5 / (((_3890 * ((_3873 * _3891) + _3858)) + 9.9999999392252902907785028219223e-09) + (((_3890 * _3891) + _3858) * _3873))) * _3890;
                                float _5061 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                                float _3911 = (_3836 * _3813) * (((_3859 * 3.1415927410125732421875) * (isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0)))) / ((_3881 * _3881) * ((_3826 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3837 * _3683.z;
                                frontier_phi_88_pred_1 = _3837 * _3683.y;
                                frontier_phi_88_pred_2 = _3837 * _3683.x;
                                frontier_phi_88_pred_3 = _3911 * _3695.z;
                                frontier_phi_88_pred_4 = _3911 * _3695.y;
                                frontier_phi_88_pred_5 = _3911 * _3695.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3920 = frontier_phi_88_pred;
                            _3919 = frontier_phi_88_pred_1;
                            _3918 = frontier_phi_88_pred_2;
                            _3917 = frontier_phi_88_pred_3;
                            _3916 = frontier_phi_88_pred_4;
                            _3915 = frontier_phi_88_pred_5;
                            _3625 = _3918 + _3638;
                            _3626 = _3919 + _3639;
                            _3627 = _3920 + _3640;
                            _3622 = _3915 + _3635;
                            _3623 = _3916 + _3636;
                            _3624 = _3917 + _3637;
                            if (_3642 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3642;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3627;
                        frontier_phi_82_pred_1 = _3626;
                        frontier_phi_82_pred_2 = _3625;
                        frontier_phi_82_pred_3 = _3624;
                        frontier_phi_82_pred_4 = _3623;
                        frontier_phi_82_pred_5 = _3622;
                    }
                    _3265 = frontier_phi_82_pred;
                    _3263 = frontier_phi_82_pred_1;
                    _3261 = frontier_phi_82_pred_2;
                    _3259 = frontier_phi_82_pred_3;
                    _3257 = frontier_phi_82_pred_4;
                    _3255 = frontier_phi_82_pred_5;
                    uint _3421 = _3420 + 1u;
                    if (_3421 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3414 = _3255;
                        _3415 = _3257;
                        _3416 = _3259;
                        _3417 = _3261;
                        _3418 = _3263;
                        _3419 = _3265;
                        _3420 = _3421;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3261;
                frontier_phi_63_64_ladder_1 = _3265;
                frontier_phi_63_64_ladder_2 = _3263;
                frontier_phi_63_64_ladder_3 = _3259;
                frontier_phi_63_64_ladder_4 = _3257;
                frontier_phi_63_64_ladder_5 = _3255;
            }
            else
            {
                frontier_phi_63_64_ladder = _3139;
                frontier_phi_63_64_ladder_1 = _3143;
                frontier_phi_63_64_ladder_2 = _3141;
                frontier_phi_63_64_ladder_3 = _3137;
                frontier_phi_63_64_ladder_4 = _3135;
                frontier_phi_63_64_ladder_5 = _3133;
            }
            _3254 = frontier_phi_63_64_ladder_5;
            _3256 = frontier_phi_63_64_ladder_4;
            _3258 = frontier_phi_63_64_ladder_3;
            _3260 = frontier_phi_63_64_ladder;
            _3262 = frontier_phi_63_64_ladder_2;
            _3264 = frontier_phi_63_64_ladder_1;
        }
        float _3269 = isnan(1.0) ? _1005 : (isnan(_1005) ? 1.0 : min(_1005, 1.0));
        _3066 = (_3269 * _3260) + _2578;
        _3068 = (_3269 * _3262) + _2580;
        _3070 = (_3269 * _3264) + _2582;
        _3072 = ((_3254 * _989) * _3269) + _2916;
        _3074 = ((_3256 * _991) * _3269) + _2918;
        _3076 = ((_3258 * _992) * _3269) + _2920;
    }
    else
    {
        _3066 = _2578;
        _3068 = _2580;
        _3070 = _2582;
        _3072 = _2916;
        _3074 = _2918;
        _3076 = _2920;
    }
    float _5077 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _5088 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _5099 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _3093 = ((isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0))) * (_3066 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1005))) + ((_3072 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1844)) * cbPerFrame._m0[3u].x);
    float _3094 = ((isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0))) * (_3068 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1005))) + ((_3074 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1844)) * cbPerFrame._m0[3u].x);
    float _3095 = ((isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0))) * (_3070 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1005))) + ((_3076 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1844)) * cbPerFrame._m0[3u].x);
    uint _3096 = _252 + 6u;
    float _3104 = _927 / cbSceneParam._m0[86u].x;
    float _3105 = _928 / cbSceneParam._m0[86u].y;
    vec4 _3119 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3104, _3105, (log2((isnan(cbSceneParam._m0[77u].w) ? _849 : (isnan(_849) ? cbSceneParam._m0[77u].w : min(_849, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3121 = _3119.x;
    float _3122 = _3119.y;
    float _3123 = _3119.z;
    float _3124 = _3119.w;
    float _3196;
    float _3198;
    float _3200;
    float _3202;
    if (_849 > cbSceneParam._m0[78u].w)
    {
        float _3158 = isnan(_849) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _849 : min(cbSceneParam._m0[80u].w, _849));
        float _3159 = _3158 / _849;
        float _3170 = _3159 * _900;
        float _3171 = _901 * _3159;
        float _3172 = (-0.0) - _3171;
        float _3174 = _3159 * _902;
        float _3176 = (cbSceneParam._m0[77u].w * _3172) / _3158;
        float _3177 = _3176 + cbSceneParam._m0[79u].w;
        float _3178 = cbSceneParam._m0[79u].w - _3171;
        float _3184 = sqrt(((_3170 * _3170) + (_3171 * _3171)) + (_3174 * _3174));
        float _3187 = (1.0 - (cbSceneParam._m0[77u].w / _3158)) * _3184;
        float _3192 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3194 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3371;
        if (abs((_3172 - _3176) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3371 = ((((_3177 > 0.0) ? exp2(_3192 * _3177) : (2.0 - exp2(_3194 * _3177))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3187;
        }
        else
        {
            float _3315 = 1.0 / cbSceneParam._m0[80u].x;
            float _3316 = isnan(_3178) ? _3177 : (isnan(_3177) ? _3178 : max(_3177, _3178));
            float _3317 = isnan(_3178) ? _3177 : (isnan(_3177) ? _3178 : min(_3177, _3178));
            float _3326 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : min(_3316, 0.0));
            float _3327 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : min(_3317, 0.0));
            _3371 = ((abs(_3184 / _3172) * cbSceneParam._m0[80u].y) * ((((_3326 - _3327) * 2.0) - ((exp2(_3192 * (isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0)))) - exp2(_3192 * (isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))))) * _3315)) - ((exp2(_3194 * _3326) - exp2(_3194 * _3327)) * _3315))) + (_3187 * cbSceneParam._m0[80u].z);
        }
        vec4 _3373 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3104, _3105, 1.0), 0.0);
        float _3382 = exp2((_3371 * (-1.44269502162933349609375)) * (1.0 - _3373.w));
        float _3383 = log2(_3382);
        float _3399 = log2(_3124);
        _3196 = (exp2(_3399 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3383 * cbSceneParam._m0[78u].x)) * _3373.x) / cbSceneParam._m0[78u].x)) + _3121;
        _3198 = (exp2(_3399 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3383 * cbSceneParam._m0[78u].y)) * _3373.y) / cbSceneParam._m0[78u].y)) + _3122;
        _3200 = (exp2(_3399 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3383 * cbSceneParam._m0[78u].z)) * _3373.z) / cbSceneParam._m0[78u].z)) + _3123;
        _3202 = _3382 * _3124;
    }
    else
    {
        _3196 = _3121;
        _3198 = _3122;
        _3200 = _3123;
        _3202 = _3124;
    }
    bool _3409;
    vec4 _3212;
    vec4 _3234;
    float _3236;
    float _3240;
    float _3241;
    float _3242;
    float _3243;
    bool _3253;
    for (;;)
    {
        _3212 = cbMatDynParam._m0[0u];
        float _3214 = roundEven(_3212.y);
        bool _3215 = _3214 == 3.0;
        float _3216 = log2(_3202);
        float _3223 = exp2(_3216 * cbSceneParam._m0[78u].x) * _3093;
        float _3224 = exp2(_3216 * cbSceneParam._m0[78u].y) * _3094;
        float _3225 = exp2(_3216 * cbSceneParam._m0[78u].z) * _3095;
        float _3232 = _916 + (-0.5);
        _3234 = cbMtdParam._m0[1u];
        _3236 = _3234.y * _3232;
        float _3239 = (_3214 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3240 = _3239 * (_3215 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3196)));
        _3241 = _3239 * (_3215 ? _3224 : (_3224 + (cbSceneParam._m0[72u].w * _3198)));
        _3242 = _3239 * (_3215 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3200)));
        _3243 = _3232 * 0.999000012874603271484375;
        _3253 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3253)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _3243) < 0.5)
            {
                _3409 = true;
                break;
            }
        }
        uint _3350 = _965 + uint(_3212.w);
        if ((cbInstanceData._m0[_3350].w < 1.0) && ((cbInstanceData._m0[_3350].w + _3243) < 0.5))
        {
            _3409 = true;
            break;
        }
        if ((_3236 + 1.0) < _3234.x)
        {
            _3409 = true;
            break;
        }
        _3409 = false;
        break;
    }
    float _3613;
    if (_3409)
    {
        discard_state = true;
        _3613 = 0.0;
    }
    else
    {
        _3613 = cbInstanceData._m0[_3096].w;
    }
    SV_Target.x = _3240;
    SV_Target.y = _3241;
    SV_Target.z = _3242;
    SV_Target.w = _3613;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3096].w;
    discard_exit();
}


