#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1380;
float _3783;
float _3784;
float _3785;
float _3786;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _393 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _340.x) * 2.0) - ((((_381 - _393) * cbMtdParam._m0[23u].w) + _393) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3795 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _418 = (_411 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _419 = (_411 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _420 = (_411 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _457 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _459 = _457.x;
    float _469 = dot(vec4(_459, _457.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _483 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _340.y) * 2.0) - ((((_459 - _469) * cbMtdParam._m0[23u].w) + _469) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3806 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _491 = (_484 * ((_437.x * cbMtdParam._m0[13u].x) - _418)) + _418;
    float _492 = (_484 * ((_437.y * cbMtdParam._m0[13u].y) - _419)) + _419;
    float _493 = (_484 * ((_437.z * cbMtdParam._m0[13u].z) - _420)) + _420;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _272) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _273) + cbTextureTilingScale._m0[24u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _531 = _529.x;
    float _541 = dot(vec4(_531, _529.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _553 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _340.z) * 2.0) - ((((_531 - _541) * cbMtdParam._m0[23u].w) + _541) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3817 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _561 = (_554 * ((_512.x * cbMtdParam._m0[14u].x) - _491)) + _491;
    float _562 = (_554 * ((_512.y * cbMtdParam._m0[14u].y) - _492)) + _492;
    float _563 = (_554 * ((_512.z * cbMtdParam._m0[14u].z) - _493)) + _493;
    vec4 _576 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _595 = _593.x;
    float _596 = _593.y;
    float _597 = _593.z;
    float _604 = ((_576.x - _595) * _411) + _595;
    float _605 = ((_576.y - _596) * _411) + _596;
    float _606 = ((_576.z - _597) * _411) + _597;
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _629 = ((_618.x - _604) * _484) + _604;
    float _630 = ((_618.y - _605) * _484) + _605;
    float _631 = ((_618.z - _606) * _484) + _606;
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _272) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _273) + cbTextureTilingScale._m0[23u].w));
    float _656 = ((_643.z - _631) * _554) + _631;
    float _659 = ((((_643.x - _629) * _554) + _629) * 2.0) + (-1.0);
    float _661 = ((((_643.y - _630) * _554) + _630) * 2.0) + (-1.0);
    float _662 = dot(vec2(_659, _661), vec2(_659, _661));
    float _3828 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _667 = sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))));
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _693 = (((_681.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _659;
    float _694 = (((_681.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _661;
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _722 = _720.x;
    float _740 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _722) * _411) + _722;
    float _758 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _740) * _484) + _740;
    float _776 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _272) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _273) + cbTextureTilingScale._m0[10u].w)).x - _758) * _554) + _758;
    float _780 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _776) * cbMtdParam._m0[19u].z) + _776;
    float _784 = (cbMtdParam._m0[19u].w * (_681.z - _656)) + _656;
    float _786 = cbMtdParam._m0[22u].x + _681.w;
    float _789 = fma(_667, _239 * NORMAL.x, fma(_694, _246 * TANGENT.x, (_232 * _224) * _693));
    float _792 = fma(_667, _239 * NORMAL.y, fma(_694, _246 * TANGENT.y, (_232 * _225) * _693));
    float _795 = fma(_667, _239 * NORMAL.z, fma(_694, _246 * TANGENT.z, (_232 * _226) * _693));
    float _799 = inversesqrt(dot(vec3(_789, _792, _795), vec3(_789, _792, _795)));
    float _800 = _799 * _789;
    float _801 = _799 * _792;
    float _802 = _799 * _795;
    float _3839 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _803 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _3861 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3872 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3883 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3894 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _808 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _822 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _872 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _862);
    float _873 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _862);
    float _874 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _862);
    float _878 = inversesqrt(dot(vec3(_872, _873, _874), vec3(_872, _873, _874)));
    float _879 = _872 * _878;
    float _880 = _873 * _878;
    float _881 = _874 * _878;
    vec4 _886 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _888 = _886.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1060 = sqrt(((_872 * _872) + (_873 * _873)) + (_874 * _874));
        float _1066 = (cbMatDynParam._m0[5u].x * _1060) + cbMatDynParam._m0[5u].y;
        float _3905 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1071 = (cbMatDynParam._m0[5u].z * _1060) + cbMatDynParam._m0[5u].w;
        float _3916 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) - _1067)) + _1067) < ((_888 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _899 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _900 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _918 = fma(_802, cbSceneParam._m0[5u].z, fma(_801, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _800));
    float _921 = fma(_802, cbSceneParam._m0[6u].z, fma(_801, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _800));
    float _924 = fma(_802, cbSceneParam._m0[7u].z, fma(_801, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _800));
    uint _937 = _252 + 9u;
    uint _938 = _937 + uint(cbMatDynParam._m0[0u].w);
    float _944 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * cbInstanceData._m0[_938].x;
    float _945 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * cbInstanceData._m0[_938].y;
    float _946 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_938].z;
    float _3927 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _950 = 1.0 - _808;
    float _951 = _947 * _950;
    float _952 = _948 * _950;
    float _953 = _949 * _950;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _808;
    float _959 = (_948 + (-0.039999999105930328369140625)) * _808;
    float _960 = (_949 + (-0.039999999105930328369140625)) * _808;
    float _961 = _958 + 0.039999999105930328369140625;
    float _963 = _959 + 0.039999999105930328369140625;
    float _964 = _960 + 0.039999999105930328369140625;
    vec4 _973 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _899, cbSceneParam._m0[86u].y * _900));
    float _977 = ((isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * TEXCOORD_5.w) * _973.x;
    float _978 = dot(vec3(_800, _801, _802), vec3(_879, _880, _881));
    float _981 = _978 * 2.0;
    float _985 = (_981 * _800) - _879;
    float _986 = (_981 * _801) - _880;
    float _987 = (_981 * _802) - _881;
    float _991 = abs(dot(vec3(_879, _880, _881), vec3(_800, _801, _802)));
    float _3960 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _993 = sqrt(_803);
    float _1006 = exp2((_993 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_993 * 3.0));
    float _1012 = (1.0 - _1006) * ((_993 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1013 = _1006 * _993;
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1379;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1104 = fma(_1049, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041));
        float _1108 = fma(_1049, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041));
        float _1112 = fma(_1049, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041));
        float _1137 = _1041 + _800;
        float _1138 = _1045 + _801;
        float _1139 = _1049 + _802;
        float _1149 = fma(_1139, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137)) - _1104;
        float _1150 = fma(_1139, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137)) - _1108;
        float _1151 = fma(_1139, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137)) - _1112;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1104 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1108 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[34u].z) + ((((((_1112 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1207 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1173.x + (-0.5));
        float _1209 = _1207 * (_1173.y + (-0.5));
        float _1210 = _1207 * (_1173.z + (-0.5));
        float _1217 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1180.x + (-0.5));
        float _1219 = _1217 * (_1180.y + (-0.5));
        float _1220 = _1217 * (_1180.z + (-0.5));
        float _1227 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1187.x + (-0.5));
        float _1229 = _1227 * (_1187.y + (-0.5));
        float _1230 = _1227 * (_1187.z + (-0.5));
        float _1237 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1194.x + (-0.5));
        float _1239 = _1237 * (_1194.y + (-0.5));
        float _1240 = _1237 * (_1194.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1261 = (dot(vec3(_800, _801, _802), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1271 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4008 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1273 + 1.0))) + _1278) * _1241;
        float _1288 = _1209 * 0.5;
        float _1289 = _1219 * 0.5;
        float _1290 = _1229 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_800, _801, _802), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4041 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1315 + 1.0))) + _1320) * _1242;
        float _1330 = _1210 * 0.5;
        float _1331 = _1220 * 0.5;
        float _1332 = _1230 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_800, _801, _802), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4074 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1357 + 1.0))) + _1362) * _1243;
        _1379 = _1210;
        _1381 = _1209;
        _1382 = _1208;
        _1383 = _1220;
        _1384 = _1219;
        _1385 = _1218;
        _1386 = _1230;
        _1387 = _1229;
        _1388 = _1228;
        _1389 = _1243;
        _1390 = _1242;
        _1391 = _1241;
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1380;
        _1381 = _1380;
        _1382 = _1380;
        _1383 = _1380;
        _1384 = _1380;
        _1385 = _1380;
        _1386 = _1380;
        _1387 = _1380;
        _1388 = _1380;
        _1389 = _1380;
        _1390 = _1380;
        _1391 = _1380;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1420 = fma(_1049, cbModelParam._m0[30u].z, fma(_1045, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041));
        float _1424 = fma(_1049, cbModelParam._m0[31u].z, fma(_1045, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041));
        float _1428 = fma(_1049, cbModelParam._m0[32u].z, fma(_1045, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041));
        float _1451 = _1041 + _800;
        float _1452 = _1045 + _801;
        float _1453 = _1049 + _802;
        float _1463 = fma(_1453, cbModelParam._m0[30u].z, fma(_1452, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1451)) - _1420;
        float _1464 = fma(_1453, cbModelParam._m0[31u].z, fma(_1452, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1451)) - _1424;
        float _1465 = fma(_1453, cbModelParam._m0[32u].z, fma(_1452, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1451)) - _1428;
        float _1469 = inversesqrt(dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465)));
        float _1482 = ((_1469 * _1463) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1420 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1469 * _1464) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1424 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1469 * _1465) / cbModelParam._m0[35u].z) + ((((((_1428 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        float _1519 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1486.x + (-0.5));
        float _1521 = _1519 * (_1486.y + (-0.5));
        float _1522 = _1519 * (_1486.z + (-0.5));
        float _1529 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1493.x + (-0.5));
        float _1531 = _1529 * (_1493.y + (-0.5));
        float _1532 = _1529 * (_1493.z + (-0.5));
        float _1539 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1500.x + (-0.5));
        float _1541 = _1539 * (_1500.y + (-0.5));
        float _1542 = _1539 * (_1500.z + (-0.5));
        float _1549 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1507.x + (-0.5));
        float _1551 = _1549 * (_1507.y + (-0.5));
        float _1552 = _1549 * (_1507.z + (-0.5));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = _1520 * 0.5;
        float _1557 = _1530 * 0.5;
        float _1558 = _1540 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_800, _801, _802), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4137 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1583 + 1.0))) + _1588) * _1553;
        float _1598 = _1521 * 0.5;
        float _1599 = _1531 * 0.5;
        float _1600 = _1541 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_800, _801, _802), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4170 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1625 + 1.0))) + _1630) * _1554;
        float _1640 = _1522 * 0.5;
        float _1641 = _1532 * 0.5;
        float _1642 = _1542 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_800, _801, _802), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4203 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1667 + 1.0))) + _1672) * _1555;
        _1689 = _1522;
        _1690 = _1521;
        _1691 = _1520;
        _1692 = _1532;
        _1693 = _1531;
        _1694 = _1530;
        _1695 = _1542;
        _1696 = _1541;
        _1697 = _1540;
        _1698 = _1555;
        _1699 = _1554;
        _1700 = _1553;
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
    }
    else
    {
        _1689 = _1380;
        _1690 = _1380;
        _1691 = _1380;
        _1692 = _1380;
        _1693 = _1380;
        _1694 = _1380;
        _1695 = _1380;
        _1696 = _1380;
        _1697 = _1380;
        _1698 = _1380;
        _1699 = _1380;
        _1700 = _1380;
        _1701 = 0.0;
        _1702 = 0.0;
        _1703 = 0.0;
    }
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1392)) + _1392;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1393)) + _1393;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1394)) + _1394;
    float _1736 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1713 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1713 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1713));
    float _1757 = _985 * 0.5;
    float _1758 = _986 * 0.5;
    float _1759 = _987 * 0.5;
    float _1760 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1763 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1766 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1800;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1773 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1379, _1383, _1386, _1389));
        float _1777 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1781 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1788 = dot(vec4(cbModelParam._m0[39u]), vec4(_1757, _1758, _1759, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1811;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1802 = dot(vec4(cbModelParam._m0[40u]), vec4(_1757, _1758, _1759, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1815 = (_1811 * cbModelParam._m0[1u].x) + (_1800 * (1.0 - cbModelParam._m0[1u].x));
    float _1825 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _803);
    float _1826 = isnan(_1825) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1825 : min(cbModelParam._m0[25u].z, _1825));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1874 = fma(_1049, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041)) + cbModelParam._m0[13u].w;
        float _1878 = fma(_1049, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041)) + cbModelParam._m0[14u].w;
        float _1882 = fma(_1049, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041)) + cbModelParam._m0[15u].w;
        float _1885 = fma(_987, cbModelParam._m0[13u].z, fma(_986, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _985));
        float _1888 = fma(_987, cbModelParam._m0[14u].z, fma(_986, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _985));
        float _1891 = fma(_987, cbModelParam._m0[15u].z, fma(_986, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _985));
        float _1919;
        if (_1885 > 0.0)
        {
            _1919 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1919 = frontier_phi_17_15_ladder;
        }
        float _2143;
        if (_1888 > 0.0)
        {
            _2143 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2143 = frontier_phi_26_22_ladder;
        }
        float _2400;
        if (_1891 > 0.0)
        {
            _2400 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2400 = frontier_phi_38_33_ladder;
        }
        float _2402 = isnan(_2143) ? _1919 : (isnan(_1919) ? _2143 : min(_1919, _2143));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1885) + _1874;
        float _2408 = (_2403 * _1888) + _1878;
        float _2409 = (_2403 * _1891) + _1882;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2412 = (-1.0) - _2410;
        float _2414 = _2410 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2409 > _2414) || ((_2409 < _2412) || ((_2408 > _2414) || ((_2408 < _2412) || ((_2407 < _2412) || (_2407 > _2414))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2409, cbModelParam._m0[9u].z, fma(_2408, cbModelParam._m0[9u].y, _2407 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2409, cbModelParam._m0[10u].z, fma(_2408, cbModelParam._m0[10u].y, _2407 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2409, cbModelParam._m0[11u].z, fma(_2408, cbModelParam._m0[11u].y, _2407 * cbModelParam._m0[11u].x))), _1826);
            frontier_phi_16_38_ladder = _2537.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2537.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2537.x * cbModelParam._m0[1u].y;
        }
        _1907 = frontier_phi_16_38_ladder_2;
        _1909 = frontier_phi_16_38_ladder_1;
        _1911 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1895 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_985, _986, _987), _1826);
        _1907 = _1895.x * cbModelParam._m0[1u].y;
        _1909 = _1895.y * cbModelParam._m0[1u].y;
        _1911 = _1895.z * cbModelParam._m0[1u].y;
    }
    float _1915 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _803);
    float _1916 = isnan(_1915) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1915 : min(cbModelParam._m0[25u].w, _1915));
    float _2006;
    float _2008;
    float _2010;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1970 = fma(_1049, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041)) + cbModelParam._m0[21u].w;
        float _1974 = fma(_1049, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041)) + cbModelParam._m0[22u].w;
        float _1978 = fma(_1049, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041)) + cbModelParam._m0[23u].w;
        float _1981 = fma(_987, cbModelParam._m0[21u].z, fma(_986, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _985));
        float _1984 = fma(_987, cbModelParam._m0[22u].z, fma(_986, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _985));
        float _1987 = fma(_987, cbModelParam._m0[23u].z, fma(_986, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _985));
        float _2148;
        if (_1981 > 0.0)
        {
            _2148 = abs((1.0 - _1970) / _1981);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1970 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2148 = frontier_phi_28_24_ladder;
        }
        float _2427;
        if (_1984 > 0.0)
        {
            _2427 = abs((1.0 - _1974) / _1984);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1974 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2427 = frontier_phi_40_35_ladder;
        }
        float _2640;
        if (_1987 > 0.0)
        {
            _2640 = abs((1.0 - _1978) / _1987);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1978 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2640 = frontier_phi_49_46_ladder;
        }
        float _2642 = isnan(_2427) ? _2148 : (isnan(_2148) ? _2427 : min(_2148, _2427));
        float _2643 = isnan(_2640) ? _2642 : (isnan(_2642) ? _2640 : min(_2642, _2640));
        float _2647 = (_2643 * _1981) + _1970;
        float _2648 = (_2643 * _1984) + _1974;
        float _2649 = (_2643 * _1987) + _1978;
        float _2650 = _2643 * 9.9999997473787516355514526367188e-05;
        float _2651 = (-1.0) - _2650;
        float _2653 = _2650 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2649 > _2653) || ((_2649 < _2651) || ((_2648 > _2653) || ((_2648 < _2651) || ((_2647 < _2651) || (_2647 > _2653))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2649, cbModelParam._m0[17u].z, fma(_2648, cbModelParam._m0[17u].y, _2647 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2649, cbModelParam._m0[18u].z, fma(_2648, cbModelParam._m0[18u].y, _2647 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2649, cbModelParam._m0[19u].z, fma(_2648, cbModelParam._m0[19u].y, _2647 * cbModelParam._m0[19u].x))), _1916);
            frontier_phi_25_49_ladder = _2848.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2848.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2848.x * cbModelParam._m0[1u].z;
        }
        _2006 = frontier_phi_25_49_ladder_2;
        _2008 = frontier_phi_25_49_ladder_1;
        _2010 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1990 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_985, _986, _987), _1916);
        _2006 = _1990.x * cbModelParam._m0[1u].z;
        _2008 = _1990.y * cbModelParam._m0[1u].z;
        _2010 = _1990.z * cbModelParam._m0[1u].z;
    }
    float _2023 = (((_1012 * _961) + _1013) * _977) * ((cbModelParam._m0[1u].w * (_2006 - _1907)) + _1907);
    float _2025 = (((_1012 * _963) + _1013) * _977) * ((cbModelParam._m0[1u].w * (_2008 - _1909)) + _1909);
    float _2027 = (((_1012 * _964) + _1013) * _977) * ((cbModelParam._m0[1u].w * (_2010 - _1911)) + _1911);
    float _2030 = fma(_2027, cbSceneParam._m0[89u].z, fma(_2025, cbSceneParam._m0[89u].y, _2023 * cbSceneParam._m0[89u].x));
    float _2033 = fma(_2027, cbSceneParam._m0[90u].z, fma(_2025, cbSceneParam._m0[90u].y, _2023 * cbSceneParam._m0[90u].x));
    float _2036 = fma(_2027, cbSceneParam._m0[91u].z, fma(_2025, cbSceneParam._m0[91u].y, _2023 * cbSceneParam._m0[91u].x));
    vec4 _2044 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_899, _900));
    float _2046 = _2044.w;
    float _2058 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2046);
    float _2059 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2046);
    float _2060 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2046);
    uvec4 _2064 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2066 = _2064.x * 14u;
    uint _2067 = _2066 + 13u;
    float _2074 = _977 + (-1.0);
    float _2079 = (cbLight._m0[_2067].x * _2074) + 1.0;
    float _2080 = (cbLight._m0[_2067].y * _2074) + 1.0;
    float _2081 = (cbLight._m0[_2067].z * _2074) + 1.0;
    float _2082 = (cbLight._m0[_2067].w * _2074) + 1.0;
    uint _2083 = _2066 + 5u;
    float _2089 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2093 = _2066 + 4u;
    float _2102 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2106 = _2066 | 1u;
    float _2117 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_800, _801, _802));
    float _2120 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_800, _801, _802));
    float _4339 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _4350 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2125 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * 0.3183098733425140380859375;
    float _2127 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2134 = ((cbLight._m0[_2083].x * _2089) * _2127) + (((cbLight._m0[_2093].x * _2058) * _2102) * _2125);
    float _2135 = ((_2089 * cbLight._m0[_2083].y) * _2127) + (((cbLight._m0[_2093].y * _2059) * _2102) * _2125);
    float _2136 = ((_2089 * cbLight._m0[_2083].z) * _2127) + (((cbLight._m0[_2093].z * _2060) * _2102) * _2125);
    uvec4 _2140 = floatBitsToUint(cbLight._m0[_2066 + 12u]);
    bool _2142 = _2140.x == 0u;
    float _2153;
    float _2155;
    float _2157;
    if (_2142)
    {
        _2153 = _2134;
        _2155 = _2135;
        _2157 = _2136;
    }
    else
    {
        uint _2161 = _2066 + 6u;
        float _2177 = (dot(vec3(cbLight._m0[_2066 + 2u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2178 = _2177 * _2177;
        float _4361 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2179 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2180 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2153 = (((cbLight._m0[_2161].x * 0.3183098733425140380859375) * _2179) * _2180) + _2134;
        _2155 = (((cbLight._m0[_2161].y * 0.3183098733425140380859375) * _2179) * _2180) + _2135;
        _2157 = (((cbLight._m0[_2161].z * 0.3183098733425140380859375) * _2179) * _2180) + _2136;
    }
    bool _2160 = _2140.y == 0u;
    float _2198;
    float _2200;
    float _2202;
    if (_2160)
    {
        _2198 = _2153;
        _2200 = _2155;
        _2202 = _2157;
    }
    else
    {
        uint _2371 = _2066 + 7u;
        float _2387 = (dot(vec3(cbLight._m0[_2066 + 3u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2388 = _2387 * _2387;
        float _4377 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2389 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2390 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2198 = (((cbLight._m0[_2371].x * 0.3183098733425140380859375) * _2389) * _2390) + _2153;
        _2200 = (((cbLight._m0[_2371].y * 0.3183098733425140380859375) * _2389) * _2390) + _2155;
        _2202 = (((cbLight._m0[_2371].z * 0.3183098733425140380859375) * _2389) * _2390) + _2157;
    }
    uint _2205 = _2066 + 8u;
    float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _803) * 0.949999988079071044921875);
    float _2219 = _2218 * _2218;
    float _2220 = cbLight._m0[_2066].x + _879;
    float _2221 = cbLight._m0[_2066].y + _880;
    float _2222 = cbLight._m0[_2066].z + _881;
    float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
    float _2227 = _2226 * _2220;
    float _2228 = _2226 * _2221;
    float _2229 = _2226 * _2222;
    float _2230 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2066].xyz));
    float _4393 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _4404 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _2234 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2235 = dot(vec3(_800, _801, _802), vec3(_2227, _2228, _2229));
    float _4415 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2239 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2227, _2228, _2229));
    float _4426 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2243 = _2219 * _2219;
    float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
    float _2255 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
    float _2256 = 0.959999978542327880859375 - _958;
    float _2258 = 0.959999978542327880859375 - _959;
    float _2259 = 0.959999978542327880859375 - _960;
    float _2266 = 1.0 - _2219;
    float _2277 = (0.5 / (((_2234 * ((_2233 * _2266) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_2234 * _2266) + _2219) * _2233))) * _2233;
    float _4437 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2279 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
    uint _2293 = _2066 + 9u;
    float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _803) * 0.949999988079071044921875);
    float _2305 = _2304 * _2304;
    float _2306 = cbLight._m0[_2106].x + _879;
    float _2307 = cbLight._m0[_2106].y + _880;
    float _2308 = cbLight._m0[_2106].z + _881;
    float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
    float _2313 = _2312 * _2306;
    float _2314 = _2312 * _2307;
    float _2315 = _2312 * _2308;
    float _2316 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2106].xyz));
    float _4448 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2320 = dot(vec3(_800, _801, _802), vec3(_2313, _2314, _2315));
    float _4459 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2324 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2313, _2314, _2315));
    float _4470 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2328 = _2305 * _2305;
    float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
    float _2339 = exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0);
    float _2346 = 1.0 - _2305;
    float _2356 = (0.5 / (((_2234 * ((_2319 * _2346) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2234 * _2346) + _2305) * _2319))) * _2319;
    float _4481 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2358 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
    float _2368 = (((((_2339 * _2256) + _961) * cbLight._m0[_2293].x) * _2358) * _2089) + ((((cbLight._m0[_2205].x * _2058) * ((_2255 * _2256) + _961)) * _2279) * _2102);
    float _2369 = (((((_2339 * _2258) + _963) * cbLight._m0[_2293].y) * _2358) * _2089) + ((((cbLight._m0[_2205].y * _2059) * ((_2255 * _2258) + _963)) * _2279) * _2102);
    float _2370 = (((((_2339 * _2259) + _964) * cbLight._m0[_2293].z) * _2358) * _2089) + ((((cbLight._m0[_2205].z * _2060) * ((_2255 * _2259) + _964)) * _2279) * _2102);
    float _2432;
    float _2434;
    float _2436;
    if (_2142)
    {
        _2432 = _2368;
        _2434 = _2369;
        _2436 = _2370;
    }
    else
    {
        uint _2438 = _2066 + 2u;
        uint _2442 = _2066 + 10u;
        float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _803) * 0.949999988079071044921875);
        float _2457 = _2456 * _2456;
        float _2458 = cbLight._m0[_2438].x + _879;
        float _2459 = cbLight._m0[_2438].y + _880;
        float _2460 = cbLight._m0[_2438].z + _881;
        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
        float _2465 = _2464 * _2458;
        float _2466 = _2464 * _2459;
        float _2467 = _2464 * _2460;
        float _2468 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2438].xyz));
        float _4492 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2472 = dot(vec3(_800, _801, _802), vec3(_2465, _2466, _2467));
        float _4503 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2476 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2465, _2466, _2467));
        float _4514 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2480 = _2457 * _2457;
        float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
        float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
        float _2498 = 1.0 - _2457;
        float _2508 = (0.5 / (((_2234 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2234 * _2498) + _2457) * _2471))) * _2471;
        float _4525 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2432 = (((((_2491 * _2256) + _961) * cbLight._m0[_2442].x) * _2510) * _2511) + _2368;
        _2434 = (((((_2491 * _2258) + _963) * cbLight._m0[_2442].y) * _2510) * _2511) + _2369;
        _2436 = (((((_2491 * _2259) + _964) * cbLight._m0[_2442].z) * _2510) * _2511) + _2370;
    }
    float _2546;
    float _2548;
    float _2550;
    if (_2160)
    {
        _2546 = _2432;
        _2548 = _2434;
        _2550 = _2436;
    }
    else
    {
        uint _2557 = _2066 + 3u;
        uint _2561 = _2066 + 11u;
        float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2557].w)) * _803) * 0.949999988079071044921875);
        float _2576 = _2575 * _2575;
        float _2577 = cbLight._m0[_2557].x + _879;
        float _2578 = cbLight._m0[_2557].y + _880;
        float _2579 = cbLight._m0[_2557].z + _881;
        float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
        float _2584 = _2583 * _2577;
        float _2585 = _2583 * _2578;
        float _2586 = _2583 * _2579;
        float _2587 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2557].xyz));
        float _4541 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2591 = dot(vec3(_800, _801, _802), vec3(_2584, _2585, _2586));
        float _4552 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2595 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_2584, _2585, _2586));
        float _4563 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2599 = _2576 * _2576;
        float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
        float _2610 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
        float _2617 = 1.0 - _2576;
        float _2627 = (0.5 / (((_2234 * ((_2590 * _2617) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2234 * _2617) + _2576) * _2590))) * _2590;
        float _4574 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2629 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
        float _2630 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2546 = (((((_2610 * _2256) + _961) * cbLight._m0[_2561].x) * _2629) * _2630) + _2432;
        _2548 = (((((_2610 * _2258) + _963) * cbLight._m0[_2561].y) * _2629) * _2630) + _2434;
        _2550 = (((((_2610 * _2259) + _964) * cbLight._m0[_2561].z) * _2629) * _2630) + _2436;
    }
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_2064.y == 0u)
    {
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2705;
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2705;
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2705;
        uvec4 _2720 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2721 = _2720.x;
        uint _2732 = uint((float(_2720.y) * floor(float(uint(cbSceneParam._m0[85u].y * _900) / _2721))) + floor(float(uint(cbSceneParam._m0[85u].x * _899) / _2721)));
        float _2742 = (log2(_2708 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2743 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        uint _2746 = uint(isnan(14.0) ? _2743 : (isnan(_2743) ? 14.0 : min(_2743, 14.0)));
        uvec4 _2751 = texelFetch(g_lightClusterGridBuffer, int(((_2746 << 2u) + (_2732 << 6u)) >> 2u));
        uint _2752 = _2751.x;
        uint _2753 = _2720.z;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        if (((((1u << ((_2753 >> 4u) & 15u)) + 4294967295u) & _2752) == 0u) || ((_2753 & 240u) == 0u))
        {
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
        }
        else
        {
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            uint _3012 = 0u;
            uint _3021;
            bool _3022;
            for (;;)
            {
                _3021 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_3012 << 2u)) >> 2u)).x;
                _3022 = _3021 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3022)
                {
                    frontier_phi_66_pred = _3006;
                    frontier_phi_66_pred_1 = _3011;
                    frontier_phi_66_pred_2 = _3010;
                    frontier_phi_66_pred_3 = _3009;
                    frontier_phi_66_pred_4 = _3008;
                    frontier_phi_66_pred_5 = _3007;
                }
                else
                {
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    uint _3157;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3021;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    for (;;)
                    {
                        uint _3161 = uint(findLSB(_3157)) + (_3012 << 5u);
                        uint _3158 = (_3157 + 4294967295u) & _3157;
                        uint _3163 = _3161 * 48u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3183 = (_3161 * 48u) + 4u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 3u)).x));
                        uint _3202 = (_3161 * 48u) + 8u;
                        vec3 _3213 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x));
                        float _3217 = _3177.x - _2706;
                        float _3218 = _3177.y - _2707;
                        float _3219 = _3177.z - _2708;
                        float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                        float _3223 = inversesqrt(_3220);
                        float _3224 = _3223 * _3217;
                        float _3225 = _3223 * _3218;
                        float _3226 = _3223 * _3219;
                        float _3227 = dot(vec3(_918, _921, _924), vec3(_3224, _3225, _3226));
                        float _3232 = 1.0 - (_3220 * _3177.w);
                        float _4600 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3234 = sqrt(_3220) * _3196.w;
                        float _3237 = 1.39999997615814208984375 / (_3234 + 1.39999997615814208984375);
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3227) + _3238;
                        float _3244 = _3234 * _3234;
                        float _3248 = ((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3233) / ((_3244 * 0.699999988079071044921875) + 1.0);
                        float _3252 = (-0.0) - _2706;
                        float _3253 = (-0.0) - _2707;
                        float _3254 = (-0.0) - _2708;
                        float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                        float _3259 = _3258 * _3252;
                        float _3260 = _3258 * _3253;
                        float _3261 = _3258 * _3254;
                        float _3269 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                        float _3270 = 1.0 - _993;
                        float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                        float _3278 = _3277 * _3277;
                        float _3279 = _3278 * _3278;
                        float _3280 = _3259 + _3224;
                        float _3281 = _3260 + _3225;
                        float _3282 = _3261 + _3226;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3290 = dot(vec3(_918, _921, _924), vec3(_3259, _3260, _3261));
                        float _4616 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3294 = dot(vec3(_918, _921, _924), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                        float _4627 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                        float _3302 = _3237 * _3278;
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3227) + _3303;
                        float _4638 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3308 = 1.0 - _3278;
                        float _3318 = (0.5 / (((_3307 * ((_3293 * _3308) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3278) * _3293))) * _3307;
                        float _4649 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3329 = (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) / ((_3301 * _3301) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125))) * _3233;
                        _3081 = (_3248 * _3196.x) + _3154;
                        _3082 = (_3248 * _3196.y) + _3155;
                        _3083 = (_3248 * _3196.z) + _3156;
                        _3078 = (_3329 * _3213.x) + _3151;
                        _3079 = (_3329 * _3213.y) + _3152;
                        _3080 = (_3329 * _3213.z) + _3153;
                        if (_3158 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3158;
                        }
                    }
                    frontier_phi_66_pred = _3078;
                    frontier_phi_66_pred_1 = _3083;
                    frontier_phi_66_pred_2 = _3082;
                    frontier_phi_66_pred_3 = _3081;
                    frontier_phi_66_pred_4 = _3080;
                    frontier_phi_66_pred_5 = _3079;
                }
                _2854 = frontier_phi_66_pred;
                _2864 = frontier_phi_66_pred_1;
                _2862 = frontier_phi_66_pred_2;
                _2860 = frontier_phi_66_pred_3;
                _2858 = frontier_phi_66_pred_4;
                _2856 = frontier_phi_66_pred_5;
                uint _3013 = _3012 + 1u;
                if (_3013 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3006 = _2854;
                    _3007 = _2856;
                    _3008 = _2858;
                    _3009 = _2860;
                    _3010 = _2862;
                    _3011 = _2864;
                    _3012 = _3013;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
        }
        uvec4 _2867 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2868 = _2867.z;
        uint _2870 = (_2868 >> 8u) & 15u;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        if (((4294967295u << _2870) & _2752) == 0u)
        {
            _2974 = _2853;
            _2976 = _2855;
            _2978 = _2857;
            _2980 = _2859;
            _2982 = _2861;
            _2984 = _2863;
        }
        else
        {
            float _2999 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
            float _3000 = _2999 * _2706;
            float _3001 = _2999 * _2707;
            float _3002 = _2999 * _2708;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2870 < ((_2868 >> 12u) & 15u))
            {
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _3134 = _2853;
                float _3135 = _2855;
                float _3136 = _2857;
                float _3137 = _2859;
                float _3138 = _2861;
                float _3139 = _2863;
                uint _3140 = _2870;
                uint _3149;
                bool _3150;
                for (;;)
                {
                    _3149 = texelFetch(g_lightClassification, int((((_2746 << 5u) + (_2732 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                    _3150 = _3149 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3150)
                    {
                        frontier_phi_77_pred = _3139;
                        frontier_phi_77_pred_1 = _3138;
                        frontier_phi_77_pred_2 = _3137;
                        frontier_phi_77_pred_3 = _3136;
                        frontier_phi_77_pred_4 = _3135;
                        frontier_phi_77_pred_5 = _3134;
                    }
                    else
                    {
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3356 = _3134;
                        float _3357 = _3135;
                        float _3358 = _3136;
                        float _3359 = _3137;
                        float _3360 = _3138;
                        float _3361 = _3139;
                        uint _3362 = _3149;
                        uint _3363;
                        vec4 _3388;
                        float _3389;
                        vec4 _3404;
                        vec3 _3416;
                        vec4 _3431;
                        vec4 _3446;
                        float _3492;
                        bool _3493;
                        for (;;)
                        {
                            uint _3373 = ((_3140 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3362));
                            _3363 = (_3362 + 4294967295u) & _3362;
                            uint _3375 = _3373 * 40u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            _3389 = _3388.w;
                            uint _3391 = (_3373 * 40u) + 4u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3373 * 40u) + 8u;
                            _3416 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x));
                            uint _3418 = (_3373 * 40u) + 16u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3373 * 40u) + 20u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3373 * 40u) + 24u;
                            vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3467 = (_3373 * 40u) + 28u;
                            vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            _3492 = fma(_2708, _3480.z, fma(_2707, _3480.y, _3480.x * _2706)) + _3480.w;
                            _3493 = !((fma(_2708, _3461.z, fma(_2707, _3461.y, _3461.x * _2706)) + _3461.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3493)
                            {
                                float _3520 = _3388.x - _2706;
                                float _3521 = _3388.y - _2707;
                                float _3522 = _3388.z - _2708;
                                float _3523 = dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522));
                                float _3526 = inversesqrt(_3523);
                                float _3527 = _3526 * _3520;
                                float _3528 = _3526 * _3521;
                                float _3529 = _3526 * _3522;
                                float _3533 = 1.0 - (_3523 / (_3389 * _3389));
                                float _4660 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3538 = sqrt(_3523) * _3404.w;
                                float _3540 = 1.39999997615814208984375 / (_3538 + 1.39999997615814208984375);
                                float _3541 = _3540 * _3540;
                                float _3544 = ((1.0 - _3541) * dot(vec3(_3527, _3528, _3529), vec3(_918, _921, _924))) + _3541;
                                float _3547 = _3538 * _3538;
                                float _3551 = (fma(_2708, _3431.z, fma(_2707, _3431.y, _3431.x * _2706)) + _3431.w) / _3492;
                                float _3552 = (fma(_2708, _3446.z, fma(_2707, _3446.y, _3446.x * _2706)) + _3446.w) / _3492;
                                float _3556 = 1.0 - dot(vec2(_3551, _3552), vec2(_3551, _3552));
                                float _4676 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3558 = _3557 * (((isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0))) * _3534) / ((_3547 * 0.699999988079071044921875) + 1.0));
                                float _3570 = exp2(log2(1.0 / ((_3547 * 3.5) + 5.0)) * 0.25);
                                float _3571 = 1.0 - _993;
                                float _3578 = sqrt(1.0 - ((1.0 - (_3571 * _3571)) * (1.0 - (_3570 * _3570))));
                                float _3579 = _3578 * _3578;
                                float _3580 = _3579 * _3579;
                                float _3581 = _3527 - _3000;
                                float _3582 = _3528 - _3001;
                                float _3583 = _3529 - _3002;
                                float _3587 = inversesqrt(dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583)));
                                float _3591 = dot(vec3(_918, _921, _924), vec3((-0.0) - _3000, (-0.0) - _3001, (-0.0) - _3002));
                                float _4687 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3594 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3595 = dot(vec3(_918, _921, _924), vec3(_3587 * _3581, _3587 * _3582, _3587 * _3583));
                                float _4698 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3598 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3602 = ((_3598 * _3598) * (_3580 + (-1.0))) + 1.0;
                                float _3603 = _3540 * _3579;
                                float _3604 = _3603 * _3603;
                                float _3610 = ((1.0 - _3604) * dot(vec3(_918, _921, _924), vec3(_3527, _3528, _3529))) + _3604;
                                float _4709 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3612 = 1.0 - _3579;
                                float _3622 = (0.5 / (((_3611 * ((_3594 * _3612) + _3579)) + 9.9999999392252902907785028219223e-09) + (((_3611 * _3612) + _3579) * _3594))) * _3611;
                                float _4720 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3632 = (_3557 * _3534) * (((_3580 * 3.1415927410125732421875) * (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) / ((_3602 * _3602) * ((_3547 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3558 * _3404.y;
                                frontier_phi_83_pred_1 = _3558 * _3404.x;
                                frontier_phi_83_pred_2 = _3632 * _3416.z;
                                frontier_phi_83_pred_3 = _3632 * _3416.y;
                                frontier_phi_83_pred_4 = _3632 * _3416.x;
                                frontier_phi_83_pred_5 = _3558 * _3404.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3640 = frontier_phi_83_pred;
                            _3639 = frontier_phi_83_pred_1;
                            _3638 = frontier_phi_83_pred_2;
                            _3637 = frontier_phi_83_pred_3;
                            _3636 = frontier_phi_83_pred_4;
                            _3641 = frontier_phi_83_pred_5;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            if (_3363 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3363;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3348;
                        frontier_phi_77_pred_1 = _3347;
                        frontier_phi_77_pred_2 = _3346;
                        frontier_phi_77_pred_3 = _3345;
                        frontier_phi_77_pred_4 = _3344;
                        frontier_phi_77_pred_5 = _3343;
                    }
                    _2985 = frontier_phi_77_pred;
                    _2983 = frontier_phi_77_pred_1;
                    _2981 = frontier_phi_77_pred_2;
                    _2979 = frontier_phi_77_pred_3;
                    _2977 = frontier_phi_77_pred_4;
                    _2975 = frontier_phi_77_pred_5;
                    uint _3141 = _3140 + 1u;
                    if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3134 = _2975;
                        _3135 = _2977;
                        _3136 = _2979;
                        _3137 = _2981;
                        _3138 = _2983;
                        _3139 = _2985;
                        _3140 = _3141;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2979;
                frontier_phi_58_59_ladder_1 = _2985;
                frontier_phi_58_59_ladder_2 = _2983;
                frontier_phi_58_59_ladder_3 = _2981;
                frontier_phi_58_59_ladder_4 = _2977;
                frontier_phi_58_59_ladder_5 = _2975;
            }
            else
            {
                frontier_phi_58_59_ladder = _2857;
                frontier_phi_58_59_ladder_1 = _2863;
                frontier_phi_58_59_ladder_2 = _2861;
                frontier_phi_58_59_ladder_3 = _2859;
                frontier_phi_58_59_ladder_4 = _2855;
                frontier_phi_58_59_ladder_5 = _2853;
            }
            _2974 = frontier_phi_58_59_ladder_5;
            _2976 = frontier_phi_58_59_ladder_4;
            _2978 = frontier_phi_58_59_ladder;
            _2980 = frontier_phi_58_59_ladder_3;
            _2982 = frontier_phi_58_59_ladder_2;
            _2984 = frontier_phi_58_59_ladder_1;
        }
        float _2989 = isnan(1.0) ? _977 : (isnan(_977) ? 1.0 : min(_977, 1.0));
        _2765 = (_2989 * _2980) + _2198;
        _2767 = (_2989 * _2982) + _2200;
        _2769 = (_2989 * _2984) + _2202;
        _2771 = ((_2974 * _961) * _2989) + _2546;
        _2773 = ((_2976 * _963) * _2989) + _2548;
        _2775 = ((_2978 * _964) * _2989) + _2550;
    }
    else
    {
        _2765 = _2198;
        _2767 = _2200;
        _2769 = _2202;
        _2771 = _2546;
        _2773 = _2548;
        _2775 = _2550;
    }
    float _4736 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _4747 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _4758 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _2792 = ((isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2765 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _977))) + ((_2771 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1815)) * cbPerFrame._m0[3u].x);
    float _2793 = ((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2767 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _977))) + ((_2773 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1815)) * cbPerFrame._m0[3u].x);
    float _2794 = ((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2769 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _977))) + ((_2775 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1815)) * cbPerFrame._m0[3u].x);
    uint _2795 = _252 + 6u;
    float _2803 = _899 / cbSceneParam._m0[86u].x;
    float _2804 = _900 / cbSceneParam._m0[86u].y;
    vec4 _2818 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, (log2((isnan(cbSceneParam._m0[77u].w) ? _822 : (isnan(_822) ? cbSceneParam._m0[77u].w : min(_822, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2820 = _2818.x;
    float _2821 = _2818.y;
    float _2822 = _2818.z;
    float _2823 = _2818.w;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    if (_822 > cbSceneParam._m0[78u].w)
    {
        float _2878 = isnan(_822) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _822 : min(cbSceneParam._m0[80u].w, _822));
        float _2879 = _2878 / _822;
        float _2890 = _2879 * _872;
        float _2891 = _873 * _2879;
        float _2892 = (-0.0) - _2891;
        float _2894 = _2879 * _874;
        float _2896 = (cbSceneParam._m0[77u].w * _2892) / _2878;
        float _2897 = _2896 + cbSceneParam._m0[79u].w;
        float _2898 = cbSceneParam._m0[79u].w - _2891;
        float _2904 = sqrt(((_2890 * _2890) + (_2891 * _2891)) + (_2894 * _2894));
        float _2907 = (1.0 - (cbSceneParam._m0[77u].w / _2878)) * _2904;
        float _2912 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2914 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3091;
        if (abs((_2892 - _2896) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3091 = ((((_2897 > 0.0) ? exp2(_2912 * _2897) : (2.0 - exp2(_2914 * _2897))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2907;
        }
        else
        {
            float _3035 = 1.0 / cbSceneParam._m0[80u].x;
            float _3036 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : max(_2897, _2898));
            float _3037 = isnan(_2898) ? _2897 : (isnan(_2897) ? _2898 : min(_2897, _2898));
            float _3046 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : min(_3036, 0.0));
            float _3047 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : min(_3037, 0.0));
            _3091 = ((abs(_2904 / _2892) * cbSceneParam._m0[80u].y) * ((((_3046 - _3047) * 2.0) - ((exp2(_2912 * (isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0)))) - exp2(_2912 * (isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0))))) * _3035)) - ((exp2(_2914 * _3046) - exp2(_2914 * _3047)) * _3035))) + (_2907 * cbSceneParam._m0[80u].z);
        }
        vec4 _3093 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2803, _2804, 1.0), 0.0);
        float _3102 = exp2((_3091 * (-1.44269502162933349609375)) * (1.0 - _3093.w));
        float _3103 = log2(_3102);
        float _3119 = log2(_2823);
        _2916 = (exp2(_3119 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].x)) * _3093.x) / cbSceneParam._m0[78u].x)) + _2820;
        _2918 = (exp2(_3119 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].y)) * _3093.y) / cbSceneParam._m0[78u].y)) + _2821;
        _2920 = (exp2(_3119 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].z)) * _3093.z) / cbSceneParam._m0[78u].z)) + _2822;
        _2922 = _3102 * _2823;
    }
    else
    {
        _2916 = _2820;
        _2918 = _2821;
        _2920 = _2822;
        _2922 = _2823;
    }
    bool _3129;
    vec4 _2932;
    vec4 _2954;
    float _2956;
    float _2960;
    float _2961;
    float _2962;
    float _2963;
    bool _2973;
    for (;;)
    {
        _2932 = cbMatDynParam._m0[0u];
        float _2934 = roundEven(_2932.y);
        bool _2935 = _2934 == 3.0;
        float _2936 = log2(_2922);
        float _2943 = exp2(_2936 * cbSceneParam._m0[78u].x) * _2792;
        float _2944 = exp2(_2936 * cbSceneParam._m0[78u].y) * _2793;
        float _2945 = exp2(_2936 * cbSceneParam._m0[78u].z) * _2794;
        float _2952 = _888 + (-0.5);
        _2954 = cbMtdParam._m0[1u];
        _2956 = _2954.y * _2952;
        float _2959 = (_2934 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2960 = _2959 * (_2935 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2916)));
        _2961 = _2959 * (_2935 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2918)));
        _2962 = _2959 * (_2935 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2920)));
        _2963 = _2952 * 0.999000012874603271484375;
        _2973 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2973)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _2963) < 0.5)
            {
                _3129 = true;
                break;
            }
        }
        uint _3070 = _937 + uint(_2932.w);
        if ((cbInstanceData._m0[_3070].w < 1.0) && ((cbInstanceData._m0[_3070].w + _2963) < 0.5))
        {
            _3129 = true;
            break;
        }
        if ((_2956 + 1.0) < _2954.x)
        {
            _3129 = true;
            break;
        }
        _3129 = false;
        break;
    }
    float _3334;
    if (_3129)
    {
        discard_state = true;
        _3334 = 0.0;
    }
    else
    {
        _3334 = cbInstanceData._m0[_2795].w;
    }
    SV_Target.x = _2960;
    SV_Target.y = _2961;
    SV_Target.z = _2962;
    SV_Target.w = _3334;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2795].w;
    discard_exit();
}


