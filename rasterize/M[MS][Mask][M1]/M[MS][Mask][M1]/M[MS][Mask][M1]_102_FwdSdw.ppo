#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1370;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _403 = _401.x;
    float _415 = dot(vec4(_403, _401.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _432 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _362.x) * 2.0) - ((((_403 - _415) * cbMtdParam._m0[23u].w) + _415) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3978 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _440 = (_433 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _441 = (_433 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _442 = (_433 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _479 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _481 = _479.x;
    float _491 = dot(vec4(_481, _479.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _505 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _362.y) * 2.0) - ((((_481 - _491) * cbMtdParam._m0[23u].w) + _491) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3989 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _513 = (_506 * ((_459.x * cbMtdParam._m0[13u].x) - _440)) + _440;
    float _514 = (_506 * ((_459.y * cbMtdParam._m0[13u].y) - _441)) + _441;
    float _515 = (_506 * ((_459.z * cbMtdParam._m0[13u].z) - _442)) + _442;
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _272) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _273) + cbTextureTilingScale._m0[24u].w));
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _553 = _551.x;
    float _563 = dot(vec4(_553, _551.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _575 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _362.z) * 2.0) - ((((_553 - _563) * cbMtdParam._m0[23u].w) + _563) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4000 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _589 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_576 * ((_534.x * cbMtdParam._m0[14u].x) - _513)) + _513);
    float _592 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_576 * ((_534.y * cbMtdParam._m0[14u].y) - _514)) + _514);
    float _595 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_576 * ((_534.z * cbMtdParam._m0[14u].z) - _515)) + _515);
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _627 = _625.x;
    float _628 = _625.y;
    float _629 = _625.z;
    float _636 = ((_608.x - _627) * _433) + _627;
    float _637 = ((_608.y - _628) * _433) + _628;
    float _638 = ((_608.z - _629) * _433) + _629;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _661 = ((_650.x - _636) * _506) + _636;
    float _662 = ((_650.y - _637) * _506) + _637;
    float _663 = ((_650.z - _638) * _506) + _638;
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _272) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _273) + cbTextureTilingScale._m0[23u].w));
    float _688 = ((_675.z - _663) * _576) + _663;
    float _691 = ((((_675.x - _661) * _576) + _661) * 2.0) + (-1.0);
    float _693 = ((((_675.y - _662) * _576) + _662) * 2.0) + (-1.0);
    float _694 = dot(vec2(_691, _693), vec2(_691, _693));
    float _4011 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _699 = sqrt(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))));
    vec4 _713 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _725 = (((_713.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _691;
    float _726 = (((_713.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _693;
    vec4 _752 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _754 = _752.x;
    float _771 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _754) * _433) + _754;
    float _789 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _771) * _506) + _771;
    float _807 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _272) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _273) + cbTextureTilingScale._m0[10u].w)).x - _789) * _576) + _789;
    float _811 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _807) * cbMtdParam._m0[19u].z) + _807;
    float _815 = (cbMtdParam._m0[19u].w * (_713.z - _688)) + _688;
    float _817 = cbMtdParam._m0[22u].x + _713.w;
    float _820 = fma(_699, _239 * NORMAL.x, fma(_726, _246 * TANGENT.x, (_232 * _224) * _725));
    float _823 = fma(_699, _239 * NORMAL.y, fma(_726, _246 * TANGENT.y, (_232 * _225) * _725));
    float _826 = fma(_699, _239 * NORMAL.z, fma(_726, _246 * TANGENT.z, (_232 * _226) * _725));
    float _830 = inversesqrt(dot(vec3(_820, _823, _826), vec3(_820, _823, _826)));
    float _831 = _830 * _820;
    float _832 = _830 * _823;
    float _833 = _830 * _826;
    float _4022 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _834 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4044 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4055 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4066 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4077 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _839 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _853 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _903 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _893);
    float _904 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _893);
    float _905 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _893);
    float _909 = inversesqrt(dot(vec3(_903, _904, _905), vec3(_903, _904, _905)));
    float _910 = _903 * _909;
    float _911 = _904 * _909;
    float _912 = _905 * _909;
    float _918 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _919 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _937 = fma(_833, cbSceneParam._m0[5u].z, fma(_832, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _831));
    float _940 = fma(_833, cbSceneParam._m0[6u].z, fma(_832, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _831));
    float _943 = fma(_833, cbSceneParam._m0[7u].z, fma(_832, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _831));
    uint _957 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _963 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * cbInstanceData._m0[_957].x;
    float _964 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * cbInstanceData._m0[_957].y;
    float _965 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * cbInstanceData._m0[_957].z;
    float _4088 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _969 = 1.0 - _839;
    float _970 = _966 * _969;
    float _971 = _967 * _969;
    float _972 = _968 * _969;
    float _977 = (_966 + (-0.039999999105930328369140625)) * _839;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _839;
    float _979 = (_968 + (-0.039999999105930328369140625)) * _839;
    float _980 = _977 + 0.039999999105930328369140625;
    float _982 = _978 + 0.039999999105930328369140625;
    float _983 = _979 + 0.039999999105930328369140625;
    vec4 _992 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _918, cbSceneParam._m0[86u].y * _919));
    float _996 = ((isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * TEXCOORD_5.w) * _992.x;
    float _997 = dot(vec3(_831, _832, _833), vec3(_910, _911, _912));
    float _1000 = _997 * 2.0;
    float _1004 = (_1000 * _831) - _910;
    float _1005 = (_1000 * _832) - _911;
    float _1006 = (_1000 * _833) - _912;
    float _1010 = abs(dot(vec3(_910, _911, _912), vec3(_831, _832, _833)));
    float _4121 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1012 = sqrt(_834);
    float _1025 = exp2((_1012 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1012 * 3.0));
    float _1031 = (1.0 - _1025) * ((_1012 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1032 = _1025 * _1012;
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1369;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1094 = fma(_1068, cbModelParam._m0[26u].z, fma(_1064, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1060));
        float _1098 = fma(_1068, cbModelParam._m0[27u].z, fma(_1064, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1060));
        float _1102 = fma(_1068, cbModelParam._m0[28u].z, fma(_1064, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1060));
        float _1127 = _1060 + _831;
        float _1128 = _1064 + _832;
        float _1129 = _1068 + _833;
        float _1139 = fma(_1129, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127)) - _1094;
        float _1140 = fma(_1129, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127)) - _1098;
        float _1141 = fma(_1129, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127)) - _1102;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1094 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1098 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[34u].z) + ((((((_1102 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1197 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1163.x + (-0.5));
        float _1199 = _1197 * (_1163.y + (-0.5));
        float _1200 = _1197 * (_1163.z + (-0.5));
        float _1207 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1170.x + (-0.5));
        float _1209 = _1207 * (_1170.y + (-0.5));
        float _1210 = _1207 * (_1170.z + (-0.5));
        float _1217 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1177.x + (-0.5));
        float _1219 = _1217 * (_1177.y + (-0.5));
        float _1220 = _1217 * (_1177.z + (-0.5));
        float _1227 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1184.x + (-0.5));
        float _1229 = _1227 * (_1184.y + (-0.5));
        float _1230 = _1227 * (_1184.z + (-0.5));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = _1198 * 0.5;
        float _1235 = _1208 * 0.5;
        float _1236 = _1218 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1251 = (dot(vec3(_831, _832, _833), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1261 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4169 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1263 + 1.0))) + _1268) * _1231;
        float _1278 = _1199 * 0.5;
        float _1279 = _1209 * 0.5;
        float _1280 = _1219 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_831, _832, _833), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4202 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1305 + 1.0))) + _1310) * _1232;
        float _1320 = _1200 * 0.5;
        float _1321 = _1210 * 0.5;
        float _1322 = _1220 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_831, _832, _833), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4235 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1347 + 1.0))) + _1352) * _1233;
        _1369 = _1200;
        _1371 = _1199;
        _1372 = _1198;
        _1373 = _1210;
        _1374 = _1209;
        _1375 = _1208;
        _1376 = _1220;
        _1377 = _1219;
        _1378 = _1218;
        _1379 = _1233;
        _1380 = _1232;
        _1381 = _1231;
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
    }
    else
    {
        _1369 = _1370;
        _1371 = _1370;
        _1372 = _1370;
        _1373 = _1370;
        _1374 = _1370;
        _1375 = _1370;
        _1376 = _1370;
        _1377 = _1370;
        _1378 = _1370;
        _1379 = _1370;
        _1380 = _1370;
        _1381 = _1370;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1407 = fma(_1068, cbModelParam._m0[30u].z, fma(_1064, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1060));
        float _1411 = fma(_1068, cbModelParam._m0[31u].z, fma(_1064, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1060));
        float _1415 = fma(_1068, cbModelParam._m0[32u].z, fma(_1064, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1060));
        float _1438 = _1060 + _831;
        float _1439 = _1064 + _832;
        float _1440 = _1068 + _833;
        float _1450 = fma(_1440, cbModelParam._m0[30u].z, fma(_1439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1438)) - _1407;
        float _1451 = fma(_1440, cbModelParam._m0[31u].z, fma(_1439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1438)) - _1411;
        float _1452 = fma(_1440, cbModelParam._m0[32u].z, fma(_1439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1438)) - _1415;
        float _1456 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
        float _1469 = ((_1456 * _1450) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1407 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1456 * _1451) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1411 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1471 = ((_1456 * _1452) / cbModelParam._m0[35u].z) + ((((((_1415 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        float _1506 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1473.x + (-0.5));
        float _1508 = _1506 * (_1473.y + (-0.5));
        float _1509 = _1506 * (_1473.z + (-0.5));
        float _1516 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1480.x + (-0.5));
        float _1518 = _1516 * (_1480.y + (-0.5));
        float _1519 = _1516 * (_1480.z + (-0.5));
        float _1526 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1487.x + (-0.5));
        float _1528 = _1526 * (_1487.y + (-0.5));
        float _1529 = _1526 * (_1487.z + (-0.5));
        float _1536 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1494.x + (-0.5));
        float _1538 = _1536 * (_1494.y + (-0.5));
        float _1539 = _1536 * (_1494.z + (-0.5));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = _1507 * 0.5;
        float _1544 = _1517 * 0.5;
        float _1545 = _1527 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_831, _832, _833), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4298 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1570 + 1.0))) + _1575) * _1540;
        float _1585 = _1508 * 0.5;
        float _1586 = _1518 * 0.5;
        float _1587 = _1528 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_831, _832, _833), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4331 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1612 + 1.0))) + _1617) * _1541;
        float _1627 = _1509 * 0.5;
        float _1628 = _1519 * 0.5;
        float _1629 = _1529 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_831, _832, _833), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4364 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1654 + 1.0))) + _1659) * _1542;
        _1676 = _1509;
        _1677 = _1508;
        _1678 = _1507;
        _1679 = _1519;
        _1680 = _1518;
        _1681 = _1517;
        _1682 = _1529;
        _1683 = _1528;
        _1684 = _1527;
        _1685 = _1542;
        _1686 = _1541;
        _1687 = _1540;
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
    }
    else
    {
        _1676 = _1370;
        _1677 = _1370;
        _1678 = _1370;
        _1679 = _1370;
        _1680 = _1370;
        _1681 = _1370;
        _1682 = _1370;
        _1683 = _1370;
        _1684 = _1370;
        _1685 = _1370;
        _1686 = _1370;
        _1687 = _1370;
        _1688 = 0.0;
        _1689 = 0.0;
        _1690 = 0.0;
    }
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1382)) + _1382;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1383)) + _1383;
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1384)) + _1384;
    float _1723 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1700));
    float _1744 = _1004 * 0.5;
    float _1745 = _1005 * 0.5;
    float _1746 = _1006 * 0.5;
    float _1747 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1750 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1753 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1787;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1760 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1369, _1373, _1376, _1379));
        float _1764 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1768 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1775 = dot(vec4(cbModelParam._m0[39u]), vec4(_1744, _1745, _1746, 1.0));
        _1787 = dot(vec3(isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1787 = 1.0;
    }
    float _1798;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1789 = dot(vec4(cbModelParam._m0[40u]), vec4(_1744, _1745, _1746, 1.0));
        _1798 = dot(vec3(isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1789) ? 0.0 : (isnan(0.0) ? _1789 : max(0.0, _1789))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1798 = 1.0;
    }
    float _1802 = (_1798 * cbModelParam._m0[1u].x) + (_1787 * (1.0 - cbModelParam._m0[1u].x));
    float _1812 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _834);
    float _1813 = isnan(_1812) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1812 : min(cbModelParam._m0[25u].z, _1812));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1861 = fma(_1068, cbModelParam._m0[13u].z, fma(_1064, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1060)) + cbModelParam._m0[13u].w;
        float _1865 = fma(_1068, cbModelParam._m0[14u].z, fma(_1064, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1060)) + cbModelParam._m0[14u].w;
        float _1869 = fma(_1068, cbModelParam._m0[15u].z, fma(_1064, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1060)) + cbModelParam._m0[15u].w;
        float _1872 = fma(_1006, cbModelParam._m0[13u].z, fma(_1005, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004));
        float _1875 = fma(_1006, cbModelParam._m0[14u].z, fma(_1005, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004));
        float _1878 = fma(_1006, cbModelParam._m0[15u].z, fma(_1005, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004));
        float _1906;
        if (_1872 > 0.0)
        {
            _1906 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1906 = frontier_phi_14_12_ladder;
        }
        float _2078;
        if (_1875 > 0.0)
        {
            _2078 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2078 = frontier_phi_23_19_ladder;
        }
        float _2373;
        if (_1878 > 0.0)
        {
            _2373 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2373 = frontier_phi_35_30_ladder;
        }
        float _2375 = isnan(_2078) ? _1906 : (isnan(_1906) ? _2078 : min(_1906, _2078));
        float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
        float _2380 = (_2376 * _1872) + _1861;
        float _2381 = (_2376 * _1875) + _1865;
        float _2382 = (_2376 * _1878) + _1869;
        float _2383 = _2376 * 9.9999997473787516355514526367188e-05;
        float _2385 = (-1.0) - _2383;
        float _2387 = _2383 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2382 > _2387) || ((_2382 < _2385) || ((_2381 > _2387) || ((_2381 < _2385) || ((_2380 < _2385) || (_2380 > _2387))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2382, cbModelParam._m0[9u].z, fma(_2381, cbModelParam._m0[9u].y, _2380 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2382, cbModelParam._m0[10u].z, fma(_2381, cbModelParam._m0[10u].y, _2380 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2382, cbModelParam._m0[11u].z, fma(_2381, cbModelParam._m0[11u].y, _2380 * cbModelParam._m0[11u].x))), _1813);
            frontier_phi_13_35_ladder = _2527.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2527.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2527.x * cbModelParam._m0[1u].y;
        }
        _1894 = frontier_phi_13_35_ladder_2;
        _1896 = frontier_phi_13_35_ladder_1;
        _1898 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1004, _1005, _1006), _1813);
        _1894 = _1882.x * cbModelParam._m0[1u].y;
        _1896 = _1882.y * cbModelParam._m0[1u].y;
        _1898 = _1882.z * cbModelParam._m0[1u].y;
    }
    float _1902 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _834);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1902 : min(cbModelParam._m0[25u].w, _1902));
    float _1993;
    float _1995;
    float _1997;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1957 = fma(_1068, cbModelParam._m0[21u].z, fma(_1064, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1060)) + cbModelParam._m0[21u].w;
        float _1961 = fma(_1068, cbModelParam._m0[22u].z, fma(_1064, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1060)) + cbModelParam._m0[22u].w;
        float _1965 = fma(_1068, cbModelParam._m0[23u].z, fma(_1064, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1060)) + cbModelParam._m0[23u].w;
        float _1968 = fma(_1006, cbModelParam._m0[21u].z, fma(_1005, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004));
        float _1971 = fma(_1006, cbModelParam._m0[22u].z, fma(_1005, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004));
        float _1974 = fma(_1006, cbModelParam._m0[23u].z, fma(_1005, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004));
        float _2083;
        if (_1968 > 0.0)
        {
            _2083 = abs((1.0 - _1957) / _1968);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1957 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2083 = frontier_phi_25_21_ladder;
        }
        float _2400;
        if (_1971 > 0.0)
        {
            _2400 = abs((1.0 - _1961) / _1971);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1961 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2400 = frontier_phi_37_32_ladder;
        }
        float _2738;
        if (_1974 > 0.0)
        {
            _2738 = abs((1.0 - _1965) / _1974);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1965 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2738 = frontier_phi_47_44_ladder;
        }
        float _2740 = isnan(_2400) ? _2083 : (isnan(_2083) ? _2400 : min(_2083, _2400));
        float _2741 = isnan(_2738) ? _2740 : (isnan(_2740) ? _2738 : min(_2740, _2738));
        float _2745 = (_2741 * _1968) + _1957;
        float _2746 = (_2741 * _1971) + _1961;
        float _2747 = (_2741 * _1974) + _1965;
        float _2748 = _2741 * 9.9999997473787516355514526367188e-05;
        float _2749 = (-1.0) - _2748;
        float _2751 = _2748 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2747 > _2751) || ((_2747 < _2749) || ((_2746 > _2751) || ((_2746 < _2749) || ((_2745 < _2749) || (_2745 > _2751))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2747, cbModelParam._m0[17u].z, fma(_2746, cbModelParam._m0[17u].y, _2745 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2747, cbModelParam._m0[18u].z, fma(_2746, cbModelParam._m0[18u].y, _2745 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2747, cbModelParam._m0[19u].z, fma(_2746, cbModelParam._m0[19u].y, _2745 * cbModelParam._m0[19u].x))), _1903);
            frontier_phi_22_47_ladder = _2869.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2869.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2869.x * cbModelParam._m0[1u].z;
        }
        _1993 = frontier_phi_22_47_ladder_2;
        _1995 = frontier_phi_22_47_ladder_1;
        _1997 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1977 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1004, _1005, _1006), _1903);
        _1993 = _1977.x * cbModelParam._m0[1u].z;
        _1995 = _1977.y * cbModelParam._m0[1u].z;
        _1997 = _1977.z * cbModelParam._m0[1u].z;
    }
    float _2010 = (((_1031 * _980) + _1032) * _996) * ((cbModelParam._m0[1u].w * (_1993 - _1894)) + _1894);
    float _2012 = (((_1031 * _982) + _1032) * _996) * ((cbModelParam._m0[1u].w * (_1995 - _1896)) + _1896);
    float _2014 = (((_1031 * _983) + _1032) * _996) * ((cbModelParam._m0[1u].w * (_1997 - _1898)) + _1898);
    float _2017 = fma(_2014, cbSceneParam._m0[89u].z, fma(_2012, cbSceneParam._m0[89u].y, _2010 * cbSceneParam._m0[89u].x));
    float _2020 = fma(_2014, cbSceneParam._m0[90u].z, fma(_2012, cbSceneParam._m0[90u].y, _2010 * cbSceneParam._m0[90u].x));
    float _2023 = fma(_2014, cbSceneParam._m0[91u].z, fma(_2012, cbSceneParam._m0[91u].y, _2010 * cbSceneParam._m0[91u].x));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2061 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2065 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2069 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2070 = _2057 / _2069;
    float _2071 = _2061 / _2069;
    float _2072 = _2065 / _2069;
    float _2219;
    float _2220;
    float _2221;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2099 = ((uint(_2072 > cbSceneParam._m0[59u].y) + uint(_2072 > cbSceneParam._m0[59u].x)) + uint(_2072 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2100 = _2099 + 43u;
        uint _2108 = _2099 + 44u;
        uint _2116 = _2099 + 45u;
        uint _2124 = _2099 + 46u;
        float _2135 = fma(_2069, cbSceneParam._m0[_2100].w, fma(_2065, cbSceneParam._m0[_2100].z, fma(_2061, cbSceneParam._m0[_2100].y, _2057 * cbSceneParam._m0[_2100].x)));
        float _2139 = fma(_2069, cbSceneParam._m0[_2108].w, fma(_2065, cbSceneParam._m0[_2108].z, fma(_2061, cbSceneParam._m0[_2108].y, _2057 * cbSceneParam._m0[_2108].x)));
        float _2147 = fma(_2069, cbSceneParam._m0[_2124].w, fma(_2065, cbSceneParam._m0[_2124].z, fma(_2061, cbSceneParam._m0[_2124].y, _2057 * cbSceneParam._m0[_2124].x)));
        float _2152 = cbSceneParam._m0[33u].z * _2147;
        float _2154 = cbSceneParam._m0[33u].w * _2147;
        float _2157 = fma(_2069, cbSceneParam._m0[_2116].w, fma(_2065, cbSceneParam._m0[_2116].z, fma(_2061, cbSceneParam._m0[_2116].y, _2057 * cbSceneParam._m0[_2116].x))) / _2147;
        float _2205 = (cbSceneParam._m0[33u].x - sqrt(((_2071 * _2071) + (_2070 * _2070)) + (_2072 * _2072))) * cbSceneParam._m0[33u].y;
        float _4490 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2212 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2152 + _2135) / _2147, (_2154 + _2139) / _2147), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2154 + _2135) / _2147, (_2139 - _2152) / _2147), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2135 - _2152) / _2147, (_2139 - _2154) / _2147), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2135 - _2154) / _2147, (_2152 + _2139) / _2147), _2157), 0.0)).x), vec4(0.25)));
        _2219 = 1.0 - (_2212 * cbSceneParam._m0[34u].x);
        _2220 = 1.0 - (_2212 * cbSceneParam._m0[34u].y);
        _2221 = 1.0 - (_2212 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2219 = 1.0;
        _2220 = 1.0;
        _2221 = 1.0;
    }
    float _2285;
    float _2287;
    float _2289;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2273 = fma(_2069, cbSceneParam._m0[63u].w, fma(_2065, cbSceneParam._m0[63u].z, fma(_2061, cbSceneParam._m0[63u].y, _2057 * cbSceneParam._m0[63u].x)));
        float _2274 = fma(_2069, cbSceneParam._m0[60u].w, fma(_2065, cbSceneParam._m0[60u].z, fma(_2061, cbSceneParam._m0[60u].y, _2057 * cbSceneParam._m0[60u].x))) / _2273;
        float _2275 = fma(_2069, cbSceneParam._m0[61u].w, fma(_2065, cbSceneParam._m0[61u].z, fma(_2061, cbSceneParam._m0[61u].y, _2057 * cbSceneParam._m0[61u].x))) / _2273;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2274 >= cbSceneParam._m0[64u].x) && (_2275 >= cbSceneParam._m0[64u].y)) && (_2274 <= cbSceneParam._m0[64u].z)) && (_2275 <= cbSceneParam._m0[64u].w))
        {
            float _2413 = fma(_2069, cbSceneParam._m0[62u].w, fma(_2065, cbSceneParam._m0[62u].z, fma(_2061, cbSceneParam._m0[62u].y, _2057 * cbSceneParam._m0[62u].x))) / _2273;
            float _2417 = isnan(cbSceneParam._m0[41u].w) ? _2413 : (isnan(_2413) ? cbSceneParam._m0[41u].w : max(_2413, cbSceneParam._m0[41u].w));
            float _2460 = (cbSceneParam._m0[33u].x - sqrt(((_2071 * _2071) + (_2070 * _2070)) + (_2072 * _2072))) * cbSceneParam._m0[33u].y;
            float _4506 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
            float _2467 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2274, cbSceneParam._m0[33u].w + _2275), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2274, _2275 - cbSceneParam._m0[33u].z), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2274 - cbSceneParam._m0[33u].z, _2275 - cbSceneParam._m0[33u].w), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2274 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2275), _2417), 0.0)).x), vec4(0.25)));
            float _2471 = 1.0 - (_2467 * cbSceneParam._m0[34u].x);
            float _2472 = 1.0 - (_2467 * cbSceneParam._m0[34u].y);
            float _2473 = 1.0 - (_2467 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2473) ? _2221 : (isnan(_2221) ? _2473 : min(_2221, _2473));
            frontier_phi_34_33_ladder_1 = isnan(_2472) ? _2220 : (isnan(_2220) ? _2472 : min(_2220, _2472));
            frontier_phi_34_33_ladder_2 = isnan(_2471) ? _2219 : (isnan(_2219) ? _2471 : min(_2219, _2471));
        }
        else
        {
            frontier_phi_34_33_ladder = _2221;
            frontier_phi_34_33_ladder_1 = _2220;
            frontier_phi_34_33_ladder_2 = _2219;
        }
        _2285 = frontier_phi_34_33_ladder_2;
        _2287 = frontier_phi_34_33_ladder_1;
        _2289 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2285 = _2219;
        _2287 = _2220;
        _2289 = _2221;
    }
    uvec4 _2294 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2296 = _2294.x * 14u;
    uint _2297 = _2296 + 13u;
    float _2304 = _996 + (-1.0);
    float _2309 = (cbLight._m0[_2297].x * _2304) + 1.0;
    float _2310 = (cbLight._m0[_2297].y * _2304) + 1.0;
    float _2311 = (cbLight._m0[_2297].z * _2304) + 1.0;
    float _2312 = (cbLight._m0[_2297].w * _2304) + 1.0;
    uint _2313 = _2296 + 5u;
    float _2319 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
    uint _2323 = _2296 + 4u;
    float _2332 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
    uint _2336 = _2296 | 1u;
    float _2347 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_831, _832, _833));
    float _2350 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_831, _832, _833));
    float _4542 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _4553 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2355 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * 0.3183098733425140380859375;
    float _2357 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * 0.3183098733425140380859375;
    float _2364 = ((cbLight._m0[_2313].x * _2319) * _2357) + (((cbLight._m0[_2323].x * _2285) * _2332) * _2355);
    float _2365 = ((_2319 * cbLight._m0[_2313].y) * _2357) + (((cbLight._m0[_2323].y * _2287) * _2332) * _2355);
    float _2366 = ((_2319 * cbLight._m0[_2313].z) * _2357) + (((cbLight._m0[_2323].z * _2289) * _2332) * _2355);
    uvec4 _2370 = floatBitsToUint(cbLight._m0[_2296 + 12u]);
    bool _2372 = _2370.x == 0u;
    float _2474;
    float _2476;
    float _2478;
    if (_2372)
    {
        _2474 = _2364;
        _2476 = _2365;
        _2478 = _2366;
    }
    else
    {
        uint _2482 = _2296 + 6u;
        float _2498 = (dot(vec3(cbLight._m0[_2296 + 2u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2499 = _2498 * _2498;
        float _4564 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2500 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2501 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2474 = (((cbLight._m0[_2482].x * 0.3183098733425140380859375) * _2500) * _2501) + _2364;
        _2476 = (((cbLight._m0[_2482].y * 0.3183098733425140380859375) * _2500) * _2501) + _2365;
        _2478 = (((cbLight._m0[_2482].z * 0.3183098733425140380859375) * _2500) * _2501) + _2366;
    }
    bool _2481 = _2370.y == 0u;
    float _2536;
    float _2538;
    float _2540;
    if (_2481)
    {
        _2536 = _2474;
        _2538 = _2476;
        _2540 = _2478;
    }
    else
    {
        uint _2709 = _2296 + 7u;
        float _2725 = (dot(vec3(cbLight._m0[_2296 + 3u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2726 = _2725 * _2725;
        float _4580 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2727 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2728 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2536 = (((cbLight._m0[_2709].x * 0.3183098733425140380859375) * _2727) * _2728) + _2474;
        _2538 = (((cbLight._m0[_2709].y * 0.3183098733425140380859375) * _2727) * _2728) + _2476;
        _2540 = (((cbLight._m0[_2709].z * 0.3183098733425140380859375) * _2727) * _2728) + _2478;
    }
    uint _2543 = _2296 + 8u;
    float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _834) * 0.949999988079071044921875);
    float _2557 = _2556 * _2556;
    float _2558 = cbLight._m0[_2296].x + _910;
    float _2559 = cbLight._m0[_2296].y + _911;
    float _2560 = cbLight._m0[_2296].z + _912;
    float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
    float _2565 = _2564 * _2558;
    float _2566 = _2564 * _2559;
    float _2567 = _2564 * _2560;
    float _2568 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2296].xyz));
    float _4596 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _4607 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _2572 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2573 = dot(vec3(_831, _832, _833), vec3(_2565, _2566, _2567));
    float _4618 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2576 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2577 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2565, _2566, _2567));
    float _4629 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2581 = _2557 * _2557;
    float _2585 = ((_2576 * _2576) * (_2581 + (-1.0))) + 1.0;
    float _2593 = exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0);
    float _2594 = 0.959999978542327880859375 - _977;
    float _2596 = 0.959999978542327880859375 - _978;
    float _2597 = 0.959999978542327880859375 - _979;
    float _2604 = 1.0 - _2557;
    float _2615 = (0.5 / (((_2572 * ((_2571 * _2604) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2604) + _2557) * _2571))) * _2571;
    float _4640 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2617 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2581 / ((_2585 * _2585) * 3.141590118408203125));
    uint _2631 = _2296 + 9u;
    float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _834) * 0.949999988079071044921875);
    float _2643 = _2642 * _2642;
    float _2644 = cbLight._m0[_2336].x + _910;
    float _2645 = cbLight._m0[_2336].y + _911;
    float _2646 = cbLight._m0[_2336].z + _912;
    float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
    float _2651 = _2650 * _2644;
    float _2652 = _2650 * _2645;
    float _2653 = _2650 * _2646;
    float _2654 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2336].xyz));
    float _4651 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2658 = dot(vec3(_831, _832, _833), vec3(_2651, _2652, _2653));
    float _4662 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2661 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _2662 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2651, _2652, _2653));
    float _4673 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2666 = _2643 * _2643;
    float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
    float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0);
    float _2684 = 1.0 - _2643;
    float _2694 = (0.5 / (((_2572 * ((_2657 * _2684) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2684) + _2643) * _2657))) * _2657;
    float _4684 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2696 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
    float _2706 = (((((_2677 * _2594) + _980) * cbLight._m0[_2631].x) * _2696) * _2319) + ((((cbLight._m0[_2543].x * _2285) * ((_2593 * _2594) + _980)) * _2617) * _2332);
    float _2707 = (((((_2677 * _2596) + _982) * cbLight._m0[_2631].y) * _2696) * _2319) + ((((cbLight._m0[_2543].y * _2287) * ((_2593 * _2596) + _982)) * _2617) * _2332);
    float _2708 = (((((_2677 * _2597) + _983) * cbLight._m0[_2631].z) * _2696) * _2319) + ((((cbLight._m0[_2543].z * _2289) * ((_2593 * _2597) + _983)) * _2617) * _2332);
    float _2764;
    float _2766;
    float _2768;
    if (_2372)
    {
        _2764 = _2706;
        _2766 = _2707;
        _2768 = _2708;
    }
    else
    {
        uint _2770 = _2296 + 2u;
        uint _2774 = _2296 + 10u;
        float _2788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2770].w)) * _834) * 0.949999988079071044921875);
        float _2789 = _2788 * _2788;
        float _2790 = cbLight._m0[_2770].x + _910;
        float _2791 = cbLight._m0[_2770].y + _911;
        float _2792 = cbLight._m0[_2770].z + _912;
        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
        float _2797 = _2796 * _2790;
        float _2798 = _2796 * _2791;
        float _2799 = _2796 * _2792;
        float _2800 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2770].xyz));
        float _4695 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2804 = dot(vec3(_831, _832, _833), vec3(_2797, _2798, _2799));
        float _4706 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2807 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2808 = dot(vec3(cbLight._m0[_2770].xyz), vec3(_2797, _2798, _2799));
        float _4717 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2812 = _2789 * _2789;
        float _2816 = ((_2807 * _2807) * (_2812 + (-1.0))) + 1.0;
        float _2823 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
        float _2830 = 1.0 - _2789;
        float _2840 = (0.5 / (((_2572 * ((_2803 * _2830) + _2789)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2830) + _2789) * _2803))) * _2803;
        float _4728 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2842 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2812 / ((_2816 * _2816) * 3.141590118408203125));
        float _2843 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2764 = (((((_2823 * _2594) + _980) * cbLight._m0[_2774].x) * _2842) * _2843) + _2706;
        _2766 = (((((_2823 * _2596) + _982) * cbLight._m0[_2774].y) * _2842) * _2843) + _2707;
        _2768 = (((((_2823 * _2597) + _983) * cbLight._m0[_2774].z) * _2842) * _2843) + _2708;
    }
    float _2874;
    float _2876;
    float _2878;
    if (_2481)
    {
        _2874 = _2764;
        _2876 = _2766;
        _2878 = _2768;
    }
    else
    {
        uint _2885 = _2296 + 3u;
        uint _2889 = _2296 + 11u;
        float _2903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2885].w)) * _834) * 0.949999988079071044921875);
        float _2904 = _2903 * _2903;
        float _2905 = cbLight._m0[_2885].x + _910;
        float _2906 = cbLight._m0[_2885].y + _911;
        float _2907 = cbLight._m0[_2885].z + _912;
        float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
        float _2912 = _2911 * _2905;
        float _2913 = _2911 * _2906;
        float _2914 = _2911 * _2907;
        float _2915 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2885].xyz));
        float _4744 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2918 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2919 = dot(vec3(_831, _832, _833), vec3(_2912, _2913, _2914));
        float _4755 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2922 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2923 = dot(vec3(cbLight._m0[_2885].xyz), vec3(_2912, _2913, _2914));
        float _4766 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2927 = _2904 * _2904;
        float _2931 = ((_2922 * _2922) * (_2927 + (-1.0))) + 1.0;
        float _2938 = exp2(log2(1.0 - (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) * 5.0);
        float _2945 = 1.0 - _2904;
        float _2955 = (0.5 / (((_2572 * ((_2918 * _2945) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2945) + _2904) * _2918))) * _2918;
        float _4777 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2957 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2927 / ((_2931 * _2931) * 3.141590118408203125));
        float _2958 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2874 = (((((_2938 * _2594) + _980) * cbLight._m0[_2889].x) * _2957) * _2958) + _2764;
        _2876 = (((((_2938 * _2596) + _982) * cbLight._m0[_2889].y) * _2957) * _2958) + _2766;
        _2878 = (((((_2938 * _2597) + _983) * cbLight._m0[_2889].z) * _2957) * _2958) + _2768;
    }
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    if (_2294.y == 0u)
    {
        uvec4 _2979 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2980 = _2979.x;
        uint _2991 = uint((float(_2979.y) * floor(float(uint(cbSceneParam._m0[85u].y * _919) / _2980))) + floor(float(uint(cbSceneParam._m0[85u].x * _918) / _2980)));
        float _3001 = (log2(_2072 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3002 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        uint _3005 = uint(isnan(14.0) ? _3002 : (isnan(_3002) ? 14.0 : min(_3002, 14.0)));
        uvec4 _3010 = texelFetch(g_lightClusterGridBuffer, int(((_3005 << 2u) + (_2991 << 6u)) >> 2u));
        uint _3011 = _3010.x;
        uint _3012 = _2979.z;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        if (((((1u << ((_3012 >> 4u) & 15u)) + 4294967295u) & _3011) == 0u) || ((_3012 & 240u) == 0u))
        {
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
        }
        else
        {
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            uint _3242 = 0u;
            uint _3251;
            bool _3252;
            for (;;)
            {
                _3251 = texelFetch(g_lightClassification, int((((_3005 << 5u) + (_2991 << 9u)) + (_3242 << 2u)) >> 2u)).x;
                _3252 = _3251 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3252)
                {
                    frontier_phi_66_pred = _3241;
                    frontier_phi_66_pred_1 = _3240;
                    frontier_phi_66_pred_2 = _3239;
                    frontier_phi_66_pred_3 = _3238;
                    frontier_phi_66_pred_4 = _3237;
                    frontier_phi_66_pred_5 = _3236;
                }
                else
                {
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    uint _3366;
                    _3360 = _3236;
                    _3361 = _3237;
                    _3362 = _3238;
                    _3363 = _3239;
                    _3364 = _3240;
                    _3365 = _3241;
                    _3366 = _3251;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    for (;;)
                    {
                        uint _3370 = uint(findLSB(_3366)) + (_3242 << 5u);
                        uint _3367 = (_3366 + 4294967295u) & _3366;
                        uint _3372 = _3370 * 48u;
                        vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 3u)).x));
                        uint _3392 = (_3370 * 48u) + 4u;
                        vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3392)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 3u)).x));
                        uint _3411 = (_3370 * 48u) + 8u;
                        vec3 _3422 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3411)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 2u)).x));
                        float _3426 = _3386.x - _2070;
                        float _3427 = _3386.y - _2071;
                        float _3428 = _3386.z - _2072;
                        float _3429 = dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428));
                        float _3432 = inversesqrt(_3429);
                        float _3433 = _3432 * _3426;
                        float _3434 = _3432 * _3427;
                        float _3435 = _3432 * _3428;
                        float _3436 = dot(vec3(_937, _940, _943), vec3(_3433, _3434, _3435));
                        float _3441 = 1.0 - (_3429 * _3386.w);
                        float _4803 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3442 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3443 = sqrt(_3429) * _3405.w;
                        float _3446 = 1.39999997615814208984375 / (_3443 + 1.39999997615814208984375);
                        float _3447 = _3446 * _3446;
                        float _3450 = ((1.0 - _3447) * _3436) + _3447;
                        float _3453 = _3443 * _3443;
                        float _3457 = ((isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0))) * _3442) / ((_3453 * 0.699999988079071044921875) + 1.0);
                        float _3461 = (-0.0) - _2070;
                        float _3462 = (-0.0) - _2071;
                        float _3463 = (-0.0) - _2072;
                        float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                        float _3468 = _3467 * _3461;
                        float _3469 = _3467 * _3462;
                        float _3470 = _3467 * _3463;
                        float _3477 = exp2(log2(1.0 / ((_3453 * 3.5) + 5.0)) * 0.25);
                        float _3478 = 1.0 - _1012;
                        float _3485 = sqrt(1.0 - ((1.0 - (_3478 * _3478)) * (1.0 - (_3477 * _3477))));
                        float _3486 = _3485 * _3485;
                        float _3487 = _3486 * _3486;
                        float _3488 = _3468 + _3433;
                        float _3489 = _3469 + _3434;
                        float _3490 = _3470 + _3435;
                        float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                        float _3498 = dot(vec3(_937, _940, _943), vec3(_3468, _3469, _3470));
                        float _4819 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3501 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3502 = dot(vec3(_937, _940, _943), vec3(_3494 * _3488, _3494 * _3489, _3494 * _3490));
                        float _4830 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3505 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3509 = ((_3505 * _3505) * (_3487 + (-1.0))) + 1.0;
                        float _3510 = _3446 * _3486;
                        float _3511 = _3510 * _3510;
                        float _3514 = ((1.0 - _3511) * _3436) + _3511;
                        float _4841 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3515 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                        float _3516 = 1.0 - _3486;
                        float _3526 = (0.5 / (((_3515 * ((_3501 * _3516) + _3486)) + 9.9999999392252902907785028219223e-09) + (((_3515 * _3516) + _3486) * _3501))) * _3515;
                        float _4852 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3537 = (((_3487 * 3.1415927410125732421875) * (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) / ((_3509 * _3509) * ((_3453 * 2.1991131305694580078125) + 3.141590118408203125))) * _3442;
                        _3295 = (_3457 * _3405.x) + _3363;
                        _3296 = (_3457 * _3405.y) + _3364;
                        _3297 = (_3457 * _3405.z) + _3365;
                        _3292 = (_3537 * _3422.x) + _3360;
                        _3293 = (_3537 * _3422.y) + _3361;
                        _3294 = (_3537 * _3422.z) + _3362;
                        if (_3367 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3360 = _3292;
                            _3361 = _3293;
                            _3362 = _3294;
                            _3363 = _3295;
                            _3364 = _3296;
                            _3365 = _3297;
                            _3366 = _3367;
                        }
                    }
                    frontier_phi_66_pred = _3297;
                    frontier_phi_66_pred_1 = _3296;
                    frontier_phi_66_pred_2 = _3295;
                    frontier_phi_66_pred_3 = _3294;
                    frontier_phi_66_pred_4 = _3293;
                    frontier_phi_66_pred_5 = _3292;
                }
                _3102 = frontier_phi_66_pred;
                _3100 = frontier_phi_66_pred_1;
                _3098 = frontier_phi_66_pred_2;
                _3096 = frontier_phi_66_pred_3;
                _3094 = frontier_phi_66_pred_4;
                _3092 = frontier_phi_66_pred_5;
                uint _3243 = _3242 + 1u;
                if (_3243 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3236 = _3092;
                    _3237 = _3094;
                    _3238 = _3096;
                    _3239 = _3098;
                    _3240 = _3100;
                    _3241 = _3102;
                    _3242 = _3243;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
        }
        uvec4 _3105 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3106 = _3105.z;
        uint _3108 = (_3106 >> 8u) & 15u;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        if (((4294967295u << _3108) & _3011) == 0u)
        {
            _3204 = _3091;
            _3206 = _3093;
            _3208 = _3095;
            _3210 = _3097;
            _3212 = _3099;
            _3214 = _3101;
        }
        else
        {
            float _3229 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
            float _3230 = _3229 * _2070;
            float _3231 = _3229 * _2071;
            float _3232 = _3229 * _2072;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3108 < ((_3106 >> 12u) & 15u))
            {
                float _3205;
                float _3207;
                float _3209;
                float _3211;
                float _3213;
                float _3215;
                float _3343 = _3091;
                float _3344 = _3093;
                float _3345 = _3095;
                float _3346 = _3097;
                float _3347 = _3099;
                float _3348 = _3101;
                uint _3349 = _3108;
                uint _3358;
                bool _3359;
                for (;;)
                {
                    _3358 = texelFetch(g_lightClassification, int((((_3005 << 5u) + (_2991 << 9u)) + (_3349 << 2u)) >> 2u)).x;
                    _3359 = _3358 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3359)
                    {
                        frontier_phi_72_pred = _3348;
                        frontier_phi_72_pred_1 = _3347;
                        frontier_phi_72_pred_2 = _3346;
                        frontier_phi_72_pred_3 = _3345;
                        frontier_phi_72_pred_4 = _3344;
                        frontier_phi_72_pred_5 = _3343;
                    }
                    else
                    {
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3840;
                        float _3555 = _3343;
                        float _3556 = _3344;
                        float _3557 = _3345;
                        float _3558 = _3346;
                        float _3559 = _3347;
                        float _3560 = _3348;
                        uint _3561 = _3358;
                        uint _3562;
                        vec4 _3587;
                        float _3588;
                        vec4 _3603;
                        vec3 _3615;
                        vec4 _3630;
                        vec4 _3645;
                        float _3691;
                        bool _3692;
                        for (;;)
                        {
                            uint _3572 = ((_3349 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3561));
                            _3562 = (_3561 + 4294967295u) & _3561;
                            uint _3574 = _3572 * 40u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            _3588 = _3587.w;
                            uint _3590 = (_3572 * 40u) + 4u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3572 * 40u) + 8u;
                            _3615 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x));
                            uint _3617 = (_3572 * 40u) + 16u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3572 * 40u) + 20u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3572 * 40u) + 24u;
                            vec4 _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3666 = (_3572 * 40u) + 28u;
                            vec4 _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            _3691 = fma(_2072, _3679.z, fma(_2071, _3679.y, _3679.x * _2070)) + _3679.w;
                            _3692 = !((fma(_2072, _3660.z, fma(_2071, _3660.y, _3660.x * _2070)) + _3660.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3692)
                            {
                                float _3719 = _3587.x - _2070;
                                float _3720 = _3587.y - _2071;
                                float _3721 = _3587.z - _2072;
                                float _3722 = dot(vec3(_3719, _3720, _3721), vec3(_3719, _3720, _3721));
                                float _3725 = inversesqrt(_3722);
                                float _3726 = _3725 * _3719;
                                float _3727 = _3725 * _3720;
                                float _3728 = _3725 * _3721;
                                float _3732 = 1.0 - (_3722 / (_3588 * _3588));
                                float _4863 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3733 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3737 = sqrt(_3722) * _3603.w;
                                float _3739 = 1.39999997615814208984375 / (_3737 + 1.39999997615814208984375);
                                float _3740 = _3739 * _3739;
                                float _3743 = ((1.0 - _3740) * dot(vec3(_3726, _3727, _3728), vec3(_937, _940, _943))) + _3740;
                                float _3746 = _3737 * _3737;
                                float _3750 = (fma(_2072, _3630.z, fma(_2071, _3630.y, _3630.x * _2070)) + _3630.w) / _3691;
                                float _3751 = (fma(_2072, _3645.z, fma(_2071, _3645.y, _3645.x * _2070)) + _3645.w) / _3691;
                                float _3755 = 1.0 - dot(vec2(_3750, _3751), vec2(_3750, _3751));
                                float _4879 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3756 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3757 = _3756 * (((isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0))) * _3733) / ((_3746 * 0.699999988079071044921875) + 1.0));
                                float _3769 = exp2(log2(1.0 / ((_3746 * 3.5) + 5.0)) * 0.25);
                                float _3770 = 1.0 - _1012;
                                float _3777 = sqrt(1.0 - ((1.0 - (_3770 * _3770)) * (1.0 - (_3769 * _3769))));
                                float _3778 = _3777 * _3777;
                                float _3779 = _3778 * _3778;
                                float _3780 = _3726 - _3230;
                                float _3781 = _3727 - _3231;
                                float _3782 = _3728 - _3232;
                                float _3786 = inversesqrt(dot(vec3(_3780, _3781, _3782), vec3(_3780, _3781, _3782)));
                                float _3790 = dot(vec3(_937, _940, _943), vec3((-0.0) - _3230, (-0.0) - _3231, (-0.0) - _3232));
                                float _4890 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3793 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3794 = dot(vec3(_937, _940, _943), vec3(_3786 * _3780, _3786 * _3781, _3786 * _3782));
                                float _4901 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3797 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3801 = ((_3797 * _3797) * (_3779 + (-1.0))) + 1.0;
                                float _3802 = _3739 * _3778;
                                float _3803 = _3802 * _3802;
                                float _3809 = ((1.0 - _3803) * dot(vec3(_937, _940, _943), vec3(_3726, _3727, _3728))) + _3803;
                                float _4912 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3810 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3811 = 1.0 - _3778;
                                float _3821 = (0.5 / (((_3810 * ((_3793 * _3811) + _3778)) + 9.9999999392252902907785028219223e-09) + (((_3810 * _3811) + _3778) * _3793))) * _3810;
                                float _4923 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3831 = (_3756 * _3733) * (((_3779 * 3.1415927410125732421875) * (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) / ((_3801 * _3801) * ((_3746 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3757 * _3603.y;
                                frontier_phi_78_pred_1 = _3757 * _3603.x;
                                frontier_phi_78_pred_2 = _3831 * _3615.z;
                                frontier_phi_78_pred_3 = _3831 * _3615.y;
                                frontier_phi_78_pred_4 = _3831 * _3615.x;
                                frontier_phi_78_pred_5 = _3757 * _3603.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3839 = frontier_phi_78_pred;
                            _3838 = frontier_phi_78_pred_1;
                            _3837 = frontier_phi_78_pred_2;
                            _3836 = frontier_phi_78_pred_3;
                            _3835 = frontier_phi_78_pred_4;
                            _3840 = frontier_phi_78_pred_5;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3547 = _3840 + _3560;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            _3544 = _3837 + _3557;
                            if (_3562 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3562;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3547;
                        frontier_phi_72_pred_1 = _3546;
                        frontier_phi_72_pred_2 = _3545;
                        frontier_phi_72_pred_3 = _3544;
                        frontier_phi_72_pred_4 = _3543;
                        frontier_phi_72_pred_5 = _3542;
                    }
                    _3215 = frontier_phi_72_pred;
                    _3213 = frontier_phi_72_pred_1;
                    _3211 = frontier_phi_72_pred_2;
                    _3209 = frontier_phi_72_pred_3;
                    _3207 = frontier_phi_72_pred_4;
                    _3205 = frontier_phi_72_pred_5;
                    uint _3350 = _3349 + 1u;
                    if (_3350 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3343 = _3205;
                        _3344 = _3207;
                        _3345 = _3209;
                        _3346 = _3211;
                        _3347 = _3213;
                        _3348 = _3215;
                        _3349 = _3350;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3215;
                frontier_phi_60_61_ladder_1 = _3213;
                frontier_phi_60_61_ladder_2 = _3209;
                frontier_phi_60_61_ladder_3 = _3207;
                frontier_phi_60_61_ladder_4 = _3205;
                frontier_phi_60_61_ladder_5 = _3211;
            }
            else
            {
                frontier_phi_60_61_ladder = _3101;
                frontier_phi_60_61_ladder_1 = _3099;
                frontier_phi_60_61_ladder_2 = _3095;
                frontier_phi_60_61_ladder_3 = _3093;
                frontier_phi_60_61_ladder_4 = _3091;
                frontier_phi_60_61_ladder_5 = _3097;
            }
            _3204 = frontier_phi_60_61_ladder_4;
            _3206 = frontier_phi_60_61_ladder_3;
            _3208 = frontier_phi_60_61_ladder_2;
            _3210 = frontier_phi_60_61_ladder_5;
            _3212 = frontier_phi_60_61_ladder_1;
            _3214 = frontier_phi_60_61_ladder;
        }
        float _3219 = isnan(1.0) ? _996 : (isnan(_996) ? 1.0 : min(_996, 1.0));
        _3024 = (_3219 * _3210) + _2536;
        _3026 = (_3219 * _3212) + _2538;
        _3028 = (_3219 * _3214) + _2540;
        _3030 = ((_3204 * _980) * _3219) + _2874;
        _3032 = ((_3206 * _982) * _3219) + _2876;
        _3034 = ((_3208 * _983) * _3219) + _2878;
    }
    else
    {
        _3024 = _2536;
        _3026 = _2538;
        _3028 = _2540;
        _3030 = _2874;
        _3032 = _2876;
        _3034 = _2878;
    }
    float _4939 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4950 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4961 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    uint _3054 = _252 + 6u;
    float _3062 = _918 / cbSceneParam._m0[86u].x;
    float _3063 = _919 / cbSceneParam._m0[86u].y;
    vec4 _3077 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3062, _3063, (log2((isnan(cbSceneParam._m0[77u].w) ? _853 : (isnan(_853) ? cbSceneParam._m0[77u].w : min(_853, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3079 = _3077.x;
    float _3080 = _3077.y;
    float _3081 = _3077.z;
    float _3082 = _3077.w;
    float _3154;
    float _3156;
    float _3158;
    float _3160;
    if (_853 > cbSceneParam._m0[78u].w)
    {
        float _3116 = isnan(_853) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _853 : min(cbSceneParam._m0[80u].w, _853));
        float _3117 = _3116 / _853;
        float _3128 = _3117 * _903;
        float _3129 = _904 * _3117;
        float _3130 = (-0.0) - _3129;
        float _3132 = _3117 * _905;
        float _3134 = (cbSceneParam._m0[77u].w * _3130) / _3116;
        float _3135 = _3134 + cbSceneParam._m0[79u].w;
        float _3136 = cbSceneParam._m0[79u].w - _3129;
        float _3142 = sqrt(((_3128 * _3128) + (_3129 * _3129)) + (_3132 * _3132));
        float _3145 = (1.0 - (cbSceneParam._m0[77u].w / _3116)) * _3142;
        float _3150 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3152 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3305;
        if (abs((_3130 - _3134) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3305 = ((((_3135 > 0.0) ? exp2(_3150 * _3135) : (2.0 - exp2(_3152 * _3135))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3145;
        }
        else
        {
            float _3265 = 1.0 / cbSceneParam._m0[80u].x;
            float _3266 = isnan(_3136) ? _3135 : (isnan(_3135) ? _3136 : max(_3135, _3136));
            float _3267 = isnan(_3136) ? _3135 : (isnan(_3135) ? _3136 : min(_3135, _3136));
            float _3276 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : min(_3266, 0.0));
            float _3277 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : min(_3267, 0.0));
            _3305 = ((abs(_3142 / _3130) * cbSceneParam._m0[80u].y) * ((((_3276 - _3277) * 2.0) - ((exp2(_3150 * (isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0)))) - exp2(_3150 * (isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))))) * _3265)) - ((exp2(_3152 * _3276) - exp2(_3152 * _3277)) * _3265))) + (_3145 * cbSceneParam._m0[80u].z);
        }
        vec4 _3307 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3062, _3063, 1.0), 0.0);
        float _3316 = exp2((_3305 * (-1.44269502162933349609375)) * (1.0 - _3307.w));
        float _3317 = log2(_3316);
        float _3333 = log2(_3082);
        _3154 = (exp2(_3333 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3317 * cbSceneParam._m0[78u].x)) * _3307.x) / cbSceneParam._m0[78u].x)) + _3079;
        _3156 = (exp2(_3333 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3317 * cbSceneParam._m0[78u].y)) * _3307.y) / cbSceneParam._m0[78u].y)) + _3080;
        _3158 = (exp2(_3333 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3317 * cbSceneParam._m0[78u].z)) * _3307.z) / cbSceneParam._m0[78u].z)) + _3081;
        _3160 = _3316 * _3082;
    }
    else
    {
        _3154 = _3079;
        _3156 = _3080;
        _3158 = _3081;
        _3160 = _3082;
    }
    float _3172 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3173 = _3172 == 3.0;
    float _3174 = log2(_3160);
    float _3181 = exp2(_3174 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_3024 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _996))) + ((_3030 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1802)) * cbPerFrame._m0[3u].x));
    float _3182 = exp2(_3174 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_3026 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _996))) + ((_3032 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1802)) * cbPerFrame._m0[3u].x));
    float _3183 = exp2(_3174 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_3028 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _996))) + ((_3034 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1802)) * cbPerFrame._m0[3u].x));
    float _3192 = (_3172 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3192 * (_3173 ? _3181 : (_3181 + (cbSceneParam._m0[72u].w * _3154)));
    SV_Target.y = _3192 * (_3173 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3156)));
    SV_Target.z = _3192 * (_3173 ? _3183 : (_3183 + (cbSceneParam._m0[72u].w * _3158)));
    SV_Target.w = cbInstanceData._m0[_3054].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3054].w;
}


