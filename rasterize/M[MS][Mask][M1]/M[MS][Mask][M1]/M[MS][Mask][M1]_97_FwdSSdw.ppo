#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1515;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _371.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[23u].w) + _421) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3862 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _446 = (_439 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _447 = (_439 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _448 = (_439 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _371.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[23u].w) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3873 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _525 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446);
    float _528 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447);
    float _531 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448);
    vec4 _550 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _589 = _587.x;
    float _590 = _587.y;
    float _591 = _587.z;
    float _598 = ((_570.x - _589) * _439) + _589;
    float _599 = ((_570.y - _590) * _439) + _590;
    float _600 = ((_570.z - _591) * _439) + _591;
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _625 = ((_612.z - _600) * _512) + _600;
    float _628 = ((((_612.x - _598) * _512) + _598) * 2.0) + (-1.0);
    float _630 = ((((_612.y - _599) * _512) + _599) * 2.0) + (-1.0);
    float _631 = dot(vec2(_628, _630), vec2(_628, _630));
    float _3884 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _636 = sqrt(1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))));
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _662 = (((_650.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _628;
    float _663 = (((_650.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _630;
    float _666 = fma(_636, _251, fma(_663, _258, _662 * _244));
    float _669 = fma(_636, _252, fma(_663, _259, _662 * _245));
    float _672 = fma(_636, _253, fma(_663, _260, _662 * _246));
    float _676 = inversesqrt(dot(vec3(_666, _669, _672), vec3(_666, _669, _672)));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _705 = _703.x;
    float _706 = 1.0 - _705;
    float _715 = (cbMtdParam._m0[19u].x + dot(vec4(_676 * _666, _676 * _669, _676 * _672, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_705 - _706) * cbMtdParam._m0[24u].z) + _706) * cbMtdParam._m0[21u].z);
    float _3895 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _716 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _718 = (-0.0) - cbMtdParam._m0[24u].x;
    float _720 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _720 : (isnan(_720) ? 1.0 : min(_720, 1.0));
    float _728 = _716 - ((_716 * TEXCOORD_8.x) * _721);
    float _729 = _716 - ((_716 * TEXCOORD_8.y) * _721);
    float _730 = _716 - ((_716 * TEXCOORD_8.z) * _721);
    float _737 = (_728 * ((_550.x * cbMtdParam._m0[18u].x) - _525)) + _525;
    float _738 = (_729 * ((_550.y * cbMtdParam._m0[18u].y) - _528)) + _528;
    float _739 = (_730 * ((_550.z * cbMtdParam._m0[18u].z) - _531)) + _531;
    vec4 _751 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _753 = _751.x;
    float _754 = 1.0 - _753;
    float _780 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_753 - _754) * cbMtdParam._m0[24u].w) + _754) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3916 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _781 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _789 = ((((cbMtdParam._m0[10u].x - _737) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _781) + _737;
    float _790 = ((((cbMtdParam._m0[10u].y - _738) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _781) + _738;
    float _791 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _739)) * _781) + _739;
    vec4 _817 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _819 = _817.x;
    float _836 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _819) * _439) + _819;
    float _853 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _836) * _512) + _836;
    float _857 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _853) * cbMtdParam._m0[19u].z) + _853;
    float _859 = _857 - (_857 * _728);
    float _861 = _859 - (_859 * _781);
    float _865 = (cbMtdParam._m0[19u].w * (_650.z - _625)) + _625;
    vec4 _879 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _886 = (_879.x * 2.0) + (-1.0);
    float _887 = (_879.y * 2.0) + (-1.0);
    float _888 = dot(vec2(_886, _887), vec2(_886, _887));
    float _3927 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _896 = ((_879.z - _865) * _728) + _865;
    float _899 = ((cbMtdParam._m0[23u].x - _896) * _781) + _896;
    vec4 _918 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _924 = (_918.x * 2.0) + (-1.0);
    float _925 = (_918.y * 2.0) + (-1.0);
    float _926 = dot(vec2(_924, _925), vec2(_924, _925));
    float _3938 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _941 = ((sqrt(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) - _636) * _730) + _636;
    float _944 = (((_886 - _662) * _728) + _662) + (cbMtdParam._m0[21u].x * _662);
    float _945 = (((_887 - _663) * _729) + _663) + (cbMtdParam._m0[21u].x * _663);
    float _956 = (((_924 - _944) + (_944 * cbMtdParam._m0[22u].z)) * _781) + _944;
    float _957 = (((_925 - _945) + (_945 * cbMtdParam._m0[22u].z)) * _781) + _945;
    float _958 = (_781 * (sqrt(1.0 - (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) - _941)) + _941;
    float _962 = cbMtdParam._m0[22u].x + _650.w;
    float _965 = fma(_958, _251, fma(_957, _258, _956 * _244));
    float _968 = fma(_958, _252, fma(_957, _259, _956 * _245));
    float _971 = fma(_958, _253, fma(_957, _260, _956 * _246));
    float _975 = inversesqrt(dot(vec3(_965, _968, _971), vec3(_965, _968, _971)));
    float _976 = _975 * _965;
    float _977 = _975 * _968;
    float _978 = _975 * _971;
    float _3949 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _979 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _3971 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _3982 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _3993 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4004 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _984 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _998 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1048 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1038);
    float _1049 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1038);
    float _1050 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1038);
    float _1054 = inversesqrt(dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050)));
    float _1055 = _1048 * _1054;
    float _1056 = _1049 * _1054;
    float _1057 = _1050 * _1054;
    float _1063 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1064 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1082 = fma(_978, cbSceneParam._m0[5u].z, fma(_977, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _976));
    float _1085 = fma(_978, cbSceneParam._m0[6u].z, fma(_977, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _976));
    float _1088 = fma(_978, cbSceneParam._m0[7u].z, fma(_977, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _976));
    uint _1102 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1108 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * cbInstanceData._m0[_1102].x;
    float _1109 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * cbInstanceData._m0[_1102].y;
    float _1110 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_1102].z;
    float _4015 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1111 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1112 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1113 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _1114 = 1.0 - _984;
    float _1115 = _1111 * _1114;
    float _1116 = _1112 * _1114;
    float _1117 = _1113 * _1114;
    float _1122 = (_1111 + (-0.039999999105930328369140625)) * _984;
    float _1123 = (_1112 + (-0.039999999105930328369140625)) * _984;
    float _1124 = (_1113 + (-0.039999999105930328369140625)) * _984;
    float _1125 = _1122 + 0.039999999105930328369140625;
    float _1127 = _1123 + 0.039999999105930328369140625;
    float _1128 = _1124 + 0.039999999105930328369140625;
    vec4 _1137 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1063, cbSceneParam._m0[86u].y * _1064));
    float _1141 = ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * TEXCOORD_5.w) * _1137.x;
    float _1142 = dot(vec3(_976, _977, _978), vec3(_1055, _1056, _1057));
    float _1145 = _1142 * 2.0;
    float _1149 = (_1145 * _976) - _1055;
    float _1150 = (_1145 * _977) - _1056;
    float _1151 = (_1145 * _978) - _1057;
    float _1155 = abs(dot(vec3(_1055, _1056, _1057), vec3(_976, _977, _978)));
    float _4048 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1157 = sqrt(_979);
    float _1170 = exp2((_1157 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1157 * 3.0));
    float _1176 = (1.0 - _1170) * ((_1157 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1177 = _1170 * _1157;
    float _1205 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1209 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1213 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1514;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1239 = fma(_1213, cbModelParam._m0[26u].z, fma(_1209, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1205));
        float _1243 = fma(_1213, cbModelParam._m0[27u].z, fma(_1209, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1205));
        float _1247 = fma(_1213, cbModelParam._m0[28u].z, fma(_1209, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1205));
        float _1272 = _1205 + _976;
        float _1273 = _1209 + _977;
        float _1274 = _1213 + _978;
        float _1284 = fma(_1274, cbModelParam._m0[26u].z, fma(_1273, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1272)) - _1239;
        float _1285 = fma(_1274, cbModelParam._m0[27u].z, fma(_1273, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1272)) - _1243;
        float _1286 = fma(_1274, cbModelParam._m0[28u].z, fma(_1273, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1272)) - _1247;
        float _1290 = inversesqrt(dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286)));
        float _1303 = ((_1290 * _1284) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1239 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1290 * _1285) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1243 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1290 * _1286) / cbModelParam._m0[34u].z) + ((((((_1247 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        float _1342 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1308.x + (-0.5));
        float _1344 = _1342 * (_1308.y + (-0.5));
        float _1345 = _1342 * (_1308.z + (-0.5));
        float _1352 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1315.x + (-0.5));
        float _1354 = _1352 * (_1315.y + (-0.5));
        float _1355 = _1352 * (_1315.z + (-0.5));
        float _1362 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1322.x + (-0.5));
        float _1364 = _1362 * (_1322.y + (-0.5));
        float _1365 = _1362 * (_1322.z + (-0.5));
        float _1372 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1329.x + (-0.5));
        float _1374 = _1372 * (_1329.y + (-0.5));
        float _1375 = _1372 * (_1329.z + (-0.5));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = _1343 * 0.5;
        float _1380 = _1353 * 0.5;
        float _1381 = _1363 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1396 = (dot(vec3(_976, _977, _978), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1406 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4096 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1408 + 1.0))) + _1413) * _1376;
        float _1423 = _1344 * 0.5;
        float _1424 = _1354 * 0.5;
        float _1425 = _1364 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_976, _977, _978), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4129 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1450 + 1.0))) + _1455) * _1377;
        float _1465 = _1345 * 0.5;
        float _1466 = _1355 * 0.5;
        float _1467 = _1365 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_976, _977, _978), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4162 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1492 + 1.0))) + _1497) * _1378;
        _1514 = _1345;
        _1516 = _1344;
        _1517 = _1343;
        _1518 = _1355;
        _1519 = _1354;
        _1520 = _1353;
        _1521 = _1365;
        _1522 = _1364;
        _1523 = _1363;
        _1524 = _1378;
        _1525 = _1377;
        _1526 = _1376;
        _1527 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1528 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1529 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
    }
    else
    {
        _1514 = _1515;
        _1516 = _1515;
        _1517 = _1515;
        _1518 = _1515;
        _1519 = _1515;
        _1520 = _1515;
        _1521 = _1515;
        _1522 = _1515;
        _1523 = _1515;
        _1524 = _1515;
        _1525 = _1515;
        _1526 = _1515;
        _1527 = 0.0;
        _1528 = 0.0;
        _1529 = 0.0;
    }
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1553 = fma(_1213, cbModelParam._m0[30u].z, fma(_1209, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1205));
        float _1557 = fma(_1213, cbModelParam._m0[31u].z, fma(_1209, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1205));
        float _1561 = fma(_1213, cbModelParam._m0[32u].z, fma(_1209, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1205));
        float _1584 = _1205 + _976;
        float _1585 = _1209 + _977;
        float _1586 = _1213 + _978;
        float _1596 = fma(_1586, cbModelParam._m0[30u].z, fma(_1585, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1584)) - _1553;
        float _1597 = fma(_1586, cbModelParam._m0[31u].z, fma(_1585, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1584)) - _1557;
        float _1598 = fma(_1586, cbModelParam._m0[32u].z, fma(_1585, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1584)) - _1561;
        float _1602 = inversesqrt(dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598)));
        float _1615 = ((_1602 * _1596) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1553 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1616 = ((_1602 * _1597) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1557 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1617 = ((_1602 * _1598) / cbModelParam._m0[35u].z) + ((((((_1561 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1619 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1615, _1616, _1617), 0.0);
        vec4 _1626 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1615, _1616, _1617), 0.0);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1615, _1616, _1617), 0.0);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1615, _1616, _1617), 0.0);
        float _1652 = exp2((_1619.w + (-0.5)) * 20.0) * 2.0;
        float _1653 = _1652 * (_1619.x + (-0.5));
        float _1654 = _1652 * (_1619.y + (-0.5));
        float _1655 = _1652 * (_1619.z + (-0.5));
        float _1662 = exp2((_1626.w + (-0.5)) * 20.0) * 2.0;
        float _1663 = _1662 * (_1626.x + (-0.5));
        float _1664 = _1662 * (_1626.y + (-0.5));
        float _1665 = _1662 * (_1626.z + (-0.5));
        float _1672 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1633.x + (-0.5));
        float _1674 = _1672 * (_1633.y + (-0.5));
        float _1675 = _1672 * (_1633.z + (-0.5));
        float _1682 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1683 = _1682 * (_1640.x + (-0.5));
        float _1684 = _1682 * (_1640.y + (-0.5));
        float _1685 = _1682 * (_1640.z + (-0.5));
        float _1686 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1687 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1688 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1689 = _1653 * 0.5;
        float _1690 = _1663 * 0.5;
        float _1691 = _1673 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_976, _977, _978), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1686 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4225 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1716 + 1.0))) + _1721) * _1686;
        float _1731 = _1654 * 0.5;
        float _1732 = _1664 * 0.5;
        float _1733 = _1674 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_976, _977, _978), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1687 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4258 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1758 + 1.0))) + _1763) * _1687;
        float _1773 = _1655 * 0.5;
        float _1774 = _1665 * 0.5;
        float _1775 = _1675 * 0.5;
        float _1776 = dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775));
        float _1781 = (_1776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1776);
        float _1789 = (dot(vec3(_976, _977, _978), vec3(_1781 * _1773, _1781 * _1774, _1781 * _1775)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1798 = sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775)) / (_1688 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1800 = _1799 * 2.0;
        float _1804 = (1.0 - _1799) / (_1799 + 1.0);
        float _4291 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1814 = ((((1.0 - _1805) * (_1800 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1800 + 1.0))) + _1805) * _1688;
        _1822 = _1655;
        _1823 = _1654;
        _1824 = _1653;
        _1825 = _1665;
        _1826 = _1664;
        _1827 = _1663;
        _1828 = _1675;
        _1829 = _1674;
        _1830 = _1673;
        _1831 = _1688;
        _1832 = _1687;
        _1833 = _1686;
        _1834 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
        _1835 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
        _1836 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)));
    }
    else
    {
        _1822 = _1515;
        _1823 = _1515;
        _1824 = _1515;
        _1825 = _1515;
        _1826 = _1515;
        _1827 = _1515;
        _1828 = _1515;
        _1829 = _1515;
        _1830 = _1515;
        _1831 = _1515;
        _1832 = _1515;
        _1833 = _1515;
        _1834 = 0.0;
        _1835 = 0.0;
        _1836 = 0.0;
    }
    float _1846 = (cbModelParam._m0[1u].x * (_1834 - _1527)) + _1527;
    float _1847 = (cbModelParam._m0[1u].x * (_1835 - _1528)) + _1528;
    float _1848 = (cbModelParam._m0[1u].x * (_1836 - _1529)) + _1529;
    float _1869 = fma(_1848, cbSceneParam._m0[89u].z, fma(_1847, cbSceneParam._m0[89u].y, _1846 * cbSceneParam._m0[89u].x));
    float _1872 = fma(_1848, cbSceneParam._m0[90u].z, fma(_1847, cbSceneParam._m0[90u].y, _1846 * cbSceneParam._m0[90u].x));
    float _1875 = fma(_1848, cbSceneParam._m0[91u].z, fma(_1847, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1846));
    float _1890 = _1149 * 0.5;
    float _1891 = _1150 * 0.5;
    float _1892 = _1151 * 0.5;
    float _1893 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1824, _1827, _1830, _1833));
    float _1896 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1823, _1826, _1829, _1832));
    float _1899 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1822, _1825, _1828, _1831));
    float _1933;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1906 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1514, _1518, _1521, _1524));
        float _1910 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1516, _1519, _1522, _1525));
        float _1914 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1517, _1520, _1523, _1526));
        float _1921 = dot(vec4(cbModelParam._m0[39u]), vec4(_1890, _1891, _1892, 1.0));
        _1933 = dot(vec3(isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1921) ? 0.0 : (isnan(0.0) ? _1921 : max(0.0, _1921))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1933 = 1.0;
    }
    float _1944;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1935 = dot(vec4(cbModelParam._m0[40u]), vec4(_1890, _1891, _1892, 1.0));
        _1944 = dot(vec3(isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1935) ? 0.0 : (isnan(0.0) ? _1935 : max(0.0, _1935))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1944 = 1.0;
    }
    float _1948 = (_1944 * cbModelParam._m0[1u].x) + (_1933 * (1.0 - cbModelParam._m0[1u].x));
    float _1958 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _979);
    float _1959 = isnan(_1958) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1958 : min(cbModelParam._m0[25u].z, _1958));
    float _2039;
    float _2041;
    float _2043;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2006 = fma(_1213, cbModelParam._m0[13u].z, fma(_1209, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1205)) + cbModelParam._m0[13u].w;
        float _2010 = fma(_1213, cbModelParam._m0[14u].z, fma(_1209, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1205)) + cbModelParam._m0[14u].w;
        float _2014 = fma(_1213, cbModelParam._m0[15u].z, fma(_1209, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1205)) + cbModelParam._m0[15u].w;
        float _2017 = fma(_1151, cbModelParam._m0[13u].z, fma(_1150, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1149));
        float _2020 = fma(_1151, cbModelParam._m0[14u].z, fma(_1150, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1149));
        float _2023 = fma(_1151, cbModelParam._m0[15u].z, fma(_1150, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1149));
        float _2051;
        if (_2017 > 0.0)
        {
            _2051 = abs((1.0 - _2006) / _2017);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2006 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2051 = frontier_phi_14_12_ladder;
        }
        float _2274;
        if (_2020 > 0.0)
        {
            _2274 = abs((1.0 - _2010) / _2020);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2010 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2274 = frontier_phi_23_19_ladder;
        }
        float _2531;
        if (_2023 > 0.0)
        {
            _2531 = abs((1.0 - _2014) / _2023);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2014 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2531 = frontier_phi_35_30_ladder;
        }
        float _2533 = isnan(_2274) ? _2051 : (isnan(_2051) ? _2274 : min(_2051, _2274));
        float _2534 = isnan(_2531) ? _2533 : (isnan(_2533) ? _2531 : min(_2533, _2531));
        float _2538 = (_2534 * _2017) + _2006;
        float _2539 = (_2534 * _2020) + _2010;
        float _2540 = (_2534 * _2023) + _2014;
        float _2541 = _2534 * 9.9999997473787516355514526367188e-05;
        float _2543 = (-1.0) - _2541;
        float _2545 = _2541 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2540 > _2545) || ((_2540 < _2543) || ((_2539 > _2545) || ((_2539 < _2543) || ((_2538 < _2543) || (_2538 > _2545))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2540, cbModelParam._m0[9u].z, fma(_2539, cbModelParam._m0[9u].y, _2538 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2540, cbModelParam._m0[10u].z, fma(_2539, cbModelParam._m0[10u].y, _2538 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2540, cbModelParam._m0[11u].z, fma(_2539, cbModelParam._m0[11u].y, _2538 * cbModelParam._m0[11u].x))), _1959);
            frontier_phi_13_35_ladder = _2668.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2668.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2668.x * cbModelParam._m0[1u].y;
        }
        _2039 = frontier_phi_13_35_ladder_2;
        _2041 = frontier_phi_13_35_ladder_1;
        _2043 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2027 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1149, _1150, _1151), _1959);
        _2039 = _2027.x * cbModelParam._m0[1u].y;
        _2041 = _2027.y * cbModelParam._m0[1u].y;
        _2043 = _2027.z * cbModelParam._m0[1u].y;
    }
    float _2047 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _979);
    float _2048 = isnan(_2047) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2047 : min(cbModelParam._m0[25u].w, _2047));
    float _2137;
    float _2139;
    float _2141;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2101 = fma(_1213, cbModelParam._m0[21u].z, fma(_1209, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1205)) + cbModelParam._m0[21u].w;
        float _2105 = fma(_1213, cbModelParam._m0[22u].z, fma(_1209, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1205)) + cbModelParam._m0[22u].w;
        float _2109 = fma(_1213, cbModelParam._m0[23u].z, fma(_1209, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1205)) + cbModelParam._m0[23u].w;
        float _2112 = fma(_1151, cbModelParam._m0[21u].z, fma(_1150, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1149));
        float _2115 = fma(_1151, cbModelParam._m0[22u].z, fma(_1150, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1149));
        float _2118 = fma(_1151, cbModelParam._m0[23u].z, fma(_1150, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1149));
        float _2279;
        if (_2112 > 0.0)
        {
            _2279 = abs((1.0 - _2101) / _2112);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2101 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2279 = frontier_phi_25_21_ladder;
        }
        float _2558;
        if (_2115 > 0.0)
        {
            _2558 = abs((1.0 - _2105) / _2115);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2105 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2558 = frontier_phi_37_32_ladder;
        }
        float _2771;
        if (_2118 > 0.0)
        {
            _2771 = abs((1.0 - _2109) / _2118);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2109 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2771 = frontier_phi_46_43_ladder;
        }
        float _2773 = isnan(_2558) ? _2279 : (isnan(_2279) ? _2558 : min(_2279, _2558));
        float _2774 = isnan(_2771) ? _2773 : (isnan(_2773) ? _2771 : min(_2773, _2771));
        float _2778 = (_2774 * _2112) + _2101;
        float _2779 = (_2774 * _2115) + _2105;
        float _2780 = (_2774 * _2118) + _2109;
        float _2781 = _2774 * 9.9999997473787516355514526367188e-05;
        float _2782 = (-1.0) - _2781;
        float _2784 = _2781 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2780 > _2784) || ((_2780 < _2782) || ((_2779 > _2784) || ((_2779 < _2782) || ((_2778 < _2782) || (_2778 > _2784))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2780, cbModelParam._m0[17u].z, fma(_2779, cbModelParam._m0[17u].y, _2778 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2780, cbModelParam._m0[18u].z, fma(_2779, cbModelParam._m0[18u].y, _2778 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2780, cbModelParam._m0[19u].z, fma(_2779, cbModelParam._m0[19u].y, _2778 * cbModelParam._m0[19u].x))), _2048);
            frontier_phi_22_46_ladder = _2979.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2979.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2979.x * cbModelParam._m0[1u].z;
        }
        _2137 = frontier_phi_22_46_ladder_2;
        _2139 = frontier_phi_22_46_ladder_1;
        _2141 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2121 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1149, _1150, _1151), _2048);
        _2137 = _2121.x * cbModelParam._m0[1u].z;
        _2139 = _2121.y * cbModelParam._m0[1u].z;
        _2141 = _2121.z * cbModelParam._m0[1u].z;
    }
    float _2154 = (((_1176 * _1125) + _1177) * _1141) * ((cbModelParam._m0[1u].w * (_2137 - _2039)) + _2039);
    float _2156 = (((_1176 * _1127) + _1177) * _1141) * ((cbModelParam._m0[1u].w * (_2139 - _2041)) + _2041);
    float _2158 = (((_1176 * _1128) + _1177) * _1141) * ((cbModelParam._m0[1u].w * (_2141 - _2043)) + _2043);
    float _2161 = fma(_2158, cbSceneParam._m0[89u].z, fma(_2156, cbSceneParam._m0[89u].y, _2154 * cbSceneParam._m0[89u].x));
    float _2164 = fma(_2158, cbSceneParam._m0[90u].z, fma(_2156, cbSceneParam._m0[90u].y, _2154 * cbSceneParam._m0[90u].x));
    float _2167 = fma(_2158, cbSceneParam._m0[91u].z, fma(_2156, cbSceneParam._m0[91u].y, _2154 * cbSceneParam._m0[91u].x));
    vec4 _2175 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1063, _1064));
    float _2177 = _2175.w;
    float _2189 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2177);
    float _2190 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2177);
    float _2191 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2177);
    uvec4 _2195 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2197 = _2195.x * 14u;
    uint _2198 = _2197 + 13u;
    float _2205 = _1141 + (-1.0);
    float _2210 = (cbLight._m0[_2198].x * _2205) + 1.0;
    float _2211 = (cbLight._m0[_2198].y * _2205) + 1.0;
    float _2212 = (cbLight._m0[_2198].z * _2205) + 1.0;
    float _2213 = (cbLight._m0[_2198].w * _2205) + 1.0;
    uint _2214 = _2197 + 5u;
    float _2220 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
    uint _2224 = _2197 + 4u;
    float _2233 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
    uint _2237 = _2197 | 1u;
    float _2248 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_976, _977, _978));
    float _2251 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_976, _977, _978));
    float _4427 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _4438 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2256 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * 0.3183098733425140380859375;
    float _2258 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * 0.3183098733425140380859375;
    float _2265 = ((cbLight._m0[_2214].x * _2220) * _2258) + (((cbLight._m0[_2224].x * _2189) * _2233) * _2256);
    float _2266 = ((_2220 * cbLight._m0[_2214].y) * _2258) + (((cbLight._m0[_2224].y * _2190) * _2233) * _2256);
    float _2267 = ((_2220 * cbLight._m0[_2214].z) * _2258) + (((cbLight._m0[_2224].z * _2191) * _2233) * _2256);
    uvec4 _2271 = floatBitsToUint(cbLight._m0[_2197 + 12u]);
    bool _2273 = _2271.x == 0u;
    float _2284;
    float _2286;
    float _2288;
    if (_2273)
    {
        _2284 = _2265;
        _2286 = _2266;
        _2288 = _2267;
    }
    else
    {
        uint _2292 = _2197 + 6u;
        float _2308 = (dot(vec3(cbLight._m0[_2197 + 2u].xyz), vec3(_976, _977, _978)) * 0.5) + 0.5;
        float _2309 = _2308 * _2308;
        float _4449 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2310 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2311 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2284 = (((cbLight._m0[_2292].x * 0.3183098733425140380859375) * _2310) * _2311) + _2265;
        _2286 = (((cbLight._m0[_2292].y * 0.3183098733425140380859375) * _2310) * _2311) + _2266;
        _2288 = (((cbLight._m0[_2292].z * 0.3183098733425140380859375) * _2310) * _2311) + _2267;
    }
    bool _2291 = _2271.y == 0u;
    float _2329;
    float _2331;
    float _2333;
    if (_2291)
    {
        _2329 = _2284;
        _2331 = _2286;
        _2333 = _2288;
    }
    else
    {
        uint _2502 = _2197 + 7u;
        float _2518 = (dot(vec3(cbLight._m0[_2197 + 3u].xyz), vec3(_976, _977, _978)) * 0.5) + 0.5;
        float _2519 = _2518 * _2518;
        float _4465 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2520 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2521 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2329 = (((cbLight._m0[_2502].x * 0.3183098733425140380859375) * _2520) * _2521) + _2284;
        _2331 = (((cbLight._m0[_2502].y * 0.3183098733425140380859375) * _2520) * _2521) + _2286;
        _2333 = (((cbLight._m0[_2502].z * 0.3183098733425140380859375) * _2520) * _2521) + _2288;
    }
    uint _2336 = _2197 + 8u;
    float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _979) * 0.949999988079071044921875);
    float _2350 = _2349 * _2349;
    float _2351 = cbLight._m0[_2197].x + _1055;
    float _2352 = cbLight._m0[_2197].y + _1056;
    float _2353 = cbLight._m0[_2197].z + _1057;
    float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
    float _2358 = _2357 * _2351;
    float _2359 = _2357 * _2352;
    float _2360 = _2357 * _2353;
    float _2361 = dot(vec3(_976, _977, _978), vec3(cbLight._m0[_2197].xyz));
    float _4481 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _4492 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _2365 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2366 = dot(vec3(_976, _977, _978), vec3(_2358, _2359, _2360));
    float _4503 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2370 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2358, _2359, _2360));
    float _4514 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2374 = _2350 * _2350;
    float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
    float _2386 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
    float _2387 = 0.959999978542327880859375 - _1122;
    float _2389 = 0.959999978542327880859375 - _1123;
    float _2390 = 0.959999978542327880859375 - _1124;
    float _2397 = 1.0 - _2350;
    float _2408 = (0.5 / (((_2365 * ((_2364 * _2397) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2397) + _2350) * _2364))) * _2364;
    float _4525 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2410 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
    uint _2424 = _2197 + 9u;
    float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _979) * 0.949999988079071044921875);
    float _2436 = _2435 * _2435;
    float _2437 = cbLight._m0[_2237].x + _1055;
    float _2438 = cbLight._m0[_2237].y + _1056;
    float _2439 = cbLight._m0[_2237].z + _1057;
    float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
    float _2444 = _2443 * _2437;
    float _2445 = _2443 * _2438;
    float _2446 = _2443 * _2439;
    float _2447 = dot(vec3(_976, _977, _978), vec3(cbLight._m0[_2237].xyz));
    float _4536 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2450 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _2451 = dot(vec3(_976, _977, _978), vec3(_2444, _2445, _2446));
    float _4547 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2454 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2455 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2444, _2445, _2446));
    float _4558 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2459 = _2436 * _2436;
    float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
    float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
    float _2477 = 1.0 - _2436;
    float _2487 = (0.5 / (((_2365 * ((_2450 * _2477) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2477) + _2436) * _2450))) * _2450;
    float _4569 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2489 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
    float _2499 = (((((_2470 * _2387) + _1125) * cbLight._m0[_2424].x) * _2489) * _2220) + ((((cbLight._m0[_2336].x * _2189) * ((_2386 * _2387) + _1125)) * _2410) * _2233);
    float _2500 = (((((_2470 * _2389) + _1127) * cbLight._m0[_2424].y) * _2489) * _2220) + ((((cbLight._m0[_2336].y * _2190) * ((_2386 * _2389) + _1127)) * _2410) * _2233);
    float _2501 = (((((_2470 * _2390) + _1128) * cbLight._m0[_2424].z) * _2489) * _2220) + ((((cbLight._m0[_2336].z * _2191) * ((_2386 * _2390) + _1128)) * _2410) * _2233);
    float _2563;
    float _2565;
    float _2567;
    if (_2273)
    {
        _2563 = _2499;
        _2565 = _2500;
        _2567 = _2501;
    }
    else
    {
        uint _2569 = _2197 + 2u;
        uint _2573 = _2197 + 10u;
        float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2569].w)) * _979) * 0.949999988079071044921875);
        float _2588 = _2587 * _2587;
        float _2589 = cbLight._m0[_2569].x + _1055;
        float _2590 = cbLight._m0[_2569].y + _1056;
        float _2591 = cbLight._m0[_2569].z + _1057;
        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
        float _2596 = _2595 * _2589;
        float _2597 = _2595 * _2590;
        float _2598 = _2595 * _2591;
        float _2599 = dot(vec3(_976, _977, _978), vec3(cbLight._m0[_2569].xyz));
        float _4580 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2603 = dot(vec3(_976, _977, _978), vec3(_2596, _2597, _2598));
        float _4591 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2607 = dot(vec3(cbLight._m0[_2569].xyz), vec3(_2596, _2597, _2598));
        float _4602 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2611 = _2588 * _2588;
        float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
        float _2622 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
        float _2629 = 1.0 - _2588;
        float _2639 = (0.5 / (((_2365 * ((_2602 * _2629) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2629) + _2588) * _2602))) * _2602;
        float _4613 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2563 = (((((_2622 * _2387) + _1125) * cbLight._m0[_2573].x) * _2641) * _2642) + _2499;
        _2565 = (((((_2622 * _2389) + _1127) * cbLight._m0[_2573].y) * _2641) * _2642) + _2500;
        _2567 = (((((_2622 * _2390) + _1128) * cbLight._m0[_2573].z) * _2641) * _2642) + _2501;
    }
    float _2677;
    float _2679;
    float _2681;
    if (_2291)
    {
        _2677 = _2563;
        _2679 = _2565;
        _2681 = _2567;
    }
    else
    {
        uint _2688 = _2197 + 3u;
        uint _2692 = _2197 + 11u;
        float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2688].w)) * _979) * 0.949999988079071044921875);
        float _2707 = _2706 * _2706;
        float _2708 = cbLight._m0[_2688].x + _1055;
        float _2709 = cbLight._m0[_2688].y + _1056;
        float _2710 = cbLight._m0[_2688].z + _1057;
        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
        float _2715 = _2714 * _2708;
        float _2716 = _2714 * _2709;
        float _2717 = _2714 * _2710;
        float _2718 = dot(vec3(_976, _977, _978), vec3(cbLight._m0[_2688].xyz));
        float _4629 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2722 = dot(vec3(_976, _977, _978), vec3(_2715, _2716, _2717));
        float _4640 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2726 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_2715, _2716, _2717));
        float _4651 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2730 = _2707 * _2707;
        float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
        float _2741 = exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0);
        float _2748 = 1.0 - _2707;
        float _2758 = (0.5 / (((_2365 * ((_2721 * _2748) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2748) + _2707) * _2721))) * _2721;
        float _4662 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2760 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
        float _2761 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2677 = (((((_2741 * _2387) + _1125) * cbLight._m0[_2692].x) * _2760) * _2761) + _2563;
        _2679 = (((((_2741 * _2389) + _1127) * cbLight._m0[_2692].y) * _2760) * _2761) + _2565;
        _2681 = (((((_2741 * _2390) + _1128) * cbLight._m0[_2692].z) * _2760) * _2761) + _2567;
    }
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    if (_2195.y == 0u)
    {
        float _2836 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2837 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2836;
        float _2838 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2836;
        float _2839 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2836;
        uvec4 _2851 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2852 = _2851.x;
        uint _2863 = uint((float(_2851.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1064) / _2852))) + floor(float(uint(cbSceneParam._m0[85u].x * _1063) / _2852)));
        float _2873 = (log2(_2839 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2874 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        uint _2877 = uint(isnan(14.0) ? _2874 : (isnan(_2874) ? 14.0 : min(_2874, 14.0)));
        uvec4 _2882 = texelFetch(g_lightClusterGridBuffer, int(((_2877 << 2u) + (_2863 << 6u)) >> 2u));
        uint _2883 = _2882.x;
        uint _2884 = _2851.z;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((((1u << ((_2884 >> 4u) & 15u)) + 4294967295u) & _2883) == 0u) || ((_2884 & 240u) == 0u))
        {
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
        }
        else
        {
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            uint _3134 = 0u;
            uint _3143;
            bool _3144;
            for (;;)
            {
                _3143 = texelFetch(g_lightClassification, int((((_2877 << 5u) + (_2863 << 9u)) + (_3134 << 2u)) >> 2u)).x;
                _3144 = _3143 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3144)
                {
                    frontier_phi_61_pred = _3128;
                    frontier_phi_61_pred_1 = _3133;
                    frontier_phi_61_pred_2 = _3132;
                    frontier_phi_61_pred_3 = _3131;
                    frontier_phi_61_pred_4 = _3130;
                    frontier_phi_61_pred_5 = _3129;
                }
                else
                {
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    uint _3258;
                    _3252 = _3128;
                    _3253 = _3129;
                    _3254 = _3130;
                    _3255 = _3131;
                    _3256 = _3132;
                    _3257 = _3133;
                    _3258 = _3143;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    for (;;)
                    {
                        uint _3262 = uint(findLSB(_3258)) + (_3134 << 5u);
                        uint _3259 = (_3258 + 4294967295u) & _3258;
                        uint _3264 = _3262 * 48u;
                        vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3264)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 3u)).x));
                        uint _3284 = (_3262 * 48u) + 4u;
                        vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3303 = (_3262 * 48u) + 8u;
                        vec3 _3314 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x));
                        float _3318 = _3278.x - _2837;
                        float _3319 = _3278.y - _2838;
                        float _3320 = _3278.z - _2839;
                        float _3321 = dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320));
                        float _3324 = inversesqrt(_3321);
                        float _3325 = _3324 * _3318;
                        float _3326 = _3324 * _3319;
                        float _3327 = _3324 * _3320;
                        float _3328 = dot(vec3(_1082, _1085, _1088), vec3(_3325, _3326, _3327));
                        float _3333 = 1.0 - (_3321 * _3278.w);
                        float _4688 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3334 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3335 = sqrt(_3321) * _3297.w;
                        float _3338 = 1.39999997615814208984375 / (_3335 + 1.39999997615814208984375);
                        float _3339 = _3338 * _3338;
                        float _3342 = ((1.0 - _3339) * _3328) + _3339;
                        float _3345 = _3335 * _3335;
                        float _3349 = ((isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0))) * _3334) / ((_3345 * 0.699999988079071044921875) + 1.0);
                        float _3353 = (-0.0) - _2837;
                        float _3354 = (-0.0) - _2838;
                        float _3355 = (-0.0) - _2839;
                        float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                        float _3360 = _3359 * _3353;
                        float _3361 = _3359 * _3354;
                        float _3362 = _3359 * _3355;
                        float _3370 = exp2(log2(1.0 / ((_3345 * 3.5) + 5.0)) * 0.25);
                        float _3371 = 1.0 - _1157;
                        float _3378 = sqrt(1.0 - ((1.0 - (_3371 * _3371)) * (1.0 - (_3370 * _3370))));
                        float _3379 = _3378 * _3378;
                        float _3380 = _3379 * _3379;
                        float _3381 = _3360 + _3325;
                        float _3382 = _3361 + _3326;
                        float _3383 = _3362 + _3327;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3391 = dot(vec3(_1082, _1085, _1088), vec3(_3360, _3361, _3362));
                        float _4704 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3395 = dot(vec3(_1082, _1085, _1088), vec3(_3387 * _3381, _3387 * _3382, _3387 * _3383));
                        float _4715 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                        float _3402 = ((_3398 * _3398) * (_3380 + (-1.0))) + 1.0;
                        float _3403 = _3338 * _3379;
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3328) + _3404;
                        float _4726 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3409 = 1.0 - _3379;
                        float _3419 = (0.5 / (((_3408 * ((_3394 * _3409) + _3379)) + 9.9999999392252902907785028219223e-09) + (((_3408 * _3409) + _3379) * _3394))) * _3408;
                        float _4737 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3430 = (((_3380 * 3.1415927410125732421875) * (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) / ((_3402 * _3402) * ((_3345 * 2.1991131305694580078125) + 3.141590118408203125))) * _3334;
                        _3187 = (_3349 * _3297.x) + _3255;
                        _3188 = (_3349 * _3297.y) + _3256;
                        _3189 = (_3349 * _3297.z) + _3257;
                        _3184 = (_3430 * _3314.x) + _3252;
                        _3185 = (_3430 * _3314.y) + _3253;
                        _3186 = (_3430 * _3314.z) + _3254;
                        if (_3259 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3252 = _3184;
                            _3253 = _3185;
                            _3254 = _3186;
                            _3255 = _3187;
                            _3256 = _3188;
                            _3257 = _3189;
                            _3258 = _3259;
                        }
                    }
                    frontier_phi_61_pred = _3184;
                    frontier_phi_61_pred_1 = _3189;
                    frontier_phi_61_pred_2 = _3188;
                    frontier_phi_61_pred_3 = _3187;
                    frontier_phi_61_pred_4 = _3186;
                    frontier_phi_61_pred_5 = _3185;
                }
                _2985 = frontier_phi_61_pred;
                _2995 = frontier_phi_61_pred_1;
                _2993 = frontier_phi_61_pred_2;
                _2991 = frontier_phi_61_pred_3;
                _2989 = frontier_phi_61_pred_4;
                _2987 = frontier_phi_61_pred_5;
                uint _3135 = _3134 + 1u;
                if (_3135 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3128 = _2985;
                    _3129 = _2987;
                    _3130 = _2989;
                    _3131 = _2991;
                    _3132 = _2993;
                    _3133 = _2995;
                    _3134 = _3135;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
        }
        uvec4 _2998 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2999 = _2998.z;
        uint _3001 = (_2999 >> 8u) & 15u;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        if (((4294967295u << _3001) & _2883) == 0u)
        {
            _3096 = _2984;
            _3098 = _2986;
            _3100 = _2988;
            _3102 = _2990;
            _3104 = _2992;
            _3106 = _2994;
        }
        else
        {
            float _3121 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
            float _3122 = _3121 * _2837;
            float _3123 = _3121 * _2838;
            float _3124 = _3121 * _2839;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3001 < ((_2999 >> 12u) & 15u))
            {
                float _3097;
                float _3099;
                float _3101;
                float _3103;
                float _3105;
                float _3107;
                float _3235 = _2984;
                float _3236 = _2986;
                float _3237 = _2988;
                float _3238 = _2990;
                float _3239 = _2992;
                float _3240 = _2994;
                uint _3241 = _3001;
                uint _3250;
                bool _3251;
                for (;;)
                {
                    _3250 = texelFetch(g_lightClassification, int((((_2877 << 5u) + (_2863 << 9u)) + (_3241 << 2u)) >> 2u)).x;
                    _3251 = _3250 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3251)
                    {
                        frontier_phi_67_pred = _3238;
                        frontier_phi_67_pred_1 = _3239;
                        frontier_phi_67_pred_2 = _3240;
                        frontier_phi_67_pred_3 = _3237;
                        frontier_phi_67_pred_4 = _3236;
                        frontier_phi_67_pred_5 = _3235;
                    }
                    else
                    {
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3448 = _3235;
                        float _3449 = _3236;
                        float _3450 = _3237;
                        float _3451 = _3238;
                        float _3452 = _3239;
                        float _3453 = _3240;
                        uint _3454 = _3250;
                        uint _3455;
                        vec4 _3480;
                        float _3481;
                        vec4 _3496;
                        vec3 _3508;
                        vec4 _3523;
                        vec4 _3538;
                        float _3584;
                        bool _3585;
                        for (;;)
                        {
                            uint _3465 = ((_3241 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3454));
                            _3455 = (_3454 + 4294967295u) & _3454;
                            uint _3467 = _3465 * 40u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            _3481 = _3480.w;
                            uint _3483 = (_3465 * 40u) + 4u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3465 * 40u) + 8u;
                            _3508 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x));
                            uint _3510 = (_3465 * 40u) + 16u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3465 * 40u) + 20u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3540 = (_3465 * 40u) + 24u;
                            vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3559 = (_3465 * 40u) + 28u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            _3584 = fma(_2839, _3572.z, fma(_2838, _3572.y, _3572.x * _2837)) + _3572.w;
                            _3585 = !((fma(_2839, _3553.z, fma(_2838, _3553.y, _3553.x * _2837)) + _3553.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3585)
                            {
                                float _3612 = _3480.x - _2837;
                                float _3613 = _3480.y - _2838;
                                float _3614 = _3480.z - _2839;
                                float _3615 = dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614));
                                float _3618 = inversesqrt(_3615);
                                float _3619 = _3618 * _3612;
                                float _3620 = _3618 * _3613;
                                float _3621 = _3618 * _3614;
                                float _3625 = 1.0 - (_3615 / (_3481 * _3481));
                                float _4748 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3630 = sqrt(_3615) * _3496.w;
                                float _3632 = 1.39999997615814208984375 / (_3630 + 1.39999997615814208984375);
                                float _3633 = _3632 * _3632;
                                float _3636 = ((1.0 - _3633) * dot(vec3(_3619, _3620, _3621), vec3(_1082, _1085, _1088))) + _3633;
                                float _3639 = _3630 * _3630;
                                float _3643 = (fma(_2839, _3523.z, fma(_2838, _3523.y, _3523.x * _2837)) + _3523.w) / _3584;
                                float _3644 = (fma(_2839, _3538.z, fma(_2838, _3538.y, _3538.x * _2837)) + _3538.w) / _3584;
                                float _3648 = 1.0 - dot(vec2(_3643, _3644), vec2(_3643, _3644));
                                float _4764 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3650 = _3649 * (((isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0))) * _3626) / ((_3639 * 0.699999988079071044921875) + 1.0));
                                float _3662 = exp2(log2(1.0 / ((_3639 * 3.5) + 5.0)) * 0.25);
                                float _3663 = 1.0 - _1157;
                                float _3670 = sqrt(1.0 - ((1.0 - (_3663 * _3663)) * (1.0 - (_3662 * _3662))));
                                float _3671 = _3670 * _3670;
                                float _3672 = _3671 * _3671;
                                float _3673 = _3619 - _3122;
                                float _3674 = _3620 - _3123;
                                float _3675 = _3621 - _3124;
                                float _3679 = inversesqrt(dot(vec3(_3673, _3674, _3675), vec3(_3673, _3674, _3675)));
                                float _3683 = dot(vec3(_1082, _1085, _1088), vec3((-0.0) - _3122, (-0.0) - _3123, (-0.0) - _3124));
                                float _4775 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3686 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3687 = dot(vec3(_1082, _1085, _1088), vec3(_3679 * _3673, _3679 * _3674, _3679 * _3675));
                                float _4786 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3690 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3694 = ((_3690 * _3690) * (_3672 + (-1.0))) + 1.0;
                                float _3695 = _3632 * _3671;
                                float _3696 = _3695 * _3695;
                                float _3702 = ((1.0 - _3696) * dot(vec3(_1082, _1085, _1088), vec3(_3619, _3620, _3621))) + _3696;
                                float _4797 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3704 = 1.0 - _3671;
                                float _3714 = (0.5 / (((_3703 * ((_3686 * _3704) + _3671)) + 9.9999999392252902907785028219223e-09) + (((_3703 * _3704) + _3671) * _3686))) * _3703;
                                float _4808 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3724 = (_3649 * _3626) * (((_3672 * 3.1415927410125732421875) * (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) / ((_3694 * _3694) * ((_3639 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3724 * _3508.x;
                                frontier_phi_73_pred_1 = _3724 * _3508.y;
                                frontier_phi_73_pred_2 = _3650 * _3496.z;
                                frontier_phi_73_pred_3 = _3650 * _3496.y;
                                frontier_phi_73_pred_4 = _3650 * _3496.x;
                                frontier_phi_73_pred_5 = _3724 * _3508.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3728 = frontier_phi_73_pred;
                            _3729 = frontier_phi_73_pred_1;
                            _3733 = frontier_phi_73_pred_2;
                            _3732 = frontier_phi_73_pred_3;
                            _3731 = frontier_phi_73_pred_4;
                            _3730 = frontier_phi_73_pred_5;
                            _3438 = _3731 + _3451;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            _3435 = _3728 + _3448;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            if (_3455 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3455;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3438;
                        frontier_phi_67_pred_1 = _3439;
                        frontier_phi_67_pred_2 = _3440;
                        frontier_phi_67_pred_3 = _3437;
                        frontier_phi_67_pred_4 = _3436;
                        frontier_phi_67_pred_5 = _3435;
                    }
                    _3103 = frontier_phi_67_pred;
                    _3105 = frontier_phi_67_pred_1;
                    _3107 = frontier_phi_67_pred_2;
                    _3101 = frontier_phi_67_pred_3;
                    _3099 = frontier_phi_67_pred_4;
                    _3097 = frontier_phi_67_pred_5;
                    uint _3242 = _3241 + 1u;
                    if (_3242 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3235 = _3097;
                        _3236 = _3099;
                        _3237 = _3101;
                        _3238 = _3103;
                        _3239 = _3105;
                        _3240 = _3107;
                        _3241 = _3242;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3105;
                frontier_phi_55_56_ladder_1 = _3107;
                frontier_phi_55_56_ladder_2 = _3103;
                frontier_phi_55_56_ladder_3 = _3101;
                frontier_phi_55_56_ladder_4 = _3099;
                frontier_phi_55_56_ladder_5 = _3097;
            }
            else
            {
                frontier_phi_55_56_ladder = _2992;
                frontier_phi_55_56_ladder_1 = _2994;
                frontier_phi_55_56_ladder_2 = _2990;
                frontier_phi_55_56_ladder_3 = _2988;
                frontier_phi_55_56_ladder_4 = _2986;
                frontier_phi_55_56_ladder_5 = _2984;
            }
            _3096 = frontier_phi_55_56_ladder_5;
            _3098 = frontier_phi_55_56_ladder_4;
            _3100 = frontier_phi_55_56_ladder_3;
            _3102 = frontier_phi_55_56_ladder_2;
            _3104 = frontier_phi_55_56_ladder;
            _3106 = frontier_phi_55_56_ladder_1;
        }
        float _3111 = isnan(1.0) ? _1141 : (isnan(_1141) ? 1.0 : min(_1141, 1.0));
        _2896 = (_3111 * _3102) + _2329;
        _2898 = (_3111 * _3104) + _2331;
        _2900 = (_3111 * _3106) + _2333;
        _2902 = ((_3096 * _1125) * _3111) + _2677;
        _2904 = ((_3098 * _1127) * _3111) + _2679;
        _2906 = ((_3100 * _1128) * _3111) + _2681;
    }
    else
    {
        _2896 = _2329;
        _2898 = _2331;
        _2900 = _2333;
        _2902 = _2677;
        _2904 = _2679;
        _2906 = _2681;
    }
    float _4824 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _4835 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _4846 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    uint _2926 = _263 + 6u;
    float _2934 = _1063 / cbSceneParam._m0[86u].x;
    float _2935 = _1064 / cbSceneParam._m0[86u].y;
    vec4 _2949 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, (log2((isnan(cbSceneParam._m0[77u].w) ? _998 : (isnan(_998) ? cbSceneParam._m0[77u].w : min(_998, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2951 = _2949.x;
    float _2952 = _2949.y;
    float _2953 = _2949.z;
    float _2954 = _2949.w;
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    if (_998 > cbSceneParam._m0[78u].w)
    {
        float _3009 = isnan(_998) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _998 : min(cbSceneParam._m0[80u].w, _998));
        float _3010 = _3009 / _998;
        float _3021 = _3010 * _1048;
        float _3022 = _1049 * _3010;
        float _3023 = (-0.0) - _3022;
        float _3024 = _3010 * _1050;
        float _3026 = (cbSceneParam._m0[77u].w * _3023) / _3009;
        float _3027 = _3026 + cbSceneParam._m0[79u].w;
        float _3028 = cbSceneParam._m0[79u].w - _3022;
        float _3034 = sqrt(((_3021 * _3021) + (_3022 * _3022)) + (_3024 * _3024));
        float _3037 = (1.0 - (cbSceneParam._m0[77u].w / _3009)) * _3034;
        float _3042 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3044 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3197;
        if (abs((_3023 - _3026) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3197 = ((((_3027 > 0.0) ? exp2(_3042 * _3027) : (2.0 - exp2(_3044 * _3027))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3037;
        }
        else
        {
            float _3157 = 1.0 / cbSceneParam._m0[80u].x;
            float _3158 = isnan(_3028) ? _3027 : (isnan(_3027) ? _3028 : max(_3027, _3028));
            float _3159 = isnan(_3028) ? _3027 : (isnan(_3027) ? _3028 : min(_3027, _3028));
            float _3168 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : min(_3158, 0.0));
            float _3169 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : min(_3159, 0.0));
            _3197 = ((abs(_3034 / _3023) * cbSceneParam._m0[80u].y) * ((((_3168 - _3169) * 2.0) - ((exp2(_3042 * (isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0)))) - exp2(_3042 * (isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0))))) * _3157)) - ((exp2(_3044 * _3168) - exp2(_3044 * _3169)) * _3157))) + (_3037 * cbSceneParam._m0[80u].z);
        }
        vec4 _3199 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, 1.0), 0.0);
        float _3208 = exp2((_3197 * (-1.44269502162933349609375)) * (1.0 - _3199.w));
        float _3209 = log2(_3208);
        float _3225 = log2(_2954);
        _3046 = (exp2(_3225 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].x)) * _3199.x) / cbSceneParam._m0[78u].x)) + _2951;
        _3048 = (exp2(_3225 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].y)) * _3199.y) / cbSceneParam._m0[78u].y)) + _2952;
        _3050 = (exp2(_3225 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].z)) * _3199.z) / cbSceneParam._m0[78u].z)) + _2953;
        _3052 = _3208 * _2954;
    }
    else
    {
        _3046 = _2951;
        _3048 = _2952;
        _3050 = _2953;
        _3052 = _2954;
    }
    float _3064 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3065 = _3064 == 3.0;
    float _3066 = log2(_3052);
    float _3073 = exp2(_3066 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2896 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1141))) + ((_2902 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1948)) * cbPerFrame._m0[3u].x));
    float _3074 = exp2(_3066 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2898 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1141))) + ((_2904 + ((isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))) * _1948)) * cbPerFrame._m0[3u].x));
    float _3075 = exp2(_3066 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2900 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1141))) + ((_2906 + ((isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0))) * _1948)) * cbPerFrame._m0[3u].x));
    float _3084 = (_3064 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3084 * (_3065 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3046)));
    SV_Target.y = _3084 * (_3065 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3048)));
    SV_Target.z = _3084 * (_3065 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3050)));
    SV_Target.w = cbInstanceData._m0[_2926].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2926].w;
}


