#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1587;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _250 = _249 * _241;
    float _251 = _249 * _242;
    float _252 = _249 * _243;
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = _256 * NORMAL.x;
    float _258 = _256 * NORMAL.y;
    float _259 = _256 * NORMAL.z;
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = _263 * TANGENT.x;
    float _265 = _263 * TANGENT.y;
    float _266 = _263 * TANGENT.z;
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _309.x * cbMtdParam._m0[11u].x;
    float _316 = _309.y * cbMtdParam._m0[11u].y;
    float _317 = _309.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _355.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[23u].w) + _408) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4193 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _433 = (_426 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _434 = (_426 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _435 = (_426 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _355.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[23u].w) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4204 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _506 = (_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433;
    float _507 = (_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434;
    float _508 = (_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435;
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _288) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _289) + cbTextureTilingScale._m0[24u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _546 = _544.x;
    float _556 = dot(vec4(_546, _544.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _568 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _355.z) * 2.0) - ((((_546 - _556) * cbMtdParam._m0[23u].w) + _556) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4215 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _576 = (_569 * ((_527.x * cbMtdParam._m0[14u].x) - _506)) + _506;
    float _577 = (_569 * ((_527.y * cbMtdParam._m0[14u].y) - _507)) + _507;
    float _578 = (_569 * ((_527.z * cbMtdParam._m0[14u].z) - _508)) + _508;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _615 = _613.x;
    float _616 = _613.y;
    float _617 = _613.z;
    float _624 = ((_596.x - _615) * _426) + _615;
    float _625 = ((_596.y - _616) * _426) + _616;
    float _626 = ((_596.z - _617) * _426) + _617;
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _649 = ((_638.x - _624) * _499) + _624;
    float _650 = ((_638.y - _625) * _499) + _625;
    float _651 = ((_638.z - _626) * _499) + _626;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _288) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _289) + cbTextureTilingScale._m0[23u].w));
    float _676 = ((_663.z - _651) * _569) + _651;
    float _679 = ((((_663.x - _649) * _569) + _649) * 2.0) + (-1.0);
    float _681 = ((((_663.y - _650) * _569) + _650) * 2.0) + (-1.0);
    float _682 = dot(vec2(_679, _681), vec2(_679, _681));
    float _4226 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _687 = sqrt(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _713 = (((_701.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _679;
    float _714 = (((_701.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _681;
    float _717 = fma(_687, _257, fma(_714, _264, _713 * _250));
    float _720 = fma(_687, _258, fma(_714, _265, _713 * _251));
    float _723 = fma(_687, _259, fma(_714, _266, _713 * _252));
    float _727 = inversesqrt(dot(vec3(_717, _720, _723), vec3(_717, _720, _723)));
    vec4 _754 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _756 = _754.x;
    float _757 = 1.0 - _756;
    float _765 = (cbMtdParam._m0[19u].x + dot(vec4(_727 * _717, _727 * _720, _727 * _723, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_756 - _757) * cbMtdParam._m0[24u].z) + _757) * cbMtdParam._m0[21u].z);
    float _4237 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _766 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _768 = (-0.0) - cbMtdParam._m0[24u].x;
    float _770 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _770 : (isnan(_770) ? 1.0 : min(_770, 1.0));
    float _778 = _766 - ((_766 * TEXCOORD_8.x) * _771);
    float _779 = _766 - ((_766 * TEXCOORD_8.y) * _771);
    float _780 = _766 - ((_766 * TEXCOORD_8.z) * _771);
    float _787 = (_778 * (cbMtdParam._m0[17u].x - _576)) + _576;
    float _788 = (_779 * (cbMtdParam._m0[17u].y - _577)) + _577;
    float _789 = (_780 * (cbMtdParam._m0[17u].z - _578)) + _578;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _803 = _801.x;
    float _804 = 1.0 - _803;
    float _830 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_803 - _804) * cbMtdParam._m0[24u].w) + _804) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4258 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _831 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _839 = ((((cbMtdParam._m0[10u].x - _787) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _831) + _787;
    float _840 = ((((cbMtdParam._m0[10u].y - _788) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _831) + _788;
    float _841 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _789)) * _831) + _789;
    vec4 _867 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _869 = _867.x;
    float _887 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _869) * _426) + _869;
    float _904 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _887) * _499) + _887;
    float _921 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _288) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _289) + cbTextureTilingScale._m0[10u].w)).x - _904) * _569) + _904;
    float _925 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _921) * cbMtdParam._m0[19u].z) + _921;
    float _927 = _925 - (_925 * _778);
    float _929 = _927 - (_927 * _831);
    float _933 = (cbMtdParam._m0[19u].w * (_701.z - _676)) + _676;
    vec4 _949 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _956 = (_949.x * 2.0) + (-1.0);
    float _957 = (_949.y * 2.0) + (-1.0);
    float _958 = dot(vec2(_956, _957), vec2(_956, _957));
    float _4269 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _966 = ((_949.z - _933) * _778) + _933;
    float _969 = ((cbMtdParam._m0[23u].x - _966) * _831) + _966;
    vec4 _992 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _998 = (_992.x * 2.0) + (-1.0);
    float _999 = (_992.y * 2.0) + (-1.0);
    float _1000 = dot(vec2(_998, _999), vec2(_998, _999));
    float _4280 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1015 = ((sqrt(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) - _687) * _780) + _687;
    float _1018 = (((_956 - _713) * _778) + _713) + (cbMtdParam._m0[21u].x * _713);
    float _1019 = (((_957 - _714) * _779) + _714) + (cbMtdParam._m0[21u].x * _714);
    float _1030 = (((_998 - _1018) + (_1018 * cbMtdParam._m0[22u].z)) * _831) + _1018;
    float _1031 = (((_999 - _1019) + (_1019 * cbMtdParam._m0[22u].z)) * _831) + _1019;
    float _1032 = (_831 * (sqrt(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) - _1015)) + _1015;
    float _1034 = cbMtdParam._m0[22u].x + _701.w;
    float _1037 = fma(_1032, _257, fma(_1031, _264, _1030 * _250));
    float _1040 = fma(_1032, _258, fma(_1031, _265, _1030 * _251));
    float _1043 = fma(_1032, _259, fma(_1031, _266, _1030 * _252));
    float _1047 = inversesqrt(dot(vec3(_1037, _1040, _1043), vec3(_1037, _1040, _1043)));
    float _1048 = _1047 * _1037;
    float _1049 = _1047 * _1040;
    float _1050 = _1047 * _1043;
    float _4291 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _1051 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _4313 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4324 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4335 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4346 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _1056 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _1070 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1110 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1120 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1110);
    float _1121 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1110);
    float _1122 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1110);
    float _1126 = inversesqrt(dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122)));
    float _1127 = _1120 * _1126;
    float _1128 = _1121 * _1126;
    float _1129 = _1122 * _1126;
    float _1135 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1136 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1154 = fma(_1050, cbSceneParam._m0[5u].z, fma(_1049, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1048));
    float _1157 = fma(_1050, cbSceneParam._m0[6u].z, fma(_1049, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1048));
    float _1160 = fma(_1050, cbSceneParam._m0[7u].z, fma(_1049, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1048));
    uint _1174 = (_269 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1180 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * cbInstanceData._m0[_1174].x;
    float _1181 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * cbInstanceData._m0[_1174].y;
    float _1182 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * cbInstanceData._m0[_1174].z;
    float _4357 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _1183 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _4368 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _1184 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _4379 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _1185 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _1186 = 1.0 - _1056;
    float _1187 = _1183 * _1186;
    float _1188 = _1184 * _1186;
    float _1189 = _1185 * _1186;
    float _1194 = (_1183 + (-0.039999999105930328369140625)) * _1056;
    float _1195 = (_1184 + (-0.039999999105930328369140625)) * _1056;
    float _1196 = (_1185 + (-0.039999999105930328369140625)) * _1056;
    float _1197 = _1194 + 0.039999999105930328369140625;
    float _1199 = _1195 + 0.039999999105930328369140625;
    float _1200 = _1196 + 0.039999999105930328369140625;
    vec4 _1209 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1135, cbSceneParam._m0[86u].y * _1136));
    float _1213 = ((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * TEXCOORD_5.w) * _1209.x;
    float _1214 = dot(vec3(_1048, _1049, _1050), vec3(_1127, _1128, _1129));
    float _1217 = _1214 * 2.0;
    float _1221 = (_1217 * _1048) - _1127;
    float _1222 = (_1217 * _1049) - _1128;
    float _1223 = (_1217 * _1050) - _1129;
    float _1227 = abs(dot(vec3(_1127, _1128, _1129), vec3(_1048, _1049, _1050)));
    float _4390 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
    float _1229 = sqrt(_1051);
    float _1242 = exp2((_1229 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1229 * 3.0));
    float _1248 = (1.0 - _1242) * ((_1229 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1249 = _1242 * _1229;
    float _1277 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1281 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1285 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1586;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1311 = fma(_1285, cbModelParam._m0[26u].z, fma(_1281, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1277));
        float _1315 = fma(_1285, cbModelParam._m0[27u].z, fma(_1281, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1277));
        float _1319 = fma(_1285, cbModelParam._m0[28u].z, fma(_1281, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1277));
        float _1344 = _1277 + _1048;
        float _1345 = _1281 + _1049;
        float _1346 = _1285 + _1050;
        float _1356 = fma(_1346, cbModelParam._m0[26u].z, fma(_1345, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1344)) - _1311;
        float _1357 = fma(_1346, cbModelParam._m0[27u].z, fma(_1345, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1344)) - _1315;
        float _1358 = fma(_1346, cbModelParam._m0[28u].z, fma(_1345, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1344)) - _1319;
        float _1362 = inversesqrt(dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358)));
        float _1375 = ((_1362 * _1356) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1311 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1362 * _1357) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1315 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1377 = ((_1362 * _1358) / cbModelParam._m0[34u].z) + ((((((_1319 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1375, _1376, _1377), 0.0);
        float _1414 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1380.x + (-0.5));
        float _1416 = _1414 * (_1380.y + (-0.5));
        float _1417 = _1414 * (_1380.z + (-0.5));
        float _1424 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1387.x + (-0.5));
        float _1426 = _1424 * (_1387.y + (-0.5));
        float _1427 = _1424 * (_1387.z + (-0.5));
        float _1434 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1394.x + (-0.5));
        float _1436 = _1434 * (_1394.y + (-0.5));
        float _1437 = _1434 * (_1394.z + (-0.5));
        float _1444 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1401.x + (-0.5));
        float _1446 = _1444 * (_1401.y + (-0.5));
        float _1447 = _1444 * (_1401.z + (-0.5));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = _1415 * 0.5;
        float _1452 = _1425 * 0.5;
        float _1453 = _1435 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1468 = (dot(vec3(_1048, _1049, _1050), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1478 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4438 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1480 + 1.0))) + _1485) * _1448;
        float _1495 = _1416 * 0.5;
        float _1496 = _1426 * 0.5;
        float _1497 = _1436 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_1048, _1049, _1050), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4471 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1522 + 1.0))) + _1527) * _1449;
        float _1537 = _1417 * 0.5;
        float _1538 = _1427 * 0.5;
        float _1539 = _1437 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_1048, _1049, _1050), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4504 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1564 + 1.0))) + _1569) * _1450;
        _1586 = _1417;
        _1588 = _1416;
        _1589 = _1415;
        _1590 = _1427;
        _1591 = _1426;
        _1592 = _1425;
        _1593 = _1437;
        _1594 = _1436;
        _1595 = _1435;
        _1596 = _1450;
        _1597 = _1449;
        _1598 = _1448;
        _1599 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
        _1600 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1601 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
    }
    else
    {
        _1586 = _1587;
        _1588 = _1587;
        _1589 = _1587;
        _1590 = _1587;
        _1591 = _1587;
        _1592 = _1587;
        _1593 = _1587;
        _1594 = _1587;
        _1595 = _1587;
        _1596 = _1587;
        _1597 = _1587;
        _1598 = _1587;
        _1599 = 0.0;
        _1600 = 0.0;
        _1601 = 0.0;
    }
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1624 = fma(_1285, cbModelParam._m0[30u].z, fma(_1281, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1277));
        float _1628 = fma(_1285, cbModelParam._m0[31u].z, fma(_1281, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1277));
        float _1632 = fma(_1285, cbModelParam._m0[32u].z, fma(_1281, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1277));
        float _1655 = _1277 + _1048;
        float _1656 = _1281 + _1049;
        float _1657 = _1285 + _1050;
        float _1667 = fma(_1657, cbModelParam._m0[30u].z, fma(_1656, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1655)) - _1624;
        float _1668 = fma(_1657, cbModelParam._m0[31u].z, fma(_1656, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1655)) - _1628;
        float _1669 = fma(_1657, cbModelParam._m0[32u].z, fma(_1656, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1655)) - _1632;
        float _1673 = inversesqrt(dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669)));
        float _1686 = ((_1673 * _1667) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1624 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1687 = ((_1673 * _1668) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1628 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1688 = ((_1673 * _1669) / cbModelParam._m0[35u].z) + ((((((_1632 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1690 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1686, _1687, _1688), 0.0);
        vec4 _1697 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1686, _1687, _1688), 0.0);
        vec4 _1704 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1686, _1687, _1688), 0.0);
        vec4 _1711 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1686, _1687, _1688), 0.0);
        float _1723 = exp2((_1690.w + (-0.5)) * 20.0) * 2.0;
        float _1724 = _1723 * (_1690.x + (-0.5));
        float _1725 = _1723 * (_1690.y + (-0.5));
        float _1726 = _1723 * (_1690.z + (-0.5));
        float _1733 = exp2((_1697.w + (-0.5)) * 20.0) * 2.0;
        float _1734 = _1733 * (_1697.x + (-0.5));
        float _1735 = _1733 * (_1697.y + (-0.5));
        float _1736 = _1733 * (_1697.z + (-0.5));
        float _1743 = exp2((_1704.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1704.x + (-0.5));
        float _1745 = _1743 * (_1704.y + (-0.5));
        float _1746 = _1743 * (_1704.z + (-0.5));
        float _1753 = exp2((_1711.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = _1753 * (_1711.x + (-0.5));
        float _1755 = _1753 * (_1711.y + (-0.5));
        float _1756 = _1753 * (_1711.z + (-0.5));
        float _1757 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1758 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1759 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1760 = _1724 * 0.5;
        float _1761 = _1734 * 0.5;
        float _1762 = _1744 * 0.5;
        float _1763 = dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762));
        float _1768 = (_1763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1763);
        float _1776 = (dot(vec3(_1048, _1049, _1050), vec3(_1768 * _1760, _1768 * _1761, _1768 * _1762)) + 1.0) * 0.5;
        float _4545 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762)) / (_1757 + 9.9999997473787516355514526367188e-06);
        float _4556 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _1787 = _1786 * 2.0;
        float _1791 = (1.0 - _1786) / (_1786 + 1.0);
        float _4567 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _1801 = ((((1.0 - _1792) * (_1787 + 2.0)) * exp2(log2(isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_1787 + 1.0))) + _1792) * _1757;
        float _1802 = _1725 * 0.5;
        float _1803 = _1735 * 0.5;
        float _1804 = _1745 * 0.5;
        float _1805 = dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804));
        float _1810 = (_1805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1805);
        float _1818 = (dot(vec3(_1048, _1049, _1050), vec3(_1810 * _1802, _1810 * _1803, _1810 * _1804)) + 1.0) * 0.5;
        float _4578 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1827 = sqrt(((_1803 * _1803) + (_1802 * _1802)) + (_1804 * _1804)) / (_1758 + 9.9999997473787516355514526367188e-06);
        float _4589 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1829 = _1828 * 2.0;
        float _1833 = (1.0 - _1828) / (_1828 + 1.0);
        float _4600 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _1843 = ((((1.0 - _1834) * (_1829 + 2.0)) * exp2(log2(isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_1829 + 1.0))) + _1834) * _1758;
        float _1844 = _1726 * 0.5;
        float _1845 = _1736 * 0.5;
        float _1846 = _1746 * 0.5;
        float _1847 = dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846));
        float _1852 = (_1847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1847);
        float _1860 = (dot(vec3(_1048, _1049, _1050), vec3(_1852 * _1844, _1852 * _1845, _1852 * _1846)) + 1.0) * 0.5;
        float _4611 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1869 = sqrt(((_1845 * _1845) + (_1844 * _1844)) + (_1846 * _1846)) / (_1759 + 9.9999997473787516355514526367188e-06);
        float _4622 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1871 = _1870 * 2.0;
        float _1875 = (1.0 - _1870) / (_1870 + 1.0);
        float _4633 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _1885 = ((((1.0 - _1876) * (_1871 + 2.0)) * exp2(log2(isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_1871 + 1.0))) + _1876) * _1759;
        _1893 = _1726;
        _1894 = _1725;
        _1895 = _1724;
        _1896 = _1736;
        _1897 = _1735;
        _1898 = _1734;
        _1899 = _1746;
        _1900 = _1745;
        _1901 = _1744;
        _1902 = _1759;
        _1903 = _1758;
        _1904 = _1757;
        _1905 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)));
        _1906 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)));
        _1907 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)));
    }
    else
    {
        _1893 = _1587;
        _1894 = _1587;
        _1895 = _1587;
        _1896 = _1587;
        _1897 = _1587;
        _1898 = _1587;
        _1899 = _1587;
        _1900 = _1587;
        _1901 = _1587;
        _1902 = _1587;
        _1903 = _1587;
        _1904 = _1587;
        _1905 = 0.0;
        _1906 = 0.0;
        _1907 = 0.0;
    }
    float _1917 = (cbModelParam._m0[1u].x * (_1905 - _1599)) + _1599;
    float _1918 = (cbModelParam._m0[1u].x * (_1906 - _1600)) + _1600;
    float _1919 = (cbModelParam._m0[1u].x * (_1907 - _1601)) + _1601;
    float _1940 = fma(_1919, cbSceneParam._m0[89u].z, fma(_1918, cbSceneParam._m0[89u].y, _1917 * cbSceneParam._m0[89u].x));
    float _1943 = fma(_1919, cbSceneParam._m0[90u].z, fma(_1918, cbSceneParam._m0[90u].y, _1917 * cbSceneParam._m0[90u].x));
    float _1946 = fma(_1919, cbSceneParam._m0[91u].z, fma(_1918, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1917));
    float _1961 = _1221 * 0.5;
    float _1962 = _1222 * 0.5;
    float _1963 = _1223 * 0.5;
    float _1964 = dot(vec4(_1961, _1962, _1963, 1.0), vec4(_1895, _1898, _1901, _1904));
    float _1967 = dot(vec4(_1961, _1962, _1963, 1.0), vec4(_1894, _1897, _1900, _1903));
    float _1970 = dot(vec4(_1961, _1962, _1963, 1.0), vec4(_1893, _1896, _1899, _1902));
    float _2004;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1977 = dot(vec4(_1961, _1962, _1963, 1.0), vec4(_1586, _1590, _1593, _1596));
        float _1981 = dot(vec4(_1961, _1962, _1963, 1.0), vec4(_1588, _1591, _1594, _1597));
        float _1985 = dot(vec4(_1961, _1962, _1963, 1.0), vec4(_1589, _1592, _1595, _1598));
        float _1992 = dot(vec4(cbModelParam._m0[39u]), vec4(_1961, _1962, _1963, 1.0));
        _2004 = dot(vec3(isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)), isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0)), isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1992) ? 0.0 : (isnan(0.0) ? _1992 : max(0.0, _1992))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2004 = 1.0;
    }
    float _2015;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2006 = dot(vec4(cbModelParam._m0[40u]), vec4(_1961, _1962, _1963, 1.0));
        _2015 = dot(vec3(isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0)), isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0)), isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2006) ? 0.0 : (isnan(0.0) ? _2006 : max(0.0, _2006))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2015 = 1.0;
    }
    float _2019 = (_2015 * cbModelParam._m0[1u].x) + (_2004 * (1.0 - cbModelParam._m0[1u].x));
    float _2029 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1051);
    float _2030 = isnan(_2029) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2029 : min(cbModelParam._m0[25u].z, _2029));
    float _2110;
    float _2112;
    float _2114;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2077 = fma(_1285, cbModelParam._m0[13u].z, fma(_1281, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1277)) + cbModelParam._m0[13u].w;
        float _2081 = fma(_1285, cbModelParam._m0[14u].z, fma(_1281, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1277)) + cbModelParam._m0[14u].w;
        float _2085 = fma(_1285, cbModelParam._m0[15u].z, fma(_1281, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1277)) + cbModelParam._m0[15u].w;
        float _2088 = fma(_1223, cbModelParam._m0[13u].z, fma(_1222, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1221));
        float _2091 = fma(_1223, cbModelParam._m0[14u].z, fma(_1222, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1221));
        float _2094 = fma(_1223, cbModelParam._m0[15u].z, fma(_1222, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1221));
        float _2122;
        if (_2088 > 0.0)
        {
            _2122 = abs((1.0 - _2077) / _2088);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2077 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2122 = frontier_phi_14_12_ladder;
        }
        float _2294;
        if (_2091 > 0.0)
        {
            _2294 = abs((1.0 - _2081) / _2091);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2081 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2294 = frontier_phi_23_19_ladder;
        }
        float _2589;
        if (_2094 > 0.0)
        {
            _2589 = abs((1.0 - _2085) / _2094);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2094 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2085 + 1.0) / _2094);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2589 = frontier_phi_35_30_ladder;
        }
        float _2591 = isnan(_2294) ? _2122 : (isnan(_2122) ? _2294 : min(_2122, _2294));
        float _2592 = isnan(_2589) ? _2591 : (isnan(_2591) ? _2589 : min(_2591, _2589));
        float _2596 = (_2592 * _2088) + _2077;
        float _2597 = (_2592 * _2091) + _2081;
        float _2598 = (_2592 * _2094) + _2085;
        float _2599 = _2592 * 9.9999997473787516355514526367188e-05;
        float _2601 = (-1.0) - _2599;
        float _2603 = _2599 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2598 > _2603) || ((_2598 < _2601) || ((_2597 > _2603) || ((_2597 < _2601) || ((_2596 < _2601) || (_2596 > _2603))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2598, cbModelParam._m0[9u].z, fma(_2597, cbModelParam._m0[9u].y, _2596 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2598, cbModelParam._m0[10u].z, fma(_2597, cbModelParam._m0[10u].y, _2596 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2598, cbModelParam._m0[11u].z, fma(_2597, cbModelParam._m0[11u].y, _2596 * cbModelParam._m0[11u].x))), _2030);
            frontier_phi_13_35_ladder = _2743.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2743.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2743.x * cbModelParam._m0[1u].y;
        }
        _2110 = frontier_phi_13_35_ladder_2;
        _2112 = frontier_phi_13_35_ladder_1;
        _2114 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2098 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1221, _1222, _1223), _2030);
        _2110 = _2098.x * cbModelParam._m0[1u].y;
        _2112 = _2098.y * cbModelParam._m0[1u].y;
        _2114 = _2098.z * cbModelParam._m0[1u].y;
    }
    float _2118 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1051);
    float _2119 = isnan(_2118) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2118 : min(cbModelParam._m0[25u].w, _2118));
    float _2209;
    float _2211;
    float _2213;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2173 = fma(_1285, cbModelParam._m0[21u].z, fma(_1281, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1277)) + cbModelParam._m0[21u].w;
        float _2177 = fma(_1285, cbModelParam._m0[22u].z, fma(_1281, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1277)) + cbModelParam._m0[22u].w;
        float _2181 = fma(_1285, cbModelParam._m0[23u].z, fma(_1281, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1277)) + cbModelParam._m0[23u].w;
        float _2184 = fma(_1223, cbModelParam._m0[21u].z, fma(_1222, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1221));
        float _2187 = fma(_1223, cbModelParam._m0[22u].z, fma(_1222, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1221));
        float _2190 = fma(_1223, cbModelParam._m0[23u].z, fma(_1222, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1221));
        float _2299;
        if (_2184 > 0.0)
        {
            _2299 = abs((1.0 - _2173) / _2184);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2184 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2173 + 1.0) / _2184);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2299 = frontier_phi_25_21_ladder;
        }
        float _2616;
        if (_2187 > 0.0)
        {
            _2616 = abs((1.0 - _2177) / _2187);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2187 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2177 + 1.0) / _2187);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2616 = frontier_phi_37_32_ladder;
        }
        float _2954;
        if (_2190 > 0.0)
        {
            _2954 = abs((1.0 - _2181) / _2190);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2190 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2181 + 1.0) / _2190);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2954 = frontier_phi_47_44_ladder;
        }
        float _2956 = isnan(_2616) ? _2299 : (isnan(_2299) ? _2616 : min(_2299, _2616));
        float _2957 = isnan(_2954) ? _2956 : (isnan(_2956) ? _2954 : min(_2956, _2954));
        float _2961 = (_2957 * _2184) + _2173;
        float _2962 = (_2957 * _2187) + _2177;
        float _2963 = (_2957 * _2190) + _2181;
        float _2964 = _2957 * 9.9999997473787516355514526367188e-05;
        float _2965 = (-1.0) - _2964;
        float _2967 = _2964 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2963 > _2967) || ((_2963 < _2965) || ((_2962 > _2967) || ((_2962 < _2965) || ((_2961 < _2965) || (_2961 > _2967))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3085 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2963, cbModelParam._m0[17u].z, fma(_2962, cbModelParam._m0[17u].y, _2961 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2963, cbModelParam._m0[18u].z, fma(_2962, cbModelParam._m0[18u].y, _2961 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2963, cbModelParam._m0[19u].z, fma(_2962, cbModelParam._m0[19u].y, _2961 * cbModelParam._m0[19u].x))), _2119);
            frontier_phi_22_47_ladder = _3085.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3085.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3085.x * cbModelParam._m0[1u].z;
        }
        _2209 = frontier_phi_22_47_ladder_2;
        _2211 = frontier_phi_22_47_ladder_1;
        _2213 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2193 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1221, _1222, _1223), _2119);
        _2209 = _2193.x * cbModelParam._m0[1u].z;
        _2211 = _2193.y * cbModelParam._m0[1u].z;
        _2213 = _2193.z * cbModelParam._m0[1u].z;
    }
    float _2226 = (((_1248 * _1197) + _1249) * _1213) * ((cbModelParam._m0[1u].w * (_2209 - _2110)) + _2110);
    float _2228 = (((_1248 * _1199) + _1249) * _1213) * ((cbModelParam._m0[1u].w * (_2211 - _2112)) + _2112);
    float _2230 = (((_1248 * _1200) + _1249) * _1213) * ((cbModelParam._m0[1u].w * (_2213 - _2114)) + _2114);
    float _2233 = fma(_2230, cbSceneParam._m0[89u].z, fma(_2228, cbSceneParam._m0[89u].y, _2226 * cbSceneParam._m0[89u].x));
    float _2236 = fma(_2230, cbSceneParam._m0[90u].z, fma(_2228, cbSceneParam._m0[90u].y, _2226 * cbSceneParam._m0[90u].x));
    float _2239 = fma(_2230, cbSceneParam._m0[91u].z, fma(_2228, cbSceneParam._m0[91u].y, _2226 * cbSceneParam._m0[91u].x));
    float _2273 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2277 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2281 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2285 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2286 = _2273 / _2285;
    float _2287 = _2277 / _2285;
    float _2288 = _2281 / _2285;
    float _2435;
    float _2436;
    float _2437;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2315 = ((uint(_2288 > cbSceneParam._m0[59u].y) + uint(_2288 > cbSceneParam._m0[59u].x)) + uint(_2288 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2316 = _2315 + 43u;
        uint _2324 = _2315 + 44u;
        uint _2332 = _2315 + 45u;
        uint _2340 = _2315 + 46u;
        float _2351 = fma(_2285, cbSceneParam._m0[_2316].w, fma(_2281, cbSceneParam._m0[_2316].z, fma(_2277, cbSceneParam._m0[_2316].y, _2273 * cbSceneParam._m0[_2316].x)));
        float _2355 = fma(_2285, cbSceneParam._m0[_2324].w, fma(_2281, cbSceneParam._m0[_2324].z, fma(_2277, cbSceneParam._m0[_2324].y, _2273 * cbSceneParam._m0[_2324].x)));
        float _2363 = fma(_2285, cbSceneParam._m0[_2340].w, fma(_2281, cbSceneParam._m0[_2340].z, fma(_2277, cbSceneParam._m0[_2340].y, _2273 * cbSceneParam._m0[_2340].x)));
        float _2368 = cbSceneParam._m0[33u].z * _2363;
        float _2370 = cbSceneParam._m0[33u].w * _2363;
        float _2373 = fma(_2285, cbSceneParam._m0[_2332].w, fma(_2281, cbSceneParam._m0[_2332].z, fma(_2277, cbSceneParam._m0[_2332].y, _2273 * cbSceneParam._m0[_2332].x))) / _2363;
        float _2421 = (cbSceneParam._m0[33u].x - sqrt(((_2287 * _2287) + (_2286 * _2286)) + (_2288 * _2288))) * cbSceneParam._m0[33u].y;
        float _4759 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2428 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2368 + _2351) / _2363, (_2370 + _2355) / _2363), _2373), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2370 + _2351) / _2363, (_2355 - _2368) / _2363), _2373), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2351 - _2368) / _2363, (_2355 - _2370) / _2363), _2373), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2351 - _2370) / _2363, (_2368 + _2355) / _2363), _2373), 0.0)).x), vec4(0.25)));
        _2435 = 1.0 - (_2428 * cbSceneParam._m0[34u].x);
        _2436 = 1.0 - (_2428 * cbSceneParam._m0[34u].y);
        _2437 = 1.0 - (_2428 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2435 = 1.0;
        _2436 = 1.0;
        _2437 = 1.0;
    }
    float _2501;
    float _2503;
    float _2505;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2489 = fma(_2285, cbSceneParam._m0[63u].w, fma(_2281, cbSceneParam._m0[63u].z, fma(_2277, cbSceneParam._m0[63u].y, _2273 * cbSceneParam._m0[63u].x)));
        float _2490 = fma(_2285, cbSceneParam._m0[60u].w, fma(_2281, cbSceneParam._m0[60u].z, fma(_2277, cbSceneParam._m0[60u].y, _2273 * cbSceneParam._m0[60u].x))) / _2489;
        float _2491 = fma(_2285, cbSceneParam._m0[61u].w, fma(_2281, cbSceneParam._m0[61u].z, fma(_2277, cbSceneParam._m0[61u].y, _2273 * cbSceneParam._m0[61u].x))) / _2489;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2490 >= cbSceneParam._m0[64u].x) && (_2491 >= cbSceneParam._m0[64u].y)) && (_2490 <= cbSceneParam._m0[64u].z)) && (_2491 <= cbSceneParam._m0[64u].w))
        {
            float _2629 = fma(_2285, cbSceneParam._m0[62u].w, fma(_2281, cbSceneParam._m0[62u].z, fma(_2277, cbSceneParam._m0[62u].y, _2273 * cbSceneParam._m0[62u].x))) / _2489;
            float _2633 = isnan(cbSceneParam._m0[41u].w) ? _2629 : (isnan(_2629) ? cbSceneParam._m0[41u].w : max(_2629, cbSceneParam._m0[41u].w));
            float _2676 = (cbSceneParam._m0[33u].x - sqrt(((_2287 * _2287) + (_2286 * _2286)) + (_2288 * _2288))) * cbSceneParam._m0[33u].y;
            float _4775 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
            float _2683 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2490, cbSceneParam._m0[33u].w + _2491), _2633), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2490, _2491 - cbSceneParam._m0[33u].z), _2633), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2490 - cbSceneParam._m0[33u].z, _2491 - cbSceneParam._m0[33u].w), _2633), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2490 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2491), _2633), 0.0)).x), vec4(0.25)));
            float _2687 = 1.0 - (_2683 * cbSceneParam._m0[34u].x);
            float _2688 = 1.0 - (_2683 * cbSceneParam._m0[34u].y);
            float _2689 = 1.0 - (_2683 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2689) ? _2437 : (isnan(_2437) ? _2689 : min(_2437, _2689));
            frontier_phi_34_33_ladder_1 = isnan(_2688) ? _2436 : (isnan(_2436) ? _2688 : min(_2436, _2688));
            frontier_phi_34_33_ladder_2 = isnan(_2687) ? _2435 : (isnan(_2435) ? _2687 : min(_2435, _2687));
        }
        else
        {
            frontier_phi_34_33_ladder = _2437;
            frontier_phi_34_33_ladder_1 = _2436;
            frontier_phi_34_33_ladder_2 = _2435;
        }
        _2501 = frontier_phi_34_33_ladder_2;
        _2503 = frontier_phi_34_33_ladder_1;
        _2505 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2501 = _2435;
        _2503 = _2436;
        _2505 = _2437;
    }
    uvec4 _2510 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2512 = _2510.x * 14u;
    uint _2513 = _2512 + 13u;
    float _2520 = _1213 + (-1.0);
    float _2525 = (cbLight._m0[_2513].x * _2520) + 1.0;
    float _2526 = (cbLight._m0[_2513].y * _2520) + 1.0;
    float _2527 = (cbLight._m0[_2513].z * _2520) + 1.0;
    float _2528 = (cbLight._m0[_2513].w * _2520) + 1.0;
    uint _2529 = _2512 + 5u;
    float _2535 = isnan(1.0) ? _2526 : (isnan(_2526) ? 1.0 : min(_2526, 1.0));
    uint _2539 = _2512 + 4u;
    float _2548 = isnan(1.0) ? _2525 : (isnan(_2525) ? 1.0 : min(_2525, 1.0));
    uint _2552 = _2512 | 1u;
    float _2563 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_1048, _1049, _1050));
    float _2566 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_1048, _1049, _1050));
    float _4811 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _4822 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2571 = (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * 0.3183098733425140380859375;
    float _2573 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * 0.3183098733425140380859375;
    float _2580 = ((cbLight._m0[_2529].x * _2535) * _2573) + (((cbLight._m0[_2539].x * _2501) * _2548) * _2571);
    float _2581 = ((_2535 * cbLight._m0[_2529].y) * _2573) + (((cbLight._m0[_2539].y * _2503) * _2548) * _2571);
    float _2582 = ((_2535 * cbLight._m0[_2529].z) * _2573) + (((cbLight._m0[_2539].z * _2505) * _2548) * _2571);
    uvec4 _2586 = floatBitsToUint(cbLight._m0[_2512 + 12u]);
    bool _2588 = _2586.x == 0u;
    float _2690;
    float _2692;
    float _2694;
    if (_2588)
    {
        _2690 = _2580;
        _2692 = _2581;
        _2694 = _2582;
    }
    else
    {
        uint _2698 = _2512 + 6u;
        float _2714 = (dot(vec3(cbLight._m0[_2512 + 2u].xyz), vec3(_1048, _1049, _1050)) * 0.5) + 0.5;
        float _2715 = _2714 * _2714;
        float _4833 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2716 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2717 = isnan(1.0) ? _2527 : (isnan(_2527) ? 1.0 : min(_2527, 1.0));
        _2690 = (((cbLight._m0[_2698].x * 0.3183098733425140380859375) * _2716) * _2717) + _2580;
        _2692 = (((cbLight._m0[_2698].y * 0.3183098733425140380859375) * _2716) * _2717) + _2581;
        _2694 = (((cbLight._m0[_2698].z * 0.3183098733425140380859375) * _2716) * _2717) + _2582;
    }
    bool _2697 = _2586.y == 0u;
    float _2752;
    float _2754;
    float _2756;
    if (_2697)
    {
        _2752 = _2690;
        _2754 = _2692;
        _2756 = _2694;
    }
    else
    {
        uint _2925 = _2512 + 7u;
        float _2941 = (dot(vec3(cbLight._m0[_2512 + 3u].xyz), vec3(_1048, _1049, _1050)) * 0.5) + 0.5;
        float _2942 = _2941 * _2941;
        float _4849 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2943 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2944 = isnan(1.0) ? _2528 : (isnan(_2528) ? 1.0 : min(_2528, 1.0));
        _2752 = (((cbLight._m0[_2925].x * 0.3183098733425140380859375) * _2943) * _2944) + _2690;
        _2754 = (((cbLight._m0[_2925].y * 0.3183098733425140380859375) * _2943) * _2944) + _2692;
        _2756 = (((cbLight._m0[_2925].z * 0.3183098733425140380859375) * _2943) * _2944) + _2694;
    }
    uint _2759 = _2512 + 8u;
    float _2772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2512].w)) * _1051) * 0.949999988079071044921875);
    float _2773 = _2772 * _2772;
    float _2774 = cbLight._m0[_2512].x + _1127;
    float _2775 = cbLight._m0[_2512].y + _1128;
    float _2776 = cbLight._m0[_2512].z + _1129;
    float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
    float _2781 = _2780 * _2774;
    float _2782 = _2780 * _2775;
    float _2783 = _2780 * _2776;
    float _2784 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2512].xyz));
    float _4865 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
    float _2787 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
    float _4876 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _2788 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
    float _2789 = dot(vec3(_1048, _1049, _1050), vec3(_2781, _2782, _2783));
    float _4887 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
    float _2792 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
    float _2793 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_2781, _2782, _2783));
    float _4898 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
    float _2797 = _2773 * _2773;
    float _2801 = ((_2792 * _2792) * (_2797 + (-1.0))) + 1.0;
    float _2809 = exp2(log2(1.0 - (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) * 5.0);
    float _2810 = 0.959999978542327880859375 - _1194;
    float _2812 = 0.959999978542327880859375 - _1195;
    float _2813 = 0.959999978542327880859375 - _1196;
    float _2820 = 1.0 - _2773;
    float _2831 = (0.5 / (((_2788 * ((_2787 * _2820) + _2773)) + 9.9999999392252902907785028219223e-09) + (((_2788 * _2820) + _2773) * _2787))) * _2787;
    float _4909 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
    float _2833 = (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2797 / ((_2801 * _2801) * 3.141590118408203125));
    uint _2847 = _2512 + 9u;
    float _2858 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _1051) * 0.949999988079071044921875);
    float _2859 = _2858 * _2858;
    float _2860 = cbLight._m0[_2552].x + _1127;
    float _2861 = cbLight._m0[_2552].y + _1128;
    float _2862 = cbLight._m0[_2552].z + _1129;
    float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
    float _2867 = _2866 * _2860;
    float _2868 = _2866 * _2861;
    float _2869 = _2866 * _2862;
    float _2870 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2552].xyz));
    float _4920 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
    float _2873 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
    float _2874 = dot(vec3(_1048, _1049, _1050), vec3(_2867, _2868, _2869));
    float _4931 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
    float _2877 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
    float _2878 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2867, _2868, _2869));
    float _4942 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
    float _2882 = _2859 * _2859;
    float _2886 = ((_2877 * _2877) * (_2882 + (-1.0))) + 1.0;
    float _2893 = exp2(log2(1.0 - (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) * 5.0);
    float _2900 = 1.0 - _2859;
    float _2910 = (0.5 / (((_2788 * ((_2873 * _2900) + _2859)) + 9.9999999392252902907785028219223e-09) + (((_2788 * _2900) + _2859) * _2873))) * _2873;
    float _4953 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
    float _2912 = (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2882 / ((_2886 * _2886) * 3.141590118408203125));
    float _2922 = (((((_2893 * _2810) + _1197) * cbLight._m0[_2847].x) * _2912) * _2535) + ((((cbLight._m0[_2759].x * _2501) * ((_2809 * _2810) + _1197)) * _2833) * _2548);
    float _2923 = (((((_2893 * _2812) + _1199) * cbLight._m0[_2847].y) * _2912) * _2535) + ((((cbLight._m0[_2759].y * _2503) * ((_2809 * _2812) + _1199)) * _2833) * _2548);
    float _2924 = (((((_2893 * _2813) + _1200) * cbLight._m0[_2847].z) * _2912) * _2535) + ((((cbLight._m0[_2759].z * _2505) * ((_2809 * _2813) + _1200)) * _2833) * _2548);
    float _2980;
    float _2982;
    float _2984;
    if (_2588)
    {
        _2980 = _2922;
        _2982 = _2923;
        _2984 = _2924;
    }
    else
    {
        uint _2986 = _2512 + 2u;
        uint _2990 = _2512 + 10u;
        float _3004 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2986].w)) * _1051) * 0.949999988079071044921875);
        float _3005 = _3004 * _3004;
        float _3006 = cbLight._m0[_2986].x + _1127;
        float _3007 = cbLight._m0[_2986].y + _1128;
        float _3008 = cbLight._m0[_2986].z + _1129;
        float _3012 = inversesqrt(dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008)));
        float _3013 = _3012 * _3006;
        float _3014 = _3012 * _3007;
        float _3015 = _3012 * _3008;
        float _3016 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2986].xyz));
        float _4964 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        float _3019 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
        float _3020 = dot(vec3(_1048, _1049, _1050), vec3(_3013, _3014, _3015));
        float _4975 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
        float _3023 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
        float _3024 = dot(vec3(cbLight._m0[_2986].xyz), vec3(_3013, _3014, _3015));
        float _4986 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
        float _3028 = _3005 * _3005;
        float _3032 = ((_3023 * _3023) * (_3028 + (-1.0))) + 1.0;
        float _3039 = exp2(log2(1.0 - (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) * 5.0);
        float _3046 = 1.0 - _3005;
        float _3056 = (0.5 / (((_2788 * ((_3019 * _3046) + _3005)) + 9.9999999392252902907785028219223e-09) + (((_2788 * _3046) + _3005) * _3019))) * _3019;
        float _4997 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
        float _3058 = (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_3028 / ((_3032 * _3032) * 3.141590118408203125));
        float _3059 = isnan(1.0) ? _2527 : (isnan(_2527) ? 1.0 : min(_2527, 1.0));
        _2980 = (((((_3039 * _2810) + _1197) * cbLight._m0[_2990].x) * _3058) * _3059) + _2922;
        _2982 = (((((_3039 * _2812) + _1199) * cbLight._m0[_2990].y) * _3058) * _3059) + _2923;
        _2984 = (((((_3039 * _2813) + _1200) * cbLight._m0[_2990].z) * _3058) * _3059) + _2924;
    }
    float _3090;
    float _3092;
    float _3094;
    if (_2697)
    {
        _3090 = _2980;
        _3092 = _2982;
        _3094 = _2984;
    }
    else
    {
        uint _3101 = _2512 + 3u;
        uint _3105 = _2512 + 11u;
        float _3119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3101].w)) * _1051) * 0.949999988079071044921875);
        float _3120 = _3119 * _3119;
        float _3121 = cbLight._m0[_3101].x + _1127;
        float _3122 = cbLight._m0[_3101].y + _1128;
        float _3123 = cbLight._m0[_3101].z + _1129;
        float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
        float _3128 = _3127 * _3121;
        float _3129 = _3127 * _3122;
        float _3130 = _3127 * _3123;
        float _3131 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_3101].xyz));
        float _5013 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
        float _3134 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
        float _3135 = dot(vec3(_1048, _1049, _1050), vec3(_3128, _3129, _3130));
        float _5024 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
        float _3138 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
        float _3139 = dot(vec3(cbLight._m0[_3101].xyz), vec3(_3128, _3129, _3130));
        float _5035 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
        float _3143 = _3120 * _3120;
        float _3147 = ((_3138 * _3138) * (_3143 + (-1.0))) + 1.0;
        float _3154 = exp2(log2(1.0 - (isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0)))) * 5.0);
        float _3161 = 1.0 - _3120;
        float _3171 = (0.5 / (((_2788 * ((_3134 * _3161) + _3120)) + 9.9999999392252902907785028219223e-09) + (((_2788 * _3161) + _3120) * _3134))) * _3134;
        float _5046 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
        float _3173 = (isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3143 / ((_3147 * _3147) * 3.141590118408203125));
        float _3174 = isnan(1.0) ? _2528 : (isnan(_2528) ? 1.0 : min(_2528, 1.0));
        _3090 = (((((_3154 * _2810) + _1197) * cbLight._m0[_3105].x) * _3173) * _3174) + _2980;
        _3092 = (((((_3154 * _2812) + _1199) * cbLight._m0[_3105].y) * _3173) * _3174) + _2982;
        _3094 = (((((_3154 * _2813) + _1200) * cbLight._m0[_3105].z) * _3173) * _3174) + _2984;
    }
    float _3240;
    float _3242;
    float _3244;
    float _3246;
    float _3248;
    float _3250;
    if (_2510.y == 0u)
    {
        uvec4 _3195 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3196 = _3195.x;
        uint _3207 = uint((float(_3195.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1136) / _3196))) + floor(float(uint(cbSceneParam._m0[85u].x * _1135) / _3196)));
        float _3217 = (log2(_2288 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3218 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
        uint _3221 = uint(isnan(14.0) ? _3218 : (isnan(_3218) ? 14.0 : min(_3218, 14.0)));
        uvec4 _3226 = texelFetch(g_lightClusterGridBuffer, int(((_3221 << 2u) + (_3207 << 6u)) >> 2u));
        uint _3227 = _3226.x;
        uint _3228 = _3195.z;
        float _3307;
        float _3309;
        float _3311;
        float _3313;
        float _3315;
        float _3317;
        if (((((1u << ((_3228 >> 4u) & 15u)) + 4294967295u) & _3227) == 0u) || ((_3228 & 240u) == 0u))
        {
            _3307 = 0.0;
            _3309 = 0.0;
            _3311 = 0.0;
            _3313 = 0.0;
            _3315 = 0.0;
            _3317 = 0.0;
        }
        else
        {
            float _3308;
            float _3310;
            float _3312;
            float _3314;
            float _3316;
            float _3318;
            float _3451 = 0.0;
            float _3452 = 0.0;
            float _3453 = 0.0;
            float _3454 = 0.0;
            float _3455 = 0.0;
            float _3456 = 0.0;
            uint _3457 = 0u;
            uint _3466;
            bool _3467;
            for (;;)
            {
                _3466 = texelFetch(g_lightClassification, int((((_3221 << 5u) + (_3207 << 9u)) + (_3457 << 2u)) >> 2u)).x;
                _3467 = _3466 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3467)
                {
                    frontier_phi_66_pred = _3456;
                    frontier_phi_66_pred_1 = _3455;
                    frontier_phi_66_pred_2 = _3454;
                    frontier_phi_66_pred_3 = _3453;
                    frontier_phi_66_pred_4 = _3452;
                    frontier_phi_66_pred_5 = _3451;
                }
                else
                {
                    float _3575;
                    float _3576;
                    float _3577;
                    float _3578;
                    float _3579;
                    float _3580;
                    uint _3581;
                    _3575 = _3451;
                    _3576 = _3452;
                    _3577 = _3453;
                    _3578 = _3454;
                    _3579 = _3455;
                    _3580 = _3456;
                    _3581 = _3466;
                    float _3507;
                    float _3508;
                    float _3509;
                    float _3510;
                    float _3511;
                    float _3512;
                    for (;;)
                    {
                        uint _3585 = uint(findLSB(_3581)) + (_3457 << 5u);
                        uint _3582 = (_3581 + 4294967295u) & _3581;
                        uint _3587 = _3585 * 48u;
                        vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3587)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 3u)).x));
                        uint _3607 = (_3585 * 48u) + 4u;
                        vec4 _3620 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3607)).x, texelFetch(g_PointLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3607 + 3u)).x));
                        uint _3626 = (_3585 * 48u) + 8u;
                        vec3 _3637 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3626)).x, texelFetch(g_PointLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3626 + 2u)).x));
                        float _3641 = _3601.x - _2286;
                        float _3642 = _3601.y - _2287;
                        float _3643 = _3601.z - _2288;
                        float _3644 = dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643));
                        float _3647 = inversesqrt(_3644);
                        float _3648 = _3647 * _3641;
                        float _3649 = _3647 * _3642;
                        float _3650 = _3647 * _3643;
                        float _3651 = dot(vec3(_1154, _1157, _1160), vec3(_3648, _3649, _3650));
                        float _3656 = 1.0 - (_3644 * _3601.w);
                        float _5072 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                        float _3657 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
                        float _3658 = sqrt(_3644) * _3620.w;
                        float _3661 = 1.39999997615814208984375 / (_3658 + 1.39999997615814208984375);
                        float _3662 = _3661 * _3661;
                        float _3665 = ((1.0 - _3662) * _3651) + _3662;
                        float _3668 = _3658 * _3658;
                        float _3672 = ((isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0))) * _3657) / ((_3668 * 0.699999988079071044921875) + 1.0);
                        float _3676 = (-0.0) - _2286;
                        float _3677 = (-0.0) - _2287;
                        float _3678 = (-0.0) - _2288;
                        float _3682 = inversesqrt(dot(vec3(_3676, _3677, _3678), vec3(_3676, _3677, _3678)));
                        float _3683 = _3682 * _3676;
                        float _3684 = _3682 * _3677;
                        float _3685 = _3682 * _3678;
                        float _3692 = exp2(log2(1.0 / ((_3668 * 3.5) + 5.0)) * 0.25);
                        float _3693 = 1.0 - _1229;
                        float _3700 = sqrt(1.0 - ((1.0 - (_3693 * _3693)) * (1.0 - (_3692 * _3692))));
                        float _3701 = _3700 * _3700;
                        float _3702 = _3701 * _3701;
                        float _3703 = _3683 + _3648;
                        float _3704 = _3684 + _3649;
                        float _3705 = _3685 + _3650;
                        float _3709 = inversesqrt(dot(vec3(_3703, _3704, _3705), vec3(_3703, _3704, _3705)));
                        float _3713 = dot(vec3(_1154, _1157, _1160), vec3(_3683, _3684, _3685));
                        float _5088 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                        float _3716 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
                        float _3717 = dot(vec3(_1154, _1157, _1160), vec3(_3709 * _3703, _3709 * _3704, _3709 * _3705));
                        float _5099 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                        float _3720 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                        float _3724 = ((_3720 * _3720) * (_3702 + (-1.0))) + 1.0;
                        float _3725 = _3661 * _3701;
                        float _3726 = _3725 * _3725;
                        float _3729 = ((1.0 - _3726) * _3651) + _3726;
                        float _5110 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                        float _3730 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                        float _3731 = 1.0 - _3701;
                        float _3741 = (0.5 / (((_3730 * ((_3716 * _3731) + _3701)) + 9.9999999392252902907785028219223e-09) + (((_3730 * _3731) + _3701) * _3716))) * _3730;
                        float _5121 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                        float _3752 = (((_3702 * 3.1415927410125732421875) * (isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0)))) / ((_3724 * _3724) * ((_3668 * 2.1991131305694580078125) + 3.141590118408203125))) * _3657;
                        _3510 = (_3672 * _3620.x) + _3578;
                        _3511 = (_3672 * _3620.y) + _3579;
                        _3512 = (_3672 * _3620.z) + _3580;
                        _3507 = (_3752 * _3637.x) + _3575;
                        _3508 = (_3752 * _3637.y) + _3576;
                        _3509 = (_3752 * _3637.z) + _3577;
                        if (_3582 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3575 = _3507;
                            _3576 = _3508;
                            _3577 = _3509;
                            _3578 = _3510;
                            _3579 = _3511;
                            _3580 = _3512;
                            _3581 = _3582;
                        }
                    }
                    frontier_phi_66_pred = _3512;
                    frontier_phi_66_pred_1 = _3511;
                    frontier_phi_66_pred_2 = _3510;
                    frontier_phi_66_pred_3 = _3509;
                    frontier_phi_66_pred_4 = _3508;
                    frontier_phi_66_pred_5 = _3507;
                }
                _3318 = frontier_phi_66_pred;
                _3316 = frontier_phi_66_pred_1;
                _3314 = frontier_phi_66_pred_2;
                _3312 = frontier_phi_66_pred_3;
                _3310 = frontier_phi_66_pred_4;
                _3308 = frontier_phi_66_pred_5;
                uint _3458 = _3457 + 1u;
                if (_3458 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3451 = _3308;
                    _3452 = _3310;
                    _3453 = _3312;
                    _3454 = _3314;
                    _3455 = _3316;
                    _3456 = _3318;
                    _3457 = _3458;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3307 = _3308;
            _3309 = _3310;
            _3311 = _3312;
            _3313 = _3314;
            _3315 = _3316;
            _3317 = _3318;
        }
        uvec4 _3321 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3322 = _3321.z;
        uint _3324 = (_3322 >> 8u) & 15u;
        float _3419;
        float _3421;
        float _3423;
        float _3425;
        float _3427;
        float _3429;
        if (((4294967295u << _3324) & _3227) == 0u)
        {
            _3419 = _3307;
            _3421 = _3309;
            _3423 = _3311;
            _3425 = _3313;
            _3427 = _3315;
            _3429 = _3317;
        }
        else
        {
            float _3444 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
            float _3445 = _3444 * _2286;
            float _3446 = _3444 * _2287;
            float _3447 = _3444 * _2288;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3324 < ((_3322 >> 12u) & 15u))
            {
                float _3420;
                float _3422;
                float _3424;
                float _3426;
                float _3428;
                float _3430;
                float _3558 = _3307;
                float _3559 = _3309;
                float _3560 = _3311;
                float _3561 = _3313;
                float _3562 = _3315;
                float _3563 = _3317;
                uint _3564 = _3324;
                uint _3573;
                bool _3574;
                for (;;)
                {
                    _3573 = texelFetch(g_lightClassification, int((((_3221 << 5u) + (_3207 << 9u)) + (_3564 << 2u)) >> 2u)).x;
                    _3574 = _3573 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3574)
                    {
                        frontier_phi_72_pred = _3563;
                        frontier_phi_72_pred_1 = _3562;
                        frontier_phi_72_pred_2 = _3561;
                        frontier_phi_72_pred_3 = _3560;
                        frontier_phi_72_pred_4 = _3559;
                        frontier_phi_72_pred_5 = _3558;
                    }
                    else
                    {
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _4050;
                        float _4051;
                        float _4052;
                        float _4053;
                        float _4054;
                        float _4055;
                        float _3770 = _3558;
                        float _3771 = _3559;
                        float _3772 = _3560;
                        float _3773 = _3561;
                        float _3774 = _3562;
                        float _3775 = _3563;
                        uint _3776 = _3573;
                        uint _3777;
                        vec4 _3802;
                        float _3803;
                        vec4 _3818;
                        vec3 _3830;
                        vec4 _3845;
                        vec4 _3860;
                        float _3906;
                        bool _3907;
                        for (;;)
                        {
                            uint _3787 = ((_3564 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3776));
                            _3777 = (_3776 + 4294967295u) & _3776;
                            uint _3789 = _3787 * 40u;
                            _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            _3803 = _3802.w;
                            uint _3805 = (_3787 * 40u) + 4u;
                            _3818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 3u)).x));
                            uint _3820 = (_3787 * 40u) + 8u;
                            _3830 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 2u)).x));
                            uint _3832 = (_3787 * 40u) + 16u;
                            _3845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 3u)).x));
                            uint _3847 = (_3787 * 40u) + 20u;
                            _3860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 3u)).x));
                            uint _3862 = (_3787 * 40u) + 24u;
                            vec4 _3875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 3u)).x));
                            uint _3881 = (_3787 * 40u) + 28u;
                            vec4 _3894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 3u)).x));
                            _3906 = fma(_2288, _3894.z, fma(_2287, _3894.y, _3894.x * _2286)) + _3894.w;
                            _3907 = !((fma(_2288, _3875.z, fma(_2287, _3875.y, _3875.x * _2286)) + _3875.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3907)
                            {
                                float _3934 = _3802.x - _2286;
                                float _3935 = _3802.y - _2287;
                                float _3936 = _3802.z - _2288;
                                float _3937 = dot(vec3(_3934, _3935, _3936), vec3(_3934, _3935, _3936));
                                float _3940 = inversesqrt(_3937);
                                float _3941 = _3940 * _3934;
                                float _3942 = _3940 * _3935;
                                float _3943 = _3940 * _3936;
                                float _3947 = 1.0 - (_3937 / (_3803 * _3803));
                                float _5132 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3948 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                                float _3952 = sqrt(_3937) * _3818.w;
                                float _3954 = 1.39999997615814208984375 / (_3952 + 1.39999997615814208984375);
                                float _3955 = _3954 * _3954;
                                float _3958 = ((1.0 - _3955) * dot(vec3(_3941, _3942, _3943), vec3(_1154, _1157, _1160))) + _3955;
                                float _3961 = _3952 * _3952;
                                float _3965 = (fma(_2288, _3845.z, fma(_2287, _3845.y, _3845.x * _2286)) + _3845.w) / _3906;
                                float _3966 = (fma(_2288, _3860.z, fma(_2287, _3860.y, _3860.x * _2286)) + _3860.w) / _3906;
                                float _3970 = 1.0 - dot(vec2(_3965, _3966), vec2(_3965, _3966));
                                float _5148 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3971 = isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0));
                                float _3972 = _3971 * (((isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0))) * _3948) / ((_3961 * 0.699999988079071044921875) + 1.0));
                                float _3984 = exp2(log2(1.0 / ((_3961 * 3.5) + 5.0)) * 0.25);
                                float _3985 = 1.0 - _1229;
                                float _3992 = sqrt(1.0 - ((1.0 - (_3985 * _3985)) * (1.0 - (_3984 * _3984))));
                                float _3993 = _3992 * _3992;
                                float _3994 = _3993 * _3993;
                                float _3995 = _3941 - _3445;
                                float _3996 = _3942 - _3446;
                                float _3997 = _3943 - _3447;
                                float _4001 = inversesqrt(dot(vec3(_3995, _3996, _3997), vec3(_3995, _3996, _3997)));
                                float _4005 = dot(vec3(_1154, _1157, _1160), vec3((-0.0) - _3445, (-0.0) - _3446, (-0.0) - _3447));
                                float _5159 = isnan(0.0) ? _4005 : (isnan(_4005) ? 0.0 : max(_4005, 0.0));
                                float _4008 = isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0));
                                float _4009 = dot(vec3(_1154, _1157, _1160), vec3(_4001 * _3995, _4001 * _3996, _4001 * _3997));
                                float _5170 = isnan(0.0) ? _4009 : (isnan(_4009) ? 0.0 : max(_4009, 0.0));
                                float _4012 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
                                float _4016 = ((_4012 * _4012) * (_3994 + (-1.0))) + 1.0;
                                float _4017 = _3954 * _3993;
                                float _4018 = _4017 * _4017;
                                float _4024 = ((1.0 - _4018) * dot(vec3(_1154, _1157, _1160), vec3(_3941, _3942, _3943))) + _4018;
                                float _5181 = isnan(0.0) ? _4024 : (isnan(_4024) ? 0.0 : max(_4024, 0.0));
                                float _4025 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
                                float _4026 = 1.0 - _3993;
                                float _4036 = (0.5 / (((_4025 * ((_4008 * _4026) + _3993)) + 9.9999999392252902907785028219223e-09) + (((_4025 * _4026) + _3993) * _4008))) * _4025;
                                float _5192 = isnan(0.0) ? _4036 : (isnan(_4036) ? 0.0 : max(_4036, 0.0));
                                float _4046 = (_3971 * _3948) * (((_3994 * 3.1415927410125732421875) * (isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0)))) / ((_4016 * _4016) * ((_3961 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3972 * _3818.y;
                                frontier_phi_78_pred_1 = _3972 * _3818.x;
                                frontier_phi_78_pred_2 = _4046 * _3830.z;
                                frontier_phi_78_pred_3 = _4046 * _3830.y;
                                frontier_phi_78_pred_4 = _4046 * _3830.x;
                                frontier_phi_78_pred_5 = _3972 * _3818.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4054 = frontier_phi_78_pred;
                            _4053 = frontier_phi_78_pred_1;
                            _4052 = frontier_phi_78_pred_2;
                            _4051 = frontier_phi_78_pred_3;
                            _4050 = frontier_phi_78_pred_4;
                            _4055 = frontier_phi_78_pred_5;
                            _3760 = _4053 + _3773;
                            _3761 = _4054 + _3774;
                            _3762 = _4055 + _3775;
                            _3757 = _4050 + _3770;
                            _3758 = _4051 + _3771;
                            _3759 = _4052 + _3772;
                            if (_3777 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3770 = _3757;
                                _3771 = _3758;
                                _3772 = _3759;
                                _3773 = _3760;
                                _3774 = _3761;
                                _3775 = _3762;
                                _3776 = _3777;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3762;
                        frontier_phi_72_pred_1 = _3761;
                        frontier_phi_72_pred_2 = _3760;
                        frontier_phi_72_pred_3 = _3759;
                        frontier_phi_72_pred_4 = _3758;
                        frontier_phi_72_pred_5 = _3757;
                    }
                    _3430 = frontier_phi_72_pred;
                    _3428 = frontier_phi_72_pred_1;
                    _3426 = frontier_phi_72_pred_2;
                    _3424 = frontier_phi_72_pred_3;
                    _3422 = frontier_phi_72_pred_4;
                    _3420 = frontier_phi_72_pred_5;
                    uint _3565 = _3564 + 1u;
                    if (_3565 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3558 = _3420;
                        _3559 = _3422;
                        _3560 = _3424;
                        _3561 = _3426;
                        _3562 = _3428;
                        _3563 = _3430;
                        _3564 = _3565;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3430;
                frontier_phi_60_61_ladder_1 = _3428;
                frontier_phi_60_61_ladder_2 = _3424;
                frontier_phi_60_61_ladder_3 = _3422;
                frontier_phi_60_61_ladder_4 = _3420;
                frontier_phi_60_61_ladder_5 = _3426;
            }
            else
            {
                frontier_phi_60_61_ladder = _3317;
                frontier_phi_60_61_ladder_1 = _3315;
                frontier_phi_60_61_ladder_2 = _3311;
                frontier_phi_60_61_ladder_3 = _3309;
                frontier_phi_60_61_ladder_4 = _3307;
                frontier_phi_60_61_ladder_5 = _3313;
            }
            _3419 = frontier_phi_60_61_ladder_4;
            _3421 = frontier_phi_60_61_ladder_3;
            _3423 = frontier_phi_60_61_ladder_2;
            _3425 = frontier_phi_60_61_ladder_5;
            _3427 = frontier_phi_60_61_ladder_1;
            _3429 = frontier_phi_60_61_ladder;
        }
        float _3434 = isnan(1.0) ? _1213 : (isnan(_1213) ? 1.0 : min(_1213, 1.0));
        _3240 = (_3434 * _3425) + _2752;
        _3242 = (_3434 * _3427) + _2754;
        _3244 = (_3434 * _3429) + _2756;
        _3246 = ((_3419 * _1197) * _3434) + _3090;
        _3248 = ((_3421 * _1199) * _3434) + _3092;
        _3250 = ((_3423 * _1200) * _3434) + _3094;
    }
    else
    {
        _3240 = _2752;
        _3242 = _2754;
        _3244 = _2756;
        _3246 = _3090;
        _3248 = _3092;
        _3250 = _3094;
    }
    float _5208 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _5219 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _5230 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    uint _3270 = _269 + 6u;
    float _3278 = _1135 / cbSceneParam._m0[86u].x;
    float _3279 = _1136 / cbSceneParam._m0[86u].y;
    vec4 _3293 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3278, _3279, (log2((isnan(cbSceneParam._m0[77u].w) ? _1070 : (isnan(_1070) ? cbSceneParam._m0[77u].w : min(_1070, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3295 = _3293.x;
    float _3296 = _3293.y;
    float _3297 = _3293.z;
    float _3298 = _3293.w;
    float _3369;
    float _3371;
    float _3373;
    float _3375;
    if (_1070 > cbSceneParam._m0[78u].w)
    {
        float _3332 = isnan(_1070) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1070 : min(cbSceneParam._m0[80u].w, _1070));
        float _3333 = _3332 / _1070;
        float _3344 = _3333 * _1120;
        float _3345 = _1121 * _3333;
        float _3346 = (-0.0) - _3345;
        float _3347 = _3333 * _1122;
        float _3349 = (cbSceneParam._m0[77u].w * _3346) / _3332;
        float _3350 = _3349 + cbSceneParam._m0[79u].w;
        float _3351 = cbSceneParam._m0[79u].w - _3345;
        float _3357 = sqrt(((_3344 * _3344) + (_3345 * _3345)) + (_3347 * _3347));
        float _3360 = (1.0 - (cbSceneParam._m0[77u].w / _3332)) * _3357;
        float _3365 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3367 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3520;
        if (abs((_3346 - _3349) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3520 = ((((_3350 > 0.0) ? exp2(_3365 * _3350) : (2.0 - exp2(_3367 * _3350))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3360;
        }
        else
        {
            float _3480 = 1.0 / cbSceneParam._m0[80u].x;
            float _3481 = isnan(_3351) ? _3350 : (isnan(_3350) ? _3351 : max(_3350, _3351));
            float _3482 = isnan(_3351) ? _3350 : (isnan(_3350) ? _3351 : min(_3350, _3351));
            float _3491 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : min(_3481, 0.0));
            float _3492 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : min(_3482, 0.0));
            _3520 = ((abs(_3357 / _3346) * cbSceneParam._m0[80u].y) * ((((_3491 - _3492) * 2.0) - ((exp2(_3365 * (isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0)))) - exp2(_3365 * (isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0))))) * _3480)) - ((exp2(_3367 * _3491) - exp2(_3367 * _3492)) * _3480))) + (_3360 * cbSceneParam._m0[80u].z);
        }
        vec4 _3522 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3278, _3279, 1.0), 0.0);
        float _3531 = exp2((_3520 * (-1.44269502162933349609375)) * (1.0 - _3522.w));
        float _3532 = log2(_3531);
        float _3548 = log2(_3298);
        _3369 = (exp2(_3548 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3532 * cbSceneParam._m0[78u].x)) * _3522.x) / cbSceneParam._m0[78u].x)) + _3295;
        _3371 = (exp2(_3548 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3532 * cbSceneParam._m0[78u].y)) * _3522.y) / cbSceneParam._m0[78u].y)) + _3296;
        _3373 = (exp2(_3548 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3532 * cbSceneParam._m0[78u].z)) * _3522.z) / cbSceneParam._m0[78u].z)) + _3297;
        _3375 = _3531 * _3298;
    }
    else
    {
        _3369 = _3295;
        _3371 = _3296;
        _3373 = _3297;
        _3375 = _3298;
    }
    float _3387 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3388 = _3387 == 3.0;
    float _3389 = log2(_3375);
    float _3396 = exp2(_3389 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0))) * (_3240 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1213))) + ((_3246 + ((isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0))) * _2019)) * cbPerFrame._m0[3u].x));
    float _3397 = exp2(_3389 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0))) * (_3242 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1213))) + ((_3248 + ((isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0))) * _2019)) * cbPerFrame._m0[3u].x));
    float _3398 = exp2(_3389 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0))) * (_3244 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1213))) + ((_3250 + ((isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0))) * _2019)) * cbPerFrame._m0[3u].x));
    float _3407 = (_3387 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3407 * (_3388 ? _3396 : (_3396 + (cbSceneParam._m0[72u].w * _3369)));
    SV_Target.y = _3407 * (_3388 ? _3397 : (_3397 + (cbSceneParam._m0[72u].w * _3371)));
    SV_Target.z = _3407 * (_3388 ? _3398 : (_3398 + (cbSceneParam._m0[72u].w * _3373)));
    SV_Target.w = cbInstanceData._m0[_3270].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3270].w;
}


