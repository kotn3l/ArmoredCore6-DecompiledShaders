#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1550;
float _3927;
float _3928;
float _3929;
float _3930;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _258 + 1u;
    uint _268 = _258 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _368.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[23u].w) + _421) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3939 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _446 = (_439 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327;
    float _447 = (_439 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328;
    float _448 = (_439 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _368.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[23u].w) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3950 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _519 = (_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446;
    float _520 = (_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447;
    float _521 = (_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448;
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _278) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _279) + cbTextureTilingScale._m0[24u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _559 = _557.x;
    float _569 = dot(vec4(_559, _557.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _581 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _368.z) * 2.0) - ((((_559 - _569) * cbMtdParam._m0[23u].w) + _569) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3961 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _595 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_582 * ((_540.x * cbMtdParam._m0[14u].x) - _519)) + _519);
    float _598 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_582 * ((_540.y * cbMtdParam._m0[14u].y) - _520)) + _520);
    float _601 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_582 * ((_540.z * cbMtdParam._m0[14u].z) - _521)) + _521);
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _658 = _656.x;
    float _659 = _656.y;
    float _660 = _656.z;
    float _667 = ((_639.x - _658) * _439) + _658;
    float _668 = ((_639.y - _659) * _439) + _659;
    float _669 = ((_639.z - _660) * _439) + _660;
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _692 = ((_681.x - _667) * _512) + _667;
    float _693 = ((_681.y - _668) * _512) + _668;
    float _694 = ((_681.z - _669) * _512) + _669;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _278) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _279) + cbTextureTilingScale._m0[23u].w));
    float _719 = ((_706.z - _694) * _582) + _694;
    float _722 = ((((_706.x - _692) * _582) + _692) * 2.0) + (-1.0);
    float _724 = ((((_706.y - _693) * _582) + _693) * 2.0) + (-1.0);
    float _725 = dot(vec2(_722, _724), vec2(_722, _724));
    float _3972 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _730 = sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))));
    vec4 _744 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _756 = (((_744.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _722;
    float _757 = (((_744.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _724;
    float _760 = fma(_730, _246, fma(_757, _253, _756 * _239));
    float _763 = fma(_730, _247, fma(_757, _254, _756 * _240));
    float _766 = fma(_730, _248, fma(_757, _255, _756 * _241));
    float _770 = inversesqrt(dot(vec3(_760, _763, _766), vec3(_760, _763, _766)));
    vec4 _797 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _799 = _797.x;
    float _800 = 1.0 - _799;
    float _808 = (cbMtdParam._m0[19u].x + dot(vec4(_770 * _760, _770 * _763, _770 * _766, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_799 - _800) * cbMtdParam._m0[24u].z) + _800) * cbMtdParam._m0[21u].z);
    float _3983 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _809 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _816 = (_809 * ((_619.x * cbMtdParam._m0[18u].x) - _595)) + _595;
    float _817 = (_809 * ((_619.y * cbMtdParam._m0[18u].y) - _598)) + _598;
    float _818 = (_809 * ((_619.z * cbMtdParam._m0[18u].z) - _601)) + _601;
    vec4 _844 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _846 = _844.x;
    float _863 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _846) * _439) + _846;
    float _880 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _863) * _512) + _863;
    float _898 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _278) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _279) + cbTextureTilingScale._m0[10u].w)).x - _880) * _582) + _880;
    float _902 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _898) * cbMtdParam._m0[19u].z) + _898;
    float _904 = _902 - (_902 * _809);
    float _908 = (cbMtdParam._m0[19u].w * (_744.z - _719)) + _719;
    vec4 _921 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _928 = (_921.x * 2.0) + (-1.0);
    float _929 = (_921.y * 2.0) + (-1.0);
    float _930 = dot(vec2(_928, _929), vec2(_928, _929));
    float _3994 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _938 = ((_921.z - _908) * _809) + _908;
    float _948 = ((sqrt(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) - _730) * _809) + _730;
    float _951 = (((_928 - _756) * _809) + _756) + (cbMtdParam._m0[21u].x * _756);
    float _952 = (((_929 - _757) * _809) + _757) + (cbMtdParam._m0[21u].x * _757);
    float _956 = cbMtdParam._m0[22u].x + _744.w;
    float _959 = fma(_948, _246, fma(_952, _253, _951 * _239));
    float _962 = fma(_948, _247, fma(_952, _254, _951 * _240));
    float _965 = fma(_948, _248, fma(_952, _255, _951 * _241));
    float _969 = inversesqrt(dot(vec3(_959, _962, _965), vec3(_959, _962, _965)));
    float _970 = _969 * _959;
    float _971 = _969 * _962;
    float _972 = _969 * _965;
    float _4005 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _973 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _4027 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4038 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4049 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4060 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _978 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _992 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1042 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1032);
    float _1043 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1032);
    float _1044 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1032);
    float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
    float _1049 = _1042 * _1048;
    float _1050 = _1043 * _1048;
    float _1051 = _1044 * _1048;
    vec4 _1056 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1058 = _1056.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1230 = sqrt(((_1042 * _1042) + (_1043 * _1043)) + (_1044 * _1044));
        float _1236 = (cbMatDynParam._m0[5u].x * _1230) + cbMatDynParam._m0[5u].y;
        float _4071 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1241 = (cbMatDynParam._m0[5u].z * _1230) + cbMatDynParam._m0[5u].w;
        float _4082 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) - _1237)) + _1237) < ((_1058 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1069 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1070 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1088 = fma(_972, cbSceneParam._m0[5u].z, fma(_971, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _970));
    float _1091 = fma(_972, cbSceneParam._m0[6u].z, fma(_971, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _970));
    float _1094 = fma(_972, cbSceneParam._m0[7u].z, fma(_971, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _970));
    uint _1107 = _258 + 9u;
    uint _1108 = _1107 + uint(cbMatDynParam._m0[0u].w);
    float _1114 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_1108].x;
    float _1115 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_1108].y;
    float _1116 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_1108].z;
    float _4093 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1117 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1118 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1119 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _1120 = 1.0 - _978;
    float _1121 = _1117 * _1120;
    float _1122 = _1118 * _1120;
    float _1123 = _1119 * _1120;
    float _1128 = (_1117 + (-0.039999999105930328369140625)) * _978;
    float _1129 = (_1118 + (-0.039999999105930328369140625)) * _978;
    float _1130 = (_1119 + (-0.039999999105930328369140625)) * _978;
    float _1131 = _1128 + 0.039999999105930328369140625;
    float _1133 = _1129 + 0.039999999105930328369140625;
    float _1134 = _1130 + 0.039999999105930328369140625;
    vec4 _1143 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1069, cbSceneParam._m0[86u].y * _1070));
    float _1147 = ((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * TEXCOORD_5.w) * _1143.x;
    float _1148 = dot(vec3(_970, _971, _972), vec3(_1049, _1050, _1051));
    float _1151 = _1148 * 2.0;
    float _1155 = (_1151 * _970) - _1049;
    float _1156 = (_1151 * _971) - _1050;
    float _1157 = (_1151 * _972) - _1051;
    float _1161 = abs(dot(vec3(_1049, _1050, _1051), vec3(_970, _971, _972)));
    float _4126 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1163 = sqrt(_973);
    float _1176 = exp2((_1163 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1163 * 3.0));
    float _1182 = (1.0 - _1176) * ((_1163 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1183 = _1176 * _1163;
    float _1211 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1215 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1549;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1274 = fma(_1219, cbModelParam._m0[26u].z, fma(_1215, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1211));
        float _1278 = fma(_1219, cbModelParam._m0[27u].z, fma(_1215, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1211));
        float _1282 = fma(_1219, cbModelParam._m0[28u].z, fma(_1215, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1211));
        float _1307 = _1211 + _970;
        float _1308 = _1215 + _971;
        float _1309 = _1219 + _972;
        float _1319 = fma(_1309, cbModelParam._m0[26u].z, fma(_1308, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1307)) - _1274;
        float _1320 = fma(_1309, cbModelParam._m0[27u].z, fma(_1308, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1307)) - _1278;
        float _1321 = fma(_1309, cbModelParam._m0[28u].z, fma(_1308, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1307)) - _1282;
        float _1325 = inversesqrt(dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321)));
        float _1338 = ((_1325 * _1319) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1274 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1325 * _1320) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1278 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1325 * _1321) / cbModelParam._m0[34u].z) + ((((((_1282 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        float _1377 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1343.x + (-0.5));
        float _1379 = _1377 * (_1343.y + (-0.5));
        float _1380 = _1377 * (_1343.z + (-0.5));
        float _1387 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1350.x + (-0.5));
        float _1389 = _1387 * (_1350.y + (-0.5));
        float _1390 = _1387 * (_1350.z + (-0.5));
        float _1397 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1357.x + (-0.5));
        float _1399 = _1397 * (_1357.y + (-0.5));
        float _1400 = _1397 * (_1357.z + (-0.5));
        float _1407 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1364.x + (-0.5));
        float _1409 = _1407 * (_1364.y + (-0.5));
        float _1410 = _1407 * (_1364.z + (-0.5));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = _1378 * 0.5;
        float _1415 = _1388 * 0.5;
        float _1416 = _1398 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1431 = (dot(vec3(_970, _971, _972), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1441 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4174 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1443 + 1.0))) + _1448) * _1411;
        float _1458 = _1379 * 0.5;
        float _1459 = _1389 * 0.5;
        float _1460 = _1399 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_970, _971, _972), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4207 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1485 + 1.0))) + _1490) * _1412;
        float _1500 = _1380 * 0.5;
        float _1501 = _1390 * 0.5;
        float _1502 = _1400 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_970, _971, _972), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4240 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1527 + 1.0))) + _1532) * _1413;
        _1549 = _1380;
        _1551 = _1379;
        _1552 = _1378;
        _1553 = _1390;
        _1554 = _1389;
        _1555 = _1388;
        _1556 = _1400;
        _1557 = _1399;
        _1558 = _1398;
        _1559 = _1413;
        _1560 = _1412;
        _1561 = _1411;
        _1562 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1563 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1564 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
    }
    else
    {
        _1549 = _1550;
        _1551 = _1550;
        _1552 = _1550;
        _1553 = _1550;
        _1554 = _1550;
        _1555 = _1550;
        _1556 = _1550;
        _1557 = _1550;
        _1558 = _1550;
        _1559 = _1550;
        _1560 = _1550;
        _1561 = _1550;
        _1562 = 0.0;
        _1563 = 0.0;
        _1564 = 0.0;
    }
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1590 = fma(_1219, cbModelParam._m0[30u].z, fma(_1215, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1211));
        float _1594 = fma(_1219, cbModelParam._m0[31u].z, fma(_1215, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1211));
        float _1598 = fma(_1219, cbModelParam._m0[32u].z, fma(_1215, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1211));
        float _1621 = _1211 + _970;
        float _1622 = _1215 + _971;
        float _1623 = _1219 + _972;
        float _1633 = fma(_1623, cbModelParam._m0[30u].z, fma(_1622, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1621)) - _1590;
        float _1634 = fma(_1623, cbModelParam._m0[31u].z, fma(_1622, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1621)) - _1594;
        float _1635 = fma(_1623, cbModelParam._m0[32u].z, fma(_1622, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1621)) - _1598;
        float _1639 = inversesqrt(dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635)));
        float _1652 = ((_1639 * _1633) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1590 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1653 = ((_1639 * _1634) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1594 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1654 = ((_1639 * _1635) / cbModelParam._m0[35u].z) + ((((((_1598 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1656 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1663 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1670 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        float _1689 = exp2((_1656.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1656.x + (-0.5));
        float _1691 = _1689 * (_1656.y + (-0.5));
        float _1692 = _1689 * (_1656.z + (-0.5));
        float _1699 = exp2((_1663.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1663.x + (-0.5));
        float _1701 = _1699 * (_1663.y + (-0.5));
        float _1702 = _1699 * (_1663.z + (-0.5));
        float _1709 = exp2((_1670.w + (-0.5)) * 20.0) * 2.0;
        float _1710 = _1709 * (_1670.x + (-0.5));
        float _1711 = _1709 * (_1670.y + (-0.5));
        float _1712 = _1709 * (_1670.z + (-0.5));
        float _1719 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1677.x + (-0.5));
        float _1721 = _1719 * (_1677.y + (-0.5));
        float _1722 = _1719 * (_1677.z + (-0.5));
        float _1723 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1724 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1725 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1726 = _1690 * 0.5;
        float _1727 = _1700 * 0.5;
        float _1728 = _1710 * 0.5;
        float _1729 = dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728));
        float _1734 = (_1729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1729);
        float _1742 = (dot(vec3(_970, _971, _972), vec3(_1734 * _1726, _1734 * _1727, _1734 * _1728)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728)) / (_1723 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1753 = _1752 * 2.0;
        float _1757 = (1.0 - _1752) / (_1752 + 1.0);
        float _4303 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1767 = ((((1.0 - _1758) * (_1753 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1753 + 1.0))) + _1758) * _1723;
        float _1768 = _1691 * 0.5;
        float _1769 = _1701 * 0.5;
        float _1770 = _1711 * 0.5;
        float _1771 = dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770));
        float _1776 = (_1771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1771);
        float _1784 = (dot(vec3(_970, _971, _972), vec3(_1776 * _1768, _1776 * _1769, _1776 * _1770)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770)) / (_1724 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1795 = _1794 * 2.0;
        float _1799 = (1.0 - _1794) / (_1794 + 1.0);
        float _4336 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1809 = ((((1.0 - _1800) * (_1795 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1795 + 1.0))) + _1800) * _1724;
        float _1810 = _1692 * 0.5;
        float _1811 = _1702 * 0.5;
        float _1812 = _1712 * 0.5;
        float _1813 = dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812));
        float _1818 = (_1813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1813);
        float _1826 = (dot(vec3(_970, _971, _972), vec3(_1818 * _1810, _1818 * _1811, _1818 * _1812)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1835 = sqrt(((_1811 * _1811) + (_1810 * _1810)) + (_1812 * _1812)) / (_1725 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1837 = _1836 * 2.0;
        float _1841 = (1.0 - _1836) / (_1836 + 1.0);
        float _4369 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1851 = ((((1.0 - _1842) * (_1837 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1837 + 1.0))) + _1842) * _1725;
        _1859 = _1692;
        _1860 = _1691;
        _1861 = _1690;
        _1862 = _1702;
        _1863 = _1701;
        _1864 = _1700;
        _1865 = _1712;
        _1866 = _1711;
        _1867 = _1710;
        _1868 = _1725;
        _1869 = _1724;
        _1870 = _1723;
        _1871 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)));
        _1872 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)));
        _1873 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)));
    }
    else
    {
        _1859 = _1550;
        _1860 = _1550;
        _1861 = _1550;
        _1862 = _1550;
        _1863 = _1550;
        _1864 = _1550;
        _1865 = _1550;
        _1866 = _1550;
        _1867 = _1550;
        _1868 = _1550;
        _1869 = _1550;
        _1870 = _1550;
        _1871 = 0.0;
        _1872 = 0.0;
        _1873 = 0.0;
    }
    float _1883 = (cbModelParam._m0[1u].x * (_1871 - _1562)) + _1562;
    float _1884 = (cbModelParam._m0[1u].x * (_1872 - _1563)) + _1563;
    float _1885 = (cbModelParam._m0[1u].x * (_1873 - _1564)) + _1564;
    float _1906 = fma(_1885, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1883 * cbSceneParam._m0[89u].x));
    float _1909 = fma(_1885, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1883 * cbSceneParam._m0[90u].x));
    float _1912 = fma(_1885, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1883));
    float _1927 = _1155 * 0.5;
    float _1928 = _1156 * 0.5;
    float _1929 = _1157 * 0.5;
    float _1930 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1861, _1864, _1867, _1870));
    float _1933 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1860, _1863, _1866, _1869));
    float _1936 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1859, _1862, _1865, _1868));
    float _1970;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1943 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1549, _1553, _1556, _1559));
        float _1947 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1551, _1554, _1557, _1560));
        float _1951 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1552, _1555, _1558, _1561));
        float _1958 = dot(vec4(cbModelParam._m0[39u]), vec4(_1927, _1928, _1929, 1.0));
        _1970 = dot(vec3(isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0)), isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1958) ? 0.0 : (isnan(0.0) ? _1958 : max(0.0, _1958))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1970 = 1.0;
    }
    float _1981;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1972 = dot(vec4(cbModelParam._m0[40u]), vec4(_1927, _1928, _1929, 1.0));
        _1981 = dot(vec3(isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1972) ? 0.0 : (isnan(0.0) ? _1972 : max(0.0, _1972))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1981 = 1.0;
    }
    float _1985 = (_1981 * cbModelParam._m0[1u].x) + (_1970 * (1.0 - cbModelParam._m0[1u].x));
    float _1995 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _973);
    float _1996 = isnan(_1995) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1995 : min(cbModelParam._m0[25u].z, _1995));
    float _2076;
    float _2078;
    float _2080;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2043 = fma(_1219, cbModelParam._m0[13u].z, fma(_1215, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1211)) + cbModelParam._m0[13u].w;
        float _2047 = fma(_1219, cbModelParam._m0[14u].z, fma(_1215, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1211)) + cbModelParam._m0[14u].w;
        float _2051 = fma(_1219, cbModelParam._m0[15u].z, fma(_1215, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1211)) + cbModelParam._m0[15u].w;
        float _2054 = fma(_1157, cbModelParam._m0[13u].z, fma(_1156, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1155));
        float _2057 = fma(_1157, cbModelParam._m0[14u].z, fma(_1156, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1155));
        float _2060 = fma(_1157, cbModelParam._m0[15u].z, fma(_1156, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1155));
        float _2088;
        if (_2054 > 0.0)
        {
            _2088 = abs((1.0 - _2043) / _2054);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2043 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2088 = frontier_phi_17_15_ladder;
        }
        float _2290;
        if (_2057 > 0.0)
        {
            _2290 = abs((1.0 - _2047) / _2057);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2047 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2290 = frontier_phi_26_22_ladder;
        }
        float _2544;
        if (_2060 > 0.0)
        {
            _2544 = abs((1.0 - _2051) / _2060);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2051 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2544 = frontier_phi_38_33_ladder;
        }
        float _2546 = isnan(_2290) ? _2088 : (isnan(_2088) ? _2290 : min(_2088, _2290));
        float _2547 = isnan(_2544) ? _2546 : (isnan(_2546) ? _2544 : min(_2546, _2544));
        float _2551 = (_2547 * _2054) + _2043;
        float _2552 = (_2547 * _2057) + _2047;
        float _2553 = (_2547 * _2060) + _2051;
        float _2554 = _2547 * 9.9999997473787516355514526367188e-05;
        float _2556 = (-1.0) - _2554;
        float _2558 = _2554 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2553 > _2558) || ((_2553 < _2556) || ((_2552 > _2558) || ((_2552 < _2556) || ((_2551 < _2556) || (_2551 > _2558))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2681 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2553, cbModelParam._m0[9u].z, fma(_2552, cbModelParam._m0[9u].y, _2551 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2553, cbModelParam._m0[10u].z, fma(_2552, cbModelParam._m0[10u].y, _2551 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2553, cbModelParam._m0[11u].z, fma(_2552, cbModelParam._m0[11u].y, _2551 * cbModelParam._m0[11u].x))), _1996);
            frontier_phi_16_38_ladder = _2681.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2681.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2681.x * cbModelParam._m0[1u].y;
        }
        _2076 = frontier_phi_16_38_ladder_2;
        _2078 = frontier_phi_16_38_ladder_1;
        _2080 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2064 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1155, _1156, _1157), _1996);
        _2076 = _2064.x * cbModelParam._m0[1u].y;
        _2078 = _2064.y * cbModelParam._m0[1u].y;
        _2080 = _2064.z * cbModelParam._m0[1u].y;
    }
    float _2084 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _973);
    float _2085 = isnan(_2084) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2084 : min(cbModelParam._m0[25u].w, _2084));
    float _2174;
    float _2176;
    float _2178;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2138 = fma(_1219, cbModelParam._m0[21u].z, fma(_1215, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1211)) + cbModelParam._m0[21u].w;
        float _2142 = fma(_1219, cbModelParam._m0[22u].z, fma(_1215, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1211)) + cbModelParam._m0[22u].w;
        float _2146 = fma(_1219, cbModelParam._m0[23u].z, fma(_1215, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1211)) + cbModelParam._m0[23u].w;
        float _2149 = fma(_1157, cbModelParam._m0[21u].z, fma(_1156, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1155));
        float _2152 = fma(_1157, cbModelParam._m0[22u].z, fma(_1156, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1155));
        float _2155 = fma(_1157, cbModelParam._m0[23u].z, fma(_1156, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1155));
        float _2295;
        if (_2149 > 0.0)
        {
            _2295 = abs((1.0 - _2138) / _2149);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2149 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2138 + 1.0) / _2149);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2295 = frontier_phi_28_24_ladder;
        }
        float _2571;
        if (_2152 > 0.0)
        {
            _2571 = abs((1.0 - _2142) / _2152);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2152 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2142 + 1.0) / _2152);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2571 = frontier_phi_40_35_ladder;
        }
        float _2784;
        if (_2155 > 0.0)
        {
            _2784 = abs((1.0 - _2146) / _2155);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2146 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2784 = frontier_phi_49_46_ladder;
        }
        float _2786 = isnan(_2571) ? _2295 : (isnan(_2295) ? _2571 : min(_2295, _2571));
        float _2787 = isnan(_2784) ? _2786 : (isnan(_2786) ? _2784 : min(_2786, _2784));
        float _2791 = (_2787 * _2149) + _2138;
        float _2792 = (_2787 * _2152) + _2142;
        float _2793 = (_2787 * _2155) + _2146;
        float _2794 = _2787 * 9.9999997473787516355514526367188e-05;
        float _2795 = (-1.0) - _2794;
        float _2797 = _2794 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2793 > _2797) || ((_2793 < _2795) || ((_2792 > _2797) || ((_2792 < _2795) || ((_2791 < _2795) || (_2791 > _2797))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2793, cbModelParam._m0[17u].z, fma(_2792, cbModelParam._m0[17u].y, _2791 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2793, cbModelParam._m0[18u].z, fma(_2792, cbModelParam._m0[18u].y, _2791 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2793, cbModelParam._m0[19u].z, fma(_2792, cbModelParam._m0[19u].y, _2791 * cbModelParam._m0[19u].x))), _2085);
            frontier_phi_25_49_ladder = _2992.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2992.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2992.x * cbModelParam._m0[1u].z;
        }
        _2174 = frontier_phi_25_49_ladder_2;
        _2176 = frontier_phi_25_49_ladder_1;
        _2178 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2158 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1155, _1156, _1157), _2085);
        _2174 = _2158.x * cbModelParam._m0[1u].z;
        _2176 = _2158.y * cbModelParam._m0[1u].z;
        _2178 = _2158.z * cbModelParam._m0[1u].z;
    }
    float _2191 = (((_1182 * _1131) + _1183) * _1147) * ((cbModelParam._m0[1u].w * (_2174 - _2076)) + _2076);
    float _2193 = (((_1182 * _1133) + _1183) * _1147) * ((cbModelParam._m0[1u].w * (_2176 - _2078)) + _2078);
    float _2195 = (((_1182 * _1134) + _1183) * _1147) * ((cbModelParam._m0[1u].w * (_2178 - _2080)) + _2080);
    float _2198 = fma(_2195, cbSceneParam._m0[89u].z, fma(_2193, cbSceneParam._m0[89u].y, _2191 * cbSceneParam._m0[89u].x));
    float _2201 = fma(_2195, cbSceneParam._m0[90u].z, fma(_2193, cbSceneParam._m0[90u].y, _2191 * cbSceneParam._m0[90u].x));
    float _2204 = fma(_2195, cbSceneParam._m0[91u].z, fma(_2193, cbSceneParam._m0[91u].y, _2191 * cbSceneParam._m0[91u].x));
    uvec4 _2214 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2216 = _2214.x * 14u;
    uint _2217 = _2216 + 13u;
    float _2224 = _1147 + (-1.0);
    float _2229 = (cbLight._m0[_2217].x * _2224) + 1.0;
    float _2230 = (cbLight._m0[_2217].y * _2224) + 1.0;
    float _2231 = (cbLight._m0[_2217].z * _2224) + 1.0;
    float _2232 = (cbLight._m0[_2217].w * _2224) + 1.0;
    uint _2233 = _2216 + 5u;
    float _2239 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2243 = _2216 + 4u;
    float _2249 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
    uint _2253 = _2216 | 1u;
    float _2264 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_970, _971, _972));
    float _2267 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_970, _971, _972));
    float _4505 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _4516 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2272 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * 0.3183098733425140380859375;
    float _2274 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * 0.3183098733425140380859375;
    float _2281 = ((cbLight._m0[_2233].x * _2239) * _2274) + ((cbLight._m0[_2243].x * _2249) * _2272);
    float _2282 = ((_2239 * cbLight._m0[_2233].y) * _2274) + ((_2249 * cbLight._m0[_2243].y) * _2272);
    float _2283 = ((_2239 * cbLight._m0[_2233].z) * _2274) + ((_2249 * cbLight._m0[_2243].z) * _2272);
    uvec4 _2287 = floatBitsToUint(cbLight._m0[_2216 + 12u]);
    bool _2289 = _2287.x == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2289)
    {
        _2300 = _2281;
        _2302 = _2282;
        _2304 = _2283;
    }
    else
    {
        uint _2308 = _2216 + 6u;
        float _2324 = (dot(vec3(cbLight._m0[_2216 + 2u].xyz), vec3(_970, _971, _972)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4527 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2327 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2300 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2281;
        _2302 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2282;
        _2304 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2283;
    }
    bool _2307 = _2287.y == 0u;
    float _2345;
    float _2347;
    float _2349;
    if (_2307)
    {
        _2345 = _2300;
        _2347 = _2302;
        _2349 = _2304;
    }
    else
    {
        uint _2515 = _2216 + 7u;
        float _2531 = (dot(vec3(cbLight._m0[_2216 + 3u].xyz), vec3(_970, _971, _972)) * 0.5) + 0.5;
        float _2532 = _2531 * _2531;
        float _4543 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2533 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2534 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2345 = (((cbLight._m0[_2515].x * 0.3183098733425140380859375) * _2533) * _2534) + _2300;
        _2347 = (((cbLight._m0[_2515].y * 0.3183098733425140380859375) * _2533) * _2534) + _2302;
        _2349 = (((cbLight._m0[_2515].z * 0.3183098733425140380859375) * _2533) * _2534) + _2304;
    }
    uint _2352 = _2216 + 8u;
    float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _973) * 0.949999988079071044921875);
    float _2366 = _2365 * _2365;
    float _2367 = cbLight._m0[_2216].x + _1049;
    float _2368 = cbLight._m0[_2216].y + _1050;
    float _2369 = cbLight._m0[_2216].z + _1051;
    float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
    float _2374 = _2373 * _2367;
    float _2375 = _2373 * _2368;
    float _2376 = _2373 * _2369;
    float _2377 = dot(vec3(_970, _971, _972), vec3(cbLight._m0[_2216].xyz));
    float _4559 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _4570 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _2381 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2382 = dot(vec3(_970, _971, _972), vec3(_2374, _2375, _2376));
    float _4581 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2374, _2375, _2376));
    float _4592 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2366 * _2366;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2402 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
    float _2403 = 0.959999978542327880859375 - _1128;
    float _2405 = 0.959999978542327880859375 - _1129;
    float _2406 = 0.959999978542327880859375 - _1130;
    float _2413 = 1.0 - _2366;
    float _2424 = (0.5 / (((_2381 * ((_2380 * _2413) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2413) + _2366) * _2380))) * _2380;
    float _4603 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2426 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    uint _2437 = _2216 + 9u;
    float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _973) * 0.949999988079071044921875);
    float _2449 = _2448 * _2448;
    float _2450 = cbLight._m0[_2253].x + _1049;
    float _2451 = cbLight._m0[_2253].y + _1050;
    float _2452 = cbLight._m0[_2253].z + _1051;
    float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
    float _2457 = _2456 * _2450;
    float _2458 = _2456 * _2451;
    float _2459 = _2456 * _2452;
    float _2460 = dot(vec3(_970, _971, _972), vec3(cbLight._m0[_2253].xyz));
    float _4614 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2464 = dot(vec3(_970, _971, _972), vec3(_2457, _2458, _2459));
    float _4625 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2468 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2457, _2458, _2459));
    float _4636 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2472 = _2449 * _2449;
    float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
    float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) * 5.0);
    float _2490 = 1.0 - _2449;
    float _2500 = (0.5 / (((_2381 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2490) + _2449) * _2463))) * _2463;
    float _4647 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2502 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
    float _2512 = (((((_2483 * _2403) + _1131) * cbLight._m0[_2437].x) * _2502) * _2239) + (((((_2402 * _2403) + _1131) * cbLight._m0[_2352].x) * _2426) * _2249);
    float _2513 = (((((_2483 * _2405) + _1133) * cbLight._m0[_2437].y) * _2502) * _2239) + (((((_2402 * _2405) + _1133) * cbLight._m0[_2352].y) * _2426) * _2249);
    float _2514 = (((((_2483 * _2406) + _1134) * cbLight._m0[_2437].z) * _2502) * _2239) + (((((_2402 * _2406) + _1134) * cbLight._m0[_2352].z) * _2426) * _2249);
    float _2576;
    float _2578;
    float _2580;
    if (_2289)
    {
        _2576 = _2512;
        _2578 = _2513;
        _2580 = _2514;
    }
    else
    {
        uint _2582 = _2216 + 2u;
        uint _2586 = _2216 + 10u;
        float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2582].w)) * _973) * 0.949999988079071044921875);
        float _2601 = _2600 * _2600;
        float _2602 = cbLight._m0[_2582].x + _1049;
        float _2603 = cbLight._m0[_2582].y + _1050;
        float _2604 = cbLight._m0[_2582].z + _1051;
        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
        float _2609 = _2608 * _2602;
        float _2610 = _2608 * _2603;
        float _2611 = _2608 * _2604;
        float _2612 = dot(vec3(_970, _971, _972), vec3(cbLight._m0[_2582].xyz));
        float _4658 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2616 = dot(vec3(_970, _971, _972), vec3(_2609, _2610, _2611));
        float _4669 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2620 = dot(vec3(cbLight._m0[_2582].xyz), vec3(_2609, _2610, _2611));
        float _4680 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2624 = _2601 * _2601;
        float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
        float _2635 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
        float _2642 = 1.0 - _2601;
        float _2652 = (0.5 / (((_2381 * ((_2615 * _2642) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2642) + _2601) * _2615))) * _2615;
        float _4691 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2654 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
        float _2655 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2576 = (((((_2635 * _2403) + _1131) * cbLight._m0[_2586].x) * _2654) * _2655) + _2512;
        _2578 = (((((_2635 * _2405) + _1133) * cbLight._m0[_2586].y) * _2654) * _2655) + _2513;
        _2580 = (((((_2635 * _2406) + _1134) * cbLight._m0[_2586].z) * _2654) * _2655) + _2514;
    }
    float _2690;
    float _2692;
    float _2694;
    if (_2307)
    {
        _2690 = _2576;
        _2692 = _2578;
        _2694 = _2580;
    }
    else
    {
        uint _2701 = _2216 + 3u;
        uint _2705 = _2216 + 11u;
        float _2719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2701].w)) * _973) * 0.949999988079071044921875);
        float _2720 = _2719 * _2719;
        float _2721 = cbLight._m0[_2701].x + _1049;
        float _2722 = cbLight._m0[_2701].y + _1050;
        float _2723 = cbLight._m0[_2701].z + _1051;
        float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
        float _2728 = _2727 * _2721;
        float _2729 = _2727 * _2722;
        float _2730 = _2727 * _2723;
        float _2731 = dot(vec3(_970, _971, _972), vec3(cbLight._m0[_2701].xyz));
        float _4707 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2735 = dot(vec3(_970, _971, _972), vec3(_2728, _2729, _2730));
        float _4718 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2738 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2739 = dot(vec3(cbLight._m0[_2701].xyz), vec3(_2728, _2729, _2730));
        float _4729 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2743 = _2720 * _2720;
        float _2747 = ((_2738 * _2738) * (_2743 + (-1.0))) + 1.0;
        float _2754 = exp2(log2(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) * 5.0);
        float _2761 = 1.0 - _2720;
        float _2771 = (0.5 / (((_2381 * ((_2734 * _2761) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2761) + _2720) * _2734))) * _2734;
        float _4740 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2773 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2743 / ((_2747 * _2747) * 3.141590118408203125));
        float _2774 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2690 = (((((_2754 * _2403) + _1131) * cbLight._m0[_2705].x) * _2773) * _2774) + _2576;
        _2692 = (((((_2754 * _2405) + _1133) * cbLight._m0[_2705].y) * _2773) * _2774) + _2578;
        _2694 = (((((_2754 * _2406) + _1134) * cbLight._m0[_2705].z) * _2773) * _2774) + _2580;
    }
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    if (_2214.y == 0u)
    {
        float _2849 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2850 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2849;
        float _2851 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2849;
        float _2852 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2849;
        uvec4 _2864 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2865 = _2864.x;
        uint _2876 = uint((float(_2864.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1070) / _2865))) + floor(float(uint(cbSceneParam._m0[85u].x * _1069) / _2865)));
        float _2886 = (log2(_2852 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2887 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        uint _2890 = uint(isnan(14.0) ? _2887 : (isnan(_2887) ? 14.0 : min(_2887, 14.0)));
        uvec4 _2895 = texelFetch(g_lightClusterGridBuffer, int(((_2890 << 2u) + (_2876 << 6u)) >> 2u));
        uint _2896 = _2895.x;
        uint _2897 = _2864.z;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        if (((((1u << ((_2897 >> 4u) & 15u)) + 4294967295u) & _2896) == 0u) || ((_2897 & 240u) == 0u))
        {
            _2997 = 0.0;
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
        }
        else
        {
            float _2998;
            float _3000;
            float _3002;
            float _3004;
            float _3006;
            float _3008;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            uint _3156 = 0u;
            uint _3165;
            bool _3166;
            for (;;)
            {
                _3165 = texelFetch(g_lightClassification, int((((_2890 << 5u) + (_2876 << 9u)) + (_3156 << 2u)) >> 2u)).x;
                _3166 = _3165 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3166)
                {
                    frontier_phi_66_pred = _3150;
                    frontier_phi_66_pred_1 = _3155;
                    frontier_phi_66_pred_2 = _3154;
                    frontier_phi_66_pred_3 = _3153;
                    frontier_phi_66_pred_4 = _3152;
                    frontier_phi_66_pred_5 = _3151;
                }
                else
                {
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    uint _3301;
                    _3295 = _3150;
                    _3296 = _3151;
                    _3297 = _3152;
                    _3298 = _3153;
                    _3299 = _3154;
                    _3300 = _3155;
                    _3301 = _3165;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    for (;;)
                    {
                        uint _3305 = uint(findLSB(_3301)) + (_3156 << 5u);
                        uint _3302 = (_3301 + 4294967295u) & _3301;
                        uint _3307 = _3305 * 48u;
                        vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3307)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 3u)).x));
                        uint _3327 = (_3305 * 48u) + 4u;
                        vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 3u)).x));
                        uint _3346 = (_3305 * 48u) + 8u;
                        vec3 _3357 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3346)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 2u)).x));
                        float _3361 = _3321.x - _2850;
                        float _3362 = _3321.y - _2851;
                        float _3363 = _3321.z - _2852;
                        float _3364 = dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363));
                        float _3367 = inversesqrt(_3364);
                        float _3368 = _3367 * _3361;
                        float _3369 = _3367 * _3362;
                        float _3370 = _3367 * _3363;
                        float _3371 = dot(vec3(_1088, _1091, _1094), vec3(_3368, _3369, _3370));
                        float _3376 = 1.0 - (_3364 * _3321.w);
                        float _4766 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3377 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3378 = sqrt(_3364) * _3340.w;
                        float _3381 = 1.39999997615814208984375 / (_3378 + 1.39999997615814208984375);
                        float _3382 = _3381 * _3381;
                        float _3385 = ((1.0 - _3382) * _3371) + _3382;
                        float _3388 = _3378 * _3378;
                        float _3392 = ((isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))) * _3377) / ((_3388 * 0.699999988079071044921875) + 1.0);
                        float _3396 = (-0.0) - _2850;
                        float _3397 = (-0.0) - _2851;
                        float _3398 = (-0.0) - _2852;
                        float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                        float _3403 = _3402 * _3396;
                        float _3404 = _3402 * _3397;
                        float _3405 = _3402 * _3398;
                        float _3413 = exp2(log2(1.0 / ((_3388 * 3.5) + 5.0)) * 0.25);
                        float _3414 = 1.0 - _1163;
                        float _3421 = sqrt(1.0 - ((1.0 - (_3414 * _3414)) * (1.0 - (_3413 * _3413))));
                        float _3422 = _3421 * _3421;
                        float _3423 = _3422 * _3422;
                        float _3424 = _3403 + _3368;
                        float _3425 = _3404 + _3369;
                        float _3426 = _3405 + _3370;
                        float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                        float _3434 = dot(vec3(_1088, _1091, _1094), vec3(_3403, _3404, _3405));
                        float _4782 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3437 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3438 = dot(vec3(_1088, _1091, _1094), vec3(_3430 * _3424, _3430 * _3425, _3430 * _3426));
                        float _4793 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3441 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3445 = ((_3441 * _3441) * (_3423 + (-1.0))) + 1.0;
                        float _3446 = _3381 * _3422;
                        float _3447 = _3446 * _3446;
                        float _3450 = ((1.0 - _3447) * _3371) + _3447;
                        float _4804 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3451 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                        float _3452 = 1.0 - _3422;
                        float _3462 = (0.5 / (((_3451 * ((_3437 * _3452) + _3422)) + 9.9999999392252902907785028219223e-09) + (((_3451 * _3452) + _3422) * _3437))) * _3451;
                        float _4815 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3473 = (((_3423 * 3.1415927410125732421875) * (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0)))) / ((_3445 * _3445) * ((_3388 * 2.1991131305694580078125) + 3.141590118408203125))) * _3377;
                        _3225 = (_3392 * _3340.x) + _3298;
                        _3226 = (_3392 * _3340.y) + _3299;
                        _3227 = (_3392 * _3340.z) + _3300;
                        _3222 = (_3473 * _3357.x) + _3295;
                        _3223 = (_3473 * _3357.y) + _3296;
                        _3224 = (_3473 * _3357.z) + _3297;
                        if (_3302 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3295 = _3222;
                            _3296 = _3223;
                            _3297 = _3224;
                            _3298 = _3225;
                            _3299 = _3226;
                            _3300 = _3227;
                            _3301 = _3302;
                        }
                    }
                    frontier_phi_66_pred = _3222;
                    frontier_phi_66_pred_1 = _3227;
                    frontier_phi_66_pred_2 = _3226;
                    frontier_phi_66_pred_3 = _3225;
                    frontier_phi_66_pred_4 = _3224;
                    frontier_phi_66_pred_5 = _3223;
                }
                _2998 = frontier_phi_66_pred;
                _3008 = frontier_phi_66_pred_1;
                _3006 = frontier_phi_66_pred_2;
                _3004 = frontier_phi_66_pred_3;
                _3002 = frontier_phi_66_pred_4;
                _3000 = frontier_phi_66_pred_5;
                uint _3157 = _3156 + 1u;
                if (_3157 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3150 = _2998;
                    _3151 = _3000;
                    _3152 = _3002;
                    _3153 = _3004;
                    _3154 = _3006;
                    _3155 = _3008;
                    _3156 = _3157;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2997 = _2998;
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
        }
        uvec4 _3011 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3012 = _3011.z;
        uint _3014 = (_3012 >> 8u) & 15u;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        if (((4294967295u << _3014) & _2896) == 0u)
        {
            _3118 = _2997;
            _3120 = _2999;
            _3122 = _3001;
            _3124 = _3003;
            _3126 = _3005;
            _3128 = _3007;
        }
        else
        {
            float _3143 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
            float _3144 = _3143 * _2850;
            float _3145 = _3143 * _2851;
            float _3146 = _3143 * _2852;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3014 < ((_3012 >> 12u) & 15u))
            {
                float _3119;
                float _3121;
                float _3123;
                float _3125;
                float _3127;
                float _3129;
                float _3278 = _2997;
                float _3279 = _2999;
                float _3280 = _3001;
                float _3281 = _3003;
                float _3282 = _3005;
                float _3283 = _3007;
                uint _3284 = _3014;
                uint _3293;
                bool _3294;
                for (;;)
                {
                    _3293 = texelFetch(g_lightClassification, int((((_2890 << 5u) + (_2876 << 9u)) + (_3284 << 2u)) >> 2u)).x;
                    _3294 = _3293 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3294)
                    {
                        frontier_phi_77_pred = _3283;
                        frontier_phi_77_pred_1 = _3282;
                        frontier_phi_77_pred_2 = _3281;
                        frontier_phi_77_pred_3 = _3280;
                        frontier_phi_77_pred_4 = _3279;
                        frontier_phi_77_pred_5 = _3278;
                    }
                    else
                    {
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3500 = _3278;
                        float _3501 = _3279;
                        float _3502 = _3280;
                        float _3503 = _3281;
                        float _3504 = _3282;
                        float _3505 = _3283;
                        uint _3506 = _3293;
                        uint _3507;
                        vec4 _3532;
                        float _3533;
                        vec4 _3548;
                        vec3 _3560;
                        vec4 _3575;
                        vec4 _3590;
                        float _3636;
                        bool _3637;
                        for (;;)
                        {
                            uint _3517 = ((_3284 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3506));
                            _3507 = (_3506 + 4294967295u) & _3506;
                            uint _3519 = _3517 * 40u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            _3533 = _3532.w;
                            uint _3535 = (_3517 * 40u) + 4u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3550 = (_3517 * 40u) + 8u;
                            _3560 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x));
                            uint _3562 = (_3517 * 40u) + 16u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3577 = (_3517 * 40u) + 20u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3592 = (_3517 * 40u) + 24u;
                            vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3611 = (_3517 * 40u) + 28u;
                            vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            _3636 = fma(_2852, _3624.z, fma(_2851, _3624.y, _3624.x * _2850)) + _3624.w;
                            _3637 = !((fma(_2852, _3605.z, fma(_2851, _3605.y, _3605.x * _2850)) + _3605.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3637)
                            {
                                float _3664 = _3532.x - _2850;
                                float _3665 = _3532.y - _2851;
                                float _3666 = _3532.z - _2852;
                                float _3667 = dot(vec3(_3664, _3665, _3666), vec3(_3664, _3665, _3666));
                                float _3670 = inversesqrt(_3667);
                                float _3671 = _3670 * _3664;
                                float _3672 = _3670 * _3665;
                                float _3673 = _3670 * _3666;
                                float _3677 = 1.0 - (_3667 / (_3533 * _3533));
                                float _4826 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3682 = sqrt(_3667) * _3548.w;
                                float _3684 = 1.39999997615814208984375 / (_3682 + 1.39999997615814208984375);
                                float _3685 = _3684 * _3684;
                                float _3688 = ((1.0 - _3685) * dot(vec3(_3671, _3672, _3673), vec3(_1088, _1091, _1094))) + _3685;
                                float _3691 = _3682 * _3682;
                                float _3695 = (fma(_2852, _3575.z, fma(_2851, _3575.y, _3575.x * _2850)) + _3575.w) / _3636;
                                float _3696 = (fma(_2852, _3590.z, fma(_2851, _3590.y, _3590.x * _2850)) + _3590.w) / _3636;
                                float _3700 = 1.0 - dot(vec2(_3695, _3696), vec2(_3695, _3696));
                                float _4842 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3702 = _3701 * (((isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0))) * _3678) / ((_3691 * 0.699999988079071044921875) + 1.0));
                                float _3714 = exp2(log2(1.0 / ((_3691 * 3.5) + 5.0)) * 0.25);
                                float _3715 = 1.0 - _1163;
                                float _3722 = sqrt(1.0 - ((1.0 - (_3715 * _3715)) * (1.0 - (_3714 * _3714))));
                                float _3723 = _3722 * _3722;
                                float _3724 = _3723 * _3723;
                                float _3725 = _3671 - _3144;
                                float _3726 = _3672 - _3145;
                                float _3727 = _3673 - _3146;
                                float _3731 = inversesqrt(dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727)));
                                float _3735 = dot(vec3(_1088, _1091, _1094), vec3((-0.0) - _3144, (-0.0) - _3145, (-0.0) - _3146));
                                float _4853 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3738 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3739 = dot(vec3(_1088, _1091, _1094), vec3(_3731 * _3725, _3731 * _3726, _3731 * _3727));
                                float _4864 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3742 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3746 = ((_3742 * _3742) * (_3724 + (-1.0))) + 1.0;
                                float _3747 = _3684 * _3723;
                                float _3748 = _3747 * _3747;
                                float _3754 = ((1.0 - _3748) * dot(vec3(_1088, _1091, _1094), vec3(_3671, _3672, _3673))) + _3748;
                                float _4875 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3756 = 1.0 - _3723;
                                float _3766 = (0.5 / (((_3755 * ((_3738 * _3756) + _3723)) + 9.9999999392252902907785028219223e-09) + (((_3755 * _3756) + _3723) * _3738))) * _3755;
                                float _4886 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3776 = (_3701 * _3678) * (((_3724 * 3.1415927410125732421875) * (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0)))) / ((_3746 * _3746) * ((_3691 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3702 * _3548.y;
                                frontier_phi_83_pred_1 = _3702 * _3548.x;
                                frontier_phi_83_pred_2 = _3776 * _3560.z;
                                frontier_phi_83_pred_3 = _3776 * _3560.y;
                                frontier_phi_83_pred_4 = _3776 * _3560.x;
                                frontier_phi_83_pred_5 = _3702 * _3548.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3784 = frontier_phi_83_pred;
                            _3783 = frontier_phi_83_pred_1;
                            _3782 = frontier_phi_83_pred_2;
                            _3781 = frontier_phi_83_pred_3;
                            _3780 = frontier_phi_83_pred_4;
                            _3785 = frontier_phi_83_pred_5;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            _3487 = _3780 + _3500;
                            _3488 = _3781 + _3501;
                            _3489 = _3782 + _3502;
                            if (_3507 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3507;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3492;
                        frontier_phi_77_pred_1 = _3491;
                        frontier_phi_77_pred_2 = _3490;
                        frontier_phi_77_pred_3 = _3489;
                        frontier_phi_77_pred_4 = _3488;
                        frontier_phi_77_pred_5 = _3487;
                    }
                    _3129 = frontier_phi_77_pred;
                    _3127 = frontier_phi_77_pred_1;
                    _3125 = frontier_phi_77_pred_2;
                    _3123 = frontier_phi_77_pred_3;
                    _3121 = frontier_phi_77_pred_4;
                    _3119 = frontier_phi_77_pred_5;
                    uint _3285 = _3284 + 1u;
                    if (_3285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3278 = _3119;
                        _3279 = _3121;
                        _3280 = _3123;
                        _3281 = _3125;
                        _3282 = _3127;
                        _3283 = _3129;
                        _3284 = _3285;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3123;
                frontier_phi_58_59_ladder_1 = _3129;
                frontier_phi_58_59_ladder_2 = _3127;
                frontier_phi_58_59_ladder_3 = _3125;
                frontier_phi_58_59_ladder_4 = _3121;
                frontier_phi_58_59_ladder_5 = _3119;
            }
            else
            {
                frontier_phi_58_59_ladder = _3001;
                frontier_phi_58_59_ladder_1 = _3007;
                frontier_phi_58_59_ladder_2 = _3005;
                frontier_phi_58_59_ladder_3 = _3003;
                frontier_phi_58_59_ladder_4 = _2999;
                frontier_phi_58_59_ladder_5 = _2997;
            }
            _3118 = frontier_phi_58_59_ladder_5;
            _3120 = frontier_phi_58_59_ladder_4;
            _3122 = frontier_phi_58_59_ladder;
            _3124 = frontier_phi_58_59_ladder_3;
            _3126 = frontier_phi_58_59_ladder_2;
            _3128 = frontier_phi_58_59_ladder_1;
        }
        float _3133 = isnan(1.0) ? _1147 : (isnan(_1147) ? 1.0 : min(_1147, 1.0));
        _2909 = (_3133 * _3124) + _2345;
        _2911 = (_3133 * _3126) + _2347;
        _2913 = (_3133 * _3128) + _2349;
        _2915 = ((_3118 * _1131) * _3133) + _2690;
        _2917 = ((_3120 * _1133) * _3133) + _2692;
        _2919 = ((_3122 * _1134) * _3133) + _2694;
    }
    else
    {
        _2909 = _2345;
        _2911 = _2347;
        _2913 = _2349;
        _2915 = _2690;
        _2917 = _2692;
        _2919 = _2694;
    }
    float _4902 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _4913 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _4924 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _2936 = ((isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2909 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1147))) + ((_2915 + ((isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0))) * _1985)) * cbPerFrame._m0[3u].x);
    float _2937 = ((isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2911 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1147))) + ((_2917 + ((isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0))) * _1985)) * cbPerFrame._m0[3u].x);
    float _2938 = ((isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2913 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1147))) + ((_2919 + ((isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0))) * _1985)) * cbPerFrame._m0[3u].x);
    uint _2939 = _258 + 6u;
    float _2947 = _1069 / cbSceneParam._m0[86u].x;
    float _2948 = _1070 / cbSceneParam._m0[86u].y;
    vec4 _2962 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2947, _2948, (log2((isnan(cbSceneParam._m0[77u].w) ? _992 : (isnan(_992) ? cbSceneParam._m0[77u].w : min(_992, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2964 = _2962.x;
    float _2965 = _2962.y;
    float _2966 = _2962.z;
    float _2967 = _2962.w;
    float _3060;
    float _3062;
    float _3064;
    float _3066;
    if (_992 > cbSceneParam._m0[78u].w)
    {
        float _3022 = isnan(_992) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _992 : min(cbSceneParam._m0[80u].w, _992));
        float _3023 = _3022 / _992;
        float _3034 = _3023 * _1042;
        float _3035 = _1043 * _3023;
        float _3036 = (-0.0) - _3035;
        float _3038 = _3023 * _1044;
        float _3040 = (cbSceneParam._m0[77u].w * _3036) / _3022;
        float _3041 = _3040 + cbSceneParam._m0[79u].w;
        float _3042 = cbSceneParam._m0[79u].w - _3035;
        float _3048 = sqrt(((_3034 * _3034) + (_3035 * _3035)) + (_3038 * _3038));
        float _3051 = (1.0 - (cbSceneParam._m0[77u].w / _3022)) * _3048;
        float _3056 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3058 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3235;
        if (abs((_3036 - _3040) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3235 = ((((_3041 > 0.0) ? exp2(_3056 * _3041) : (2.0 - exp2(_3058 * _3041))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3051;
        }
        else
        {
            float _3179 = 1.0 / cbSceneParam._m0[80u].x;
            float _3180 = isnan(_3042) ? _3041 : (isnan(_3041) ? _3042 : max(_3041, _3042));
            float _3181 = isnan(_3042) ? _3041 : (isnan(_3041) ? _3042 : min(_3041, _3042));
            float _3190 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : min(_3180, 0.0));
            float _3191 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : min(_3181, 0.0));
            _3235 = ((abs(_3048 / _3036) * cbSceneParam._m0[80u].y) * ((((_3190 - _3191) * 2.0) - ((exp2(_3056 * (isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0)))) - exp2(_3056 * (isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))))) * _3179)) - ((exp2(_3058 * _3190) - exp2(_3058 * _3191)) * _3179))) + (_3051 * cbSceneParam._m0[80u].z);
        }
        vec4 _3237 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2947, _2948, 1.0), 0.0);
        float _3246 = exp2((_3235 * (-1.44269502162933349609375)) * (1.0 - _3237.w));
        float _3247 = log2(_3246);
        float _3263 = log2(_2967);
        _3060 = (exp2(_3263 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].x)) * _3237.x) / cbSceneParam._m0[78u].x)) + _2964;
        _3062 = (exp2(_3263 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].y)) * _3237.y) / cbSceneParam._m0[78u].y)) + _2965;
        _3064 = (exp2(_3263 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].z)) * _3237.z) / cbSceneParam._m0[78u].z)) + _2966;
        _3066 = _3246 * _2967;
    }
    else
    {
        _3060 = _2964;
        _3062 = _2965;
        _3064 = _2966;
        _3066 = _2967;
    }
    bool _3273;
    vec4 _3076;
    vec4 _3098;
    float _3100;
    float _3104;
    float _3105;
    float _3106;
    float _3107;
    bool _3117;
    for (;;)
    {
        _3076 = cbMatDynParam._m0[0u];
        float _3078 = roundEven(_3076.y);
        bool _3079 = _3078 == 3.0;
        float _3080 = log2(_3066);
        float _3087 = exp2(_3080 * cbSceneParam._m0[78u].x) * _2936;
        float _3088 = exp2(_3080 * cbSceneParam._m0[78u].y) * _2937;
        float _3089 = exp2(_3080 * cbSceneParam._m0[78u].z) * _2938;
        float _3096 = _1058 + (-0.5);
        _3098 = cbMtdParam._m0[1u];
        _3100 = _3098.y * _3096;
        float _3103 = (_3078 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3104 = _3103 * (_3079 ? _3087 : (_3087 + (cbSceneParam._m0[72u].w * _3060)));
        _3105 = _3103 * (_3079 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3062)));
        _3106 = _3103 * (_3079 ? _3089 : (_3089 + (cbSceneParam._m0[72u].w * _3064)));
        _3107 = _3096 * 0.999000012874603271484375;
        _3117 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3117)
        {
            if ((cbInstanceData._m0[_258 + 7u].x + _3107) < 0.5)
            {
                _3273 = true;
                break;
            }
        }
        uint _3214 = _1107 + uint(_3076.w);
        if ((cbInstanceData._m0[_3214].w < 1.0) && ((cbInstanceData._m0[_3214].w + _3107) < 0.5))
        {
            _3273 = true;
            break;
        }
        if ((_3100 + 1.0) < _3098.x)
        {
            _3273 = true;
            break;
        }
        _3273 = false;
        break;
    }
    float _3478;
    if (_3273)
    {
        discard_state = true;
        _3478 = 0.0;
    }
    else
    {
        _3478 = cbInstanceData._m0[_2939].w;
    }
    SV_Target.x = _3104;
    SV_Target.y = _3105;
    SV_Target.z = _3106;
    SV_Target.w = _3478;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2939].w;
    discard_exit();
}


