#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1532;
float _3909;
float _3910;
float _3911;
float _3912;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _260 + 1u;
    uint _270 = _260 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _370.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[23u].w) + _423) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3921 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _448 = (_441 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _449 = (_441 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _450 = (_441 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _370.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[23u].w) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3932 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _561 = _559.x;
    float _571 = dot(vec4(_561, _559.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _583 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _370.z) * 2.0) - ((((_561 - _571) * cbMtdParam._m0[23u].w) + _571) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3943 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _597 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_584 * ((_542.x * cbMtdParam._m0[14u].x) - _521)) + _521);
    float _600 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_584 * ((_542.y * cbMtdParam._m0[14u].y) - _522)) + _522);
    float _603 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_584 * ((_542.z * cbMtdParam._m0[14u].z) - _523)) + _523);
    vec4 _621 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _641 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _660 = _658.x;
    float _661 = _658.y;
    float _662 = _658.z;
    float _669 = ((_641.x - _660) * _441) + _660;
    float _670 = ((_641.y - _661) * _441) + _661;
    float _671 = ((_641.z - _662) * _441) + _662;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _694 = ((_683.x - _669) * _514) + _669;
    float _695 = ((_683.y - _670) * _514) + _670;
    float _696 = ((_683.z - _671) * _514) + _671;
    vec4 _708 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _721 = ((_708.z - _696) * _584) + _696;
    float _724 = ((((_708.x - _694) * _584) + _694) * 2.0) + (-1.0);
    float _726 = ((((_708.y - _695) * _584) + _695) * 2.0) + (-1.0);
    float _727 = dot(vec2(_724, _726), vec2(_724, _726));
    float _3954 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _732 = sqrt(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))));
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _771 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _773 = _771.x;
    float _774 = 1.0 - _773;
    float _789 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_773 - _774) * cbMtdParam._m0[24u].z) + _774) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3965 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _790 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _797 = (_790 * ((_621.x * cbMtdParam._m0[18u].x) - _597)) + _597;
    float _798 = (_790 * ((_621.y * cbMtdParam._m0[18u].y) - _600)) + _600;
    float _799 = (_790 * ((_621.z * cbMtdParam._m0[18u].z) - _603)) + _603;
    vec4 _825 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _827 = _825.x;
    float _844 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _827) * _441) + _827;
    float _861 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _844) * _514) + _844;
    float _879 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _280) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _281) + cbTextureTilingScale._m0[10u].w)).x - _861) * _584) + _861;
    float _883 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _879) * cbMtdParam._m0[19u].z) + _879;
    float _885 = _883 - (_883 * _790);
    float _889 = (cbMtdParam._m0[19u].w * (_746.z - _721)) + _721;
    vec4 _902 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _909 = (_902.x * 2.0) + (-1.0);
    float _910 = (_902.y * 2.0) + (-1.0);
    float _911 = dot(vec2(_909, _910), vec2(_909, _910));
    float _3976 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _919 = (_790 * (_902.z - _889)) + _889;
    float _922 = (((_746.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _724;
    float _923 = (((_746.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _726;
    float _935 = (((_909 - _922) + (cbMtdParam._m0[21u].x * _922)) * _790) + _922;
    float _936 = (((_910 - _923) + (cbMtdParam._m0[21u].x * _923)) * _790) + _923;
    float _937 = (_790 * (sqrt(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) - _732)) + _732;
    float _939 = cbMtdParam._m0[22u].x + _746.w;
    float _942 = fma(_937, _247 * NORMAL.x, fma(_936, _254 * TANGENT.x, (_240 * _232) * _935));
    float _945 = fma(_937, _247 * NORMAL.y, fma(_936, _254 * TANGENT.y, (_240 * _233) * _935));
    float _948 = fma(_937, _247 * NORMAL.z, fma(_936, _254 * TANGENT.z, (_240 * _234) * _935));
    float _952 = inversesqrt(dot(vec3(_942, _945, _948), vec3(_942, _945, _948)));
    float _953 = _952 * _942;
    float _954 = _952 * _945;
    float _955 = _952 * _948;
    float _3987 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _956 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _3998 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4009 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4020 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4031 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4042 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _961 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _975 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1025 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1015);
    float _1026 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1015);
    float _1027 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1015);
    float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
    float _1032 = _1025 * _1031;
    float _1033 = _1026 * _1031;
    float _1034 = _1027 * _1031;
    vec4 _1039 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1041 = _1039.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1213 = sqrt(((_1025 * _1025) + (_1026 * _1026)) + (_1027 * _1027));
        float _1219 = (cbMatDynParam._m0[5u].x * _1213) + cbMatDynParam._m0[5u].y;
        float _4053 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1224 = (cbMatDynParam._m0[5u].z * _1213) + cbMatDynParam._m0[5u].w;
        float _4064 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) - _1220)) + _1220) < ((_1041 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1052 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1053 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1071 = fma(_955, cbSceneParam._m0[5u].z, fma(_954, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _953));
    float _1074 = fma(_955, cbSceneParam._m0[6u].z, fma(_954, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _953));
    float _1077 = fma(_955, cbSceneParam._m0[7u].z, fma(_954, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _953));
    uint _1090 = _260 + 9u;
    uint _1091 = _1090 + uint(cbMatDynParam._m0[0u].w);
    float _1097 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * cbInstanceData._m0[_1091].x;
    float _1098 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * cbInstanceData._m0[_1091].y;
    float _1099 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * cbInstanceData._m0[_1091].z;
    float _4075 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1103 = 1.0 - _961;
    float _1104 = _1100 * _1103;
    float _1105 = _1101 * _1103;
    float _1106 = _1102 * _1103;
    float _1111 = (_1100 + (-0.039999999105930328369140625)) * _961;
    float _1112 = (_1101 + (-0.039999999105930328369140625)) * _961;
    float _1113 = (_1102 + (-0.039999999105930328369140625)) * _961;
    float _1114 = _1111 + 0.039999999105930328369140625;
    float _1116 = _1112 + 0.039999999105930328369140625;
    float _1117 = _1113 + 0.039999999105930328369140625;
    vec4 _1126 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1052, cbSceneParam._m0[86u].y * _1053));
    float _1130 = ((isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * TEXCOORD_5.w) * _1126.x;
    float _1131 = dot(vec3(_953, _954, _955), vec3(_1032, _1033, _1034));
    float _1134 = _1131 * 2.0;
    float _1138 = (_1134 * _953) - _1032;
    float _1139 = (_1134 * _954) - _1033;
    float _1140 = (_1134 * _955) - _1034;
    float _1144 = abs(dot(vec3(_1032, _1033, _1034), vec3(_953, _954, _955)));
    float _4108 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1146 = sqrt(_956);
    float _1159 = exp2((_1146 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1146 * 3.0));
    float _1165 = (1.0 - _1159) * ((_1146 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1166 = _1159 * _1146;
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1531;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1256 = fma(_1202, cbModelParam._m0[26u].z, fma(_1198, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1194));
        float _1260 = fma(_1202, cbModelParam._m0[27u].z, fma(_1198, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1194));
        float _1264 = fma(_1202, cbModelParam._m0[28u].z, fma(_1198, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1194));
        float _1289 = _1194 + _953;
        float _1290 = _1198 + _954;
        float _1291 = _1202 + _955;
        float _1301 = fma(_1291, cbModelParam._m0[26u].z, fma(_1290, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1289)) - _1256;
        float _1302 = fma(_1291, cbModelParam._m0[27u].z, fma(_1290, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1289)) - _1260;
        float _1303 = fma(_1291, cbModelParam._m0[28u].z, fma(_1290, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1289)) - _1264;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1256 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1260 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[34u].z) + ((((((_1264 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1359 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1325.x + (-0.5));
        float _1361 = _1359 * (_1325.y + (-0.5));
        float _1362 = _1359 * (_1325.z + (-0.5));
        float _1369 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1332.x + (-0.5));
        float _1371 = _1369 * (_1332.y + (-0.5));
        float _1372 = _1369 * (_1332.z + (-0.5));
        float _1379 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1339.x + (-0.5));
        float _1381 = _1379 * (_1339.y + (-0.5));
        float _1382 = _1379 * (_1339.z + (-0.5));
        float _1389 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1346.x + (-0.5));
        float _1391 = _1389 * (_1346.y + (-0.5));
        float _1392 = _1389 * (_1346.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1413 = (dot(vec3(_953, _954, _955), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1423 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4156 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1425 + 1.0))) + _1430) * _1393;
        float _1440 = _1361 * 0.5;
        float _1441 = _1371 * 0.5;
        float _1442 = _1381 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_953, _954, _955), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4189 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1467 + 1.0))) + _1472) * _1394;
        float _1482 = _1362 * 0.5;
        float _1483 = _1372 * 0.5;
        float _1484 = _1382 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_953, _954, _955), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4222 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1509 + 1.0))) + _1514) * _1395;
        _1531 = _1362;
        _1533 = _1361;
        _1534 = _1360;
        _1535 = _1372;
        _1536 = _1371;
        _1537 = _1370;
        _1538 = _1382;
        _1539 = _1381;
        _1540 = _1380;
        _1541 = _1395;
        _1542 = _1394;
        _1543 = _1393;
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1532;
        _1533 = _1532;
        _1534 = _1532;
        _1535 = _1532;
        _1536 = _1532;
        _1537 = _1532;
        _1538 = _1532;
        _1539 = _1532;
        _1540 = _1532;
        _1541 = _1532;
        _1542 = _1532;
        _1543 = _1532;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1572 = fma(_1202, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1194));
        float _1576 = fma(_1202, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1194));
        float _1580 = fma(_1202, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1194));
        float _1603 = _1194 + _953;
        float _1604 = _1198 + _954;
        float _1605 = _1202 + _955;
        float _1615 = fma(_1605, cbModelParam._m0[30u].z, fma(_1604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1603)) - _1572;
        float _1616 = fma(_1605, cbModelParam._m0[31u].z, fma(_1604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1603)) - _1576;
        float _1617 = fma(_1605, cbModelParam._m0[32u].z, fma(_1604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1603)) - _1580;
        float _1621 = inversesqrt(dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617)));
        float _1634 = ((_1621 * _1615) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1572 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1635 = ((_1621 * _1616) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1576 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1636 = ((_1621 * _1617) / cbModelParam._m0[35u].z) + ((((((_1580 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        float _1671 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1638.x + (-0.5));
        float _1673 = _1671 * (_1638.y + (-0.5));
        float _1674 = _1671 * (_1638.z + (-0.5));
        float _1681 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1645.x + (-0.5));
        float _1683 = _1681 * (_1645.y + (-0.5));
        float _1684 = _1681 * (_1645.z + (-0.5));
        float _1691 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1652.x + (-0.5));
        float _1693 = _1691 * (_1652.y + (-0.5));
        float _1694 = _1691 * (_1652.z + (-0.5));
        float _1701 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1659.x + (-0.5));
        float _1703 = _1701 * (_1659.y + (-0.5));
        float _1704 = _1701 * (_1659.z + (-0.5));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = _1672 * 0.5;
        float _1709 = _1682 * 0.5;
        float _1710 = _1692 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_953, _954, _955), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4263 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4274 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4285 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_1735 + 1.0))) + _1740) * _1705;
        float _1750 = _1673 * 0.5;
        float _1751 = _1683 * 0.5;
        float _1752 = _1693 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_953, _954, _955), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4318 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1777 + 1.0))) + _1782) * _1706;
        float _1792 = _1674 * 0.5;
        float _1793 = _1684 * 0.5;
        float _1794 = _1694 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_953, _954, _955), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4351 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1819 + 1.0))) + _1824) * _1707;
        _1841 = _1674;
        _1842 = _1673;
        _1843 = _1672;
        _1844 = _1684;
        _1845 = _1683;
        _1846 = _1682;
        _1847 = _1694;
        _1848 = _1693;
        _1849 = _1692;
        _1850 = _1707;
        _1851 = _1706;
        _1852 = _1705;
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
    }
    else
    {
        _1841 = _1532;
        _1842 = _1532;
        _1843 = _1532;
        _1844 = _1532;
        _1845 = _1532;
        _1846 = _1532;
        _1847 = _1532;
        _1848 = _1532;
        _1849 = _1532;
        _1850 = _1532;
        _1851 = _1532;
        _1852 = _1532;
        _1853 = 0.0;
        _1854 = 0.0;
        _1855 = 0.0;
    }
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1544)) + _1544;
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1545)) + _1545;
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1546)) + _1546;
    float _1888 = fma(_1867, cbSceneParam._m0[89u].z, fma(_1866, cbSceneParam._m0[89u].y, _1865 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1867, cbSceneParam._m0[90u].z, fma(_1866, cbSceneParam._m0[90u].y, _1865 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1867, cbSceneParam._m0[91u].z, fma(_1866, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1865));
    float _1909 = _1138 * 0.5;
    float _1910 = _1139 * 0.5;
    float _1911 = _1140 * 0.5;
    float _1912 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1915 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1918 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1952;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1925 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1531, _1535, _1538, _1541));
        float _1929 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1933 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1534, _1537, _1540, _1543));
        float _1940 = dot(vec4(cbModelParam._m0[39u]), vec4(_1909, _1910, _1911, 1.0));
        _1952 = dot(vec3(isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1940) ? 0.0 : (isnan(0.0) ? _1940 : max(0.0, _1940))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1952 = 1.0;
    }
    float _1963;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1954 = dot(vec4(cbModelParam._m0[40u]), vec4(_1909, _1910, _1911, 1.0));
        _1963 = dot(vec3(isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1954) ? 0.0 : (isnan(0.0) ? _1954 : max(0.0, _1954))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1963 = 1.0;
    }
    float _1967 = (_1963 * cbModelParam._m0[1u].x) + (_1952 * (1.0 - cbModelParam._m0[1u].x));
    float _1977 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _956);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1977 : min(cbModelParam._m0[25u].z, _1977));
    float _2058;
    float _2060;
    float _2062;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2025 = fma(_1202, cbModelParam._m0[13u].z, fma(_1198, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1194)) + cbModelParam._m0[13u].w;
        float _2029 = fma(_1202, cbModelParam._m0[14u].z, fma(_1198, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1194)) + cbModelParam._m0[14u].w;
        float _2033 = fma(_1202, cbModelParam._m0[15u].z, fma(_1198, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1194)) + cbModelParam._m0[15u].w;
        float _2036 = fma(_1140, cbModelParam._m0[13u].z, fma(_1139, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138));
        float _2039 = fma(_1140, cbModelParam._m0[14u].z, fma(_1139, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138));
        float _2042 = fma(_1140, cbModelParam._m0[15u].z, fma(_1139, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138));
        float _2070;
        if (_2036 > 0.0)
        {
            _2070 = abs((1.0 - _2025) / _2036);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2025 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2070 = frontier_phi_17_15_ladder;
        }
        float _2272;
        if (_2039 > 0.0)
        {
            _2272 = abs((1.0 - _2029) / _2039);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2029 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2272 = frontier_phi_26_22_ladder;
        }
        float _2526;
        if (_2042 > 0.0)
        {
            _2526 = abs((1.0 - _2033) / _2042);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2033 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2526 = frontier_phi_38_33_ladder;
        }
        float _2528 = isnan(_2272) ? _2070 : (isnan(_2070) ? _2272 : min(_2070, _2272));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _2036) + _2025;
        float _2534 = (_2529 * _2039) + _2029;
        float _2535 = (_2529 * _2042) + _2033;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2538 = (-1.0) - _2536;
        float _2540 = _2536 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2535 > _2540) || ((_2535 < _2538) || ((_2534 > _2540) || ((_2534 < _2538) || ((_2533 < _2538) || (_2533 > _2540))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2535, cbModelParam._m0[9u].z, fma(_2534, cbModelParam._m0[9u].y, _2533 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2535, cbModelParam._m0[10u].z, fma(_2534, cbModelParam._m0[10u].y, _2533 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2535, cbModelParam._m0[11u].z, fma(_2534, cbModelParam._m0[11u].y, _2533 * cbModelParam._m0[11u].x))), _1978);
            frontier_phi_16_38_ladder = _2663.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2663.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2663.x * cbModelParam._m0[1u].y;
        }
        _2058 = frontier_phi_16_38_ladder_2;
        _2060 = frontier_phi_16_38_ladder_1;
        _2062 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2046 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1138, _1139, _1140), _1978);
        _2058 = _2046.x * cbModelParam._m0[1u].y;
        _2060 = _2046.y * cbModelParam._m0[1u].y;
        _2062 = _2046.z * cbModelParam._m0[1u].y;
    }
    float _2066 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _956);
    float _2067 = isnan(_2066) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2066 : min(cbModelParam._m0[25u].w, _2066));
    float _2156;
    float _2158;
    float _2160;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2120 = fma(_1202, cbModelParam._m0[21u].z, fma(_1198, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1194)) + cbModelParam._m0[21u].w;
        float _2124 = fma(_1202, cbModelParam._m0[22u].z, fma(_1198, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1194)) + cbModelParam._m0[22u].w;
        float _2128 = fma(_1202, cbModelParam._m0[23u].z, fma(_1198, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1194)) + cbModelParam._m0[23u].w;
        float _2131 = fma(_1140, cbModelParam._m0[21u].z, fma(_1139, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138));
        float _2134 = fma(_1140, cbModelParam._m0[22u].z, fma(_1139, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138));
        float _2137 = fma(_1140, cbModelParam._m0[23u].z, fma(_1139, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138));
        float _2277;
        if (_2131 > 0.0)
        {
            _2277 = abs((1.0 - _2120) / _2131);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2120 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2277 = frontier_phi_28_24_ladder;
        }
        float _2553;
        if (_2134 > 0.0)
        {
            _2553 = abs((1.0 - _2124) / _2134);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2124 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2553 = frontier_phi_40_35_ladder;
        }
        float _2766;
        if (_2137 > 0.0)
        {
            _2766 = abs((1.0 - _2128) / _2137);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2128 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2766 = frontier_phi_49_46_ladder;
        }
        float _2768 = isnan(_2553) ? _2277 : (isnan(_2277) ? _2553 : min(_2277, _2553));
        float _2769 = isnan(_2766) ? _2768 : (isnan(_2768) ? _2766 : min(_2768, _2766));
        float _2773 = (_2769 * _2131) + _2120;
        float _2774 = (_2769 * _2134) + _2124;
        float _2775 = (_2769 * _2137) + _2128;
        float _2776 = _2769 * 9.9999997473787516355514526367188e-05;
        float _2777 = (-1.0) - _2776;
        float _2779 = _2776 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2775 > _2779) || ((_2775 < _2777) || ((_2774 > _2779) || ((_2774 < _2777) || ((_2773 < _2777) || (_2773 > _2779))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2775, cbModelParam._m0[17u].z, fma(_2774, cbModelParam._m0[17u].y, _2773 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2775, cbModelParam._m0[18u].z, fma(_2774, cbModelParam._m0[18u].y, _2773 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2775, cbModelParam._m0[19u].z, fma(_2774, cbModelParam._m0[19u].y, _2773 * cbModelParam._m0[19u].x))), _2067);
            frontier_phi_25_49_ladder = _2974.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2974.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2974.x * cbModelParam._m0[1u].z;
        }
        _2156 = frontier_phi_25_49_ladder_2;
        _2158 = frontier_phi_25_49_ladder_1;
        _2160 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2140 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1138, _1139, _1140), _2067);
        _2156 = _2140.x * cbModelParam._m0[1u].z;
        _2158 = _2140.y * cbModelParam._m0[1u].z;
        _2160 = _2140.z * cbModelParam._m0[1u].z;
    }
    float _2173 = (((_1165 * _1114) + _1166) * _1130) * ((cbModelParam._m0[1u].w * (_2156 - _2058)) + _2058);
    float _2175 = (((_1165 * _1116) + _1166) * _1130) * ((cbModelParam._m0[1u].w * (_2158 - _2060)) + _2060);
    float _2177 = (((_1165 * _1117) + _1166) * _1130) * ((cbModelParam._m0[1u].w * (_2160 - _2062)) + _2062);
    float _2180 = fma(_2177, cbSceneParam._m0[89u].z, fma(_2175, cbSceneParam._m0[89u].y, _2173 * cbSceneParam._m0[89u].x));
    float _2183 = fma(_2177, cbSceneParam._m0[90u].z, fma(_2175, cbSceneParam._m0[90u].y, _2173 * cbSceneParam._m0[90u].x));
    float _2186 = fma(_2177, cbSceneParam._m0[91u].z, fma(_2175, cbSceneParam._m0[91u].y, _2173 * cbSceneParam._m0[91u].x));
    uvec4 _2196 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _2198 = _2196.x * 14u;
    uint _2199 = _2198 + 13u;
    float _2206 = _1130 + (-1.0);
    float _2211 = (cbLight._m0[_2199].x * _2206) + 1.0;
    float _2212 = (cbLight._m0[_2199].y * _2206) + 1.0;
    float _2213 = (cbLight._m0[_2199].z * _2206) + 1.0;
    float _2214 = (cbLight._m0[_2199].w * _2206) + 1.0;
    uint _2215 = _2198 + 5u;
    float _2221 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
    uint _2225 = _2198 + 4u;
    float _2231 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
    uint _2235 = _2198 | 1u;
    float _2246 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_953, _954, _955));
    float _2249 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_953, _954, _955));
    float _4487 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _4498 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2254 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * 0.3183098733425140380859375;
    float _2256 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * 0.3183098733425140380859375;
    float _2263 = ((cbLight._m0[_2215].x * _2221) * _2256) + ((cbLight._m0[_2225].x * _2231) * _2254);
    float _2264 = ((_2221 * cbLight._m0[_2215].y) * _2256) + ((_2231 * cbLight._m0[_2225].y) * _2254);
    float _2265 = ((_2221 * cbLight._m0[_2215].z) * _2256) + ((_2231 * cbLight._m0[_2225].z) * _2254);
    uvec4 _2269 = floatBitsToUint(cbLight._m0[_2198 + 12u]);
    bool _2271 = _2269.x == 0u;
    float _2282;
    float _2284;
    float _2286;
    if (_2271)
    {
        _2282 = _2263;
        _2284 = _2264;
        _2286 = _2265;
    }
    else
    {
        uint _2290 = _2198 + 6u;
        float _2306 = (dot(vec3(cbLight._m0[_2198 + 2u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2307 = _2306 * _2306;
        float _4509 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2308 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2309 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2282 = (((cbLight._m0[_2290].x * 0.3183098733425140380859375) * _2308) * _2309) + _2263;
        _2284 = (((cbLight._m0[_2290].y * 0.3183098733425140380859375) * _2308) * _2309) + _2264;
        _2286 = (((cbLight._m0[_2290].z * 0.3183098733425140380859375) * _2308) * _2309) + _2265;
    }
    bool _2289 = _2269.y == 0u;
    float _2327;
    float _2329;
    float _2331;
    if (_2289)
    {
        _2327 = _2282;
        _2329 = _2284;
        _2331 = _2286;
    }
    else
    {
        uint _2497 = _2198 + 7u;
        float _2513 = (dot(vec3(cbLight._m0[_2198 + 3u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4525 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2516 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2327 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2282;
        _2329 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2284;
        _2331 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2286;
    }
    uint _2334 = _2198 + 8u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _956) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2198].x + _1032;
    float _2350 = cbLight._m0[_2198].y + _1033;
    float _2351 = cbLight._m0[_2198].z + _1034;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2198].xyz));
    float _4541 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _4552 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _2363 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2364 = dot(vec3(_953, _954, _955), vec3(_2356, _2357, _2358));
    float _4563 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2356, _2357, _2358));
    float _4574 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2348 * _2348;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0);
    float _2385 = 0.959999978542327880859375 - _1111;
    float _2387 = 0.959999978542327880859375 - _1112;
    float _2388 = 0.959999978542327880859375 - _1113;
    float _2395 = 1.0 - _2348;
    float _2406 = (0.5 / (((_2363 * ((_2362 * _2395) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2395) + _2348) * _2362))) * _2362;
    float _4585 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2408 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    uint _2419 = _2198 + 9u;
    float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _956) * 0.949999988079071044921875);
    float _2431 = _2430 * _2430;
    float _2432 = cbLight._m0[_2235].x + _1032;
    float _2433 = cbLight._m0[_2235].y + _1033;
    float _2434 = cbLight._m0[_2235].z + _1034;
    float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
    float _2439 = _2438 * _2432;
    float _2440 = _2438 * _2433;
    float _2441 = _2438 * _2434;
    float _2442 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2235].xyz));
    float _4596 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2446 = dot(vec3(_953, _954, _955), vec3(_2439, _2440, _2441));
    float _4607 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2439, _2440, _2441));
    float _4618 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2431 * _2431;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
    float _2472 = 1.0 - _2431;
    float _2482 = (0.5 / (((_2363 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2472) + _2431) * _2445))) * _2445;
    float _4629 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2484 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    float _2494 = (((((_2465 * _2385) + _1114) * cbLight._m0[_2419].x) * _2484) * _2221) + (((((_2384 * _2385) + _1114) * cbLight._m0[_2334].x) * _2408) * _2231);
    float _2495 = (((((_2465 * _2387) + _1116) * cbLight._m0[_2419].y) * _2484) * _2221) + (((((_2384 * _2387) + _1116) * cbLight._m0[_2334].y) * _2408) * _2231);
    float _2496 = (((((_2465 * _2388) + _1117) * cbLight._m0[_2419].z) * _2484) * _2221) + (((((_2384 * _2388) + _1117) * cbLight._m0[_2334].z) * _2408) * _2231);
    float _2558;
    float _2560;
    float _2562;
    if (_2271)
    {
        _2558 = _2494;
        _2560 = _2495;
        _2562 = _2496;
    }
    else
    {
        uint _2564 = _2198 + 2u;
        uint _2568 = _2198 + 10u;
        float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2564].w)) * _956) * 0.949999988079071044921875);
        float _2583 = _2582 * _2582;
        float _2584 = cbLight._m0[_2564].x + _1032;
        float _2585 = cbLight._m0[_2564].y + _1033;
        float _2586 = cbLight._m0[_2564].z + _1034;
        float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
        float _2591 = _2590 * _2584;
        float _2592 = _2590 * _2585;
        float _2593 = _2590 * _2586;
        float _2594 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2564].xyz));
        float _4640 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2598 = dot(vec3(_953, _954, _955), vec3(_2591, _2592, _2593));
        float _4651 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2602 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_2591, _2592, _2593));
        float _4662 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2606 = _2583 * _2583;
        float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
        float _2617 = exp2(log2(1.0 - (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) * 5.0);
        float _2624 = 1.0 - _2583;
        float _2634 = (0.5 / (((_2363 * ((_2597 * _2624) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2624) + _2583) * _2597))) * _2597;
        float _4673 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2636 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
        float _2637 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2558 = (((((_2617 * _2385) + _1114) * cbLight._m0[_2568].x) * _2636) * _2637) + _2494;
        _2560 = (((((_2617 * _2387) + _1116) * cbLight._m0[_2568].y) * _2636) * _2637) + _2495;
        _2562 = (((((_2617 * _2388) + _1117) * cbLight._m0[_2568].z) * _2636) * _2637) + _2496;
    }
    float _2672;
    float _2674;
    float _2676;
    if (_2289)
    {
        _2672 = _2558;
        _2674 = _2560;
        _2676 = _2562;
    }
    else
    {
        uint _2683 = _2198 + 3u;
        uint _2687 = _2198 + 11u;
        float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2683].w)) * _956) * 0.949999988079071044921875);
        float _2702 = _2701 * _2701;
        float _2703 = cbLight._m0[_2683].x + _1032;
        float _2704 = cbLight._m0[_2683].y + _1033;
        float _2705 = cbLight._m0[_2683].z + _1034;
        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
        float _2710 = _2709 * _2703;
        float _2711 = _2709 * _2704;
        float _2712 = _2709 * _2705;
        float _2713 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2683].xyz));
        float _4689 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2717 = dot(vec3(_953, _954, _955), vec3(_2710, _2711, _2712));
        float _4700 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2721 = dot(vec3(cbLight._m0[_2683].xyz), vec3(_2710, _2711, _2712));
        float _4711 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2725 = _2702 * _2702;
        float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
        float _2736 = exp2(log2(1.0 - (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) * 5.0);
        float _2743 = 1.0 - _2702;
        float _2753 = (0.5 / (((_2363 * ((_2716 * _2743) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2743) + _2702) * _2716))) * _2716;
        float _4722 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2755 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
        float _2756 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2672 = (((((_2736 * _2385) + _1114) * cbLight._m0[_2687].x) * _2755) * _2756) + _2558;
        _2674 = (((((_2736 * _2387) + _1116) * cbLight._m0[_2687].y) * _2755) * _2756) + _2560;
        _2676 = (((((_2736 * _2388) + _1117) * cbLight._m0[_2687].z) * _2755) * _2756) + _2562;
    }
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_2196.y == 0u)
    {
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2831;
        float _2833 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2831;
        float _2834 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2831;
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.x;
        uint _2858 = uint((float(_2846.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1053) / _2847))) + floor(float(uint(cbSceneParam._m0[85u].x * _1052) / _2847)));
        float _2868 = (log2(_2834 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2869 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        uint _2872 = uint(isnan(14.0) ? _2869 : (isnan(_2869) ? 14.0 : min(_2869, 14.0)));
        uvec4 _2877 = texelFetch(g_lightClusterGridBuffer, int(((_2872 << 2u) + (_2858 << 6u)) >> 2u));
        uint _2878 = _2877.x;
        uint _2879 = _2846.z;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        if (((((1u << ((_2879 >> 4u) & 15u)) + 4294967295u) & _2878) == 0u) || ((_2879 & 240u) == 0u))
        {
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
        }
        else
        {
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            uint _3138 = 0u;
            uint _3147;
            bool _3148;
            for (;;)
            {
                _3147 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3138 << 2u)) >> 2u)).x;
                _3148 = _3147 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3148)
                {
                    frontier_phi_66_pred = _3132;
                    frontier_phi_66_pred_1 = _3137;
                    frontier_phi_66_pred_2 = _3136;
                    frontier_phi_66_pred_3 = _3135;
                    frontier_phi_66_pred_4 = _3134;
                    frontier_phi_66_pred_5 = _3133;
                }
                else
                {
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    uint _3283;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3147;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    for (;;)
                    {
                        uint _3287 = uint(findLSB(_3283)) + (_3138 << 5u);
                        uint _3284 = (_3283 + 4294967295u) & _3283;
                        uint _3289 = _3287 * 48u;
                        vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 3u)).x));
                        uint _3309 = (_3287 * 48u) + 4u;
                        vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3309)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 3u)).x));
                        uint _3328 = (_3287 * 48u) + 8u;
                        vec3 _3339 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3328)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 2u)).x));
                        float _3343 = _3303.x - _2832;
                        float _3344 = _3303.y - _2833;
                        float _3345 = _3303.z - _2834;
                        float _3346 = dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345));
                        float _3349 = inversesqrt(_3346);
                        float _3350 = _3349 * _3343;
                        float _3351 = _3349 * _3344;
                        float _3352 = _3349 * _3345;
                        float _3353 = dot(vec3(_1071, _1074, _1077), vec3(_3350, _3351, _3352));
                        float _3358 = 1.0 - (_3346 * _3303.w);
                        float _4748 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3359 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3360 = sqrt(_3346) * _3322.w;
                        float _3363 = 1.39999997615814208984375 / (_3360 + 1.39999997615814208984375);
                        float _3364 = _3363 * _3363;
                        float _3367 = ((1.0 - _3364) * _3353) + _3364;
                        float _3370 = _3360 * _3360;
                        float _3374 = ((isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0))) * _3359) / ((_3370 * 0.699999988079071044921875) + 1.0);
                        float _3378 = (-0.0) - _2832;
                        float _3379 = (-0.0) - _2833;
                        float _3380 = (-0.0) - _2834;
                        float _3384 = inversesqrt(dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380)));
                        float _3385 = _3384 * _3378;
                        float _3386 = _3384 * _3379;
                        float _3387 = _3384 * _3380;
                        float _3395 = exp2(log2(1.0 / ((_3370 * 3.5) + 5.0)) * 0.25);
                        float _3396 = 1.0 - _1146;
                        float _3403 = sqrt(1.0 - ((1.0 - (_3396 * _3396)) * (1.0 - (_3395 * _3395))));
                        float _3404 = _3403 * _3403;
                        float _3405 = _3404 * _3404;
                        float _3406 = _3385 + _3350;
                        float _3407 = _3386 + _3351;
                        float _3408 = _3387 + _3352;
                        float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                        float _3416 = dot(vec3(_1071, _1074, _1077), vec3(_3385, _3386, _3387));
                        float _4764 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3419 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3420 = dot(vec3(_1071, _1074, _1077), vec3(_3412 * _3406, _3412 * _3407, _3412 * _3408));
                        float _4775 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3423 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3427 = ((_3423 * _3423) * (_3405 + (-1.0))) + 1.0;
                        float _3428 = _3363 * _3404;
                        float _3429 = _3428 * _3428;
                        float _3432 = ((1.0 - _3429) * _3353) + _3429;
                        float _4786 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3433 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3434 = 1.0 - _3404;
                        float _3444 = (0.5 / (((_3433 * ((_3419 * _3434) + _3404)) + 9.9999999392252902907785028219223e-09) + (((_3433 * _3434) + _3404) * _3419))) * _3433;
                        float _4797 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3455 = (((_3405 * 3.1415927410125732421875) * (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) / ((_3427 * _3427) * ((_3370 * 2.1991131305694580078125) + 3.141590118408203125))) * _3359;
                        _3207 = (_3374 * _3322.x) + _3280;
                        _3208 = (_3374 * _3322.y) + _3281;
                        _3209 = (_3374 * _3322.z) + _3282;
                        _3204 = (_3455 * _3339.x) + _3277;
                        _3205 = (_3455 * _3339.y) + _3278;
                        _3206 = (_3455 * _3339.z) + _3279;
                        if (_3284 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3284;
                        }
                    }
                    frontier_phi_66_pred = _3204;
                    frontier_phi_66_pred_1 = _3209;
                    frontier_phi_66_pred_2 = _3208;
                    frontier_phi_66_pred_3 = _3207;
                    frontier_phi_66_pred_4 = _3206;
                    frontier_phi_66_pred_5 = _3205;
                }
                _2980 = frontier_phi_66_pred;
                _2990 = frontier_phi_66_pred_1;
                _2988 = frontier_phi_66_pred_2;
                _2986 = frontier_phi_66_pred_3;
                _2984 = frontier_phi_66_pred_4;
                _2982 = frontier_phi_66_pred_5;
                uint _3139 = _3138 + 1u;
                if (_3139 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3132 = _2980;
                    _3133 = _2982;
                    _3134 = _2984;
                    _3135 = _2986;
                    _3136 = _2988;
                    _3137 = _2990;
                    _3138 = _3139;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
        }
        uvec4 _2993 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2994 = _2993.z;
        uint _2996 = (_2994 >> 8u) & 15u;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        if (((4294967295u << _2996) & _2878) == 0u)
        {
            _3100 = _2979;
            _3102 = _2981;
            _3104 = _2983;
            _3106 = _2985;
            _3108 = _2987;
            _3110 = _2989;
        }
        else
        {
            float _3125 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
            float _3126 = _3125 * _2832;
            float _3127 = _3125 * _2833;
            float _3128 = _3125 * _2834;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2996 < ((_2994 >> 12u) & 15u))
            {
                float _3101;
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3260 = _2979;
                float _3261 = _2981;
                float _3262 = _2983;
                float _3263 = _2985;
                float _3264 = _2987;
                float _3265 = _2989;
                uint _3266 = _2996;
                uint _3275;
                bool _3276;
                for (;;)
                {
                    _3275 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3266 << 2u)) >> 2u)).x;
                    _3276 = _3275 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3276)
                    {
                        frontier_phi_77_pred = _3265;
                        frontier_phi_77_pred_1 = _3264;
                        frontier_phi_77_pred_2 = _3263;
                        frontier_phi_77_pred_3 = _3262;
                        frontier_phi_77_pred_4 = _3261;
                        frontier_phi_77_pred_5 = _3260;
                    }
                    else
                    {
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3482 = _3260;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        float _3487 = _3265;
                        uint _3488 = _3275;
                        uint _3489;
                        vec4 _3514;
                        float _3515;
                        vec4 _3530;
                        vec3 _3542;
                        vec4 _3557;
                        vec4 _3572;
                        float _3618;
                        bool _3619;
                        for (;;)
                        {
                            uint _3499 = ((_3266 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3488));
                            _3489 = (_3488 + 4294967295u) & _3488;
                            uint _3501 = _3499 * 40u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            _3515 = _3514.w;
                            uint _3517 = (_3499 * 40u) + 4u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3499 * 40u) + 8u;
                            _3542 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x));
                            uint _3544 = (_3499 * 40u) + 16u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3499 * 40u) + 20u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3574 = (_3499 * 40u) + 24u;
                            vec4 _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3593 = (_3499 * 40u) + 28u;
                            vec4 _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            _3618 = fma(_2834, _3606.z, fma(_2833, _3606.y, _3606.x * _2832)) + _3606.w;
                            _3619 = !((fma(_2834, _3587.z, fma(_2833, _3587.y, _3587.x * _2832)) + _3587.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3619)
                            {
                                float _3646 = _3514.x - _2832;
                                float _3647 = _3514.y - _2833;
                                float _3648 = _3514.z - _2834;
                                float _3649 = dot(vec3(_3646, _3647, _3648), vec3(_3646, _3647, _3648));
                                float _3652 = inversesqrt(_3649);
                                float _3653 = _3652 * _3646;
                                float _3654 = _3652 * _3647;
                                float _3655 = _3652 * _3648;
                                float _3659 = 1.0 - (_3649 / (_3515 * _3515));
                                float _4808 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3664 = sqrt(_3649) * _3530.w;
                                float _3666 = 1.39999997615814208984375 / (_3664 + 1.39999997615814208984375);
                                float _3667 = _3666 * _3666;
                                float _3670 = ((1.0 - _3667) * dot(vec3(_3653, _3654, _3655), vec3(_1071, _1074, _1077))) + _3667;
                                float _3673 = _3664 * _3664;
                                float _3677 = (fma(_2834, _3557.z, fma(_2833, _3557.y, _3557.x * _2832)) + _3557.w) / _3618;
                                float _3678 = (fma(_2834, _3572.z, fma(_2833, _3572.y, _3572.x * _2832)) + _3572.w) / _3618;
                                float _3682 = 1.0 - dot(vec2(_3677, _3678), vec2(_3677, _3678));
                                float _4824 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3684 = _3683 * (((isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0))) * _3660) / ((_3673 * 0.699999988079071044921875) + 1.0));
                                float _3696 = exp2(log2(1.0 / ((_3673 * 3.5) + 5.0)) * 0.25);
                                float _3697 = 1.0 - _1146;
                                float _3704 = sqrt(1.0 - ((1.0 - (_3697 * _3697)) * (1.0 - (_3696 * _3696))));
                                float _3705 = _3704 * _3704;
                                float _3706 = _3705 * _3705;
                                float _3707 = _3653 - _3126;
                                float _3708 = _3654 - _3127;
                                float _3709 = _3655 - _3128;
                                float _3713 = inversesqrt(dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709)));
                                float _3717 = dot(vec3(_1071, _1074, _1077), vec3((-0.0) - _3126, (-0.0) - _3127, (-0.0) - _3128));
                                float _4835 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3721 = dot(vec3(_1071, _1074, _1077), vec3(_3713 * _3707, _3713 * _3708, _3713 * _3709));
                                float _4846 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3728 = ((_3724 * _3724) * (_3706 + (-1.0))) + 1.0;
                                float _3729 = _3666 * _3705;
                                float _3730 = _3729 * _3729;
                                float _3736 = ((1.0 - _3730) * dot(vec3(_1071, _1074, _1077), vec3(_3653, _3654, _3655))) + _3730;
                                float _4857 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3737 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3738 = 1.0 - _3705;
                                float _3748 = (0.5 / (((_3737 * ((_3720 * _3738) + _3705)) + 9.9999999392252902907785028219223e-09) + (((_3737 * _3738) + _3705) * _3720))) * _3737;
                                float _4868 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3758 = (_3683 * _3660) * (((_3706 * 3.1415927410125732421875) * (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0)))) / ((_3728 * _3728) * ((_3673 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3684 * _3530.y;
                                frontier_phi_83_pred_1 = _3684 * _3530.x;
                                frontier_phi_83_pred_2 = _3758 * _3542.z;
                                frontier_phi_83_pred_3 = _3758 * _3542.y;
                                frontier_phi_83_pred_4 = _3758 * _3542.x;
                                frontier_phi_83_pred_5 = _3684 * _3530.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3766 = frontier_phi_83_pred;
                            _3765 = frontier_phi_83_pred_1;
                            _3764 = frontier_phi_83_pred_2;
                            _3763 = frontier_phi_83_pred_3;
                            _3762 = frontier_phi_83_pred_4;
                            _3767 = frontier_phi_83_pred_5;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            if (_3489 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3489;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3474;
                        frontier_phi_77_pred_1 = _3473;
                        frontier_phi_77_pred_2 = _3472;
                        frontier_phi_77_pred_3 = _3471;
                        frontier_phi_77_pred_4 = _3470;
                        frontier_phi_77_pred_5 = _3469;
                    }
                    _3111 = frontier_phi_77_pred;
                    _3109 = frontier_phi_77_pred_1;
                    _3107 = frontier_phi_77_pred_2;
                    _3105 = frontier_phi_77_pred_3;
                    _3103 = frontier_phi_77_pred_4;
                    _3101 = frontier_phi_77_pred_5;
                    uint _3267 = _3266 + 1u;
                    if (_3267 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3260 = _3101;
                        _3261 = _3103;
                        _3262 = _3105;
                        _3263 = _3107;
                        _3264 = _3109;
                        _3265 = _3111;
                        _3266 = _3267;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3105;
                frontier_phi_58_59_ladder_1 = _3111;
                frontier_phi_58_59_ladder_2 = _3109;
                frontier_phi_58_59_ladder_3 = _3107;
                frontier_phi_58_59_ladder_4 = _3103;
                frontier_phi_58_59_ladder_5 = _3101;
            }
            else
            {
                frontier_phi_58_59_ladder = _2983;
                frontier_phi_58_59_ladder_1 = _2989;
                frontier_phi_58_59_ladder_2 = _2987;
                frontier_phi_58_59_ladder_3 = _2985;
                frontier_phi_58_59_ladder_4 = _2981;
                frontier_phi_58_59_ladder_5 = _2979;
            }
            _3100 = frontier_phi_58_59_ladder_5;
            _3102 = frontier_phi_58_59_ladder_4;
            _3104 = frontier_phi_58_59_ladder;
            _3106 = frontier_phi_58_59_ladder_3;
            _3108 = frontier_phi_58_59_ladder_2;
            _3110 = frontier_phi_58_59_ladder_1;
        }
        float _3115 = isnan(1.0) ? _1130 : (isnan(_1130) ? 1.0 : min(_1130, 1.0));
        _2891 = (_3115 * _3106) + _2327;
        _2893 = (_3115 * _3108) + _2329;
        _2895 = (_3115 * _3110) + _2331;
        _2897 = ((_3100 * _1114) * _3115) + _2672;
        _2899 = ((_3102 * _1116) * _3115) + _2674;
        _2901 = ((_3104 * _1117) * _3115) + _2676;
    }
    else
    {
        _2891 = _2327;
        _2893 = _2329;
        _2895 = _2331;
        _2897 = _2672;
        _2899 = _2674;
        _2901 = _2676;
    }
    float _4884 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _4895 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _4906 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _2918 = ((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2891 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1130))) + ((_2897 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    float _2919 = ((isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2893 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1130))) + ((_2899 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    float _2920 = ((isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2895 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1130))) + ((_2901 + ((isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    uint _2921 = _260 + 6u;
    float _2929 = _1052 / cbSceneParam._m0[86u].x;
    float _2930 = _1053 / cbSceneParam._m0[86u].y;
    vec4 _2944 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, (log2((isnan(cbSceneParam._m0[77u].w) ? _975 : (isnan(_975) ? cbSceneParam._m0[77u].w : min(_975, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2946 = _2944.x;
    float _2947 = _2944.y;
    float _2948 = _2944.z;
    float _2949 = _2944.w;
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    if (_975 > cbSceneParam._m0[78u].w)
    {
        float _3004 = isnan(_975) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _975 : min(cbSceneParam._m0[80u].w, _975));
        float _3005 = _3004 / _975;
        float _3016 = _3005 * _1025;
        float _3017 = _1026 * _3005;
        float _3018 = (-0.0) - _3017;
        float _3020 = _3005 * _1027;
        float _3022 = (cbSceneParam._m0[77u].w * _3018) / _3004;
        float _3023 = _3022 + cbSceneParam._m0[79u].w;
        float _3024 = cbSceneParam._m0[79u].w - _3017;
        float _3030 = sqrt(((_3016 * _3016) + (_3017 * _3017)) + (_3020 * _3020));
        float _3033 = (1.0 - (cbSceneParam._m0[77u].w / _3004)) * _3030;
        float _3038 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3040 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3217;
        if (abs((_3018 - _3022) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3217 = ((((_3023 > 0.0) ? exp2(_3038 * _3023) : (2.0 - exp2(_3040 * _3023))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3033;
        }
        else
        {
            float _3161 = 1.0 / cbSceneParam._m0[80u].x;
            float _3162 = isnan(_3024) ? _3023 : (isnan(_3023) ? _3024 : max(_3023, _3024));
            float _3163 = isnan(_3024) ? _3023 : (isnan(_3023) ? _3024 : min(_3023, _3024));
            float _3172 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : min(_3162, 0.0));
            float _3173 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : min(_3163, 0.0));
            _3217 = ((abs(_3030 / _3018) * cbSceneParam._m0[80u].y) * ((((_3172 - _3173) * 2.0) - ((exp2(_3038 * (isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0)))) - exp2(_3038 * (isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))))) * _3161)) - ((exp2(_3040 * _3172) - exp2(_3040 * _3173)) * _3161))) + (_3033 * cbSceneParam._m0[80u].z);
        }
        vec4 _3219 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, 1.0), 0.0);
        float _3228 = exp2((_3217 * (-1.44269502162933349609375)) * (1.0 - _3219.w));
        float _3229 = log2(_3228);
        float _3245 = log2(_2949);
        _3042 = (exp2(_3245 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].x)) * _3219.x) / cbSceneParam._m0[78u].x)) + _2946;
        _3044 = (exp2(_3245 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].y)) * _3219.y) / cbSceneParam._m0[78u].y)) + _2947;
        _3046 = (exp2(_3245 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].z)) * _3219.z) / cbSceneParam._m0[78u].z)) + _2948;
        _3048 = _3228 * _2949;
    }
    else
    {
        _3042 = _2946;
        _3044 = _2947;
        _3046 = _2948;
        _3048 = _2949;
    }
    bool _3255;
    vec4 _3058;
    vec4 _3080;
    float _3082;
    float _3086;
    float _3087;
    float _3088;
    float _3089;
    bool _3099;
    for (;;)
    {
        _3058 = cbMatDynParam._m0[0u];
        float _3060 = roundEven(_3058.y);
        bool _3061 = _3060 == 3.0;
        float _3062 = log2(_3048);
        float _3069 = exp2(_3062 * cbSceneParam._m0[78u].x) * _2918;
        float _3070 = exp2(_3062 * cbSceneParam._m0[78u].y) * _2919;
        float _3071 = exp2(_3062 * cbSceneParam._m0[78u].z) * _2920;
        float _3078 = _1041 + (-0.5);
        _3080 = cbMtdParam._m0[1u];
        _3082 = _3080.y * _3078;
        float _3085 = (_3060 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3086 = _3085 * (_3061 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3042)));
        _3087 = _3085 * (_3061 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3044)));
        _3088 = _3085 * (_3061 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3046)));
        _3089 = _3078 * 0.999000012874603271484375;
        _3099 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3099)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _3089) < 0.5)
            {
                _3255 = true;
                break;
            }
        }
        uint _3196 = _1090 + uint(_3058.w);
        if ((cbInstanceData._m0[_3196].w < 1.0) && ((cbInstanceData._m0[_3196].w + _3089) < 0.5))
        {
            _3255 = true;
            break;
        }
        if ((_3082 + 1.0) < _3080.x)
        {
            _3255 = true;
            break;
        }
        _3255 = false;
        break;
    }
    float _3460;
    if (_3255)
    {
        discard_state = true;
        _3460 = 0.0;
    }
    else
    {
        _3460 = cbInstanceData._m0[_2921].w;
    }
    SV_Target.x = _3086;
    SV_Target.y = _3087;
    SV_Target.z = _3088;
    SV_Target.w = _3460;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2921].w;
    discard_exit();
}


