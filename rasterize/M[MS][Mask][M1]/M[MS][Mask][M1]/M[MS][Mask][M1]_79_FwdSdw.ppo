#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1586;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _255 = _254 * _246;
    float _256 = _254 * _247;
    float _257 = _254 * _248;
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = _261 * NORMAL.x;
    float _263 = _261 * NORMAL.y;
    float _264 = _261 * NORMAL.z;
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = _268 * TANGENT.x;
    float _270 = _268 * TANGENT.y;
    float _271 = _268 * TANGENT.z;
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4194 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4205 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4216 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = _375.x * cbMtdParam._m0[11u].x;
    float _381 = _375.y * cbMtdParam._m0[11u].y;
    float _382 = _375.z * cbMtdParam._m0[11u].z;
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _466 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _483 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _420.x) * 2.0) - ((((_454 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4227 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _491 = (_484 * ((_401.x * cbMtdParam._m0[12u].x) - _380)) + _380;
    float _492 = (_484 * ((_401.y * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _493 = (_484 * ((_401.z * cbMtdParam._m0[12u].z) - _382)) + _382;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _532 = _530.x;
    float _542 = dot(vec4(_532, _530.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _556 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _420.y) * 2.0) - ((((_532 - _542) * cbMtdParam._m0[23u].w) + _542) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4238 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _567 = (_349.x * cbMtdParam._m0[9u].x) * ((_557 * ((_510.x * cbMtdParam._m0[13u].x) - _491)) + _491);
    float _568 = (_349.y * cbMtdParam._m0[9u].y) * ((_557 * ((_510.y * cbMtdParam._m0[13u].y) - _492)) + _492);
    float _569 = (_349.z * cbMtdParam._m0[9u].z) * ((_557 * ((_510.z * cbMtdParam._m0[13u].z) - _493)) + _493);
    float _573 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _567;
    float _576 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _568;
    float _579 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _569;
    float _587 = (((_567 - _573) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) + _573) * 4.55000019073486328125;
    float _589 = (((_568 - _576) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) + _576) * 4.55000019073486328125;
    float _591 = (((_569 - _579) * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) + _579) * 4.55000019073486328125;
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _652 = _650.x;
    float _653 = _650.y;
    float _654 = _650.z;
    float _661 = ((_633.x - _652) * _484) + _652;
    float _662 = ((_633.y - _653) * _484) + _653;
    float _663 = ((_633.z - _654) * _484) + _654;
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _688 = ((_675.z - _663) * _557) + _663;
    float _691 = ((((_675.x - _661) * _557) + _661) * 2.0) + (-1.0);
    float _692 = ((((_675.y - _662) * _557) + _662) * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _4249 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _698 = sqrt(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _728 = (_691 + ((((_608.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_716.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _729 = (_692 + ((((_608.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_716.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _732 = fma(_698, _262, fma(_729, _269, _728 * _255));
    float _735 = fma(_698, _263, fma(_729, _270, _728 * _256));
    float _738 = fma(_698, _264, fma(_729, _271, _728 * _257));
    float _742 = inversesqrt(dot(vec3(_732, _735, _738), vec3(_732, _735, _738)));
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _771 = _769.x;
    float _772 = 1.0 - _771;
    float _781 = (cbMtdParam._m0[19u].x + dot(vec4(_742 * _732, _742 * _735, _742 * _738, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_771 - _772) * cbMtdParam._m0[24u].z) + _772) * cbMtdParam._m0[21u].z);
    float _4260 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _782 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _784 = (-0.0) - cbMtdParam._m0[24u].x;
    float _786 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _786 : (isnan(_786) ? 1.0 : min(_786, 1.0));
    float _794 = _782 - ((_782 * TEXCOORD_8.x) * _787);
    float _795 = _782 - ((_782 * TEXCOORD_8.y) * _787);
    float _796 = _782 - ((_782 * TEXCOORD_8.z) * _787);
    float _803 = (_794 * (cbMtdParam._m0[17u].x - _587)) + _587;
    float _804 = (_795 * (cbMtdParam._m0[17u].y - _589)) + _589;
    float _805 = (_796 * (cbMtdParam._m0[17u].z - _591)) + _591;
    vec4 _817 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _819 = _817.x;
    float _820 = 1.0 - _819;
    float _846 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_819 - _820) * cbMtdParam._m0[24u].w) + _820) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4281 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _847 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _855 = ((((cbMtdParam._m0[10u].x - _803) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _847) + _803;
    float _856 = ((((cbMtdParam._m0[10u].y - _804) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _847) + _804;
    float _857 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _805)) * _847) + _805;
    vec4 _883 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _885 = _883.x;
    float _902 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _885) * _484) + _885;
    float _919 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _902) * _557) + _902;
    float _923 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _919) * cbMtdParam._m0[19u].z) + _919;
    float _925 = _923 - (_923 * _794);
    float _927 = _925 - (_925 * _847);
    float _932 = (((_608.z - _688) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _688;
    float _936 = ((_716.z - _932) * cbMtdParam._m0[19u].w) + _932;
    vec4 _950 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _957 = (_950.x * 2.0) + (-1.0);
    float _958 = (_950.y * 2.0) + (-1.0);
    float _959 = dot(vec2(_957, _958), vec2(_957, _958));
    float _4292 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _967 = ((_950.z - _936) * _794) + _936;
    float _970 = ((cbMtdParam._m0[23u].x - _967) * _847) + _967;
    vec4 _991 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _997 = (_991.x * 2.0) + (-1.0);
    float _998 = (_991.y * 2.0) + (-1.0);
    float _999 = dot(vec2(_997, _998), vec2(_997, _998));
    float _4303 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1014 = ((sqrt(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) - _698) * _796) + _698;
    float _1017 = (((_957 - _728) * _794) + _728) + (cbMtdParam._m0[21u].x * _728);
    float _1018 = (((_958 - _729) * _795) + _729) + (cbMtdParam._m0[21u].x * _729);
    float _1029 = (((_997 - _1017) + (_1017 * cbMtdParam._m0[22u].z)) * _847) + _1017;
    float _1030 = (((_998 - _1018) + (_1018 * cbMtdParam._m0[22u].z)) * _847) + _1018;
    float _1031 = (_847 * (sqrt(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) - _1014)) + _1014;
    float _1033 = cbMtdParam._m0[22u].x + _716.w;
    float _1036 = fma(_1031, _262, fma(_1030, _269, _1029 * _255));
    float _1039 = fma(_1031, _263, fma(_1030, _270, _1029 * _256));
    float _1042 = fma(_1031, _264, fma(_1030, _271, _1029 * _257));
    float _1046 = inversesqrt(dot(vec3(_1036, _1039, _1042), vec3(_1036, _1039, _1042)));
    float _1047 = _1046 * _1036;
    float _1048 = _1046 * _1039;
    float _1049 = _1046 * _1042;
    float _4314 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _1050 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _4336 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4347 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4358 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4369 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _1055 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _1069 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1119 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1109);
    float _1120 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1109);
    float _1121 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1109);
    float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
    float _1126 = _1119 * _1125;
    float _1127 = _1120 * _1125;
    float _1128 = _1121 * _1125;
    float _1134 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1135 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1153 = fma(_1049, cbSceneParam._m0[5u].z, fma(_1048, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1047));
    float _1156 = fma(_1049, cbSceneParam._m0[6u].z, fma(_1048, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1047));
    float _1159 = fma(_1049, cbSceneParam._m0[7u].z, fma(_1048, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1047));
    uint _1173 = (_293 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1179 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * cbInstanceData._m0[_1173].x;
    float _1180 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * cbInstanceData._m0[_1173].y;
    float _1181 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * cbInstanceData._m0[_1173].z;
    float _4380 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1182 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _1183 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _4402 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _1184 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _1185 = 1.0 - _1055;
    float _1186 = _1182 * _1185;
    float _1187 = _1183 * _1185;
    float _1188 = _1184 * _1185;
    float _1193 = (_1182 + (-0.039999999105930328369140625)) * _1055;
    float _1194 = (_1183 + (-0.039999999105930328369140625)) * _1055;
    float _1195 = (_1184 + (-0.039999999105930328369140625)) * _1055;
    float _1196 = _1193 + 0.039999999105930328369140625;
    float _1198 = _1194 + 0.039999999105930328369140625;
    float _1199 = _1195 + 0.039999999105930328369140625;
    vec4 _1208 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1134, cbSceneParam._m0[86u].y * _1135));
    float _1212 = ((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * TEXCOORD_5.w) * _1208.x;
    float _1213 = dot(vec3(_1047, _1048, _1049), vec3(_1126, _1127, _1128));
    float _1216 = _1213 * 2.0;
    float _1220 = (_1216 * _1047) - _1126;
    float _1221 = (_1216 * _1048) - _1127;
    float _1222 = (_1216 * _1049) - _1128;
    float _1226 = abs(dot(vec3(_1126, _1127, _1128), vec3(_1047, _1048, _1049)));
    float _4413 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _1228 = sqrt(_1050);
    float _1241 = exp2((_1228 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1228 * 3.0));
    float _1247 = (1.0 - _1241) * ((_1228 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1248 = _1241 * _1228;
    float _1276 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1280 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1284 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1585;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1310 = fma(_1284, cbModelParam._m0[26u].z, fma(_1280, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1276));
        float _1314 = fma(_1284, cbModelParam._m0[27u].z, fma(_1280, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1276));
        float _1318 = fma(_1284, cbModelParam._m0[28u].z, fma(_1280, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1276));
        float _1343 = _1276 + _1047;
        float _1344 = _1280 + _1048;
        float _1345 = _1284 + _1049;
        float _1355 = fma(_1345, cbModelParam._m0[26u].z, fma(_1344, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1343)) - _1310;
        float _1356 = fma(_1345, cbModelParam._m0[27u].z, fma(_1344, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1343)) - _1314;
        float _1357 = fma(_1345, cbModelParam._m0[28u].z, fma(_1344, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1343)) - _1318;
        float _1361 = inversesqrt(dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357)));
        float _1374 = ((_1361 * _1355) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1310 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1361 * _1356) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1314 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1361 * _1357) / cbModelParam._m0[34u].z) + ((((((_1318 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        float _1413 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1379.x + (-0.5));
        float _1415 = _1413 * (_1379.y + (-0.5));
        float _1416 = _1413 * (_1379.z + (-0.5));
        float _1423 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1386.x + (-0.5));
        float _1425 = _1423 * (_1386.y + (-0.5));
        float _1426 = _1423 * (_1386.z + (-0.5));
        float _1433 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1393.x + (-0.5));
        float _1435 = _1433 * (_1393.y + (-0.5));
        float _1436 = _1433 * (_1393.z + (-0.5));
        float _1443 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1400.x + (-0.5));
        float _1445 = _1443 * (_1400.y + (-0.5));
        float _1446 = _1443 * (_1400.z + (-0.5));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = _1414 * 0.5;
        float _1451 = _1424 * 0.5;
        float _1452 = _1434 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1467 = (dot(vec3(_1047, _1048, _1049), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1477 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4461 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1479 + 1.0))) + _1484) * _1447;
        float _1494 = _1415 * 0.5;
        float _1495 = _1425 * 0.5;
        float _1496 = _1435 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_1047, _1048, _1049), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4472 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4483 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4494 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_1521 + 1.0))) + _1526) * _1448;
        float _1536 = _1416 * 0.5;
        float _1537 = _1426 * 0.5;
        float _1538 = _1436 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_1047, _1048, _1049), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4505 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4516 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4527 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_1563 + 1.0))) + _1568) * _1449;
        _1585 = _1416;
        _1587 = _1415;
        _1588 = _1414;
        _1589 = _1426;
        _1590 = _1425;
        _1591 = _1424;
        _1592 = _1436;
        _1593 = _1435;
        _1594 = _1434;
        _1595 = _1449;
        _1596 = _1448;
        _1597 = _1447;
        _1598 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1599 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1600 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
    }
    else
    {
        _1585 = _1586;
        _1587 = _1586;
        _1588 = _1586;
        _1589 = _1586;
        _1590 = _1586;
        _1591 = _1586;
        _1592 = _1586;
        _1593 = _1586;
        _1594 = _1586;
        _1595 = _1586;
        _1596 = _1586;
        _1597 = _1586;
        _1598 = 0.0;
        _1599 = 0.0;
        _1600 = 0.0;
    }
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1624 = fma(_1284, cbModelParam._m0[30u].z, fma(_1280, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1276));
        float _1628 = fma(_1284, cbModelParam._m0[31u].z, fma(_1280, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1276));
        float _1632 = fma(_1284, cbModelParam._m0[32u].z, fma(_1280, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1276));
        float _1655 = _1276 + _1047;
        float _1656 = _1280 + _1048;
        float _1657 = _1284 + _1049;
        float _1667 = fma(_1657, cbModelParam._m0[30u].z, fma(_1656, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1655)) - _1624;
        float _1668 = fma(_1657, cbModelParam._m0[31u].z, fma(_1656, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1655)) - _1628;
        float _1669 = fma(_1657, cbModelParam._m0[32u].z, fma(_1656, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1655)) - _1632;
        float _1673 = inversesqrt(dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669)));
        float _1686 = ((_1673 * _1667) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1624 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1687 = ((_1673 * _1668) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1628 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1688 = ((_1673 * _1669) / cbModelParam._m0[35u].z) + ((((((_1632 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1690 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1686, _1687, _1688), 0.0);
        vec4 _1697 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1686, _1687, _1688), 0.0);
        vec4 _1704 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1686, _1687, _1688), 0.0);
        vec4 _1711 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1686, _1687, _1688), 0.0);
        float _1723 = exp2((_1690.w + (-0.5)) * 20.0) * 2.0;
        float _1724 = _1723 * (_1690.x + (-0.5));
        float _1725 = _1723 * (_1690.y + (-0.5));
        float _1726 = _1723 * (_1690.z + (-0.5));
        float _1733 = exp2((_1697.w + (-0.5)) * 20.0) * 2.0;
        float _1734 = _1733 * (_1697.x + (-0.5));
        float _1735 = _1733 * (_1697.y + (-0.5));
        float _1736 = _1733 * (_1697.z + (-0.5));
        float _1743 = exp2((_1704.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1704.x + (-0.5));
        float _1745 = _1743 * (_1704.y + (-0.5));
        float _1746 = _1743 * (_1704.z + (-0.5));
        float _1753 = exp2((_1711.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = _1753 * (_1711.x + (-0.5));
        float _1755 = _1753 * (_1711.y + (-0.5));
        float _1756 = _1753 * (_1711.z + (-0.5));
        float _1757 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1758 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1759 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1760 = _1724 * 0.5;
        float _1761 = _1734 * 0.5;
        float _1762 = _1744 * 0.5;
        float _1763 = dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762));
        float _1768 = (_1763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1763);
        float _1776 = (dot(vec3(_1047, _1048, _1049), vec3(_1768 * _1760, _1768 * _1761, _1768 * _1762)) + 1.0) * 0.5;
        float _4568 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762)) / (_1757 + 9.9999997473787516355514526367188e-06);
        float _4579 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1787 = _1786 * 2.0;
        float _1791 = (1.0 - _1786) / (_1786 + 1.0);
        float _4590 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1801 = ((((1.0 - _1792) * (_1787 + 2.0)) * exp2(log2(isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_1787 + 1.0))) + _1792) * _1757;
        float _1802 = _1725 * 0.5;
        float _1803 = _1735 * 0.5;
        float _1804 = _1745 * 0.5;
        float _1805 = dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804));
        float _1810 = (_1805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1805);
        float _1818 = (dot(vec3(_1047, _1048, _1049), vec3(_1810 * _1802, _1810 * _1803, _1810 * _1804)) + 1.0) * 0.5;
        float _4601 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1827 = sqrt(((_1803 * _1803) + (_1802 * _1802)) + (_1804 * _1804)) / (_1758 + 9.9999997473787516355514526367188e-06);
        float _4612 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1829 = _1828 * 2.0;
        float _1833 = (1.0 - _1828) / (_1828 + 1.0);
        float _4623 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _1843 = ((((1.0 - _1834) * (_1829 + 2.0)) * exp2(log2(isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_1829 + 1.0))) + _1834) * _1758;
        float _1844 = _1726 * 0.5;
        float _1845 = _1736 * 0.5;
        float _1846 = _1746 * 0.5;
        float _1847 = dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846));
        float _1852 = (_1847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1847);
        float _1860 = (dot(vec3(_1047, _1048, _1049), vec3(_1852 * _1844, _1852 * _1845, _1852 * _1846)) + 1.0) * 0.5;
        float _4634 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1869 = sqrt(((_1845 * _1845) + (_1844 * _1844)) + (_1846 * _1846)) / (_1759 + 9.9999997473787516355514526367188e-06);
        float _4645 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _1871 = _1870 * 2.0;
        float _1875 = (1.0 - _1870) / (_1870 + 1.0);
        float _4656 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _1885 = ((((1.0 - _1876) * (_1871 + 2.0)) * exp2(log2(isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_1871 + 1.0))) + _1876) * _1759;
        _1893 = _1726;
        _1894 = _1725;
        _1895 = _1724;
        _1896 = _1736;
        _1897 = _1735;
        _1898 = _1734;
        _1899 = _1746;
        _1900 = _1745;
        _1901 = _1744;
        _1902 = _1759;
        _1903 = _1758;
        _1904 = _1757;
        _1905 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)));
        _1906 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)));
        _1907 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)));
    }
    else
    {
        _1893 = _1586;
        _1894 = _1586;
        _1895 = _1586;
        _1896 = _1586;
        _1897 = _1586;
        _1898 = _1586;
        _1899 = _1586;
        _1900 = _1586;
        _1901 = _1586;
        _1902 = _1586;
        _1903 = _1586;
        _1904 = _1586;
        _1905 = 0.0;
        _1906 = 0.0;
        _1907 = 0.0;
    }
    float _1917 = (cbModelParam._m0[1u].x * (_1905 - _1598)) + _1598;
    float _1918 = (cbModelParam._m0[1u].x * (_1906 - _1599)) + _1599;
    float _1919 = (cbModelParam._m0[1u].x * (_1907 - _1600)) + _1600;
    float _1940 = fma(_1919, cbSceneParam._m0[89u].z, fma(_1918, cbSceneParam._m0[89u].y, _1917 * cbSceneParam._m0[89u].x));
    float _1943 = fma(_1919, cbSceneParam._m0[90u].z, fma(_1918, cbSceneParam._m0[90u].y, _1917 * cbSceneParam._m0[90u].x));
    float _1946 = fma(_1919, cbSceneParam._m0[91u].z, fma(_1918, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1917));
    float _1961 = _1220 * 0.5;
    float _1962 = _1221 * 0.5;
    float _1963 = _1222 * 0.5;
    float _1964 = dot(vec4(_1961, _1962, _1963, 1.0), vec4(_1895, _1898, _1901, _1904));
    float _1967 = dot(vec4(_1961, _1962, _1963, 1.0), vec4(_1894, _1897, _1900, _1903));
    float _1970 = dot(vec4(_1961, _1962, _1963, 1.0), vec4(_1893, _1896, _1899, _1902));
    float _2004;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1977 = dot(vec4(_1961, _1962, _1963, 1.0), vec4(_1585, _1589, _1592, _1595));
        float _1981 = dot(vec4(_1961, _1962, _1963, 1.0), vec4(_1587, _1590, _1593, _1596));
        float _1985 = dot(vec4(_1961, _1962, _1963, 1.0), vec4(_1588, _1591, _1594, _1597));
        float _1992 = dot(vec4(cbModelParam._m0[39u]), vec4(_1961, _1962, _1963, 1.0));
        _2004 = dot(vec3(isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)), isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0)), isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1992) ? 0.0 : (isnan(0.0) ? _1992 : max(0.0, _1992))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2004 = 1.0;
    }
    float _2015;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2006 = dot(vec4(cbModelParam._m0[40u]), vec4(_1961, _1962, _1963, 1.0));
        _2015 = dot(vec3(isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0)), isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0)), isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2006) ? 0.0 : (isnan(0.0) ? _2006 : max(0.0, _2006))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2015 = 1.0;
    }
    float _2019 = (_2015 * cbModelParam._m0[1u].x) + (_2004 * (1.0 - cbModelParam._m0[1u].x));
    float _2029 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1050);
    float _2030 = isnan(_2029) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2029 : min(cbModelParam._m0[25u].z, _2029));
    float _2111;
    float _2113;
    float _2115;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2078 = fma(_1284, cbModelParam._m0[13u].z, fma(_1280, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1276)) + cbModelParam._m0[13u].w;
        float _2082 = fma(_1284, cbModelParam._m0[14u].z, fma(_1280, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1276)) + cbModelParam._m0[14u].w;
        float _2086 = fma(_1284, cbModelParam._m0[15u].z, fma(_1280, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1276)) + cbModelParam._m0[15u].w;
        float _2089 = fma(_1222, cbModelParam._m0[13u].z, fma(_1221, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1220));
        float _2092 = fma(_1222, cbModelParam._m0[14u].z, fma(_1221, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1220));
        float _2095 = fma(_1222, cbModelParam._m0[15u].z, fma(_1221, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1220));
        float _2123;
        if (_2089 > 0.0)
        {
            _2123 = abs((1.0 - _2078) / _2089);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2078 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2123 = frontier_phi_14_12_ladder;
        }
        float _2295;
        if (_2092 > 0.0)
        {
            _2295 = abs((1.0 - _2082) / _2092);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2082 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2295 = frontier_phi_23_19_ladder;
        }
        float _2590;
        if (_2095 > 0.0)
        {
            _2590 = abs((1.0 - _2086) / _2095);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2086 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2590 = frontier_phi_35_30_ladder;
        }
        float _2592 = isnan(_2295) ? _2123 : (isnan(_2123) ? _2295 : min(_2123, _2295));
        float _2593 = isnan(_2590) ? _2592 : (isnan(_2592) ? _2590 : min(_2592, _2590));
        float _2597 = (_2593 * _2089) + _2078;
        float _2598 = (_2593 * _2092) + _2082;
        float _2599 = (_2593 * _2095) + _2086;
        float _2600 = _2593 * 9.9999997473787516355514526367188e-05;
        float _2602 = (-1.0) - _2600;
        float _2604 = _2600 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2599 > _2604) || ((_2599 < _2602) || ((_2598 > _2604) || ((_2598 < _2602) || ((_2597 < _2602) || (_2597 > _2604))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2744 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2599, cbModelParam._m0[9u].z, fma(_2598, cbModelParam._m0[9u].y, _2597 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2599, cbModelParam._m0[10u].z, fma(_2598, cbModelParam._m0[10u].y, _2597 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2599, cbModelParam._m0[11u].z, fma(_2598, cbModelParam._m0[11u].y, _2597 * cbModelParam._m0[11u].x))), _2030);
            frontier_phi_13_35_ladder = _2744.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2744.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2744.x * cbModelParam._m0[1u].y;
        }
        _2111 = frontier_phi_13_35_ladder_2;
        _2113 = frontier_phi_13_35_ladder_1;
        _2115 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2099 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1220, _1221, _1222), _2030);
        _2111 = _2099.x * cbModelParam._m0[1u].y;
        _2113 = _2099.y * cbModelParam._m0[1u].y;
        _2115 = _2099.z * cbModelParam._m0[1u].y;
    }
    float _2119 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1050);
    float _2120 = isnan(_2119) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2119 : min(cbModelParam._m0[25u].w, _2119));
    float _2210;
    float _2212;
    float _2214;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2174 = fma(_1284, cbModelParam._m0[21u].z, fma(_1280, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1276)) + cbModelParam._m0[21u].w;
        float _2178 = fma(_1284, cbModelParam._m0[22u].z, fma(_1280, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1276)) + cbModelParam._m0[22u].w;
        float _2182 = fma(_1284, cbModelParam._m0[23u].z, fma(_1280, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1276)) + cbModelParam._m0[23u].w;
        float _2185 = fma(_1222, cbModelParam._m0[21u].z, fma(_1221, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1220));
        float _2188 = fma(_1222, cbModelParam._m0[22u].z, fma(_1221, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1220));
        float _2191 = fma(_1222, cbModelParam._m0[23u].z, fma(_1221, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1220));
        float _2300;
        if (_2185 > 0.0)
        {
            _2300 = abs((1.0 - _2174) / _2185);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2185 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2174 + 1.0) / _2185);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2300 = frontier_phi_25_21_ladder;
        }
        float _2617;
        if (_2188 > 0.0)
        {
            _2617 = abs((1.0 - _2178) / _2188);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2188 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2178 + 1.0) / _2188);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2617 = frontier_phi_37_32_ladder;
        }
        float _2955;
        if (_2191 > 0.0)
        {
            _2955 = abs((1.0 - _2182) / _2191);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2191 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2182 + 1.0) / _2191);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2955 = frontier_phi_47_44_ladder;
        }
        float _2957 = isnan(_2617) ? _2300 : (isnan(_2300) ? _2617 : min(_2300, _2617));
        float _2958 = isnan(_2955) ? _2957 : (isnan(_2957) ? _2955 : min(_2957, _2955));
        float _2962 = (_2958 * _2185) + _2174;
        float _2963 = (_2958 * _2188) + _2178;
        float _2964 = (_2958 * _2191) + _2182;
        float _2965 = _2958 * 9.9999997473787516355514526367188e-05;
        float _2966 = (-1.0) - _2965;
        float _2968 = _2965 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2964 > _2968) || ((_2964 < _2966) || ((_2963 > _2968) || ((_2963 < _2966) || ((_2962 < _2966) || (_2962 > _2968))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3086 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2964, cbModelParam._m0[17u].z, fma(_2963, cbModelParam._m0[17u].y, _2962 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2964, cbModelParam._m0[18u].z, fma(_2963, cbModelParam._m0[18u].y, _2962 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2964, cbModelParam._m0[19u].z, fma(_2963, cbModelParam._m0[19u].y, _2962 * cbModelParam._m0[19u].x))), _2120);
            frontier_phi_22_47_ladder = _3086.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3086.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3086.x * cbModelParam._m0[1u].z;
        }
        _2210 = frontier_phi_22_47_ladder_2;
        _2212 = frontier_phi_22_47_ladder_1;
        _2214 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2194 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1220, _1221, _1222), _2120);
        _2210 = _2194.x * cbModelParam._m0[1u].z;
        _2212 = _2194.y * cbModelParam._m0[1u].z;
        _2214 = _2194.z * cbModelParam._m0[1u].z;
    }
    float _2227 = (((_1247 * _1196) + _1248) * _1212) * ((cbModelParam._m0[1u].w * (_2210 - _2111)) + _2111);
    float _2229 = (((_1247 * _1198) + _1248) * _1212) * ((cbModelParam._m0[1u].w * (_2212 - _2113)) + _2113);
    float _2231 = (((_1247 * _1199) + _1248) * _1212) * ((cbModelParam._m0[1u].w * (_2214 - _2115)) + _2115);
    float _2234 = fma(_2231, cbSceneParam._m0[89u].z, fma(_2229, cbSceneParam._m0[89u].y, _2227 * cbSceneParam._m0[89u].x));
    float _2237 = fma(_2231, cbSceneParam._m0[90u].z, fma(_2229, cbSceneParam._m0[90u].y, _2227 * cbSceneParam._m0[90u].x));
    float _2240 = fma(_2231, cbSceneParam._m0[91u].z, fma(_2229, cbSceneParam._m0[91u].y, _2227 * cbSceneParam._m0[91u].x));
    float _2274 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2278 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2282 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2286 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2287 = _2274 / _2286;
    float _2288 = _2278 / _2286;
    float _2289 = _2282 / _2286;
    float _2436;
    float _2437;
    float _2438;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2316 = ((uint(_2289 > cbSceneParam._m0[59u].y) + uint(_2289 > cbSceneParam._m0[59u].x)) + uint(_2289 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2317 = _2316 + 43u;
        uint _2325 = _2316 + 44u;
        uint _2333 = _2316 + 45u;
        uint _2341 = _2316 + 46u;
        float _2352 = fma(_2286, cbSceneParam._m0[_2317].w, fma(_2282, cbSceneParam._m0[_2317].z, fma(_2278, cbSceneParam._m0[_2317].y, _2274 * cbSceneParam._m0[_2317].x)));
        float _2356 = fma(_2286, cbSceneParam._m0[_2325].w, fma(_2282, cbSceneParam._m0[_2325].z, fma(_2278, cbSceneParam._m0[_2325].y, _2274 * cbSceneParam._m0[_2325].x)));
        float _2364 = fma(_2286, cbSceneParam._m0[_2341].w, fma(_2282, cbSceneParam._m0[_2341].z, fma(_2278, cbSceneParam._m0[_2341].y, _2274 * cbSceneParam._m0[_2341].x)));
        float _2369 = cbSceneParam._m0[33u].z * _2364;
        float _2371 = cbSceneParam._m0[33u].w * _2364;
        float _2374 = fma(_2286, cbSceneParam._m0[_2333].w, fma(_2282, cbSceneParam._m0[_2333].z, fma(_2278, cbSceneParam._m0[_2333].y, _2274 * cbSceneParam._m0[_2333].x))) / _2364;
        float _2422 = (cbSceneParam._m0[33u].x - sqrt(((_2288 * _2288) + (_2287 * _2287)) + (_2289 * _2289))) * cbSceneParam._m0[33u].y;
        float _4782 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2429 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2369 + _2352) / _2364, (_2371 + _2356) / _2364), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2371 + _2352) / _2364, (_2356 - _2369) / _2364), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2352 - _2369) / _2364, (_2356 - _2371) / _2364), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2352 - _2371) / _2364, (_2369 + _2356) / _2364), _2374), 0.0)).x), vec4(0.25)));
        _2436 = 1.0 - (_2429 * cbSceneParam._m0[34u].x);
        _2437 = 1.0 - (_2429 * cbSceneParam._m0[34u].y);
        _2438 = 1.0 - (_2429 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2436 = 1.0;
        _2437 = 1.0;
        _2438 = 1.0;
    }
    float _2502;
    float _2504;
    float _2506;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2490 = fma(_2286, cbSceneParam._m0[63u].w, fma(_2282, cbSceneParam._m0[63u].z, fma(_2278, cbSceneParam._m0[63u].y, _2274 * cbSceneParam._m0[63u].x)));
        float _2491 = fma(_2286, cbSceneParam._m0[60u].w, fma(_2282, cbSceneParam._m0[60u].z, fma(_2278, cbSceneParam._m0[60u].y, _2274 * cbSceneParam._m0[60u].x))) / _2490;
        float _2492 = fma(_2286, cbSceneParam._m0[61u].w, fma(_2282, cbSceneParam._m0[61u].z, fma(_2278, cbSceneParam._m0[61u].y, _2274 * cbSceneParam._m0[61u].x))) / _2490;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2491 >= cbSceneParam._m0[64u].x) && (_2492 >= cbSceneParam._m0[64u].y)) && (_2491 <= cbSceneParam._m0[64u].z)) && (_2492 <= cbSceneParam._m0[64u].w))
        {
            float _2630 = fma(_2286, cbSceneParam._m0[62u].w, fma(_2282, cbSceneParam._m0[62u].z, fma(_2278, cbSceneParam._m0[62u].y, _2274 * cbSceneParam._m0[62u].x))) / _2490;
            float _2634 = isnan(cbSceneParam._m0[41u].w) ? _2630 : (isnan(_2630) ? cbSceneParam._m0[41u].w : max(_2630, cbSceneParam._m0[41u].w));
            float _2677 = (cbSceneParam._m0[33u].x - sqrt(((_2288 * _2288) + (_2287 * _2287)) + (_2289 * _2289))) * cbSceneParam._m0[33u].y;
            float _4798 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
            float _2684 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2491, cbSceneParam._m0[33u].w + _2492), _2634), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2491, _2492 - cbSceneParam._m0[33u].z), _2634), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2491 - cbSceneParam._m0[33u].z, _2492 - cbSceneParam._m0[33u].w), _2634), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2491 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2492), _2634), 0.0)).x), vec4(0.25)));
            float _2688 = 1.0 - (_2684 * cbSceneParam._m0[34u].x);
            float _2689 = 1.0 - (_2684 * cbSceneParam._m0[34u].y);
            float _2690 = 1.0 - (_2684 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2690) ? _2438 : (isnan(_2438) ? _2690 : min(_2438, _2690));
            frontier_phi_34_33_ladder_1 = isnan(_2689) ? _2437 : (isnan(_2437) ? _2689 : min(_2437, _2689));
            frontier_phi_34_33_ladder_2 = isnan(_2688) ? _2436 : (isnan(_2436) ? _2688 : min(_2436, _2688));
        }
        else
        {
            frontier_phi_34_33_ladder = _2438;
            frontier_phi_34_33_ladder_1 = _2437;
            frontier_phi_34_33_ladder_2 = _2436;
        }
        _2502 = frontier_phi_34_33_ladder_2;
        _2504 = frontier_phi_34_33_ladder_1;
        _2506 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2502 = _2436;
        _2504 = _2437;
        _2506 = _2438;
    }
    uvec4 _2511 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2513 = _2511.x * 14u;
    uint _2514 = _2513 + 13u;
    float _2521 = _1212 + (-1.0);
    float _2526 = (cbLight._m0[_2514].x * _2521) + 1.0;
    float _2527 = (cbLight._m0[_2514].y * _2521) + 1.0;
    float _2528 = (cbLight._m0[_2514].z * _2521) + 1.0;
    float _2529 = (cbLight._m0[_2514].w * _2521) + 1.0;
    uint _2530 = _2513 + 5u;
    float _2536 = isnan(1.0) ? _2527 : (isnan(_2527) ? 1.0 : min(_2527, 1.0));
    uint _2540 = _2513 + 4u;
    float _2549 = isnan(1.0) ? _2526 : (isnan(_2526) ? 1.0 : min(_2526, 1.0));
    uint _2553 = _2513 | 1u;
    float _2564 = dot(vec3(cbLight._m0[_2513].xyz), vec3(_1047, _1048, _1049));
    float _2567 = dot(vec3(cbLight._m0[_2553].xyz), vec3(_1047, _1048, _1049));
    float _4834 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _4845 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2572 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * 0.3183098733425140380859375;
    float _2574 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * 0.3183098733425140380859375;
    float _2581 = ((cbLight._m0[_2530].x * _2536) * _2574) + (((cbLight._m0[_2540].x * _2502) * _2549) * _2572);
    float _2582 = ((_2536 * cbLight._m0[_2530].y) * _2574) + (((cbLight._m0[_2540].y * _2504) * _2549) * _2572);
    float _2583 = ((_2536 * cbLight._m0[_2530].z) * _2574) + (((cbLight._m0[_2540].z * _2506) * _2549) * _2572);
    uvec4 _2587 = floatBitsToUint(cbLight._m0[_2513 + 12u]);
    bool _2589 = _2587.x == 0u;
    float _2691;
    float _2693;
    float _2695;
    if (_2589)
    {
        _2691 = _2581;
        _2693 = _2582;
        _2695 = _2583;
    }
    else
    {
        uint _2699 = _2513 + 6u;
        float _2715 = (dot(vec3(cbLight._m0[_2513 + 2u].xyz), vec3(_1047, _1048, _1049)) * 0.5) + 0.5;
        float _2716 = _2715 * _2715;
        float _4856 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2717 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _2718 = isnan(1.0) ? _2528 : (isnan(_2528) ? 1.0 : min(_2528, 1.0));
        _2691 = (((cbLight._m0[_2699].x * 0.3183098733425140380859375) * _2717) * _2718) + _2581;
        _2693 = (((cbLight._m0[_2699].y * 0.3183098733425140380859375) * _2717) * _2718) + _2582;
        _2695 = (((cbLight._m0[_2699].z * 0.3183098733425140380859375) * _2717) * _2718) + _2583;
    }
    bool _2698 = _2587.y == 0u;
    float _2753;
    float _2755;
    float _2757;
    if (_2698)
    {
        _2753 = _2691;
        _2755 = _2693;
        _2757 = _2695;
    }
    else
    {
        uint _2926 = _2513 + 7u;
        float _2942 = (dot(vec3(cbLight._m0[_2513 + 3u].xyz), vec3(_1047, _1048, _1049)) * 0.5) + 0.5;
        float _2943 = _2942 * _2942;
        float _4872 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2944 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
        float _2945 = isnan(1.0) ? _2529 : (isnan(_2529) ? 1.0 : min(_2529, 1.0));
        _2753 = (((cbLight._m0[_2926].x * 0.3183098733425140380859375) * _2944) * _2945) + _2691;
        _2755 = (((cbLight._m0[_2926].y * 0.3183098733425140380859375) * _2944) * _2945) + _2693;
        _2757 = (((cbLight._m0[_2926].z * 0.3183098733425140380859375) * _2944) * _2945) + _2695;
    }
    uint _2760 = _2513 + 8u;
    float _2773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2513].w)) * _1050) * 0.949999988079071044921875);
    float _2774 = _2773 * _2773;
    float _2775 = cbLight._m0[_2513].x + _1126;
    float _2776 = cbLight._m0[_2513].y + _1127;
    float _2777 = cbLight._m0[_2513].z + _1128;
    float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
    float _2782 = _2781 * _2775;
    float _2783 = _2781 * _2776;
    float _2784 = _2781 * _2777;
    float _2785 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2513].xyz));
    float _4888 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
    float _2788 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
    float _4899 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _2789 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
    float _2790 = dot(vec3(_1047, _1048, _1049), vec3(_2782, _2783, _2784));
    float _4910 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2793 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
    float _2794 = dot(vec3(cbLight._m0[_2513].xyz), vec3(_2782, _2783, _2784));
    float _4921 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2798 = _2774 * _2774;
    float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
    float _2810 = exp2(log2(1.0 - (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) * 5.0);
    float _2811 = 0.959999978542327880859375 - _1193;
    float _2813 = 0.959999978542327880859375 - _1194;
    float _2814 = 0.959999978542327880859375 - _1195;
    float _2821 = 1.0 - _2774;
    float _2832 = (0.5 / (((_2789 * ((_2788 * _2821) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2789 * _2821) + _2774) * _2788))) * _2788;
    float _4932 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
    float _2834 = (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
    uint _2848 = _2513 + 9u;
    float _2859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2553].w)) * _1050) * 0.949999988079071044921875);
    float _2860 = _2859 * _2859;
    float _2861 = cbLight._m0[_2553].x + _1126;
    float _2862 = cbLight._m0[_2553].y + _1127;
    float _2863 = cbLight._m0[_2553].z + _1128;
    float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
    float _2868 = _2867 * _2861;
    float _2869 = _2867 * _2862;
    float _2870 = _2867 * _2863;
    float _2871 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2553].xyz));
    float _4943 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
    float _2874 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
    float _2875 = dot(vec3(_1047, _1048, _1049), vec3(_2868, _2869, _2870));
    float _4954 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
    float _2878 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
    float _2879 = dot(vec3(cbLight._m0[_2553].xyz), vec3(_2868, _2869, _2870));
    float _4965 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
    float _2883 = _2860 * _2860;
    float _2887 = ((_2878 * _2878) * (_2883 + (-1.0))) + 1.0;
    float _2894 = exp2(log2(1.0 - (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0)))) * 5.0);
    float _2901 = 1.0 - _2860;
    float _2911 = (0.5 / (((_2789 * ((_2874 * _2901) + _2860)) + 9.9999999392252902907785028219223e-09) + (((_2789 * _2901) + _2860) * _2874))) * _2874;
    float _4976 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
    float _2913 = (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_2883 / ((_2887 * _2887) * 3.141590118408203125));
    float _2923 = (((((_2894 * _2811) + _1196) * cbLight._m0[_2848].x) * _2913) * _2536) + ((((cbLight._m0[_2760].x * _2502) * ((_2810 * _2811) + _1196)) * _2834) * _2549);
    float _2924 = (((((_2894 * _2813) + _1198) * cbLight._m0[_2848].y) * _2913) * _2536) + ((((cbLight._m0[_2760].y * _2504) * ((_2810 * _2813) + _1198)) * _2834) * _2549);
    float _2925 = (((((_2894 * _2814) + _1199) * cbLight._m0[_2848].z) * _2913) * _2536) + ((((cbLight._m0[_2760].z * _2506) * ((_2810 * _2814) + _1199)) * _2834) * _2549);
    float _2981;
    float _2983;
    float _2985;
    if (_2589)
    {
        _2981 = _2923;
        _2983 = _2924;
        _2985 = _2925;
    }
    else
    {
        uint _2987 = _2513 + 2u;
        uint _2991 = _2513 + 10u;
        float _3005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2987].w)) * _1050) * 0.949999988079071044921875);
        float _3006 = _3005 * _3005;
        float _3007 = cbLight._m0[_2987].x + _1126;
        float _3008 = cbLight._m0[_2987].y + _1127;
        float _3009 = cbLight._m0[_2987].z + _1128;
        float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
        float _3014 = _3013 * _3007;
        float _3015 = _3013 * _3008;
        float _3016 = _3013 * _3009;
        float _3017 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2987].xyz));
        float _4987 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
        float _3020 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
        float _3021 = dot(vec3(_1047, _1048, _1049), vec3(_3014, _3015, _3016));
        float _4998 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3024 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
        float _3025 = dot(vec3(cbLight._m0[_2987].xyz), vec3(_3014, _3015, _3016));
        float _5009 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
        float _3029 = _3006 * _3006;
        float _3033 = ((_3024 * _3024) * (_3029 + (-1.0))) + 1.0;
        float _3040 = exp2(log2(1.0 - (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) * 5.0);
        float _3047 = 1.0 - _3006;
        float _3057 = (0.5 / (((_2789 * ((_3020 * _3047) + _3006)) + 9.9999999392252902907785028219223e-09) + (((_2789 * _3047) + _3006) * _3020))) * _3020;
        float _5020 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
        float _3059 = (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_3029 / ((_3033 * _3033) * 3.141590118408203125));
        float _3060 = isnan(1.0) ? _2528 : (isnan(_2528) ? 1.0 : min(_2528, 1.0));
        _2981 = (((((_3040 * _2811) + _1196) * cbLight._m0[_2991].x) * _3059) * _3060) + _2923;
        _2983 = (((((_3040 * _2813) + _1198) * cbLight._m0[_2991].y) * _3059) * _3060) + _2924;
        _2985 = (((((_3040 * _2814) + _1199) * cbLight._m0[_2991].z) * _3059) * _3060) + _2925;
    }
    float _3091;
    float _3093;
    float _3095;
    if (_2698)
    {
        _3091 = _2981;
        _3093 = _2983;
        _3095 = _2985;
    }
    else
    {
        uint _3102 = _2513 + 3u;
        uint _3106 = _2513 + 11u;
        float _3120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3102].w)) * _1050) * 0.949999988079071044921875);
        float _3121 = _3120 * _3120;
        float _3122 = cbLight._m0[_3102].x + _1126;
        float _3123 = cbLight._m0[_3102].y + _1127;
        float _3124 = cbLight._m0[_3102].z + _1128;
        float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
        float _3129 = _3128 * _3122;
        float _3130 = _3128 * _3123;
        float _3131 = _3128 * _3124;
        float _3132 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_3102].xyz));
        float _5036 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
        float _3135 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
        float _3136 = dot(vec3(_1047, _1048, _1049), vec3(_3129, _3130, _3131));
        float _5047 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
        float _3139 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
        float _3140 = dot(vec3(cbLight._m0[_3102].xyz), vec3(_3129, _3130, _3131));
        float _5058 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
        float _3144 = _3121 * _3121;
        float _3148 = ((_3139 * _3139) * (_3144 + (-1.0))) + 1.0;
        float _3155 = exp2(log2(1.0 - (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0)))) * 5.0);
        float _3162 = 1.0 - _3121;
        float _3172 = (0.5 / (((_2789 * ((_3135 * _3162) + _3121)) + 9.9999999392252902907785028219223e-09) + (((_2789 * _3162) + _3121) * _3135))) * _3135;
        float _5069 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
        float _3174 = (isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3144 / ((_3148 * _3148) * 3.141590118408203125));
        float _3175 = isnan(1.0) ? _2529 : (isnan(_2529) ? 1.0 : min(_2529, 1.0));
        _3091 = (((((_3155 * _2811) + _1196) * cbLight._m0[_3106].x) * _3174) * _3175) + _2981;
        _3093 = (((((_3155 * _2813) + _1198) * cbLight._m0[_3106].y) * _3174) * _3175) + _2983;
        _3095 = (((((_3155 * _2814) + _1199) * cbLight._m0[_3106].z) * _3174) * _3175) + _2985;
    }
    float _3241;
    float _3243;
    float _3245;
    float _3247;
    float _3249;
    float _3251;
    if (_2511.y == 0u)
    {
        uvec4 _3196 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3197 = _3196.x;
        uint _3208 = uint((float(_3196.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1135) / _3197))) + floor(float(uint(cbSceneParam._m0[85u].x * _1134) / _3197)));
        float _3218 = (log2(_2289 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3219 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
        uint _3222 = uint(isnan(14.0) ? _3219 : (isnan(_3219) ? 14.0 : min(_3219, 14.0)));
        uvec4 _3227 = texelFetch(g_lightClusterGridBuffer, int(((_3222 << 2u) + (_3208 << 6u)) >> 2u));
        uint _3228 = _3227.x;
        uint _3229 = _3196.z;
        float _3308;
        float _3310;
        float _3312;
        float _3314;
        float _3316;
        float _3318;
        if (((((1u << ((_3229 >> 4u) & 15u)) + 4294967295u) & _3228) == 0u) || ((_3229 & 240u) == 0u))
        {
            _3308 = 0.0;
            _3310 = 0.0;
            _3312 = 0.0;
            _3314 = 0.0;
            _3316 = 0.0;
            _3318 = 0.0;
        }
        else
        {
            float _3309;
            float _3311;
            float _3313;
            float _3315;
            float _3317;
            float _3319;
            float _3452 = 0.0;
            float _3453 = 0.0;
            float _3454 = 0.0;
            float _3455 = 0.0;
            float _3456 = 0.0;
            float _3457 = 0.0;
            uint _3458 = 0u;
            uint _3467;
            bool _3468;
            for (;;)
            {
                _3467 = texelFetch(g_lightClassification, int((((_3222 << 5u) + (_3208 << 9u)) + (_3458 << 2u)) >> 2u)).x;
                _3468 = _3467 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3468)
                {
                    frontier_phi_66_pred = _3457;
                    frontier_phi_66_pred_1 = _3456;
                    frontier_phi_66_pred_2 = _3455;
                    frontier_phi_66_pred_3 = _3454;
                    frontier_phi_66_pred_4 = _3453;
                    frontier_phi_66_pred_5 = _3452;
                }
                else
                {
                    float _3576;
                    float _3577;
                    float _3578;
                    float _3579;
                    float _3580;
                    float _3581;
                    uint _3582;
                    _3576 = _3452;
                    _3577 = _3453;
                    _3578 = _3454;
                    _3579 = _3455;
                    _3580 = _3456;
                    _3581 = _3457;
                    _3582 = _3467;
                    float _3508;
                    float _3509;
                    float _3510;
                    float _3511;
                    float _3512;
                    float _3513;
                    for (;;)
                    {
                        uint _3586 = uint(findLSB(_3582)) + (_3458 << 5u);
                        uint _3583 = (_3582 + 4294967295u) & _3582;
                        uint _3588 = _3586 * 48u;
                        vec4 _3602 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3588)).x, texelFetch(g_PointLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3588 + 3u)).x));
                        uint _3608 = (_3586 * 48u) + 4u;
                        vec4 _3621 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3608)).x, texelFetch(g_PointLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3608 + 3u)).x));
                        uint _3627 = (_3586 * 48u) + 8u;
                        vec3 _3638 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3627)).x, texelFetch(g_PointLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3627 + 2u)).x));
                        float _3642 = _3602.x - _2287;
                        float _3643 = _3602.y - _2288;
                        float _3644 = _3602.z - _2289;
                        float _3645 = dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644));
                        float _3648 = inversesqrt(_3645);
                        float _3649 = _3648 * _3642;
                        float _3650 = _3648 * _3643;
                        float _3651 = _3648 * _3644;
                        float _3652 = dot(vec3(_1153, _1156, _1159), vec3(_3649, _3650, _3651));
                        float _3657 = 1.0 - (_3645 * _3602.w);
                        float _5095 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                        float _3658 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                        float _3659 = sqrt(_3645) * _3621.w;
                        float _3662 = 1.39999997615814208984375 / (_3659 + 1.39999997615814208984375);
                        float _3663 = _3662 * _3662;
                        float _3666 = ((1.0 - _3663) * _3652) + _3663;
                        float _3669 = _3659 * _3659;
                        float _3673 = ((isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0))) * _3658) / ((_3669 * 0.699999988079071044921875) + 1.0);
                        float _3677 = (-0.0) - _2287;
                        float _3678 = (-0.0) - _2288;
                        float _3679 = (-0.0) - _2289;
                        float _3683 = inversesqrt(dot(vec3(_3677, _3678, _3679), vec3(_3677, _3678, _3679)));
                        float _3684 = _3683 * _3677;
                        float _3685 = _3683 * _3678;
                        float _3686 = _3683 * _3679;
                        float _3693 = exp2(log2(1.0 / ((_3669 * 3.5) + 5.0)) * 0.25);
                        float _3694 = 1.0 - _1228;
                        float _3701 = sqrt(1.0 - ((1.0 - (_3694 * _3694)) * (1.0 - (_3693 * _3693))));
                        float _3702 = _3701 * _3701;
                        float _3703 = _3702 * _3702;
                        float _3704 = _3684 + _3649;
                        float _3705 = _3685 + _3650;
                        float _3706 = _3686 + _3651;
                        float _3710 = inversesqrt(dot(vec3(_3704, _3705, _3706), vec3(_3704, _3705, _3706)));
                        float _3714 = dot(vec3(_1153, _1156, _1159), vec3(_3684, _3685, _3686));
                        float _5111 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                        float _3717 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                        float _3718 = dot(vec3(_1153, _1156, _1159), vec3(_3710 * _3704, _3710 * _3705, _3710 * _3706));
                        float _5122 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                        float _3721 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                        float _3725 = ((_3721 * _3721) * (_3703 + (-1.0))) + 1.0;
                        float _3726 = _3662 * _3702;
                        float _3727 = _3726 * _3726;
                        float _3730 = ((1.0 - _3727) * _3652) + _3727;
                        float _5133 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                        float _3731 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                        float _3732 = 1.0 - _3702;
                        float _3742 = (0.5 / (((_3731 * ((_3717 * _3732) + _3702)) + 9.9999999392252902907785028219223e-09) + (((_3731 * _3732) + _3702) * _3717))) * _3731;
                        float _5144 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                        float _3753 = (((_3703 * 3.1415927410125732421875) * (isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0)))) / ((_3725 * _3725) * ((_3669 * 2.1991131305694580078125) + 3.141590118408203125))) * _3658;
                        _3511 = (_3673 * _3621.x) + _3579;
                        _3512 = (_3673 * _3621.y) + _3580;
                        _3513 = (_3673 * _3621.z) + _3581;
                        _3508 = (_3753 * _3638.x) + _3576;
                        _3509 = (_3753 * _3638.y) + _3577;
                        _3510 = (_3753 * _3638.z) + _3578;
                        if (_3583 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3576 = _3508;
                            _3577 = _3509;
                            _3578 = _3510;
                            _3579 = _3511;
                            _3580 = _3512;
                            _3581 = _3513;
                            _3582 = _3583;
                        }
                    }
                    frontier_phi_66_pred = _3513;
                    frontier_phi_66_pred_1 = _3512;
                    frontier_phi_66_pred_2 = _3511;
                    frontier_phi_66_pred_3 = _3510;
                    frontier_phi_66_pred_4 = _3509;
                    frontier_phi_66_pred_5 = _3508;
                }
                _3319 = frontier_phi_66_pred;
                _3317 = frontier_phi_66_pred_1;
                _3315 = frontier_phi_66_pred_2;
                _3313 = frontier_phi_66_pred_3;
                _3311 = frontier_phi_66_pred_4;
                _3309 = frontier_phi_66_pred_5;
                uint _3459 = _3458 + 1u;
                if (_3459 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3452 = _3309;
                    _3453 = _3311;
                    _3454 = _3313;
                    _3455 = _3315;
                    _3456 = _3317;
                    _3457 = _3319;
                    _3458 = _3459;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3308 = _3309;
            _3310 = _3311;
            _3312 = _3313;
            _3314 = _3315;
            _3316 = _3317;
            _3318 = _3319;
        }
        uvec4 _3322 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3323 = _3322.z;
        uint _3325 = (_3323 >> 8u) & 15u;
        float _3420;
        float _3422;
        float _3424;
        float _3426;
        float _3428;
        float _3430;
        if (((4294967295u << _3325) & _3228) == 0u)
        {
            _3420 = _3308;
            _3422 = _3310;
            _3424 = _3312;
            _3426 = _3314;
            _3428 = _3316;
            _3430 = _3318;
        }
        else
        {
            float _3445 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
            float _3446 = _3445 * _2287;
            float _3447 = _3445 * _2288;
            float _3448 = _3445 * _2289;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3325 < ((_3323 >> 12u) & 15u))
            {
                float _3421;
                float _3423;
                float _3425;
                float _3427;
                float _3429;
                float _3431;
                float _3559 = _3308;
                float _3560 = _3310;
                float _3561 = _3312;
                float _3562 = _3314;
                float _3563 = _3316;
                float _3564 = _3318;
                uint _3565 = _3325;
                uint _3574;
                bool _3575;
                for (;;)
                {
                    _3574 = texelFetch(g_lightClassification, int((((_3222 << 5u) + (_3208 << 9u)) + (_3565 << 2u)) >> 2u)).x;
                    _3575 = _3574 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3575)
                    {
                        frontier_phi_72_pred = _3564;
                        frontier_phi_72_pred_1 = _3563;
                        frontier_phi_72_pred_2 = _3562;
                        frontier_phi_72_pred_3 = _3561;
                        frontier_phi_72_pred_4 = _3560;
                        frontier_phi_72_pred_5 = _3559;
                    }
                    else
                    {
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _4051;
                        float _4052;
                        float _4053;
                        float _4054;
                        float _4055;
                        float _4056;
                        float _3771 = _3559;
                        float _3772 = _3560;
                        float _3773 = _3561;
                        float _3774 = _3562;
                        float _3775 = _3563;
                        float _3776 = _3564;
                        uint _3777 = _3574;
                        uint _3778;
                        vec4 _3803;
                        float _3804;
                        vec4 _3819;
                        vec3 _3831;
                        vec4 _3846;
                        vec4 _3861;
                        float _3907;
                        bool _3908;
                        for (;;)
                        {
                            uint _3788 = ((_3565 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3777));
                            _3778 = (_3777 + 4294967295u) & _3777;
                            uint _3790 = _3788 * 40u;
                            _3803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3790 + 3u)).x));
                            _3804 = _3803.w;
                            uint _3806 = (_3788 * 40u) + 4u;
                            _3819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 3u)).x));
                            uint _3821 = (_3788 * 40u) + 8u;
                            _3831 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 2u)).x));
                            uint _3833 = (_3788 * 40u) + 16u;
                            _3846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 3u)).x));
                            uint _3848 = (_3788 * 40u) + 20u;
                            _3861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 3u)).x));
                            uint _3863 = (_3788 * 40u) + 24u;
                            vec4 _3876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 3u)).x));
                            uint _3882 = (_3788 * 40u) + 28u;
                            vec4 _3895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3882 + 3u)).x));
                            _3907 = fma(_2289, _3895.z, fma(_2288, _3895.y, _3895.x * _2287)) + _3895.w;
                            _3908 = !((fma(_2289, _3876.z, fma(_2288, _3876.y, _3876.x * _2287)) + _3876.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3908)
                            {
                                float _3935 = _3803.x - _2287;
                                float _3936 = _3803.y - _2288;
                                float _3937 = _3803.z - _2289;
                                float _3938 = dot(vec3(_3935, _3936, _3937), vec3(_3935, _3936, _3937));
                                float _3941 = inversesqrt(_3938);
                                float _3942 = _3941 * _3935;
                                float _3943 = _3941 * _3936;
                                float _3944 = _3941 * _3937;
                                float _3948 = 1.0 - (_3938 / (_3804 * _3804));
                                float _5155 = isnan(0.0) ? _3948 : (isnan(_3948) ? 0.0 : max(_3948, 0.0));
                                float _3949 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
                                float _3953 = sqrt(_3938) * _3819.w;
                                float _3955 = 1.39999997615814208984375 / (_3953 + 1.39999997615814208984375);
                                float _3956 = _3955 * _3955;
                                float _3959 = ((1.0 - _3956) * dot(vec3(_3942, _3943, _3944), vec3(_1153, _1156, _1159))) + _3956;
                                float _3962 = _3953 * _3953;
                                float _3966 = (fma(_2289, _3846.z, fma(_2288, _3846.y, _3846.x * _2287)) + _3846.w) / _3907;
                                float _3967 = (fma(_2289, _3861.z, fma(_2288, _3861.y, _3861.x * _2287)) + _3861.w) / _3907;
                                float _3971 = 1.0 - dot(vec2(_3966, _3967), vec2(_3966, _3967));
                                float _5171 = isnan(0.0) ? _3971 : (isnan(_3971) ? 0.0 : max(_3971, 0.0));
                                float _3972 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
                                float _3973 = _3972 * (((isnan(0.0) ? _3959 : (isnan(_3959) ? 0.0 : max(_3959, 0.0))) * _3949) / ((_3962 * 0.699999988079071044921875) + 1.0));
                                float _3985 = exp2(log2(1.0 / ((_3962 * 3.5) + 5.0)) * 0.25);
                                float _3986 = 1.0 - _1228;
                                float _3993 = sqrt(1.0 - ((1.0 - (_3986 * _3986)) * (1.0 - (_3985 * _3985))));
                                float _3994 = _3993 * _3993;
                                float _3995 = _3994 * _3994;
                                float _3996 = _3942 - _3446;
                                float _3997 = _3943 - _3447;
                                float _3998 = _3944 - _3448;
                                float _4002 = inversesqrt(dot(vec3(_3996, _3997, _3998), vec3(_3996, _3997, _3998)));
                                float _4006 = dot(vec3(_1153, _1156, _1159), vec3((-0.0) - _3446, (-0.0) - _3447, (-0.0) - _3448));
                                float _5182 = isnan(0.0) ? _4006 : (isnan(_4006) ? 0.0 : max(_4006, 0.0));
                                float _4009 = isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0));
                                float _4010 = dot(vec3(_1153, _1156, _1159), vec3(_4002 * _3996, _4002 * _3997, _4002 * _3998));
                                float _5193 = isnan(0.0) ? _4010 : (isnan(_4010) ? 0.0 : max(_4010, 0.0));
                                float _4013 = isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0));
                                float _4017 = ((_4013 * _4013) * (_3995 + (-1.0))) + 1.0;
                                float _4018 = _3955 * _3994;
                                float _4019 = _4018 * _4018;
                                float _4025 = ((1.0 - _4019) * dot(vec3(_1153, _1156, _1159), vec3(_3942, _3943, _3944))) + _4019;
                                float _5204 = isnan(0.0) ? _4025 : (isnan(_4025) ? 0.0 : max(_4025, 0.0));
                                float _4026 = isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0));
                                float _4027 = 1.0 - _3994;
                                float _4037 = (0.5 / (((_4026 * ((_4009 * _4027) + _3994)) + 9.9999999392252902907785028219223e-09) + (((_4026 * _4027) + _3994) * _4009))) * _4026;
                                float _5215 = isnan(0.0) ? _4037 : (isnan(_4037) ? 0.0 : max(_4037, 0.0));
                                float _4047 = (_3972 * _3949) * (((_3995 * 3.1415927410125732421875) * (isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0)))) / ((_4017 * _4017) * ((_3962 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3973 * _3819.y;
                                frontier_phi_78_pred_1 = _3973 * _3819.x;
                                frontier_phi_78_pred_2 = _4047 * _3831.z;
                                frontier_phi_78_pred_3 = _4047 * _3831.y;
                                frontier_phi_78_pred_4 = _4047 * _3831.x;
                                frontier_phi_78_pred_5 = _3973 * _3819.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4055 = frontier_phi_78_pred;
                            _4054 = frontier_phi_78_pred_1;
                            _4053 = frontier_phi_78_pred_2;
                            _4052 = frontier_phi_78_pred_3;
                            _4051 = frontier_phi_78_pred_4;
                            _4056 = frontier_phi_78_pred_5;
                            _3761 = _4054 + _3774;
                            _3762 = _4055 + _3775;
                            _3763 = _4056 + _3776;
                            _3758 = _4051 + _3771;
                            _3759 = _4052 + _3772;
                            _3760 = _4053 + _3773;
                            if (_3778 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3771 = _3758;
                                _3772 = _3759;
                                _3773 = _3760;
                                _3774 = _3761;
                                _3775 = _3762;
                                _3776 = _3763;
                                _3777 = _3778;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3763;
                        frontier_phi_72_pred_1 = _3762;
                        frontier_phi_72_pred_2 = _3761;
                        frontier_phi_72_pred_3 = _3760;
                        frontier_phi_72_pred_4 = _3759;
                        frontier_phi_72_pred_5 = _3758;
                    }
                    _3431 = frontier_phi_72_pred;
                    _3429 = frontier_phi_72_pred_1;
                    _3427 = frontier_phi_72_pred_2;
                    _3425 = frontier_phi_72_pred_3;
                    _3423 = frontier_phi_72_pred_4;
                    _3421 = frontier_phi_72_pred_5;
                    uint _3566 = _3565 + 1u;
                    if (_3566 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3559 = _3421;
                        _3560 = _3423;
                        _3561 = _3425;
                        _3562 = _3427;
                        _3563 = _3429;
                        _3564 = _3431;
                        _3565 = _3566;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3431;
                frontier_phi_60_61_ladder_1 = _3429;
                frontier_phi_60_61_ladder_2 = _3425;
                frontier_phi_60_61_ladder_3 = _3423;
                frontier_phi_60_61_ladder_4 = _3421;
                frontier_phi_60_61_ladder_5 = _3427;
            }
            else
            {
                frontier_phi_60_61_ladder = _3318;
                frontier_phi_60_61_ladder_1 = _3316;
                frontier_phi_60_61_ladder_2 = _3312;
                frontier_phi_60_61_ladder_3 = _3310;
                frontier_phi_60_61_ladder_4 = _3308;
                frontier_phi_60_61_ladder_5 = _3314;
            }
            _3420 = frontier_phi_60_61_ladder_4;
            _3422 = frontier_phi_60_61_ladder_3;
            _3424 = frontier_phi_60_61_ladder_2;
            _3426 = frontier_phi_60_61_ladder_5;
            _3428 = frontier_phi_60_61_ladder_1;
            _3430 = frontier_phi_60_61_ladder;
        }
        float _3435 = isnan(1.0) ? _1212 : (isnan(_1212) ? 1.0 : min(_1212, 1.0));
        _3241 = (_3435 * _3426) + _2753;
        _3243 = (_3435 * _3428) + _2755;
        _3245 = (_3435 * _3430) + _2757;
        _3247 = ((_3420 * _1196) * _3435) + _3091;
        _3249 = ((_3422 * _1198) * _3435) + _3093;
        _3251 = ((_3424 * _1199) * _3435) + _3095;
    }
    else
    {
        _3241 = _2753;
        _3243 = _2755;
        _3245 = _2757;
        _3247 = _3091;
        _3249 = _3093;
        _3251 = _3095;
    }
    float _5231 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _5242 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _5253 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    uint _3271 = _293 + 6u;
    float _3279 = _1134 / cbSceneParam._m0[86u].x;
    float _3280 = _1135 / cbSceneParam._m0[86u].y;
    vec4 _3294 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3279, _3280, (log2((isnan(cbSceneParam._m0[77u].w) ? _1069 : (isnan(_1069) ? cbSceneParam._m0[77u].w : min(_1069, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3296 = _3294.x;
    float _3297 = _3294.y;
    float _3298 = _3294.z;
    float _3299 = _3294.w;
    float _3370;
    float _3372;
    float _3374;
    float _3376;
    if (_1069 > cbSceneParam._m0[78u].w)
    {
        float _3333 = isnan(_1069) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1069 : min(cbSceneParam._m0[80u].w, _1069));
        float _3334 = _3333 / _1069;
        float _3345 = _3334 * _1119;
        float _3346 = _1120 * _3334;
        float _3347 = (-0.0) - _3346;
        float _3348 = _3334 * _1121;
        float _3350 = (cbSceneParam._m0[77u].w * _3347) / _3333;
        float _3351 = _3350 + cbSceneParam._m0[79u].w;
        float _3352 = cbSceneParam._m0[79u].w - _3346;
        float _3358 = sqrt(((_3345 * _3345) + (_3346 * _3346)) + (_3348 * _3348));
        float _3361 = (1.0 - (cbSceneParam._m0[77u].w / _3333)) * _3358;
        float _3366 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3368 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3521;
        if (abs((_3347 - _3350) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3521 = ((((_3351 > 0.0) ? exp2(_3366 * _3351) : (2.0 - exp2(_3368 * _3351))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3361;
        }
        else
        {
            float _3481 = 1.0 / cbSceneParam._m0[80u].x;
            float _3482 = isnan(_3352) ? _3351 : (isnan(_3351) ? _3352 : max(_3351, _3352));
            float _3483 = isnan(_3352) ? _3351 : (isnan(_3351) ? _3352 : min(_3351, _3352));
            float _3492 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : min(_3482, 0.0));
            float _3493 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : min(_3483, 0.0));
            _3521 = ((abs(_3358 / _3347) * cbSceneParam._m0[80u].y) * ((((_3492 - _3493) * 2.0) - ((exp2(_3366 * (isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0)))) - exp2(_3366 * (isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0))))) * _3481)) - ((exp2(_3368 * _3492) - exp2(_3368 * _3493)) * _3481))) + (_3361 * cbSceneParam._m0[80u].z);
        }
        vec4 _3523 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3279, _3280, 1.0), 0.0);
        float _3532 = exp2((_3521 * (-1.44269502162933349609375)) * (1.0 - _3523.w));
        float _3533 = log2(_3532);
        float _3549 = log2(_3299);
        _3370 = (exp2(_3549 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3533 * cbSceneParam._m0[78u].x)) * _3523.x) / cbSceneParam._m0[78u].x)) + _3296;
        _3372 = (exp2(_3549 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3533 * cbSceneParam._m0[78u].y)) * _3523.y) / cbSceneParam._m0[78u].y)) + _3297;
        _3374 = (exp2(_3549 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3533 * cbSceneParam._m0[78u].z)) * _3523.z) / cbSceneParam._m0[78u].z)) + _3298;
        _3376 = _3532 * _3299;
    }
    else
    {
        _3370 = _3296;
        _3372 = _3297;
        _3374 = _3298;
        _3376 = _3299;
    }
    float _3388 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3389 = _3388 == 3.0;
    float _3390 = log2(_3376);
    float _3397 = exp2(_3390 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0))) * (_3241 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1212))) + ((_3247 + ((isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0))) * _2019)) * cbPerFrame._m0[3u].x));
    float _3398 = exp2(_3390 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5242 : (isnan(_5242) ? 1.0 : min(_5242, 1.0))) * (_3243 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1212))) + ((_3249 + ((isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0))) * _2019)) * cbPerFrame._m0[3u].x));
    float _3399 = exp2(_3390 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5253 : (isnan(_5253) ? 1.0 : min(_5253, 1.0))) * (_3245 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1212))) + ((_3251 + ((isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0))) * _2019)) * cbPerFrame._m0[3u].x));
    float _3408 = (_3388 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3408 * (_3389 ? _3397 : (_3397 + (cbSceneParam._m0[72u].w * _3370)));
    SV_Target.y = _3408 * (_3389 ? _3398 : (_3398 + (cbSceneParam._m0[72u].w * _3372)));
    SV_Target.z = _3408 * (_3389 ? _3399 : (_3399 + (cbSceneParam._m0[72u].w * _3374)));
    SV_Target.w = cbInstanceData._m0[_3271].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3271].w;
}


