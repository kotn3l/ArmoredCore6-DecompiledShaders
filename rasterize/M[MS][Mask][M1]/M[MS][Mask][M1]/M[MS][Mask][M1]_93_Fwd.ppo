#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1444;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3768 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3779 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3790 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _410 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _412 = _410.x;
    float _424 = dot(vec4(_412, _410.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _441 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _378.x) * 2.0) - ((((_412 - _424) * cbMtdParam._m0[23u].w) + _424) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3801 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _449 = (_442 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _450 = (_442 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _451 = (_442 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _468 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _488 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _490 = _488.x;
    float _500 = dot(vec4(_490, _488.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _514 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _378.y) * 2.0) - ((((_490 - _500) * cbMtdParam._m0[23u].w) + _500) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3812 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _522 = (_515 * ((_468.x * cbMtdParam._m0[13u].x) - _449)) + _449;
    float _523 = (_515 * ((_468.y * cbMtdParam._m0[13u].y) - _450)) + _450;
    float _524 = (_515 * ((_468.z * cbMtdParam._m0[13u].z) - _451)) + _451;
    float _528 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _522;
    float _531 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _523;
    float _534 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _524;
    float _541 = ((_522 - _528) * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) + _528;
    float _542 = ((_523 - _531) * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) + _531;
    float _543 = ((_524 - _534) * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) + _534;
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _625 = _623.x;
    float _626 = _623.y;
    float _627 = _623.z;
    float _634 = ((_606.x - _625) * _442) + _625;
    float _635 = ((_606.y - _626) * _442) + _626;
    float _636 = ((_606.z - _627) * _442) + _627;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _661 = ((_648.z - _636) * _515) + _636;
    float _664 = ((((_648.x - _634) * _515) + _634) * 2.0) + (-1.0);
    float _665 = ((((_648.y - _635) * _515) + _635) * 2.0) + (-1.0);
    float _666 = dot(vec2(_664, _665), vec2(_664, _665));
    float _3823 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _671 = sqrt(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))));
    vec4 _689 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _701 = (_664 + ((((_581.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_689.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _702 = (_665 + ((((_581.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_689.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _705 = fma(_671, _243, fma(_702, _250, _701 * _236));
    float _708 = fma(_671, _244, fma(_702, _251, _701 * _237));
    float _711 = fma(_671, _245, fma(_702, _252, _701 * _238));
    float _715 = inversesqrt(dot(vec3(_705, _708, _711), vec3(_705, _708, _711)));
    vec4 _742 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _744 = _742.x;
    float _745 = 1.0 - _744;
    float _754 = (cbMtdParam._m0[19u].x + dot(vec4(_715 * _705, _715 * _708, _715 * _711, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_744 - _745) * cbMtdParam._m0[24u].z) + _745) * cbMtdParam._m0[21u].z);
    float _3834 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _755 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _762 = (_755 * ((_562.x * cbMtdParam._m0[18u].x) - _541)) + _541;
    float _763 = (_755 * ((_562.y * cbMtdParam._m0[18u].y) - _542)) + _542;
    float _764 = (_755 * ((_562.z * cbMtdParam._m0[18u].z) - _543)) + _543;
    vec4 _790 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _792 = _790.x;
    float _810 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w)).x - _792) * _442) + _792;
    float _827 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _295) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _296) + cbTextureTilingScale._m0[21u].w)).x - _810) * _515) + _810;
    float _831 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _827) * cbMtdParam._m0[19u].z) + _827;
    float _833 = _831 - (_831 * _755);
    float _838 = (((_581.z - _661) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _661;
    float _842 = ((_689.z - _838) * cbMtdParam._m0[19u].w) + _838;
    vec4 _855 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _862 = (_855.x * 2.0) + (-1.0);
    float _863 = (_855.y * 2.0) + (-1.0);
    float _864 = dot(vec2(_862, _863), vec2(_862, _863));
    float _3845 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _872 = ((_855.z - _842) * _755) + _842;
    float _882 = ((sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) - _671) * _755) + _671;
    float _885 = (((_862 - _701) * _755) + _701) + (cbMtdParam._m0[21u].x * _701);
    float _886 = (((_863 - _702) * _755) + _702) + (cbMtdParam._m0[21u].x * _702);
    float _890 = cbMtdParam._m0[22u].x + _689.w;
    float _893 = fma(_882, _243, fma(_886, _250, _885 * _236));
    float _896 = fma(_882, _244, fma(_886, _251, _885 * _237));
    float _899 = fma(_882, _245, fma(_886, _252, _885 * _238));
    float _903 = inversesqrt(dot(vec3(_893, _896, _899), vec3(_893, _896, _899)));
    float _904 = _903 * _893;
    float _905 = _903 * _896;
    float _906 = _903 * _899;
    float _3856 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _907 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _3878 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _3889 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _3900 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _3911 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _912 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _926 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _977 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _967);
    float _978 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _967);
    float _979 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _967);
    float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
    float _984 = _977 * _983;
    float _985 = _978 * _983;
    float _986 = _979 * _983;
    float _992 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _993 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1011 = fma(_906, cbSceneParam._m0[5u].z, fma(_905, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _904));
    float _1014 = fma(_906, cbSceneParam._m0[6u].z, fma(_905, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _904));
    float _1017 = fma(_906, cbSceneParam._m0[7u].z, fma(_905, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _904));
    uint _1031 = (_276 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1037 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_1031].x;
    float _1038 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_1031].y;
    float _1039 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_1031].z;
    float _3922 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1040 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1041 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1042 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1043 = 1.0 - _912;
    float _1044 = _1040 * _1043;
    float _1045 = _1041 * _1043;
    float _1046 = _1042 * _1043;
    float _1051 = (_1040 + (-0.039999999105930328369140625)) * _912;
    float _1052 = (_1041 + (-0.039999999105930328369140625)) * _912;
    float _1053 = (_1042 + (-0.039999999105930328369140625)) * _912;
    float _1054 = _1051 + 0.039999999105930328369140625;
    float _1056 = _1052 + 0.039999999105930328369140625;
    float _1057 = _1053 + 0.039999999105930328369140625;
    vec4 _1066 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _992, cbSceneParam._m0[86u].y * _993));
    float _1070 = ((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * TEXCOORD_5.w) * _1066.x;
    float _1071 = dot(vec3(_904, _905, _906), vec3(_984, _985, _986));
    float _1074 = _1071 * 2.0;
    float _1078 = (_1074 * _904) - _984;
    float _1079 = (_1074 * _905) - _985;
    float _1080 = (_1074 * _906) - _986;
    float _1084 = abs(dot(vec3(_984, _985, _986), vec3(_904, _905, _906)));
    float _3955 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _1086 = sqrt(_907);
    float _1099 = exp2((_1086 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1086 * 3.0));
    float _1105 = (1.0 - _1099) * ((_1086 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1106 = _1099 * _1086;
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1443;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1168 = fma(_1142, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1134));
        float _1172 = fma(_1142, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1134));
        float _1176 = fma(_1142, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1134));
        float _1201 = _1134 + _904;
        float _1202 = _1138 + _905;
        float _1203 = _1142 + _906;
        float _1213 = fma(_1203, cbModelParam._m0[26u].z, fma(_1202, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1201)) - _1168;
        float _1214 = fma(_1203, cbModelParam._m0[27u].z, fma(_1202, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1201)) - _1172;
        float _1215 = fma(_1203, cbModelParam._m0[28u].z, fma(_1202, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1201)) - _1176;
        float _1219 = inversesqrt(dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215)));
        float _1232 = ((_1219 * _1213) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1168 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1219 * _1214) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1172 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1219 * _1215) / cbModelParam._m0[34u].z) + ((((((_1176 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        float _1271 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1237.x + (-0.5));
        float _1273 = _1271 * (_1237.y + (-0.5));
        float _1274 = _1271 * (_1237.z + (-0.5));
        float _1281 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1244.x + (-0.5));
        float _1283 = _1281 * (_1244.y + (-0.5));
        float _1284 = _1281 * (_1244.z + (-0.5));
        float _1291 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1251.x + (-0.5));
        float _1293 = _1291 * (_1251.y + (-0.5));
        float _1294 = _1291 * (_1251.z + (-0.5));
        float _1301 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1258.x + (-0.5));
        float _1303 = _1301 * (_1258.y + (-0.5));
        float _1304 = _1301 * (_1258.z + (-0.5));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = _1272 * 0.5;
        float _1309 = _1282 * 0.5;
        float _1310 = _1292 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1325 = (dot(vec3(_904, _905, _906), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1335 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4003 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1337 + 1.0))) + _1342) * _1305;
        float _1352 = _1273 * 0.5;
        float _1353 = _1283 * 0.5;
        float _1354 = _1293 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_904, _905, _906), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4036 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1379 + 1.0))) + _1384) * _1306;
        float _1394 = _1274 * 0.5;
        float _1395 = _1284 * 0.5;
        float _1396 = _1294 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_904, _905, _906), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4069 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1421 + 1.0))) + _1426) * _1307;
        _1443 = _1274;
        _1445 = _1273;
        _1446 = _1272;
        _1447 = _1284;
        _1448 = _1283;
        _1449 = _1282;
        _1450 = _1294;
        _1451 = _1293;
        _1452 = _1292;
        _1453 = _1307;
        _1454 = _1306;
        _1455 = _1305;
        _1456 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1457 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1458 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
    }
    else
    {
        _1443 = _1444;
        _1445 = _1444;
        _1446 = _1444;
        _1447 = _1444;
        _1448 = _1444;
        _1449 = _1444;
        _1450 = _1444;
        _1451 = _1444;
        _1452 = _1444;
        _1453 = _1444;
        _1454 = _1444;
        _1455 = _1444;
        _1456 = 0.0;
        _1457 = 0.0;
        _1458 = 0.0;
    }
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1482 = fma(_1142, cbModelParam._m0[30u].z, fma(_1138, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1134));
        float _1486 = fma(_1142, cbModelParam._m0[31u].z, fma(_1138, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1134));
        float _1490 = fma(_1142, cbModelParam._m0[32u].z, fma(_1138, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1134));
        float _1513 = _1134 + _904;
        float _1514 = _1138 + _905;
        float _1515 = _1142 + _906;
        float _1525 = fma(_1515, cbModelParam._m0[30u].z, fma(_1514, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1513)) - _1482;
        float _1526 = fma(_1515, cbModelParam._m0[31u].z, fma(_1514, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1513)) - _1486;
        float _1527 = fma(_1515, cbModelParam._m0[32u].z, fma(_1514, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1513)) - _1490;
        float _1531 = inversesqrt(dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527)));
        float _1544 = ((_1531 * _1525) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1482 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1545 = ((_1531 * _1526) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1486 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1546 = ((_1531 * _1527) / cbModelParam._m0[35u].z) + ((((((_1490 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        float _1581 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1548.x + (-0.5));
        float _1583 = _1581 * (_1548.y + (-0.5));
        float _1584 = _1581 * (_1548.z + (-0.5));
        float _1591 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1555.x + (-0.5));
        float _1593 = _1591 * (_1555.y + (-0.5));
        float _1594 = _1591 * (_1555.z + (-0.5));
        float _1601 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1562.x + (-0.5));
        float _1603 = _1601 * (_1562.y + (-0.5));
        float _1604 = _1601 * (_1562.z + (-0.5));
        float _1611 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1569.x + (-0.5));
        float _1613 = _1611 * (_1569.y + (-0.5));
        float _1614 = _1611 * (_1569.z + (-0.5));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = _1582 * 0.5;
        float _1619 = _1592 * 0.5;
        float _1620 = _1602 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_904, _905, _906), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4132 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1645 + 1.0))) + _1650) * _1615;
        float _1660 = _1583 * 0.5;
        float _1661 = _1593 * 0.5;
        float _1662 = _1603 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_904, _905, _906), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4165 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1687 + 1.0))) + _1692) * _1616;
        float _1702 = _1584 * 0.5;
        float _1703 = _1594 * 0.5;
        float _1704 = _1604 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_904, _905, _906), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4198 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1729 + 1.0))) + _1734) * _1617;
        _1751 = _1584;
        _1752 = _1583;
        _1753 = _1582;
        _1754 = _1594;
        _1755 = _1593;
        _1756 = _1592;
        _1757 = _1604;
        _1758 = _1603;
        _1759 = _1602;
        _1760 = _1617;
        _1761 = _1616;
        _1762 = _1615;
        _1763 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
        _1765 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
    }
    else
    {
        _1751 = _1444;
        _1752 = _1444;
        _1753 = _1444;
        _1754 = _1444;
        _1755 = _1444;
        _1756 = _1444;
        _1757 = _1444;
        _1758 = _1444;
        _1759 = _1444;
        _1760 = _1444;
        _1761 = _1444;
        _1762 = _1444;
        _1763 = 0.0;
        _1764 = 0.0;
        _1765 = 0.0;
    }
    float _1775 = (cbModelParam._m0[1u].x * (_1763 - _1456)) + _1456;
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1457)) + _1457;
    float _1777 = (cbModelParam._m0[1u].x * (_1765 - _1458)) + _1458;
    float _1798 = fma(_1777, cbSceneParam._m0[89u].z, fma(_1776, cbSceneParam._m0[89u].y, _1775 * cbSceneParam._m0[89u].x));
    float _1801 = fma(_1777, cbSceneParam._m0[90u].z, fma(_1776, cbSceneParam._m0[90u].y, _1775 * cbSceneParam._m0[90u].x));
    float _1804 = fma(_1777, cbSceneParam._m0[91u].z, fma(_1776, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1775));
    float _1819 = _1078 * 0.5;
    float _1820 = _1079 * 0.5;
    float _1821 = _1080 * 0.5;
    float _1822 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1753, _1756, _1759, _1762));
    float _1825 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1828 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1751, _1754, _1757, _1760));
    float _1862;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1835 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1443, _1447, _1450, _1453));
        float _1839 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1445, _1448, _1451, _1454));
        float _1843 = dot(vec4(_1819, _1820, _1821, 1.0), vec4(_1446, _1449, _1452, _1455));
        float _1850 = dot(vec4(cbModelParam._m0[39u]), vec4(_1819, _1820, _1821, 1.0));
        _1862 = dot(vec3(isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1850) ? 0.0 : (isnan(0.0) ? _1850 : max(0.0, _1850))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1862 = 1.0;
    }
    float _1873;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1864 = dot(vec4(cbModelParam._m0[40u]), vec4(_1819, _1820, _1821, 1.0));
        _1873 = dot(vec3(isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1864) ? 0.0 : (isnan(0.0) ? _1864 : max(0.0, _1864))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1873 = 1.0;
    }
    float _1877 = (_1873 * cbModelParam._m0[1u].x) + (_1862 * (1.0 - cbModelParam._m0[1u].x));
    float _1887 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _907);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1887 : min(cbModelParam._m0[25u].z, _1887));
    float _1968;
    float _1970;
    float _1972;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1935 = fma(_1142, cbModelParam._m0[13u].z, fma(_1138, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1134)) + cbModelParam._m0[13u].w;
        float _1939 = fma(_1142, cbModelParam._m0[14u].z, fma(_1138, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1134)) + cbModelParam._m0[14u].w;
        float _1943 = fma(_1142, cbModelParam._m0[15u].z, fma(_1138, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1134)) + cbModelParam._m0[15u].w;
        float _1946 = fma(_1080, cbModelParam._m0[13u].z, fma(_1079, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1078));
        float _1949 = fma(_1080, cbModelParam._m0[14u].z, fma(_1079, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1078));
        float _1952 = fma(_1080, cbModelParam._m0[15u].z, fma(_1079, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1078));
        float _1980;
        if (_1946 > 0.0)
        {
            _1980 = abs((1.0 - _1935) / _1946);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1935 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1980 = frontier_phi_14_12_ladder;
        }
        float _2182;
        if (_1949 > 0.0)
        {
            _2182 = abs((1.0 - _1939) / _1949);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1939 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2182 = frontier_phi_23_19_ladder;
        }
        float _2436;
        if (_1952 > 0.0)
        {
            _2436 = abs((1.0 - _1943) / _1952);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1943 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2436 = frontier_phi_35_30_ladder;
        }
        float _2438 = isnan(_2182) ? _1980 : (isnan(_1980) ? _2182 : min(_1980, _2182));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1946) + _1935;
        float _2444 = (_2439 * _1949) + _1939;
        float _2445 = (_2439 * _1952) + _1943;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2446;
        float _2450 = _2446 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 > _2450) || ((_2444 < _2448) || ((_2443 < _2448) || (_2443 > _2450))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2445, cbModelParam._m0[9u].z, fma(_2444, cbModelParam._m0[9u].y, _2443 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2445, cbModelParam._m0[10u].z, fma(_2444, cbModelParam._m0[10u].y, _2443 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2445, cbModelParam._m0[11u].z, fma(_2444, cbModelParam._m0[11u].y, _2443 * cbModelParam._m0[11u].x))), _1888);
            frontier_phi_13_35_ladder = _2573.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2573.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2573.x * cbModelParam._m0[1u].y;
        }
        _1968 = frontier_phi_13_35_ladder_2;
        _1970 = frontier_phi_13_35_ladder_1;
        _1972 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1956 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1078, _1079, _1080), _1888);
        _1968 = _1956.x * cbModelParam._m0[1u].y;
        _1970 = _1956.y * cbModelParam._m0[1u].y;
        _1972 = _1956.z * cbModelParam._m0[1u].y;
    }
    float _1976 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _907);
    float _1977 = isnan(_1976) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1976 : min(cbModelParam._m0[25u].w, _1976));
    float _2066;
    float _2068;
    float _2070;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2030 = fma(_1142, cbModelParam._m0[21u].z, fma(_1138, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1134)) + cbModelParam._m0[21u].w;
        float _2034 = fma(_1142, cbModelParam._m0[22u].z, fma(_1138, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1134)) + cbModelParam._m0[22u].w;
        float _2038 = fma(_1142, cbModelParam._m0[23u].z, fma(_1138, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1134)) + cbModelParam._m0[23u].w;
        float _2041 = fma(_1080, cbModelParam._m0[21u].z, fma(_1079, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1078));
        float _2044 = fma(_1080, cbModelParam._m0[22u].z, fma(_1079, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1078));
        float _2047 = fma(_1080, cbModelParam._m0[23u].z, fma(_1079, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1078));
        float _2187;
        if (_2041 > 0.0)
        {
            _2187 = abs((1.0 - _2030) / _2041);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2030 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2187 = frontier_phi_25_21_ladder;
        }
        float _2463;
        if (_2044 > 0.0)
        {
            _2463 = abs((1.0 - _2034) / _2044);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2034 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2463 = frontier_phi_37_32_ladder;
        }
        float _2676;
        if (_2047 > 0.0)
        {
            _2676 = abs((1.0 - _2038) / _2047);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2038 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2676 = frontier_phi_46_43_ladder;
        }
        float _2678 = isnan(_2463) ? _2187 : (isnan(_2187) ? _2463 : min(_2187, _2463));
        float _2679 = isnan(_2676) ? _2678 : (isnan(_2678) ? _2676 : min(_2678, _2676));
        float _2683 = (_2679 * _2041) + _2030;
        float _2684 = (_2679 * _2044) + _2034;
        float _2685 = (_2679 * _2047) + _2038;
        float _2686 = _2679 * 9.9999997473787516355514526367188e-05;
        float _2687 = (-1.0) - _2686;
        float _2689 = _2686 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2685 > _2689) || ((_2685 < _2687) || ((_2684 > _2689) || ((_2684 < _2687) || ((_2683 < _2687) || (_2683 > _2689))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2685, cbModelParam._m0[17u].z, fma(_2684, cbModelParam._m0[17u].y, _2683 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2685, cbModelParam._m0[18u].z, fma(_2684, cbModelParam._m0[18u].y, _2683 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2685, cbModelParam._m0[19u].z, fma(_2684, cbModelParam._m0[19u].y, _2683 * cbModelParam._m0[19u].x))), _1977);
            frontier_phi_22_46_ladder = _2884.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2884.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2884.x * cbModelParam._m0[1u].z;
        }
        _2066 = frontier_phi_22_46_ladder_2;
        _2068 = frontier_phi_22_46_ladder_1;
        _2070 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2050 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1078, _1079, _1080), _1977);
        _2066 = _2050.x * cbModelParam._m0[1u].z;
        _2068 = _2050.y * cbModelParam._m0[1u].z;
        _2070 = _2050.z * cbModelParam._m0[1u].z;
    }
    float _2083 = (((_1105 * _1054) + _1106) * _1070) * ((cbModelParam._m0[1u].w * (_2066 - _1968)) + _1968);
    float _2085 = (((_1105 * _1056) + _1106) * _1070) * ((cbModelParam._m0[1u].w * (_2068 - _1970)) + _1970);
    float _2087 = (((_1105 * _1057) + _1106) * _1070) * ((cbModelParam._m0[1u].w * (_2070 - _1972)) + _1972);
    float _2090 = fma(_2087, cbSceneParam._m0[89u].z, fma(_2085, cbSceneParam._m0[89u].y, _2083 * cbSceneParam._m0[89u].x));
    float _2093 = fma(_2087, cbSceneParam._m0[90u].z, fma(_2085, cbSceneParam._m0[90u].y, _2083 * cbSceneParam._m0[90u].x));
    float _2096 = fma(_2087, cbSceneParam._m0[91u].z, fma(_2085, cbSceneParam._m0[91u].y, _2083 * cbSceneParam._m0[91u].x));
    uvec4 _2106 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2108 = _2106.x * 14u;
    uint _2109 = _2108 + 13u;
    float _2116 = _1070 + (-1.0);
    float _2121 = (cbLight._m0[_2109].x * _2116) + 1.0;
    float _2122 = (cbLight._m0[_2109].y * _2116) + 1.0;
    float _2123 = (cbLight._m0[_2109].z * _2116) + 1.0;
    float _2124 = (cbLight._m0[_2109].w * _2116) + 1.0;
    uint _2125 = _2108 + 5u;
    float _2131 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    uint _2135 = _2108 + 4u;
    float _2141 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2145 = _2108 | 1u;
    float _2156 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_904, _905, _906));
    float _2159 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_904, _905, _906));
    float _4334 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _4345 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2164 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * 0.3183098733425140380859375;
    float _2166 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2173 = ((cbLight._m0[_2125].x * _2131) * _2166) + ((cbLight._m0[_2135].x * _2141) * _2164);
    float _2174 = ((_2131 * cbLight._m0[_2125].y) * _2166) + ((_2141 * cbLight._m0[_2135].y) * _2164);
    float _2175 = ((_2131 * cbLight._m0[_2125].z) * _2166) + ((_2141 * cbLight._m0[_2135].z) * _2164);
    uvec4 _2179 = floatBitsToUint(cbLight._m0[_2108 + 12u]);
    bool _2181 = _2179.x == 0u;
    float _2192;
    float _2194;
    float _2196;
    if (_2181)
    {
        _2192 = _2173;
        _2194 = _2174;
        _2196 = _2175;
    }
    else
    {
        uint _2200 = _2108 + 6u;
        float _2216 = (dot(vec3(cbLight._m0[_2108 + 2u].xyz), vec3(_904, _905, _906)) * 0.5) + 0.5;
        float _2217 = _2216 * _2216;
        float _4356 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2218 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2219 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2192 = (((cbLight._m0[_2200].x * 0.3183098733425140380859375) * _2218) * _2219) + _2173;
        _2194 = (((cbLight._m0[_2200].y * 0.3183098733425140380859375) * _2218) * _2219) + _2174;
        _2196 = (((cbLight._m0[_2200].z * 0.3183098733425140380859375) * _2218) * _2219) + _2175;
    }
    bool _2199 = _2179.y == 0u;
    float _2237;
    float _2239;
    float _2241;
    if (_2199)
    {
        _2237 = _2192;
        _2239 = _2194;
        _2241 = _2196;
    }
    else
    {
        uint _2407 = _2108 + 7u;
        float _2423 = (dot(vec3(cbLight._m0[_2108 + 3u].xyz), vec3(_904, _905, _906)) * 0.5) + 0.5;
        float _2424 = _2423 * _2423;
        float _4372 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2425 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2426 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2237 = (((cbLight._m0[_2407].x * 0.3183098733425140380859375) * _2425) * _2426) + _2192;
        _2239 = (((cbLight._m0[_2407].y * 0.3183098733425140380859375) * _2425) * _2426) + _2194;
        _2241 = (((cbLight._m0[_2407].z * 0.3183098733425140380859375) * _2425) * _2426) + _2196;
    }
    uint _2244 = _2108 + 8u;
    float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _907) * 0.949999988079071044921875);
    float _2258 = _2257 * _2257;
    float _2259 = cbLight._m0[_2108].x + _984;
    float _2260 = cbLight._m0[_2108].y + _985;
    float _2261 = cbLight._m0[_2108].z + _986;
    float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
    float _2266 = _2265 * _2259;
    float _2267 = _2265 * _2260;
    float _2268 = _2265 * _2261;
    float _2269 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2108].xyz));
    float _4388 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _4399 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _2273 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2274 = dot(vec3(_904, _905, _906), vec3(_2266, _2267, _2268));
    float _4410 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2278 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2266, _2267, _2268));
    float _4421 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2282 = _2258 * _2258;
    float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
    float _2294 = exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0);
    float _2295 = 0.959999978542327880859375 - _1051;
    float _2297 = 0.959999978542327880859375 - _1052;
    float _2298 = 0.959999978542327880859375 - _1053;
    float _2305 = 1.0 - _2258;
    float _2316 = (0.5 / (((_2273 * ((_2272 * _2305) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2305) + _2258) * _2272))) * _2272;
    float _4432 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2318 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
    uint _2329 = _2108 + 9u;
    float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _907) * 0.949999988079071044921875);
    float _2341 = _2340 * _2340;
    float _2342 = cbLight._m0[_2145].x + _984;
    float _2343 = cbLight._m0[_2145].y + _985;
    float _2344 = cbLight._m0[_2145].z + _986;
    float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
    float _2349 = _2348 * _2342;
    float _2350 = _2348 * _2343;
    float _2351 = _2348 * _2344;
    float _2352 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2145].xyz));
    float _4443 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2356 = dot(vec3(_904, _905, _906), vec3(_2349, _2350, _2351));
    float _4454 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2360 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2349, _2350, _2351));
    float _4465 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2364 = _2341 * _2341;
    float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
    float _2375 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
    float _2382 = 1.0 - _2341;
    float _2392 = (0.5 / (((_2273 * ((_2355 * _2382) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2382) + _2341) * _2355))) * _2355;
    float _4476 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2394 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
    float _2404 = (((((_2375 * _2295) + _1054) * cbLight._m0[_2329].x) * _2394) * _2131) + (((((_2294 * _2295) + _1054) * cbLight._m0[_2244].x) * _2318) * _2141);
    float _2405 = (((((_2375 * _2297) + _1056) * cbLight._m0[_2329].y) * _2394) * _2131) + (((((_2294 * _2297) + _1056) * cbLight._m0[_2244].y) * _2318) * _2141);
    float _2406 = (((((_2375 * _2298) + _1057) * cbLight._m0[_2329].z) * _2394) * _2131) + (((((_2294 * _2298) + _1057) * cbLight._m0[_2244].z) * _2318) * _2141);
    float _2468;
    float _2470;
    float _2472;
    if (_2181)
    {
        _2468 = _2404;
        _2470 = _2405;
        _2472 = _2406;
    }
    else
    {
        uint _2474 = _2108 + 2u;
        uint _2478 = _2108 + 10u;
        float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _907) * 0.949999988079071044921875);
        float _2493 = _2492 * _2492;
        float _2494 = cbLight._m0[_2474].x + _984;
        float _2495 = cbLight._m0[_2474].y + _985;
        float _2496 = cbLight._m0[_2474].z + _986;
        float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
        float _2501 = _2500 * _2494;
        float _2502 = _2500 * _2495;
        float _2503 = _2500 * _2496;
        float _2504 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2474].xyz));
        float _4487 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2508 = dot(vec3(_904, _905, _906), vec3(_2501, _2502, _2503));
        float _4498 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2512 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2501, _2502, _2503));
        float _4509 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2516 = _2493 * _2493;
        float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
        float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
        float _2534 = 1.0 - _2493;
        float _2544 = (0.5 / (((_2273 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2534) + _2493) * _2507))) * _2507;
        float _4520 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
        float _2547 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2468 = (((((_2527 * _2295) + _1054) * cbLight._m0[_2478].x) * _2546) * _2547) + _2404;
        _2470 = (((((_2527 * _2297) + _1056) * cbLight._m0[_2478].y) * _2546) * _2547) + _2405;
        _2472 = (((((_2527 * _2298) + _1057) * cbLight._m0[_2478].z) * _2546) * _2547) + _2406;
    }
    float _2582;
    float _2584;
    float _2586;
    if (_2199)
    {
        _2582 = _2468;
        _2584 = _2470;
        _2586 = _2472;
    }
    else
    {
        uint _2593 = _2108 + 3u;
        uint _2597 = _2108 + 11u;
        float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2593].w)) * _907) * 0.949999988079071044921875);
        float _2612 = _2611 * _2611;
        float _2613 = cbLight._m0[_2593].x + _984;
        float _2614 = cbLight._m0[_2593].y + _985;
        float _2615 = cbLight._m0[_2593].z + _986;
        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
        float _2620 = _2619 * _2613;
        float _2621 = _2619 * _2614;
        float _2622 = _2619 * _2615;
        float _2623 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2593].xyz));
        float _4536 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2627 = dot(vec3(_904, _905, _906), vec3(_2620, _2621, _2622));
        float _4547 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2631 = dot(vec3(cbLight._m0[_2593].xyz), vec3(_2620, _2621, _2622));
        float _4558 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2635 = _2612 * _2612;
        float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
        float _2646 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
        float _2653 = 1.0 - _2612;
        float _2663 = (0.5 / (((_2273 * ((_2626 * _2653) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2653) + _2612) * _2626))) * _2626;
        float _4569 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2665 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
        float _2666 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2582 = (((((_2646 * _2295) + _1054) * cbLight._m0[_2597].x) * _2665) * _2666) + _2468;
        _2584 = (((((_2646 * _2297) + _1056) * cbLight._m0[_2597].y) * _2665) * _2666) + _2470;
        _2586 = (((((_2646 * _2298) + _1057) * cbLight._m0[_2597].z) * _2665) * _2666) + _2472;
    }
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    if (_2106.y == 0u)
    {
        float _2741 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2742 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2741;
        float _2743 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2741;
        float _2744 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2741;
        uvec4 _2756 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2757 = _2756.x;
        uint _2768 = uint((float(_2756.y) * floor(float(uint(cbSceneParam._m0[85u].y * _993) / _2757))) + floor(float(uint(cbSceneParam._m0[85u].x * _992) / _2757)));
        float _2778 = (log2(_2744 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2779 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        uint _2782 = uint(isnan(14.0) ? _2779 : (isnan(_2779) ? 14.0 : min(_2779, 14.0)));
        uvec4 _2787 = texelFetch(g_lightClusterGridBuffer, int(((_2782 << 2u) + (_2768 << 6u)) >> 2u));
        uint _2788 = _2787.x;
        uint _2789 = _2756.z;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((((1u << ((_2789 >> 4u) & 15u)) + 4294967295u) & _2788) == 0u) || ((_2789 & 240u) == 0u))
        {
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
        }
        else
        {
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            uint _3040 = 0u;
            uint _3049;
            bool _3050;
            for (;;)
            {
                _3049 = texelFetch(g_lightClassification, int((((_2782 << 5u) + (_2768 << 9u)) + (_3040 << 2u)) >> 2u)).x;
                _3050 = _3049 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3050)
                {
                    frontier_phi_61_pred = _3034;
                    frontier_phi_61_pred_1 = _3039;
                    frontier_phi_61_pred_2 = _3038;
                    frontier_phi_61_pred_3 = _3037;
                    frontier_phi_61_pred_4 = _3036;
                    frontier_phi_61_pred_5 = _3035;
                }
                else
                {
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    uint _3164;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3036;
                    _3161 = _3037;
                    _3162 = _3038;
                    _3163 = _3039;
                    _3164 = _3049;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    for (;;)
                    {
                        uint _3168 = uint(findLSB(_3164)) + (_3040 << 5u);
                        uint _3165 = (_3164 + 4294967295u) & _3164;
                        uint _3170 = _3168 * 48u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 3u)).x));
                        uint _3190 = (_3168 * 48u) + 4u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 3u)).x));
                        uint _3209 = (_3168 * 48u) + 8u;
                        vec3 _3220 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x));
                        float _3224 = _3184.x - _2742;
                        float _3225 = _3184.y - _2743;
                        float _3226 = _3184.z - _2744;
                        float _3227 = dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226));
                        float _3230 = inversesqrt(_3227);
                        float _3231 = _3230 * _3224;
                        float _3232 = _3230 * _3225;
                        float _3233 = _3230 * _3226;
                        float _3234 = dot(vec3(_1011, _1014, _1017), vec3(_3231, _3232, _3233));
                        float _3239 = 1.0 - (_3227 * _3184.w);
                        float _4595 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3240 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3241 = sqrt(_3227) * _3203.w;
                        float _3244 = 1.39999997615814208984375 / (_3241 + 1.39999997615814208984375);
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3234) + _3245;
                        float _3251 = _3241 * _3241;
                        float _3255 = ((isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))) * _3240) / ((_3251 * 0.699999988079071044921875) + 1.0);
                        float _3259 = (-0.0) - _2742;
                        float _3260 = (-0.0) - _2743;
                        float _3261 = (-0.0) - _2744;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3266 = _3265 * _3259;
                        float _3267 = _3265 * _3260;
                        float _3268 = _3265 * _3261;
                        float _3276 = exp2(log2(1.0 / ((_3251 * 3.5) + 5.0)) * 0.25);
                        float _3277 = 1.0 - _1086;
                        float _3284 = sqrt(1.0 - ((1.0 - (_3277 * _3277)) * (1.0 - (_3276 * _3276))));
                        float _3285 = _3284 * _3284;
                        float _3286 = _3285 * _3285;
                        float _3287 = _3266 + _3231;
                        float _3288 = _3267 + _3232;
                        float _3289 = _3268 + _3233;
                        float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
                        float _3297 = dot(vec3(_1011, _1014, _1017), vec3(_3266, _3267, _3268));
                        float _4611 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3300 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3301 = dot(vec3(_1011, _1014, _1017), vec3(_3293 * _3287, _3293 * _3288, _3293 * _3289));
                        float _4622 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3304 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3308 = ((_3304 * _3304) * (_3286 + (-1.0))) + 1.0;
                        float _3309 = _3244 * _3285;
                        float _3310 = _3309 * _3309;
                        float _3313 = ((1.0 - _3310) * _3234) + _3310;
                        float _4633 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3314 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3315 = 1.0 - _3285;
                        float _3325 = (0.5 / (((_3314 * ((_3300 * _3315) + _3285)) + 9.9999999392252902907785028219223e-09) + (((_3314 * _3315) + _3285) * _3300))) * _3314;
                        float _4644 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3336 = (((_3286 * 3.1415927410125732421875) * (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) / ((_3308 * _3308) * ((_3251 * 2.1991131305694580078125) + 3.141590118408203125))) * _3240;
                        _3093 = (_3255 * _3203.x) + _3161;
                        _3094 = (_3255 * _3203.y) + _3162;
                        _3095 = (_3255 * _3203.z) + _3163;
                        _3090 = (_3336 * _3220.x) + _3158;
                        _3091 = (_3336 * _3220.y) + _3159;
                        _3092 = (_3336 * _3220.z) + _3160;
                        if (_3165 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3092;
                            _3161 = _3093;
                            _3162 = _3094;
                            _3163 = _3095;
                            _3164 = _3165;
                        }
                    }
                    frontier_phi_61_pred = _3090;
                    frontier_phi_61_pred_1 = _3095;
                    frontier_phi_61_pred_2 = _3094;
                    frontier_phi_61_pred_3 = _3093;
                    frontier_phi_61_pred_4 = _3092;
                    frontier_phi_61_pred_5 = _3091;
                }
                _2890 = frontier_phi_61_pred;
                _2900 = frontier_phi_61_pred_1;
                _2898 = frontier_phi_61_pred_2;
                _2896 = frontier_phi_61_pred_3;
                _2894 = frontier_phi_61_pred_4;
                _2892 = frontier_phi_61_pred_5;
                uint _3041 = _3040 + 1u;
                if (_3041 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3034 = _2890;
                    _3035 = _2892;
                    _3036 = _2894;
                    _3037 = _2896;
                    _3038 = _2898;
                    _3039 = _2900;
                    _3040 = _3041;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
        }
        uvec4 _2903 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2904 = _2903.z;
        uint _2906 = (_2904 >> 8u) & 15u;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        if (((4294967295u << _2906) & _2788) == 0u)
        {
            _3002 = _2889;
            _3004 = _2891;
            _3006 = _2893;
            _3008 = _2895;
            _3010 = _2897;
            _3012 = _2899;
        }
        else
        {
            float _3027 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
            float _3028 = _3027 * _2742;
            float _3029 = _3027 * _2743;
            float _3030 = _3027 * _2744;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2906 < ((_2904 >> 12u) & 15u))
            {
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3141 = _2889;
                float _3142 = _2891;
                float _3143 = _2893;
                float _3144 = _2895;
                float _3145 = _2897;
                float _3146 = _2899;
                uint _3147 = _2906;
                uint _3156;
                bool _3157;
                for (;;)
                {
                    _3156 = texelFetch(g_lightClassification, int((((_2782 << 5u) + (_2768 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                    _3157 = _3156 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3157)
                    {
                        frontier_phi_67_pred = _3144;
                        frontier_phi_67_pred_1 = _3145;
                        frontier_phi_67_pred_2 = _3146;
                        frontier_phi_67_pred_3 = _3143;
                        frontier_phi_67_pred_4 = _3142;
                        frontier_phi_67_pred_5 = _3141;
                    }
                    else
                    {
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3354 = _3141;
                        float _3355 = _3142;
                        float _3356 = _3143;
                        float _3357 = _3144;
                        float _3358 = _3145;
                        float _3359 = _3146;
                        uint _3360 = _3156;
                        uint _3361;
                        vec4 _3386;
                        float _3387;
                        vec4 _3402;
                        vec3 _3414;
                        vec4 _3429;
                        vec4 _3444;
                        float _3490;
                        bool _3491;
                        for (;;)
                        {
                            uint _3371 = ((_3147 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3360));
                            _3361 = (_3360 + 4294967295u) & _3360;
                            uint _3373 = _3371 * 40u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            _3387 = _3386.w;
                            uint _3389 = (_3371 * 40u) + 4u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3404 = (_3371 * 40u) + 8u;
                            _3414 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x));
                            uint _3416 = (_3371 * 40u) + 16u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3431 = (_3371 * 40u) + 20u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3446 = (_3371 * 40u) + 24u;
                            vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3465 = (_3371 * 40u) + 28u;
                            vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            _3490 = fma(_2744, _3478.z, fma(_2743, _3478.y, _3478.x * _2742)) + _3478.w;
                            _3491 = !((fma(_2744, _3459.z, fma(_2743, _3459.y, _3459.x * _2742)) + _3459.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3491)
                            {
                                float _3518 = _3386.x - _2742;
                                float _3519 = _3386.y - _2743;
                                float _3520 = _3386.z - _2744;
                                float _3521 = dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520));
                                float _3524 = inversesqrt(_3521);
                                float _3525 = _3524 * _3518;
                                float _3526 = _3524 * _3519;
                                float _3527 = _3524 * _3520;
                                float _3531 = 1.0 - (_3521 / (_3387 * _3387));
                                float _4655 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3536 = sqrt(_3521) * _3402.w;
                                float _3538 = 1.39999997615814208984375 / (_3536 + 1.39999997615814208984375);
                                float _3539 = _3538 * _3538;
                                float _3542 = ((1.0 - _3539) * dot(vec3(_3525, _3526, _3527), vec3(_1011, _1014, _1017))) + _3539;
                                float _3545 = _3536 * _3536;
                                float _3549 = (fma(_2744, _3429.z, fma(_2743, _3429.y, _3429.x * _2742)) + _3429.w) / _3490;
                                float _3550 = (fma(_2744, _3444.z, fma(_2743, _3444.y, _3444.x * _2742)) + _3444.w) / _3490;
                                float _3554 = 1.0 - dot(vec2(_3549, _3550), vec2(_3549, _3550));
                                float _4671 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3555 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3556 = _3555 * (((isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0))) * _3532) / ((_3545 * 0.699999988079071044921875) + 1.0));
                                float _3568 = exp2(log2(1.0 / ((_3545 * 3.5) + 5.0)) * 0.25);
                                float _3569 = 1.0 - _1086;
                                float _3576 = sqrt(1.0 - ((1.0 - (_3569 * _3569)) * (1.0 - (_3568 * _3568))));
                                float _3577 = _3576 * _3576;
                                float _3578 = _3577 * _3577;
                                float _3579 = _3525 - _3028;
                                float _3580 = _3526 - _3029;
                                float _3581 = _3527 - _3030;
                                float _3585 = inversesqrt(dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581)));
                                float _3589 = dot(vec3(_1011, _1014, _1017), vec3((-0.0) - _3028, (-0.0) - _3029, (-0.0) - _3030));
                                float _4682 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3592 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3593 = dot(vec3(_1011, _1014, _1017), vec3(_3585 * _3579, _3585 * _3580, _3585 * _3581));
                                float _4693 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3596 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3600 = ((_3596 * _3596) * (_3578 + (-1.0))) + 1.0;
                                float _3601 = _3538 * _3577;
                                float _3602 = _3601 * _3601;
                                float _3608 = ((1.0 - _3602) * dot(vec3(_1011, _1014, _1017), vec3(_3525, _3526, _3527))) + _3602;
                                float _4704 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3609 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3610 = 1.0 - _3577;
                                float _3620 = (0.5 / (((_3609 * ((_3592 * _3610) + _3577)) + 9.9999999392252902907785028219223e-09) + (((_3609 * _3610) + _3577) * _3592))) * _3609;
                                float _4715 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3630 = (_3555 * _3532) * (((_3578 * 3.1415927410125732421875) * (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) / ((_3600 * _3600) * ((_3545 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3630 * _3414.x;
                                frontier_phi_73_pred_1 = _3630 * _3414.y;
                                frontier_phi_73_pred_2 = _3556 * _3402.z;
                                frontier_phi_73_pred_3 = _3556 * _3402.y;
                                frontier_phi_73_pred_4 = _3556 * _3402.x;
                                frontier_phi_73_pred_5 = _3630 * _3414.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3634 = frontier_phi_73_pred;
                            _3635 = frontier_phi_73_pred_1;
                            _3639 = frontier_phi_73_pred_2;
                            _3638 = frontier_phi_73_pred_3;
                            _3637 = frontier_phi_73_pred_4;
                            _3636 = frontier_phi_73_pred_5;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            if (_3361 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3361;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3344;
                        frontier_phi_67_pred_1 = _3345;
                        frontier_phi_67_pred_2 = _3346;
                        frontier_phi_67_pred_3 = _3343;
                        frontier_phi_67_pred_4 = _3342;
                        frontier_phi_67_pred_5 = _3341;
                    }
                    _3009 = frontier_phi_67_pred;
                    _3011 = frontier_phi_67_pred_1;
                    _3013 = frontier_phi_67_pred_2;
                    _3007 = frontier_phi_67_pred_3;
                    _3005 = frontier_phi_67_pred_4;
                    _3003 = frontier_phi_67_pred_5;
                    uint _3148 = _3147 + 1u;
                    if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3141 = _3003;
                        _3142 = _3005;
                        _3143 = _3007;
                        _3144 = _3009;
                        _3145 = _3011;
                        _3146 = _3013;
                        _3147 = _3148;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3011;
                frontier_phi_55_56_ladder_1 = _3013;
                frontier_phi_55_56_ladder_2 = _3009;
                frontier_phi_55_56_ladder_3 = _3007;
                frontier_phi_55_56_ladder_4 = _3005;
                frontier_phi_55_56_ladder_5 = _3003;
            }
            else
            {
                frontier_phi_55_56_ladder = _2897;
                frontier_phi_55_56_ladder_1 = _2899;
                frontier_phi_55_56_ladder_2 = _2895;
                frontier_phi_55_56_ladder_3 = _2893;
                frontier_phi_55_56_ladder_4 = _2891;
                frontier_phi_55_56_ladder_5 = _2889;
            }
            _3002 = frontier_phi_55_56_ladder_5;
            _3004 = frontier_phi_55_56_ladder_4;
            _3006 = frontier_phi_55_56_ladder_3;
            _3008 = frontier_phi_55_56_ladder_2;
            _3010 = frontier_phi_55_56_ladder;
            _3012 = frontier_phi_55_56_ladder_1;
        }
        float _3017 = isnan(1.0) ? _1070 : (isnan(_1070) ? 1.0 : min(_1070, 1.0));
        _2801 = (_3017 * _3008) + _2237;
        _2803 = (_3017 * _3010) + _2239;
        _2805 = (_3017 * _3012) + _2241;
        _2807 = ((_3002 * _1054) * _3017) + _2582;
        _2809 = ((_3004 * _1056) * _3017) + _2584;
        _2811 = ((_3006 * _1057) * _3017) + _2586;
    }
    else
    {
        _2801 = _2237;
        _2803 = _2239;
        _2805 = _2241;
        _2807 = _2582;
        _2809 = _2584;
        _2811 = _2586;
    }
    float _4731 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _4742 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _4753 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    uint _2831 = _276 + 6u;
    float _2839 = _992 / cbSceneParam._m0[86u].x;
    float _2840 = _993 / cbSceneParam._m0[86u].y;
    vec4 _2854 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, (log2((isnan(cbSceneParam._m0[77u].w) ? _926 : (isnan(_926) ? cbSceneParam._m0[77u].w : min(_926, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2856 = _2854.x;
    float _2857 = _2854.y;
    float _2858 = _2854.z;
    float _2859 = _2854.w;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    if (_926 > cbSceneParam._m0[78u].w)
    {
        float _2914 = isnan(_926) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _926 : min(cbSceneParam._m0[80u].w, _926));
        float _2915 = _2914 / _926;
        float _2926 = _2915 * _977;
        float _2927 = _978 * _2915;
        float _2928 = (-0.0) - _2927;
        float _2930 = _2915 * _979;
        float _2932 = (cbSceneParam._m0[77u].w * _2928) / _2914;
        float _2933 = _2932 + cbSceneParam._m0[79u].w;
        float _2934 = cbSceneParam._m0[79u].w - _2927;
        float _2940 = sqrt(((_2926 * _2926) + (_2927 * _2927)) + (_2930 * _2930));
        float _2943 = (1.0 - (cbSceneParam._m0[77u].w / _2914)) * _2940;
        float _2948 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2950 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3103;
        if (abs((_2928 - _2932) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3103 = ((((_2933 > 0.0) ? exp2(_2948 * _2933) : (2.0 - exp2(_2950 * _2933))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2943;
        }
        else
        {
            float _3063 = 1.0 / cbSceneParam._m0[80u].x;
            float _3064 = isnan(_2934) ? _2933 : (isnan(_2933) ? _2934 : max(_2933, _2934));
            float _3065 = isnan(_2934) ? _2933 : (isnan(_2933) ? _2934 : min(_2933, _2934));
            float _3074 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : min(_3064, 0.0));
            float _3075 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : min(_3065, 0.0));
            _3103 = ((abs(_2940 / _2928) * cbSceneParam._m0[80u].y) * ((((_3074 - _3075) * 2.0) - ((exp2(_2948 * (isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0)))) - exp2(_2948 * (isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0))))) * _3063)) - ((exp2(_2950 * _3074) - exp2(_2950 * _3075)) * _3063))) + (_2943 * cbSceneParam._m0[80u].z);
        }
        vec4 _3105 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, 1.0), 0.0);
        float _3114 = exp2((_3103 * (-1.44269502162933349609375)) * (1.0 - _3105.w));
        float _3115 = log2(_3114);
        float _3131 = log2(_2859);
        _2952 = (exp2(_3131 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].x)) * _3105.x) / cbSceneParam._m0[78u].x)) + _2856;
        _2954 = (exp2(_3131 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].y)) * _3105.y) / cbSceneParam._m0[78u].y)) + _2857;
        _2956 = (exp2(_3131 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3115 * cbSceneParam._m0[78u].z)) * _3105.z) / cbSceneParam._m0[78u].z)) + _2858;
        _2958 = _3114 * _2859;
    }
    else
    {
        _2952 = _2856;
        _2954 = _2857;
        _2956 = _2858;
        _2958 = _2859;
    }
    float _2970 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2971 = _2970 == 3.0;
    float _2972 = log2(_2958);
    float _2979 = exp2(_2972 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2801 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1070))) + ((_2807 + ((isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))) * _1877)) * cbPerFrame._m0[3u].x));
    float _2980 = exp2(_2972 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2803 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1070))) + ((_2809 + ((isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0))) * _1877)) * cbPerFrame._m0[3u].x));
    float _2981 = exp2(_2972 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2805 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1070))) + ((_2811 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1877)) * cbPerFrame._m0[3u].x));
    float _2990 = (_2970 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2990 * (_2971 ? _2979 : (_2979 + (cbSceneParam._m0[72u].w * _2952)));
    SV_Target.y = _2990 * (_2971 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2954)));
    SV_Target.z = _2990 * (_2971 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2956)));
    SV_Target.w = cbInstanceData._m0[_2831].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2831].w;
}


