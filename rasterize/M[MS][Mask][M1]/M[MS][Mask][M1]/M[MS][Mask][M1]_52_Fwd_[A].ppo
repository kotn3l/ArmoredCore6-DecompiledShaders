#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1288;
float _3670;
float _3671;
float _3672;
float _3673;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _392 = _390.x;
    float _404 = dot(vec4(_392, _390.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _354.x) * 2.0) - ((((_392 - _404) * cbMtdParam._m0[23u].w) + _404) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3682 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _429 = (_422 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _430 = (_422 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _431 = (_422 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _468 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _470 = _468.x;
    float _480 = dot(vec4(_470, _468.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _494 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _354.y) * 2.0) - ((((_470 - _480) * cbMtdParam._m0[23u].w) + _480) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3693 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _508 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_495 * ((_448.x * cbMtdParam._m0[13u].x) - _429)) + _429);
    float _511 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_495 * ((_448.y * cbMtdParam._m0[13u].y) - _430)) + _430);
    float _514 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_495 * ((_448.z * cbMtdParam._m0[13u].z) - _431)) + _431);
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _548 = _544.z;
    float _555 = ((_527.x - _546) * _422) + _546;
    float _556 = ((_527.y - _547) * _422) + _547;
    float _557 = ((_527.z - _548) * _422) + _548;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _582 = ((_569.z - _557) * _495) + _557;
    float _585 = ((((_569.x - _555) * _495) + _555) * 2.0) + (-1.0);
    float _587 = ((((_569.y - _556) * _495) + _556) * 2.0) + (-1.0);
    float _588 = dot(vec2(_585, _587), vec2(_585, _587));
    float _3704 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _593 = sqrt(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _619 = (((_607.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _585;
    float _620 = (((_607.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _587;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _648 = _646.x;
    float _665 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _648) * _422) + _648;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _264) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _265) + cbTextureTilingScale._m0[21u].w));
    float _683 = ((_678.x - _665) * _495) + _665;
    float _687 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _683) * cbMtdParam._m0[19u].z) + _683;
    float _691 = (cbMtdParam._m0[19u].w * (_607.z - _582)) + _582;
    float _693 = cbMtdParam._m0[22u].x + _607.w;
    float _696 = fma(_593, _231 * NORMAL.x, fma(_620, _238 * TANGENT.x, (_224 * _216) * _619));
    float _699 = fma(_593, _231 * NORMAL.y, fma(_620, _238 * TANGENT.y, (_224 * _217) * _619));
    float _702 = fma(_593, _231 * NORMAL.z, fma(_620, _238 * TANGENT.z, (_224 * _218) * _619));
    float _706 = inversesqrt(dot(vec3(_696, _699, _702), vec3(_696, _699, _702)));
    float _707 = _706 * _696;
    float _708 = _706 * _699;
    float _709 = _706 * _702;
    float _3715 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _710 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3737 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3748 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3759 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3770 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _715 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _780 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _770);
    float _781 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _770);
    float _782 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _770);
    float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
    float _787 = _780 * _786;
    float _788 = _781 * _786;
    float _789 = _782 * _786;
    vec4 _794 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _796 = _794.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _968 = sqrt(((_780 * _780) + (_781 * _781)) + (_782 * _782));
        float _974 = (cbMatDynParam._m0[5u].x * _968) + cbMatDynParam._m0[5u].y;
        float _3781 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _979 = (cbMatDynParam._m0[5u].z * _968) + cbMatDynParam._m0[5u].w;
        float _3792 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) - _975)) + _975) < ((_796 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _807 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _808 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _826 = fma(_709, cbSceneParam._m0[5u].z, fma(_708, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _707));
    float _829 = fma(_709, cbSceneParam._m0[6u].z, fma(_708, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _707));
    float _832 = fma(_709, cbSceneParam._m0[7u].z, fma(_708, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _707));
    uint _845 = _244 + 9u;
    uint _846 = _845 + uint(cbMatDynParam._m0[0u].w);
    float _852 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_846].x;
    float _853 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * cbInstanceData._m0[_846].y;
    float _854 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * cbInstanceData._m0[_846].z;
    float _3803 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _858 = 1.0 - _715;
    float _859 = _855 * _858;
    float _860 = _856 * _858;
    float _861 = _857 * _858;
    float _866 = (_855 + (-0.039999999105930328369140625)) * _715;
    float _867 = (_856 + (-0.039999999105930328369140625)) * _715;
    float _868 = (_857 + (-0.039999999105930328369140625)) * _715;
    float _869 = _866 + 0.039999999105930328369140625;
    float _871 = _867 + 0.039999999105930328369140625;
    float _872 = _868 + 0.039999999105930328369140625;
    vec4 _881 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _807, cbSceneParam._m0[86u].y * _808));
    float _885 = ((isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * TEXCOORD_5.w) * _881.x;
    float _886 = dot(vec3(_707, _708, _709), vec3(_787, _788, _789));
    float _889 = _886 * 2.0;
    float _893 = (_889 * _707) - _787;
    float _894 = (_889 * _708) - _788;
    float _895 = (_889 * _709) - _789;
    float _899 = abs(dot(vec3(_787, _788, _789), vec3(_707, _708, _709)));
    float _3836 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _901 = sqrt(_710);
    float _914 = exp2((_901 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_901 * 3.0));
    float _920 = (1.0 - _914) * ((_901 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _921 = _914 * _901;
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1287;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1012 = fma(_957, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949));
        float _1016 = fma(_957, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949));
        float _1020 = fma(_957, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949));
        float _1045 = _949 + _707;
        float _1046 = _953 + _708;
        float _1047 = _957 + _709;
        float _1057 = fma(_1047, cbModelParam._m0[26u].z, fma(_1046, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1045)) - _1012;
        float _1058 = fma(_1047, cbModelParam._m0[27u].z, fma(_1046, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1045)) - _1016;
        float _1059 = fma(_1047, cbModelParam._m0[28u].z, fma(_1046, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1045)) - _1020;
        float _1063 = inversesqrt(dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059)));
        float _1076 = ((_1063 * _1057) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1012 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1063 * _1058) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1016 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1063 * _1059) / cbModelParam._m0[34u].z) + ((((((_1020 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        float _1115 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1081.x + (-0.5));
        float _1117 = _1115 * (_1081.y + (-0.5));
        float _1118 = _1115 * (_1081.z + (-0.5));
        float _1125 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1088.x + (-0.5));
        float _1127 = _1125 * (_1088.y + (-0.5));
        float _1128 = _1125 * (_1088.z + (-0.5));
        float _1135 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1095.x + (-0.5));
        float _1137 = _1135 * (_1095.y + (-0.5));
        float _1138 = _1135 * (_1095.z + (-0.5));
        float _1145 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1102.x + (-0.5));
        float _1147 = _1145 * (_1102.y + (-0.5));
        float _1148 = _1145 * (_1102.z + (-0.5));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = _1116 * 0.5;
        float _1153 = _1126 * 0.5;
        float _1154 = _1136 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1169 = (dot(vec3(_707, _708, _709), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1179 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3884 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1181 + 1.0))) + _1186) * _1149;
        float _1196 = _1117 * 0.5;
        float _1197 = _1127 * 0.5;
        float _1198 = _1137 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_707, _708, _709), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3917 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1223 + 1.0))) + _1228) * _1150;
        float _1238 = _1118 * 0.5;
        float _1239 = _1128 * 0.5;
        float _1240 = _1138 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_707, _708, _709), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3950 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1265 + 1.0))) + _1270) * _1151;
        _1287 = _1118;
        _1289 = _1117;
        _1290 = _1116;
        _1291 = _1128;
        _1292 = _1127;
        _1293 = _1126;
        _1294 = _1138;
        _1295 = _1137;
        _1296 = _1136;
        _1297 = _1151;
        _1298 = _1150;
        _1299 = _1149;
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
    }
    else
    {
        _1287 = _1288;
        _1289 = _1288;
        _1290 = _1288;
        _1291 = _1288;
        _1292 = _1288;
        _1293 = _1288;
        _1294 = _1288;
        _1295 = _1288;
        _1296 = _1288;
        _1297 = _1288;
        _1298 = _1288;
        _1299 = _1288;
        _1300 = 0.0;
        _1301 = 0.0;
        _1302 = 0.0;
    }
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1329 = fma(_957, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949));
        float _1333 = fma(_957, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949));
        float _1337 = fma(_957, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949));
        float _1360 = _949 + _707;
        float _1361 = _953 + _708;
        float _1362 = _957 + _709;
        float _1372 = fma(_1362, cbModelParam._m0[30u].z, fma(_1361, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1360)) - _1329;
        float _1373 = fma(_1362, cbModelParam._m0[31u].z, fma(_1361, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1360)) - _1333;
        float _1374 = fma(_1362, cbModelParam._m0[32u].z, fma(_1361, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1360)) - _1337;
        float _1378 = inversesqrt(dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374)));
        float _1391 = ((_1378 * _1372) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1329 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1378 * _1373) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1333 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1378 * _1374) / cbModelParam._m0[35u].z) + ((((((_1337 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        float _1428 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1395.x + (-0.5));
        float _1430 = _1428 * (_1395.y + (-0.5));
        float _1431 = _1428 * (_1395.z + (-0.5));
        float _1438 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1402.x + (-0.5));
        float _1440 = _1438 * (_1402.y + (-0.5));
        float _1441 = _1438 * (_1402.z + (-0.5));
        float _1448 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1409.x + (-0.5));
        float _1450 = _1448 * (_1409.y + (-0.5));
        float _1451 = _1448 * (_1409.z + (-0.5));
        float _1458 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1416.x + (-0.5));
        float _1460 = _1458 * (_1416.y + (-0.5));
        float _1461 = _1458 * (_1416.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_707, _708, _709), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4013 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1492 + 1.0))) + _1497) * _1462;
        float _1507 = _1430 * 0.5;
        float _1508 = _1440 * 0.5;
        float _1509 = _1450 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_707, _708, _709), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4046 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1534 + 1.0))) + _1539) * _1463;
        float _1549 = _1431 * 0.5;
        float _1550 = _1441 * 0.5;
        float _1551 = _1451 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_707, _708, _709), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4079 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1576 + 1.0))) + _1581) * _1464;
        _1598 = _1431;
        _1599 = _1430;
        _1600 = _1429;
        _1601 = _1441;
        _1602 = _1440;
        _1603 = _1439;
        _1604 = _1451;
        _1605 = _1450;
        _1606 = _1449;
        _1607 = _1464;
        _1608 = _1463;
        _1609 = _1462;
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
    }
    else
    {
        _1598 = _1288;
        _1599 = _1288;
        _1600 = _1288;
        _1601 = _1288;
        _1602 = _1288;
        _1603 = _1288;
        _1604 = _1288;
        _1605 = _1288;
        _1606 = _1288;
        _1607 = _1288;
        _1608 = _1288;
        _1609 = _1288;
        _1610 = 0.0;
        _1611 = 0.0;
        _1612 = 0.0;
    }
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1300)) + _1300;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1301)) + _1301;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1302)) + _1302;
    float _1645 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1622));
    float _1666 = _893 * 0.5;
    float _1667 = _894 * 0.5;
    float _1668 = _895 * 0.5;
    float _1669 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1672 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1675 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1709;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1682 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1287, _1291, _1294, _1297));
        float _1686 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1289, _1292, _1295, _1298));
        float _1690 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1290, _1293, _1296, _1299));
        float _1697 = dot(vec4(cbModelParam._m0[39u]), vec4(_1666, _1667, _1668, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1720;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1711 = dot(vec4(cbModelParam._m0[40u]), vec4(_1666, _1667, _1668, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1724 = (_1720 * cbModelParam._m0[1u].x) + (_1709 * (1.0 - cbModelParam._m0[1u].x));
    float _1734 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _710);
    float _1735 = isnan(_1734) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1734 : min(cbModelParam._m0[25u].z, _1734));
    float _1817;
    float _1819;
    float _1821;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1784 = fma(_957, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949)) + cbModelParam._m0[13u].w;
        float _1788 = fma(_957, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949)) + cbModelParam._m0[14u].w;
        float _1792 = fma(_957, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949)) + cbModelParam._m0[15u].w;
        float _1795 = fma(_895, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _893));
        float _1798 = fma(_895, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _893));
        float _1801 = fma(_895, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _893));
        float _1829;
        if (_1795 > 0.0)
        {
            _1829 = abs((1.0 - _1784) / _1795);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1784 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1829 = frontier_phi_17_15_ladder;
        }
        float _2032;
        if (_1798 > 0.0)
        {
            _2032 = abs((1.0 - _1788) / _1798);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1788 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2032 = frontier_phi_26_22_ladder;
        }
        float _2286;
        if (_1801 > 0.0)
        {
            _2286 = abs((1.0 - _1792) / _1801);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1792 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2286 = frontier_phi_38_33_ladder;
        }
        float _2288 = isnan(_2032) ? _1829 : (isnan(_1829) ? _2032 : min(_1829, _2032));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1795) + _1784;
        float _2294 = (_2289 * _1798) + _1788;
        float _2295 = (_2289 * _1801) + _1792;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2296;
        float _2300 = _2296 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 > _2300) || ((_2294 < _2298) || ((_2293 < _2298) || (_2293 > _2300))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2295, cbModelParam._m0[9u].z, fma(_2294, cbModelParam._m0[9u].y, _2293 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2295, cbModelParam._m0[10u].z, fma(_2294, cbModelParam._m0[10u].y, _2293 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2295, cbModelParam._m0[11u].z, fma(_2294, cbModelParam._m0[11u].y, _2293 * cbModelParam._m0[11u].x))), _1735);
            frontier_phi_16_38_ladder = _2423.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2423.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2423.x * cbModelParam._m0[1u].y;
        }
        _1817 = frontier_phi_16_38_ladder_2;
        _1819 = frontier_phi_16_38_ladder_1;
        _1821 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1805 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_893, _894, _895), _1735);
        _1817 = _1805.x * cbModelParam._m0[1u].y;
        _1819 = _1805.y * cbModelParam._m0[1u].y;
        _1821 = _1805.z * cbModelParam._m0[1u].y;
    }
    float _1825 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _710);
    float _1826 = isnan(_1825) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1825 : min(cbModelParam._m0[25u].w, _1825));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1880 = fma(_957, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949)) + cbModelParam._m0[21u].w;
        float _1884 = fma(_957, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949)) + cbModelParam._m0[22u].w;
        float _1888 = fma(_957, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949)) + cbModelParam._m0[23u].w;
        float _1891 = fma(_895, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _893));
        float _1894 = fma(_895, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _893));
        float _1897 = fma(_895, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _893));
        float _2037;
        if (_1891 > 0.0)
        {
            _2037 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2037 = frontier_phi_28_24_ladder;
        }
        float _2313;
        if (_1894 > 0.0)
        {
            _2313 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2313 = frontier_phi_40_35_ladder;
        }
        float _2526;
        if (_1897 > 0.0)
        {
            _2526 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2526 = frontier_phi_49_46_ladder;
        }
        float _2528 = isnan(_2313) ? _2037 : (isnan(_2037) ? _2313 : min(_2037, _2313));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _1891) + _1880;
        float _2534 = (_2529 * _1894) + _1884;
        float _2535 = (_2529 * _1897) + _1888;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2537 = (-1.0) - _2536;
        float _2539 = _2536 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2535 > _2539) || ((_2535 < _2537) || ((_2534 > _2539) || ((_2534 < _2537) || ((_2533 < _2537) || (_2533 > _2539))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2535, cbModelParam._m0[17u].z, fma(_2534, cbModelParam._m0[17u].y, _2533 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2535, cbModelParam._m0[18u].z, fma(_2534, cbModelParam._m0[18u].y, _2533 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2535, cbModelParam._m0[19u].z, fma(_2534, cbModelParam._m0[19u].y, _2533 * cbModelParam._m0[19u].x))), _1826);
            frontier_phi_25_49_ladder = _2734.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2734.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2734.x * cbModelParam._m0[1u].z;
        }
        _1916 = frontier_phi_25_49_ladder_2;
        _1918 = frontier_phi_25_49_ladder_1;
        _1920 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_893, _894, _895), _1826);
        _1916 = _1900.x * cbModelParam._m0[1u].z;
        _1918 = _1900.y * cbModelParam._m0[1u].z;
        _1920 = _1900.z * cbModelParam._m0[1u].z;
    }
    float _1933 = (((_920 * _869) + _921) * _885) * ((cbModelParam._m0[1u].w * (_1916 - _1817)) + _1817);
    float _1935 = (((_920 * _871) + _921) * _885) * ((cbModelParam._m0[1u].w * (_1918 - _1819)) + _1819);
    float _1937 = (((_920 * _872) + _921) * _885) * ((cbModelParam._m0[1u].w * (_1920 - _1821)) + _1821);
    float _1940 = fma(_1937, cbSceneParam._m0[89u].z, fma(_1935, cbSceneParam._m0[89u].y, _1933 * cbSceneParam._m0[89u].x));
    float _1943 = fma(_1937, cbSceneParam._m0[90u].z, fma(_1935, cbSceneParam._m0[90u].y, _1933 * cbSceneParam._m0[90u].x));
    float _1946 = fma(_1937, cbSceneParam._m0[91u].z, fma(_1935, cbSceneParam._m0[91u].y, _1933 * cbSceneParam._m0[91u].x));
    uvec4 _1956 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _1958 = _1956.x * 14u;
    uint _1959 = _1958 + 13u;
    float _1966 = _885 + (-1.0);
    float _1971 = (cbLight._m0[_1959].x * _1966) + 1.0;
    float _1972 = (cbLight._m0[_1959].y * _1966) + 1.0;
    float _1973 = (cbLight._m0[_1959].z * _1966) + 1.0;
    float _1974 = (cbLight._m0[_1959].w * _1966) + 1.0;
    uint _1975 = _1958 + 5u;
    float _1981 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
    uint _1985 = _1958 + 4u;
    float _1991 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
    uint _1995 = _1958 | 1u;
    float _2006 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_707, _708, _709));
    float _2009 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_707, _708, _709));
    float _4215 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _4226 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2014 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * 0.3183098733425140380859375;
    float _2016 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _2023 = ((cbLight._m0[_1975].x * _1981) * _2016) + ((cbLight._m0[_1985].x * _1991) * _2014);
    float _2024 = ((_1981 * cbLight._m0[_1975].y) * _2016) + ((_1991 * cbLight._m0[_1985].y) * _2014);
    float _2025 = ((_1981 * cbLight._m0[_1975].z) * _2016) + ((_1991 * cbLight._m0[_1985].z) * _2014);
    uvec4 _2029 = floatBitsToUint(cbLight._m0[_1958 + 12u]);
    bool _2031 = _2029.x == 0u;
    float _2042;
    float _2044;
    float _2046;
    if (_2031)
    {
        _2042 = _2023;
        _2044 = _2024;
        _2046 = _2025;
    }
    else
    {
        uint _2050 = _1958 + 6u;
        float _2066 = (dot(vec3(cbLight._m0[_1958 + 2u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2067 = _2066 * _2066;
        float _4237 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2068 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2069 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2042 = (((cbLight._m0[_2050].x * 0.3183098733425140380859375) * _2068) * _2069) + _2023;
        _2044 = (((cbLight._m0[_2050].y * 0.3183098733425140380859375) * _2068) * _2069) + _2024;
        _2046 = (((cbLight._m0[_2050].z * 0.3183098733425140380859375) * _2068) * _2069) + _2025;
    }
    bool _2049 = _2029.y == 0u;
    float _2087;
    float _2089;
    float _2091;
    if (_2049)
    {
        _2087 = _2042;
        _2089 = _2044;
        _2091 = _2046;
    }
    else
    {
        uint _2257 = _1958 + 7u;
        float _2273 = (dot(vec3(cbLight._m0[_1958 + 3u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2274 = _2273 * _2273;
        float _4253 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2275 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2276 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2087 = (((cbLight._m0[_2257].x * 0.3183098733425140380859375) * _2275) * _2276) + _2042;
        _2089 = (((cbLight._m0[_2257].y * 0.3183098733425140380859375) * _2275) * _2276) + _2044;
        _2091 = (((cbLight._m0[_2257].z * 0.3183098733425140380859375) * _2275) * _2276) + _2046;
    }
    uint _2094 = _1958 + 8u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _710) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_1958].x + _787;
    float _2110 = cbLight._m0[_1958].y + _788;
    float _2111 = cbLight._m0[_1958].z + _789;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_1958].xyz));
    float _4269 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _4280 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _2123 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2124 = dot(vec3(_707, _708, _709), vec3(_2116, _2117, _2118));
    float _4291 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_2116, _2117, _2118));
    float _4302 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2132 = _2108 * _2108;
    float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
    float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
    float _2145 = 0.959999978542327880859375 - _866;
    float _2147 = 0.959999978542327880859375 - _867;
    float _2148 = 0.959999978542327880859375 - _868;
    float _2155 = 1.0 - _2108;
    float _2166 = (0.5 / (((_2123 * ((_2122 * _2155) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2155) + _2108) * _2122))) * _2122;
    float _4313 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
    uint _2179 = _1958 + 9u;
    float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _710) * 0.949999988079071044921875);
    float _2191 = _2190 * _2190;
    float _2192 = cbLight._m0[_1995].x + _787;
    float _2193 = cbLight._m0[_1995].y + _788;
    float _2194 = cbLight._m0[_1995].z + _789;
    float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
    float _2199 = _2198 * _2192;
    float _2200 = _2198 * _2193;
    float _2201 = _2198 * _2194;
    float _2202 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_1995].xyz));
    float _4324 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _2206 = dot(vec3(_707, _708, _709), vec3(_2199, _2200, _2201));
    float _4335 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2210 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2199, _2200, _2201));
    float _4346 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2214 = _2191 * _2191;
    float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
    float _2225 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
    float _2232 = 1.0 - _2191;
    float _2242 = (0.5 / (((_2123 * ((_2205 * _2232) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2232) + _2191) * _2205))) * _2205;
    float _4357 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
    float _2254 = (((((_2225 * _2145) + _869) * cbLight._m0[_2179].x) * _2244) * _1981) + (((((_2144 * _2145) + _869) * cbLight._m0[_2094].x) * _2168) * _1991);
    float _2255 = (((((_2225 * _2147) + _871) * cbLight._m0[_2179].y) * _2244) * _1981) + (((((_2144 * _2147) + _871) * cbLight._m0[_2094].y) * _2168) * _1991);
    float _2256 = (((((_2225 * _2148) + _872) * cbLight._m0[_2179].z) * _2244) * _1981) + (((((_2144 * _2148) + _872) * cbLight._m0[_2094].z) * _2168) * _1991);
    float _2318;
    float _2320;
    float _2322;
    if (_2031)
    {
        _2318 = _2254;
        _2320 = _2255;
        _2322 = _2256;
    }
    else
    {
        uint _2324 = _1958 + 2u;
        uint _2328 = _1958 + 10u;
        float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _710) * 0.949999988079071044921875);
        float _2343 = _2342 * _2342;
        float _2344 = cbLight._m0[_2324].x + _787;
        float _2345 = cbLight._m0[_2324].y + _788;
        float _2346 = cbLight._m0[_2324].z + _789;
        float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
        float _2351 = _2350 * _2344;
        float _2352 = _2350 * _2345;
        float _2353 = _2350 * _2346;
        float _2354 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2324].xyz));
        float _4368 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2358 = dot(vec3(_707, _708, _709), vec3(_2351, _2352, _2353));
        float _4379 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2362 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2351, _2352, _2353));
        float _4390 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2366 = _2343 * _2343;
        float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
        float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0);
        float _2384 = 1.0 - _2343;
        float _2394 = (0.5 / (((_2123 * ((_2357 * _2384) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2384) + _2343) * _2357))) * _2357;
        float _4401 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2396 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
        float _2397 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2318 = (((((_2377 * _2145) + _869) * cbLight._m0[_2328].x) * _2396) * _2397) + _2254;
        _2320 = (((((_2377 * _2147) + _871) * cbLight._m0[_2328].y) * _2396) * _2397) + _2255;
        _2322 = (((((_2377 * _2148) + _872) * cbLight._m0[_2328].z) * _2396) * _2397) + _2256;
    }
    float _2432;
    float _2434;
    float _2436;
    if (_2049)
    {
        _2432 = _2318;
        _2434 = _2320;
        _2436 = _2322;
    }
    else
    {
        uint _2443 = _1958 + 3u;
        uint _2447 = _1958 + 11u;
        float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2443].w)) * _710) * 0.949999988079071044921875);
        float _2462 = _2461 * _2461;
        float _2463 = cbLight._m0[_2443].x + _787;
        float _2464 = cbLight._m0[_2443].y + _788;
        float _2465 = cbLight._m0[_2443].z + _789;
        float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
        float _2470 = _2469 * _2463;
        float _2471 = _2469 * _2464;
        float _2472 = _2469 * _2465;
        float _2473 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2443].xyz));
        float _4417 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2477 = dot(vec3(_707, _708, _709), vec3(_2470, _2471, _2472));
        float _4428 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2481 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_2470, _2471, _2472));
        float _4439 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2485 = _2462 * _2462;
        float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
        float _2496 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
        float _2503 = 1.0 - _2462;
        float _2513 = (0.5 / (((_2123 * ((_2476 * _2503) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2503) + _2462) * _2476))) * _2476;
        float _4450 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2515 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
        float _2516 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2432 = (((((_2496 * _2145) + _869) * cbLight._m0[_2447].x) * _2515) * _2516) + _2318;
        _2434 = (((((_2496 * _2147) + _871) * cbLight._m0[_2447].y) * _2515) * _2516) + _2320;
        _2436 = (((((_2496 * _2148) + _872) * cbLight._m0[_2447].z) * _2515) * _2516) + _2322;
    }
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_1956.y == 0u)
    {
        float _2591 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2591;
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2591;
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2591;
        uvec4 _2606 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2607 = _2606.x;
        uint _2618 = uint((float(_2606.y) * floor(float(uint(cbSceneParam._m0[85u].y * _808) / _2607))) + floor(float(uint(cbSceneParam._m0[85u].x * _807) / _2607)));
        float _2628 = (log2(_2594 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2629 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        uint _2632 = uint(isnan(14.0) ? _2629 : (isnan(_2629) ? 14.0 : min(_2629, 14.0)));
        uvec4 _2637 = texelFetch(g_lightClusterGridBuffer, int(((_2632 << 2u) + (_2618 << 6u)) >> 2u));
        uint _2638 = _2637.x;
        uint _2639 = _2606.z;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((((1u << ((_2639 >> 4u) & 15u)) + 4294967295u) & _2638) == 0u) || ((_2639 & 240u) == 0u))
        {
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
        }
        else
        {
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            uint _2898 = 0u;
            uint _2907;
            bool _2908;
            for (;;)
            {
                _2907 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_2898 << 2u)) >> 2u)).x;
                _2908 = _2907 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2908)
                {
                    frontier_phi_66_pred = _2892;
                    frontier_phi_66_pred_1 = _2897;
                    frontier_phi_66_pred_2 = _2896;
                    frontier_phi_66_pred_3 = _2895;
                    frontier_phi_66_pred_4 = _2894;
                    frontier_phi_66_pred_5 = _2893;
                }
                else
                {
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    uint _3043;
                    _3037 = _2892;
                    _3038 = _2893;
                    _3039 = _2894;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2897;
                    _3043 = _2907;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    for (;;)
                    {
                        uint _3047 = uint(findLSB(_3043)) + (_2898 << 5u);
                        uint _3044 = (_3043 + 4294967295u) & _3043;
                        uint _3049 = _3047 * 48u;
                        vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3049)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 3u)).x));
                        uint _3069 = (_3047 * 48u) + 4u;
                        vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3069)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 3u)).x));
                        uint _3088 = (_3047 * 48u) + 8u;
                        vec3 _3099 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3088)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3088 + 2u)).x));
                        float _3103 = _3063.x - _2592;
                        float _3104 = _3063.y - _2593;
                        float _3105 = _3063.z - _2594;
                        float _3106 = dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105));
                        float _3109 = inversesqrt(_3106);
                        float _3110 = _3109 * _3103;
                        float _3111 = _3109 * _3104;
                        float _3112 = _3109 * _3105;
                        float _3113 = dot(vec3(_826, _829, _832), vec3(_3110, _3111, _3112));
                        float _3118 = 1.0 - (_3106 * _3063.w);
                        float _4476 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3119 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3120 = sqrt(_3106) * _3082.w;
                        float _3123 = 1.39999997615814208984375 / (_3120 + 1.39999997615814208984375);
                        float _3124 = _3123 * _3123;
                        float _3127 = ((1.0 - _3124) * _3113) + _3124;
                        float _3130 = _3120 * _3120;
                        float _3134 = ((isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))) * _3119) / ((_3130 * 0.699999988079071044921875) + 1.0);
                        float _3138 = (-0.0) - _2592;
                        float _3139 = (-0.0) - _2593;
                        float _3140 = (-0.0) - _2594;
                        float _3144 = inversesqrt(dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140)));
                        float _3145 = _3144 * _3138;
                        float _3146 = _3144 * _3139;
                        float _3147 = _3144 * _3140;
                        float _3155 = exp2(log2(1.0 / ((_3130 * 3.5) + 5.0)) * 0.25);
                        float _3156 = 1.0 - _901;
                        float _3163 = sqrt(1.0 - ((1.0 - (_3156 * _3156)) * (1.0 - (_3155 * _3155))));
                        float _3164 = _3163 * _3163;
                        float _3165 = _3164 * _3164;
                        float _3166 = _3145 + _3110;
                        float _3167 = _3146 + _3111;
                        float _3168 = _3147 + _3112;
                        float _3172 = inversesqrt(dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168)));
                        float _3176 = dot(vec3(_826, _829, _832), vec3(_3145, _3146, _3147));
                        float _4492 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3179 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                        float _3180 = dot(vec3(_826, _829, _832), vec3(_3172 * _3166, _3172 * _3167, _3172 * _3168));
                        float _4503 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3183 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3187 = ((_3183 * _3183) * (_3165 + (-1.0))) + 1.0;
                        float _3188 = _3123 * _3164;
                        float _3189 = _3188 * _3188;
                        float _3192 = ((1.0 - _3189) * _3113) + _3189;
                        float _4514 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3193 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3194 = 1.0 - _3164;
                        float _3204 = (0.5 / (((_3193 * ((_3179 * _3194) + _3164)) + 9.9999999392252902907785028219223e-09) + (((_3193 * _3194) + _3164) * _3179))) * _3193;
                        float _4525 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3215 = (((_3165 * 3.1415927410125732421875) * (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) / ((_3187 * _3187) * ((_3130 * 2.1991131305694580078125) + 3.141590118408203125))) * _3119;
                        _2967 = (_3134 * _3082.x) + _3040;
                        _2968 = (_3134 * _3082.y) + _3041;
                        _2969 = (_3134 * _3082.z) + _3042;
                        _2964 = (_3215 * _3099.x) + _3037;
                        _2965 = (_3215 * _3099.y) + _3038;
                        _2966 = (_3215 * _3099.z) + _3039;
                        if (_3044 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3037 = _2964;
                            _3038 = _2965;
                            _3039 = _2966;
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _2969;
                            _3043 = _3044;
                        }
                    }
                    frontier_phi_66_pred = _2964;
                    frontier_phi_66_pred_1 = _2969;
                    frontier_phi_66_pred_2 = _2968;
                    frontier_phi_66_pred_3 = _2967;
                    frontier_phi_66_pred_4 = _2966;
                    frontier_phi_66_pred_5 = _2965;
                }
                _2740 = frontier_phi_66_pred;
                _2750 = frontier_phi_66_pred_1;
                _2748 = frontier_phi_66_pred_2;
                _2746 = frontier_phi_66_pred_3;
                _2744 = frontier_phi_66_pred_4;
                _2742 = frontier_phi_66_pred_5;
                uint _2899 = _2898 + 1u;
                if (_2899 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2892 = _2740;
                    _2893 = _2742;
                    _2894 = _2744;
                    _2895 = _2746;
                    _2896 = _2748;
                    _2897 = _2750;
                    _2898 = _2899;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
        }
        uvec4 _2753 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2754 = _2753.z;
        uint _2756 = (_2754 >> 8u) & 15u;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        if (((4294967295u << _2756) & _2638) == 0u)
        {
            _2860 = _2739;
            _2862 = _2741;
            _2864 = _2743;
            _2866 = _2745;
            _2868 = _2747;
            _2870 = _2749;
        }
        else
        {
            float _2885 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
            float _2886 = _2885 * _2592;
            float _2887 = _2885 * _2593;
            float _2888 = _2885 * _2594;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2756 < ((_2754 >> 12u) & 15u))
            {
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _3020 = _2739;
                float _3021 = _2741;
                float _3022 = _2743;
                float _3023 = _2745;
                float _3024 = _2747;
                float _3025 = _2749;
                uint _3026 = _2756;
                uint _3035;
                bool _3036;
                for (;;)
                {
                    _3035 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_3026 << 2u)) >> 2u)).x;
                    _3036 = _3035 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3036)
                    {
                        frontier_phi_77_pred = _3025;
                        frontier_phi_77_pred_1 = _3024;
                        frontier_phi_77_pred_2 = _3023;
                        frontier_phi_77_pred_3 = _3022;
                        frontier_phi_77_pred_4 = _3021;
                        frontier_phi_77_pred_5 = _3020;
                    }
                    else
                    {
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3242 = _3020;
                        float _3243 = _3021;
                        float _3244 = _3022;
                        float _3245 = _3023;
                        float _3246 = _3024;
                        float _3247 = _3025;
                        uint _3248 = _3035;
                        uint _3249;
                        vec4 _3274;
                        float _3275;
                        vec4 _3290;
                        vec3 _3302;
                        vec4 _3317;
                        vec4 _3332;
                        float _3379;
                        bool _3380;
                        for (;;)
                        {
                            uint _3259 = ((_3026 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3248));
                            _3249 = (_3248 + 4294967295u) & _3248;
                            uint _3261 = _3259 * 40u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            _3275 = _3274.w;
                            uint _3277 = (_3259 * 40u) + 4u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3292 = (_3259 * 40u) + 8u;
                            _3302 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x));
                            uint _3304 = (_3259 * 40u) + 16u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3319 = (_3259 * 40u) + 20u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3335 = (_3259 * 40u) + 24u;
                            vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3354 = (_3259 * 40u) + 28u;
                            vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3379 = fma(_2594, _3367.z, fma(_2593, _3367.y, _3367.x * _2592)) + _3367.w;
                            _3380 = !((fma(_2594, _3348.z, fma(_2593, _3348.y, _3348.x * _2592)) + _3348.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3380)
                            {
                                float _3407 = _3274.x - _2592;
                                float _3408 = _3274.y - _2593;
                                float _3409 = _3274.z - _2594;
                                float _3410 = dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409));
                                float _3413 = inversesqrt(_3410);
                                float _3414 = _3413 * _3407;
                                float _3415 = _3413 * _3408;
                                float _3416 = _3413 * _3409;
                                float _3420 = 1.0 - (_3410 / (_3275 * _3275));
                                float _4536 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3425 = sqrt(_3410) * _3290.w;
                                float _3427 = 1.39999997615814208984375 / (_3425 + 1.39999997615814208984375);
                                float _3428 = _3427 * _3427;
                                float _3431 = ((1.0 - _3428) * dot(vec3(_3414, _3415, _3416), vec3(_826, _829, _832))) + _3428;
                                float _3434 = _3425 * _3425;
                                float _3438 = (fma(_2594, _3317.z, fma(_2593, _3317.y, _3317.x * _2592)) + _3317.w) / _3379;
                                float _3439 = (fma(_2594, _3332.z, fma(_2593, _3332.y, _3332.x * _2592)) + _3332.w) / _3379;
                                float _3443 = 1.0 - dot(vec2(_3438, _3439), vec2(_3438, _3439));
                                float _4552 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3445 = _3444 * (((isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0))) * _3421) / ((_3434 * 0.699999988079071044921875) + 1.0));
                                float _3457 = exp2(log2(1.0 / ((_3434 * 3.5) + 5.0)) * 0.25);
                                float _3458 = 1.0 - _901;
                                float _3465 = sqrt(1.0 - ((1.0 - (_3458 * _3458)) * (1.0 - (_3457 * _3457))));
                                float _3466 = _3465 * _3465;
                                float _3467 = _3466 * _3466;
                                float _3468 = _3414 - _2886;
                                float _3469 = _3415 - _2887;
                                float _3470 = _3416 - _2888;
                                float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                                float _3478 = dot(vec3(_826, _829, _832), vec3((-0.0) - _2886, (-0.0) - _2887, (-0.0) - _2888));
                                float _4563 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3481 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3482 = dot(vec3(_826, _829, _832), vec3(_3474 * _3468, _3474 * _3469, _3474 * _3470));
                                float _4574 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3485 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3489 = ((_3485 * _3485) * (_3467 + (-1.0))) + 1.0;
                                float _3490 = _3427 * _3466;
                                float _3491 = _3490 * _3490;
                                float _3497 = ((1.0 - _3491) * dot(vec3(_826, _829, _832), vec3(_3414, _3415, _3416))) + _3491;
                                float _4585 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3499 = 1.0 - _3466;
                                float _3509 = (0.5 / (((_3498 * ((_3481 * _3499) + _3466)) + 9.9999999392252902907785028219223e-09) + (((_3498 * _3499) + _3466) * _3481))) * _3498;
                                float _4596 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3519 = (_3444 * _3421) * (((_3467 * 3.1415927410125732421875) * (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) / ((_3489 * _3489) * ((_3434 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3445 * _3290.y;
                                frontier_phi_83_pred_1 = _3445 * _3290.x;
                                frontier_phi_83_pred_2 = _3519 * _3302.z;
                                frontier_phi_83_pred_3 = _3519 * _3302.y;
                                frontier_phi_83_pred_4 = _3519 * _3302.x;
                                frontier_phi_83_pred_5 = _3445 * _3290.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3527 = frontier_phi_83_pred;
                            _3526 = frontier_phi_83_pred_1;
                            _3525 = frontier_phi_83_pred_2;
                            _3524 = frontier_phi_83_pred_3;
                            _3523 = frontier_phi_83_pred_4;
                            _3528 = frontier_phi_83_pred_5;
                            _3232 = _3526 + _3245;
                            _3233 = _3527 + _3246;
                            _3234 = _3528 + _3247;
                            _3229 = _3523 + _3242;
                            _3230 = _3524 + _3243;
                            _3231 = _3525 + _3244;
                            if (_3249 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3249;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3234;
                        frontier_phi_77_pred_1 = _3233;
                        frontier_phi_77_pred_2 = _3232;
                        frontier_phi_77_pred_3 = _3231;
                        frontier_phi_77_pred_4 = _3230;
                        frontier_phi_77_pred_5 = _3229;
                    }
                    _2871 = frontier_phi_77_pred;
                    _2869 = frontier_phi_77_pred_1;
                    _2867 = frontier_phi_77_pred_2;
                    _2865 = frontier_phi_77_pred_3;
                    _2863 = frontier_phi_77_pred_4;
                    _2861 = frontier_phi_77_pred_5;
                    uint _3027 = _3026 + 1u;
                    if (_3027 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3020 = _2861;
                        _3021 = _2863;
                        _3022 = _2865;
                        _3023 = _2867;
                        _3024 = _2869;
                        _3025 = _2871;
                        _3026 = _3027;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2865;
                frontier_phi_58_59_ladder_1 = _2871;
                frontier_phi_58_59_ladder_2 = _2869;
                frontier_phi_58_59_ladder_3 = _2867;
                frontier_phi_58_59_ladder_4 = _2863;
                frontier_phi_58_59_ladder_5 = _2861;
            }
            else
            {
                frontier_phi_58_59_ladder = _2743;
                frontier_phi_58_59_ladder_1 = _2749;
                frontier_phi_58_59_ladder_2 = _2747;
                frontier_phi_58_59_ladder_3 = _2745;
                frontier_phi_58_59_ladder_4 = _2741;
                frontier_phi_58_59_ladder_5 = _2739;
            }
            _2860 = frontier_phi_58_59_ladder_5;
            _2862 = frontier_phi_58_59_ladder_4;
            _2864 = frontier_phi_58_59_ladder;
            _2866 = frontier_phi_58_59_ladder_3;
            _2868 = frontier_phi_58_59_ladder_2;
            _2870 = frontier_phi_58_59_ladder_1;
        }
        float _2875 = isnan(1.0) ? _885 : (isnan(_885) ? 1.0 : min(_885, 1.0));
        _2651 = (_2875 * _2866) + _2087;
        _2653 = (_2875 * _2868) + _2089;
        _2655 = (_2875 * _2870) + _2091;
        _2657 = ((_2860 * _869) * _2875) + _2432;
        _2659 = ((_2862 * _871) * _2875) + _2434;
        _2661 = ((_2864 * _872) * _2875) + _2436;
    }
    else
    {
        _2651 = _2087;
        _2653 = _2089;
        _2655 = _2091;
        _2657 = _2432;
        _2659 = _2434;
        _2661 = _2436;
    }
    float _4612 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4623 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4634 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2678 = ((isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2651 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _885))) + ((_2657 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1724)) * cbPerFrame._m0[3u].x);
    float _2679 = ((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2653 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _885))) + ((_2659 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1724)) * cbPerFrame._m0[3u].x);
    float _2680 = ((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2655 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _885))) + ((_2661 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1724)) * cbPerFrame._m0[3u].x);
    uint _2681 = _244 + 6u;
    float _2689 = _807 / cbSceneParam._m0[86u].x;
    float _2690 = _808 / cbSceneParam._m0[86u].y;
    vec4 _2704 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2706 = _2704.x;
    float _2707 = _2704.y;
    float _2708 = _2704.z;
    float _2709 = _2704.w;
    float _2802;
    float _2804;
    float _2806;
    float _2808;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2764 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2765 = _2764 / _729;
        float _2776 = _2765 * _780;
        float _2777 = _781 * _2765;
        float _2778 = (-0.0) - _2777;
        float _2780 = _2765 * _782;
        float _2782 = (cbSceneParam._m0[77u].w * _2778) / _2764;
        float _2783 = _2782 + cbSceneParam._m0[79u].w;
        float _2784 = cbSceneParam._m0[79u].w - _2777;
        float _2790 = sqrt(((_2776 * _2776) + (_2777 * _2777)) + (_2780 * _2780));
        float _2793 = (1.0 - (cbSceneParam._m0[77u].w / _2764)) * _2790;
        float _2798 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2800 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2977;
        if (abs((_2778 - _2782) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2977 = ((((_2783 > 0.0) ? exp2(_2798 * _2783) : (2.0 - exp2(_2800 * _2783))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2793;
        }
        else
        {
            float _2921 = 1.0 / cbSceneParam._m0[80u].x;
            float _2922 = isnan(_2784) ? _2783 : (isnan(_2783) ? _2784 : max(_2783, _2784));
            float _2923 = isnan(_2784) ? _2783 : (isnan(_2783) ? _2784 : min(_2783, _2784));
            float _2932 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : min(_2922, 0.0));
            float _2933 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : min(_2923, 0.0));
            _2977 = ((abs(_2790 / _2778) * cbSceneParam._m0[80u].y) * ((((_2932 - _2933) * 2.0) - ((exp2(_2798 * (isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0)))) - exp2(_2798 * (isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0))))) * _2921)) - ((exp2(_2800 * _2932) - exp2(_2800 * _2933)) * _2921))) + (_2793 * cbSceneParam._m0[80u].z);
        }
        vec4 _2979 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, 1.0), 0.0);
        float _2988 = exp2((_2977 * (-1.44269502162933349609375)) * (1.0 - _2979.w));
        float _2989 = log2(_2988);
        float _3005 = log2(_2709);
        _2802 = (exp2(_3005 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2989 * cbSceneParam._m0[78u].x)) * _2979.x) / cbSceneParam._m0[78u].x)) + _2706;
        _2804 = (exp2(_3005 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2989 * cbSceneParam._m0[78u].y)) * _2979.y) / cbSceneParam._m0[78u].y)) + _2707;
        _2806 = (exp2(_3005 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2989 * cbSceneParam._m0[78u].z)) * _2979.z) / cbSceneParam._m0[78u].z)) + _2708;
        _2808 = _2988 * _2709;
    }
    else
    {
        _2802 = _2706;
        _2804 = _2707;
        _2806 = _2708;
        _2808 = _2709;
    }
    bool _3015;
    vec4 _2818;
    vec4 _2840;
    float _2842;
    float _2846;
    float _2847;
    float _2848;
    float _2849;
    bool _2859;
    for (;;)
    {
        _2818 = cbMatDynParam._m0[0u];
        float _2820 = roundEven(_2818.y);
        bool _2821 = _2820 == 3.0;
        float _2822 = log2(_2808);
        float _2829 = exp2(_2822 * cbSceneParam._m0[78u].x) * _2678;
        float _2830 = exp2(_2822 * cbSceneParam._m0[78u].y) * _2679;
        float _2831 = exp2(_2822 * cbSceneParam._m0[78u].z) * _2680;
        float _2838 = _796 + (-0.5);
        _2840 = cbMtdParam._m0[1u];
        _2842 = _2840.y * _2838;
        float _2845 = (_2820 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2846 = _2845 * (_2821 ? _2829 : (_2829 + (cbSceneParam._m0[72u].w * _2802)));
        _2847 = _2845 * (_2821 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2804)));
        _2848 = _2845 * (_2821 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2806)));
        _2849 = _2838 * 0.999000012874603271484375;
        _2859 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2859)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _2849) < 0.5)
            {
                _3015 = true;
                break;
            }
        }
        uint _2956 = _845 + uint(_2818.w);
        if ((cbInstanceData._m0[_2956].w < 1.0) && ((cbInstanceData._m0[_2956].w + _2849) < 0.5))
        {
            _3015 = true;
            break;
        }
        if ((_2842 + 1.0) < _2840.x)
        {
            _3015 = true;
            break;
        }
        _3015 = false;
        break;
    }
    float _3220;
    if (_3015)
    {
        discard_state = true;
        _3220 = 0.0;
    }
    else
    {
        _3220 = cbInstanceData._m0[_2681].w;
    }
    SV_Target.x = _2846;
    SV_Target.y = _2847;
    SV_Target.z = _2848;
    SV_Target.w = _3220;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2681].w;
    discard_exit();
}


