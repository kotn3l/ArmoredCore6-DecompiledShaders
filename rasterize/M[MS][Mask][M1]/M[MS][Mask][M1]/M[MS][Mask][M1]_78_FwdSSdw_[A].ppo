#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1596;
float _3999;
float _4000;
float _4001;
float _4002;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _255 = _254 * _246;
    float _256 = _254 * _247;
    float _257 = _254 * _248;
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = _261 * NORMAL.x;
    float _263 = _261 * NORMAL.y;
    float _264 = _261 * NORMAL.z;
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = _268 * TANGENT.x;
    float _270 = _268 * TANGENT.y;
    float _271 = _268 * TANGENT.z;
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4011 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4022 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4033 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _395.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[23u].w) + _441) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4044 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _466 = (_459 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _467 = (_459 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _468 = (_459 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _395.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[23u].w) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4055 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    float _545 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _539;
    float _548 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _540;
    float _551 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _541;
    float _558 = ((_539 - _545) * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) + _545;
    float _559 = ((_540 - _548) * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) + _548;
    float _560 = ((_541 - _551) * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) + _551;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _621 = _619.x;
    float _622 = _619.y;
    float _623 = _619.z;
    float _630 = ((_602.x - _621) * _459) + _621;
    float _631 = ((_602.y - _622) * _459) + _622;
    float _632 = ((_602.z - _623) * _459) + _623;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _657 = ((_644.z - _632) * _532) + _632;
    float _660 = ((((_644.x - _630) * _532) + _630) * 2.0) + (-1.0);
    float _661 = ((((_644.y - _631) * _532) + _631) * 2.0) + (-1.0);
    float _662 = dot(vec2(_660, _661), vec2(_660, _661));
    float _4066 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _667 = sqrt(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _697 = (_660 + ((((_577.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_685.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _698 = (_661 + ((((_577.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_685.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _701 = fma(_667, _262, fma(_698, _269, _697 * _255));
    float _704 = fma(_667, _263, fma(_698, _270, _697 * _256));
    float _707 = fma(_667, _264, fma(_698, _271, _697 * _257));
    float _711 = inversesqrt(dot(vec3(_701, _704, _707), vec3(_701, _704, _707)));
    vec4 _738 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _740 = _738.x;
    float _741 = 1.0 - _740;
    float _750 = (cbMtdParam._m0[19u].x + dot(vec4(_711 * _701, _711 * _704, _711 * _707, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_740 - _741) * cbMtdParam._m0[24u].z) + _741) * cbMtdParam._m0[21u].z);
    float _4077 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _751 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _753 = (-0.0) - cbMtdParam._m0[24u].x;
    float _755 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0));
    float _763 = _751 - ((_751 * TEXCOORD_8.x) * _756);
    float _764 = _751 - ((_751 * TEXCOORD_8.y) * _756);
    float _765 = _751 - ((_751 * TEXCOORD_8.z) * _756);
    float _772 = (_763 * (cbMtdParam._m0[17u].x - _558)) + _558;
    float _773 = (_764 * (cbMtdParam._m0[17u].y - _559)) + _559;
    float _774 = (_765 * (cbMtdParam._m0[17u].z - _560)) + _560;
    vec4 _786 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _788 = _786.x;
    float _789 = 1.0 - _788;
    float _815 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_788 - _789) * cbMtdParam._m0[24u].w) + _789) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4098 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _816 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _824 = ((((cbMtdParam._m0[10u].x - _772) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _816) + _772;
    float _825 = ((((cbMtdParam._m0[10u].y - _773) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _816) + _773;
    float _826 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _774)) * _816) + _774;
    vec4 _852 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _854 = _852.x;
    float _872 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _854) * _459) + _854;
    float _889 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _872) * _532) + _872;
    float _893 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _889) * cbMtdParam._m0[19u].z) + _889;
    float _895 = _893 - (_893 * _763);
    float _897 = _895 - (_895 * _816);
    float _902 = (((_577.z - _657) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _657;
    float _906 = ((_685.z - _902) * cbMtdParam._m0[19u].w) + _902;
    vec4 _920 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _927 = (_920.x * 2.0) + (-1.0);
    float _928 = (_920.y * 2.0) + (-1.0);
    float _929 = dot(vec2(_927, _928), vec2(_927, _928));
    float _4109 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _937 = ((_920.z - _906) * _763) + _906;
    float _940 = ((cbMtdParam._m0[23u].x - _937) * _816) + _937;
    vec4 _961 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _967 = (_961.x * 2.0) + (-1.0);
    float _968 = (_961.y * 2.0) + (-1.0);
    float _969 = dot(vec2(_967, _968), vec2(_967, _968));
    float _4120 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _984 = ((sqrt(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) - _667) * _765) + _667;
    float _987 = (((_927 - _697) * _763) + _697) + (cbMtdParam._m0[21u].x * _697);
    float _988 = (((_928 - _698) * _764) + _698) + (cbMtdParam._m0[21u].x * _698);
    float _999 = (((_967 - _987) + (_987 * cbMtdParam._m0[22u].z)) * _816) + _987;
    float _1000 = (((_968 - _988) + (_988 * cbMtdParam._m0[22u].z)) * _816) + _988;
    float _1001 = (_816 * (sqrt(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) - _984)) + _984;
    float _1003 = cbMtdParam._m0[22u].x + _685.w;
    float _1006 = fma(_1001, _262, fma(_1000, _269, _999 * _255));
    float _1009 = fma(_1001, _263, fma(_1000, _270, _999 * _256));
    float _1012 = fma(_1001, _264, fma(_1000, _271, _999 * _257));
    float _1016 = inversesqrt(dot(vec3(_1006, _1009, _1012), vec3(_1006, _1009, _1012)));
    float _1017 = _1016 * _1006;
    float _1018 = _1016 * _1009;
    float _1019 = _1016 * _1012;
    float _4131 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _1020 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _4142 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4153 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4164 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4175 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4186 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _1025 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _1039 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1089 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1079);
    float _1090 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1079);
    float _1091 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1079);
    float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
    float _1096 = _1089 * _1095;
    float _1097 = _1090 * _1095;
    float _1098 = _1091 * _1095;
    vec4 _1103 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1105 = _1103.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1277 = sqrt(((_1089 * _1089) + (_1090 * _1090)) + (_1091 * _1091));
        float _1283 = (cbMatDynParam._m0[5u].x * _1277) + cbMatDynParam._m0[5u].y;
        float _4197 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1288 = (cbMatDynParam._m0[5u].z * _1277) + cbMatDynParam._m0[5u].w;
        float _4208 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) - _1284)) + _1284) < ((_1105 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1116 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1117 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1135 = fma(_1019, cbSceneParam._m0[5u].z, fma(_1018, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1017));
    float _1138 = fma(_1019, cbSceneParam._m0[6u].z, fma(_1018, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1017));
    float _1141 = fma(_1019, cbSceneParam._m0[7u].z, fma(_1018, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1017));
    uint _1154 = _293 + 9u;
    uint _1155 = _1154 + uint(cbMatDynParam._m0[0u].w);
    float _1161 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * cbInstanceData._m0[_1155].x;
    float _1162 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) * cbInstanceData._m0[_1155].y;
    float _1163 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * cbInstanceData._m0[_1155].z;
    float _4219 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1164 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _4230 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _1165 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _4241 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1166 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _1167 = 1.0 - _1025;
    float _1168 = _1164 * _1167;
    float _1169 = _1165 * _1167;
    float _1170 = _1166 * _1167;
    float _1175 = (_1164 + (-0.039999999105930328369140625)) * _1025;
    float _1176 = (_1165 + (-0.039999999105930328369140625)) * _1025;
    float _1177 = (_1166 + (-0.039999999105930328369140625)) * _1025;
    float _1178 = _1175 + 0.039999999105930328369140625;
    float _1180 = _1176 + 0.039999999105930328369140625;
    float _1181 = _1177 + 0.039999999105930328369140625;
    vec4 _1190 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1116, cbSceneParam._m0[86u].y * _1117));
    float _1194 = ((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * TEXCOORD_5.w) * _1190.x;
    float _1195 = dot(vec3(_1017, _1018, _1019), vec3(_1096, _1097, _1098));
    float _1198 = _1195 * 2.0;
    float _1202 = (_1198 * _1017) - _1096;
    float _1203 = (_1198 * _1018) - _1097;
    float _1204 = (_1198 * _1019) - _1098;
    float _1208 = abs(dot(vec3(_1096, _1097, _1098), vec3(_1017, _1018, _1019)));
    float _4252 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _1210 = sqrt(_1020);
    float _1223 = exp2((_1210 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1210 * 3.0));
    float _1229 = (1.0 - _1223) * ((_1210 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1230 = _1223 * _1210;
    float _1258 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1262 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1266 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1595;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1320 = fma(_1266, cbModelParam._m0[26u].z, fma(_1262, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1258));
        float _1324 = fma(_1266, cbModelParam._m0[27u].z, fma(_1262, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1258));
        float _1328 = fma(_1266, cbModelParam._m0[28u].z, fma(_1262, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1258));
        float _1353 = _1258 + _1017;
        float _1354 = _1262 + _1018;
        float _1355 = _1266 + _1019;
        float _1365 = fma(_1355, cbModelParam._m0[26u].z, fma(_1354, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1353)) - _1320;
        float _1366 = fma(_1355, cbModelParam._m0[27u].z, fma(_1354, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1353)) - _1324;
        float _1367 = fma(_1355, cbModelParam._m0[28u].z, fma(_1354, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1353)) - _1328;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1320 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1324 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[34u].z) + ((((((_1328 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1423 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1389.x + (-0.5));
        float _1425 = _1423 * (_1389.y + (-0.5));
        float _1426 = _1423 * (_1389.z + (-0.5));
        float _1433 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1396.x + (-0.5));
        float _1435 = _1433 * (_1396.y + (-0.5));
        float _1436 = _1433 * (_1396.z + (-0.5));
        float _1443 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1403.x + (-0.5));
        float _1445 = _1443 * (_1403.y + (-0.5));
        float _1446 = _1443 * (_1403.z + (-0.5));
        float _1453 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1410.x + (-0.5));
        float _1455 = _1453 * (_1410.y + (-0.5));
        float _1456 = _1453 * (_1410.z + (-0.5));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = _1424 * 0.5;
        float _1461 = _1434 * 0.5;
        float _1462 = _1444 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1477 = (dot(vec3(_1017, _1018, _1019), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1487 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4300 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1489 + 1.0))) + _1494) * _1457;
        float _1504 = _1425 * 0.5;
        float _1505 = _1435 * 0.5;
        float _1506 = _1445 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_1017, _1018, _1019), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4333 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1531 + 1.0))) + _1536) * _1458;
        float _1546 = _1426 * 0.5;
        float _1547 = _1436 * 0.5;
        float _1548 = _1446 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_1017, _1018, _1019), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4344 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4355 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4366 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_1573 + 1.0))) + _1578) * _1459;
        _1595 = _1426;
        _1597 = _1425;
        _1598 = _1424;
        _1599 = _1436;
        _1600 = _1435;
        _1601 = _1434;
        _1602 = _1446;
        _1603 = _1445;
        _1604 = _1444;
        _1605 = _1459;
        _1606 = _1458;
        _1607 = _1457;
        _1608 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1609 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1610 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
    }
    else
    {
        _1595 = _1596;
        _1597 = _1596;
        _1598 = _1596;
        _1599 = _1596;
        _1600 = _1596;
        _1601 = _1596;
        _1602 = _1596;
        _1603 = _1596;
        _1604 = _1596;
        _1605 = _1596;
        _1606 = _1596;
        _1607 = _1596;
        _1608 = 0.0;
        _1609 = 0.0;
        _1610 = 0.0;
    }
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1637 = fma(_1266, cbModelParam._m0[30u].z, fma(_1262, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1258));
        float _1641 = fma(_1266, cbModelParam._m0[31u].z, fma(_1262, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1258));
        float _1645 = fma(_1266, cbModelParam._m0[32u].z, fma(_1262, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1258));
        float _1668 = _1258 + _1017;
        float _1669 = _1262 + _1018;
        float _1670 = _1266 + _1019;
        float _1680 = fma(_1670, cbModelParam._m0[30u].z, fma(_1669, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1668)) - _1637;
        float _1681 = fma(_1670, cbModelParam._m0[31u].z, fma(_1669, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1668)) - _1641;
        float _1682 = fma(_1670, cbModelParam._m0[32u].z, fma(_1669, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1668)) - _1645;
        float _1686 = inversesqrt(dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682)));
        float _1699 = ((_1686 * _1680) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1637 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1700 = ((_1686 * _1681) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1641 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1701 = ((_1686 * _1682) / cbModelParam._m0[35u].z) + ((((((_1645 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1703 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        vec4 _1724 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        float _1736 = exp2((_1703.w + (-0.5)) * 20.0) * 2.0;
        float _1737 = _1736 * (_1703.x + (-0.5));
        float _1738 = _1736 * (_1703.y + (-0.5));
        float _1739 = _1736 * (_1703.z + (-0.5));
        float _1746 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1747 = _1746 * (_1710.x + (-0.5));
        float _1748 = _1746 * (_1710.y + (-0.5));
        float _1749 = _1746 * (_1710.z + (-0.5));
        float _1756 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1757 = _1756 * (_1717.x + (-0.5));
        float _1758 = _1756 * (_1717.y + (-0.5));
        float _1759 = _1756 * (_1717.z + (-0.5));
        float _1766 = exp2((_1724.w + (-0.5)) * 20.0) * 2.0;
        float _1767 = _1766 * (_1724.x + (-0.5));
        float _1768 = _1766 * (_1724.y + (-0.5));
        float _1769 = _1766 * (_1724.z + (-0.5));
        float _1770 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1771 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1772 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1773 = _1737 * 0.5;
        float _1774 = _1747 * 0.5;
        float _1775 = _1757 * 0.5;
        float _1776 = dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775));
        float _1781 = (_1776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1776);
        float _1789 = (dot(vec3(_1017, _1018, _1019), vec3(_1781 * _1773, _1781 * _1774, _1781 * _1775)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1798 = sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775)) / (_1770 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1800 = _1799 * 2.0;
        float _1804 = (1.0 - _1799) / (_1799 + 1.0);
        float _4429 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1814 = ((((1.0 - _1805) * (_1800 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1800 + 1.0))) + _1805) * _1770;
        float _1815 = _1738 * 0.5;
        float _1816 = _1748 * 0.5;
        float _1817 = _1758 * 0.5;
        float _1818 = dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817));
        float _1823 = (_1818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1818);
        float _1831 = (dot(vec3(_1017, _1018, _1019), vec3(_1823 * _1815, _1823 * _1816, _1823 * _1817)) + 1.0) * 0.5;
        float _4440 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1840 = sqrt(((_1816 * _1816) + (_1815 * _1815)) + (_1817 * _1817)) / (_1771 + 9.9999997473787516355514526367188e-06);
        float _4451 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1842 = _1841 * 2.0;
        float _1846 = (1.0 - _1841) / (_1841 + 1.0);
        float _4462 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1856 = ((((1.0 - _1847) * (_1842 + 2.0)) * exp2(log2(isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_1842 + 1.0))) + _1847) * _1771;
        float _1857 = _1739 * 0.5;
        float _1858 = _1749 * 0.5;
        float _1859 = _1759 * 0.5;
        float _1860 = dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859));
        float _1865 = (_1860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1860);
        float _1873 = (dot(vec3(_1017, _1018, _1019), vec3(_1865 * _1857, _1865 * _1858, _1865 * _1859)) + 1.0) * 0.5;
        float _4473 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1882 = sqrt(((_1858 * _1858) + (_1857 * _1857)) + (_1859 * _1859)) / (_1772 + 9.9999997473787516355514526367188e-06);
        float _4484 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1883 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1884 = _1883 * 2.0;
        float _1888 = (1.0 - _1883) / (_1883 + 1.0);
        float _4495 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1889 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _1898 = ((((1.0 - _1889) * (_1884 + 2.0)) * exp2(log2(isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_1884 + 1.0))) + _1889) * _1772;
        _1906 = _1739;
        _1907 = _1738;
        _1908 = _1737;
        _1909 = _1749;
        _1910 = _1748;
        _1911 = _1747;
        _1912 = _1759;
        _1913 = _1758;
        _1914 = _1757;
        _1915 = _1772;
        _1916 = _1771;
        _1917 = _1770;
        _1918 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)));
        _1919 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)));
        _1920 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0)));
    }
    else
    {
        _1906 = _1596;
        _1907 = _1596;
        _1908 = _1596;
        _1909 = _1596;
        _1910 = _1596;
        _1911 = _1596;
        _1912 = _1596;
        _1913 = _1596;
        _1914 = _1596;
        _1915 = _1596;
        _1916 = _1596;
        _1917 = _1596;
        _1918 = 0.0;
        _1919 = 0.0;
        _1920 = 0.0;
    }
    float _1930 = (cbModelParam._m0[1u].x * (_1918 - _1608)) + _1608;
    float _1931 = (cbModelParam._m0[1u].x * (_1919 - _1609)) + _1609;
    float _1932 = (cbModelParam._m0[1u].x * (_1920 - _1610)) + _1610;
    float _1953 = fma(_1932, cbSceneParam._m0[89u].z, fma(_1931, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1956 = fma(_1932, cbSceneParam._m0[90u].z, fma(_1931, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1959 = fma(_1932, cbSceneParam._m0[91u].z, fma(_1931, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1930));
    float _1974 = _1202 * 0.5;
    float _1975 = _1203 * 0.5;
    float _1976 = _1204 * 0.5;
    float _1977 = dot(vec4(_1974, _1975, _1976, 1.0), vec4(_1908, _1911, _1914, _1917));
    float _1980 = dot(vec4(_1974, _1975, _1976, 1.0), vec4(_1907, _1910, _1913, _1916));
    float _1983 = dot(vec4(_1974, _1975, _1976, 1.0), vec4(_1906, _1909, _1912, _1915));
    float _2017;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1990 = dot(vec4(_1974, _1975, _1976, 1.0), vec4(_1595, _1599, _1602, _1605));
        float _1994 = dot(vec4(_1974, _1975, _1976, 1.0), vec4(_1597, _1600, _1603, _1606));
        float _1998 = dot(vec4(_1974, _1975, _1976, 1.0), vec4(_1598, _1601, _1604, _1607));
        float _2005 = dot(vec4(cbModelParam._m0[39u]), vec4(_1974, _1975, _1976, 1.0));
        _2017 = dot(vec3(isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0)), isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0)), isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2005) ? 0.0 : (isnan(0.0) ? _2005 : max(0.0, _2005))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2017 = 1.0;
    }
    float _2028;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2019 = dot(vec4(cbModelParam._m0[40u]), vec4(_1974, _1975, _1976, 1.0));
        _2028 = dot(vec3(isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)), isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)), isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2019) ? 0.0 : (isnan(0.0) ? _2019 : max(0.0, _2019))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2028 = 1.0;
    }
    float _2032 = (_2028 * cbModelParam._m0[1u].x) + (_2017 * (1.0 - cbModelParam._m0[1u].x));
    float _2042 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1020);
    float _2043 = isnan(_2042) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2042 : min(cbModelParam._m0[25u].z, _2042));
    float _2124;
    float _2126;
    float _2128;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2091 = fma(_1266, cbModelParam._m0[13u].z, fma(_1262, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1258)) + cbModelParam._m0[13u].w;
        float _2095 = fma(_1266, cbModelParam._m0[14u].z, fma(_1262, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1258)) + cbModelParam._m0[14u].w;
        float _2099 = fma(_1266, cbModelParam._m0[15u].z, fma(_1262, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1258)) + cbModelParam._m0[15u].w;
        float _2102 = fma(_1204, cbModelParam._m0[13u].z, fma(_1203, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1202));
        float _2105 = fma(_1204, cbModelParam._m0[14u].z, fma(_1203, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1202));
        float _2108 = fma(_1204, cbModelParam._m0[15u].z, fma(_1203, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1202));
        float _2136;
        if (_2102 > 0.0)
        {
            _2136 = abs((1.0 - _2091) / _2102);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2091 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2136 = frontier_phi_17_15_ladder;
        }
        float _2360;
        if (_2105 > 0.0)
        {
            _2360 = abs((1.0 - _2095) / _2105);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2095 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2360 = frontier_phi_26_22_ladder;
        }
        float _2617;
        if (_2108 > 0.0)
        {
            _2617 = abs((1.0 - _2099) / _2108);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2099 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2617 = frontier_phi_38_33_ladder;
        }
        float _2619 = isnan(_2360) ? _2136 : (isnan(_2136) ? _2360 : min(_2136, _2360));
        float _2620 = isnan(_2617) ? _2619 : (isnan(_2619) ? _2617 : min(_2619, _2617));
        float _2624 = (_2620 * _2102) + _2091;
        float _2625 = (_2620 * _2105) + _2095;
        float _2626 = (_2620 * _2108) + _2099;
        float _2627 = _2620 * 9.9999997473787516355514526367188e-05;
        float _2629 = (-1.0) - _2627;
        float _2631 = _2627 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2626 > _2631) || ((_2626 < _2629) || ((_2625 > _2631) || ((_2625 < _2629) || ((_2624 < _2629) || (_2624 > _2631))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2754 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2626, cbModelParam._m0[9u].z, fma(_2625, cbModelParam._m0[9u].y, _2624 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2626, cbModelParam._m0[10u].z, fma(_2625, cbModelParam._m0[10u].y, _2624 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2626, cbModelParam._m0[11u].z, fma(_2625, cbModelParam._m0[11u].y, _2624 * cbModelParam._m0[11u].x))), _2043);
            frontier_phi_16_38_ladder = _2754.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2754.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2754.x * cbModelParam._m0[1u].y;
        }
        _2124 = frontier_phi_16_38_ladder_2;
        _2126 = frontier_phi_16_38_ladder_1;
        _2128 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2112 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1202, _1203, _1204), _2043);
        _2124 = _2112.x * cbModelParam._m0[1u].y;
        _2126 = _2112.y * cbModelParam._m0[1u].y;
        _2128 = _2112.z * cbModelParam._m0[1u].y;
    }
    float _2132 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1020);
    float _2133 = isnan(_2132) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2132 : min(cbModelParam._m0[25u].w, _2132));
    float _2223;
    float _2225;
    float _2227;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2187 = fma(_1266, cbModelParam._m0[21u].z, fma(_1262, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1258)) + cbModelParam._m0[21u].w;
        float _2191 = fma(_1266, cbModelParam._m0[22u].z, fma(_1262, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1258)) + cbModelParam._m0[22u].w;
        float _2195 = fma(_1266, cbModelParam._m0[23u].z, fma(_1262, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1258)) + cbModelParam._m0[23u].w;
        float _2198 = fma(_1204, cbModelParam._m0[21u].z, fma(_1203, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1202));
        float _2201 = fma(_1204, cbModelParam._m0[22u].z, fma(_1203, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1202));
        float _2204 = fma(_1204, cbModelParam._m0[23u].z, fma(_1203, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1202));
        float _2365;
        if (_2198 > 0.0)
        {
            _2365 = abs((1.0 - _2187) / _2198);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2198 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2187 + 1.0) / _2198);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2365 = frontier_phi_28_24_ladder;
        }
        float _2644;
        if (_2201 > 0.0)
        {
            _2644 = abs((1.0 - _2191) / _2201);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2201 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2191 + 1.0) / _2201);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2644 = frontier_phi_40_35_ladder;
        }
        float _2857;
        if (_2204 > 0.0)
        {
            _2857 = abs((1.0 - _2195) / _2204);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2204 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2195 + 1.0) / _2204);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2857 = frontier_phi_49_46_ladder;
        }
        float _2859 = isnan(_2644) ? _2365 : (isnan(_2365) ? _2644 : min(_2365, _2644));
        float _2860 = isnan(_2857) ? _2859 : (isnan(_2859) ? _2857 : min(_2859, _2857));
        float _2864 = (_2860 * _2198) + _2187;
        float _2865 = (_2860 * _2201) + _2191;
        float _2866 = (_2860 * _2204) + _2195;
        float _2867 = _2860 * 9.9999997473787516355514526367188e-05;
        float _2868 = (-1.0) - _2867;
        float _2870 = _2867 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2866 > _2870) || ((_2866 < _2868) || ((_2865 > _2870) || ((_2865 < _2868) || ((_2864 < _2868) || (_2864 > _2870))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3065 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2866, cbModelParam._m0[17u].z, fma(_2865, cbModelParam._m0[17u].y, _2864 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2866, cbModelParam._m0[18u].z, fma(_2865, cbModelParam._m0[18u].y, _2864 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2866, cbModelParam._m0[19u].z, fma(_2865, cbModelParam._m0[19u].y, _2864 * cbModelParam._m0[19u].x))), _2133);
            frontier_phi_25_49_ladder = _3065.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3065.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3065.x * cbModelParam._m0[1u].z;
        }
        _2223 = frontier_phi_25_49_ladder_2;
        _2225 = frontier_phi_25_49_ladder_1;
        _2227 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2207 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1202, _1203, _1204), _2133);
        _2223 = _2207.x * cbModelParam._m0[1u].z;
        _2225 = _2207.y * cbModelParam._m0[1u].z;
        _2227 = _2207.z * cbModelParam._m0[1u].z;
    }
    float _2240 = (((_1229 * _1178) + _1230) * _1194) * ((cbModelParam._m0[1u].w * (_2223 - _2124)) + _2124);
    float _2242 = (((_1229 * _1180) + _1230) * _1194) * ((cbModelParam._m0[1u].w * (_2225 - _2126)) + _2126);
    float _2244 = (((_1229 * _1181) + _1230) * _1194) * ((cbModelParam._m0[1u].w * (_2227 - _2128)) + _2128);
    float _2247 = fma(_2244, cbSceneParam._m0[89u].z, fma(_2242, cbSceneParam._m0[89u].y, _2240 * cbSceneParam._m0[89u].x));
    float _2250 = fma(_2244, cbSceneParam._m0[90u].z, fma(_2242, cbSceneParam._m0[90u].y, _2240 * cbSceneParam._m0[90u].x));
    float _2253 = fma(_2244, cbSceneParam._m0[91u].z, fma(_2242, cbSceneParam._m0[91u].y, _2240 * cbSceneParam._m0[91u].x));
    vec4 _2261 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1116, _1117));
    float _2263 = _2261.w;
    float _2275 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2263);
    float _2276 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2263);
    float _2277 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2263);
    uvec4 _2281 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2283 = _2281.x * 14u;
    uint _2284 = _2283 + 13u;
    float _2291 = _1194 + (-1.0);
    float _2296 = (cbLight._m0[_2284].x * _2291) + 1.0;
    float _2297 = (cbLight._m0[_2284].y * _2291) + 1.0;
    float _2298 = (cbLight._m0[_2284].z * _2291) + 1.0;
    float _2299 = (cbLight._m0[_2284].w * _2291) + 1.0;
    uint _2300 = _2283 + 5u;
    float _2306 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
    uint _2310 = _2283 + 4u;
    float _2319 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
    uint _2323 = _2283 | 1u;
    float _2334 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_1017, _1018, _1019));
    float _2337 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_1017, _1018, _1019));
    float _4631 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _4642 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2342 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * 0.3183098733425140380859375;
    float _2344 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * 0.3183098733425140380859375;
    float _2351 = ((cbLight._m0[_2300].x * _2306) * _2344) + (((cbLight._m0[_2310].x * _2275) * _2319) * _2342);
    float _2352 = ((_2306 * cbLight._m0[_2300].y) * _2344) + (((cbLight._m0[_2310].y * _2276) * _2319) * _2342);
    float _2353 = ((_2306 * cbLight._m0[_2300].z) * _2344) + (((cbLight._m0[_2310].z * _2277) * _2319) * _2342);
    uvec4 _2357 = floatBitsToUint(cbLight._m0[_2283 + 12u]);
    bool _2359 = _2357.x == 0u;
    float _2370;
    float _2372;
    float _2374;
    if (_2359)
    {
        _2370 = _2351;
        _2372 = _2352;
        _2374 = _2353;
    }
    else
    {
        uint _2378 = _2283 + 6u;
        float _2394 = (dot(vec3(cbLight._m0[_2283 + 2u].xyz), vec3(_1017, _1018, _1019)) * 0.5) + 0.5;
        float _2395 = _2394 * _2394;
        float _4653 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2396 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2397 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2370 = (((cbLight._m0[_2378].x * 0.3183098733425140380859375) * _2396) * _2397) + _2351;
        _2372 = (((cbLight._m0[_2378].y * 0.3183098733425140380859375) * _2396) * _2397) + _2352;
        _2374 = (((cbLight._m0[_2378].z * 0.3183098733425140380859375) * _2396) * _2397) + _2353;
    }
    bool _2377 = _2357.y == 0u;
    float _2415;
    float _2417;
    float _2419;
    if (_2377)
    {
        _2415 = _2370;
        _2417 = _2372;
        _2419 = _2374;
    }
    else
    {
        uint _2588 = _2283 + 7u;
        float _2604 = (dot(vec3(cbLight._m0[_2283 + 3u].xyz), vec3(_1017, _1018, _1019)) * 0.5) + 0.5;
        float _2605 = _2604 * _2604;
        float _4669 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2606 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2607 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2415 = (((cbLight._m0[_2588].x * 0.3183098733425140380859375) * _2606) * _2607) + _2370;
        _2417 = (((cbLight._m0[_2588].y * 0.3183098733425140380859375) * _2606) * _2607) + _2372;
        _2419 = (((cbLight._m0[_2588].z * 0.3183098733425140380859375) * _2606) * _2607) + _2374;
    }
    uint _2422 = _2283 + 8u;
    float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _1020) * 0.949999988079071044921875);
    float _2436 = _2435 * _2435;
    float _2437 = cbLight._m0[_2283].x + _1096;
    float _2438 = cbLight._m0[_2283].y + _1097;
    float _2439 = cbLight._m0[_2283].z + _1098;
    float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
    float _2444 = _2443 * _2437;
    float _2445 = _2443 * _2438;
    float _2446 = _2443 * _2439;
    float _2447 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2283].xyz));
    float _4685 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2450 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _4696 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _2451 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _2452 = dot(vec3(_1017, _1018, _1019), vec3(_2444, _2445, _2446));
    float _4707 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2456 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2444, _2445, _2446));
    float _4718 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2460 = _2436 * _2436;
    float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
    float _2472 = exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0);
    float _2473 = 0.959999978542327880859375 - _1175;
    float _2475 = 0.959999978542327880859375 - _1176;
    float _2476 = 0.959999978542327880859375 - _1177;
    float _2483 = 1.0 - _2436;
    float _2494 = (0.5 / (((_2451 * ((_2450 * _2483) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2483) + _2436) * _2450))) * _2450;
    float _4729 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2496 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
    uint _2510 = _2283 + 9u;
    float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _1020) * 0.949999988079071044921875);
    float _2522 = _2521 * _2521;
    float _2523 = cbLight._m0[_2323].x + _1096;
    float _2524 = cbLight._m0[_2323].y + _1097;
    float _2525 = cbLight._m0[_2323].z + _1098;
    float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
    float _2530 = _2529 * _2523;
    float _2531 = _2529 * _2524;
    float _2532 = _2529 * _2525;
    float _2533 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2323].xyz));
    float _4740 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _2537 = dot(vec3(_1017, _1018, _1019), vec3(_2530, _2531, _2532));
    float _4751 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2540 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2541 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2530, _2531, _2532));
    float _4762 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2545 = _2522 * _2522;
    float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
    float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
    float _2563 = 1.0 - _2522;
    float _2573 = (0.5 / (((_2451 * ((_2536 * _2563) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2563) + _2522) * _2536))) * _2536;
    float _4773 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2575 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
    float _2585 = (((((_2556 * _2473) + _1178) * cbLight._m0[_2510].x) * _2575) * _2306) + ((((cbLight._m0[_2422].x * _2275) * ((_2472 * _2473) + _1178)) * _2496) * _2319);
    float _2586 = (((((_2556 * _2475) + _1180) * cbLight._m0[_2510].y) * _2575) * _2306) + ((((cbLight._m0[_2422].y * _2276) * ((_2472 * _2475) + _1180)) * _2496) * _2319);
    float _2587 = (((((_2556 * _2476) + _1181) * cbLight._m0[_2510].z) * _2575) * _2306) + ((((cbLight._m0[_2422].z * _2277) * ((_2472 * _2476) + _1181)) * _2496) * _2319);
    float _2649;
    float _2651;
    float _2653;
    if (_2359)
    {
        _2649 = _2585;
        _2651 = _2586;
        _2653 = _2587;
    }
    else
    {
        uint _2655 = _2283 + 2u;
        uint _2659 = _2283 + 10u;
        float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2655].w)) * _1020) * 0.949999988079071044921875);
        float _2674 = _2673 * _2673;
        float _2675 = cbLight._m0[_2655].x + _1096;
        float _2676 = cbLight._m0[_2655].y + _1097;
        float _2677 = cbLight._m0[_2655].z + _1098;
        float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
        float _2682 = _2681 * _2675;
        float _2683 = _2681 * _2676;
        float _2684 = _2681 * _2677;
        float _2685 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2655].xyz));
        float _4784 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2689 = dot(vec3(_1017, _1018, _1019), vec3(_2682, _2683, _2684));
        float _4795 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2693 = dot(vec3(cbLight._m0[_2655].xyz), vec3(_2682, _2683, _2684));
        float _4806 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2697 = _2674 * _2674;
        float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
        float _2708 = exp2(log2(1.0 - (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) * 5.0);
        float _2715 = 1.0 - _2674;
        float _2725 = (0.5 / (((_2451 * ((_2688 * _2715) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2715) + _2674) * _2688))) * _2688;
        float _4817 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2727 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
        float _2728 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2649 = (((((_2708 * _2473) + _1178) * cbLight._m0[_2659].x) * _2727) * _2728) + _2585;
        _2651 = (((((_2708 * _2475) + _1180) * cbLight._m0[_2659].y) * _2727) * _2728) + _2586;
        _2653 = (((((_2708 * _2476) + _1181) * cbLight._m0[_2659].z) * _2727) * _2728) + _2587;
    }
    float _2763;
    float _2765;
    float _2767;
    if (_2377)
    {
        _2763 = _2649;
        _2765 = _2651;
        _2767 = _2653;
    }
    else
    {
        uint _2774 = _2283 + 3u;
        uint _2778 = _2283 + 11u;
        float _2792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2774].w)) * _1020) * 0.949999988079071044921875);
        float _2793 = _2792 * _2792;
        float _2794 = cbLight._m0[_2774].x + _1096;
        float _2795 = cbLight._m0[_2774].y + _1097;
        float _2796 = cbLight._m0[_2774].z + _1098;
        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
        float _2801 = _2800 * _2794;
        float _2802 = _2800 * _2795;
        float _2803 = _2800 * _2796;
        float _2804 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2774].xyz));
        float _4833 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2807 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2808 = dot(vec3(_1017, _1018, _1019), vec3(_2801, _2802, _2803));
        float _4844 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2812 = dot(vec3(cbLight._m0[_2774].xyz), vec3(_2801, _2802, _2803));
        float _4855 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2816 = _2793 * _2793;
        float _2820 = ((_2811 * _2811) * (_2816 + (-1.0))) + 1.0;
        float _2827 = exp2(log2(1.0 - (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) * 5.0);
        float _2834 = 1.0 - _2793;
        float _2844 = (0.5 / (((_2451 * ((_2807 * _2834) + _2793)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2834) + _2793) * _2807))) * _2807;
        float _4866 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2846 = (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2816 / ((_2820 * _2820) * 3.141590118408203125));
        float _2847 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2763 = (((((_2827 * _2473) + _1178) * cbLight._m0[_2778].x) * _2846) * _2847) + _2649;
        _2765 = (((((_2827 * _2475) + _1180) * cbLight._m0[_2778].y) * _2846) * _2847) + _2651;
        _2767 = (((((_2827 * _2476) + _1181) * cbLight._m0[_2778].z) * _2846) * _2847) + _2653;
    }
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    float _2992;
    if (_2281.y == 0u)
    {
        float _2922 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2923 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2922;
        float _2924 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2922;
        float _2925 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2922;
        uvec4 _2937 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2938 = _2937.x;
        uint _2949 = uint((float(_2937.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1117) / _2938))) + floor(float(uint(cbSceneParam._m0[85u].x * _1116) / _2938)));
        float _2959 = (log2(_2925 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2960 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        uint _2963 = uint(isnan(14.0) ? _2960 : (isnan(_2960) ? 14.0 : min(_2960, 14.0)));
        uvec4 _2968 = texelFetch(g_lightClusterGridBuffer, int(((_2963 << 2u) + (_2949 << 6u)) >> 2u));
        uint _2969 = _2968.x;
        uint _2970 = _2937.z;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        if (((((1u << ((_2970 >> 4u) & 15u)) + 4294967295u) & _2969) == 0u) || ((_2970 & 240u) == 0u))
        {
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
        }
        else
        {
            float _3071;
            float _3073;
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            uint _3228 = 0u;
            uint _3237;
            bool _3238;
            for (;;)
            {
                _3237 = texelFetch(g_lightClassification, int((((_2963 << 5u) + (_2949 << 9u)) + (_3228 << 2u)) >> 2u)).x;
                _3238 = _3237 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3238)
                {
                    frontier_phi_66_pred = _3222;
                    frontier_phi_66_pred_1 = _3227;
                    frontier_phi_66_pred_2 = _3226;
                    frontier_phi_66_pred_3 = _3225;
                    frontier_phi_66_pred_4 = _3224;
                    frontier_phi_66_pred_5 = _3223;
                }
                else
                {
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    uint _3373;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3237;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    for (;;)
                    {
                        uint _3377 = uint(findLSB(_3373)) + (_3228 << 5u);
                        uint _3374 = (_3373 + 4294967295u) & _3373;
                        uint _3379 = _3377 * 48u;
                        vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 3u)).x));
                        uint _3399 = (_3377 * 48u) + 4u;
                        vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3399)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 3u)).x));
                        uint _3418 = (_3377 * 48u) + 8u;
                        vec3 _3429 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x));
                        float _3433 = _3393.x - _2923;
                        float _3434 = _3393.y - _2924;
                        float _3435 = _3393.z - _2925;
                        float _3436 = dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435));
                        float _3439 = inversesqrt(_3436);
                        float _3440 = _3439 * _3433;
                        float _3441 = _3439 * _3434;
                        float _3442 = _3439 * _3435;
                        float _3443 = dot(vec3(_1135, _1138, _1141), vec3(_3440, _3441, _3442));
                        float _3448 = 1.0 - (_3436 * _3393.w);
                        float _4892 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3449 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                        float _3450 = sqrt(_3436) * _3412.w;
                        float _3453 = 1.39999997615814208984375 / (_3450 + 1.39999997615814208984375);
                        float _3454 = _3453 * _3453;
                        float _3457 = ((1.0 - _3454) * _3443) + _3454;
                        float _3460 = _3450 * _3450;
                        float _3464 = ((isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0))) * _3449) / ((_3460 * 0.699999988079071044921875) + 1.0);
                        float _3468 = (-0.0) - _2923;
                        float _3469 = (-0.0) - _2924;
                        float _3470 = (-0.0) - _2925;
                        float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                        float _3475 = _3474 * _3468;
                        float _3476 = _3474 * _3469;
                        float _3477 = _3474 * _3470;
                        float _3485 = exp2(log2(1.0 / ((_3460 * 3.5) + 5.0)) * 0.25);
                        float _3486 = 1.0 - _1210;
                        float _3493 = sqrt(1.0 - ((1.0 - (_3486 * _3486)) * (1.0 - (_3485 * _3485))));
                        float _3494 = _3493 * _3493;
                        float _3495 = _3494 * _3494;
                        float _3496 = _3475 + _3440;
                        float _3497 = _3476 + _3441;
                        float _3498 = _3477 + _3442;
                        float _3502 = inversesqrt(dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498)));
                        float _3506 = dot(vec3(_1135, _1138, _1141), vec3(_3475, _3476, _3477));
                        float _4908 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3509 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3510 = dot(vec3(_1135, _1138, _1141), vec3(_3502 * _3496, _3502 * _3497, _3502 * _3498));
                        float _4919 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3513 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                        float _3517 = ((_3513 * _3513) * (_3495 + (-1.0))) + 1.0;
                        float _3518 = _3453 * _3494;
                        float _3519 = _3518 * _3518;
                        float _3522 = ((1.0 - _3519) * _3443) + _3519;
                        float _4930 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3523 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3524 = 1.0 - _3494;
                        float _3534 = (0.5 / (((_3523 * ((_3509 * _3524) + _3494)) + 9.9999999392252902907785028219223e-09) + (((_3523 * _3524) + _3494) * _3509))) * _3523;
                        float _4941 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3545 = (((_3495 * 3.1415927410125732421875) * (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0)))) / ((_3517 * _3517) * ((_3460 * 2.1991131305694580078125) + 3.141590118408203125))) * _3449;
                        _3297 = (_3464 * _3412.x) + _3370;
                        _3298 = (_3464 * _3412.y) + _3371;
                        _3299 = (_3464 * _3412.z) + _3372;
                        _3294 = (_3545 * _3429.x) + _3367;
                        _3295 = (_3545 * _3429.y) + _3368;
                        _3296 = (_3545 * _3429.z) + _3369;
                        if (_3374 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3374;
                        }
                    }
                    frontier_phi_66_pred = _3294;
                    frontier_phi_66_pred_1 = _3299;
                    frontier_phi_66_pred_2 = _3298;
                    frontier_phi_66_pred_3 = _3297;
                    frontier_phi_66_pred_4 = _3296;
                    frontier_phi_66_pred_5 = _3295;
                }
                _3071 = frontier_phi_66_pred;
                _3081 = frontier_phi_66_pred_1;
                _3079 = frontier_phi_66_pred_2;
                _3077 = frontier_phi_66_pred_3;
                _3075 = frontier_phi_66_pred_4;
                _3073 = frontier_phi_66_pred_5;
                uint _3229 = _3228 + 1u;
                if (_3229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3222 = _3071;
                    _3223 = _3073;
                    _3224 = _3075;
                    _3225 = _3077;
                    _3226 = _3079;
                    _3227 = _3081;
                    _3228 = _3229;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
        }
        uvec4 _3084 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3085 = _3084.z;
        uint _3087 = (_3085 >> 8u) & 15u;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        if (((4294967295u << _3087) & _2969) == 0u)
        {
            _3190 = _3070;
            _3192 = _3072;
            _3194 = _3074;
            _3196 = _3076;
            _3198 = _3078;
            _3200 = _3080;
        }
        else
        {
            float _3215 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
            float _3216 = _3215 * _2923;
            float _3217 = _3215 * _2924;
            float _3218 = _3215 * _2925;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3087 < ((_3085 >> 12u) & 15u))
            {
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3350 = _3070;
                float _3351 = _3072;
                float _3352 = _3074;
                float _3353 = _3076;
                float _3354 = _3078;
                float _3355 = _3080;
                uint _3356 = _3087;
                uint _3365;
                bool _3366;
                for (;;)
                {
                    _3365 = texelFetch(g_lightClassification, int((((_2963 << 5u) + (_2949 << 9u)) + (_3356 << 2u)) >> 2u)).x;
                    _3366 = _3365 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3366)
                    {
                        frontier_phi_77_pred = _3355;
                        frontier_phi_77_pred_1 = _3354;
                        frontier_phi_77_pred_2 = _3353;
                        frontier_phi_77_pred_3 = _3352;
                        frontier_phi_77_pred_4 = _3351;
                        frontier_phi_77_pred_5 = _3350;
                    }
                    else
                    {
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3857;
                        float _3572 = _3350;
                        float _3573 = _3351;
                        float _3574 = _3352;
                        float _3575 = _3353;
                        float _3576 = _3354;
                        float _3577 = _3355;
                        uint _3578 = _3365;
                        uint _3579;
                        vec4 _3604;
                        float _3605;
                        vec4 _3620;
                        vec3 _3632;
                        vec4 _3647;
                        vec4 _3662;
                        float _3708;
                        bool _3709;
                        for (;;)
                        {
                            uint _3589 = ((_3356 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3578));
                            _3579 = (_3578 + 4294967295u) & _3578;
                            uint _3591 = _3589 * 40u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            _3605 = _3604.w;
                            uint _3607 = (_3589 * 40u) + 4u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3622 = (_3589 * 40u) + 8u;
                            _3632 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x));
                            uint _3634 = (_3589 * 40u) + 16u;
                            _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            uint _3649 = (_3589 * 40u) + 20u;
                            _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            uint _3664 = (_3589 * 40u) + 24u;
                            vec4 _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            uint _3683 = (_3589 * 40u) + 28u;
                            vec4 _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            _3708 = fma(_2925, _3696.z, fma(_2924, _3696.y, _3696.x * _2923)) + _3696.w;
                            _3709 = !((fma(_2925, _3677.z, fma(_2924, _3677.y, _3677.x * _2923)) + _3677.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3709)
                            {
                                float _3736 = _3604.x - _2923;
                                float _3737 = _3604.y - _2924;
                                float _3738 = _3604.z - _2925;
                                float _3739 = dot(vec3(_3736, _3737, _3738), vec3(_3736, _3737, _3738));
                                float _3742 = inversesqrt(_3739);
                                float _3743 = _3742 * _3736;
                                float _3744 = _3742 * _3737;
                                float _3745 = _3742 * _3738;
                                float _3749 = 1.0 - (_3739 / (_3605 * _3605));
                                float _4952 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3750 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3754 = sqrt(_3739) * _3620.w;
                                float _3756 = 1.39999997615814208984375 / (_3754 + 1.39999997615814208984375);
                                float _3757 = _3756 * _3756;
                                float _3760 = ((1.0 - _3757) * dot(vec3(_3743, _3744, _3745), vec3(_1135, _1138, _1141))) + _3757;
                                float _3763 = _3754 * _3754;
                                float _3767 = (fma(_2925, _3647.z, fma(_2924, _3647.y, _3647.x * _2923)) + _3647.w) / _3708;
                                float _3768 = (fma(_2925, _3662.z, fma(_2924, _3662.y, _3662.x * _2923)) + _3662.w) / _3708;
                                float _3772 = 1.0 - dot(vec2(_3767, _3768), vec2(_3767, _3768));
                                float _4968 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3774 = _3773 * (((isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0))) * _3750) / ((_3763 * 0.699999988079071044921875) + 1.0));
                                float _3786 = exp2(log2(1.0 / ((_3763 * 3.5) + 5.0)) * 0.25);
                                float _3787 = 1.0 - _1210;
                                float _3794 = sqrt(1.0 - ((1.0 - (_3787 * _3787)) * (1.0 - (_3786 * _3786))));
                                float _3795 = _3794 * _3794;
                                float _3796 = _3795 * _3795;
                                float _3797 = _3743 - _3216;
                                float _3798 = _3744 - _3217;
                                float _3799 = _3745 - _3218;
                                float _3803 = inversesqrt(dot(vec3(_3797, _3798, _3799), vec3(_3797, _3798, _3799)));
                                float _3807 = dot(vec3(_1135, _1138, _1141), vec3((-0.0) - _3216, (-0.0) - _3217, (-0.0) - _3218));
                                float _4979 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3810 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3811 = dot(vec3(_1135, _1138, _1141), vec3(_3803 * _3797, _3803 * _3798, _3803 * _3799));
                                float _4990 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3814 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3818 = ((_3814 * _3814) * (_3796 + (-1.0))) + 1.0;
                                float _3819 = _3756 * _3795;
                                float _3820 = _3819 * _3819;
                                float _3826 = ((1.0 - _3820) * dot(vec3(_1135, _1138, _1141), vec3(_3743, _3744, _3745))) + _3820;
                                float _5001 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3827 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3828 = 1.0 - _3795;
                                float _3838 = (0.5 / (((_3827 * ((_3810 * _3828) + _3795)) + 9.9999999392252902907785028219223e-09) + (((_3827 * _3828) + _3795) * _3810))) * _3827;
                                float _5012 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3848 = (_3773 * _3750) * (((_3796 * 3.1415927410125732421875) * (isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0)))) / ((_3818 * _3818) * ((_3763 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3774 * _3620.y;
                                frontier_phi_83_pred_1 = _3774 * _3620.x;
                                frontier_phi_83_pred_2 = _3848 * _3632.z;
                                frontier_phi_83_pred_3 = _3848 * _3632.y;
                                frontier_phi_83_pred_4 = _3848 * _3632.x;
                                frontier_phi_83_pred_5 = _3774 * _3620.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3856 = frontier_phi_83_pred;
                            _3855 = frontier_phi_83_pred_1;
                            _3854 = frontier_phi_83_pred_2;
                            _3853 = frontier_phi_83_pred_3;
                            _3852 = frontier_phi_83_pred_4;
                            _3857 = frontier_phi_83_pred_5;
                            _3562 = _3855 + _3575;
                            _3563 = _3856 + _3576;
                            _3564 = _3857 + _3577;
                            _3559 = _3852 + _3572;
                            _3560 = _3853 + _3573;
                            _3561 = _3854 + _3574;
                            if (_3579 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3579;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3564;
                        frontier_phi_77_pred_1 = _3563;
                        frontier_phi_77_pred_2 = _3562;
                        frontier_phi_77_pred_3 = _3561;
                        frontier_phi_77_pred_4 = _3560;
                        frontier_phi_77_pred_5 = _3559;
                    }
                    _3201 = frontier_phi_77_pred;
                    _3199 = frontier_phi_77_pred_1;
                    _3197 = frontier_phi_77_pred_2;
                    _3195 = frontier_phi_77_pred_3;
                    _3193 = frontier_phi_77_pred_4;
                    _3191 = frontier_phi_77_pred_5;
                    uint _3357 = _3356 + 1u;
                    if (_3357 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3350 = _3191;
                        _3351 = _3193;
                        _3352 = _3195;
                        _3353 = _3197;
                        _3354 = _3199;
                        _3355 = _3201;
                        _3356 = _3357;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3195;
                frontier_phi_58_59_ladder_1 = _3201;
                frontier_phi_58_59_ladder_2 = _3199;
                frontier_phi_58_59_ladder_3 = _3197;
                frontier_phi_58_59_ladder_4 = _3193;
                frontier_phi_58_59_ladder_5 = _3191;
            }
            else
            {
                frontier_phi_58_59_ladder = _3074;
                frontier_phi_58_59_ladder_1 = _3080;
                frontier_phi_58_59_ladder_2 = _3078;
                frontier_phi_58_59_ladder_3 = _3076;
                frontier_phi_58_59_ladder_4 = _3072;
                frontier_phi_58_59_ladder_5 = _3070;
            }
            _3190 = frontier_phi_58_59_ladder_5;
            _3192 = frontier_phi_58_59_ladder_4;
            _3194 = frontier_phi_58_59_ladder;
            _3196 = frontier_phi_58_59_ladder_3;
            _3198 = frontier_phi_58_59_ladder_2;
            _3200 = frontier_phi_58_59_ladder_1;
        }
        float _3205 = isnan(1.0) ? _1194 : (isnan(_1194) ? 1.0 : min(_1194, 1.0));
        _2982 = (_3205 * _3196) + _2415;
        _2984 = (_3205 * _3198) + _2417;
        _2986 = (_3205 * _3200) + _2419;
        _2988 = ((_3190 * _1178) * _3205) + _2763;
        _2990 = ((_3192 * _1180) * _3205) + _2765;
        _2992 = ((_3194 * _1181) * _3205) + _2767;
    }
    else
    {
        _2982 = _2415;
        _2984 = _2417;
        _2986 = _2419;
        _2988 = _2763;
        _2990 = _2765;
        _2992 = _2767;
    }
    float _5028 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _5039 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _5050 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _3009 = ((isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_2982 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1194))) + ((_2988 + ((isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0))) * _2032)) * cbPerFrame._m0[3u].x);
    float _3010 = ((isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0))) * (_2984 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1194))) + ((_2990 + ((isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0))) * _2032)) * cbPerFrame._m0[3u].x);
    float _3011 = ((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_2986 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1194))) + ((_2992 + ((isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0))) * _2032)) * cbPerFrame._m0[3u].x);
    uint _3012 = _293 + 6u;
    float _3020 = _1116 / cbSceneParam._m0[86u].x;
    float _3021 = _1117 / cbSceneParam._m0[86u].y;
    vec4 _3035 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3020, _3021, (log2((isnan(cbSceneParam._m0[77u].w) ? _1039 : (isnan(_1039) ? cbSceneParam._m0[77u].w : min(_1039, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3037 = _3035.x;
    float _3038 = _3035.y;
    float _3039 = _3035.z;
    float _3040 = _3035.w;
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    if (_1039 > cbSceneParam._m0[78u].w)
    {
        float _3095 = isnan(_1039) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1039 : min(cbSceneParam._m0[80u].w, _1039));
        float _3096 = _3095 / _1039;
        float _3107 = _3096 * _1089;
        float _3108 = _1090 * _3096;
        float _3109 = (-0.0) - _3108;
        float _3110 = _3096 * _1091;
        float _3112 = (cbSceneParam._m0[77u].w * _3109) / _3095;
        float _3113 = _3112 + cbSceneParam._m0[79u].w;
        float _3114 = cbSceneParam._m0[79u].w - _3108;
        float _3120 = sqrt(((_3107 * _3107) + (_3108 * _3108)) + (_3110 * _3110));
        float _3123 = (1.0 - (cbSceneParam._m0[77u].w / _3095)) * _3120;
        float _3128 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3130 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3307;
        if (abs((_3109 - _3112) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3307 = ((((_3113 > 0.0) ? exp2(_3128 * _3113) : (2.0 - exp2(_3130 * _3113))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3123;
        }
        else
        {
            float _3251 = 1.0 / cbSceneParam._m0[80u].x;
            float _3252 = isnan(_3114) ? _3113 : (isnan(_3113) ? _3114 : max(_3113, _3114));
            float _3253 = isnan(_3114) ? _3113 : (isnan(_3113) ? _3114 : min(_3113, _3114));
            float _3262 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : min(_3252, 0.0));
            float _3263 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : min(_3253, 0.0));
            _3307 = ((abs(_3120 / _3109) * cbSceneParam._m0[80u].y) * ((((_3262 - _3263) * 2.0) - ((exp2(_3128 * (isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0)))) - exp2(_3128 * (isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))))) * _3251)) - ((exp2(_3130 * _3262) - exp2(_3130 * _3263)) * _3251))) + (_3123 * cbSceneParam._m0[80u].z);
        }
        vec4 _3309 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3020, _3021, 1.0), 0.0);
        float _3318 = exp2((_3307 * (-1.44269502162933349609375)) * (1.0 - _3309.w));
        float _3319 = log2(_3318);
        float _3335 = log2(_3040);
        _3132 = (exp2(_3335 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].x)) * _3309.x) / cbSceneParam._m0[78u].x)) + _3037;
        _3134 = (exp2(_3335 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].y)) * _3309.y) / cbSceneParam._m0[78u].y)) + _3038;
        _3136 = (exp2(_3335 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].z)) * _3309.z) / cbSceneParam._m0[78u].z)) + _3039;
        _3138 = _3318 * _3040;
    }
    else
    {
        _3132 = _3037;
        _3134 = _3038;
        _3136 = _3039;
        _3138 = _3040;
    }
    bool _3345;
    vec4 _3148;
    vec4 _3170;
    float _3172;
    float _3176;
    float _3177;
    float _3178;
    float _3179;
    bool _3189;
    for (;;)
    {
        _3148 = cbMatDynParam._m0[0u];
        float _3150 = roundEven(_3148.y);
        bool _3151 = _3150 == 3.0;
        float _3152 = log2(_3138);
        float _3159 = exp2(_3152 * cbSceneParam._m0[78u].x) * _3009;
        float _3160 = exp2(_3152 * cbSceneParam._m0[78u].y) * _3010;
        float _3161 = exp2(_3152 * cbSceneParam._m0[78u].z) * _3011;
        float _3168 = _1105 + (-0.5);
        _3170 = cbMtdParam._m0[1u];
        _3172 = _3170.y * _3168;
        float _3175 = (_3150 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3176 = _3175 * (_3151 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3132)));
        _3177 = _3175 * (_3151 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3134)));
        _3178 = _3175 * (_3151 ? _3161 : (_3161 + (cbSceneParam._m0[72u].w * _3136)));
        _3179 = _3168 * 0.999000012874603271484375;
        _3189 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3189)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3179) < 0.5)
            {
                _3345 = true;
                break;
            }
        }
        uint _3286 = _1154 + uint(_3148.w);
        if ((cbInstanceData._m0[_3286].w < 1.0) && ((cbInstanceData._m0[_3286].w + _3179) < 0.5))
        {
            _3345 = true;
            break;
        }
        if ((_3172 + 1.0) < _3170.x)
        {
            _3345 = true;
            break;
        }
        _3345 = false;
        break;
    }
    float _3550;
    if (_3345)
    {
        discard_state = true;
        _3550 = 0.0;
    }
    else
    {
        _3550 = cbInstanceData._m0[_3012].w;
    }
    SV_Target.x = _3176;
    SV_Target.y = _3177;
    SV_Target.z = _3178;
    SV_Target.w = _3550;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3012].w;
    discard_exit();
}


