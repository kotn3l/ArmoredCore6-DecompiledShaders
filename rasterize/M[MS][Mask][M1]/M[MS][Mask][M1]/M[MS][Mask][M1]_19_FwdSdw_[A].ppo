#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1484;
float _4148;
float _4149;
float _4150;
float _4151;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4160 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4171 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4182 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _378 = _373.x * cbMtdParam._m0[11u].x;
    float _379 = _373.y * cbMtdParam._m0[11u].y;
    float _380 = _373.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _447 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _461 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _478 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_449 - _461) * cbMtdParam._m0[23u].w) + _461) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4193 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _489 = (_347.x * cbMtdParam._m0[9u].x) * ((_479 * ((_399.x * cbMtdParam._m0[12u].x) - _378)) + _378);
    float _490 = (_347.y * cbMtdParam._m0[9u].y) * ((_479 * ((_399.y * cbMtdParam._m0[12u].y) - _379)) + _379);
    float _491 = (_347.z * cbMtdParam._m0[9u].z) * ((_479 * ((_399.z * cbMtdParam._m0[12u].z) - _380)) + _380);
    float _495 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _489;
    float _498 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _490;
    float _501 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _491;
    float _509 = (((_489 - _495) * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) + _495) * 4.55000019073486328125;
    float _511 = (((_490 - _498) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) + _498) * 4.55000019073486328125;
    float _513 = (((_491 - _501) * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) + _501) * 4.55000019073486328125;
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _556 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _575 = _573.x;
    float _576 = _573.y;
    float _577 = _573.z;
    float _586 = ((_556.z - _577) * _479) + _577;
    float _589 = ((((_556.x - _575) * _479) + _575) * 2.0) + (-1.0);
    float _590 = ((((_556.y - _576) * _479) + _576) * 2.0) + (-1.0);
    float _591 = dot(vec2(_589, _590), vec2(_589, _590));
    float _4204 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _596 = sqrt(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _639 = _637.x;
    float _640 = 1.0 - _639;
    float _649 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _652 = ((isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : min(_649, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _661 = (_652 - ((((((_639 - _640) * cbMtdParam._m0[24u].z) + _640) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _652))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4225 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _662 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _669 = (_662 * (cbMtdParam._m0[17u].x - _509)) + _509;
    float _670 = (_662 * (cbMtdParam._m0[17u].y - _511)) + _511;
    float _671 = (_662 * (cbMtdParam._m0[17u].z - _513)) + _513;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _685 = _683.x;
    float _686 = 1.0 - _685;
    float _711 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_685 - _686) * cbMtdParam._m0[24u].w) + _686) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4236 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _712 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _720 = ((((cbMtdParam._m0[10u].x - _669) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _712) + _669;
    float _721 = ((((cbMtdParam._m0[10u].y - _670) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _712) + _670;
    float _722 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _671)) * _712) + _671;
    vec4 _734 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _748 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _750 = _748.x;
    float _767 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _750) * _479) + _750;
    float _771 = ((_734.x - _767) * cbMtdParam._m0[19u].z) + _767;
    float _773 = _771 - (_771 * _662);
    float _775 = _773 - (_773 * _712);
    float _780 = (((_531.z - _586) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _586;
    float _784 = ((_612.z - _780) * cbMtdParam._m0[19u].w) + _780;
    vec4 _798 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _805 = (_798.x * 2.0) + (-1.0);
    float _806 = (_798.y * 2.0) + (-1.0);
    float _807 = dot(vec2(_805, _806), vec2(_805, _806));
    float _4247 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _815 = (_662 * (_798.z - _784)) + _784;
    float _818 = ((cbMtdParam._m0[23u].x - _815) * _712) + _815;
    vec4 _837 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _843 = (_837.x * 2.0) + (-1.0);
    float _844 = (_837.y * 2.0) + (-1.0);
    float _845 = dot(vec2(_843, _844), vec2(_843, _844));
    float _4258 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _859 = (_589 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_531.x * 2.0) + (-1.0)))) + (((_612.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _860 = (_590 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_531.y * 2.0) + (-1.0)))) + (((_612.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _872 = (((_805 - _859) + (cbMtdParam._m0[21u].x * _859)) * _662) + _859;
    float _873 = (((_806 - _860) + (cbMtdParam._m0[21u].x * _860)) * _662) + _860;
    float _874 = (_662 * (sqrt(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) - _596)) + _596;
    float _885 = (((_843 - _872) + (_872 * cbMtdParam._m0[22u].z)) * _712) + _872;
    float _886 = (((_844 - _873) + (_873 * cbMtdParam._m0[22u].z)) * _712) + _873;
    float _887 = ((sqrt(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) - _874) * _712) + _874;
    float _891 = cbMtdParam._m0[22u].x + _612.w;
    float _894 = fma(_887, _259 * NORMAL.x, fma(_886, _266 * TANGENT.x, (_252 * _244) * _885));
    float _897 = fma(_887, _259 * NORMAL.y, fma(_886, _266 * TANGENT.y, (_252 * _245) * _885));
    float _900 = fma(_887, _259 * NORMAL.z, fma(_886, _266 * TANGENT.z, (_252 * _246) * _885));
    float _904 = inversesqrt(dot(vec3(_894, _897, _900), vec3(_894, _897, _900)));
    float _905 = _904 * _894;
    float _906 = _904 * _897;
    float _907 = _904 * _900;
    float _4269 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _908 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _4280 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4291 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4302 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4313 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4324 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _913 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _927 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _977 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _967);
    float _978 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _967);
    float _979 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _967);
    float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
    float _984 = _977 * _983;
    float _985 = _978 * _983;
    float _986 = _979 * _983;
    vec4 _991 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _993 = _991.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1165 = sqrt(((_977 * _977) + (_978 * _978)) + (_979 * _979));
        float _1171 = (cbMatDynParam._m0[5u].x * _1165) + cbMatDynParam._m0[5u].y;
        float _4335 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1176 = (cbMatDynParam._m0[5u].z * _1165) + cbMatDynParam._m0[5u].w;
        float _4346 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) - _1172)) + _1172) < ((_993 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1004 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1005 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1023 = fma(_907, cbSceneParam._m0[5u].z, fma(_906, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _905));
    float _1026 = fma(_907, cbSceneParam._m0[6u].z, fma(_906, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _905));
    float _1029 = fma(_907, cbSceneParam._m0[7u].z, fma(_906, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _905));
    uint _1042 = _291 + 9u;
    uint _1043 = _1042 + uint(cbMatDynParam._m0[0u].w);
    float _1049 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * cbInstanceData._m0[_1043].x;
    float _1050 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * cbInstanceData._m0[_1043].y;
    float _1051 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * cbInstanceData._m0[_1043].z;
    float _4357 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _4368 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _4379 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _1055 = 1.0 - _913;
    float _1056 = _1052 * _1055;
    float _1057 = _1053 * _1055;
    float _1058 = _1054 * _1055;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _913;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _913;
    float _1065 = (_1054 + (-0.039999999105930328369140625)) * _913;
    float _1066 = _1063 + 0.039999999105930328369140625;
    float _1068 = _1064 + 0.039999999105930328369140625;
    float _1069 = _1065 + 0.039999999105930328369140625;
    vec4 _1078 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1004, cbSceneParam._m0[86u].y * _1005));
    float _1082 = ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * TEXCOORD_5.w) * _1078.x;
    float _1083 = dot(vec3(_905, _906, _907), vec3(_984, _985, _986));
    float _1086 = _1083 * 2.0;
    float _1090 = (_1086 * _905) - _984;
    float _1091 = (_1086 * _906) - _985;
    float _1092 = (_1086 * _907) - _986;
    float _1096 = abs(dot(vec3(_984, _985, _986), vec3(_905, _906, _907)));
    float _4390 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1098 = sqrt(_908);
    float _1111 = exp2((_1098 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1098 * 3.0));
    float _1117 = (1.0 - _1111) * ((_1098 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1118 = _1111 * _1098;
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1483;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1208 = fma(_1154, cbModelParam._m0[26u].z, fma(_1150, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1146));
        float _1212 = fma(_1154, cbModelParam._m0[27u].z, fma(_1150, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1146));
        float _1216 = fma(_1154, cbModelParam._m0[28u].z, fma(_1150, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1146));
        float _1241 = _1146 + _905;
        float _1242 = _1150 + _906;
        float _1243 = _1154 + _907;
        float _1253 = fma(_1243, cbModelParam._m0[26u].z, fma(_1242, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1241)) - _1208;
        float _1254 = fma(_1243, cbModelParam._m0[27u].z, fma(_1242, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1241)) - _1212;
        float _1255 = fma(_1243, cbModelParam._m0[28u].z, fma(_1242, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1241)) - _1216;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1208 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1212 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[34u].z) + ((((((_1216 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1311 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1277.x + (-0.5));
        float _1313 = _1311 * (_1277.y + (-0.5));
        float _1314 = _1311 * (_1277.z + (-0.5));
        float _1321 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1284.x + (-0.5));
        float _1323 = _1321 * (_1284.y + (-0.5));
        float _1324 = _1321 * (_1284.z + (-0.5));
        float _1331 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1291.x + (-0.5));
        float _1333 = _1331 * (_1291.y + (-0.5));
        float _1334 = _1331 * (_1291.z + (-0.5));
        float _1341 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1298.x + (-0.5));
        float _1343 = _1341 * (_1298.y + (-0.5));
        float _1344 = _1341 * (_1298.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1365 = (dot(vec3(_905, _906, _907), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1375 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4438 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1377 + 1.0))) + _1382) * _1345;
        float _1392 = _1313 * 0.5;
        float _1393 = _1323 * 0.5;
        float _1394 = _1333 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_905, _906, _907), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4471 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1419 + 1.0))) + _1424) * _1346;
        float _1434 = _1314 * 0.5;
        float _1435 = _1324 * 0.5;
        float _1436 = _1334 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_905, _906, _907), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4504 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1461 + 1.0))) + _1466) * _1347;
        _1483 = _1314;
        _1485 = _1313;
        _1486 = _1312;
        _1487 = _1324;
        _1488 = _1323;
        _1489 = _1322;
        _1490 = _1334;
        _1491 = _1333;
        _1492 = _1332;
        _1493 = _1347;
        _1494 = _1346;
        _1495 = _1345;
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1484;
        _1485 = _1484;
        _1486 = _1484;
        _1487 = _1484;
        _1488 = _1484;
        _1489 = _1484;
        _1490 = _1484;
        _1491 = _1484;
        _1492 = _1484;
        _1493 = _1484;
        _1494 = _1484;
        _1495 = _1484;
        _1496 = 0.0;
        _1497 = 0.0;
        _1498 = 0.0;
    }
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1526 = fma(_1154, cbModelParam._m0[30u].z, fma(_1150, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146));
        float _1530 = fma(_1154, cbModelParam._m0[31u].z, fma(_1150, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146));
        float _1534 = fma(_1154, cbModelParam._m0[32u].z, fma(_1150, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146));
        float _1557 = _1146 + _905;
        float _1558 = _1150 + _906;
        float _1559 = _1154 + _907;
        float _1569 = fma(_1559, cbModelParam._m0[30u].z, fma(_1558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1557)) - _1526;
        float _1570 = fma(_1559, cbModelParam._m0[31u].z, fma(_1558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1557)) - _1530;
        float _1571 = fma(_1559, cbModelParam._m0[32u].z, fma(_1558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1557)) - _1534;
        float _1575 = inversesqrt(dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571)));
        float _1588 = ((_1575 * _1569) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1526 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1575 * _1570) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1530 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1590 = ((_1575 * _1571) / cbModelParam._m0[35u].z) + ((((((_1534 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        float _1625 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1592.x + (-0.5));
        float _1627 = _1625 * (_1592.y + (-0.5));
        float _1628 = _1625 * (_1592.z + (-0.5));
        float _1635 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1599.x + (-0.5));
        float _1637 = _1635 * (_1599.y + (-0.5));
        float _1638 = _1635 * (_1599.z + (-0.5));
        float _1645 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1606.x + (-0.5));
        float _1647 = _1645 * (_1606.y + (-0.5));
        float _1648 = _1645 * (_1606.z + (-0.5));
        float _1655 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1613.x + (-0.5));
        float _1657 = _1655 * (_1613.y + (-0.5));
        float _1658 = _1655 * (_1613.z + (-0.5));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = _1626 * 0.5;
        float _1663 = _1636 * 0.5;
        float _1664 = _1646 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_905, _906, _907), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4545 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4556 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4567 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_1689 + 1.0))) + _1694) * _1659;
        float _1704 = _1627 * 0.5;
        float _1705 = _1637 * 0.5;
        float _1706 = _1647 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_905, _906, _907), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4578 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4589 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4600 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_1731 + 1.0))) + _1736) * _1660;
        float _1746 = _1628 * 0.5;
        float _1747 = _1638 * 0.5;
        float _1748 = _1648 * 0.5;
        float _1749 = dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748));
        float _1754 = (_1749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1749);
        float _1762 = (dot(vec3(_905, _906, _907), vec3(_1754 * _1746, _1754 * _1747, _1754 * _1748)) + 1.0) * 0.5;
        float _4611 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1771 = sqrt(((_1747 * _1747) + (_1746 * _1746)) + (_1748 * _1748)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4622 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1773 = _1772 * 2.0;
        float _1777 = (1.0 - _1772) / (_1772 + 1.0);
        float _4633 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _1787 = ((((1.0 - _1778) * (_1773 + 2.0)) * exp2(log2(isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_1773 + 1.0))) + _1778) * _1661;
        _1795 = _1628;
        _1796 = _1627;
        _1797 = _1626;
        _1798 = _1638;
        _1799 = _1637;
        _1800 = _1636;
        _1801 = _1648;
        _1802 = _1647;
        _1803 = _1646;
        _1804 = _1661;
        _1805 = _1660;
        _1806 = _1659;
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)));
    }
    else
    {
        _1795 = _1484;
        _1796 = _1484;
        _1797 = _1484;
        _1798 = _1484;
        _1799 = _1484;
        _1800 = _1484;
        _1801 = _1484;
        _1802 = _1484;
        _1803 = _1484;
        _1804 = _1484;
        _1805 = _1484;
        _1806 = _1484;
        _1807 = 0.0;
        _1808 = 0.0;
        _1809 = 0.0;
    }
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1496)) + _1496;
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1497)) + _1497;
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1498)) + _1498;
    float _1842 = fma(_1821, cbSceneParam._m0[89u].z, fma(_1820, cbSceneParam._m0[89u].y, _1819 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1821, cbSceneParam._m0[90u].z, fma(_1820, cbSceneParam._m0[90u].y, _1819 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1821, cbSceneParam._m0[91u].z, fma(_1820, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1819));
    float _1863 = _1090 * 0.5;
    float _1864 = _1091 * 0.5;
    float _1865 = _1092 * 0.5;
    float _1866 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1869 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1872 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1906;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1879 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1483, _1487, _1490, _1493));
        float _1883 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1485, _1488, _1491, _1494));
        float _1887 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1486, _1489, _1492, _1495));
        float _1894 = dot(vec4(cbModelParam._m0[39u]), vec4(_1863, _1864, _1865, 1.0));
        _1906 = dot(vec3(isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1894) ? 0.0 : (isnan(0.0) ? _1894 : max(0.0, _1894))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1906 = 1.0;
    }
    float _1917;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1908 = dot(vec4(cbModelParam._m0[40u]), vec4(_1863, _1864, _1865, 1.0));
        _1917 = dot(vec3(isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1908) ? 0.0 : (isnan(0.0) ? _1908 : max(0.0, _1908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1917 = 1.0;
    }
    float _1921 = (_1917 * cbModelParam._m0[1u].x) + (_1906 * (1.0 - cbModelParam._m0[1u].x));
    float _1931 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _908);
    float _1932 = isnan(_1931) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1931 : min(cbModelParam._m0[25u].z, _1931));
    float _2013;
    float _2015;
    float _2017;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1980 = fma(_1154, cbModelParam._m0[13u].z, fma(_1150, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1146)) + cbModelParam._m0[13u].w;
        float _1984 = fma(_1154, cbModelParam._m0[14u].z, fma(_1150, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1146)) + cbModelParam._m0[14u].w;
        float _1988 = fma(_1154, cbModelParam._m0[15u].z, fma(_1150, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1146)) + cbModelParam._m0[15u].w;
        float _1991 = fma(_1092, cbModelParam._m0[13u].z, fma(_1091, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1090));
        float _1994 = fma(_1092, cbModelParam._m0[14u].z, fma(_1091, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1090));
        float _1997 = fma(_1092, cbModelParam._m0[15u].z, fma(_1091, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1090));
        float _2025;
        if (_1991 > 0.0)
        {
            _2025 = abs((1.0 - _1980) / _1991);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1980 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2025 = frontier_phi_17_15_ladder;
        }
        float _2197;
        if (_1994 > 0.0)
        {
            _2197 = abs((1.0 - _1984) / _1994);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1984 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2197 = frontier_phi_26_22_ladder;
        }
        float _2492;
        if (_1997 > 0.0)
        {
            _2492 = abs((1.0 - _1988) / _1997);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1988 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2492 = frontier_phi_38_33_ladder;
        }
        float _2494 = isnan(_2197) ? _2025 : (isnan(_2025) ? _2197 : min(_2025, _2197));
        float _2495 = isnan(_2492) ? _2494 : (isnan(_2494) ? _2492 : min(_2494, _2492));
        float _2499 = (_2495 * _1991) + _1980;
        float _2500 = (_2495 * _1994) + _1984;
        float _2501 = (_2495 * _1997) + _1988;
        float _2502 = _2495 * 9.9999997473787516355514526367188e-05;
        float _2504 = (-1.0) - _2502;
        float _2506 = _2502 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2501 > _2506) || ((_2501 < _2504) || ((_2500 > _2506) || ((_2500 < _2504) || ((_2499 < _2504) || (_2499 > _2506))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2646 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2501, cbModelParam._m0[9u].z, fma(_2500, cbModelParam._m0[9u].y, _2499 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2501, cbModelParam._m0[10u].z, fma(_2500, cbModelParam._m0[10u].y, _2499 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2501, cbModelParam._m0[11u].z, fma(_2500, cbModelParam._m0[11u].y, _2499 * cbModelParam._m0[11u].x))), _1932);
            frontier_phi_16_38_ladder = _2646.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2646.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2646.x * cbModelParam._m0[1u].y;
        }
        _2013 = frontier_phi_16_38_ladder_2;
        _2015 = frontier_phi_16_38_ladder_1;
        _2017 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2001 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1090, _1091, _1092), _1932);
        _2013 = _2001.x * cbModelParam._m0[1u].y;
        _2015 = _2001.y * cbModelParam._m0[1u].y;
        _2017 = _2001.z * cbModelParam._m0[1u].y;
    }
    float _2021 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _908);
    float _2022 = isnan(_2021) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2021 : min(cbModelParam._m0[25u].w, _2021));
    float _2112;
    float _2114;
    float _2116;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2076 = fma(_1154, cbModelParam._m0[21u].z, fma(_1150, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1146)) + cbModelParam._m0[21u].w;
        float _2080 = fma(_1154, cbModelParam._m0[22u].z, fma(_1150, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1146)) + cbModelParam._m0[22u].w;
        float _2084 = fma(_1154, cbModelParam._m0[23u].z, fma(_1150, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1146)) + cbModelParam._m0[23u].w;
        float _2087 = fma(_1092, cbModelParam._m0[21u].z, fma(_1091, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1090));
        float _2090 = fma(_1092, cbModelParam._m0[22u].z, fma(_1091, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1090));
        float _2093 = fma(_1092, cbModelParam._m0[23u].z, fma(_1091, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1090));
        float _2202;
        if (_2087 > 0.0)
        {
            _2202 = abs((1.0 - _2076) / _2087);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2076 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2202 = frontier_phi_28_24_ladder;
        }
        float _2519;
        if (_2090 > 0.0)
        {
            _2519 = abs((1.0 - _2080) / _2090);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2080 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2519 = frontier_phi_40_35_ladder;
        }
        float _2857;
        if (_2093 > 0.0)
        {
            _2857 = abs((1.0 - _2084) / _2093);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2084 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2857 = frontier_phi_50_47_ladder;
        }
        float _2859 = isnan(_2519) ? _2202 : (isnan(_2202) ? _2519 : min(_2202, _2519));
        float _2860 = isnan(_2857) ? _2859 : (isnan(_2859) ? _2857 : min(_2859, _2857));
        float _2864 = (_2860 * _2087) + _2076;
        float _2865 = (_2860 * _2090) + _2080;
        float _2866 = (_2860 * _2093) + _2084;
        float _2867 = _2860 * 9.9999997473787516355514526367188e-05;
        float _2868 = (-1.0) - _2867;
        float _2870 = _2867 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2866 > _2870) || ((_2866 < _2868) || ((_2865 > _2870) || ((_2865 < _2868) || ((_2864 < _2868) || (_2864 > _2870))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2866, cbModelParam._m0[17u].z, fma(_2865, cbModelParam._m0[17u].y, _2864 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2866, cbModelParam._m0[18u].z, fma(_2865, cbModelParam._m0[18u].y, _2864 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2866, cbModelParam._m0[19u].z, fma(_2865, cbModelParam._m0[19u].y, _2864 * cbModelParam._m0[19u].x))), _2022);
            frontier_phi_25_50_ladder = _2988.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2988.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2988.x * cbModelParam._m0[1u].z;
        }
        _2112 = frontier_phi_25_50_ladder_2;
        _2114 = frontier_phi_25_50_ladder_1;
        _2116 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2096 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1090, _1091, _1092), _2022);
        _2112 = _2096.x * cbModelParam._m0[1u].z;
        _2114 = _2096.y * cbModelParam._m0[1u].z;
        _2116 = _2096.z * cbModelParam._m0[1u].z;
    }
    float _2129 = (((_1117 * _1066) + _1118) * _1082) * ((cbModelParam._m0[1u].w * (_2112 - _2013)) + _2013);
    float _2131 = (((_1117 * _1068) + _1118) * _1082) * ((cbModelParam._m0[1u].w * (_2114 - _2015)) + _2015);
    float _2133 = (((_1117 * _1069) + _1118) * _1082) * ((cbModelParam._m0[1u].w * (_2116 - _2017)) + _2017);
    float _2136 = fma(_2133, cbSceneParam._m0[89u].z, fma(_2131, cbSceneParam._m0[89u].y, _2129 * cbSceneParam._m0[89u].x));
    float _2139 = fma(_2133, cbSceneParam._m0[90u].z, fma(_2131, cbSceneParam._m0[90u].y, _2129 * cbSceneParam._m0[90u].x));
    float _2142 = fma(_2133, cbSceneParam._m0[91u].z, fma(_2131, cbSceneParam._m0[91u].y, _2129 * cbSceneParam._m0[91u].x));
    float _2176 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2180 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2184 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2188 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2189 = _2176 / _2188;
    float _2190 = _2180 / _2188;
    float _2191 = _2184 / _2188;
    float _2338;
    float _2339;
    float _2340;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2218 = ((uint(_2191 > cbSceneParam._m0[59u].y) + uint(_2191 > cbSceneParam._m0[59u].x)) + uint(_2191 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2219 = _2218 + 43u;
        uint _2227 = _2218 + 44u;
        uint _2235 = _2218 + 45u;
        uint _2243 = _2218 + 46u;
        float _2254 = fma(_2188, cbSceneParam._m0[_2219].w, fma(_2184, cbSceneParam._m0[_2219].z, fma(_2180, cbSceneParam._m0[_2219].y, _2176 * cbSceneParam._m0[_2219].x)));
        float _2258 = fma(_2188, cbSceneParam._m0[_2227].w, fma(_2184, cbSceneParam._m0[_2227].z, fma(_2180, cbSceneParam._m0[_2227].y, _2176 * cbSceneParam._m0[_2227].x)));
        float _2266 = fma(_2188, cbSceneParam._m0[_2243].w, fma(_2184, cbSceneParam._m0[_2243].z, fma(_2180, cbSceneParam._m0[_2243].y, _2176 * cbSceneParam._m0[_2243].x)));
        float _2271 = cbSceneParam._m0[33u].z * _2266;
        float _2273 = cbSceneParam._m0[33u].w * _2266;
        float _2276 = fma(_2188, cbSceneParam._m0[_2235].w, fma(_2184, cbSceneParam._m0[_2235].z, fma(_2180, cbSceneParam._m0[_2235].y, _2176 * cbSceneParam._m0[_2235].x))) / _2266;
        float _2324 = (cbSceneParam._m0[33u].x - sqrt(((_2190 * _2190) + (_2189 * _2189)) + (_2191 * _2191))) * cbSceneParam._m0[33u].y;
        float _4759 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2331 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2271 + _2254) / _2266, (_2273 + _2258) / _2266), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2273 + _2254) / _2266, (_2258 - _2271) / _2266), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2254 - _2271) / _2266, (_2258 - _2273) / _2266), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2254 - _2273) / _2266, (_2271 + _2258) / _2266), _2276), 0.0)).x), vec4(0.25)));
        _2338 = 1.0 - (_2331 * cbSceneParam._m0[34u].x);
        _2339 = 1.0 - (_2331 * cbSceneParam._m0[34u].y);
        _2340 = 1.0 - (_2331 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2338 = 1.0;
        _2339 = 1.0;
        _2340 = 1.0;
    }
    float _2404;
    float _2406;
    float _2408;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2392 = fma(_2188, cbSceneParam._m0[63u].w, fma(_2184, cbSceneParam._m0[63u].z, fma(_2180, cbSceneParam._m0[63u].y, _2176 * cbSceneParam._m0[63u].x)));
        float _2393 = fma(_2188, cbSceneParam._m0[60u].w, fma(_2184, cbSceneParam._m0[60u].z, fma(_2180, cbSceneParam._m0[60u].y, _2176 * cbSceneParam._m0[60u].x))) / _2392;
        float _2394 = fma(_2188, cbSceneParam._m0[61u].w, fma(_2184, cbSceneParam._m0[61u].z, fma(_2180, cbSceneParam._m0[61u].y, _2176 * cbSceneParam._m0[61u].x))) / _2392;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2393 >= cbSceneParam._m0[64u].x) && (_2394 >= cbSceneParam._m0[64u].y)) && (_2393 <= cbSceneParam._m0[64u].z)) && (_2394 <= cbSceneParam._m0[64u].w))
        {
            float _2532 = fma(_2188, cbSceneParam._m0[62u].w, fma(_2184, cbSceneParam._m0[62u].z, fma(_2180, cbSceneParam._m0[62u].y, _2176 * cbSceneParam._m0[62u].x))) / _2392;
            float _2536 = isnan(cbSceneParam._m0[41u].w) ? _2532 : (isnan(_2532) ? cbSceneParam._m0[41u].w : max(_2532, cbSceneParam._m0[41u].w));
            float _2579 = (cbSceneParam._m0[33u].x - sqrt(((_2190 * _2190) + (_2189 * _2189)) + (_2191 * _2191))) * cbSceneParam._m0[33u].y;
            float _4775 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
            float _2586 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2393, cbSceneParam._m0[33u].w + _2394), _2536), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2393, _2394 - cbSceneParam._m0[33u].z), _2536), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2393 - cbSceneParam._m0[33u].z, _2394 - cbSceneParam._m0[33u].w), _2536), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2393 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2394), _2536), 0.0)).x), vec4(0.25)));
            float _2590 = 1.0 - (_2586 * cbSceneParam._m0[34u].x);
            float _2591 = 1.0 - (_2586 * cbSceneParam._m0[34u].y);
            float _2592 = 1.0 - (_2586 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2592) ? _2340 : (isnan(_2340) ? _2592 : min(_2340, _2592));
            frontier_phi_37_36_ladder_1 = isnan(_2591) ? _2339 : (isnan(_2339) ? _2591 : min(_2339, _2591));
            frontier_phi_37_36_ladder_2 = isnan(_2590) ? _2338 : (isnan(_2338) ? _2590 : min(_2338, _2590));
        }
        else
        {
            frontier_phi_37_36_ladder = _2340;
            frontier_phi_37_36_ladder_1 = _2339;
            frontier_phi_37_36_ladder_2 = _2338;
        }
        _2404 = frontier_phi_37_36_ladder_2;
        _2406 = frontier_phi_37_36_ladder_1;
        _2408 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2404 = _2338;
        _2406 = _2339;
        _2408 = _2340;
    }
    uvec4 _2413 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2415 = _2413.x * 14u;
    uint _2416 = _2415 + 13u;
    float _2423 = _1082 + (-1.0);
    float _2428 = (cbLight._m0[_2416].x * _2423) + 1.0;
    float _2429 = (cbLight._m0[_2416].y * _2423) + 1.0;
    float _2430 = (cbLight._m0[_2416].z * _2423) + 1.0;
    float _2431 = (cbLight._m0[_2416].w * _2423) + 1.0;
    uint _2432 = _2415 + 5u;
    float _2438 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
    uint _2442 = _2415 + 4u;
    float _2451 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
    uint _2455 = _2415 | 1u;
    float _2466 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_905, _906, _907));
    float _2469 = dot(vec3(cbLight._m0[_2455].xyz), vec3(_905, _906, _907));
    float _4811 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _4822 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2474 = (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * 0.3183098733425140380859375;
    float _2476 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * 0.3183098733425140380859375;
    float _2483 = ((cbLight._m0[_2432].x * _2438) * _2476) + (((cbLight._m0[_2442].x * _2404) * _2451) * _2474);
    float _2484 = ((_2438 * cbLight._m0[_2432].y) * _2476) + (((cbLight._m0[_2442].y * _2406) * _2451) * _2474);
    float _2485 = ((_2438 * cbLight._m0[_2432].z) * _2476) + (((cbLight._m0[_2442].z * _2408) * _2451) * _2474);
    uvec4 _2489 = floatBitsToUint(cbLight._m0[_2415 + 12u]);
    bool _2491 = _2489.x == 0u;
    float _2593;
    float _2595;
    float _2597;
    if (_2491)
    {
        _2593 = _2483;
        _2595 = _2484;
        _2597 = _2485;
    }
    else
    {
        uint _2601 = _2415 + 6u;
        float _2617 = (dot(vec3(cbLight._m0[_2415 + 2u].xyz), vec3(_905, _906, _907)) * 0.5) + 0.5;
        float _2618 = _2617 * _2617;
        float _4833 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2619 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2620 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2593 = (((cbLight._m0[_2601].x * 0.3183098733425140380859375) * _2619) * _2620) + _2483;
        _2595 = (((cbLight._m0[_2601].y * 0.3183098733425140380859375) * _2619) * _2620) + _2484;
        _2597 = (((cbLight._m0[_2601].z * 0.3183098733425140380859375) * _2619) * _2620) + _2485;
    }
    bool _2600 = _2489.y == 0u;
    float _2655;
    float _2657;
    float _2659;
    if (_2600)
    {
        _2655 = _2593;
        _2657 = _2595;
        _2659 = _2597;
    }
    else
    {
        uint _2828 = _2415 + 7u;
        float _2844 = (dot(vec3(cbLight._m0[_2415 + 3u].xyz), vec3(_905, _906, _907)) * 0.5) + 0.5;
        float _2845 = _2844 * _2844;
        float _4849 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2846 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2847 = isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0));
        _2655 = (((cbLight._m0[_2828].x * 0.3183098733425140380859375) * _2846) * _2847) + _2593;
        _2657 = (((cbLight._m0[_2828].y * 0.3183098733425140380859375) * _2846) * _2847) + _2595;
        _2659 = (((cbLight._m0[_2828].z * 0.3183098733425140380859375) * _2846) * _2847) + _2597;
    }
    uint _2662 = _2415 + 8u;
    float _2675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _908) * 0.949999988079071044921875);
    float _2676 = _2675 * _2675;
    float _2677 = cbLight._m0[_2415].x + _984;
    float _2678 = cbLight._m0[_2415].y + _985;
    float _2679 = cbLight._m0[_2415].z + _986;
    float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
    float _2684 = _2683 * _2677;
    float _2685 = _2683 * _2678;
    float _2686 = _2683 * _2679;
    float _2687 = dot(vec3(_905, _906, _907), vec3(cbLight._m0[_2415].xyz));
    float _4865 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2690 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
    float _4876 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _2691 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
    float _2692 = dot(vec3(_905, _906, _907), vec3(_2684, _2685, _2686));
    float _4887 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2695 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
    float _2696 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2684, _2685, _2686));
    float _4898 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2700 = _2676 * _2676;
    float _2704 = ((_2695 * _2695) * (_2700 + (-1.0))) + 1.0;
    float _2712 = exp2(log2(1.0 - (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) * 5.0);
    float _2713 = 0.959999978542327880859375 - _1063;
    float _2715 = 0.959999978542327880859375 - _1064;
    float _2716 = 0.959999978542327880859375 - _1065;
    float _2723 = 1.0 - _2676;
    float _2734 = (0.5 / (((_2691 * ((_2690 * _2723) + _2676)) + 9.9999999392252902907785028219223e-09) + (((_2691 * _2723) + _2676) * _2690))) * _2690;
    float _4909 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2736 = (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2700 / ((_2704 * _2704) * 3.141590118408203125));
    uint _2750 = _2415 + 9u;
    float _2761 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2455].w)) * _908) * 0.949999988079071044921875);
    float _2762 = _2761 * _2761;
    float _2763 = cbLight._m0[_2455].x + _984;
    float _2764 = cbLight._m0[_2455].y + _985;
    float _2765 = cbLight._m0[_2455].z + _986;
    float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
    float _2770 = _2769 * _2763;
    float _2771 = _2769 * _2764;
    float _2772 = _2769 * _2765;
    float _2773 = dot(vec3(_905, _906, _907), vec3(cbLight._m0[_2455].xyz));
    float _4920 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
    float _2776 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
    float _2777 = dot(vec3(_905, _906, _907), vec3(_2770, _2771, _2772));
    float _4931 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
    float _2780 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
    float _2781 = dot(vec3(cbLight._m0[_2455].xyz), vec3(_2770, _2771, _2772));
    float _4942 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
    float _2785 = _2762 * _2762;
    float _2789 = ((_2780 * _2780) * (_2785 + (-1.0))) + 1.0;
    float _2796 = exp2(log2(1.0 - (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) * 5.0);
    float _2803 = 1.0 - _2762;
    float _2813 = (0.5 / (((_2691 * ((_2776 * _2803) + _2762)) + 9.9999999392252902907785028219223e-09) + (((_2691 * _2803) + _2762) * _2776))) * _2776;
    float _4953 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2815 = (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2785 / ((_2789 * _2789) * 3.141590118408203125));
    float _2825 = (((((_2796 * _2713) + _1066) * cbLight._m0[_2750].x) * _2815) * _2438) + ((((cbLight._m0[_2662].x * _2404) * ((_2712 * _2713) + _1066)) * _2736) * _2451);
    float _2826 = (((((_2796 * _2715) + _1068) * cbLight._m0[_2750].y) * _2815) * _2438) + ((((cbLight._m0[_2662].y * _2406) * ((_2712 * _2715) + _1068)) * _2736) * _2451);
    float _2827 = (((((_2796 * _2716) + _1069) * cbLight._m0[_2750].z) * _2815) * _2438) + ((((cbLight._m0[_2662].z * _2408) * ((_2712 * _2716) + _1069)) * _2736) * _2451);
    float _2883;
    float _2885;
    float _2887;
    if (_2491)
    {
        _2883 = _2825;
        _2885 = _2826;
        _2887 = _2827;
    }
    else
    {
        uint _2889 = _2415 + 2u;
        uint _2893 = _2415 + 10u;
        float _2907 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2889].w)) * _908) * 0.949999988079071044921875);
        float _2908 = _2907 * _2907;
        float _2909 = cbLight._m0[_2889].x + _984;
        float _2910 = cbLight._m0[_2889].y + _985;
        float _2911 = cbLight._m0[_2889].z + _986;
        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
        float _2916 = _2915 * _2909;
        float _2917 = _2915 * _2910;
        float _2918 = _2915 * _2911;
        float _2919 = dot(vec3(_905, _906, _907), vec3(cbLight._m0[_2889].xyz));
        float _4964 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2922 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
        float _2923 = dot(vec3(_905, _906, _907), vec3(_2916, _2917, _2918));
        float _4975 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2926 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
        float _2927 = dot(vec3(cbLight._m0[_2889].xyz), vec3(_2916, _2917, _2918));
        float _4986 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2931 = _2908 * _2908;
        float _2935 = ((_2926 * _2926) * (_2931 + (-1.0))) + 1.0;
        float _2942 = exp2(log2(1.0 - (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) * 5.0);
        float _2949 = 1.0 - _2908;
        float _2959 = (0.5 / (((_2691 * ((_2922 * _2949) + _2908)) + 9.9999999392252902907785028219223e-09) + (((_2691 * _2949) + _2908) * _2922))) * _2922;
        float _4997 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2961 = (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_2931 / ((_2935 * _2935) * 3.141590118408203125));
        float _2962 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2883 = (((((_2942 * _2713) + _1066) * cbLight._m0[_2893].x) * _2961) * _2962) + _2825;
        _2885 = (((((_2942 * _2715) + _1068) * cbLight._m0[_2893].y) * _2961) * _2962) + _2826;
        _2887 = (((((_2942 * _2716) + _1069) * cbLight._m0[_2893].z) * _2961) * _2962) + _2827;
    }
    float _2993;
    float _2995;
    float _2997;
    if (_2600)
    {
        _2993 = _2883;
        _2995 = _2885;
        _2997 = _2887;
    }
    else
    {
        uint _3004 = _2415 + 3u;
        uint _3008 = _2415 + 11u;
        float _3022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3004].w)) * _908) * 0.949999988079071044921875);
        float _3023 = _3022 * _3022;
        float _3024 = cbLight._m0[_3004].x + _984;
        float _3025 = cbLight._m0[_3004].y + _985;
        float _3026 = cbLight._m0[_3004].z + _986;
        float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
        float _3031 = _3030 * _3024;
        float _3032 = _3030 * _3025;
        float _3033 = _3030 * _3026;
        float _3034 = dot(vec3(_905, _906, _907), vec3(cbLight._m0[_3004].xyz));
        float _5013 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
        float _3037 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
        float _3038 = dot(vec3(_905, _906, _907), vec3(_3031, _3032, _3033));
        float _5024 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
        float _3041 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
        float _3042 = dot(vec3(cbLight._m0[_3004].xyz), vec3(_3031, _3032, _3033));
        float _5035 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        float _3046 = _3023 * _3023;
        float _3050 = ((_3041 * _3041) * (_3046 + (-1.0))) + 1.0;
        float _3057 = exp2(log2(1.0 - (isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0)))) * 5.0);
        float _3064 = 1.0 - _3023;
        float _3074 = (0.5 / (((_2691 * ((_3037 * _3064) + _3023)) + 9.9999999392252902907785028219223e-09) + (((_2691 * _3064) + _3023) * _3037))) * _3037;
        float _5046 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
        float _3076 = (isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3046 / ((_3050 * _3050) * 3.141590118408203125));
        float _3077 = isnan(1.0) ? _2431 : (isnan(_2431) ? 1.0 : min(_2431, 1.0));
        _2993 = (((((_3057 * _2713) + _1066) * cbLight._m0[_3008].x) * _3076) * _3077) + _2883;
        _2995 = (((((_3057 * _2715) + _1068) * cbLight._m0[_3008].y) * _3076) * _3077) + _2885;
        _2997 = (((((_3057 * _2716) + _1069) * cbLight._m0[_3008].z) * _3076) * _3077) + _2887;
    }
    float _3143;
    float _3145;
    float _3147;
    float _3149;
    float _3151;
    float _3153;
    if (_2413.y == 0u)
    {
        uvec4 _3098 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3099 = _3098.x;
        uint _3110 = uint((float(_3098.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1005) / _3099))) + floor(float(uint(cbSceneParam._m0[85u].x * _1004) / _3099)));
        float _3120 = (log2(_2191 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3121 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
        uint _3124 = uint(isnan(14.0) ? _3121 : (isnan(_3121) ? 14.0 : min(_3121, 14.0)));
        uvec4 _3129 = texelFetch(g_lightClusterGridBuffer, int(((_3124 << 2u) + (_3110 << 6u)) >> 2u));
        uint _3130 = _3129.x;
        uint _3131 = _3098.z;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        if (((((1u << ((_3131 >> 4u) & 15u)) + 4294967295u) & _3130) == 0u) || ((_3131 & 240u) == 0u))
        {
            _3210 = 0.0;
            _3212 = 0.0;
            _3214 = 0.0;
            _3216 = 0.0;
            _3218 = 0.0;
            _3220 = 0.0;
        }
        else
        {
            float _3211;
            float _3213;
            float _3215;
            float _3217;
            float _3219;
            float _3221;
            float _3363 = 0.0;
            float _3364 = 0.0;
            float _3365 = 0.0;
            float _3366 = 0.0;
            float _3367 = 0.0;
            float _3368 = 0.0;
            uint _3369 = 0u;
            uint _3378;
            bool _3379;
            for (;;)
            {
                _3378 = texelFetch(g_lightClassification, int((((_3124 << 5u) + (_3110 << 9u)) + (_3369 << 2u)) >> 2u)).x;
                _3379 = _3378 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3379)
                {
                    frontier_phi_71_pred = _3368;
                    frontier_phi_71_pred_1 = _3367;
                    frontier_phi_71_pred_2 = _3366;
                    frontier_phi_71_pred_3 = _3365;
                    frontier_phi_71_pred_4 = _3364;
                    frontier_phi_71_pred_5 = _3363;
                }
                else
                {
                    float _3508;
                    float _3509;
                    float _3510;
                    float _3511;
                    float _3512;
                    float _3513;
                    uint _3514;
                    _3508 = _3363;
                    _3509 = _3364;
                    _3510 = _3365;
                    _3511 = _3366;
                    _3512 = _3367;
                    _3513 = _3368;
                    _3514 = _3378;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    for (;;)
                    {
                        uint _3518 = uint(findLSB(_3514)) + (_3369 << 5u);
                        uint _3515 = (_3514 + 4294967295u) & _3514;
                        uint _3520 = _3518 * 48u;
                        vec4 _3534 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3520)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 3u)).x));
                        uint _3540 = (_3518 * 48u) + 4u;
                        vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3540)).x, texelFetch(g_PointLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3540 + 3u)).x));
                        uint _3559 = (_3518 * 48u) + 8u;
                        vec3 _3570 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3559)).x, texelFetch(g_PointLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3559 + 2u)).x));
                        float _3574 = _3534.x - _2189;
                        float _3575 = _3534.y - _2190;
                        float _3576 = _3534.z - _2191;
                        float _3577 = dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576));
                        float _3580 = inversesqrt(_3577);
                        float _3581 = _3580 * _3574;
                        float _3582 = _3580 * _3575;
                        float _3583 = _3580 * _3576;
                        float _3584 = dot(vec3(_1023, _1026, _1029), vec3(_3581, _3582, _3583));
                        float _3589 = 1.0 - (_3577 * _3534.w);
                        float _5072 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                        float _3590 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
                        float _3591 = sqrt(_3577) * _3553.w;
                        float _3594 = 1.39999997615814208984375 / (_3591 + 1.39999997615814208984375);
                        float _3595 = _3594 * _3594;
                        float _3598 = ((1.0 - _3595) * _3584) + _3595;
                        float _3601 = _3591 * _3591;
                        float _3605 = ((isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0))) * _3590) / ((_3601 * 0.699999988079071044921875) + 1.0);
                        float _3609 = (-0.0) - _2189;
                        float _3610 = (-0.0) - _2190;
                        float _3611 = (-0.0) - _2191;
                        float _3615 = inversesqrt(dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611)));
                        float _3616 = _3615 * _3609;
                        float _3617 = _3615 * _3610;
                        float _3618 = _3615 * _3611;
                        float _3625 = exp2(log2(1.0 / ((_3601 * 3.5) + 5.0)) * 0.25);
                        float _3626 = 1.0 - _1098;
                        float _3633 = sqrt(1.0 - ((1.0 - (_3626 * _3626)) * (1.0 - (_3625 * _3625))));
                        float _3634 = _3633 * _3633;
                        float _3635 = _3634 * _3634;
                        float _3636 = _3616 + _3581;
                        float _3637 = _3617 + _3582;
                        float _3638 = _3618 + _3583;
                        float _3642 = inversesqrt(dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638)));
                        float _3646 = dot(vec3(_1023, _1026, _1029), vec3(_3616, _3617, _3618));
                        float _5088 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                        float _3649 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
                        float _3650 = dot(vec3(_1023, _1026, _1029), vec3(_3642 * _3636, _3642 * _3637, _3642 * _3638));
                        float _5099 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                        float _3653 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                        float _3657 = ((_3653 * _3653) * (_3635 + (-1.0))) + 1.0;
                        float _3658 = _3594 * _3634;
                        float _3659 = _3658 * _3658;
                        float _3662 = ((1.0 - _3659) * _3584) + _3659;
                        float _5110 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                        float _3663 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                        float _3664 = 1.0 - _3634;
                        float _3674 = (0.5 / (((_3663 * ((_3649 * _3664) + _3634)) + 9.9999999392252902907785028219223e-09) + (((_3663 * _3664) + _3634) * _3649))) * _3663;
                        float _5121 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                        float _3685 = (((_3635 * 3.1415927410125732421875) * (isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0)))) / ((_3657 * _3657) * ((_3601 * 2.1991131305694580078125) + 3.141590118408203125))) * _3590;
                        _3438 = (_3605 * _3553.x) + _3511;
                        _3439 = (_3605 * _3553.y) + _3512;
                        _3440 = (_3605 * _3553.z) + _3513;
                        _3435 = (_3685 * _3570.x) + _3508;
                        _3436 = (_3685 * _3570.y) + _3509;
                        _3437 = (_3685 * _3570.z) + _3510;
                        if (_3515 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3508 = _3435;
                            _3509 = _3436;
                            _3510 = _3437;
                            _3511 = _3438;
                            _3512 = _3439;
                            _3513 = _3440;
                            _3514 = _3515;
                        }
                    }
                    frontier_phi_71_pred = _3440;
                    frontier_phi_71_pred_1 = _3439;
                    frontier_phi_71_pred_2 = _3438;
                    frontier_phi_71_pred_3 = _3437;
                    frontier_phi_71_pred_4 = _3436;
                    frontier_phi_71_pred_5 = _3435;
                }
                _3221 = frontier_phi_71_pred;
                _3219 = frontier_phi_71_pred_1;
                _3217 = frontier_phi_71_pred_2;
                _3215 = frontier_phi_71_pred_3;
                _3213 = frontier_phi_71_pred_4;
                _3211 = frontier_phi_71_pred_5;
                uint _3370 = _3369 + 1u;
                if (_3370 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3363 = _3211;
                    _3364 = _3213;
                    _3365 = _3215;
                    _3366 = _3217;
                    _3367 = _3219;
                    _3368 = _3221;
                    _3369 = _3370;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3210 = _3211;
            _3212 = _3213;
            _3214 = _3215;
            _3216 = _3217;
            _3218 = _3219;
            _3220 = _3221;
        }
        uvec4 _3224 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3225 = _3224.z;
        uint _3227 = (_3225 >> 8u) & 15u;
        float _3331;
        float _3333;
        float _3335;
        float _3337;
        float _3339;
        float _3341;
        if (((4294967295u << _3227) & _3130) == 0u)
        {
            _3331 = _3210;
            _3333 = _3212;
            _3335 = _3214;
            _3337 = _3216;
            _3339 = _3218;
            _3341 = _3220;
        }
        else
        {
            float _3356 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
            float _3357 = _3356 * _2189;
            float _3358 = _3356 * _2190;
            float _3359 = _3356 * _2191;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3227 < ((_3225 >> 12u) & 15u))
            {
                float _3332;
                float _3334;
                float _3336;
                float _3338;
                float _3340;
                float _3342;
                float _3491 = _3210;
                float _3492 = _3212;
                float _3493 = _3214;
                float _3494 = _3216;
                float _3495 = _3218;
                float _3496 = _3220;
                uint _3497 = _3227;
                uint _3506;
                bool _3507;
                for (;;)
                {
                    _3506 = texelFetch(g_lightClassification, int((((_3124 << 5u) + (_3110 << 9u)) + (_3497 << 2u)) >> 2u)).x;
                    _3507 = _3506 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3507)
                    {
                        frontier_phi_82_pred = _3496;
                        frontier_phi_82_pred_1 = _3495;
                        frontier_phi_82_pred_2 = _3494;
                        frontier_phi_82_pred_3 = _3493;
                        frontier_phi_82_pred_4 = _3492;
                        frontier_phi_82_pred_5 = _3491;
                    }
                    else
                    {
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3992;
                        float _3993;
                        float _3994;
                        float _3995;
                        float _3996;
                        float _3997;
                        float _3712 = _3491;
                        float _3713 = _3492;
                        float _3714 = _3493;
                        float _3715 = _3494;
                        float _3716 = _3495;
                        float _3717 = _3496;
                        uint _3718 = _3506;
                        uint _3719;
                        vec4 _3744;
                        float _3745;
                        vec4 _3760;
                        vec3 _3772;
                        vec4 _3787;
                        vec4 _3802;
                        float _3848;
                        bool _3849;
                        for (;;)
                        {
                            uint _3729 = ((_3497 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3718));
                            _3719 = (_3718 + 4294967295u) & _3718;
                            uint _3731 = _3729 * 40u;
                            _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            _3745 = _3744.w;
                            uint _3747 = (_3729 * 40u) + 4u;
                            _3760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 3u)).x));
                            uint _3762 = (_3729 * 40u) + 8u;
                            _3772 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x));
                            uint _3774 = (_3729 * 40u) + 16u;
                            _3787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 3u)).x));
                            uint _3789 = (_3729 * 40u) + 20u;
                            _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            uint _3804 = (_3729 * 40u) + 24u;
                            vec4 _3817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 3u)).x));
                            uint _3823 = (_3729 * 40u) + 28u;
                            vec4 _3836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 3u)).x));
                            _3848 = fma(_2191, _3836.z, fma(_2190, _3836.y, _3836.x * _2189)) + _3836.w;
                            _3849 = !((fma(_2191, _3817.z, fma(_2190, _3817.y, _3817.x * _2189)) + _3817.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3849)
                            {
                                float _3876 = _3744.x - _2189;
                                float _3877 = _3744.y - _2190;
                                float _3878 = _3744.z - _2191;
                                float _3879 = dot(vec3(_3876, _3877, _3878), vec3(_3876, _3877, _3878));
                                float _3882 = inversesqrt(_3879);
                                float _3883 = _3882 * _3876;
                                float _3884 = _3882 * _3877;
                                float _3885 = _3882 * _3878;
                                float _3889 = 1.0 - (_3879 / (_3745 * _3745));
                                float _5132 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3890 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                                float _3894 = sqrt(_3879) * _3760.w;
                                float _3896 = 1.39999997615814208984375 / (_3894 + 1.39999997615814208984375);
                                float _3897 = _3896 * _3896;
                                float _3900 = ((1.0 - _3897) * dot(vec3(_3883, _3884, _3885), vec3(_1023, _1026, _1029))) + _3897;
                                float _3903 = _3894 * _3894;
                                float _3907 = (fma(_2191, _3787.z, fma(_2190, _3787.y, _3787.x * _2189)) + _3787.w) / _3848;
                                float _3908 = (fma(_2191, _3802.z, fma(_2190, _3802.y, _3802.x * _2189)) + _3802.w) / _3848;
                                float _3912 = 1.0 - dot(vec2(_3907, _3908), vec2(_3907, _3908));
                                float _5148 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3913 = isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0));
                                float _3914 = _3913 * (((isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0))) * _3890) / ((_3903 * 0.699999988079071044921875) + 1.0));
                                float _3926 = exp2(log2(1.0 / ((_3903 * 3.5) + 5.0)) * 0.25);
                                float _3927 = 1.0 - _1098;
                                float _3934 = sqrt(1.0 - ((1.0 - (_3927 * _3927)) * (1.0 - (_3926 * _3926))));
                                float _3935 = _3934 * _3934;
                                float _3936 = _3935 * _3935;
                                float _3937 = _3883 - _3357;
                                float _3938 = _3884 - _3358;
                                float _3939 = _3885 - _3359;
                                float _3943 = inversesqrt(dot(vec3(_3937, _3938, _3939), vec3(_3937, _3938, _3939)));
                                float _3947 = dot(vec3(_1023, _1026, _1029), vec3((-0.0) - _3357, (-0.0) - _3358, (-0.0) - _3359));
                                float _5159 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3950 = isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0));
                                float _3951 = dot(vec3(_1023, _1026, _1029), vec3(_3943 * _3937, _3943 * _3938, _3943 * _3939));
                                float _5170 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3954 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
                                float _3958 = ((_3954 * _3954) * (_3936 + (-1.0))) + 1.0;
                                float _3959 = _3896 * _3935;
                                float _3960 = _3959 * _3959;
                                float _3966 = ((1.0 - _3960) * dot(vec3(_1023, _1026, _1029), vec3(_3883, _3884, _3885))) + _3960;
                                float _5181 = isnan(0.0) ? _3966 : (isnan(_3966) ? 0.0 : max(_3966, 0.0));
                                float _3967 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
                                float _3968 = 1.0 - _3935;
                                float _3978 = (0.5 / (((_3967 * ((_3950 * _3968) + _3935)) + 9.9999999392252902907785028219223e-09) + (((_3967 * _3968) + _3935) * _3950))) * _3967;
                                float _5192 = isnan(0.0) ? _3978 : (isnan(_3978) ? 0.0 : max(_3978, 0.0));
                                float _3988 = (_3913 * _3890) * (((_3936 * 3.1415927410125732421875) * (isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0)))) / ((_3958 * _3958) * ((_3903 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3914 * _3760.z;
                                frontier_phi_88_pred_1 = _3914 * _3760.y;
                                frontier_phi_88_pred_2 = _3914 * _3760.x;
                                frontier_phi_88_pred_3 = _3988 * _3772.z;
                                frontier_phi_88_pred_4 = _3988 * _3772.y;
                                frontier_phi_88_pred_5 = _3988 * _3772.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3997 = frontier_phi_88_pred;
                            _3996 = frontier_phi_88_pred_1;
                            _3995 = frontier_phi_88_pred_2;
                            _3994 = frontier_phi_88_pred_3;
                            _3993 = frontier_phi_88_pred_4;
                            _3992 = frontier_phi_88_pred_5;
                            _3702 = _3995 + _3715;
                            _3703 = _3996 + _3716;
                            _3704 = _3997 + _3717;
                            _3699 = _3992 + _3712;
                            _3700 = _3993 + _3713;
                            _3701 = _3994 + _3714;
                            if (_3719 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3712 = _3699;
                                _3713 = _3700;
                                _3714 = _3701;
                                _3715 = _3702;
                                _3716 = _3703;
                                _3717 = _3704;
                                _3718 = _3719;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3704;
                        frontier_phi_82_pred_1 = _3703;
                        frontier_phi_82_pred_2 = _3702;
                        frontier_phi_82_pred_3 = _3701;
                        frontier_phi_82_pred_4 = _3700;
                        frontier_phi_82_pred_5 = _3699;
                    }
                    _3342 = frontier_phi_82_pred;
                    _3340 = frontier_phi_82_pred_1;
                    _3338 = frontier_phi_82_pred_2;
                    _3336 = frontier_phi_82_pred_3;
                    _3334 = frontier_phi_82_pred_4;
                    _3332 = frontier_phi_82_pred_5;
                    uint _3498 = _3497 + 1u;
                    if (_3498 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3491 = _3332;
                        _3492 = _3334;
                        _3493 = _3336;
                        _3494 = _3338;
                        _3495 = _3340;
                        _3496 = _3342;
                        _3497 = _3498;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3338;
                frontier_phi_63_64_ladder_1 = _3342;
                frontier_phi_63_64_ladder_2 = _3340;
                frontier_phi_63_64_ladder_3 = _3336;
                frontier_phi_63_64_ladder_4 = _3334;
                frontier_phi_63_64_ladder_5 = _3332;
            }
            else
            {
                frontier_phi_63_64_ladder = _3216;
                frontier_phi_63_64_ladder_1 = _3220;
                frontier_phi_63_64_ladder_2 = _3218;
                frontier_phi_63_64_ladder_3 = _3214;
                frontier_phi_63_64_ladder_4 = _3212;
                frontier_phi_63_64_ladder_5 = _3210;
            }
            _3331 = frontier_phi_63_64_ladder_5;
            _3333 = frontier_phi_63_64_ladder_4;
            _3335 = frontier_phi_63_64_ladder_3;
            _3337 = frontier_phi_63_64_ladder;
            _3339 = frontier_phi_63_64_ladder_2;
            _3341 = frontier_phi_63_64_ladder_1;
        }
        float _3346 = isnan(1.0) ? _1082 : (isnan(_1082) ? 1.0 : min(_1082, 1.0));
        _3143 = (_3346 * _3337) + _2655;
        _3145 = (_3346 * _3339) + _2657;
        _3147 = (_3346 * _3341) + _2659;
        _3149 = ((_3331 * _1066) * _3346) + _2993;
        _3151 = ((_3333 * _1068) * _3346) + _2995;
        _3153 = ((_3335 * _1069) * _3346) + _2997;
    }
    else
    {
        _3143 = _2655;
        _3145 = _2657;
        _3147 = _2659;
        _3149 = _2993;
        _3151 = _2995;
        _3153 = _2997;
    }
    float _5208 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _5219 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _5230 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _3170 = ((isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0))) * (_3143 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1082))) + ((_3149 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1921)) * cbPerFrame._m0[3u].x);
    float _3171 = ((isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0))) * (_3145 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1082))) + ((_3151 + ((isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))) * _1921)) * cbPerFrame._m0[3u].x);
    float _3172 = ((isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0))) * (_3147 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1082))) + ((_3153 + ((isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0))) * _1921)) * cbPerFrame._m0[3u].x);
    uint _3173 = _291 + 6u;
    float _3181 = _1004 / cbSceneParam._m0[86u].x;
    float _3182 = _1005 / cbSceneParam._m0[86u].y;
    vec4 _3196 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3181, _3182, (log2((isnan(cbSceneParam._m0[77u].w) ? _927 : (isnan(_927) ? cbSceneParam._m0[77u].w : min(_927, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3198 = _3196.x;
    float _3199 = _3196.y;
    float _3200 = _3196.z;
    float _3201 = _3196.w;
    float _3273;
    float _3275;
    float _3277;
    float _3279;
    if (_927 > cbSceneParam._m0[78u].w)
    {
        float _3235 = isnan(_927) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _927 : min(cbSceneParam._m0[80u].w, _927));
        float _3236 = _3235 / _927;
        float _3247 = _3236 * _977;
        float _3248 = _978 * _3236;
        float _3249 = (-0.0) - _3248;
        float _3251 = _3236 * _979;
        float _3253 = (cbSceneParam._m0[77u].w * _3249) / _3235;
        float _3254 = _3253 + cbSceneParam._m0[79u].w;
        float _3255 = cbSceneParam._m0[79u].w - _3248;
        float _3261 = sqrt(((_3247 * _3247) + (_3248 * _3248)) + (_3251 * _3251));
        float _3264 = (1.0 - (cbSceneParam._m0[77u].w / _3235)) * _3261;
        float _3269 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3271 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3448;
        if (abs((_3249 - _3253) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3448 = ((((_3254 > 0.0) ? exp2(_3269 * _3254) : (2.0 - exp2(_3271 * _3254))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3264;
        }
        else
        {
            float _3392 = 1.0 / cbSceneParam._m0[80u].x;
            float _3393 = isnan(_3255) ? _3254 : (isnan(_3254) ? _3255 : max(_3254, _3255));
            float _3394 = isnan(_3255) ? _3254 : (isnan(_3254) ? _3255 : min(_3254, _3255));
            float _3403 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : min(_3393, 0.0));
            float _3404 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : min(_3394, 0.0));
            _3448 = ((abs(_3261 / _3249) * cbSceneParam._m0[80u].y) * ((((_3403 - _3404) * 2.0) - ((exp2(_3269 * (isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0)))) - exp2(_3269 * (isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0))))) * _3392)) - ((exp2(_3271 * _3403) - exp2(_3271 * _3404)) * _3392))) + (_3264 * cbSceneParam._m0[80u].z);
        }
        vec4 _3450 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3181, _3182, 1.0), 0.0);
        float _3459 = exp2((_3448 * (-1.44269502162933349609375)) * (1.0 - _3450.w));
        float _3460 = log2(_3459);
        float _3476 = log2(_3201);
        _3273 = (exp2(_3476 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3460 * cbSceneParam._m0[78u].x)) * _3450.x) / cbSceneParam._m0[78u].x)) + _3198;
        _3275 = (exp2(_3476 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3460 * cbSceneParam._m0[78u].y)) * _3450.y) / cbSceneParam._m0[78u].y)) + _3199;
        _3277 = (exp2(_3476 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3460 * cbSceneParam._m0[78u].z)) * _3450.z) / cbSceneParam._m0[78u].z)) + _3200;
        _3279 = _3459 * _3201;
    }
    else
    {
        _3273 = _3198;
        _3275 = _3199;
        _3277 = _3200;
        _3279 = _3201;
    }
    bool _3486;
    vec4 _3289;
    vec4 _3311;
    float _3313;
    float _3317;
    float _3318;
    float _3319;
    float _3320;
    bool _3330;
    for (;;)
    {
        _3289 = cbMatDynParam._m0[0u];
        float _3291 = roundEven(_3289.y);
        bool _3292 = _3291 == 3.0;
        float _3293 = log2(_3279);
        float _3300 = exp2(_3293 * cbSceneParam._m0[78u].x) * _3170;
        float _3301 = exp2(_3293 * cbSceneParam._m0[78u].y) * _3171;
        float _3302 = exp2(_3293 * cbSceneParam._m0[78u].z) * _3172;
        float _3309 = _993 + (-0.5);
        _3311 = cbMtdParam._m0[1u];
        _3313 = _3311.y * _3309;
        float _3316 = (_3291 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3317 = _3316 * (_3292 ? _3300 : (_3300 + (cbSceneParam._m0[72u].w * _3273)));
        _3318 = _3316 * (_3292 ? _3301 : (_3301 + (cbSceneParam._m0[72u].w * _3275)));
        _3319 = _3316 * (_3292 ? _3302 : (_3302 + (cbSceneParam._m0[72u].w * _3277)));
        _3320 = _3309 * 0.999000012874603271484375;
        _3330 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3330)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3320) < 0.5)
            {
                _3486 = true;
                break;
            }
        }
        uint _3427 = _1042 + uint(_3289.w);
        if ((cbInstanceData._m0[_3427].w < 1.0) && ((cbInstanceData._m0[_3427].w + _3320) < 0.5))
        {
            _3486 = true;
            break;
        }
        if ((_3313 + 1.0) < _3311.x)
        {
            _3486 = true;
            break;
        }
        _3486 = false;
        break;
    }
    float _3690;
    if (_3486)
    {
        discard_state = true;
        _3690 = 0.0;
    }
    else
    {
        _3690 = cbInstanceData._m0[_3173].w;
    }
    SV_Target.x = _3317;
    SV_Target.y = _3318;
    SV_Target.z = _3319;
    SV_Target.w = _3690;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3173].w;
    discard_exit();
}


