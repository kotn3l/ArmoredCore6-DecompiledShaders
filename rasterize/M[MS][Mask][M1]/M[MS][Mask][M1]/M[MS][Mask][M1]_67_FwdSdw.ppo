#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1467;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _373.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[23u].w) + _423) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4076 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _448 = (_441 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _449 = (_441 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _450 = (_441 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _373.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[23u].w) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4087 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _527 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _304.x) * ((_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448);
    float _530 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _304.y) * ((_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449);
    float _533 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _304.z) * ((_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450);
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _570 = _568.x;
    float _571 = _568.y;
    float _572 = _568.z;
    float _579 = ((_551.x - _570) * _441) + _570;
    float _580 = ((_551.y - _571) * _441) + _571;
    float _581 = ((_551.z - _572) * _441) + _572;
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _606 = ((_593.z - _581) * _514) + _581;
    float _609 = ((((_593.x - _579) * _514) + _579) * 2.0) + (-1.0);
    float _611 = ((((_593.y - _580) * _514) + _580) * 2.0) + (-1.0);
    float _612 = dot(vec2(_609, _611), vec2(_609, _611));
    float _4098 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _617 = sqrt(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _658 = _656.x;
    float _659 = 1.0 - _658;
    float _668 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _671 = ((isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : min(_668, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _680 = (_671 - ((((((_658 - _659) * cbMtdParam._m0[24u].z) + _659) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _671))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4119 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _688 = (_681 * (cbMtdParam._m0[17u].x - _527)) + _527;
    float _689 = (_681 * (cbMtdParam._m0[17u].y - _530)) + _530;
    float _690 = (_681 * (cbMtdParam._m0[17u].z - _533)) + _533;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _704 = _702.x;
    float _705 = 1.0 - _704;
    float _730 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_704 - _705) * cbMtdParam._m0[24u].w) + _705) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4130 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _731 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _739 = ((((cbMtdParam._m0[10u].x - _688) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _731) + _688;
    float _740 = ((((cbMtdParam._m0[10u].y - _689) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _731) + _689;
    float _741 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _690)) * _731) + _690;
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _769 = _767.x;
    float _786 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _769) * _441) + _769;
    float _803 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _786) * _514) + _786;
    float _807 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _803) * cbMtdParam._m0[19u].z) + _803;
    float _809 = _807 - (_807 * _681);
    float _811 = _809 - (_809 * _731);
    float _815 = (cbMtdParam._m0[19u].w * (_631.z - _606)) + _606;
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _836 = (_829.x * 2.0) + (-1.0);
    float _837 = (_829.y * 2.0) + (-1.0);
    float _838 = dot(vec2(_836, _837), vec2(_836, _837));
    float _4141 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _846 = (_681 * (_829.z - _815)) + _815;
    float _849 = ((cbMtdParam._m0[23u].x - _846) * _731) + _846;
    vec4 _868 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _874 = (_868.x * 2.0) + (-1.0);
    float _875 = (_868.y * 2.0) + (-1.0);
    float _876 = dot(vec2(_874, _875), vec2(_874, _875));
    float _4152 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _884 = (((_631.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _609;
    float _885 = (((_631.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _611;
    float _897 = (((_836 - _884) + (cbMtdParam._m0[21u].x * _884)) * _681) + _884;
    float _898 = (((_837 - _885) + (cbMtdParam._m0[21u].x * _885)) * _681) + _885;
    float _899 = (_681 * (sqrt(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) - _617)) + _617;
    float _910 = (((_874 - _897) + (_897 * cbMtdParam._m0[22u].z)) * _731) + _897;
    float _911 = (((_875 - _898) + (_898 * cbMtdParam._m0[22u].z)) * _731) + _898;
    float _912 = ((sqrt(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) - _899) * _731) + _899;
    float _914 = cbMtdParam._m0[22u].x + _631.w;
    float _917 = fma(_912, _252 * NORMAL.x, fma(_911, _259 * TANGENT.x, (_245 * _237) * _910));
    float _920 = fma(_912, _252 * NORMAL.y, fma(_911, _259 * TANGENT.y, (_245 * _238) * _910));
    float _923 = fma(_912, _252 * NORMAL.z, fma(_911, _259 * TANGENT.z, (_245 * _239) * _910));
    float _927 = inversesqrt(dot(vec3(_917, _920, _923), vec3(_917, _920, _923)));
    float _928 = _927 * _917;
    float _929 = _927 * _920;
    float _930 = _927 * _923;
    float _4163 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _931 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4185 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4196 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4207 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4218 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _936 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _950 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1000 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _990);
    float _1001 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _990);
    float _1002 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _990);
    float _1006 = inversesqrt(dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002)));
    float _1007 = _1000 * _1006;
    float _1008 = _1001 * _1006;
    float _1009 = _1002 * _1006;
    float _1015 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1016 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1034 = fma(_930, cbSceneParam._m0[5u].z, fma(_929, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _928));
    float _1037 = fma(_930, cbSceneParam._m0[6u].z, fma(_929, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _928));
    float _1040 = fma(_930, cbSceneParam._m0[7u].z, fma(_929, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _928));
    uint _1054 = (_265 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1060 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * cbInstanceData._m0[_1054].x;
    float _1061 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * cbInstanceData._m0[_1054].y;
    float _1062 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * cbInstanceData._m0[_1054].z;
    float _4229 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1063 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1064 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _4251 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1065 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _1066 = 1.0 - _936;
    float _1067 = _1063 * _1066;
    float _1068 = _1064 * _1066;
    float _1069 = _1065 * _1066;
    float _1074 = (_1063 + (-0.039999999105930328369140625)) * _936;
    float _1075 = (_1064 + (-0.039999999105930328369140625)) * _936;
    float _1076 = (_1065 + (-0.039999999105930328369140625)) * _936;
    float _1077 = _1074 + 0.039999999105930328369140625;
    float _1079 = _1075 + 0.039999999105930328369140625;
    float _1080 = _1076 + 0.039999999105930328369140625;
    vec4 _1089 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1015, cbSceneParam._m0[86u].y * _1016));
    float _1093 = ((isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * TEXCOORD_5.w) * _1089.x;
    float _1094 = dot(vec3(_928, _929, _930), vec3(_1007, _1008, _1009));
    float _1097 = _1094 * 2.0;
    float _1101 = (_1097 * _928) - _1007;
    float _1102 = (_1097 * _929) - _1008;
    float _1103 = (_1097 * _930) - _1009;
    float _1107 = abs(dot(vec3(_1007, _1008, _1009), vec3(_928, _929, _930)));
    float _4262 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1109 = sqrt(_931);
    float _1122 = exp2((_1109 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1109 * 3.0));
    float _1128 = (1.0 - _1122) * ((_1109 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1129 = _1122 * _1109;
    float _1157 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1466;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1191 = fma(_1165, cbModelParam._m0[26u].z, fma(_1161, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1157));
        float _1195 = fma(_1165, cbModelParam._m0[27u].z, fma(_1161, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1157));
        float _1199 = fma(_1165, cbModelParam._m0[28u].z, fma(_1161, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1157));
        float _1224 = _1157 + _928;
        float _1225 = _1161 + _929;
        float _1226 = _1165 + _930;
        float _1236 = fma(_1226, cbModelParam._m0[26u].z, fma(_1225, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1224)) - _1191;
        float _1237 = fma(_1226, cbModelParam._m0[27u].z, fma(_1225, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1224)) - _1195;
        float _1238 = fma(_1226, cbModelParam._m0[28u].z, fma(_1225, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1224)) - _1199;
        float _1242 = inversesqrt(dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238)));
        float _1255 = ((_1242 * _1236) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1191 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1242 * _1237) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1195 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1242 * _1238) / cbModelParam._m0[34u].z) + ((((((_1199 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        float _1294 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1260.x + (-0.5));
        float _1296 = _1294 * (_1260.y + (-0.5));
        float _1297 = _1294 * (_1260.z + (-0.5));
        float _1304 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1267.x + (-0.5));
        float _1306 = _1304 * (_1267.y + (-0.5));
        float _1307 = _1304 * (_1267.z + (-0.5));
        float _1314 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1274.x + (-0.5));
        float _1316 = _1314 * (_1274.y + (-0.5));
        float _1317 = _1314 * (_1274.z + (-0.5));
        float _1324 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1281.x + (-0.5));
        float _1326 = _1324 * (_1281.y + (-0.5));
        float _1327 = _1324 * (_1281.z + (-0.5));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = _1295 * 0.5;
        float _1332 = _1305 * 0.5;
        float _1333 = _1315 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1348 = (dot(vec3(_928, _929, _930), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1358 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4310 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1360 + 1.0))) + _1365) * _1328;
        float _1375 = _1296 * 0.5;
        float _1376 = _1306 * 0.5;
        float _1377 = _1316 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_928, _929, _930), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4343 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1402 + 1.0))) + _1407) * _1329;
        float _1417 = _1297 * 0.5;
        float _1418 = _1307 * 0.5;
        float _1419 = _1317 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_928, _929, _930), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4354 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _4365 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4376 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_1444 + 1.0))) + _1449) * _1330;
        _1466 = _1297;
        _1468 = _1296;
        _1469 = _1295;
        _1470 = _1307;
        _1471 = _1306;
        _1472 = _1305;
        _1473 = _1317;
        _1474 = _1316;
        _1475 = _1315;
        _1476 = _1330;
        _1477 = _1329;
        _1478 = _1328;
        _1479 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1480 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1481 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
    }
    else
    {
        _1466 = _1467;
        _1468 = _1467;
        _1469 = _1467;
        _1470 = _1467;
        _1471 = _1467;
        _1472 = _1467;
        _1473 = _1467;
        _1474 = _1467;
        _1475 = _1467;
        _1476 = _1467;
        _1477 = _1467;
        _1478 = _1467;
        _1479 = 0.0;
        _1480 = 0.0;
        _1481 = 0.0;
    }
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1505 = fma(_1165, cbModelParam._m0[30u].z, fma(_1161, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1157));
        float _1509 = fma(_1165, cbModelParam._m0[31u].z, fma(_1161, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1157));
        float _1513 = fma(_1165, cbModelParam._m0[32u].z, fma(_1161, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1157));
        float _1536 = _1157 + _928;
        float _1537 = _1161 + _929;
        float _1538 = _1165 + _930;
        float _1548 = fma(_1538, cbModelParam._m0[30u].z, fma(_1537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1536)) - _1505;
        float _1549 = fma(_1538, cbModelParam._m0[31u].z, fma(_1537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1536)) - _1509;
        float _1550 = fma(_1538, cbModelParam._m0[32u].z, fma(_1537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1536)) - _1513;
        float _1554 = inversesqrt(dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550)));
        float _1567 = ((_1554 * _1548) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1505 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1568 = ((_1554 * _1549) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1509 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1569 = ((_1554 * _1550) / cbModelParam._m0[35u].z) + ((((((_1513 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        vec4 _1585 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1567, _1568, _1569), 0.0);
        float _1604 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1571.x + (-0.5));
        float _1606 = _1604 * (_1571.y + (-0.5));
        float _1607 = _1604 * (_1571.z + (-0.5));
        float _1614 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1578.x + (-0.5));
        float _1616 = _1614 * (_1578.y + (-0.5));
        float _1617 = _1614 * (_1578.z + (-0.5));
        float _1624 = exp2((_1585.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1585.x + (-0.5));
        float _1626 = _1624 * (_1585.y + (-0.5));
        float _1627 = _1624 * (_1585.z + (-0.5));
        float _1634 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1592.x + (-0.5));
        float _1636 = _1634 * (_1592.y + (-0.5));
        float _1637 = _1634 * (_1592.z + (-0.5));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1640 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1641 = _1605 * 0.5;
        float _1642 = _1615 * 0.5;
        float _1643 = _1625 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_928, _929, _930), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4439 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1668 + 1.0))) + _1673) * _1638;
        float _1683 = _1606 * 0.5;
        float _1684 = _1616 * 0.5;
        float _1685 = _1626 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_928, _929, _930), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4450 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1639 + 9.9999997473787516355514526367188e-06);
        float _4461 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4472 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_1710 + 1.0))) + _1715) * _1639;
        float _1725 = _1607 * 0.5;
        float _1726 = _1617 * 0.5;
        float _1727 = _1627 * 0.5;
        float _1728 = dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727));
        float _1733 = (_1728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1728);
        float _1741 = (dot(vec3(_928, _929, _930), vec3(_1733 * _1725, _1733 * _1726, _1733 * _1727)) + 1.0) * 0.5;
        float _4483 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1750 = sqrt(((_1726 * _1726) + (_1725 * _1725)) + (_1727 * _1727)) / (_1640 + 9.9999997473787516355514526367188e-06);
        float _4494 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1752 = _1751 * 2.0;
        float _1756 = (1.0 - _1751) / (_1751 + 1.0);
        float _4505 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1766 = ((((1.0 - _1757) * (_1752 + 2.0)) * exp2(log2(isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_1752 + 1.0))) + _1757) * _1640;
        _1774 = _1607;
        _1775 = _1606;
        _1776 = _1605;
        _1777 = _1617;
        _1778 = _1616;
        _1779 = _1615;
        _1780 = _1627;
        _1781 = _1626;
        _1782 = _1625;
        _1783 = _1640;
        _1784 = _1639;
        _1785 = _1638;
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
        _1787 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
        _1788 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)));
    }
    else
    {
        _1774 = _1467;
        _1775 = _1467;
        _1776 = _1467;
        _1777 = _1467;
        _1778 = _1467;
        _1779 = _1467;
        _1780 = _1467;
        _1781 = _1467;
        _1782 = _1467;
        _1783 = _1467;
        _1784 = _1467;
        _1785 = _1467;
        _1786 = 0.0;
        _1787 = 0.0;
        _1788 = 0.0;
    }
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1479)) + _1479;
    float _1799 = (cbModelParam._m0[1u].x * (_1787 - _1480)) + _1480;
    float _1800 = (cbModelParam._m0[1u].x * (_1788 - _1481)) + _1481;
    float _1821 = fma(_1800, cbSceneParam._m0[89u].z, fma(_1799, cbSceneParam._m0[89u].y, _1798 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1800, cbSceneParam._m0[90u].z, fma(_1799, cbSceneParam._m0[90u].y, _1798 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1800, cbSceneParam._m0[91u].z, fma(_1799, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1798));
    float _1842 = _1101 * 0.5;
    float _1843 = _1102 * 0.5;
    float _1844 = _1103 * 0.5;
    float _1845 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1776, _1779, _1782, _1785));
    float _1848 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1775, _1778, _1781, _1784));
    float _1851 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1885;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1858 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1466, _1470, _1473, _1476));
        float _1862 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1468, _1471, _1474, _1477));
        float _1866 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1469, _1472, _1475, _1478));
        float _1873 = dot(vec4(cbModelParam._m0[39u]), vec4(_1842, _1843, _1844, 1.0));
        _1885 = dot(vec3(isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1873) ? 0.0 : (isnan(0.0) ? _1873 : max(0.0, _1873))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1885 = 1.0;
    }
    float _1896;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1887 = dot(vec4(cbModelParam._m0[40u]), vec4(_1842, _1843, _1844, 1.0));
        _1896 = dot(vec3(isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1887) ? 0.0 : (isnan(0.0) ? _1887 : max(0.0, _1887))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1896 = 1.0;
    }
    float _1900 = (_1896 * cbModelParam._m0[1u].x) + (_1885 * (1.0 - cbModelParam._m0[1u].x));
    float _1910 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _931);
    float _1911 = isnan(_1910) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1910 : min(cbModelParam._m0[25u].z, _1910));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1959 = fma(_1165, cbModelParam._m0[13u].z, fma(_1161, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1157)) + cbModelParam._m0[13u].w;
        float _1963 = fma(_1165, cbModelParam._m0[14u].z, fma(_1161, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1157)) + cbModelParam._m0[14u].w;
        float _1967 = fma(_1165, cbModelParam._m0[15u].z, fma(_1161, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1157)) + cbModelParam._m0[15u].w;
        float _1970 = fma(_1103, cbModelParam._m0[13u].z, fma(_1102, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101));
        float _1973 = fma(_1103, cbModelParam._m0[14u].z, fma(_1102, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101));
        float _1976 = fma(_1103, cbModelParam._m0[15u].z, fma(_1102, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101));
        float _2004;
        if (_1970 > 0.0)
        {
            _2004 = abs((1.0 - _1959) / _1970);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1959 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2004 = frontier_phi_14_12_ladder;
        }
        float _2176;
        if (_1973 > 0.0)
        {
            _2176 = abs((1.0 - _1963) / _1973);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1963 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2176 = frontier_phi_23_19_ladder;
        }
        float _2471;
        if (_1976 > 0.0)
        {
            _2471 = abs((1.0 - _1967) / _1976);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1967 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2471 = frontier_phi_35_30_ladder;
        }
        float _2473 = isnan(_2176) ? _2004 : (isnan(_2004) ? _2176 : min(_2004, _2176));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1970) + _1959;
        float _2479 = (_2474 * _1973) + _1963;
        float _2480 = (_2474 * _1976) + _1967;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2481;
        float _2485 = _2481 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 > _2485) || ((_2479 < _2483) || ((_2478 < _2483) || (_2478 > _2485))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2625 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2480, cbModelParam._m0[9u].z, fma(_2479, cbModelParam._m0[9u].y, _2478 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2480, cbModelParam._m0[10u].z, fma(_2479, cbModelParam._m0[10u].y, _2478 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2480, cbModelParam._m0[11u].z, fma(_2479, cbModelParam._m0[11u].y, _2478 * cbModelParam._m0[11u].x))), _1911);
            frontier_phi_13_35_ladder = _2625.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2625.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2625.x * cbModelParam._m0[1u].y;
        }
        _1992 = frontier_phi_13_35_ladder_2;
        _1994 = frontier_phi_13_35_ladder_1;
        _1996 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1101, _1102, _1103), _1911);
        _1992 = _1980.x * cbModelParam._m0[1u].y;
        _1994 = _1980.y * cbModelParam._m0[1u].y;
        _1996 = _1980.z * cbModelParam._m0[1u].y;
    }
    float _2000 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _931);
    float _2001 = isnan(_2000) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2000 : min(cbModelParam._m0[25u].w, _2000));
    float _2091;
    float _2093;
    float _2095;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2055 = fma(_1165, cbModelParam._m0[21u].z, fma(_1161, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1157)) + cbModelParam._m0[21u].w;
        float _2059 = fma(_1165, cbModelParam._m0[22u].z, fma(_1161, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1157)) + cbModelParam._m0[22u].w;
        float _2063 = fma(_1165, cbModelParam._m0[23u].z, fma(_1161, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1157)) + cbModelParam._m0[23u].w;
        float _2066 = fma(_1103, cbModelParam._m0[21u].z, fma(_1102, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101));
        float _2069 = fma(_1103, cbModelParam._m0[22u].z, fma(_1102, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101));
        float _2072 = fma(_1103, cbModelParam._m0[23u].z, fma(_1102, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101));
        float _2181;
        if (_2066 > 0.0)
        {
            _2181 = abs((1.0 - _2055) / _2066);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2055 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2181 = frontier_phi_25_21_ladder;
        }
        float _2498;
        if (_2069 > 0.0)
        {
            _2498 = abs((1.0 - _2059) / _2069);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2059 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2498 = frontier_phi_37_32_ladder;
        }
        float _2836;
        if (_2072 > 0.0)
        {
            _2836 = abs((1.0 - _2063) / _2072);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2063 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2836 = frontier_phi_47_44_ladder;
        }
        float _2838 = isnan(_2498) ? _2181 : (isnan(_2181) ? _2498 : min(_2181, _2498));
        float _2839 = isnan(_2836) ? _2838 : (isnan(_2838) ? _2836 : min(_2838, _2836));
        float _2843 = (_2839 * _2066) + _2055;
        float _2844 = (_2839 * _2069) + _2059;
        float _2845 = (_2839 * _2072) + _2063;
        float _2846 = _2839 * 9.9999997473787516355514526367188e-05;
        float _2847 = (-1.0) - _2846;
        float _2849 = _2846 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2845 > _2849) || ((_2845 < _2847) || ((_2844 > _2849) || ((_2844 < _2847) || ((_2843 < _2847) || (_2843 > _2849))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2845, cbModelParam._m0[17u].z, fma(_2844, cbModelParam._m0[17u].y, _2843 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2845, cbModelParam._m0[18u].z, fma(_2844, cbModelParam._m0[18u].y, _2843 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2845, cbModelParam._m0[19u].z, fma(_2844, cbModelParam._m0[19u].y, _2843 * cbModelParam._m0[19u].x))), _2001);
            frontier_phi_22_47_ladder = _2967.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2967.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2967.x * cbModelParam._m0[1u].z;
        }
        _2091 = frontier_phi_22_47_ladder_2;
        _2093 = frontier_phi_22_47_ladder_1;
        _2095 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2075 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1101, _1102, _1103), _2001);
        _2091 = _2075.x * cbModelParam._m0[1u].z;
        _2093 = _2075.y * cbModelParam._m0[1u].z;
        _2095 = _2075.z * cbModelParam._m0[1u].z;
    }
    float _2108 = (((_1128 * _1077) + _1129) * _1093) * ((cbModelParam._m0[1u].w * (_2091 - _1992)) + _1992);
    float _2110 = (((_1128 * _1079) + _1129) * _1093) * ((cbModelParam._m0[1u].w * (_2093 - _1994)) + _1994);
    float _2112 = (((_1128 * _1080) + _1129) * _1093) * ((cbModelParam._m0[1u].w * (_2095 - _1996)) + _1996);
    float _2115 = fma(_2112, cbSceneParam._m0[89u].z, fma(_2110, cbSceneParam._m0[89u].y, _2108 * cbSceneParam._m0[89u].x));
    float _2118 = fma(_2112, cbSceneParam._m0[90u].z, fma(_2110, cbSceneParam._m0[90u].y, _2108 * cbSceneParam._m0[90u].x));
    float _2121 = fma(_2112, cbSceneParam._m0[91u].z, fma(_2110, cbSceneParam._m0[91u].y, _2108 * cbSceneParam._m0[91u].x));
    float _2155 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2159 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2163 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2167 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2168 = _2155 / _2167;
    float _2169 = _2159 / _2167;
    float _2170 = _2163 / _2167;
    float _2317;
    float _2318;
    float _2319;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2197 = ((uint(_2170 > cbSceneParam._m0[59u].y) + uint(_2170 > cbSceneParam._m0[59u].x)) + uint(_2170 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2198 = _2197 + 43u;
        uint _2206 = _2197 + 44u;
        uint _2214 = _2197 + 45u;
        uint _2222 = _2197 + 46u;
        float _2233 = fma(_2167, cbSceneParam._m0[_2198].w, fma(_2163, cbSceneParam._m0[_2198].z, fma(_2159, cbSceneParam._m0[_2198].y, _2155 * cbSceneParam._m0[_2198].x)));
        float _2237 = fma(_2167, cbSceneParam._m0[_2206].w, fma(_2163, cbSceneParam._m0[_2206].z, fma(_2159, cbSceneParam._m0[_2206].y, _2155 * cbSceneParam._m0[_2206].x)));
        float _2245 = fma(_2167, cbSceneParam._m0[_2222].w, fma(_2163, cbSceneParam._m0[_2222].z, fma(_2159, cbSceneParam._m0[_2222].y, _2155 * cbSceneParam._m0[_2222].x)));
        float _2250 = cbSceneParam._m0[33u].z * _2245;
        float _2252 = cbSceneParam._m0[33u].w * _2245;
        float _2255 = fma(_2167, cbSceneParam._m0[_2214].w, fma(_2163, cbSceneParam._m0[_2214].z, fma(_2159, cbSceneParam._m0[_2214].y, _2155 * cbSceneParam._m0[_2214].x))) / _2245;
        float _2303 = (cbSceneParam._m0[33u].x - sqrt(((_2169 * _2169) + (_2168 * _2168)) + (_2170 * _2170))) * cbSceneParam._m0[33u].y;
        float _4631 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2310 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2250 + _2233) / _2245, (_2252 + _2237) / _2245), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2252 + _2233) / _2245, (_2237 - _2250) / _2245), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2233 - _2250) / _2245, (_2237 - _2252) / _2245), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2233 - _2252) / _2245, (_2250 + _2237) / _2245), _2255), 0.0)).x), vec4(0.25)));
        _2317 = 1.0 - (_2310 * cbSceneParam._m0[34u].x);
        _2318 = 1.0 - (_2310 * cbSceneParam._m0[34u].y);
        _2319 = 1.0 - (_2310 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2317 = 1.0;
        _2318 = 1.0;
        _2319 = 1.0;
    }
    float _2383;
    float _2385;
    float _2387;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2371 = fma(_2167, cbSceneParam._m0[63u].w, fma(_2163, cbSceneParam._m0[63u].z, fma(_2159, cbSceneParam._m0[63u].y, _2155 * cbSceneParam._m0[63u].x)));
        float _2372 = fma(_2167, cbSceneParam._m0[60u].w, fma(_2163, cbSceneParam._m0[60u].z, fma(_2159, cbSceneParam._m0[60u].y, _2155 * cbSceneParam._m0[60u].x))) / _2371;
        float _2373 = fma(_2167, cbSceneParam._m0[61u].w, fma(_2163, cbSceneParam._m0[61u].z, fma(_2159, cbSceneParam._m0[61u].y, _2155 * cbSceneParam._m0[61u].x))) / _2371;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2372 >= cbSceneParam._m0[64u].x) && (_2373 >= cbSceneParam._m0[64u].y)) && (_2372 <= cbSceneParam._m0[64u].z)) && (_2373 <= cbSceneParam._m0[64u].w))
        {
            float _2511 = fma(_2167, cbSceneParam._m0[62u].w, fma(_2163, cbSceneParam._m0[62u].z, fma(_2159, cbSceneParam._m0[62u].y, _2155 * cbSceneParam._m0[62u].x))) / _2371;
            float _2515 = isnan(cbSceneParam._m0[41u].w) ? _2511 : (isnan(_2511) ? cbSceneParam._m0[41u].w : max(_2511, cbSceneParam._m0[41u].w));
            float _2558 = (cbSceneParam._m0[33u].x - sqrt(((_2169 * _2169) + (_2168 * _2168)) + (_2170 * _2170))) * cbSceneParam._m0[33u].y;
            float _4647 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
            float _2565 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2372, cbSceneParam._m0[33u].w + _2373), _2515), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2372, _2373 - cbSceneParam._m0[33u].z), _2515), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2372 - cbSceneParam._m0[33u].z, _2373 - cbSceneParam._m0[33u].w), _2515), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2372 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2373), _2515), 0.0)).x), vec4(0.25)));
            float _2569 = 1.0 - (_2565 * cbSceneParam._m0[34u].x);
            float _2570 = 1.0 - (_2565 * cbSceneParam._m0[34u].y);
            float _2571 = 1.0 - (_2565 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2571) ? _2319 : (isnan(_2319) ? _2571 : min(_2319, _2571));
            frontier_phi_34_33_ladder_1 = isnan(_2570) ? _2318 : (isnan(_2318) ? _2570 : min(_2318, _2570));
            frontier_phi_34_33_ladder_2 = isnan(_2569) ? _2317 : (isnan(_2317) ? _2569 : min(_2317, _2569));
        }
        else
        {
            frontier_phi_34_33_ladder = _2319;
            frontier_phi_34_33_ladder_1 = _2318;
            frontier_phi_34_33_ladder_2 = _2317;
        }
        _2383 = frontier_phi_34_33_ladder_2;
        _2385 = frontier_phi_34_33_ladder_1;
        _2387 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2383 = _2317;
        _2385 = _2318;
        _2387 = _2319;
    }
    uvec4 _2392 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2394 = _2392.x * 14u;
    uint _2395 = _2394 + 13u;
    float _2402 = _1093 + (-1.0);
    float _2407 = (cbLight._m0[_2395].x * _2402) + 1.0;
    float _2408 = (cbLight._m0[_2395].y * _2402) + 1.0;
    float _2409 = (cbLight._m0[_2395].z * _2402) + 1.0;
    float _2410 = (cbLight._m0[_2395].w * _2402) + 1.0;
    uint _2411 = _2394 + 5u;
    float _2417 = isnan(1.0) ? _2408 : (isnan(_2408) ? 1.0 : min(_2408, 1.0));
    uint _2421 = _2394 + 4u;
    float _2430 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
    uint _2434 = _2394 | 1u;
    float _2445 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_928, _929, _930));
    float _2448 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_928, _929, _930));
    float _4683 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _4694 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2453 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * 0.3183098733425140380859375;
    float _2455 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * 0.3183098733425140380859375;
    float _2462 = ((cbLight._m0[_2411].x * _2417) * _2455) + (((cbLight._m0[_2421].x * _2383) * _2430) * _2453);
    float _2463 = ((_2417 * cbLight._m0[_2411].y) * _2455) + (((cbLight._m0[_2421].y * _2385) * _2430) * _2453);
    float _2464 = ((_2417 * cbLight._m0[_2411].z) * _2455) + (((cbLight._m0[_2421].z * _2387) * _2430) * _2453);
    uvec4 _2468 = floatBitsToUint(cbLight._m0[_2394 + 12u]);
    bool _2470 = _2468.x == 0u;
    float _2572;
    float _2574;
    float _2576;
    if (_2470)
    {
        _2572 = _2462;
        _2574 = _2463;
        _2576 = _2464;
    }
    else
    {
        uint _2580 = _2394 + 6u;
        float _2596 = (dot(vec3(cbLight._m0[_2394 + 2u].xyz), vec3(_928, _929, _930)) * 0.5) + 0.5;
        float _2597 = _2596 * _2596;
        float _4705 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2598 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2599 = isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0));
        _2572 = (((cbLight._m0[_2580].x * 0.3183098733425140380859375) * _2598) * _2599) + _2462;
        _2574 = (((cbLight._m0[_2580].y * 0.3183098733425140380859375) * _2598) * _2599) + _2463;
        _2576 = (((cbLight._m0[_2580].z * 0.3183098733425140380859375) * _2598) * _2599) + _2464;
    }
    bool _2579 = _2468.y == 0u;
    float _2634;
    float _2636;
    float _2638;
    if (_2579)
    {
        _2634 = _2572;
        _2636 = _2574;
        _2638 = _2576;
    }
    else
    {
        uint _2807 = _2394 + 7u;
        float _2823 = (dot(vec3(cbLight._m0[_2394 + 3u].xyz), vec3(_928, _929, _930)) * 0.5) + 0.5;
        float _2824 = _2823 * _2823;
        float _4721 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2825 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2826 = isnan(1.0) ? _2410 : (isnan(_2410) ? 1.0 : min(_2410, 1.0));
        _2634 = (((cbLight._m0[_2807].x * 0.3183098733425140380859375) * _2825) * _2826) + _2572;
        _2636 = (((cbLight._m0[_2807].y * 0.3183098733425140380859375) * _2825) * _2826) + _2574;
        _2638 = (((cbLight._m0[_2807].z * 0.3183098733425140380859375) * _2825) * _2826) + _2576;
    }
    uint _2641 = _2394 + 8u;
    float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2394].w)) * _931) * 0.949999988079071044921875);
    float _2655 = _2654 * _2654;
    float _2656 = cbLight._m0[_2394].x + _1007;
    float _2657 = cbLight._m0[_2394].y + _1008;
    float _2658 = cbLight._m0[_2394].z + _1009;
    float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
    float _2663 = _2662 * _2656;
    float _2664 = _2662 * _2657;
    float _2665 = _2662 * _2658;
    float _2666 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2394].xyz));
    float _4737 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2669 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _4748 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _2670 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2671 = dot(vec3(_928, _929, _930), vec3(_2663, _2664, _2665));
    float _4759 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2674 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2675 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_2663, _2664, _2665));
    float _4770 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2679 = _2655 * _2655;
    float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
    float _2691 = exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0);
    float _2692 = 0.959999978542327880859375 - _1074;
    float _2694 = 0.959999978542327880859375 - _1075;
    float _2695 = 0.959999978542327880859375 - _1076;
    float _2702 = 1.0 - _2655;
    float _2713 = (0.5 / (((_2670 * ((_2669 * _2702) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2670 * _2702) + _2655) * _2669))) * _2669;
    float _4781 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2715 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
    uint _2729 = _2394 + 9u;
    float _2740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _931) * 0.949999988079071044921875);
    float _2741 = _2740 * _2740;
    float _2742 = cbLight._m0[_2434].x + _1007;
    float _2743 = cbLight._m0[_2434].y + _1008;
    float _2744 = cbLight._m0[_2434].z + _1009;
    float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
    float _2749 = _2748 * _2742;
    float _2750 = _2748 * _2743;
    float _2751 = _2748 * _2744;
    float _2752 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2434].xyz));
    float _4792 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
    float _2755 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
    float _2756 = dot(vec3(_928, _929, _930), vec3(_2749, _2750, _2751));
    float _4803 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
    float _2759 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
    float _2760 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2749, _2750, _2751));
    float _4814 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2764 = _2741 * _2741;
    float _2768 = ((_2759 * _2759) * (_2764 + (-1.0))) + 1.0;
    float _2775 = exp2(log2(1.0 - (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) * 5.0);
    float _2782 = 1.0 - _2741;
    float _2792 = (0.5 / (((_2670 * ((_2755 * _2782) + _2741)) + 9.9999999392252902907785028219223e-09) + (((_2670 * _2782) + _2741) * _2755))) * _2755;
    float _4825 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
    float _2794 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2764 / ((_2768 * _2768) * 3.141590118408203125));
    float _2804 = (((((_2775 * _2692) + _1077) * cbLight._m0[_2729].x) * _2794) * _2417) + ((((cbLight._m0[_2641].x * _2383) * ((_2691 * _2692) + _1077)) * _2715) * _2430);
    float _2805 = (((((_2775 * _2694) + _1079) * cbLight._m0[_2729].y) * _2794) * _2417) + ((((cbLight._m0[_2641].y * _2385) * ((_2691 * _2694) + _1079)) * _2715) * _2430);
    float _2806 = (((((_2775 * _2695) + _1080) * cbLight._m0[_2729].z) * _2794) * _2417) + ((((cbLight._m0[_2641].z * _2387) * ((_2691 * _2695) + _1080)) * _2715) * _2430);
    float _2862;
    float _2864;
    float _2866;
    if (_2470)
    {
        _2862 = _2804;
        _2864 = _2805;
        _2866 = _2806;
    }
    else
    {
        uint _2868 = _2394 + 2u;
        uint _2872 = _2394 + 10u;
        float _2886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2868].w)) * _931) * 0.949999988079071044921875);
        float _2887 = _2886 * _2886;
        float _2888 = cbLight._m0[_2868].x + _1007;
        float _2889 = cbLight._m0[_2868].y + _1008;
        float _2890 = cbLight._m0[_2868].z + _1009;
        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
        float _2895 = _2894 * _2888;
        float _2896 = _2894 * _2889;
        float _2897 = _2894 * _2890;
        float _2898 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2868].xyz));
        float _4836 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2901 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2902 = dot(vec3(_928, _929, _930), vec3(_2895, _2896, _2897));
        float _4847 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
        float _2906 = dot(vec3(cbLight._m0[_2868].xyz), vec3(_2895, _2896, _2897));
        float _4858 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2910 = _2887 * _2887;
        float _2914 = ((_2905 * _2905) * (_2910 + (-1.0))) + 1.0;
        float _2921 = exp2(log2(1.0 - (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) * 5.0);
        float _2928 = 1.0 - _2887;
        float _2938 = (0.5 / (((_2670 * ((_2901 * _2928) + _2887)) + 9.9999999392252902907785028219223e-09) + (((_2670 * _2928) + _2887) * _2901))) * _2901;
        float _4869 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2940 = (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2910 / ((_2914 * _2914) * 3.141590118408203125));
        float _2941 = isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0));
        _2862 = (((((_2921 * _2692) + _1077) * cbLight._m0[_2872].x) * _2940) * _2941) + _2804;
        _2864 = (((((_2921 * _2694) + _1079) * cbLight._m0[_2872].y) * _2940) * _2941) + _2805;
        _2866 = (((((_2921 * _2695) + _1080) * cbLight._m0[_2872].z) * _2940) * _2941) + _2806;
    }
    float _2972;
    float _2974;
    float _2976;
    if (_2579)
    {
        _2972 = _2862;
        _2974 = _2864;
        _2976 = _2866;
    }
    else
    {
        uint _2983 = _2394 + 3u;
        uint _2987 = _2394 + 11u;
        float _3001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2983].w)) * _931) * 0.949999988079071044921875);
        float _3002 = _3001 * _3001;
        float _3003 = cbLight._m0[_2983].x + _1007;
        float _3004 = cbLight._m0[_2983].y + _1008;
        float _3005 = cbLight._m0[_2983].z + _1009;
        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
        float _3010 = _3009 * _3003;
        float _3011 = _3009 * _3004;
        float _3012 = _3009 * _3005;
        float _3013 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2983].xyz));
        float _4885 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        float _3016 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
        float _3017 = dot(vec3(_928, _929, _930), vec3(_3010, _3011, _3012));
        float _4896 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
        float _3020 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
        float _3021 = dot(vec3(cbLight._m0[_2983].xyz), vec3(_3010, _3011, _3012));
        float _4907 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3025 = _3002 * _3002;
        float _3029 = ((_3020 * _3020) * (_3025 + (-1.0))) + 1.0;
        float _3036 = exp2(log2(1.0 - (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0)))) * 5.0);
        float _3043 = 1.0 - _3002;
        float _3053 = (0.5 / (((_2670 * ((_3016 * _3043) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_2670 * _3043) + _3002) * _3016))) * _3016;
        float _4918 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        float _3055 = (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_3025 / ((_3029 * _3029) * 3.141590118408203125));
        float _3056 = isnan(1.0) ? _2410 : (isnan(_2410) ? 1.0 : min(_2410, 1.0));
        _2972 = (((((_3036 * _2692) + _1077) * cbLight._m0[_2987].x) * _3055) * _3056) + _2862;
        _2974 = (((((_3036 * _2694) + _1079) * cbLight._m0[_2987].y) * _3055) * _3056) + _2864;
        _2976 = (((((_3036 * _2695) + _1080) * cbLight._m0[_2987].z) * _3055) * _3056) + _2866;
    }
    float _3122;
    float _3124;
    float _3126;
    float _3128;
    float _3130;
    float _3132;
    if (_2392.y == 0u)
    {
        uvec4 _3077 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3078 = _3077.x;
        uint _3089 = uint((float(_3077.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1016) / _3078))) + floor(float(uint(cbSceneParam._m0[85u].x * _1015) / _3078)));
        float _3099 = (log2(_2170 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3100 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
        uint _3103 = uint(isnan(14.0) ? _3100 : (isnan(_3100) ? 14.0 : min(_3100, 14.0)));
        uvec4 _3108 = texelFetch(g_lightClusterGridBuffer, int(((_3103 << 2u) + (_3089 << 6u)) >> 2u));
        uint _3109 = _3108.x;
        uint _3110 = _3077.z;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        if (((((1u << ((_3110 >> 4u) & 15u)) + 4294967295u) & _3109) == 0u) || ((_3110 & 240u) == 0u))
        {
            _3189 = 0.0;
            _3191 = 0.0;
            _3193 = 0.0;
            _3195 = 0.0;
            _3197 = 0.0;
            _3199 = 0.0;
        }
        else
        {
            float _3190;
            float _3192;
            float _3194;
            float _3196;
            float _3198;
            float _3200;
            float _3334 = 0.0;
            float _3335 = 0.0;
            float _3336 = 0.0;
            float _3337 = 0.0;
            float _3338 = 0.0;
            float _3339 = 0.0;
            uint _3340 = 0u;
            uint _3349;
            bool _3350;
            for (;;)
            {
                _3349 = texelFetch(g_lightClassification, int((((_3103 << 5u) + (_3089 << 9u)) + (_3340 << 2u)) >> 2u)).x;
                _3350 = _3349 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3350)
                {
                    frontier_phi_66_pred = _3339;
                    frontier_phi_66_pred_1 = _3338;
                    frontier_phi_66_pred_2 = _3337;
                    frontier_phi_66_pred_3 = _3336;
                    frontier_phi_66_pred_4 = _3335;
                    frontier_phi_66_pred_5 = _3334;
                }
                else
                {
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    float _3463;
                    uint _3464;
                    _3458 = _3334;
                    _3459 = _3335;
                    _3460 = _3336;
                    _3461 = _3337;
                    _3462 = _3338;
                    _3463 = _3339;
                    _3464 = _3349;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    for (;;)
                    {
                        uint _3468 = uint(findLSB(_3464)) + (_3340 << 5u);
                        uint _3465 = (_3464 + 4294967295u) & _3464;
                        uint _3470 = _3468 * 48u;
                        vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3470)).x, texelFetch(g_PointLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3470 + 3u)).x));
                        uint _3490 = (_3468 * 48u) + 4u;
                        vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3490)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3490 + 3u)).x));
                        uint _3509 = (_3468 * 48u) + 8u;
                        vec3 _3520 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3509)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 2u)).x));
                        float _3524 = _3484.x - _2168;
                        float _3525 = _3484.y - _2169;
                        float _3526 = _3484.z - _2170;
                        float _3527 = dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526));
                        float _3530 = inversesqrt(_3527);
                        float _3531 = _3530 * _3524;
                        float _3532 = _3530 * _3525;
                        float _3533 = _3530 * _3526;
                        float _3534 = dot(vec3(_1034, _1037, _1040), vec3(_3531, _3532, _3533));
                        float _3539 = 1.0 - (_3527 * _3484.w);
                        float _4944 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3540 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3541 = sqrt(_3527) * _3503.w;
                        float _3544 = 1.39999997615814208984375 / (_3541 + 1.39999997615814208984375);
                        float _3545 = _3544 * _3544;
                        float _3548 = ((1.0 - _3545) * _3534) + _3545;
                        float _3551 = _3541 * _3541;
                        float _3555 = ((isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0))) * _3540) / ((_3551 * 0.699999988079071044921875) + 1.0);
                        float _3559 = (-0.0) - _2168;
                        float _3560 = (-0.0) - _2169;
                        float _3561 = (-0.0) - _2170;
                        float _3565 = inversesqrt(dot(vec3(_3559, _3560, _3561), vec3(_3559, _3560, _3561)));
                        float _3566 = _3565 * _3559;
                        float _3567 = _3565 * _3560;
                        float _3568 = _3565 * _3561;
                        float _3575 = exp2(log2(1.0 / ((_3551 * 3.5) + 5.0)) * 0.25);
                        float _3576 = 1.0 - _1109;
                        float _3583 = sqrt(1.0 - ((1.0 - (_3576 * _3576)) * (1.0 - (_3575 * _3575))));
                        float _3584 = _3583 * _3583;
                        float _3585 = _3584 * _3584;
                        float _3586 = _3566 + _3531;
                        float _3587 = _3567 + _3532;
                        float _3588 = _3568 + _3533;
                        float _3592 = inversesqrt(dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588)));
                        float _3596 = dot(vec3(_1034, _1037, _1040), vec3(_3566, _3567, _3568));
                        float _4960 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3599 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                        float _3600 = dot(vec3(_1034, _1037, _1040), vec3(_3592 * _3586, _3592 * _3587, _3592 * _3588));
                        float _4971 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                        float _3603 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                        float _3607 = ((_3603 * _3603) * (_3585 + (-1.0))) + 1.0;
                        float _3608 = _3544 * _3584;
                        float _3609 = _3608 * _3608;
                        float _3612 = ((1.0 - _3609) * _3534) + _3609;
                        float _4982 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                        float _3613 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                        float _3614 = 1.0 - _3584;
                        float _3624 = (0.5 / (((_3613 * ((_3599 * _3614) + _3584)) + 9.9999999392252902907785028219223e-09) + (((_3613 * _3614) + _3584) * _3599))) * _3613;
                        float _4993 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                        float _3635 = (((_3585 * 3.1415927410125732421875) * (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0)))) / ((_3607 * _3607) * ((_3551 * 2.1991131305694580078125) + 3.141590118408203125))) * _3540;
                        _3393 = (_3555 * _3503.x) + _3461;
                        _3394 = (_3555 * _3503.y) + _3462;
                        _3395 = (_3555 * _3503.z) + _3463;
                        _3390 = (_3635 * _3520.x) + _3458;
                        _3391 = (_3635 * _3520.y) + _3459;
                        _3392 = (_3635 * _3520.z) + _3460;
                        if (_3465 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3458 = _3390;
                            _3459 = _3391;
                            _3460 = _3392;
                            _3461 = _3393;
                            _3462 = _3394;
                            _3463 = _3395;
                            _3464 = _3465;
                        }
                    }
                    frontier_phi_66_pred = _3395;
                    frontier_phi_66_pred_1 = _3394;
                    frontier_phi_66_pred_2 = _3393;
                    frontier_phi_66_pred_3 = _3392;
                    frontier_phi_66_pred_4 = _3391;
                    frontier_phi_66_pred_5 = _3390;
                }
                _3200 = frontier_phi_66_pred;
                _3198 = frontier_phi_66_pred_1;
                _3196 = frontier_phi_66_pred_2;
                _3194 = frontier_phi_66_pred_3;
                _3192 = frontier_phi_66_pred_4;
                _3190 = frontier_phi_66_pred_5;
                uint _3341 = _3340 + 1u;
                if (_3341 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3334 = _3190;
                    _3335 = _3192;
                    _3336 = _3194;
                    _3337 = _3196;
                    _3338 = _3198;
                    _3339 = _3200;
                    _3340 = _3341;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3189 = _3190;
            _3191 = _3192;
            _3193 = _3194;
            _3195 = _3196;
            _3197 = _3198;
            _3199 = _3200;
        }
        uvec4 _3203 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3204 = _3203.z;
        uint _3206 = (_3204 >> 8u) & 15u;
        float _3302;
        float _3304;
        float _3306;
        float _3308;
        float _3310;
        float _3312;
        if (((4294967295u << _3206) & _3109) == 0u)
        {
            _3302 = _3189;
            _3304 = _3191;
            _3306 = _3193;
            _3308 = _3195;
            _3310 = _3197;
            _3312 = _3199;
        }
        else
        {
            float _3327 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
            float _3328 = _3327 * _2168;
            float _3329 = _3327 * _2169;
            float _3330 = _3327 * _2170;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3206 < ((_3204 >> 12u) & 15u))
            {
                float _3303;
                float _3305;
                float _3307;
                float _3309;
                float _3311;
                float _3313;
                float _3441 = _3189;
                float _3442 = _3191;
                float _3443 = _3193;
                float _3444 = _3195;
                float _3445 = _3197;
                float _3446 = _3199;
                uint _3447 = _3206;
                uint _3456;
                bool _3457;
                for (;;)
                {
                    _3456 = texelFetch(g_lightClassification, int((((_3103 << 5u) + (_3089 << 9u)) + (_3447 << 2u)) >> 2u)).x;
                    _3457 = _3456 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3457)
                    {
                        frontier_phi_72_pred = _3446;
                        frontier_phi_72_pred_1 = _3445;
                        frontier_phi_72_pred_2 = _3444;
                        frontier_phi_72_pred_3 = _3443;
                        frontier_phi_72_pred_4 = _3442;
                        frontier_phi_72_pred_5 = _3441;
                    }
                    else
                    {
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3933;
                        float _3934;
                        float _3935;
                        float _3936;
                        float _3937;
                        float _3938;
                        float _3653 = _3441;
                        float _3654 = _3442;
                        float _3655 = _3443;
                        float _3656 = _3444;
                        float _3657 = _3445;
                        float _3658 = _3446;
                        uint _3659 = _3456;
                        uint _3660;
                        vec4 _3685;
                        float _3686;
                        vec4 _3701;
                        vec3 _3713;
                        vec4 _3728;
                        vec4 _3743;
                        float _3789;
                        bool _3790;
                        for (;;)
                        {
                            uint _3670 = ((_3447 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3659));
                            _3660 = (_3659 + 4294967295u) & _3659;
                            uint _3672 = _3670 * 40u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            _3686 = _3685.w;
                            uint _3688 = (_3670 * 40u) + 4u;
                            _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            uint _3703 = (_3670 * 40u) + 8u;
                            _3713 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x));
                            uint _3715 = (_3670 * 40u) + 16u;
                            _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            uint _3730 = (_3670 * 40u) + 20u;
                            _3743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 3u)).x));
                            uint _3745 = (_3670 * 40u) + 24u;
                            vec4 _3758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 3u)).x));
                            uint _3764 = (_3670 * 40u) + 28u;
                            vec4 _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            _3789 = fma(_2170, _3777.z, fma(_2169, _3777.y, _3777.x * _2168)) + _3777.w;
                            _3790 = !((fma(_2170, _3758.z, fma(_2169, _3758.y, _3758.x * _2168)) + _3758.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3790)
                            {
                                float _3817 = _3685.x - _2168;
                                float _3818 = _3685.y - _2169;
                                float _3819 = _3685.z - _2170;
                                float _3820 = dot(vec3(_3817, _3818, _3819), vec3(_3817, _3818, _3819));
                                float _3823 = inversesqrt(_3820);
                                float _3824 = _3823 * _3817;
                                float _3825 = _3823 * _3818;
                                float _3826 = _3823 * _3819;
                                float _3830 = 1.0 - (_3820 / (_3686 * _3686));
                                float _5004 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3831 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3835 = sqrt(_3820) * _3701.w;
                                float _3837 = 1.39999997615814208984375 / (_3835 + 1.39999997615814208984375);
                                float _3838 = _3837 * _3837;
                                float _3841 = ((1.0 - _3838) * dot(vec3(_3824, _3825, _3826), vec3(_1034, _1037, _1040))) + _3838;
                                float _3844 = _3835 * _3835;
                                float _3848 = (fma(_2170, _3728.z, fma(_2169, _3728.y, _3728.x * _2168)) + _3728.w) / _3789;
                                float _3849 = (fma(_2170, _3743.z, fma(_2169, _3743.y, _3743.x * _2168)) + _3743.w) / _3789;
                                float _3853 = 1.0 - dot(vec2(_3848, _3849), vec2(_3848, _3849));
                                float _5020 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3854 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3855 = _3854 * (((isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0))) * _3831) / ((_3844 * 0.699999988079071044921875) + 1.0));
                                float _3867 = exp2(log2(1.0 / ((_3844 * 3.5) + 5.0)) * 0.25);
                                float _3868 = 1.0 - _1109;
                                float _3875 = sqrt(1.0 - ((1.0 - (_3868 * _3868)) * (1.0 - (_3867 * _3867))));
                                float _3876 = _3875 * _3875;
                                float _3877 = _3876 * _3876;
                                float _3878 = _3824 - _3328;
                                float _3879 = _3825 - _3329;
                                float _3880 = _3826 - _3330;
                                float _3884 = inversesqrt(dot(vec3(_3878, _3879, _3880), vec3(_3878, _3879, _3880)));
                                float _3888 = dot(vec3(_1034, _1037, _1040), vec3((-0.0) - _3328, (-0.0) - _3329, (-0.0) - _3330));
                                float _5031 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3891 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3892 = dot(vec3(_1034, _1037, _1040), vec3(_3884 * _3878, _3884 * _3879, _3884 * _3880));
                                float _5042 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3895 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                                float _3899 = ((_3895 * _3895) * (_3877 + (-1.0))) + 1.0;
                                float _3900 = _3837 * _3876;
                                float _3901 = _3900 * _3900;
                                float _3907 = ((1.0 - _3901) * dot(vec3(_1034, _1037, _1040), vec3(_3824, _3825, _3826))) + _3901;
                                float _5053 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3908 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
                                float _3909 = 1.0 - _3876;
                                float _3919 = (0.5 / (((_3908 * ((_3891 * _3909) + _3876)) + 9.9999999392252902907785028219223e-09) + (((_3908 * _3909) + _3876) * _3891))) * _3908;
                                float _5064 = isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0));
                                float _3929 = (_3854 * _3831) * (((_3877 * 3.1415927410125732421875) * (isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0)))) / ((_3899 * _3899) * ((_3844 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3855 * _3701.y;
                                frontier_phi_78_pred_1 = _3855 * _3701.x;
                                frontier_phi_78_pred_2 = _3929 * _3713.z;
                                frontier_phi_78_pred_3 = _3929 * _3713.y;
                                frontier_phi_78_pred_4 = _3929 * _3713.x;
                                frontier_phi_78_pred_5 = _3855 * _3701.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3937 = frontier_phi_78_pred;
                            _3936 = frontier_phi_78_pred_1;
                            _3935 = frontier_phi_78_pred_2;
                            _3934 = frontier_phi_78_pred_3;
                            _3933 = frontier_phi_78_pred_4;
                            _3938 = frontier_phi_78_pred_5;
                            _3643 = _3936 + _3656;
                            _3644 = _3937 + _3657;
                            _3645 = _3938 + _3658;
                            _3640 = _3933 + _3653;
                            _3641 = _3934 + _3654;
                            _3642 = _3935 + _3655;
                            if (_3660 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3653 = _3640;
                                _3654 = _3641;
                                _3655 = _3642;
                                _3656 = _3643;
                                _3657 = _3644;
                                _3658 = _3645;
                                _3659 = _3660;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3645;
                        frontier_phi_72_pred_1 = _3644;
                        frontier_phi_72_pred_2 = _3643;
                        frontier_phi_72_pred_3 = _3642;
                        frontier_phi_72_pred_4 = _3641;
                        frontier_phi_72_pred_5 = _3640;
                    }
                    _3313 = frontier_phi_72_pred;
                    _3311 = frontier_phi_72_pred_1;
                    _3309 = frontier_phi_72_pred_2;
                    _3307 = frontier_phi_72_pred_3;
                    _3305 = frontier_phi_72_pred_4;
                    _3303 = frontier_phi_72_pred_5;
                    uint _3448 = _3447 + 1u;
                    if (_3448 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3441 = _3303;
                        _3442 = _3305;
                        _3443 = _3307;
                        _3444 = _3309;
                        _3445 = _3311;
                        _3446 = _3313;
                        _3447 = _3448;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3313;
                frontier_phi_60_61_ladder_1 = _3311;
                frontier_phi_60_61_ladder_2 = _3307;
                frontier_phi_60_61_ladder_3 = _3305;
                frontier_phi_60_61_ladder_4 = _3303;
                frontier_phi_60_61_ladder_5 = _3309;
            }
            else
            {
                frontier_phi_60_61_ladder = _3199;
                frontier_phi_60_61_ladder_1 = _3197;
                frontier_phi_60_61_ladder_2 = _3193;
                frontier_phi_60_61_ladder_3 = _3191;
                frontier_phi_60_61_ladder_4 = _3189;
                frontier_phi_60_61_ladder_5 = _3195;
            }
            _3302 = frontier_phi_60_61_ladder_4;
            _3304 = frontier_phi_60_61_ladder_3;
            _3306 = frontier_phi_60_61_ladder_2;
            _3308 = frontier_phi_60_61_ladder_5;
            _3310 = frontier_phi_60_61_ladder_1;
            _3312 = frontier_phi_60_61_ladder;
        }
        float _3317 = isnan(1.0) ? _1093 : (isnan(_1093) ? 1.0 : min(_1093, 1.0));
        _3122 = (_3317 * _3308) + _2634;
        _3124 = (_3317 * _3310) + _2636;
        _3126 = (_3317 * _3312) + _2638;
        _3128 = ((_3302 * _1077) * _3317) + _2972;
        _3130 = ((_3304 * _1079) * _3317) + _2974;
        _3132 = ((_3306 * _1080) * _3317) + _2976;
    }
    else
    {
        _3122 = _2634;
        _3124 = _2636;
        _3126 = _2638;
        _3128 = _2972;
        _3130 = _2974;
        _3132 = _2976;
    }
    float _5080 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _5091 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _5102 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    uint _3152 = _265 + 6u;
    float _3160 = _1015 / cbSceneParam._m0[86u].x;
    float _3161 = _1016 / cbSceneParam._m0[86u].y;
    vec4 _3175 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3160, _3161, (log2((isnan(cbSceneParam._m0[77u].w) ? _950 : (isnan(_950) ? cbSceneParam._m0[77u].w : min(_950, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3177 = _3175.x;
    float _3178 = _3175.y;
    float _3179 = _3175.z;
    float _3180 = _3175.w;
    float _3252;
    float _3254;
    float _3256;
    float _3258;
    if (_950 > cbSceneParam._m0[78u].w)
    {
        float _3214 = isnan(_950) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _950 : min(cbSceneParam._m0[80u].w, _950));
        float _3215 = _3214 / _950;
        float _3226 = _3215 * _1000;
        float _3227 = _1001 * _3215;
        float _3228 = (-0.0) - _3227;
        float _3230 = _3215 * _1002;
        float _3232 = (cbSceneParam._m0[77u].w * _3228) / _3214;
        float _3233 = _3232 + cbSceneParam._m0[79u].w;
        float _3234 = cbSceneParam._m0[79u].w - _3227;
        float _3240 = sqrt(((_3226 * _3226) + (_3227 * _3227)) + (_3230 * _3230));
        float _3243 = (1.0 - (cbSceneParam._m0[77u].w / _3214)) * _3240;
        float _3248 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3250 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3403;
        if (abs((_3228 - _3232) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3403 = ((((_3233 > 0.0) ? exp2(_3248 * _3233) : (2.0 - exp2(_3250 * _3233))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3243;
        }
        else
        {
            float _3363 = 1.0 / cbSceneParam._m0[80u].x;
            float _3364 = isnan(_3234) ? _3233 : (isnan(_3233) ? _3234 : max(_3233, _3234));
            float _3365 = isnan(_3234) ? _3233 : (isnan(_3233) ? _3234 : min(_3233, _3234));
            float _3374 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : min(_3364, 0.0));
            float _3375 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : min(_3365, 0.0));
            _3403 = ((abs(_3240 / _3228) * cbSceneParam._m0[80u].y) * ((((_3374 - _3375) * 2.0) - ((exp2(_3248 * (isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0)))) - exp2(_3248 * (isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0))))) * _3363)) - ((exp2(_3250 * _3374) - exp2(_3250 * _3375)) * _3363))) + (_3243 * cbSceneParam._m0[80u].z);
        }
        vec4 _3405 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3160, _3161, 1.0), 0.0);
        float _3414 = exp2((_3403 * (-1.44269502162933349609375)) * (1.0 - _3405.w));
        float _3415 = log2(_3414);
        float _3431 = log2(_3180);
        _3252 = (exp2(_3431 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3415 * cbSceneParam._m0[78u].x)) * _3405.x) / cbSceneParam._m0[78u].x)) + _3177;
        _3254 = (exp2(_3431 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3415 * cbSceneParam._m0[78u].y)) * _3405.y) / cbSceneParam._m0[78u].y)) + _3178;
        _3256 = (exp2(_3431 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3415 * cbSceneParam._m0[78u].z)) * _3405.z) / cbSceneParam._m0[78u].z)) + _3179;
        _3258 = _3414 * _3180;
    }
    else
    {
        _3252 = _3177;
        _3254 = _3178;
        _3256 = _3179;
        _3258 = _3180;
    }
    float _3270 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3271 = _3270 == 3.0;
    float _3272 = log2(_3258);
    float _3279 = exp2(_3272 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0))) * (_3122 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1093))) + ((_3128 + ((isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0))) * _1900)) * cbPerFrame._m0[3u].x));
    float _3280 = exp2(_3272 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0))) * (_3124 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1093))) + ((_3130 + ((isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0))) * _1900)) * cbPerFrame._m0[3u].x));
    float _3281 = exp2(_3272 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0))) * (_3126 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1093))) + ((_3132 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1900)) * cbPerFrame._m0[3u].x));
    float _3290 = (_3270 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3290 * (_3271 ? _3279 : (_3279 + (cbSceneParam._m0[72u].w * _3252)));
    SV_Target.y = _3290 * (_3271 ? _3280 : (_3280 + (cbSceneParam._m0[72u].w * _3254)));
    SV_Target.z = _3290 * (_3271 ? _3281 : (_3281 + (cbSceneParam._m0[72u].w * _3256)));
    SV_Target.w = cbInstanceData._m0[_3152].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3152].w;
}


