#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1310;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[23u].w) + _388) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3921 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _413 = (_406 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _414 = (_406 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _415 = (_406 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _433 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _452 = _450.x;
    float _453 = _450.y;
    float _454 = _450.z;
    float _463 = ((_433.z - _454) * _406) + _454;
    float _466 = ((((_433.x - _452) * _406) + _452) * 2.0) + (-1.0);
    float _468 = ((((_433.y - _453) * _406) + _453) * 2.0) + (-1.0);
    float _469 = dot(vec2(_466, _468), vec2(_466, _468));
    float _3932 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _474 = sqrt(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _517 = _515.x;
    float _518 = 1.0 - _517;
    float _527 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _530 = ((isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : min(_527, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _539 = (_530 - ((((((_517 - _518) * cbMtdParam._m0[24u].z) + _518) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _530))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3953 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _547 = (_540 * (cbMtdParam._m0[17u].x - _413)) + _413;
    float _548 = (_540 * (cbMtdParam._m0[17u].y - _414)) + _414;
    float _549 = (_540 * (cbMtdParam._m0[17u].z - _415)) + _415;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _563 = _561.x;
    float _564 = 1.0 - _563;
    float _589 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_563 - _564) * cbMtdParam._m0[24u].w) + _564) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3964 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _598 = ((((cbMtdParam._m0[10u].x - _547) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _590) + _547;
    float _599 = ((((cbMtdParam._m0[10u].y - _548) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _590) + _548;
    float _600 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _549)) * _590) + _549;
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _628 = _626.x;
    float _646 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _628) * _406) + _628;
    float _650 = ((_612.x - _646) * cbMtdParam._m0[19u].z) + _646;
    float _652 = _650 - (_650 * _540);
    float _654 = _652 - (_652 * _590);
    float _658 = (cbMtdParam._m0[19u].w * (_490.z - _463)) + _463;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _679 = (_672.x * 2.0) + (-1.0);
    float _680 = (_672.y * 2.0) + (-1.0);
    float _681 = dot(vec2(_679, _680), vec2(_679, _680));
    float _3975 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _689 = (_540 * (_672.z - _658)) + _658;
    float _692 = ((cbMtdParam._m0[23u].x - _689) * _590) + _689;
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _717 = (_711.x * 2.0) + (-1.0);
    float _718 = (_711.y * 2.0) + (-1.0);
    float _719 = dot(vec2(_717, _718), vec2(_717, _718));
    float _3986 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _727 = (((_490.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _466;
    float _728 = (((_490.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _468;
    float _740 = (((_679 - _727) + (cbMtdParam._m0[21u].x * _727)) * _540) + _727;
    float _741 = (((_680 - _728) + (cbMtdParam._m0[21u].x * _728)) * _540) + _728;
    float _742 = (_540 * (sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) - _474)) + _474;
    float _753 = (((_717 - _740) + (_740 * cbMtdParam._m0[22u].z)) * _590) + _740;
    float _754 = (((_718 - _741) + (_741 * cbMtdParam._m0[22u].z)) * _590) + _741;
    float _755 = ((sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) - _742) * _590) + _742;
    float _757 = cbMtdParam._m0[22u].x + _490.w;
    float _760 = fma(_755, _242 * NORMAL.x, fma(_754, _249 * TANGENT.x, (_235 * _227) * _753));
    float _763 = fma(_755, _242 * NORMAL.y, fma(_754, _249 * TANGENT.y, (_235 * _228) * _753));
    float _766 = fma(_755, _242 * NORMAL.z, fma(_754, _249 * TANGENT.z, (_235 * _229) * _753));
    float _770 = inversesqrt(dot(vec3(_760, _763, _766), vec3(_760, _763, _766)));
    float _771 = _770 * _760;
    float _772 = _770 * _763;
    float _773 = _770 * _766;
    float _3997 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _774 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4019 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4030 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4041 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4052 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _779 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _793 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _843 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _833);
    float _844 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _833);
    float _845 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _833);
    float _849 = inversesqrt(dot(vec3(_843, _844, _845), vec3(_843, _844, _845)));
    float _850 = _843 * _849;
    float _851 = _844 * _849;
    float _852 = _845 * _849;
    float _858 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _859 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _877 = fma(_773, cbSceneParam._m0[5u].z, fma(_772, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _771));
    float _880 = fma(_773, cbSceneParam._m0[6u].z, fma(_772, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _771));
    float _883 = fma(_773, cbSceneParam._m0[7u].z, fma(_772, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _771));
    uint _897 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _903 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_897].x;
    float _904 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_897].y;
    float _905 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_897].z;
    float _4063 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _909 = 1.0 - _779;
    float _910 = _906 * _909;
    float _911 = _907 * _909;
    float _912 = _908 * _909;
    float _917 = (_906 + (-0.039999999105930328369140625)) * _779;
    float _918 = (_907 + (-0.039999999105930328369140625)) * _779;
    float _919 = (_908 + (-0.039999999105930328369140625)) * _779;
    float _920 = _917 + 0.039999999105930328369140625;
    float _922 = _918 + 0.039999999105930328369140625;
    float _923 = _919 + 0.039999999105930328369140625;
    vec4 _932 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _858, cbSceneParam._m0[86u].y * _859));
    float _936 = ((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * TEXCOORD_5.w) * _932.x;
    float _937 = dot(vec3(_771, _772, _773), vec3(_850, _851, _852));
    float _940 = _937 * 2.0;
    float _944 = (_940 * _771) - _850;
    float _945 = (_940 * _772) - _851;
    float _946 = (_940 * _773) - _852;
    float _950 = abs(dot(vec3(_850, _851, _852), vec3(_771, _772, _773)));
    float _4096 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _952 = sqrt(_774);
    float _965 = exp2((_952 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_952 * 3.0));
    float _971 = (1.0 - _965) * ((_952 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _972 = _965 * _952;
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1309;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1034 = fma(_1008, cbModelParam._m0[26u].z, fma(_1004, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1000));
        float _1038 = fma(_1008, cbModelParam._m0[27u].z, fma(_1004, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1000));
        float _1042 = fma(_1008, cbModelParam._m0[28u].z, fma(_1004, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1000));
        float _1067 = _1000 + _771;
        float _1068 = _1004 + _772;
        float _1069 = _1008 + _773;
        float _1079 = fma(_1069, cbModelParam._m0[26u].z, fma(_1068, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1067)) - _1034;
        float _1080 = fma(_1069, cbModelParam._m0[27u].z, fma(_1068, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1067)) - _1038;
        float _1081 = fma(_1069, cbModelParam._m0[28u].z, fma(_1068, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1067)) - _1042;
        float _1085 = inversesqrt(dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081)));
        float _1098 = ((_1085 * _1079) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1034 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1085 * _1080) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1038 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1085 * _1081) / cbModelParam._m0[34u].z) + ((((((_1042 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        float _1137 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1103.x + (-0.5));
        float _1139 = _1137 * (_1103.y + (-0.5));
        float _1140 = _1137 * (_1103.z + (-0.5));
        float _1147 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1110.x + (-0.5));
        float _1149 = _1147 * (_1110.y + (-0.5));
        float _1150 = _1147 * (_1110.z + (-0.5));
        float _1157 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1117.x + (-0.5));
        float _1159 = _1157 * (_1117.y + (-0.5));
        float _1160 = _1157 * (_1117.z + (-0.5));
        float _1167 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1124.x + (-0.5));
        float _1169 = _1167 * (_1124.y + (-0.5));
        float _1170 = _1167 * (_1124.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1191 = (dot(vec3(_771, _772, _773), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1201 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _4144 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1203 + 1.0))) + _1208) * _1171;
        float _1218 = _1139 * 0.5;
        float _1219 = _1149 * 0.5;
        float _1220 = _1159 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_771, _772, _773), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4177 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1245 + 1.0))) + _1250) * _1172;
        float _1260 = _1140 * 0.5;
        float _1261 = _1150 * 0.5;
        float _1262 = _1160 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_771, _772, _773), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4210 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1287 + 1.0))) + _1292) * _1173;
        _1309 = _1140;
        _1311 = _1139;
        _1312 = _1138;
        _1313 = _1150;
        _1314 = _1149;
        _1315 = _1148;
        _1316 = _1160;
        _1317 = _1159;
        _1318 = _1158;
        _1319 = _1173;
        _1320 = _1172;
        _1321 = _1171;
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1323 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1324 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
    }
    else
    {
        _1309 = _1310;
        _1311 = _1310;
        _1312 = _1310;
        _1313 = _1310;
        _1314 = _1310;
        _1315 = _1310;
        _1316 = _1310;
        _1317 = _1310;
        _1318 = _1310;
        _1319 = _1310;
        _1320 = _1310;
        _1321 = _1310;
        _1322 = 0.0;
        _1323 = 0.0;
        _1324 = 0.0;
    }
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1349 = fma(_1008, cbModelParam._m0[30u].z, fma(_1004, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1000));
        float _1353 = fma(_1008, cbModelParam._m0[31u].z, fma(_1004, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1000));
        float _1357 = fma(_1008, cbModelParam._m0[32u].z, fma(_1004, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1000));
        float _1380 = _1000 + _771;
        float _1381 = _1004 + _772;
        float _1382 = _1008 + _773;
        float _1392 = fma(_1382, cbModelParam._m0[30u].z, fma(_1381, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1380)) - _1349;
        float _1393 = fma(_1382, cbModelParam._m0[31u].z, fma(_1381, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1380)) - _1353;
        float _1394 = fma(_1382, cbModelParam._m0[32u].z, fma(_1381, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1380)) - _1357;
        float _1398 = inversesqrt(dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394)));
        float _1411 = ((_1398 * _1392) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1349 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1398 * _1393) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1353 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1398 * _1394) / cbModelParam._m0[35u].z) + ((((((_1357 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        float _1448 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1415.x + (-0.5));
        float _1450 = _1448 * (_1415.y + (-0.5));
        float _1451 = _1448 * (_1415.z + (-0.5));
        float _1458 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1422.x + (-0.5));
        float _1460 = _1458 * (_1422.y + (-0.5));
        float _1461 = _1458 * (_1422.z + (-0.5));
        float _1468 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1429.x + (-0.5));
        float _1470 = _1468 * (_1429.y + (-0.5));
        float _1471 = _1468 * (_1429.z + (-0.5));
        float _1478 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1436.x + (-0.5));
        float _1480 = _1478 * (_1436.y + (-0.5));
        float _1481 = _1478 * (_1436.z + (-0.5));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = _1449 * 0.5;
        float _1486 = _1459 * 0.5;
        float _1487 = _1469 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_771, _772, _773), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4273 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1512 + 1.0))) + _1517) * _1482;
        float _1527 = _1450 * 0.5;
        float _1528 = _1460 * 0.5;
        float _1529 = _1470 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_771, _772, _773), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4306 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1554 + 1.0))) + _1559) * _1483;
        float _1569 = _1451 * 0.5;
        float _1570 = _1461 * 0.5;
        float _1571 = _1471 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_771, _772, _773), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4339 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1596 + 1.0))) + _1601) * _1484;
        _1618 = _1451;
        _1619 = _1450;
        _1620 = _1449;
        _1621 = _1461;
        _1622 = _1460;
        _1623 = _1459;
        _1624 = _1471;
        _1625 = _1470;
        _1626 = _1469;
        _1627 = _1484;
        _1628 = _1483;
        _1629 = _1482;
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
    }
    else
    {
        _1618 = _1310;
        _1619 = _1310;
        _1620 = _1310;
        _1621 = _1310;
        _1622 = _1310;
        _1623 = _1310;
        _1624 = _1310;
        _1625 = _1310;
        _1626 = _1310;
        _1627 = _1310;
        _1628 = _1310;
        _1629 = _1310;
        _1630 = 0.0;
        _1631 = 0.0;
        _1632 = 0.0;
    }
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1322)) + _1322;
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1323)) + _1323;
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1324)) + _1324;
    float _1665 = fma(_1644, cbSceneParam._m0[89u].z, fma(_1643, cbSceneParam._m0[89u].y, _1642 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1644, cbSceneParam._m0[90u].z, fma(_1643, cbSceneParam._m0[90u].y, _1642 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1644, cbSceneParam._m0[91u].z, fma(_1643, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1642));
    float _1686 = _944 * 0.5;
    float _1687 = _945 * 0.5;
    float _1688 = _946 * 0.5;
    float _1689 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1692 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1695 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1729;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1702 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1309, _1313, _1316, _1319));
        float _1706 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1311, _1314, _1317, _1320));
        float _1710 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1312, _1315, _1318, _1321));
        float _1717 = dot(vec4(cbModelParam._m0[39u]), vec4(_1686, _1687, _1688, 1.0));
        _1729 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1717) ? 0.0 : (isnan(0.0) ? _1717 : max(0.0, _1717))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1729 = 1.0;
    }
    float _1740;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1731 = dot(vec4(cbModelParam._m0[40u]), vec4(_1686, _1687, _1688, 1.0));
        _1740 = dot(vec3(isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1731) ? 0.0 : (isnan(0.0) ? _1731 : max(0.0, _1731))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1740 = 1.0;
    }
    float _1744 = (_1740 * cbModelParam._m0[1u].x) + (_1729 * (1.0 - cbModelParam._m0[1u].x));
    float _1754 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _774);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1754 : min(cbModelParam._m0[25u].z, _1754));
    float _1836;
    float _1838;
    float _1840;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1803 = fma(_1008, cbModelParam._m0[13u].z, fma(_1004, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1000)) + cbModelParam._m0[13u].w;
        float _1807 = fma(_1008, cbModelParam._m0[14u].z, fma(_1004, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1000)) + cbModelParam._m0[14u].w;
        float _1811 = fma(_1008, cbModelParam._m0[15u].z, fma(_1004, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1000)) + cbModelParam._m0[15u].w;
        float _1814 = fma(_946, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _944));
        float _1817 = fma(_946, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _944));
        float _1820 = fma(_946, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _944));
        float _1848;
        if (_1814 > 0.0)
        {
            _1848 = abs((1.0 - _1803) / _1814);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1803 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1848 = frontier_phi_14_12_ladder;
        }
        float _2020;
        if (_1817 > 0.0)
        {
            _2020 = abs((1.0 - _1807) / _1817);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1807 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2020 = frontier_phi_23_19_ladder;
        }
        float _2315;
        if (_1820 > 0.0)
        {
            _2315 = abs((1.0 - _1811) / _1820);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1811 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2315 = frontier_phi_35_30_ladder;
        }
        float _2317 = isnan(_2020) ? _1848 : (isnan(_1848) ? _2020 : min(_1848, _2020));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1814) + _1803;
        float _2323 = (_2318 * _1817) + _1807;
        float _2324 = (_2318 * _1820) + _1811;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2325;
        float _2329 = _2325 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 > _2329) || ((_2323 < _2327) || ((_2322 < _2327) || (_2322 > _2329))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2469 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2324, cbModelParam._m0[9u].z, fma(_2323, cbModelParam._m0[9u].y, _2322 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2324, cbModelParam._m0[10u].z, fma(_2323, cbModelParam._m0[10u].y, _2322 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2324, cbModelParam._m0[11u].z, fma(_2323, cbModelParam._m0[11u].y, _2322 * cbModelParam._m0[11u].x))), _1755);
            frontier_phi_13_35_ladder = _2469.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2469.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2469.x * cbModelParam._m0[1u].y;
        }
        _1836 = frontier_phi_13_35_ladder_2;
        _1838 = frontier_phi_13_35_ladder_1;
        _1840 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1824 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_944, _945, _946), _1755);
        _1836 = _1824.x * cbModelParam._m0[1u].y;
        _1838 = _1824.y * cbModelParam._m0[1u].y;
        _1840 = _1824.z * cbModelParam._m0[1u].y;
    }
    float _1844 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _774);
    float _1845 = isnan(_1844) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1844 : min(cbModelParam._m0[25u].w, _1844));
    float _1935;
    float _1937;
    float _1939;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1899 = fma(_1008, cbModelParam._m0[21u].z, fma(_1004, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1000)) + cbModelParam._m0[21u].w;
        float _1903 = fma(_1008, cbModelParam._m0[22u].z, fma(_1004, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1000)) + cbModelParam._m0[22u].w;
        float _1907 = fma(_1008, cbModelParam._m0[23u].z, fma(_1004, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1000)) + cbModelParam._m0[23u].w;
        float _1910 = fma(_946, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _944));
        float _1913 = fma(_946, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _944));
        float _1916 = fma(_946, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _944));
        float _2025;
        if (_1910 > 0.0)
        {
            _2025 = abs((1.0 - _1899) / _1910);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1899 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2025 = frontier_phi_25_21_ladder;
        }
        float _2342;
        if (_1913 > 0.0)
        {
            _2342 = abs((1.0 - _1903) / _1913);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1903 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2342 = frontier_phi_37_32_ladder;
        }
        float _2680;
        if (_1916 > 0.0)
        {
            _2680 = abs((1.0 - _1907) / _1916);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1907 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2680 = frontier_phi_47_44_ladder;
        }
        float _2682 = isnan(_2342) ? _2025 : (isnan(_2025) ? _2342 : min(_2025, _2342));
        float _2683 = isnan(_2680) ? _2682 : (isnan(_2682) ? _2680 : min(_2682, _2680));
        float _2687 = (_2683 * _1910) + _1899;
        float _2688 = (_2683 * _1913) + _1903;
        float _2689 = (_2683 * _1916) + _1907;
        float _2690 = _2683 * 9.9999997473787516355514526367188e-05;
        float _2691 = (-1.0) - _2690;
        float _2693 = _2690 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2689 > _2693) || ((_2689 < _2691) || ((_2688 > _2693) || ((_2688 < _2691) || ((_2687 < _2691) || (_2687 > _2693))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2811 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2689, cbModelParam._m0[17u].z, fma(_2688, cbModelParam._m0[17u].y, _2687 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2689, cbModelParam._m0[18u].z, fma(_2688, cbModelParam._m0[18u].y, _2687 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2689, cbModelParam._m0[19u].z, fma(_2688, cbModelParam._m0[19u].y, _2687 * cbModelParam._m0[19u].x))), _1845);
            frontier_phi_22_47_ladder = _2811.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2811.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2811.x * cbModelParam._m0[1u].z;
        }
        _1935 = frontier_phi_22_47_ladder_2;
        _1937 = frontier_phi_22_47_ladder_1;
        _1939 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1919 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_944, _945, _946), _1845);
        _1935 = _1919.x * cbModelParam._m0[1u].z;
        _1937 = _1919.y * cbModelParam._m0[1u].z;
        _1939 = _1919.z * cbModelParam._m0[1u].z;
    }
    float _1952 = (((_971 * _920) + _972) * _936) * ((cbModelParam._m0[1u].w * (_1935 - _1836)) + _1836);
    float _1954 = (((_971 * _922) + _972) * _936) * ((cbModelParam._m0[1u].w * (_1937 - _1838)) + _1838);
    float _1956 = (((_971 * _923) + _972) * _936) * ((cbModelParam._m0[1u].w * (_1939 - _1840)) + _1840);
    float _1959 = fma(_1956, cbSceneParam._m0[89u].z, fma(_1954, cbSceneParam._m0[89u].y, _1952 * cbSceneParam._m0[89u].x));
    float _1962 = fma(_1956, cbSceneParam._m0[90u].z, fma(_1954, cbSceneParam._m0[90u].y, _1952 * cbSceneParam._m0[90u].x));
    float _1965 = fma(_1956, cbSceneParam._m0[91u].z, fma(_1954, cbSceneParam._m0[91u].y, _1952 * cbSceneParam._m0[91u].x));
    float _1999 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2003 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2007 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2011 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2012 = _1999 / _2011;
    float _2013 = _2003 / _2011;
    float _2014 = _2007 / _2011;
    float _2161;
    float _2162;
    float _2163;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2041 = ((uint(_2014 > cbSceneParam._m0[59u].y) + uint(_2014 > cbSceneParam._m0[59u].x)) + uint(_2014 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2042 = _2041 + 43u;
        uint _2050 = _2041 + 44u;
        uint _2058 = _2041 + 45u;
        uint _2066 = _2041 + 46u;
        float _2077 = fma(_2011, cbSceneParam._m0[_2042].w, fma(_2007, cbSceneParam._m0[_2042].z, fma(_2003, cbSceneParam._m0[_2042].y, _1999 * cbSceneParam._m0[_2042].x)));
        float _2081 = fma(_2011, cbSceneParam._m0[_2050].w, fma(_2007, cbSceneParam._m0[_2050].z, fma(_2003, cbSceneParam._m0[_2050].y, _1999 * cbSceneParam._m0[_2050].x)));
        float _2089 = fma(_2011, cbSceneParam._m0[_2066].w, fma(_2007, cbSceneParam._m0[_2066].z, fma(_2003, cbSceneParam._m0[_2066].y, _1999 * cbSceneParam._m0[_2066].x)));
        float _2094 = cbSceneParam._m0[33u].z * _2089;
        float _2096 = cbSceneParam._m0[33u].w * _2089;
        float _2099 = fma(_2011, cbSceneParam._m0[_2058].w, fma(_2007, cbSceneParam._m0[_2058].z, fma(_2003, cbSceneParam._m0[_2058].y, _1999 * cbSceneParam._m0[_2058].x))) / _2089;
        float _2147 = (cbSceneParam._m0[33u].x - sqrt(((_2013 * _2013) + (_2012 * _2012)) + (_2014 * _2014))) * cbSceneParam._m0[33u].y;
        float _4465 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2154 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2094 + _2077) / _2089, (_2096 + _2081) / _2089), _2099), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2096 + _2077) / _2089, (_2081 - _2094) / _2089), _2099), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2077 - _2094) / _2089, (_2081 - _2096) / _2089), _2099), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2077 - _2096) / _2089, (_2094 + _2081) / _2089), _2099), 0.0)).x), vec4(0.25)));
        _2161 = 1.0 - (_2154 * cbSceneParam._m0[34u].x);
        _2162 = 1.0 - (_2154 * cbSceneParam._m0[34u].y);
        _2163 = 1.0 - (_2154 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2161 = 1.0;
        _2162 = 1.0;
        _2163 = 1.0;
    }
    float _2227;
    float _2229;
    float _2231;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2215 = fma(_2011, cbSceneParam._m0[63u].w, fma(_2007, cbSceneParam._m0[63u].z, fma(_2003, cbSceneParam._m0[63u].y, _1999 * cbSceneParam._m0[63u].x)));
        float _2216 = fma(_2011, cbSceneParam._m0[60u].w, fma(_2007, cbSceneParam._m0[60u].z, fma(_2003, cbSceneParam._m0[60u].y, _1999 * cbSceneParam._m0[60u].x))) / _2215;
        float _2217 = fma(_2011, cbSceneParam._m0[61u].w, fma(_2007, cbSceneParam._m0[61u].z, fma(_2003, cbSceneParam._m0[61u].y, _1999 * cbSceneParam._m0[61u].x))) / _2215;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2216 >= cbSceneParam._m0[64u].x) && (_2217 >= cbSceneParam._m0[64u].y)) && (_2216 <= cbSceneParam._m0[64u].z)) && (_2217 <= cbSceneParam._m0[64u].w))
        {
            float _2355 = fma(_2011, cbSceneParam._m0[62u].w, fma(_2007, cbSceneParam._m0[62u].z, fma(_2003, cbSceneParam._m0[62u].y, _1999 * cbSceneParam._m0[62u].x))) / _2215;
            float _2359 = isnan(cbSceneParam._m0[41u].w) ? _2355 : (isnan(_2355) ? cbSceneParam._m0[41u].w : max(_2355, cbSceneParam._m0[41u].w));
            float _2402 = (cbSceneParam._m0[33u].x - sqrt(((_2013 * _2013) + (_2012 * _2012)) + (_2014 * _2014))) * cbSceneParam._m0[33u].y;
            float _4481 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
            float _2409 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2216, cbSceneParam._m0[33u].w + _2217), _2359), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2216, _2217 - cbSceneParam._m0[33u].z), _2359), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2216 - cbSceneParam._m0[33u].z, _2217 - cbSceneParam._m0[33u].w), _2359), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2216 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2217), _2359), 0.0)).x), vec4(0.25)));
            float _2413 = 1.0 - (_2409 * cbSceneParam._m0[34u].x);
            float _2414 = 1.0 - (_2409 * cbSceneParam._m0[34u].y);
            float _2415 = 1.0 - (_2409 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2415) ? _2163 : (isnan(_2163) ? _2415 : min(_2163, _2415));
            frontier_phi_34_33_ladder_1 = isnan(_2414) ? _2162 : (isnan(_2162) ? _2414 : min(_2162, _2414));
            frontier_phi_34_33_ladder_2 = isnan(_2413) ? _2161 : (isnan(_2161) ? _2413 : min(_2161, _2413));
        }
        else
        {
            frontier_phi_34_33_ladder = _2163;
            frontier_phi_34_33_ladder_1 = _2162;
            frontier_phi_34_33_ladder_2 = _2161;
        }
        _2227 = frontier_phi_34_33_ladder_2;
        _2229 = frontier_phi_34_33_ladder_1;
        _2231 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2227 = _2161;
        _2229 = _2162;
        _2231 = _2163;
    }
    uvec4 _2236 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2238 = _2236.x * 14u;
    uint _2239 = _2238 + 13u;
    float _2246 = _936 + (-1.0);
    float _2251 = (cbLight._m0[_2239].x * _2246) + 1.0;
    float _2252 = (cbLight._m0[_2239].y * _2246) + 1.0;
    float _2253 = (cbLight._m0[_2239].z * _2246) + 1.0;
    float _2254 = (cbLight._m0[_2239].w * _2246) + 1.0;
    uint _2255 = _2238 + 5u;
    float _2261 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
    uint _2265 = _2238 + 4u;
    float _2274 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
    uint _2278 = _2238 | 1u;
    float _2289 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_771, _772, _773));
    float _2292 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_771, _772, _773));
    float _4517 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _4528 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2297 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * 0.3183098733425140380859375;
    float _2299 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * 0.3183098733425140380859375;
    float _2306 = ((cbLight._m0[_2255].x * _2261) * _2299) + (((cbLight._m0[_2265].x * _2227) * _2274) * _2297);
    float _2307 = ((_2261 * cbLight._m0[_2255].y) * _2299) + (((cbLight._m0[_2265].y * _2229) * _2274) * _2297);
    float _2308 = ((_2261 * cbLight._m0[_2255].z) * _2299) + (((cbLight._m0[_2265].z * _2231) * _2274) * _2297);
    uvec4 _2312 = floatBitsToUint(cbLight._m0[_2238 + 12u]);
    bool _2314 = _2312.x == 0u;
    float _2416;
    float _2418;
    float _2420;
    if (_2314)
    {
        _2416 = _2306;
        _2418 = _2307;
        _2420 = _2308;
    }
    else
    {
        uint _2424 = _2238 + 6u;
        float _2440 = (dot(vec3(cbLight._m0[_2238 + 2u].xyz), vec3(_771, _772, _773)) * 0.5) + 0.5;
        float _2441 = _2440 * _2440;
        float _4539 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2442 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2443 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2416 = (((cbLight._m0[_2424].x * 0.3183098733425140380859375) * _2442) * _2443) + _2306;
        _2418 = (((cbLight._m0[_2424].y * 0.3183098733425140380859375) * _2442) * _2443) + _2307;
        _2420 = (((cbLight._m0[_2424].z * 0.3183098733425140380859375) * _2442) * _2443) + _2308;
    }
    bool _2423 = _2312.y == 0u;
    float _2478;
    float _2480;
    float _2482;
    if (_2423)
    {
        _2478 = _2416;
        _2480 = _2418;
        _2482 = _2420;
    }
    else
    {
        uint _2651 = _2238 + 7u;
        float _2667 = (dot(vec3(cbLight._m0[_2238 + 3u].xyz), vec3(_771, _772, _773)) * 0.5) + 0.5;
        float _2668 = _2667 * _2667;
        float _4555 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2669 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2670 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2478 = (((cbLight._m0[_2651].x * 0.3183098733425140380859375) * _2669) * _2670) + _2416;
        _2480 = (((cbLight._m0[_2651].y * 0.3183098733425140380859375) * _2669) * _2670) + _2418;
        _2482 = (((cbLight._m0[_2651].z * 0.3183098733425140380859375) * _2669) * _2670) + _2420;
    }
    uint _2485 = _2238 + 8u;
    float _2498 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _774) * 0.949999988079071044921875);
    float _2499 = _2498 * _2498;
    float _2500 = cbLight._m0[_2238].x + _850;
    float _2501 = cbLight._m0[_2238].y + _851;
    float _2502 = cbLight._m0[_2238].z + _852;
    float _2506 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
    float _2507 = _2506 * _2500;
    float _2508 = _2506 * _2501;
    float _2509 = _2506 * _2502;
    float _2510 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2238].xyz));
    float _4571 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2513 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _4582 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _2514 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2515 = dot(vec3(_771, _772, _773), vec3(_2507, _2508, _2509));
    float _4593 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2519 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2507, _2508, _2509));
    float _4604 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2523 = _2499 * _2499;
    float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
    float _2535 = exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0);
    float _2536 = 0.959999978542327880859375 - _917;
    float _2538 = 0.959999978542327880859375 - _918;
    float _2539 = 0.959999978542327880859375 - _919;
    float _2546 = 1.0 - _2499;
    float _2557 = (0.5 / (((_2514 * ((_2513 * _2546) + _2499)) + 9.9999999392252902907785028219223e-09) + (((_2514 * _2546) + _2499) * _2513))) * _2513;
    float _4615 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2559 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
    uint _2573 = _2238 + 9u;
    float _2584 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _774) * 0.949999988079071044921875);
    float _2585 = _2584 * _2584;
    float _2586 = cbLight._m0[_2278].x + _850;
    float _2587 = cbLight._m0[_2278].y + _851;
    float _2588 = cbLight._m0[_2278].z + _852;
    float _2592 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
    float _2593 = _2592 * _2586;
    float _2594 = _2592 * _2587;
    float _2595 = _2592 * _2588;
    float _2596 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2278].xyz));
    float _4626 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2599 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2600 = dot(vec3(_771, _772, _773), vec3(_2593, _2594, _2595));
    float _4637 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2603 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2604 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2593, _2594, _2595));
    float _4648 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2608 = _2585 * _2585;
    float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
    float _2619 = exp2(log2(1.0 - (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) * 5.0);
    float _2626 = 1.0 - _2585;
    float _2636 = (0.5 / (((_2514 * ((_2599 * _2626) + _2585)) + 9.9999999392252902907785028219223e-09) + (((_2514 * _2626) + _2585) * _2599))) * _2599;
    float _4659 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2638 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
    float _2648 = (((((_2619 * _2536) + _920) * cbLight._m0[_2573].x) * _2638) * _2261) + ((((cbLight._m0[_2485].x * _2227) * ((_2535 * _2536) + _920)) * _2559) * _2274);
    float _2649 = (((((_2619 * _2538) + _922) * cbLight._m0[_2573].y) * _2638) * _2261) + ((((cbLight._m0[_2485].y * _2229) * ((_2535 * _2538) + _922)) * _2559) * _2274);
    float _2650 = (((((_2619 * _2539) + _923) * cbLight._m0[_2573].z) * _2638) * _2261) + ((((cbLight._m0[_2485].z * _2231) * ((_2535 * _2539) + _923)) * _2559) * _2274);
    float _2706;
    float _2708;
    float _2710;
    if (_2314)
    {
        _2706 = _2648;
        _2708 = _2649;
        _2710 = _2650;
    }
    else
    {
        uint _2712 = _2238 + 2u;
        uint _2716 = _2238 + 10u;
        float _2730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2712].w)) * _774) * 0.949999988079071044921875);
        float _2731 = _2730 * _2730;
        float _2732 = cbLight._m0[_2712].x + _850;
        float _2733 = cbLight._m0[_2712].y + _851;
        float _2734 = cbLight._m0[_2712].z + _852;
        float _2738 = inversesqrt(dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734)));
        float _2739 = _2738 * _2732;
        float _2740 = _2738 * _2733;
        float _2741 = _2738 * _2734;
        float _2742 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2712].xyz));
        float _4670 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2745 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2746 = dot(vec3(_771, _772, _773), vec3(_2739, _2740, _2741));
        float _4681 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2749 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2750 = dot(vec3(cbLight._m0[_2712].xyz), vec3(_2739, _2740, _2741));
        float _4692 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2754 = _2731 * _2731;
        float _2758 = ((_2749 * _2749) * (_2754 + (-1.0))) + 1.0;
        float _2765 = exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0);
        float _2772 = 1.0 - _2731;
        float _2782 = (0.5 / (((_2514 * ((_2745 * _2772) + _2731)) + 9.9999999392252902907785028219223e-09) + (((_2514 * _2772) + _2731) * _2745))) * _2745;
        float _4703 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2784 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2754 / ((_2758 * _2758) * 3.141590118408203125));
        float _2785 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2706 = (((((_2765 * _2536) + _920) * cbLight._m0[_2716].x) * _2784) * _2785) + _2648;
        _2708 = (((((_2765 * _2538) + _922) * cbLight._m0[_2716].y) * _2784) * _2785) + _2649;
        _2710 = (((((_2765 * _2539) + _923) * cbLight._m0[_2716].z) * _2784) * _2785) + _2650;
    }
    float _2816;
    float _2818;
    float _2820;
    if (_2423)
    {
        _2816 = _2706;
        _2818 = _2708;
        _2820 = _2710;
    }
    else
    {
        uint _2827 = _2238 + 3u;
        uint _2831 = _2238 + 11u;
        float _2845 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2827].w)) * _774) * 0.949999988079071044921875);
        float _2846 = _2845 * _2845;
        float _2847 = cbLight._m0[_2827].x + _850;
        float _2848 = cbLight._m0[_2827].y + _851;
        float _2849 = cbLight._m0[_2827].z + _852;
        float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
        float _2854 = _2853 * _2847;
        float _2855 = _2853 * _2848;
        float _2856 = _2853 * _2849;
        float _2857 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2827].xyz));
        float _4719 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2860 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2861 = dot(vec3(_771, _772, _773), vec3(_2854, _2855, _2856));
        float _4730 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2864 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2865 = dot(vec3(cbLight._m0[_2827].xyz), vec3(_2854, _2855, _2856));
        float _4741 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2869 = _2846 * _2846;
        float _2873 = ((_2864 * _2864) * (_2869 + (-1.0))) + 1.0;
        float _2880 = exp2(log2(1.0 - (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) * 5.0);
        float _2887 = 1.0 - _2846;
        float _2897 = (0.5 / (((_2514 * ((_2860 * _2887) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2514 * _2887) + _2846) * _2860))) * _2860;
        float _4752 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2899 = (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2869 / ((_2873 * _2873) * 3.141590118408203125));
        float _2900 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2816 = (((((_2880 * _2536) + _920) * cbLight._m0[_2831].x) * _2899) * _2900) + _2706;
        _2818 = (((((_2880 * _2538) + _922) * cbLight._m0[_2831].y) * _2899) * _2900) + _2708;
        _2820 = (((((_2880 * _2539) + _923) * cbLight._m0[_2831].z) * _2899) * _2900) + _2710;
    }
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    if (_2236.y == 0u)
    {
        uvec4 _2921 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2922 = _2921.x;
        uint _2933 = uint((float(_2921.y) * floor(float(uint(cbSceneParam._m0[85u].y * _859) / _2922))) + floor(float(uint(cbSceneParam._m0[85u].x * _858) / _2922)));
        float _2943 = (log2(_2014 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2944 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        uint _2947 = uint(isnan(14.0) ? _2944 : (isnan(_2944) ? 14.0 : min(_2944, 14.0)));
        uvec4 _2952 = texelFetch(g_lightClusterGridBuffer, int(((_2947 << 2u) + (_2933 << 6u)) >> 2u));
        uint _2953 = _2952.x;
        uint _2954 = _2921.z;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        if (((((1u << ((_2954 >> 4u) & 15u)) + 4294967295u) & _2953) == 0u) || ((_2954 & 240u) == 0u))
        {
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
        }
        else
        {
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3042;
            float _3044;
            float _3178 = 0.0;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            float _3182 = 0.0;
            float _3183 = 0.0;
            uint _3184 = 0u;
            uint _3193;
            bool _3194;
            for (;;)
            {
                _3193 = texelFetch(g_lightClassification, int((((_2947 << 5u) + (_2933 << 9u)) + (_3184 << 2u)) >> 2u)).x;
                _3194 = _3193 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3194)
                {
                    frontier_phi_66_pred = _3183;
                    frontier_phi_66_pred_1 = _3182;
                    frontier_phi_66_pred_2 = _3181;
                    frontier_phi_66_pred_3 = _3180;
                    frontier_phi_66_pred_4 = _3179;
                    frontier_phi_66_pred_5 = _3178;
                }
                else
                {
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    uint _3308;
                    _3302 = _3178;
                    _3303 = _3179;
                    _3304 = _3180;
                    _3305 = _3181;
                    _3306 = _3182;
                    _3307 = _3183;
                    _3308 = _3193;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    for (;;)
                    {
                        uint _3312 = uint(findLSB(_3308)) + (_3184 << 5u);
                        uint _3309 = (_3308 + 4294967295u) & _3308;
                        uint _3314 = _3312 * 48u;
                        vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 3u)).x));
                        uint _3334 = (_3312 * 48u) + 4u;
                        vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 3u)).x));
                        uint _3353 = (_3312 * 48u) + 8u;
                        vec3 _3364 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3353)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 2u)).x));
                        float _3368 = _3328.x - _2012;
                        float _3369 = _3328.y - _2013;
                        float _3370 = _3328.z - _2014;
                        float _3371 = dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370));
                        float _3374 = inversesqrt(_3371);
                        float _3375 = _3374 * _3368;
                        float _3376 = _3374 * _3369;
                        float _3377 = _3374 * _3370;
                        float _3378 = dot(vec3(_877, _880, _883), vec3(_3375, _3376, _3377));
                        float _3383 = 1.0 - (_3371 * _3328.w);
                        float _4778 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3384 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3385 = sqrt(_3371) * _3347.w;
                        float _3388 = 1.39999997615814208984375 / (_3385 + 1.39999997615814208984375);
                        float _3389 = _3388 * _3388;
                        float _3392 = ((1.0 - _3389) * _3378) + _3389;
                        float _3395 = _3385 * _3385;
                        float _3399 = ((isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0))) * _3384) / ((_3395 * 0.699999988079071044921875) + 1.0);
                        float _3403 = (-0.0) - _2012;
                        float _3404 = (-0.0) - _2013;
                        float _3405 = (-0.0) - _2014;
                        float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                        float _3410 = _3409 * _3403;
                        float _3411 = _3409 * _3404;
                        float _3412 = _3409 * _3405;
                        float _3419 = exp2(log2(1.0 / ((_3395 * 3.5) + 5.0)) * 0.25);
                        float _3420 = 1.0 - _952;
                        float _3427 = sqrt(1.0 - ((1.0 - (_3420 * _3420)) * (1.0 - (_3419 * _3419))));
                        float _3428 = _3427 * _3427;
                        float _3429 = _3428 * _3428;
                        float _3430 = _3410 + _3375;
                        float _3431 = _3411 + _3376;
                        float _3432 = _3412 + _3377;
                        float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                        float _3440 = dot(vec3(_877, _880, _883), vec3(_3410, _3411, _3412));
                        float _4794 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3443 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3444 = dot(vec3(_877, _880, _883), vec3(_3436 * _3430, _3436 * _3431, _3436 * _3432));
                        float _4805 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3447 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3451 = ((_3447 * _3447) * (_3429 + (-1.0))) + 1.0;
                        float _3452 = _3388 * _3428;
                        float _3453 = _3452 * _3452;
                        float _3456 = ((1.0 - _3453) * _3378) + _3453;
                        float _4816 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3457 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3458 = 1.0 - _3428;
                        float _3468 = (0.5 / (((_3457 * ((_3443 * _3458) + _3428)) + 9.9999999392252902907785028219223e-09) + (((_3457 * _3458) + _3428) * _3443))) * _3457;
                        float _4827 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3479 = (((_3429 * 3.1415927410125732421875) * (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)))) / ((_3451 * _3451) * ((_3395 * 2.1991131305694580078125) + 3.141590118408203125))) * _3384;
                        _3237 = (_3399 * _3347.x) + _3305;
                        _3238 = (_3399 * _3347.y) + _3306;
                        _3239 = (_3399 * _3347.z) + _3307;
                        _3234 = (_3479 * _3364.x) + _3302;
                        _3235 = (_3479 * _3364.y) + _3303;
                        _3236 = (_3479 * _3364.z) + _3304;
                        if (_3309 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3302 = _3234;
                            _3303 = _3235;
                            _3304 = _3236;
                            _3305 = _3237;
                            _3306 = _3238;
                            _3307 = _3239;
                            _3308 = _3309;
                        }
                    }
                    frontier_phi_66_pred = _3239;
                    frontier_phi_66_pred_1 = _3238;
                    frontier_phi_66_pred_2 = _3237;
                    frontier_phi_66_pred_3 = _3236;
                    frontier_phi_66_pred_4 = _3235;
                    frontier_phi_66_pred_5 = _3234;
                }
                _3044 = frontier_phi_66_pred;
                _3042 = frontier_phi_66_pred_1;
                _3040 = frontier_phi_66_pred_2;
                _3038 = frontier_phi_66_pred_3;
                _3036 = frontier_phi_66_pred_4;
                _3034 = frontier_phi_66_pred_5;
                uint _3185 = _3184 + 1u;
                if (_3185 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3178 = _3034;
                    _3179 = _3036;
                    _3180 = _3038;
                    _3181 = _3040;
                    _3182 = _3042;
                    _3183 = _3044;
                    _3184 = _3185;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
        }
        uvec4 _3047 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3048 = _3047.z;
        uint _3050 = (_3048 >> 8u) & 15u;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        if (((4294967295u << _3050) & _2953) == 0u)
        {
            _3146 = _3033;
            _3148 = _3035;
            _3150 = _3037;
            _3152 = _3039;
            _3154 = _3041;
            _3156 = _3043;
        }
        else
        {
            float _3171 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
            float _3172 = _3171 * _2012;
            float _3173 = _3171 * _2013;
            float _3174 = _3171 * _2014;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3050 < ((_3048 >> 12u) & 15u))
            {
                float _3147;
                float _3149;
                float _3151;
                float _3153;
                float _3155;
                float _3157;
                float _3285 = _3033;
                float _3286 = _3035;
                float _3287 = _3037;
                float _3288 = _3039;
                float _3289 = _3041;
                float _3290 = _3043;
                uint _3291 = _3050;
                uint _3300;
                bool _3301;
                for (;;)
                {
                    _3300 = texelFetch(g_lightClassification, int((((_2947 << 5u) + (_2933 << 9u)) + (_3291 << 2u)) >> 2u)).x;
                    _3301 = _3300 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3301)
                    {
                        frontier_phi_72_pred = _3290;
                        frontier_phi_72_pred_1 = _3289;
                        frontier_phi_72_pred_2 = _3288;
                        frontier_phi_72_pred_3 = _3287;
                        frontier_phi_72_pred_4 = _3286;
                        frontier_phi_72_pred_5 = _3285;
                    }
                    else
                    {
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3497 = _3285;
                        float _3498 = _3286;
                        float _3499 = _3287;
                        float _3500 = _3288;
                        float _3501 = _3289;
                        float _3502 = _3290;
                        uint _3503 = _3300;
                        uint _3504;
                        vec4 _3529;
                        float _3530;
                        vec4 _3545;
                        vec3 _3557;
                        vec4 _3572;
                        vec4 _3588;
                        float _3634;
                        bool _3635;
                        for (;;)
                        {
                            uint _3514 = ((_3291 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3503));
                            _3504 = (_3503 + 4294967295u) & _3503;
                            uint _3516 = _3514 * 40u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            _3530 = _3529.w;
                            uint _3532 = (_3514 * 40u) + 4u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3514 * 40u) + 8u;
                            _3557 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x));
                            uint _3559 = (_3514 * 40u) + 16u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3575 = (_3514 * 40u) + 20u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3590 = (_3514 * 40u) + 24u;
                            vec4 _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3609 = (_3514 * 40u) + 28u;
                            vec4 _3622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 3u)).x));
                            _3634 = fma(_2014, _3622.z, fma(_2013, _3622.y, _3622.x * _2012)) + _3622.w;
                            _3635 = !((fma(_2014, _3603.z, fma(_2013, _3603.y, _3603.x * _2012)) + _3603.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3635)
                            {
                                float _3662 = _3529.x - _2012;
                                float _3663 = _3529.y - _2013;
                                float _3664 = _3529.z - _2014;
                                float _3665 = dot(vec3(_3662, _3663, _3664), vec3(_3662, _3663, _3664));
                                float _3668 = inversesqrt(_3665);
                                float _3669 = _3668 * _3662;
                                float _3670 = _3668 * _3663;
                                float _3671 = _3668 * _3664;
                                float _3675 = 1.0 - (_3665 / (_3530 * _3530));
                                float _4838 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3676 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3680 = sqrt(_3665) * _3545.w;
                                float _3682 = 1.39999997615814208984375 / (_3680 + 1.39999997615814208984375);
                                float _3683 = _3682 * _3682;
                                float _3686 = ((1.0 - _3683) * dot(vec3(_3669, _3670, _3671), vec3(_877, _880, _883))) + _3683;
                                float _3689 = _3680 * _3680;
                                float _3693 = (fma(_2014, _3572.z, fma(_2013, _3572.y, _3572.x * _2012)) + _3572.w) / _3634;
                                float _3694 = (fma(_2014, _3588.z, fma(_2013, _3588.y, _3588.x * _2012)) + _3588.w) / _3634;
                                float _3698 = 1.0 - dot(vec2(_3693, _3694), vec2(_3693, _3694));
                                float _4854 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3699 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3700 = _3699 * (((isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0))) * _3676) / ((_3689 * 0.699999988079071044921875) + 1.0));
                                float _3712 = exp2(log2(1.0 / ((_3689 * 3.5) + 5.0)) * 0.25);
                                float _3713 = 1.0 - _952;
                                float _3720 = sqrt(1.0 - ((1.0 - (_3713 * _3713)) * (1.0 - (_3712 * _3712))));
                                float _3721 = _3720 * _3720;
                                float _3722 = _3721 * _3721;
                                float _3723 = _3669 - _3172;
                                float _3724 = _3670 - _3173;
                                float _3725 = _3671 - _3174;
                                float _3729 = inversesqrt(dot(vec3(_3723, _3724, _3725), vec3(_3723, _3724, _3725)));
                                float _3733 = dot(vec3(_877, _880, _883), vec3((-0.0) - _3172, (-0.0) - _3173, (-0.0) - _3174));
                                float _4865 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3736 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3737 = dot(vec3(_877, _880, _883), vec3(_3729 * _3723, _3729 * _3724, _3729 * _3725));
                                float _4876 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3740 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3744 = ((_3740 * _3740) * (_3722 + (-1.0))) + 1.0;
                                float _3745 = _3682 * _3721;
                                float _3746 = _3745 * _3745;
                                float _3752 = ((1.0 - _3746) * dot(vec3(_877, _880, _883), vec3(_3669, _3670, _3671))) + _3746;
                                float _4887 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3753 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3754 = 1.0 - _3721;
                                float _3764 = (0.5 / (((_3753 * ((_3736 * _3754) + _3721)) + 9.9999999392252902907785028219223e-09) + (((_3753 * _3754) + _3721) * _3736))) * _3753;
                                float _4898 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3774 = (_3699 * _3676) * (((_3722 * 3.1415927410125732421875) * (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) / ((_3744 * _3744) * ((_3689 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3700 * _3545.y;
                                frontier_phi_78_pred_1 = _3700 * _3545.x;
                                frontier_phi_78_pred_2 = _3774 * _3557.z;
                                frontier_phi_78_pred_3 = _3774 * _3557.y;
                                frontier_phi_78_pred_4 = _3774 * _3557.x;
                                frontier_phi_78_pred_5 = _3700 * _3545.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3782 = frontier_phi_78_pred;
                            _3781 = frontier_phi_78_pred_1;
                            _3780 = frontier_phi_78_pred_2;
                            _3779 = frontier_phi_78_pred_3;
                            _3778 = frontier_phi_78_pred_4;
                            _3783 = frontier_phi_78_pred_5;
                            _3487 = _3781 + _3500;
                            _3488 = _3782 + _3501;
                            _3489 = _3783 + _3502;
                            _3484 = _3778 + _3497;
                            _3485 = _3779 + _3498;
                            _3486 = _3780 + _3499;
                            if (_3504 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3504;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3489;
                        frontier_phi_72_pred_1 = _3488;
                        frontier_phi_72_pred_2 = _3487;
                        frontier_phi_72_pred_3 = _3486;
                        frontier_phi_72_pred_4 = _3485;
                        frontier_phi_72_pred_5 = _3484;
                    }
                    _3157 = frontier_phi_72_pred;
                    _3155 = frontier_phi_72_pred_1;
                    _3153 = frontier_phi_72_pred_2;
                    _3151 = frontier_phi_72_pred_3;
                    _3149 = frontier_phi_72_pred_4;
                    _3147 = frontier_phi_72_pred_5;
                    uint _3292 = _3291 + 1u;
                    if (_3292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3285 = _3147;
                        _3286 = _3149;
                        _3287 = _3151;
                        _3288 = _3153;
                        _3289 = _3155;
                        _3290 = _3157;
                        _3291 = _3292;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3157;
                frontier_phi_60_61_ladder_1 = _3155;
                frontier_phi_60_61_ladder_2 = _3151;
                frontier_phi_60_61_ladder_3 = _3149;
                frontier_phi_60_61_ladder_4 = _3147;
                frontier_phi_60_61_ladder_5 = _3153;
            }
            else
            {
                frontier_phi_60_61_ladder = _3043;
                frontier_phi_60_61_ladder_1 = _3041;
                frontier_phi_60_61_ladder_2 = _3037;
                frontier_phi_60_61_ladder_3 = _3035;
                frontier_phi_60_61_ladder_4 = _3033;
                frontier_phi_60_61_ladder_5 = _3039;
            }
            _3146 = frontier_phi_60_61_ladder_4;
            _3148 = frontier_phi_60_61_ladder_3;
            _3150 = frontier_phi_60_61_ladder_2;
            _3152 = frontier_phi_60_61_ladder_5;
            _3154 = frontier_phi_60_61_ladder_1;
            _3156 = frontier_phi_60_61_ladder;
        }
        float _3161 = isnan(1.0) ? _936 : (isnan(_936) ? 1.0 : min(_936, 1.0));
        _2966 = (_3161 * _3152) + _2478;
        _2968 = (_3161 * _3154) + _2480;
        _2970 = (_3161 * _3156) + _2482;
        _2972 = ((_3146 * _920) * _3161) + _2816;
        _2974 = ((_3148 * _922) * _3161) + _2818;
        _2976 = ((_3150 * _923) * _3161) + _2820;
    }
    else
    {
        _2966 = _2478;
        _2968 = _2480;
        _2970 = _2482;
        _2972 = _2816;
        _2974 = _2818;
        _2976 = _2820;
    }
    float _4914 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4925 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4936 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    uint _2996 = _255 + 6u;
    float _3004 = _858 / cbSceneParam._m0[86u].x;
    float _3005 = _859 / cbSceneParam._m0[86u].y;
    vec4 _3019 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3004, _3005, (log2((isnan(cbSceneParam._m0[77u].w) ? _793 : (isnan(_793) ? cbSceneParam._m0[77u].w : min(_793, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3021 = _3019.x;
    float _3022 = _3019.y;
    float _3023 = _3019.z;
    float _3024 = _3019.w;
    float _3096;
    float _3098;
    float _3100;
    float _3102;
    if (_793 > cbSceneParam._m0[78u].w)
    {
        float _3058 = isnan(_793) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _793 : min(cbSceneParam._m0[80u].w, _793));
        float _3059 = _3058 / _793;
        float _3070 = _3059 * _843;
        float _3071 = _844 * _3059;
        float _3072 = (-0.0) - _3071;
        float _3074 = _3059 * _845;
        float _3076 = (cbSceneParam._m0[77u].w * _3072) / _3058;
        float _3077 = _3076 + cbSceneParam._m0[79u].w;
        float _3078 = cbSceneParam._m0[79u].w - _3071;
        float _3084 = sqrt(((_3070 * _3070) + (_3071 * _3071)) + (_3074 * _3074));
        float _3087 = (1.0 - (cbSceneParam._m0[77u].w / _3058)) * _3084;
        float _3092 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3094 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3247;
        if (abs((_3072 - _3076) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3247 = ((((_3077 > 0.0) ? exp2(_3092 * _3077) : (2.0 - exp2(_3094 * _3077))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3087;
        }
        else
        {
            float _3207 = 1.0 / cbSceneParam._m0[80u].x;
            float _3208 = isnan(_3078) ? _3077 : (isnan(_3077) ? _3078 : max(_3077, _3078));
            float _3209 = isnan(_3078) ? _3077 : (isnan(_3077) ? _3078 : min(_3077, _3078));
            float _3218 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : min(_3208, 0.0));
            float _3219 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : min(_3209, 0.0));
            _3247 = ((abs(_3084 / _3072) * cbSceneParam._m0[80u].y) * ((((_3218 - _3219) * 2.0) - ((exp2(_3092 * (isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0)))) - exp2(_3092 * (isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0))))) * _3207)) - ((exp2(_3094 * _3218) - exp2(_3094 * _3219)) * _3207))) + (_3087 * cbSceneParam._m0[80u].z);
        }
        vec4 _3249 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3004, _3005, 1.0), 0.0);
        float _3258 = exp2((_3247 * (-1.44269502162933349609375)) * (1.0 - _3249.w));
        float _3259 = log2(_3258);
        float _3275 = log2(_3024);
        _3096 = (exp2(_3275 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3259 * cbSceneParam._m0[78u].x)) * _3249.x) / cbSceneParam._m0[78u].x)) + _3021;
        _3098 = (exp2(_3275 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3259 * cbSceneParam._m0[78u].y)) * _3249.y) / cbSceneParam._m0[78u].y)) + _3022;
        _3100 = (exp2(_3275 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3259 * cbSceneParam._m0[78u].z)) * _3249.z) / cbSceneParam._m0[78u].z)) + _3023;
        _3102 = _3258 * _3024;
    }
    else
    {
        _3096 = _3021;
        _3098 = _3022;
        _3100 = _3023;
        _3102 = _3024;
    }
    float _3114 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3115 = _3114 == 3.0;
    float _3116 = log2(_3102);
    float _3123 = exp2(_3116 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2966 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _936))) + ((_2972 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1744)) * cbPerFrame._m0[3u].x));
    float _3124 = exp2(_3116 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2968 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _936))) + ((_2974 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1744)) * cbPerFrame._m0[3u].x));
    float _3125 = exp2(_3116 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2970 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _936))) + ((_2976 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1744)) * cbPerFrame._m0[3u].x));
    float _3134 = (_3114 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3134 * (_3115 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3096)));
    SV_Target.y = _3134 * (_3115 ? _3124 : (_3124 + (cbSceneParam._m0[72u].w * _3098)));
    SV_Target.z = _3134 * (_3115 ? _3125 : (_3125 + (cbSceneParam._m0[72u].w * _3100)));
    SV_Target.w = cbInstanceData._m0[_2996].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2996].w;
}


