#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1545;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3870 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3881 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3892 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _428 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _430 = _428.x;
    float _442 = dot(vec4(_430, _428.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _459 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_430 - _442) * cbMtdParam._m0[23u].w) + _442) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3903 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _467 = (_460 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _468 = (_460 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _469 = (_460 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _486 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _506 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _508 = _506.x;
    float _518 = dot(vec4(_508, _506.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _532 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_508 - _518) * cbMtdParam._m0[23u].w) + _518) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3914 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _540 = (_533 * ((_486.x * cbMtdParam._m0[13u].x) - _467)) + _467;
    float _541 = (_533 * ((_486.y * cbMtdParam._m0[13u].y) - _468)) + _468;
    float _542 = (_533 * ((_486.z * cbMtdParam._m0[13u].z) - _469)) + _469;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _310) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _311) + cbTextureTilingScale._m0[24u].w));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _580 = _578.x;
    float _590 = dot(vec4(_580, _578.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _602 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _393.z) * 2.0) - ((((_580 - _590) * cbMtdParam._m0[23u].w) + _590) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3925 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _610 = (_603 * ((_561.x * cbMtdParam._m0[14u].x) - _540)) + _540;
    float _611 = (_603 * ((_561.y * cbMtdParam._m0[14u].y) - _541)) + _541;
    float _612 = (_603 * ((_561.z * cbMtdParam._m0[14u].z) - _542)) + _542;
    float _616 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _610;
    float _619 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _611;
    float _622 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _612;
    float _629 = ((_610 - _616) * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) + _616;
    float _630 = ((_611 - _619) * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) + _619;
    float _631 = ((_612 - _622) * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) + _622;
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _685 = _683.x;
    float _686 = _683.y;
    float _687 = _683.z;
    float _694 = ((_666.x - _685) * _460) + _685;
    float _695 = ((_666.y - _686) * _460) + _686;
    float _696 = ((_666.z - _687) * _460) + _687;
    vec4 _708 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _719 = ((_708.x - _694) * _533) + _694;
    float _720 = ((_708.y - _695) * _533) + _695;
    float _721 = ((_708.z - _696) * _533) + _696;
    vec4 _733 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _310) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _311) + cbTextureTilingScale._m0[23u].w));
    float _746 = ((_733.z - _721) * _603) + _721;
    float _749 = ((((_733.x - _719) * _603) + _719) * 2.0) + (-1.0);
    float _750 = ((((_733.y - _720) * _603) + _720) * 2.0) + (-1.0);
    float _751 = dot(vec2(_749, _750), vec2(_749, _750));
    float _3936 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _756 = sqrt(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))));
    vec4 _776 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _788 = (_749 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_643.x * 2.0) + (-1.0)))) + (((_776.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _789 = (_750 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_643.y * 2.0) + (-1.0)))) + (((_776.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _803 = _801.x;
    float _804 = 1.0 - _803;
    float _832 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_803 - _804) * cbMtdParam._m0[24u].w) + _804) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3947 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _833 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _841 = ((((cbMtdParam._m0[10u].x - _629) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _833) + _629;
    float _842 = ((((cbMtdParam._m0[10u].y - _630) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _833) + _630;
    float _843 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _631)) * _833) + _631;
    vec4 _869 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _871 = _869.x;
    float _889 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _871) * _460) + _871;
    float _907 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _889) * _533) + _889;
    float _924 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _310) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _311) + cbTextureTilingScale._m0[10u].w)).x - _907) * _603) + _907;
    float _928 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _924) * cbMtdParam._m0[19u].z) + _924;
    float _930 = _928 - (_928 * _833);
    float _935 = (((_643.z - _746) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _746;
    float _939 = ((_776.z - _935) * cbMtdParam._m0[19u].w) + _935;
    float _943 = ((cbMtdParam._m0[23u].x - _939) * _833) + _939;
    vec4 _964 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _970 = (_964.x * 2.0) + (-1.0);
    float _971 = (_964.y * 2.0) + (-1.0);
    float _972 = dot(vec2(_970, _971), vec2(_970, _971));
    float _3958 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _988 = (_833 * (((cbMtdParam._m0[22u].z * _788) - _788) + _970)) + _788;
    float _989 = (_833 * (((cbMtdParam._m0[22u].z * _789) - _789) + _971)) + _789;
    float _990 = (_833 * (sqrt(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) - _756)) + _756;
    float _992 = cbMtdParam._m0[22u].x + _776.w;
    float _995 = fma(_990, _259 * NORMAL.x, fma(_989, _266 * TANGENT.x, (_252 * _244) * _988));
    float _998 = fma(_990, _259 * NORMAL.y, fma(_989, _266 * TANGENT.y, (_252 * _245) * _988));
    float _1001 = fma(_990, _259 * NORMAL.z, fma(_989, _266 * TANGENT.z, (_252 * _246) * _988));
    float _1005 = inversesqrt(dot(vec3(_995, _998, _1001), vec3(_995, _998, _1001)));
    float _1006 = _1005 * _995;
    float _1007 = _1005 * _998;
    float _1008 = _1005 * _1001;
    float _3969 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _1009 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _3991 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4002 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4013 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4024 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _1014 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1028 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1078 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1068);
    float _1079 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1068);
    float _1080 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1068);
    float _1084 = inversesqrt(dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080)));
    float _1085 = _1078 * _1084;
    float _1086 = _1079 * _1084;
    float _1087 = _1080 * _1084;
    float _1093 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1094 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1112 = fma(_1008, cbSceneParam._m0[5u].z, fma(_1007, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1006));
    float _1115 = fma(_1008, cbSceneParam._m0[6u].z, fma(_1007, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1006));
    float _1118 = fma(_1008, cbSceneParam._m0[7u].z, fma(_1007, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1006));
    uint _1132 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1138 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbInstanceData._m0[_1132].x;
    float _1139 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_1132].y;
    float _1140 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_1132].z;
    float _4035 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _1141 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1142 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1143 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _1144 = 1.0 - _1014;
    float _1145 = _1141 * _1144;
    float _1146 = _1142 * _1144;
    float _1147 = _1143 * _1144;
    float _1152 = (_1141 + (-0.039999999105930328369140625)) * _1014;
    float _1153 = (_1142 + (-0.039999999105930328369140625)) * _1014;
    float _1154 = (_1143 + (-0.039999999105930328369140625)) * _1014;
    float _1155 = _1152 + 0.039999999105930328369140625;
    float _1157 = _1153 + 0.039999999105930328369140625;
    float _1158 = _1154 + 0.039999999105930328369140625;
    vec4 _1167 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1093, cbSceneParam._m0[86u].y * _1094));
    float _1171 = ((isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * TEXCOORD_5.w) * _1167.x;
    float _1172 = dot(vec3(_1006, _1007, _1008), vec3(_1085, _1086, _1087));
    float _1175 = _1172 * 2.0;
    float _1179 = (_1175 * _1006) - _1085;
    float _1180 = (_1175 * _1007) - _1086;
    float _1181 = (_1175 * _1008) - _1087;
    float _1185 = abs(dot(vec3(_1085, _1086, _1087), vec3(_1006, _1007, _1008)));
    float _4068 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1187 = sqrt(_1009);
    float _1200 = exp2((_1187 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1187 * 3.0));
    float _1206 = (1.0 - _1200) * ((_1187 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1207 = _1200 * _1187;
    float _1235 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1239 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1243 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1544;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1269 = fma(_1243, cbModelParam._m0[26u].z, fma(_1239, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1235));
        float _1273 = fma(_1243, cbModelParam._m0[27u].z, fma(_1239, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1235));
        float _1277 = fma(_1243, cbModelParam._m0[28u].z, fma(_1239, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1235));
        float _1302 = _1235 + _1006;
        float _1303 = _1239 + _1007;
        float _1304 = _1243 + _1008;
        float _1314 = fma(_1304, cbModelParam._m0[26u].z, fma(_1303, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1302)) - _1269;
        float _1315 = fma(_1304, cbModelParam._m0[27u].z, fma(_1303, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1302)) - _1273;
        float _1316 = fma(_1304, cbModelParam._m0[28u].z, fma(_1303, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1302)) - _1277;
        float _1320 = inversesqrt(dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316)));
        float _1333 = ((_1320 * _1314) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1269 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1320 * _1315) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1273 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1320 * _1316) / cbModelParam._m0[34u].z) + ((((((_1277 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        float _1372 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1338.x + (-0.5));
        float _1374 = _1372 * (_1338.y + (-0.5));
        float _1375 = _1372 * (_1338.z + (-0.5));
        float _1382 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1345.x + (-0.5));
        float _1384 = _1382 * (_1345.y + (-0.5));
        float _1385 = _1382 * (_1345.z + (-0.5));
        float _1392 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1352.x + (-0.5));
        float _1394 = _1392 * (_1352.y + (-0.5));
        float _1395 = _1392 * (_1352.z + (-0.5));
        float _1402 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1359.x + (-0.5));
        float _1404 = _1402 * (_1359.y + (-0.5));
        float _1405 = _1402 * (_1359.z + (-0.5));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = _1373 * 0.5;
        float _1410 = _1383 * 0.5;
        float _1411 = _1393 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1426 = (dot(vec3(_1006, _1007, _1008), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1436 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4116 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1438 + 1.0))) + _1443) * _1406;
        float _1453 = _1374 * 0.5;
        float _1454 = _1384 * 0.5;
        float _1455 = _1394 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_1006, _1007, _1008), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4149 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1480 + 1.0))) + _1485) * _1407;
        float _1495 = _1375 * 0.5;
        float _1496 = _1385 * 0.5;
        float _1497 = _1395 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_1006, _1007, _1008), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4182 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1522 + 1.0))) + _1527) * _1408;
        _1544 = _1375;
        _1546 = _1374;
        _1547 = _1373;
        _1548 = _1385;
        _1549 = _1384;
        _1550 = _1383;
        _1551 = _1395;
        _1552 = _1394;
        _1553 = _1393;
        _1554 = _1408;
        _1555 = _1407;
        _1556 = _1406;
        _1557 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1558 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
        _1559 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
    }
    else
    {
        _1544 = _1545;
        _1546 = _1545;
        _1547 = _1545;
        _1548 = _1545;
        _1549 = _1545;
        _1550 = _1545;
        _1551 = _1545;
        _1552 = _1545;
        _1553 = _1545;
        _1554 = _1545;
        _1555 = _1545;
        _1556 = _1545;
        _1557 = 0.0;
        _1558 = 0.0;
        _1559 = 0.0;
    }
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1582 = fma(_1243, cbModelParam._m0[30u].z, fma(_1239, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1235));
        float _1586 = fma(_1243, cbModelParam._m0[31u].z, fma(_1239, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1235));
        float _1590 = fma(_1243, cbModelParam._m0[32u].z, fma(_1239, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1235));
        float _1613 = _1235 + _1006;
        float _1614 = _1239 + _1007;
        float _1615 = _1243 + _1008;
        float _1625 = fma(_1615, cbModelParam._m0[30u].z, fma(_1614, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1613)) - _1582;
        float _1626 = fma(_1615, cbModelParam._m0[31u].z, fma(_1614, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1613)) - _1586;
        float _1627 = fma(_1615, cbModelParam._m0[32u].z, fma(_1614, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1613)) - _1590;
        float _1631 = inversesqrt(dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627)));
        float _1644 = ((_1631 * _1625) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1582 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1645 = ((_1631 * _1626) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1586 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1646 = ((_1631 * _1627) / cbModelParam._m0[35u].z) + ((((((_1590 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        vec4 _1662 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        vec4 _1669 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        float _1681 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1648.x + (-0.5));
        float _1683 = _1681 * (_1648.y + (-0.5));
        float _1684 = _1681 * (_1648.z + (-0.5));
        float _1691 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1655.x + (-0.5));
        float _1693 = _1691 * (_1655.y + (-0.5));
        float _1694 = _1691 * (_1655.z + (-0.5));
        float _1701 = exp2((_1662.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1662.x + (-0.5));
        float _1703 = _1701 * (_1662.y + (-0.5));
        float _1704 = _1701 * (_1662.z + (-0.5));
        float _1711 = exp2((_1669.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1669.x + (-0.5));
        float _1713 = _1711 * (_1669.y + (-0.5));
        float _1714 = _1711 * (_1669.z + (-0.5));
        float _1715 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1716 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1717 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1718 = _1682 * 0.5;
        float _1719 = _1692 * 0.5;
        float _1720 = _1702 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_1006, _1007, _1008), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1715 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4245 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1745 + 1.0))) + _1750) * _1715;
        float _1760 = _1683 * 0.5;
        float _1761 = _1693 * 0.5;
        float _1762 = _1703 * 0.5;
        float _1763 = dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762));
        float _1768 = (_1763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1763);
        float _1776 = (dot(vec3(_1006, _1007, _1008), vec3(_1768 * _1760, _1768 * _1761, _1768 * _1762)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762)) / (_1716 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1787 = _1786 * 2.0;
        float _1791 = (1.0 - _1786) / (_1786 + 1.0);
        float _4278 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1801 = ((((1.0 - _1792) * (_1787 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1787 + 1.0))) + _1792) * _1716;
        float _1802 = _1684 * 0.5;
        float _1803 = _1694 * 0.5;
        float _1804 = _1704 * 0.5;
        float _1805 = dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804));
        float _1810 = (_1805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1805);
        float _1818 = (dot(vec3(_1006, _1007, _1008), vec3(_1810 * _1802, _1810 * _1803, _1810 * _1804)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1827 = sqrt(((_1803 * _1803) + (_1802 * _1802)) + (_1804 * _1804)) / (_1717 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1829 = _1828 * 2.0;
        float _1833 = (1.0 - _1828) / (_1828 + 1.0);
        float _4311 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1843 = ((((1.0 - _1834) * (_1829 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1829 + 1.0))) + _1834) * _1717;
        _1851 = _1684;
        _1852 = _1683;
        _1853 = _1682;
        _1854 = _1694;
        _1855 = _1693;
        _1856 = _1692;
        _1857 = _1704;
        _1858 = _1703;
        _1859 = _1702;
        _1860 = _1717;
        _1861 = _1716;
        _1862 = _1715;
        _1863 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
        _1864 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)));
        _1865 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)));
    }
    else
    {
        _1851 = _1545;
        _1852 = _1545;
        _1853 = _1545;
        _1854 = _1545;
        _1855 = _1545;
        _1856 = _1545;
        _1857 = _1545;
        _1858 = _1545;
        _1859 = _1545;
        _1860 = _1545;
        _1861 = _1545;
        _1862 = _1545;
        _1863 = 0.0;
        _1864 = 0.0;
        _1865 = 0.0;
    }
    float _1875 = (cbModelParam._m0[1u].x * (_1863 - _1557)) + _1557;
    float _1876 = (cbModelParam._m0[1u].x * (_1864 - _1558)) + _1558;
    float _1877 = (cbModelParam._m0[1u].x * (_1865 - _1559)) + _1559;
    float _1898 = fma(_1877, cbSceneParam._m0[89u].z, fma(_1876, cbSceneParam._m0[89u].y, _1875 * cbSceneParam._m0[89u].x));
    float _1901 = fma(_1877, cbSceneParam._m0[90u].z, fma(_1876, cbSceneParam._m0[90u].y, _1875 * cbSceneParam._m0[90u].x));
    float _1904 = fma(_1877, cbSceneParam._m0[91u].z, fma(_1876, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1875));
    float _1919 = _1179 * 0.5;
    float _1920 = _1180 * 0.5;
    float _1921 = _1181 * 0.5;
    float _1922 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1853, _1856, _1859, _1862));
    float _1925 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1852, _1855, _1858, _1861));
    float _1928 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1851, _1854, _1857, _1860));
    float _1962;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1935 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1544, _1548, _1551, _1554));
        float _1939 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1546, _1549, _1552, _1555));
        float _1943 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1547, _1550, _1553, _1556));
        float _1950 = dot(vec4(cbModelParam._m0[39u]), vec4(_1919, _1920, _1921, 1.0));
        _1962 = dot(vec3(isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)), isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0)), isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1950) ? 0.0 : (isnan(0.0) ? _1950 : max(0.0, _1950))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1962 = 1.0;
    }
    float _1973;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1964 = dot(vec4(cbModelParam._m0[40u]), vec4(_1919, _1920, _1921, 1.0));
        _1973 = dot(vec3(isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1964) ? 0.0 : (isnan(0.0) ? _1964 : max(0.0, _1964))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1973 = 1.0;
    }
    float _1977 = (_1973 * cbModelParam._m0[1u].x) + (_1962 * (1.0 - cbModelParam._m0[1u].x));
    float _1987 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1009);
    float _1988 = isnan(_1987) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1987 : min(cbModelParam._m0[25u].z, _1987));
    float _2069;
    float _2071;
    float _2073;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2036 = fma(_1243, cbModelParam._m0[13u].z, fma(_1239, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1235)) + cbModelParam._m0[13u].w;
        float _2040 = fma(_1243, cbModelParam._m0[14u].z, fma(_1239, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1235)) + cbModelParam._m0[14u].w;
        float _2044 = fma(_1243, cbModelParam._m0[15u].z, fma(_1239, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1235)) + cbModelParam._m0[15u].w;
        float _2047 = fma(_1181, cbModelParam._m0[13u].z, fma(_1180, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1179));
        float _2050 = fma(_1181, cbModelParam._m0[14u].z, fma(_1180, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1179));
        float _2053 = fma(_1181, cbModelParam._m0[15u].z, fma(_1180, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1179));
        float _2081;
        if (_2047 > 0.0)
        {
            _2081 = abs((1.0 - _2036) / _2047);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2036 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2081 = frontier_phi_14_12_ladder;
        }
        float _2284;
        if (_2050 > 0.0)
        {
            _2284 = abs((1.0 - _2040) / _2050);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2040 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2284 = frontier_phi_23_19_ladder;
        }
        float _2538;
        if (_2053 > 0.0)
        {
            _2538 = abs((1.0 - _2044) / _2053);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2044 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2538 = frontier_phi_35_30_ladder;
        }
        float _2540 = isnan(_2284) ? _2081 : (isnan(_2081) ? _2284 : min(_2081, _2284));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _2047) + _2036;
        float _2546 = (_2541 * _2050) + _2040;
        float _2547 = (_2541 * _2053) + _2044;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2550 = (-1.0) - _2548;
        float _2552 = _2548 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2547 > _2552) || ((_2547 < _2550) || ((_2546 > _2552) || ((_2546 < _2550) || ((_2545 < _2550) || (_2545 > _2552))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2675 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2547, cbModelParam._m0[9u].z, fma(_2546, cbModelParam._m0[9u].y, _2545 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2547, cbModelParam._m0[10u].z, fma(_2546, cbModelParam._m0[10u].y, _2545 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2547, cbModelParam._m0[11u].z, fma(_2546, cbModelParam._m0[11u].y, _2545 * cbModelParam._m0[11u].x))), _1988);
            frontier_phi_13_35_ladder = _2675.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2675.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2675.x * cbModelParam._m0[1u].y;
        }
        _2069 = frontier_phi_13_35_ladder_2;
        _2071 = frontier_phi_13_35_ladder_1;
        _2073 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2057 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1179, _1180, _1181), _1988);
        _2069 = _2057.x * cbModelParam._m0[1u].y;
        _2071 = _2057.y * cbModelParam._m0[1u].y;
        _2073 = _2057.z * cbModelParam._m0[1u].y;
    }
    float _2077 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1009);
    float _2078 = isnan(_2077) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2077 : min(cbModelParam._m0[25u].w, _2077));
    float _2168;
    float _2170;
    float _2172;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2132 = fma(_1243, cbModelParam._m0[21u].z, fma(_1239, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1235)) + cbModelParam._m0[21u].w;
        float _2136 = fma(_1243, cbModelParam._m0[22u].z, fma(_1239, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1235)) + cbModelParam._m0[22u].w;
        float _2140 = fma(_1243, cbModelParam._m0[23u].z, fma(_1239, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1235)) + cbModelParam._m0[23u].w;
        float _2143 = fma(_1181, cbModelParam._m0[21u].z, fma(_1180, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1179));
        float _2146 = fma(_1181, cbModelParam._m0[22u].z, fma(_1180, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1179));
        float _2149 = fma(_1181, cbModelParam._m0[23u].z, fma(_1180, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1179));
        float _2289;
        if (_2143 > 0.0)
        {
            _2289 = abs((1.0 - _2132) / _2143);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2143 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2132 + 1.0) / _2143);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2289 = frontier_phi_25_21_ladder;
        }
        float _2565;
        if (_2146 > 0.0)
        {
            _2565 = abs((1.0 - _2136) / _2146);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2146 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2136 + 1.0) / _2146);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2565 = frontier_phi_37_32_ladder;
        }
        float _2778;
        if (_2149 > 0.0)
        {
            _2778 = abs((1.0 - _2140) / _2149);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2149 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2140 + 1.0) / _2149);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2778 = frontier_phi_46_43_ladder;
        }
        float _2780 = isnan(_2565) ? _2289 : (isnan(_2289) ? _2565 : min(_2289, _2565));
        float _2781 = isnan(_2778) ? _2780 : (isnan(_2780) ? _2778 : min(_2780, _2778));
        float _2785 = (_2781 * _2143) + _2132;
        float _2786 = (_2781 * _2146) + _2136;
        float _2787 = (_2781 * _2149) + _2140;
        float _2788 = _2781 * 9.9999997473787516355514526367188e-05;
        float _2789 = (-1.0) - _2788;
        float _2791 = _2788 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2787 > _2791) || ((_2787 < _2789) || ((_2786 > _2791) || ((_2786 < _2789) || ((_2785 < _2789) || (_2785 > _2791))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2986 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2787, cbModelParam._m0[17u].z, fma(_2786, cbModelParam._m0[17u].y, _2785 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2787, cbModelParam._m0[18u].z, fma(_2786, cbModelParam._m0[18u].y, _2785 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2787, cbModelParam._m0[19u].z, fma(_2786, cbModelParam._m0[19u].y, _2785 * cbModelParam._m0[19u].x))), _2078);
            frontier_phi_22_46_ladder = _2986.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2986.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2986.x * cbModelParam._m0[1u].z;
        }
        _2168 = frontier_phi_22_46_ladder_2;
        _2170 = frontier_phi_22_46_ladder_1;
        _2172 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2152 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1179, _1180, _1181), _2078);
        _2168 = _2152.x * cbModelParam._m0[1u].z;
        _2170 = _2152.y * cbModelParam._m0[1u].z;
        _2172 = _2152.z * cbModelParam._m0[1u].z;
    }
    float _2185 = (((_1206 * _1155) + _1207) * _1171) * ((cbModelParam._m0[1u].w * (_2168 - _2069)) + _2069);
    float _2187 = (((_1206 * _1157) + _1207) * _1171) * ((cbModelParam._m0[1u].w * (_2170 - _2071)) + _2071);
    float _2189 = (((_1206 * _1158) + _1207) * _1171) * ((cbModelParam._m0[1u].w * (_2172 - _2073)) + _2073);
    float _2192 = fma(_2189, cbSceneParam._m0[89u].z, fma(_2187, cbSceneParam._m0[89u].y, _2185 * cbSceneParam._m0[89u].x));
    float _2195 = fma(_2189, cbSceneParam._m0[90u].z, fma(_2187, cbSceneParam._m0[90u].y, _2185 * cbSceneParam._m0[90u].x));
    float _2198 = fma(_2189, cbSceneParam._m0[91u].z, fma(_2187, cbSceneParam._m0[91u].y, _2185 * cbSceneParam._m0[91u].x));
    uvec4 _2208 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2210 = _2208.x * 14u;
    uint _2211 = _2210 + 13u;
    float _2218 = _1171 + (-1.0);
    float _2223 = (cbLight._m0[_2211].x * _2218) + 1.0;
    float _2224 = (cbLight._m0[_2211].y * _2218) + 1.0;
    float _2225 = (cbLight._m0[_2211].z * _2218) + 1.0;
    float _2226 = (cbLight._m0[_2211].w * _2218) + 1.0;
    uint _2227 = _2210 + 5u;
    float _2233 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
    uint _2237 = _2210 + 4u;
    float _2243 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
    uint _2247 = _2210 | 1u;
    float _2258 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_1006, _1007, _1008));
    float _2261 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_1006, _1007, _1008));
    float _4447 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _4458 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2266 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * 0.3183098733425140380859375;
    float _2268 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * 0.3183098733425140380859375;
    float _2275 = ((cbLight._m0[_2227].x * _2233) * _2268) + ((cbLight._m0[_2237].x * _2243) * _2266);
    float _2276 = ((_2233 * cbLight._m0[_2227].y) * _2268) + ((_2243 * cbLight._m0[_2237].y) * _2266);
    float _2277 = ((_2233 * cbLight._m0[_2227].z) * _2268) + ((_2243 * cbLight._m0[_2237].z) * _2266);
    uvec4 _2281 = floatBitsToUint(cbLight._m0[_2210 + 12u]);
    bool _2283 = _2281.x == 0u;
    float _2294;
    float _2296;
    float _2298;
    if (_2283)
    {
        _2294 = _2275;
        _2296 = _2276;
        _2298 = _2277;
    }
    else
    {
        uint _2302 = _2210 + 6u;
        float _2318 = (dot(vec3(cbLight._m0[_2210 + 2u].xyz), vec3(_1006, _1007, _1008)) * 0.5) + 0.5;
        float _2319 = _2318 * _2318;
        float _4469 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2320 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2321 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2294 = (((cbLight._m0[_2302].x * 0.3183098733425140380859375) * _2320) * _2321) + _2275;
        _2296 = (((cbLight._m0[_2302].y * 0.3183098733425140380859375) * _2320) * _2321) + _2276;
        _2298 = (((cbLight._m0[_2302].z * 0.3183098733425140380859375) * _2320) * _2321) + _2277;
    }
    bool _2301 = _2281.y == 0u;
    float _2339;
    float _2341;
    float _2343;
    if (_2301)
    {
        _2339 = _2294;
        _2341 = _2296;
        _2343 = _2298;
    }
    else
    {
        uint _2509 = _2210 + 7u;
        float _2525 = (dot(vec3(cbLight._m0[_2210 + 3u].xyz), vec3(_1006, _1007, _1008)) * 0.5) + 0.5;
        float _2526 = _2525 * _2525;
        float _4485 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2527 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2528 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2339 = (((cbLight._m0[_2509].x * 0.3183098733425140380859375) * _2527) * _2528) + _2294;
        _2341 = (((cbLight._m0[_2509].y * 0.3183098733425140380859375) * _2527) * _2528) + _2296;
        _2343 = (((cbLight._m0[_2509].z * 0.3183098733425140380859375) * _2527) * _2528) + _2298;
    }
    uint _2346 = _2210 + 8u;
    float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _1009) * 0.949999988079071044921875);
    float _2360 = _2359 * _2359;
    float _2361 = cbLight._m0[_2210].x + _1085;
    float _2362 = cbLight._m0[_2210].y + _1086;
    float _2363 = cbLight._m0[_2210].z + _1087;
    float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
    float _2368 = _2367 * _2361;
    float _2369 = _2367 * _2362;
    float _2370 = _2367 * _2363;
    float _2371 = dot(vec3(_1006, _1007, _1008), vec3(cbLight._m0[_2210].xyz));
    float _4501 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _4512 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _2375 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _2376 = dot(vec3(_1006, _1007, _1008), vec3(_2368, _2369, _2370));
    float _4523 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2380 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2368, _2369, _2370));
    float _4534 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = _2360 * _2360;
    float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
    float _2396 = exp2(log2(1.0 - (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) * 5.0);
    float _2397 = 0.959999978542327880859375 - _1152;
    float _2399 = 0.959999978542327880859375 - _1153;
    float _2400 = 0.959999978542327880859375 - _1154;
    float _2407 = 1.0 - _2360;
    float _2418 = (0.5 / (((_2375 * ((_2374 * _2407) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2407) + _2360) * _2374))) * _2374;
    float _4545 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2420 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
    uint _2431 = _2210 + 9u;
    float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _1009) * 0.949999988079071044921875);
    float _2443 = _2442 * _2442;
    float _2444 = cbLight._m0[_2247].x + _1085;
    float _2445 = cbLight._m0[_2247].y + _1086;
    float _2446 = cbLight._m0[_2247].z + _1087;
    float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
    float _2451 = _2450 * _2444;
    float _2452 = _2450 * _2445;
    float _2453 = _2450 * _2446;
    float _2454 = dot(vec3(_1006, _1007, _1008), vec3(cbLight._m0[_2247].xyz));
    float _4556 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2458 = dot(vec3(_1006, _1007, _1008), vec3(_2451, _2452, _2453));
    float _4567 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2462 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2451, _2452, _2453));
    float _4578 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2466 = _2443 * _2443;
    float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
    float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) * 5.0);
    float _2484 = 1.0 - _2443;
    float _2494 = (0.5 / (((_2375 * ((_2457 * _2484) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2484) + _2443) * _2457))) * _2457;
    float _4589 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2496 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
    float _2506 = (((((_2477 * _2397) + _1155) * cbLight._m0[_2431].x) * _2496) * _2233) + (((((_2396 * _2397) + _1155) * cbLight._m0[_2346].x) * _2420) * _2243);
    float _2507 = (((((_2477 * _2399) + _1157) * cbLight._m0[_2431].y) * _2496) * _2233) + (((((_2396 * _2399) + _1157) * cbLight._m0[_2346].y) * _2420) * _2243);
    float _2508 = (((((_2477 * _2400) + _1158) * cbLight._m0[_2431].z) * _2496) * _2233) + (((((_2396 * _2400) + _1158) * cbLight._m0[_2346].z) * _2420) * _2243);
    float _2570;
    float _2572;
    float _2574;
    if (_2283)
    {
        _2570 = _2506;
        _2572 = _2507;
        _2574 = _2508;
    }
    else
    {
        uint _2576 = _2210 + 2u;
        uint _2580 = _2210 + 10u;
        float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2576].w)) * _1009) * 0.949999988079071044921875);
        float _2595 = _2594 * _2594;
        float _2596 = cbLight._m0[_2576].x + _1085;
        float _2597 = cbLight._m0[_2576].y + _1086;
        float _2598 = cbLight._m0[_2576].z + _1087;
        float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
        float _2603 = _2602 * _2596;
        float _2604 = _2602 * _2597;
        float _2605 = _2602 * _2598;
        float _2606 = dot(vec3(_1006, _1007, _1008), vec3(cbLight._m0[_2576].xyz));
        float _4600 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2610 = dot(vec3(_1006, _1007, _1008), vec3(_2603, _2604, _2605));
        float _4611 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2614 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_2603, _2604, _2605));
        float _4622 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2618 = _2595 * _2595;
        float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
        float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0);
        float _2636 = 1.0 - _2595;
        float _2646 = (0.5 / (((_2375 * ((_2609 * _2636) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2636) + _2595) * _2609))) * _2609;
        float _4633 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2648 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
        float _2649 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2570 = (((((_2629 * _2397) + _1155) * cbLight._m0[_2580].x) * _2648) * _2649) + _2506;
        _2572 = (((((_2629 * _2399) + _1157) * cbLight._m0[_2580].y) * _2648) * _2649) + _2507;
        _2574 = (((((_2629 * _2400) + _1158) * cbLight._m0[_2580].z) * _2648) * _2649) + _2508;
    }
    float _2684;
    float _2686;
    float _2688;
    if (_2301)
    {
        _2684 = _2570;
        _2686 = _2572;
        _2688 = _2574;
    }
    else
    {
        uint _2695 = _2210 + 3u;
        uint _2699 = _2210 + 11u;
        float _2713 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2695].w)) * _1009) * 0.949999988079071044921875);
        float _2714 = _2713 * _2713;
        float _2715 = cbLight._m0[_2695].x + _1085;
        float _2716 = cbLight._m0[_2695].y + _1086;
        float _2717 = cbLight._m0[_2695].z + _1087;
        float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
        float _2722 = _2721 * _2715;
        float _2723 = _2721 * _2716;
        float _2724 = _2721 * _2717;
        float _2725 = dot(vec3(_1006, _1007, _1008), vec3(cbLight._m0[_2695].xyz));
        float _4649 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2729 = dot(vec3(_1006, _1007, _1008), vec3(_2722, _2723, _2724));
        float _4660 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2733 = dot(vec3(cbLight._m0[_2695].xyz), vec3(_2722, _2723, _2724));
        float _4671 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2737 = _2714 * _2714;
        float _2741 = ((_2732 * _2732) * (_2737 + (-1.0))) + 1.0;
        float _2748 = exp2(log2(1.0 - (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) * 5.0);
        float _2755 = 1.0 - _2714;
        float _2765 = (0.5 / (((_2375 * ((_2728 * _2755) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2755) + _2714) * _2728))) * _2728;
        float _4682 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2767 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2737 / ((_2741 * _2741) * 3.141590118408203125));
        float _2768 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2684 = (((((_2748 * _2397) + _1155) * cbLight._m0[_2699].x) * _2767) * _2768) + _2570;
        _2686 = (((((_2748 * _2399) + _1157) * cbLight._m0[_2699].y) * _2767) * _2768) + _2572;
        _2688 = (((((_2748 * _2400) + _1158) * cbLight._m0[_2699].z) * _2767) * _2768) + _2574;
    }
    float _2903;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    if (_2208.y == 0u)
    {
        float _2843 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2844 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2843;
        float _2845 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2843;
        float _2846 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2843;
        uvec4 _2858 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2859 = _2858.x;
        uint _2870 = uint((float(_2858.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1094) / _2859))) + floor(float(uint(cbSceneParam._m0[85u].x * _1093) / _2859)));
        float _2880 = (log2(_2846 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2881 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        uint _2884 = uint(isnan(14.0) ? _2881 : (isnan(_2881) ? 14.0 : min(_2881, 14.0)));
        uvec4 _2889 = texelFetch(g_lightClusterGridBuffer, int(((_2884 << 2u) + (_2870 << 6u)) >> 2u));
        uint _2890 = _2889.x;
        uint _2891 = _2858.z;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        if (((((1u << ((_2891 >> 4u) & 15u)) + 4294967295u) & _2890) == 0u) || ((_2891 & 240u) == 0u))
        {
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
            _2997 = 0.0;
            _2999 = 0.0;
            _3001 = 0.0;
        }
        else
        {
            float _2992;
            float _2994;
            float _2996;
            float _2998;
            float _3000;
            float _3002;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            uint _3142 = 0u;
            uint _3151;
            bool _3152;
            for (;;)
            {
                _3151 = texelFetch(g_lightClassification, int((((_2884 << 5u) + (_2870 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                _3152 = _3151 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3152)
                {
                    frontier_phi_61_pred = _3136;
                    frontier_phi_61_pred_1 = _3141;
                    frontier_phi_61_pred_2 = _3140;
                    frontier_phi_61_pred_3 = _3139;
                    frontier_phi_61_pred_4 = _3138;
                    frontier_phi_61_pred_5 = _3137;
                }
                else
                {
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    uint _3266;
                    _3260 = _3136;
                    _3261 = _3137;
                    _3262 = _3138;
                    _3263 = _3139;
                    _3264 = _3140;
                    _3265 = _3141;
                    _3266 = _3151;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    for (;;)
                    {
                        uint _3270 = uint(findLSB(_3266)) + (_3142 << 5u);
                        uint _3267 = (_3266 + 4294967295u) & _3266;
                        uint _3272 = _3270 * 48u;
                        vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3272)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 3u)).x));
                        uint _3292 = (_3270 * 48u) + 4u;
                        vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3311 = (_3270 * 48u) + 8u;
                        vec3 _3322 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x));
                        float _3326 = _3286.x - _2844;
                        float _3327 = _3286.y - _2845;
                        float _3328 = _3286.z - _2846;
                        float _3329 = dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328));
                        float _3332 = inversesqrt(_3329);
                        float _3333 = _3332 * _3326;
                        float _3334 = _3332 * _3327;
                        float _3335 = _3332 * _3328;
                        float _3336 = dot(vec3(_1112, _1115, _1118), vec3(_3333, _3334, _3335));
                        float _3341 = 1.0 - (_3329 * _3286.w);
                        float _4708 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3342 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                        float _3343 = sqrt(_3329) * _3305.w;
                        float _3346 = 1.39999997615814208984375 / (_3343 + 1.39999997615814208984375);
                        float _3347 = _3346 * _3346;
                        float _3350 = ((1.0 - _3347) * _3336) + _3347;
                        float _3353 = _3343 * _3343;
                        float _3357 = ((isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0))) * _3342) / ((_3353 * 0.699999988079071044921875) + 1.0);
                        float _3361 = (-0.0) - _2844;
                        float _3362 = (-0.0) - _2845;
                        float _3363 = (-0.0) - _2846;
                        float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                        float _3368 = _3367 * _3361;
                        float _3369 = _3367 * _3362;
                        float _3370 = _3367 * _3363;
                        float _3378 = exp2(log2(1.0 / ((_3353 * 3.5) + 5.0)) * 0.25);
                        float _3379 = 1.0 - _1187;
                        float _3386 = sqrt(1.0 - ((1.0 - (_3379 * _3379)) * (1.0 - (_3378 * _3378))));
                        float _3387 = _3386 * _3386;
                        float _3388 = _3387 * _3387;
                        float _3389 = _3368 + _3333;
                        float _3390 = _3369 + _3334;
                        float _3391 = _3370 + _3335;
                        float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                        float _3399 = dot(vec3(_1112, _1115, _1118), vec3(_3368, _3369, _3370));
                        float _4724 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3402 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                        float _3403 = dot(vec3(_1112, _1115, _1118), vec3(_3395 * _3389, _3395 * _3390, _3395 * _3391));
                        float _4735 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3406 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3410 = ((_3406 * _3406) * (_3388 + (-1.0))) + 1.0;
                        float _3411 = _3346 * _3387;
                        float _3412 = _3411 * _3411;
                        float _3415 = ((1.0 - _3412) * _3336) + _3412;
                        float _4746 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3416 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                        float _3417 = 1.0 - _3387;
                        float _3427 = (0.5 / (((_3416 * ((_3402 * _3417) + _3387)) + 9.9999999392252902907785028219223e-09) + (((_3416 * _3417) + _3387) * _3402))) * _3416;
                        float _4757 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3438 = (((_3388 * 3.1415927410125732421875) * (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) / ((_3410 * _3410) * ((_3353 * 2.1991131305694580078125) + 3.141590118408203125))) * _3342;
                        _3195 = (_3357 * _3305.x) + _3263;
                        _3196 = (_3357 * _3305.y) + _3264;
                        _3197 = (_3357 * _3305.z) + _3265;
                        _3192 = (_3438 * _3322.x) + _3260;
                        _3193 = (_3438 * _3322.y) + _3261;
                        _3194 = (_3438 * _3322.z) + _3262;
                        if (_3267 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3260 = _3192;
                            _3261 = _3193;
                            _3262 = _3194;
                            _3263 = _3195;
                            _3264 = _3196;
                            _3265 = _3197;
                            _3266 = _3267;
                        }
                    }
                    frontier_phi_61_pred = _3192;
                    frontier_phi_61_pred_1 = _3197;
                    frontier_phi_61_pred_2 = _3196;
                    frontier_phi_61_pred_3 = _3195;
                    frontier_phi_61_pred_4 = _3194;
                    frontier_phi_61_pred_5 = _3193;
                }
                _2992 = frontier_phi_61_pred;
                _3002 = frontier_phi_61_pred_1;
                _3000 = frontier_phi_61_pred_2;
                _2998 = frontier_phi_61_pred_3;
                _2996 = frontier_phi_61_pred_4;
                _2994 = frontier_phi_61_pred_5;
                uint _3143 = _3142 + 1u;
                if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3136 = _2992;
                    _3137 = _2994;
                    _3138 = _2996;
                    _3139 = _2998;
                    _3140 = _3000;
                    _3141 = _3002;
                    _3142 = _3143;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
            _2997 = _2998;
            _2999 = _3000;
            _3001 = _3002;
        }
        uvec4 _3005 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3006 = _3005.z;
        uint _3008 = (_3006 >> 8u) & 15u;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        if (((4294967295u << _3008) & _2890) == 0u)
        {
            _3104 = _2991;
            _3106 = _2993;
            _3108 = _2995;
            _3110 = _2997;
            _3112 = _2999;
            _3114 = _3001;
        }
        else
        {
            float _3129 = inversesqrt(dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846)));
            float _3130 = _3129 * _2844;
            float _3131 = _3129 * _2845;
            float _3132 = _3129 * _2846;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3008 < ((_3006 >> 12u) & 15u))
            {
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3243 = _2991;
                float _3244 = _2993;
                float _3245 = _2995;
                float _3246 = _2997;
                float _3247 = _2999;
                float _3248 = _3001;
                uint _3249 = _3008;
                uint _3258;
                bool _3259;
                for (;;)
                {
                    _3258 = texelFetch(g_lightClassification, int((((_2884 << 5u) + (_2870 << 9u)) + (_3249 << 2u)) >> 2u)).x;
                    _3259 = _3258 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3259)
                    {
                        frontier_phi_67_pred = _3246;
                        frontier_phi_67_pred_1 = _3247;
                        frontier_phi_67_pred_2 = _3248;
                        frontier_phi_67_pred_3 = _3245;
                        frontier_phi_67_pred_4 = _3244;
                        frontier_phi_67_pred_5 = _3243;
                    }
                    else
                    {
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3456 = _3243;
                        float _3457 = _3244;
                        float _3458 = _3245;
                        float _3459 = _3246;
                        float _3460 = _3247;
                        float _3461 = _3248;
                        uint _3462 = _3258;
                        uint _3463;
                        vec4 _3488;
                        float _3489;
                        vec4 _3504;
                        vec3 _3516;
                        vec4 _3531;
                        vec4 _3546;
                        float _3592;
                        bool _3593;
                        for (;;)
                        {
                            uint _3473 = ((_3249 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3462));
                            _3463 = (_3462 + 4294967295u) & _3462;
                            uint _3475 = _3473 * 40u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            _3489 = _3488.w;
                            uint _3491 = (_3473 * 40u) + 4u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3506 = (_3473 * 40u) + 8u;
                            _3516 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x));
                            uint _3518 = (_3473 * 40u) + 16u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3473 * 40u) + 20u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3548 = (_3473 * 40u) + 24u;
                            vec4 _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3567 = (_3473 * 40u) + 28u;
                            vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            _3592 = fma(_2846, _3580.z, fma(_2845, _3580.y, _3580.x * _2844)) + _3580.w;
                            _3593 = !((fma(_2846, _3561.z, fma(_2845, _3561.y, _3561.x * _2844)) + _3561.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3593)
                            {
                                float _3620 = _3488.x - _2844;
                                float _3621 = _3488.y - _2845;
                                float _3622 = _3488.z - _2846;
                                float _3623 = dot(vec3(_3620, _3621, _3622), vec3(_3620, _3621, _3622));
                                float _3626 = inversesqrt(_3623);
                                float _3627 = _3626 * _3620;
                                float _3628 = _3626 * _3621;
                                float _3629 = _3626 * _3622;
                                float _3633 = 1.0 - (_3623 / (_3489 * _3489));
                                float _4768 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3638 = sqrt(_3623) * _3504.w;
                                float _3640 = 1.39999997615814208984375 / (_3638 + 1.39999997615814208984375);
                                float _3641 = _3640 * _3640;
                                float _3644 = ((1.0 - _3641) * dot(vec3(_3627, _3628, _3629), vec3(_1112, _1115, _1118))) + _3641;
                                float _3647 = _3638 * _3638;
                                float _3651 = (fma(_2846, _3531.z, fma(_2845, _3531.y, _3531.x * _2844)) + _3531.w) / _3592;
                                float _3652 = (fma(_2846, _3546.z, fma(_2845, _3546.y, _3546.x * _2844)) + _3546.w) / _3592;
                                float _3656 = 1.0 - dot(vec2(_3651, _3652), vec2(_3651, _3652));
                                float _4784 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3658 = _3657 * (((isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0))) * _3634) / ((_3647 * 0.699999988079071044921875) + 1.0));
                                float _3670 = exp2(log2(1.0 / ((_3647 * 3.5) + 5.0)) * 0.25);
                                float _3671 = 1.0 - _1187;
                                float _3678 = sqrt(1.0 - ((1.0 - (_3671 * _3671)) * (1.0 - (_3670 * _3670))));
                                float _3679 = _3678 * _3678;
                                float _3680 = _3679 * _3679;
                                float _3681 = _3627 - _3130;
                                float _3682 = _3628 - _3131;
                                float _3683 = _3629 - _3132;
                                float _3687 = inversesqrt(dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683)));
                                float _3691 = dot(vec3(_1112, _1115, _1118), vec3((-0.0) - _3130, (-0.0) - _3131, (-0.0) - _3132));
                                float _4795 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3694 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3695 = dot(vec3(_1112, _1115, _1118), vec3(_3687 * _3681, _3687 * _3682, _3687 * _3683));
                                float _4806 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3698 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3702 = ((_3698 * _3698) * (_3680 + (-1.0))) + 1.0;
                                float _3703 = _3640 * _3679;
                                float _3704 = _3703 * _3703;
                                float _3710 = ((1.0 - _3704) * dot(vec3(_1112, _1115, _1118), vec3(_3627, _3628, _3629))) + _3704;
                                float _4817 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3712 = 1.0 - _3679;
                                float _3722 = (0.5 / (((_3711 * ((_3694 * _3712) + _3679)) + 9.9999999392252902907785028219223e-09) + (((_3711 * _3712) + _3679) * _3694))) * _3711;
                                float _4828 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3732 = (_3657 * _3634) * (((_3680 * 3.1415927410125732421875) * (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) / ((_3702 * _3702) * ((_3647 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3732 * _3516.x;
                                frontier_phi_73_pred_1 = _3732 * _3516.y;
                                frontier_phi_73_pred_2 = _3658 * _3504.z;
                                frontier_phi_73_pred_3 = _3658 * _3504.y;
                                frontier_phi_73_pred_4 = _3658 * _3504.x;
                                frontier_phi_73_pred_5 = _3732 * _3516.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3736 = frontier_phi_73_pred;
                            _3737 = frontier_phi_73_pred_1;
                            _3741 = frontier_phi_73_pred_2;
                            _3740 = frontier_phi_73_pred_3;
                            _3739 = frontier_phi_73_pred_4;
                            _3738 = frontier_phi_73_pred_5;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            if (_3463 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3463;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3446;
                        frontier_phi_67_pred_1 = _3447;
                        frontier_phi_67_pred_2 = _3448;
                        frontier_phi_67_pred_3 = _3445;
                        frontier_phi_67_pred_4 = _3444;
                        frontier_phi_67_pred_5 = _3443;
                    }
                    _3111 = frontier_phi_67_pred;
                    _3113 = frontier_phi_67_pred_1;
                    _3115 = frontier_phi_67_pred_2;
                    _3109 = frontier_phi_67_pred_3;
                    _3107 = frontier_phi_67_pred_4;
                    _3105 = frontier_phi_67_pred_5;
                    uint _3250 = _3249 + 1u;
                    if (_3250 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3243 = _3105;
                        _3244 = _3107;
                        _3245 = _3109;
                        _3246 = _3111;
                        _3247 = _3113;
                        _3248 = _3115;
                        _3249 = _3250;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3113;
                frontier_phi_55_56_ladder_1 = _3115;
                frontier_phi_55_56_ladder_2 = _3111;
                frontier_phi_55_56_ladder_3 = _3109;
                frontier_phi_55_56_ladder_4 = _3107;
                frontier_phi_55_56_ladder_5 = _3105;
            }
            else
            {
                frontier_phi_55_56_ladder = _2999;
                frontier_phi_55_56_ladder_1 = _3001;
                frontier_phi_55_56_ladder_2 = _2997;
                frontier_phi_55_56_ladder_3 = _2995;
                frontier_phi_55_56_ladder_4 = _2993;
                frontier_phi_55_56_ladder_5 = _2991;
            }
            _3104 = frontier_phi_55_56_ladder_5;
            _3106 = frontier_phi_55_56_ladder_4;
            _3108 = frontier_phi_55_56_ladder_3;
            _3110 = frontier_phi_55_56_ladder_2;
            _3112 = frontier_phi_55_56_ladder;
            _3114 = frontier_phi_55_56_ladder_1;
        }
        float _3119 = isnan(1.0) ? _1171 : (isnan(_1171) ? 1.0 : min(_1171, 1.0));
        _2903 = (_3119 * _3110) + _2339;
        _2905 = (_3119 * _3112) + _2341;
        _2907 = (_3119 * _3114) + _2343;
        _2909 = ((_3104 * _1155) * _3119) + _2684;
        _2911 = ((_3106 * _1157) * _3119) + _2686;
        _2913 = ((_3108 * _1158) * _3119) + _2688;
    }
    else
    {
        _2903 = _2339;
        _2905 = _2341;
        _2907 = _2343;
        _2909 = _2684;
        _2911 = _2686;
        _2913 = _2688;
    }
    float _4844 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _4855 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _4866 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    uint _2933 = _291 + 6u;
    float _2941 = _1093 / cbSceneParam._m0[86u].x;
    float _2942 = _1094 / cbSceneParam._m0[86u].y;
    vec4 _2956 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2941, _2942, (log2((isnan(cbSceneParam._m0[77u].w) ? _1028 : (isnan(_1028) ? cbSceneParam._m0[77u].w : min(_1028, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2958 = _2956.x;
    float _2959 = _2956.y;
    float _2960 = _2956.z;
    float _2961 = _2956.w;
    float _3054;
    float _3056;
    float _3058;
    float _3060;
    if (_1028 > cbSceneParam._m0[78u].w)
    {
        float _3016 = isnan(_1028) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1028 : min(cbSceneParam._m0[80u].w, _1028));
        float _3017 = _3016 / _1028;
        float _3028 = _3017 * _1078;
        float _3029 = _1079 * _3017;
        float _3030 = (-0.0) - _3029;
        float _3032 = _3017 * _1080;
        float _3034 = (cbSceneParam._m0[77u].w * _3030) / _3016;
        float _3035 = _3034 + cbSceneParam._m0[79u].w;
        float _3036 = cbSceneParam._m0[79u].w - _3029;
        float _3042 = sqrt(((_3028 * _3028) + (_3029 * _3029)) + (_3032 * _3032));
        float _3045 = (1.0 - (cbSceneParam._m0[77u].w / _3016)) * _3042;
        float _3050 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3052 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3205;
        if (abs((_3030 - _3034) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3205 = ((((_3035 > 0.0) ? exp2(_3050 * _3035) : (2.0 - exp2(_3052 * _3035))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3045;
        }
        else
        {
            float _3165 = 1.0 / cbSceneParam._m0[80u].x;
            float _3166 = isnan(_3036) ? _3035 : (isnan(_3035) ? _3036 : max(_3035, _3036));
            float _3167 = isnan(_3036) ? _3035 : (isnan(_3035) ? _3036 : min(_3035, _3036));
            float _3176 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : min(_3166, 0.0));
            float _3177 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : min(_3167, 0.0));
            _3205 = ((abs(_3042 / _3030) * cbSceneParam._m0[80u].y) * ((((_3176 - _3177) * 2.0) - ((exp2(_3050 * (isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0)))) - exp2(_3050 * (isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))))) * _3165)) - ((exp2(_3052 * _3176) - exp2(_3052 * _3177)) * _3165))) + (_3045 * cbSceneParam._m0[80u].z);
        }
        vec4 _3207 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2941, _2942, 1.0), 0.0);
        float _3216 = exp2((_3205 * (-1.44269502162933349609375)) * (1.0 - _3207.w));
        float _3217 = log2(_3216);
        float _3233 = log2(_2961);
        _3054 = (exp2(_3233 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].x)) * _3207.x) / cbSceneParam._m0[78u].x)) + _2958;
        _3056 = (exp2(_3233 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].y)) * _3207.y) / cbSceneParam._m0[78u].y)) + _2959;
        _3058 = (exp2(_3233 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].z)) * _3207.z) / cbSceneParam._m0[78u].z)) + _2960;
        _3060 = _3216 * _2961;
    }
    else
    {
        _3054 = _2958;
        _3056 = _2959;
        _3058 = _2960;
        _3060 = _2961;
    }
    float _3072 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3073 = _3072 == 3.0;
    float _3074 = log2(_3060);
    float _3081 = exp2(_3074 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2903 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1171))) + ((_2909 + ((isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0))) * _1977)) * cbPerFrame._m0[3u].x));
    float _3082 = exp2(_3074 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2905 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1171))) + ((_2911 + ((isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0))) * _1977)) * cbPerFrame._m0[3u].x));
    float _3083 = exp2(_3074 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2907 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1171))) + ((_2913 + ((isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0))) * _1977)) * cbPerFrame._m0[3u].x));
    float _3092 = (_3072 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3092 * (_3073 ? _3081 : (_3081 + (cbSceneParam._m0[72u].w * _3054)));
    SV_Target.y = _3092 * (_3073 ? _3082 : (_3082 + (cbSceneParam._m0[72u].w * _3056)));
    SV_Target.z = _3092 * (_3073 ? _3083 : (_3083 + (cbSceneParam._m0[72u].w * _3058)));
    SV_Target.w = cbInstanceData._m0[_2933].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2933].w;
}


