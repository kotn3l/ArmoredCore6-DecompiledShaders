#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1505;
float _3908;
float _3909;
float _3910;
float _3911;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3920 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3931 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3942 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _378 = _373.x * cbMtdParam._m0[11u].x;
    float _379 = _373.y * cbMtdParam._m0[11u].y;
    float _380 = _373.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _447 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _461 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _478 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_449 - _461) * cbMtdParam._m0[23u].w) + _461) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3953 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _489 = (_347.x * cbMtdParam._m0[9u].x) * ((_479 * ((_399.x * cbMtdParam._m0[12u].x) - _378)) + _378);
    float _490 = (_347.y * cbMtdParam._m0[9u].y) * ((_479 * ((_399.y * cbMtdParam._m0[12u].y) - _379)) + _379);
    float _491 = (_347.z * cbMtdParam._m0[9u].z) * ((_479 * ((_399.z * cbMtdParam._m0[12u].z) - _380)) + _380);
    float _495 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _489;
    float _498 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _490;
    float _501 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _491;
    float _509 = (((_489 - _495) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) + _495) * 4.55000019073486328125;
    float _511 = (((_490 - _498) * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) + _498) * 4.55000019073486328125;
    float _513 = (((_491 - _501) * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) + _501) * 4.55000019073486328125;
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _310) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _311) + cbTextureTilingScale._m0[14u].w));
    vec4 _552 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _596 = _594.x;
    float _597 = _594.y;
    float _598 = _594.z;
    float _607 = ((_577.z - _598) * _479) + _598;
    float _610 = ((((_577.x - _596) * _479) + _596) * 2.0) + (-1.0);
    float _611 = ((((_577.y - _597) * _479) + _597) * 2.0) + (-1.0);
    float _612 = dot(vec2(_610, _611), vec2(_610, _611));
    float _3964 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _617 = sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _660 = _658.x;
    float _661 = 1.0 - _660;
    float _670 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _673 = ((isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : min(_670, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _682 = (_673 - ((((((_660 - _661) * cbMtdParam._m0[24u].z) + _661) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _673))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3985 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _690 = (_683 * ((_532.x * cbMtdParam._m0[18u].x) - _509)) + _509;
    float _691 = (_683 * ((_532.y * cbMtdParam._m0[18u].y) - _511)) + _511;
    float _692 = (_683 * ((_532.z * cbMtdParam._m0[18u].z) - _513)) + _513;
    vec4 _704 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _706 = _704.x;
    float _707 = 1.0 - _706;
    float _732 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_706 - _707) * cbMtdParam._m0[24u].w) + _707) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3996 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _733 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _741 = ((((cbMtdParam._m0[10u].x - _690) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _733) + _690;
    float _742 = ((((cbMtdParam._m0[10u].y - _691) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _733) + _691;
    float _743 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _692)) * _733) + _692;
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _771 = _769.x;
    float _788 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _771) * _479) + _771;
    float _792 = ((_755.x - _788) * cbMtdParam._m0[19u].z) + _788;
    float _794 = _792 - (_792 * _683);
    float _796 = _794 - (_794 * _733);
    float _801 = (((_552.z - _607) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _607;
    float _805 = ((_633.z - _801) * cbMtdParam._m0[19u].w) + _801;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _826 = (_819.x * 2.0) + (-1.0);
    float _827 = (_819.y * 2.0) + (-1.0);
    float _828 = dot(vec2(_826, _827), vec2(_826, _827));
    float _4007 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _836 = (_683 * (_819.z - _805)) + _805;
    float _839 = ((cbMtdParam._m0[23u].x - _836) * _733) + _836;
    vec4 _860 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _866 = (_860.x * 2.0) + (-1.0);
    float _867 = (_860.y * 2.0) + (-1.0);
    float _868 = dot(vec2(_866, _867), vec2(_866, _867));
    float _4018 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _882 = (_610 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_552.x * 2.0) + (-1.0)))) + (((_633.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _883 = (_611 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_552.y * 2.0) + (-1.0)))) + (((_633.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _895 = (((_826 - _882) + (cbMtdParam._m0[21u].x * _882)) * _683) + _882;
    float _896 = (((_827 - _883) + (cbMtdParam._m0[21u].x * _883)) * _683) + _883;
    float _897 = (_683 * (sqrt(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) - _617)) + _617;
    float _908 = (((_866 - _895) + (_895 * cbMtdParam._m0[22u].z)) * _733) + _895;
    float _909 = (((_867 - _896) + (_896 * cbMtdParam._m0[22u].z)) * _733) + _896;
    float _910 = ((sqrt(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) - _897) * _733) + _897;
    float _912 = cbMtdParam._m0[22u].x + _633.w;
    float _915 = fma(_910, _259 * NORMAL.x, fma(_909, _266 * TANGENT.x, (_252 * _244) * _908));
    float _918 = fma(_910, _259 * NORMAL.y, fma(_909, _266 * TANGENT.y, (_252 * _245) * _908));
    float _921 = fma(_910, _259 * NORMAL.z, fma(_909, _266 * TANGENT.z, (_252 * _246) * _908));
    float _925 = inversesqrt(dot(vec3(_915, _918, _921), vec3(_915, _918, _921)));
    float _926 = _925 * _915;
    float _927 = _925 * _918;
    float _928 = _925 * _921;
    float _4029 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _929 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4051 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4062 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4073 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4084 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _934 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _948 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _998 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _988);
    float _999 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _988);
    float _1000 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _988);
    float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
    float _1005 = _998 * _1004;
    float _1006 = _999 * _1004;
    float _1007 = _1000 * _1004;
    vec4 _1012 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1014 = _1012.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1186 = sqrt(((_998 * _998) + (_999 * _999)) + (_1000 * _1000));
        float _1192 = (cbMatDynParam._m0[5u].x * _1186) + cbMatDynParam._m0[5u].y;
        float _4095 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1197 = (cbMatDynParam._m0[5u].z * _1186) + cbMatDynParam._m0[5u].w;
        float _4106 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) - _1193)) + _1193) < ((_1014 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1025 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1026 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1044 = fma(_928, cbSceneParam._m0[5u].z, fma(_927, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _926));
    float _1047 = fma(_928, cbSceneParam._m0[6u].z, fma(_927, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _926));
    float _1050 = fma(_928, cbSceneParam._m0[7u].z, fma(_927, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _926));
    uint _1063 = _291 + 9u;
    uint _1064 = _1063 + uint(cbMatDynParam._m0[0u].w);
    float _1070 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_1064].x;
    float _1071 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * cbInstanceData._m0[_1064].y;
    float _1072 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * cbInstanceData._m0[_1064].z;
    float _4117 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1073 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1074 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1075 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _1076 = 1.0 - _934;
    float _1077 = _1073 * _1076;
    float _1078 = _1074 * _1076;
    float _1079 = _1075 * _1076;
    float _1084 = (_1073 + (-0.039999999105930328369140625)) * _934;
    float _1085 = (_1074 + (-0.039999999105930328369140625)) * _934;
    float _1086 = (_1075 + (-0.039999999105930328369140625)) * _934;
    float _1087 = _1084 + 0.039999999105930328369140625;
    float _1089 = _1085 + 0.039999999105930328369140625;
    float _1090 = _1086 + 0.039999999105930328369140625;
    vec4 _1099 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1025, cbSceneParam._m0[86u].y * _1026));
    float _1103 = ((isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * TEXCOORD_5.w) * _1099.x;
    float _1104 = dot(vec3(_926, _927, _928), vec3(_1005, _1006, _1007));
    float _1107 = _1104 * 2.0;
    float _1111 = (_1107 * _926) - _1005;
    float _1112 = (_1107 * _927) - _1006;
    float _1113 = (_1107 * _928) - _1007;
    float _1117 = abs(dot(vec3(_1005, _1006, _1007), vec3(_926, _927, _928)));
    float _4150 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _1119 = sqrt(_929);
    float _1132 = exp2((_1119 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1119 * 3.0));
    float _1138 = (1.0 - _1132) * ((_1119 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1139 = _1132 * _1119;
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1504;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1229 = fma(_1175, cbModelParam._m0[26u].z, fma(_1171, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1167));
        float _1233 = fma(_1175, cbModelParam._m0[27u].z, fma(_1171, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1167));
        float _1237 = fma(_1175, cbModelParam._m0[28u].z, fma(_1171, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1167));
        float _1262 = _1167 + _926;
        float _1263 = _1171 + _927;
        float _1264 = _1175 + _928;
        float _1274 = fma(_1264, cbModelParam._m0[26u].z, fma(_1263, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1262)) - _1229;
        float _1275 = fma(_1264, cbModelParam._m0[27u].z, fma(_1263, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1262)) - _1233;
        float _1276 = fma(_1264, cbModelParam._m0[28u].z, fma(_1263, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1262)) - _1237;
        float _1280 = inversesqrt(dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276)));
        float _1293 = ((_1280 * _1274) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1229 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1280 * _1275) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1233 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1280 * _1276) / cbModelParam._m0[34u].z) + ((((((_1237 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        float _1332 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1298.x + (-0.5));
        float _1334 = _1332 * (_1298.y + (-0.5));
        float _1335 = _1332 * (_1298.z + (-0.5));
        float _1342 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1305.x + (-0.5));
        float _1344 = _1342 * (_1305.y + (-0.5));
        float _1345 = _1342 * (_1305.z + (-0.5));
        float _1352 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1312.x + (-0.5));
        float _1354 = _1352 * (_1312.y + (-0.5));
        float _1355 = _1352 * (_1312.z + (-0.5));
        float _1362 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1319.x + (-0.5));
        float _1364 = _1362 * (_1319.y + (-0.5));
        float _1365 = _1362 * (_1319.z + (-0.5));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = _1333 * 0.5;
        float _1370 = _1343 * 0.5;
        float _1371 = _1353 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1386 = (dot(vec3(_926, _927, _928), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1396 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4198 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1398 + 1.0))) + _1403) * _1366;
        float _1413 = _1334 * 0.5;
        float _1414 = _1344 * 0.5;
        float _1415 = _1354 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_926, _927, _928), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4231 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1440 + 1.0))) + _1445) * _1367;
        float _1455 = _1335 * 0.5;
        float _1456 = _1345 * 0.5;
        float _1457 = _1355 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_926, _927, _928), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4264 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1482 + 1.0))) + _1487) * _1368;
        _1504 = _1335;
        _1506 = _1334;
        _1507 = _1333;
        _1508 = _1345;
        _1509 = _1344;
        _1510 = _1343;
        _1511 = _1355;
        _1512 = _1354;
        _1513 = _1353;
        _1514 = _1368;
        _1515 = _1367;
        _1516 = _1366;
        _1517 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
    }
    else
    {
        _1504 = _1505;
        _1506 = _1505;
        _1507 = _1505;
        _1508 = _1505;
        _1509 = _1505;
        _1510 = _1505;
        _1511 = _1505;
        _1512 = _1505;
        _1513 = _1505;
        _1514 = _1505;
        _1515 = _1505;
        _1516 = _1505;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1547 = fma(_1175, cbModelParam._m0[30u].z, fma(_1171, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1167));
        float _1551 = fma(_1175, cbModelParam._m0[31u].z, fma(_1171, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1167));
        float _1555 = fma(_1175, cbModelParam._m0[32u].z, fma(_1171, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1167));
        float _1578 = _1167 + _926;
        float _1579 = _1171 + _927;
        float _1580 = _1175 + _928;
        float _1590 = fma(_1580, cbModelParam._m0[30u].z, fma(_1579, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1578)) - _1547;
        float _1591 = fma(_1580, cbModelParam._m0[31u].z, fma(_1579, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1578)) - _1551;
        float _1592 = fma(_1580, cbModelParam._m0[32u].z, fma(_1579, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1578)) - _1555;
        float _1596 = inversesqrt(dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592)));
        float _1609 = ((_1596 * _1590) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1547 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1610 = ((_1596 * _1591) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1551 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1611 = ((_1596 * _1592) / cbModelParam._m0[35u].z) + ((((((_1555 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1609, _1610, _1611), 0.0);
        float _1646 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1613.x + (-0.5));
        float _1648 = _1646 * (_1613.y + (-0.5));
        float _1649 = _1646 * (_1613.z + (-0.5));
        float _1656 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1620.x + (-0.5));
        float _1658 = _1656 * (_1620.y + (-0.5));
        float _1659 = _1656 * (_1620.z + (-0.5));
        float _1666 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1627.x + (-0.5));
        float _1668 = _1666 * (_1627.y + (-0.5));
        float _1669 = _1666 * (_1627.z + (-0.5));
        float _1676 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1634.x + (-0.5));
        float _1678 = _1676 * (_1634.y + (-0.5));
        float _1679 = _1676 * (_1634.z + (-0.5));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = _1647 * 0.5;
        float _1684 = _1657 * 0.5;
        float _1685 = _1667 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_926, _927, _928), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4327 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1710 + 1.0))) + _1715) * _1680;
        float _1725 = _1648 * 0.5;
        float _1726 = _1658 * 0.5;
        float _1727 = _1668 * 0.5;
        float _1728 = dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727));
        float _1733 = (_1728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1728);
        float _1741 = (dot(vec3(_926, _927, _928), vec3(_1733 * _1725, _1733 * _1726, _1733 * _1727)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1750 = sqrt(((_1726 * _1726) + (_1725 * _1725)) + (_1727 * _1727)) / (_1681 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1752 = _1751 * 2.0;
        float _1756 = (1.0 - _1751) / (_1751 + 1.0);
        float _4360 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1766 = ((((1.0 - _1757) * (_1752 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1752 + 1.0))) + _1757) * _1681;
        float _1767 = _1649 * 0.5;
        float _1768 = _1659 * 0.5;
        float _1769 = _1669 * 0.5;
        float _1770 = dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769));
        float _1775 = (_1770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1770);
        float _1783 = (dot(vec3(_926, _927, _928), vec3(_1775 * _1767, _1775 * _1768, _1775 * _1769)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1792 = sqrt(((_1768 * _1768) + (_1767 * _1767)) + (_1769 * _1769)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1794 = _1793 * 2.0;
        float _1798 = (1.0 - _1793) / (_1793 + 1.0);
        float _4393 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1808 = ((((1.0 - _1799) * (_1794 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1794 + 1.0))) + _1799) * _1682;
        _1816 = _1649;
        _1817 = _1648;
        _1818 = _1647;
        _1819 = _1659;
        _1820 = _1658;
        _1821 = _1657;
        _1822 = _1669;
        _1823 = _1668;
        _1824 = _1667;
        _1825 = _1682;
        _1826 = _1681;
        _1827 = _1680;
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
        _1829 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)));
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)));
    }
    else
    {
        _1816 = _1505;
        _1817 = _1505;
        _1818 = _1505;
        _1819 = _1505;
        _1820 = _1505;
        _1821 = _1505;
        _1822 = _1505;
        _1823 = _1505;
        _1824 = _1505;
        _1825 = _1505;
        _1826 = _1505;
        _1827 = _1505;
        _1828 = 0.0;
        _1829 = 0.0;
        _1830 = 0.0;
    }
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1517)) + _1517;
    float _1841 = (cbModelParam._m0[1u].x * (_1829 - _1518)) + _1518;
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1519)) + _1519;
    float _1863 = fma(_1842, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1840 * cbSceneParam._m0[89u].x));
    float _1866 = fma(_1842, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1840 * cbSceneParam._m0[90u].x));
    float _1869 = fma(_1842, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1840));
    float _1884 = _1111 * 0.5;
    float _1885 = _1112 * 0.5;
    float _1886 = _1113 * 0.5;
    float _1887 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1890 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1817, _1820, _1823, _1826));
    float _1893 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1927;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1900 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1504, _1508, _1511, _1514));
        float _1904 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1506, _1509, _1512, _1515));
        float _1908 = dot(vec4(_1884, _1885, _1886, 1.0), vec4(_1507, _1510, _1513, _1516));
        float _1915 = dot(vec4(cbModelParam._m0[39u]), vec4(_1884, _1885, _1886, 1.0));
        _1927 = dot(vec3(isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1915) ? 0.0 : (isnan(0.0) ? _1915 : max(0.0, _1915))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1927 = 1.0;
    }
    float _1938;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1929 = dot(vec4(cbModelParam._m0[40u]), vec4(_1884, _1885, _1886, 1.0));
        _1938 = dot(vec3(isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1929) ? 0.0 : (isnan(0.0) ? _1929 : max(0.0, _1929))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1938 = 1.0;
    }
    float _1942 = (_1938 * cbModelParam._m0[1u].x) + (_1927 * (1.0 - cbModelParam._m0[1u].x));
    float _1952 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _929);
    float _1953 = isnan(_1952) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1952 : min(cbModelParam._m0[25u].z, _1952));
    float _2033;
    float _2035;
    float _2037;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2000 = fma(_1175, cbModelParam._m0[13u].z, fma(_1171, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1167)) + cbModelParam._m0[13u].w;
        float _2004 = fma(_1175, cbModelParam._m0[14u].z, fma(_1171, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1167)) + cbModelParam._m0[14u].w;
        float _2008 = fma(_1175, cbModelParam._m0[15u].z, fma(_1171, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1167)) + cbModelParam._m0[15u].w;
        float _2011 = fma(_1113, cbModelParam._m0[13u].z, fma(_1112, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1111));
        float _2014 = fma(_1113, cbModelParam._m0[14u].z, fma(_1112, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1111));
        float _2017 = fma(_1113, cbModelParam._m0[15u].z, fma(_1112, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1111));
        float _2045;
        if (_2011 > 0.0)
        {
            _2045 = abs((1.0 - _2000) / _2011);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2000 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2045 = frontier_phi_17_15_ladder;
        }
        float _2268;
        if (_2014 > 0.0)
        {
            _2268 = abs((1.0 - _2004) / _2014);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2004 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2268 = frontier_phi_26_22_ladder;
        }
        float _2525;
        if (_2017 > 0.0)
        {
            _2525 = abs((1.0 - _2008) / _2017);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2008 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2525 = frontier_phi_38_33_ladder;
        }
        float _2527 = isnan(_2268) ? _2045 : (isnan(_2045) ? _2268 : min(_2045, _2268));
        float _2528 = isnan(_2525) ? _2527 : (isnan(_2527) ? _2525 : min(_2527, _2525));
        float _2532 = (_2528 * _2011) + _2000;
        float _2533 = (_2528 * _2014) + _2004;
        float _2534 = (_2528 * _2017) + _2008;
        float _2535 = _2528 * 9.9999997473787516355514526367188e-05;
        float _2537 = (-1.0) - _2535;
        float _2539 = _2535 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2534 > _2539) || ((_2534 < _2537) || ((_2533 > _2539) || ((_2533 < _2537) || ((_2532 < _2537) || (_2532 > _2539))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2662 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2534, cbModelParam._m0[9u].z, fma(_2533, cbModelParam._m0[9u].y, _2532 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2534, cbModelParam._m0[10u].z, fma(_2533, cbModelParam._m0[10u].y, _2532 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2534, cbModelParam._m0[11u].z, fma(_2533, cbModelParam._m0[11u].y, _2532 * cbModelParam._m0[11u].x))), _1953);
            frontier_phi_16_38_ladder = _2662.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2662.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2662.x * cbModelParam._m0[1u].y;
        }
        _2033 = frontier_phi_16_38_ladder_2;
        _2035 = frontier_phi_16_38_ladder_1;
        _2037 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2021 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1111, _1112, _1113), _1953);
        _2033 = _2021.x * cbModelParam._m0[1u].y;
        _2035 = _2021.y * cbModelParam._m0[1u].y;
        _2037 = _2021.z * cbModelParam._m0[1u].y;
    }
    float _2041 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _929);
    float _2042 = isnan(_2041) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2041 : min(cbModelParam._m0[25u].w, _2041));
    float _2131;
    float _2133;
    float _2135;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2095 = fma(_1175, cbModelParam._m0[21u].z, fma(_1171, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1167)) + cbModelParam._m0[21u].w;
        float _2099 = fma(_1175, cbModelParam._m0[22u].z, fma(_1171, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1167)) + cbModelParam._m0[22u].w;
        float _2103 = fma(_1175, cbModelParam._m0[23u].z, fma(_1171, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1167)) + cbModelParam._m0[23u].w;
        float _2106 = fma(_1113, cbModelParam._m0[21u].z, fma(_1112, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1111));
        float _2109 = fma(_1113, cbModelParam._m0[22u].z, fma(_1112, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1111));
        float _2112 = fma(_1113, cbModelParam._m0[23u].z, fma(_1112, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1111));
        float _2273;
        if (_2106 > 0.0)
        {
            _2273 = abs((1.0 - _2095) / _2106);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2095 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2273 = frontier_phi_28_24_ladder;
        }
        float _2552;
        if (_2109 > 0.0)
        {
            _2552 = abs((1.0 - _2099) / _2109);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2099 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2552 = frontier_phi_40_35_ladder;
        }
        float _2765;
        if (_2112 > 0.0)
        {
            _2765 = abs((1.0 - _2103) / _2112);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2103 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2765 = frontier_phi_49_46_ladder;
        }
        float _2767 = isnan(_2552) ? _2273 : (isnan(_2273) ? _2552 : min(_2273, _2552));
        float _2768 = isnan(_2765) ? _2767 : (isnan(_2767) ? _2765 : min(_2767, _2765));
        float _2772 = (_2768 * _2106) + _2095;
        float _2773 = (_2768 * _2109) + _2099;
        float _2774 = (_2768 * _2112) + _2103;
        float _2775 = _2768 * 9.9999997473787516355514526367188e-05;
        float _2776 = (-1.0) - _2775;
        float _2778 = _2775 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2774 > _2778) || ((_2774 < _2776) || ((_2773 > _2778) || ((_2773 < _2776) || ((_2772 < _2776) || (_2772 > _2778))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2774, cbModelParam._m0[17u].z, fma(_2773, cbModelParam._m0[17u].y, _2772 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2774, cbModelParam._m0[18u].z, fma(_2773, cbModelParam._m0[18u].y, _2772 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2774, cbModelParam._m0[19u].z, fma(_2773, cbModelParam._m0[19u].y, _2772 * cbModelParam._m0[19u].x))), _2042);
            frontier_phi_25_49_ladder = _2973.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2973.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2973.x * cbModelParam._m0[1u].z;
        }
        _2131 = frontier_phi_25_49_ladder_2;
        _2133 = frontier_phi_25_49_ladder_1;
        _2135 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2115 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1111, _1112, _1113), _2042);
        _2131 = _2115.x * cbModelParam._m0[1u].z;
        _2133 = _2115.y * cbModelParam._m0[1u].z;
        _2135 = _2115.z * cbModelParam._m0[1u].z;
    }
    float _2148 = (((_1138 * _1087) + _1139) * _1103) * ((cbModelParam._m0[1u].w * (_2131 - _2033)) + _2033);
    float _2150 = (((_1138 * _1089) + _1139) * _1103) * ((cbModelParam._m0[1u].w * (_2133 - _2035)) + _2035);
    float _2152 = (((_1138 * _1090) + _1139) * _1103) * ((cbModelParam._m0[1u].w * (_2135 - _2037)) + _2037);
    float _2155 = fma(_2152, cbSceneParam._m0[89u].z, fma(_2150, cbSceneParam._m0[89u].y, _2148 * cbSceneParam._m0[89u].x));
    float _2158 = fma(_2152, cbSceneParam._m0[90u].z, fma(_2150, cbSceneParam._m0[90u].y, _2148 * cbSceneParam._m0[90u].x));
    float _2161 = fma(_2152, cbSceneParam._m0[91u].z, fma(_2150, cbSceneParam._m0[91u].y, _2148 * cbSceneParam._m0[91u].x));
    vec4 _2169 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1025, _1026));
    float _2171 = _2169.w;
    float _2183 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2171);
    float _2184 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2171);
    float _2185 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2171);
    uvec4 _2189 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2191 = _2189.x * 14u;
    uint _2192 = _2191 + 13u;
    float _2199 = _1103 + (-1.0);
    float _2204 = (cbLight._m0[_2192].x * _2199) + 1.0;
    float _2205 = (cbLight._m0[_2192].y * _2199) + 1.0;
    float _2206 = (cbLight._m0[_2192].z * _2199) + 1.0;
    float _2207 = (cbLight._m0[_2192].w * _2199) + 1.0;
    uint _2208 = _2191 + 5u;
    float _2214 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2218 = _2191 + 4u;
    float _2227 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2231 = _2191 | 1u;
    float _2242 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_926, _927, _928));
    float _2245 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_926, _927, _928));
    float _4529 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _4540 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2250 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * 0.3183098733425140380859375;
    float _2252 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * 0.3183098733425140380859375;
    float _2259 = ((cbLight._m0[_2208].x * _2214) * _2252) + (((cbLight._m0[_2218].x * _2183) * _2227) * _2250);
    float _2260 = ((_2214 * cbLight._m0[_2208].y) * _2252) + (((cbLight._m0[_2218].y * _2184) * _2227) * _2250);
    float _2261 = ((_2214 * cbLight._m0[_2208].z) * _2252) + (((cbLight._m0[_2218].z * _2185) * _2227) * _2250);
    uvec4 _2265 = floatBitsToUint(cbLight._m0[_2191 + 12u]);
    bool _2267 = _2265.x == 0u;
    float _2278;
    float _2280;
    float _2282;
    if (_2267)
    {
        _2278 = _2259;
        _2280 = _2260;
        _2282 = _2261;
    }
    else
    {
        uint _2286 = _2191 + 6u;
        float _2302 = (dot(vec3(cbLight._m0[_2191 + 2u].xyz), vec3(_926, _927, _928)) * 0.5) + 0.5;
        float _2303 = _2302 * _2302;
        float _4551 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2304 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2305 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2278 = (((cbLight._m0[_2286].x * 0.3183098733425140380859375) * _2304) * _2305) + _2259;
        _2280 = (((cbLight._m0[_2286].y * 0.3183098733425140380859375) * _2304) * _2305) + _2260;
        _2282 = (((cbLight._m0[_2286].z * 0.3183098733425140380859375) * _2304) * _2305) + _2261;
    }
    bool _2285 = _2265.y == 0u;
    float _2323;
    float _2325;
    float _2327;
    if (_2285)
    {
        _2323 = _2278;
        _2325 = _2280;
        _2327 = _2282;
    }
    else
    {
        uint _2496 = _2191 + 7u;
        float _2512 = (dot(vec3(cbLight._m0[_2191 + 3u].xyz), vec3(_926, _927, _928)) * 0.5) + 0.5;
        float _2513 = _2512 * _2512;
        float _4567 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2514 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2515 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2323 = (((cbLight._m0[_2496].x * 0.3183098733425140380859375) * _2514) * _2515) + _2278;
        _2325 = (((cbLight._m0[_2496].y * 0.3183098733425140380859375) * _2514) * _2515) + _2280;
        _2327 = (((cbLight._m0[_2496].z * 0.3183098733425140380859375) * _2514) * _2515) + _2282;
    }
    uint _2330 = _2191 + 8u;
    float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _929) * 0.949999988079071044921875);
    float _2344 = _2343 * _2343;
    float _2345 = cbLight._m0[_2191].x + _1005;
    float _2346 = cbLight._m0[_2191].y + _1006;
    float _2347 = cbLight._m0[_2191].z + _1007;
    float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
    float _2352 = _2351 * _2345;
    float _2353 = _2351 * _2346;
    float _2354 = _2351 * _2347;
    float _2355 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2191].xyz));
    float _4583 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _4594 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _2359 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2360 = dot(vec3(_926, _927, _928), vec3(_2352, _2353, _2354));
    float _4605 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2352, _2353, _2354));
    float _4616 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2344 * _2344;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2380 = exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0);
    float _2381 = 0.959999978542327880859375 - _1084;
    float _2383 = 0.959999978542327880859375 - _1085;
    float _2384 = 0.959999978542327880859375 - _1086;
    float _2391 = 1.0 - _2344;
    float _2402 = (0.5 / (((_2359 * ((_2358 * _2391) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2391) + _2344) * _2358))) * _2358;
    float _4627 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2404 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    uint _2418 = _2191 + 9u;
    float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _929) * 0.949999988079071044921875);
    float _2430 = _2429 * _2429;
    float _2431 = cbLight._m0[_2231].x + _1005;
    float _2432 = cbLight._m0[_2231].y + _1006;
    float _2433 = cbLight._m0[_2231].z + _1007;
    float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
    float _2438 = _2437 * _2431;
    float _2439 = _2437 * _2432;
    float _2440 = _2437 * _2433;
    float _2441 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2231].xyz));
    float _4638 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2445 = dot(vec3(_926, _927, _928), vec3(_2438, _2439, _2440));
    float _4649 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _2449 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2438, _2439, _2440));
    float _4660 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2453 = _2430 * _2430;
    float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
    float _2464 = exp2(log2(1.0 - (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) * 5.0);
    float _2471 = 1.0 - _2430;
    float _2481 = (0.5 / (((_2359 * ((_2444 * _2471) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2471) + _2430) * _2444))) * _2444;
    float _4671 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2483 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
    float _2493 = (((((_2464 * _2381) + _1087) * cbLight._m0[_2418].x) * _2483) * _2214) + ((((cbLight._m0[_2330].x * _2183) * ((_2380 * _2381) + _1087)) * _2404) * _2227);
    float _2494 = (((((_2464 * _2383) + _1089) * cbLight._m0[_2418].y) * _2483) * _2214) + ((((cbLight._m0[_2330].y * _2184) * ((_2380 * _2383) + _1089)) * _2404) * _2227);
    float _2495 = (((((_2464 * _2384) + _1090) * cbLight._m0[_2418].z) * _2483) * _2214) + ((((cbLight._m0[_2330].z * _2185) * ((_2380 * _2384) + _1090)) * _2404) * _2227);
    float _2557;
    float _2559;
    float _2561;
    if (_2267)
    {
        _2557 = _2493;
        _2559 = _2494;
        _2561 = _2495;
    }
    else
    {
        uint _2563 = _2191 + 2u;
        uint _2567 = _2191 + 10u;
        float _2581 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2563].w)) * _929) * 0.949999988079071044921875);
        float _2582 = _2581 * _2581;
        float _2583 = cbLight._m0[_2563].x + _1005;
        float _2584 = cbLight._m0[_2563].y + _1006;
        float _2585 = cbLight._m0[_2563].z + _1007;
        float _2589 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
        float _2590 = _2589 * _2583;
        float _2591 = _2589 * _2584;
        float _2592 = _2589 * _2585;
        float _2593 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2563].xyz));
        float _4682 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2597 = dot(vec3(_926, _927, _928), vec3(_2590, _2591, _2592));
        float _4693 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2600 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2601 = dot(vec3(cbLight._m0[_2563].xyz), vec3(_2590, _2591, _2592));
        float _4704 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2605 = _2582 * _2582;
        float _2609 = ((_2600 * _2600) * (_2605 + (-1.0))) + 1.0;
        float _2616 = exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0);
        float _2623 = 1.0 - _2582;
        float _2633 = (0.5 / (((_2359 * ((_2596 * _2623) + _2582)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2623) + _2582) * _2596))) * _2596;
        float _4715 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2635 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2605 / ((_2609 * _2609) * 3.141590118408203125));
        float _2636 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2557 = (((((_2616 * _2381) + _1087) * cbLight._m0[_2567].x) * _2635) * _2636) + _2493;
        _2559 = (((((_2616 * _2383) + _1089) * cbLight._m0[_2567].y) * _2635) * _2636) + _2494;
        _2561 = (((((_2616 * _2384) + _1090) * cbLight._m0[_2567].z) * _2635) * _2636) + _2495;
    }
    float _2671;
    float _2673;
    float _2675;
    if (_2285)
    {
        _2671 = _2557;
        _2673 = _2559;
        _2675 = _2561;
    }
    else
    {
        uint _2682 = _2191 + 3u;
        uint _2686 = _2191 + 11u;
        float _2700 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2682].w)) * _929) * 0.949999988079071044921875);
        float _2701 = _2700 * _2700;
        float _2702 = cbLight._m0[_2682].x + _1005;
        float _2703 = cbLight._m0[_2682].y + _1006;
        float _2704 = cbLight._m0[_2682].z + _1007;
        float _2708 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
        float _2709 = _2708 * _2702;
        float _2710 = _2708 * _2703;
        float _2711 = _2708 * _2704;
        float _2712 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2682].xyz));
        float _4731 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2715 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2716 = dot(vec3(_926, _927, _928), vec3(_2709, _2710, _2711));
        float _4742 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2719 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2720 = dot(vec3(cbLight._m0[_2682].xyz), vec3(_2709, _2710, _2711));
        float _4753 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2724 = _2701 * _2701;
        float _2728 = ((_2719 * _2719) * (_2724 + (-1.0))) + 1.0;
        float _2735 = exp2(log2(1.0 - (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) * 5.0);
        float _2742 = 1.0 - _2701;
        float _2752 = (0.5 / (((_2359 * ((_2715 * _2742) + _2701)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2742) + _2701) * _2715))) * _2715;
        float _4764 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2754 = (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2724 / ((_2728 * _2728) * 3.141590118408203125));
        float _2755 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2671 = (((((_2735 * _2381) + _1087) * cbLight._m0[_2686].x) * _2754) * _2755) + _2557;
        _2673 = (((((_2735 * _2383) + _1089) * cbLight._m0[_2686].y) * _2754) * _2755) + _2559;
        _2675 = (((((_2735 * _2384) + _1090) * cbLight._m0[_2686].z) * _2754) * _2755) + _2561;
    }
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    if (_2189.y == 0u)
    {
        float _2830 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2830;
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2830;
        float _2833 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2830;
        uvec4 _2845 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2846 = _2845.x;
        uint _2857 = uint((float(_2845.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1026) / _2846))) + floor(float(uint(cbSceneParam._m0[85u].x * _1025) / _2846)));
        float _2867 = (log2(_2833 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2868 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        uint _2871 = uint(isnan(14.0) ? _2868 : (isnan(_2868) ? 14.0 : min(_2868, 14.0)));
        uvec4 _2876 = texelFetch(g_lightClusterGridBuffer, int(((_2871 << 2u) + (_2857 << 6u)) >> 2u));
        uint _2877 = _2876.x;
        uint _2878 = _2845.z;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        if (((((1u << ((_2878 >> 4u) & 15u)) + 4294967295u) & _2877) == 0u) || ((_2878 & 240u) == 0u))
        {
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
        }
        else
        {
            float _2979;
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            uint _3137 = 0u;
            uint _3146;
            bool _3147;
            for (;;)
            {
                _3146 = texelFetch(g_lightClassification, int((((_2871 << 5u) + (_2857 << 9u)) + (_3137 << 2u)) >> 2u)).x;
                _3147 = _3146 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3147)
                {
                    frontier_phi_66_pred = _3131;
                    frontier_phi_66_pred_1 = _3136;
                    frontier_phi_66_pred_2 = _3135;
                    frontier_phi_66_pred_3 = _3134;
                    frontier_phi_66_pred_4 = _3133;
                    frontier_phi_66_pred_5 = _3132;
                }
                else
                {
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    uint _3282;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3146;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    for (;;)
                    {
                        uint _3286 = uint(findLSB(_3282)) + (_3137 << 5u);
                        uint _3283 = (_3282 + 4294967295u) & _3282;
                        uint _3288 = _3286 * 48u;
                        vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3288)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 3u)).x));
                        uint _3308 = (_3286 * 48u) + 4u;
                        vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 3u)).x));
                        uint _3327 = (_3286 * 48u) + 8u;
                        vec3 _3338 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x));
                        float _3342 = _3302.x - _2831;
                        float _3343 = _3302.y - _2832;
                        float _3344 = _3302.z - _2833;
                        float _3345 = dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344));
                        float _3348 = inversesqrt(_3345);
                        float _3349 = _3348 * _3342;
                        float _3350 = _3348 * _3343;
                        float _3351 = _3348 * _3344;
                        float _3352 = dot(vec3(_1044, _1047, _1050), vec3(_3349, _3350, _3351));
                        float _3357 = 1.0 - (_3345 * _3302.w);
                        float _4790 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3358 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3359 = sqrt(_3345) * _3321.w;
                        float _3362 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                        float _3363 = _3362 * _3362;
                        float _3366 = ((1.0 - _3363) * _3352) + _3363;
                        float _3369 = _3359 * _3359;
                        float _3373 = ((isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))) * _3358) / ((_3369 * 0.699999988079071044921875) + 1.0);
                        float _3377 = (-0.0) - _2831;
                        float _3378 = (-0.0) - _2832;
                        float _3379 = (-0.0) - _2833;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3384 = _3383 * _3377;
                        float _3385 = _3383 * _3378;
                        float _3386 = _3383 * _3379;
                        float _3394 = exp2(log2(1.0 / ((_3369 * 3.5) + 5.0)) * 0.25);
                        float _3395 = 1.0 - _1119;
                        float _3402 = sqrt(1.0 - ((1.0 - (_3395 * _3395)) * (1.0 - (_3394 * _3394))));
                        float _3403 = _3402 * _3402;
                        float _3404 = _3403 * _3403;
                        float _3405 = _3384 + _3349;
                        float _3406 = _3385 + _3350;
                        float _3407 = _3386 + _3351;
                        float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                        float _3415 = dot(vec3(_1044, _1047, _1050), vec3(_3384, _3385, _3386));
                        float _4806 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                        float _3419 = dot(vec3(_1044, _1047, _1050), vec3(_3411 * _3405, _3411 * _3406, _3411 * _3407));
                        float _4817 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3426 = ((_3422 * _3422) * (_3404 + (-1.0))) + 1.0;
                        float _3427 = _3362 * _3403;
                        float _3428 = _3427 * _3427;
                        float _3431 = ((1.0 - _3428) * _3352) + _3428;
                        float _4828 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3432 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                        float _3433 = 1.0 - _3403;
                        float _3443 = (0.5 / (((_3432 * ((_3418 * _3433) + _3403)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3403) * _3418))) * _3432;
                        float _4839 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3454 = (((_3404 * 3.1415927410125732421875) * (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0)))) / ((_3426 * _3426) * ((_3369 * 2.1991131305694580078125) + 3.141590118408203125))) * _3358;
                        _3206 = (_3373 * _3321.x) + _3279;
                        _3207 = (_3373 * _3321.y) + _3280;
                        _3208 = (_3373 * _3321.z) + _3281;
                        _3203 = (_3454 * _3338.x) + _3276;
                        _3204 = (_3454 * _3338.y) + _3277;
                        _3205 = (_3454 * _3338.z) + _3278;
                        if (_3283 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3283;
                        }
                    }
                    frontier_phi_66_pred = _3203;
                    frontier_phi_66_pred_1 = _3208;
                    frontier_phi_66_pred_2 = _3207;
                    frontier_phi_66_pred_3 = _3206;
                    frontier_phi_66_pred_4 = _3205;
                    frontier_phi_66_pred_5 = _3204;
                }
                _2979 = frontier_phi_66_pred;
                _2989 = frontier_phi_66_pred_1;
                _2987 = frontier_phi_66_pred_2;
                _2985 = frontier_phi_66_pred_3;
                _2983 = frontier_phi_66_pred_4;
                _2981 = frontier_phi_66_pred_5;
                uint _3138 = _3137 + 1u;
                if (_3138 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3131 = _2979;
                    _3132 = _2981;
                    _3133 = _2983;
                    _3134 = _2985;
                    _3135 = _2987;
                    _3136 = _2989;
                    _3137 = _3138;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
        }
        uvec4 _2992 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2993 = _2992.z;
        uint _2995 = (_2993 >> 8u) & 15u;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        if (((4294967295u << _2995) & _2877) == 0u)
        {
            _3099 = _2978;
            _3101 = _2980;
            _3103 = _2982;
            _3105 = _2984;
            _3107 = _2986;
            _3109 = _2988;
        }
        else
        {
            float _3124 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
            float _3125 = _3124 * _2831;
            float _3126 = _3124 * _2832;
            float _3127 = _3124 * _2833;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2995 < ((_2993 >> 12u) & 15u))
            {
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3259 = _2978;
                float _3260 = _2980;
                float _3261 = _2982;
                float _3262 = _2984;
                float _3263 = _2986;
                float _3264 = _2988;
                uint _3265 = _2995;
                uint _3274;
                bool _3275;
                for (;;)
                {
                    _3274 = texelFetch(g_lightClassification, int((((_2871 << 5u) + (_2857 << 9u)) + (_3265 << 2u)) >> 2u)).x;
                    _3275 = _3274 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3275)
                    {
                        frontier_phi_77_pred = _3264;
                        frontier_phi_77_pred_1 = _3263;
                        frontier_phi_77_pred_2 = _3262;
                        frontier_phi_77_pred_3 = _3261;
                        frontier_phi_77_pred_4 = _3260;
                        frontier_phi_77_pred_5 = _3259;
                    }
                    else
                    {
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        uint _3487 = _3274;
                        uint _3488;
                        vec4 _3513;
                        float _3514;
                        vec4 _3529;
                        vec3 _3541;
                        vec4 _3556;
                        vec4 _3571;
                        float _3617;
                        bool _3618;
                        for (;;)
                        {
                            uint _3498 = ((_3265 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3487));
                            _3488 = (_3487 + 4294967295u) & _3487;
                            uint _3500 = _3498 * 40u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            _3514 = _3513.w;
                            uint _3516 = (_3498 * 40u) + 4u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3531 = (_3498 * 40u) + 8u;
                            _3541 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x));
                            uint _3543 = (_3498 * 40u) + 16u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3498 * 40u) + 20u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3498 * 40u) + 24u;
                            vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3592 = (_3498 * 40u) + 28u;
                            vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            _3617 = fma(_2833, _3605.z, fma(_2832, _3605.y, _3605.x * _2831)) + _3605.w;
                            _3618 = !((fma(_2833, _3586.z, fma(_2832, _3586.y, _3586.x * _2831)) + _3586.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3618)
                            {
                                float _3645 = _3513.x - _2831;
                                float _3646 = _3513.y - _2832;
                                float _3647 = _3513.z - _2833;
                                float _3648 = dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647));
                                float _3651 = inversesqrt(_3648);
                                float _3652 = _3651 * _3645;
                                float _3653 = _3651 * _3646;
                                float _3654 = _3651 * _3647;
                                float _3658 = 1.0 - (_3648 / (_3514 * _3514));
                                float _4850 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3663 = sqrt(_3648) * _3529.w;
                                float _3665 = 1.39999997615814208984375 / (_3663 + 1.39999997615814208984375);
                                float _3666 = _3665 * _3665;
                                float _3669 = ((1.0 - _3666) * dot(vec3(_3652, _3653, _3654), vec3(_1044, _1047, _1050))) + _3666;
                                float _3672 = _3663 * _3663;
                                float _3676 = (fma(_2833, _3556.z, fma(_2832, _3556.y, _3556.x * _2831)) + _3556.w) / _3617;
                                float _3677 = (fma(_2833, _3571.z, fma(_2832, _3571.y, _3571.x * _2831)) + _3571.w) / _3617;
                                float _3681 = 1.0 - dot(vec2(_3676, _3677), vec2(_3676, _3677));
                                float _4866 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3683 = _3682 * (((isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0))) * _3659) / ((_3672 * 0.699999988079071044921875) + 1.0));
                                float _3695 = exp2(log2(1.0 / ((_3672 * 3.5) + 5.0)) * 0.25);
                                float _3696 = 1.0 - _1119;
                                float _3703 = sqrt(1.0 - ((1.0 - (_3696 * _3696)) * (1.0 - (_3695 * _3695))));
                                float _3704 = _3703 * _3703;
                                float _3705 = _3704 * _3704;
                                float _3706 = _3652 - _3125;
                                float _3707 = _3653 - _3126;
                                float _3708 = _3654 - _3127;
                                float _3712 = inversesqrt(dot(vec3(_3706, _3707, _3708), vec3(_3706, _3707, _3708)));
                                float _3716 = dot(vec3(_1044, _1047, _1050), vec3((-0.0) - _3125, (-0.0) - _3126, (-0.0) - _3127));
                                float _4877 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3720 = dot(vec3(_1044, _1047, _1050), vec3(_3712 * _3706, _3712 * _3707, _3712 * _3708));
                                float _4888 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3723 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3727 = ((_3723 * _3723) * (_3705 + (-1.0))) + 1.0;
                                float _3728 = _3665 * _3704;
                                float _3729 = _3728 * _3728;
                                float _3735 = ((1.0 - _3729) * dot(vec3(_1044, _1047, _1050), vec3(_3652, _3653, _3654))) + _3729;
                                float _4899 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3736 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                                float _3737 = 1.0 - _3704;
                                float _3747 = (0.5 / (((_3736 * ((_3719 * _3737) + _3704)) + 9.9999999392252902907785028219223e-09) + (((_3736 * _3737) + _3704) * _3719))) * _3736;
                                float _4910 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3757 = (_3682 * _3659) * (((_3705 * 3.1415927410125732421875) * (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0)))) / ((_3727 * _3727) * ((_3672 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3683 * _3529.y;
                                frontier_phi_83_pred_1 = _3683 * _3529.x;
                                frontier_phi_83_pred_2 = _3757 * _3541.z;
                                frontier_phi_83_pred_3 = _3757 * _3541.y;
                                frontier_phi_83_pred_4 = _3757 * _3541.x;
                                frontier_phi_83_pred_5 = _3683 * _3529.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3765 = frontier_phi_83_pred;
                            _3764 = frontier_phi_83_pred_1;
                            _3763 = frontier_phi_83_pred_2;
                            _3762 = frontier_phi_83_pred_3;
                            _3761 = frontier_phi_83_pred_4;
                            _3766 = frontier_phi_83_pred_5;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            if (_3488 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3488;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3473;
                        frontier_phi_77_pred_1 = _3472;
                        frontier_phi_77_pred_2 = _3471;
                        frontier_phi_77_pred_3 = _3470;
                        frontier_phi_77_pred_4 = _3469;
                        frontier_phi_77_pred_5 = _3468;
                    }
                    _3110 = frontier_phi_77_pred;
                    _3108 = frontier_phi_77_pred_1;
                    _3106 = frontier_phi_77_pred_2;
                    _3104 = frontier_phi_77_pred_3;
                    _3102 = frontier_phi_77_pred_4;
                    _3100 = frontier_phi_77_pred_5;
                    uint _3266 = _3265 + 1u;
                    if (_3266 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3259 = _3100;
                        _3260 = _3102;
                        _3261 = _3104;
                        _3262 = _3106;
                        _3263 = _3108;
                        _3264 = _3110;
                        _3265 = _3266;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3104;
                frontier_phi_58_59_ladder_1 = _3110;
                frontier_phi_58_59_ladder_2 = _3108;
                frontier_phi_58_59_ladder_3 = _3106;
                frontier_phi_58_59_ladder_4 = _3102;
                frontier_phi_58_59_ladder_5 = _3100;
            }
            else
            {
                frontier_phi_58_59_ladder = _2982;
                frontier_phi_58_59_ladder_1 = _2988;
                frontier_phi_58_59_ladder_2 = _2986;
                frontier_phi_58_59_ladder_3 = _2984;
                frontier_phi_58_59_ladder_4 = _2980;
                frontier_phi_58_59_ladder_5 = _2978;
            }
            _3099 = frontier_phi_58_59_ladder_5;
            _3101 = frontier_phi_58_59_ladder_4;
            _3103 = frontier_phi_58_59_ladder;
            _3105 = frontier_phi_58_59_ladder_3;
            _3107 = frontier_phi_58_59_ladder_2;
            _3109 = frontier_phi_58_59_ladder_1;
        }
        float _3114 = isnan(1.0) ? _1103 : (isnan(_1103) ? 1.0 : min(_1103, 1.0));
        _2890 = (_3114 * _3105) + _2323;
        _2892 = (_3114 * _3107) + _2325;
        _2894 = (_3114 * _3109) + _2327;
        _2896 = ((_3099 * _1087) * _3114) + _2671;
        _2898 = ((_3101 * _1089) * _3114) + _2673;
        _2900 = ((_3103 * _1090) * _3114) + _2675;
    }
    else
    {
        _2890 = _2323;
        _2892 = _2325;
        _2894 = _2327;
        _2896 = _2671;
        _2898 = _2673;
        _2900 = _2675;
    }
    float _4926 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _4937 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _4948 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _2917 = ((isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2890 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1103))) + ((_2896 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1942)) * cbPerFrame._m0[3u].x);
    float _2918 = ((isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_2892 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1103))) + ((_2898 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1942)) * cbPerFrame._m0[3u].x);
    float _2919 = ((isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0))) * (_2894 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1103))) + ((_2900 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1942)) * cbPerFrame._m0[3u].x);
    uint _2920 = _291 + 6u;
    float _2928 = _1025 / cbSceneParam._m0[86u].x;
    float _2929 = _1026 / cbSceneParam._m0[86u].y;
    vec4 _2943 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2928, _2929, (log2((isnan(cbSceneParam._m0[77u].w) ? _948 : (isnan(_948) ? cbSceneParam._m0[77u].w : min(_948, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2945 = _2943.x;
    float _2946 = _2943.y;
    float _2947 = _2943.z;
    float _2948 = _2943.w;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    if (_948 > cbSceneParam._m0[78u].w)
    {
        float _3003 = isnan(_948) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _948 : min(cbSceneParam._m0[80u].w, _948));
        float _3004 = _3003 / _948;
        float _3015 = _3004 * _998;
        float _3016 = _999 * _3004;
        float _3017 = (-0.0) - _3016;
        float _3019 = _3004 * _1000;
        float _3021 = (cbSceneParam._m0[77u].w * _3017) / _3003;
        float _3022 = _3021 + cbSceneParam._m0[79u].w;
        float _3023 = cbSceneParam._m0[79u].w - _3016;
        float _3029 = sqrt(((_3015 * _3015) + (_3016 * _3016)) + (_3019 * _3019));
        float _3032 = (1.0 - (cbSceneParam._m0[77u].w / _3003)) * _3029;
        float _3037 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3039 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3216;
        if (abs((_3017 - _3021) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3216 = ((((_3022 > 0.0) ? exp2(_3037 * _3022) : (2.0 - exp2(_3039 * _3022))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3032;
        }
        else
        {
            float _3160 = 1.0 / cbSceneParam._m0[80u].x;
            float _3161 = isnan(_3023) ? _3022 : (isnan(_3022) ? _3023 : max(_3022, _3023));
            float _3162 = isnan(_3023) ? _3022 : (isnan(_3022) ? _3023 : min(_3022, _3023));
            float _3171 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : min(_3161, 0.0));
            float _3172 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : min(_3162, 0.0));
            _3216 = ((abs(_3029 / _3017) * cbSceneParam._m0[80u].y) * ((((_3171 - _3172) * 2.0) - ((exp2(_3037 * (isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0)))) - exp2(_3037 * (isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))))) * _3160)) - ((exp2(_3039 * _3171) - exp2(_3039 * _3172)) * _3160))) + (_3032 * cbSceneParam._m0[80u].z);
        }
        vec4 _3218 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2928, _2929, 1.0), 0.0);
        float _3227 = exp2((_3216 * (-1.44269502162933349609375)) * (1.0 - _3218.w));
        float _3228 = log2(_3227);
        float _3244 = log2(_2948);
        _3041 = (exp2(_3244 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].x)) * _3218.x) / cbSceneParam._m0[78u].x)) + _2945;
        _3043 = (exp2(_3244 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].y)) * _3218.y) / cbSceneParam._m0[78u].y)) + _2946;
        _3045 = (exp2(_3244 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3228 * cbSceneParam._m0[78u].z)) * _3218.z) / cbSceneParam._m0[78u].z)) + _2947;
        _3047 = _3227 * _2948;
    }
    else
    {
        _3041 = _2945;
        _3043 = _2946;
        _3045 = _2947;
        _3047 = _2948;
    }
    bool _3254;
    vec4 _3057;
    vec4 _3079;
    float _3081;
    float _3085;
    float _3086;
    float _3087;
    float _3088;
    bool _3098;
    for (;;)
    {
        _3057 = cbMatDynParam._m0[0u];
        float _3059 = roundEven(_3057.y);
        bool _3060 = _3059 == 3.0;
        float _3061 = log2(_3047);
        float _3068 = exp2(_3061 * cbSceneParam._m0[78u].x) * _2917;
        float _3069 = exp2(_3061 * cbSceneParam._m0[78u].y) * _2918;
        float _3070 = exp2(_3061 * cbSceneParam._m0[78u].z) * _2919;
        float _3077 = _1014 + (-0.5);
        _3079 = cbMtdParam._m0[1u];
        _3081 = _3079.y * _3077;
        float _3084 = (_3059 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3085 = _3084 * (_3060 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3041)));
        _3086 = _3084 * (_3060 ? _3069 : (_3069 + (cbSceneParam._m0[72u].w * _3043)));
        _3087 = _3084 * (_3060 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3045)));
        _3088 = _3077 * 0.999000012874603271484375;
        _3098 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3098)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3088) < 0.5)
            {
                _3254 = true;
                break;
            }
        }
        uint _3195 = _1063 + uint(_3057.w);
        if ((cbInstanceData._m0[_3195].w < 1.0) && ((cbInstanceData._m0[_3195].w + _3088) < 0.5))
        {
            _3254 = true;
            break;
        }
        if ((_3081 + 1.0) < _3079.x)
        {
            _3254 = true;
            break;
        }
        _3254 = false;
        break;
    }
    float _3459;
    if (_3254)
    {
        discard_state = true;
        _3459 = 0.0;
    }
    else
    {
        _3459 = cbInstanceData._m0[_2920].w;
    }
    SV_Target.x = _3085;
    SV_Target.y = _3086;
    SV_Target.z = _3087;
    SV_Target.w = _3459;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2920].w;
    discard_exit();
}


