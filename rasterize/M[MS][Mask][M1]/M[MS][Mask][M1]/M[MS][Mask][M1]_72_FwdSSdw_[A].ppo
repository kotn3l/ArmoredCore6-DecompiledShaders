#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1406;
float _3810;
float _3811;
float _3812;
float _3813;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _360.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[23u].w) + _410) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3822 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _435 = (_428 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _436 = (_428 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _437 = (_428 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _360.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[23u].w) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3833 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _514 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435);
    float _517 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436);
    float _520 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437);
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _557 = _555.x;
    float _558 = _555.y;
    float _559 = _555.z;
    float _566 = ((_538.x - _557) * _428) + _557;
    float _567 = ((_538.y - _558) * _428) + _558;
    float _568 = ((_538.z - _559) * _428) + _559;
    vec4 _580 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _593 = ((_580.z - _568) * _501) + _568;
    float _596 = ((((_580.x - _566) * _501) + _566) * 2.0) + (-1.0);
    float _598 = ((((_580.y - _567) * _501) + _567) * 2.0) + (-1.0);
    float _599 = dot(vec2(_596, _598), vec2(_596, _598));
    float _3844 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _604 = sqrt(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _630 = (((_618.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _596;
    float _631 = (((_618.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _598;
    float _634 = fma(_604, _238, fma(_631, _245, _630 * _231));
    float _637 = fma(_604, _239, fma(_631, _246, _630 * _232));
    float _640 = fma(_604, _240, fma(_631, _247, _630 * _233));
    float _644 = inversesqrt(dot(vec3(_634, _637, _640), vec3(_634, _637, _640)));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _673 = _671.x;
    float _674 = 1.0 - _673;
    float _683 = (cbMtdParam._m0[19u].x + dot(vec4(_644 * _634, _644 * _637, _644 * _640, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_673 - _674) * cbMtdParam._m0[24u].z) + _674) * cbMtdParam._m0[21u].z);
    float _3855 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _684 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _691 = (_684 * (cbMtdParam._m0[17u].x - _514)) + _514;
    float _692 = (_684 * (cbMtdParam._m0[17u].y - _517)) + _517;
    float _693 = (_684 * (cbMtdParam._m0[17u].z - _520)) + _520;
    vec4 _719 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _721 = _719.x;
    float _738 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _721) * _428) + _721;
    float _755 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _738) * _501) + _738;
    float _759 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _755) * cbMtdParam._m0[19u].z) + _755;
    float _761 = _759 - (_759 * _684);
    float _765 = (cbMtdParam._m0[19u].w * (_618.z - _593)) + _593;
    vec4 _778 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _785 = (_778.x * 2.0) + (-1.0);
    float _786 = (_778.y * 2.0) + (-1.0);
    float _787 = dot(vec2(_785, _786), vec2(_785, _786));
    float _3866 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _795 = ((_778.z - _765) * _684) + _765;
    float _805 = ((sqrt(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) - _604) * _684) + _604;
    float _808 = (((_785 - _630) * _684) + _630) + (cbMtdParam._m0[21u].x * _630);
    float _809 = (((_786 - _631) * _684) + _631) + (cbMtdParam._m0[21u].x * _631);
    float _811 = cbMtdParam._m0[22u].x + _618.w;
    float _814 = fma(_805, _238, fma(_809, _245, _808 * _231));
    float _817 = fma(_805, _239, fma(_809, _246, _808 * _232));
    float _820 = fma(_805, _240, fma(_809, _247, _808 * _233));
    float _824 = inversesqrt(dot(vec3(_814, _817, _820), vec3(_814, _817, _820)));
    float _825 = _824 * _814;
    float _826 = _824 * _817;
    float _827 = _824 * _820;
    float _3877 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _828 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _3899 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3910 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _3921 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3932 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _833 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _847 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _898 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _888);
    float _899 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _888);
    float _900 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _888);
    float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
    float _905 = _898 * _904;
    float _906 = _899 * _904;
    float _907 = _900 * _904;
    vec4 _912 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _914 = _912.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1086 = sqrt(((_898 * _898) + (_899 * _899)) + (_900 * _900));
        float _1092 = (cbMatDynParam._m0[5u].x * _1086) + cbMatDynParam._m0[5u].y;
        float _3943 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1097 = (cbMatDynParam._m0[5u].z * _1086) + cbMatDynParam._m0[5u].w;
        float _3954 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) - _1093)) + _1093) < ((_914 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _925 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _926 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _944 = fma(_827, cbSceneParam._m0[5u].z, fma(_826, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _825));
    float _947 = fma(_827, cbSceneParam._m0[6u].z, fma(_826, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _825));
    float _950 = fma(_827, cbSceneParam._m0[7u].z, fma(_826, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _825));
    uint _963 = _250 + 9u;
    uint _964 = _963 + uint(cbMatDynParam._m0[0u].w);
    float _970 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * cbInstanceData._m0[_964].x;
    float _971 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_964].y;
    float _972 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_964].z;
    float _3965 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _973 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _974 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _3987 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _975 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _976 = 1.0 - _833;
    float _977 = _973 * _976;
    float _978 = _974 * _976;
    float _979 = _975 * _976;
    float _984 = (_973 + (-0.039999999105930328369140625)) * _833;
    float _985 = (_974 + (-0.039999999105930328369140625)) * _833;
    float _986 = (_975 + (-0.039999999105930328369140625)) * _833;
    float _987 = _984 + 0.039999999105930328369140625;
    float _989 = _985 + 0.039999999105930328369140625;
    float _990 = _986 + 0.039999999105930328369140625;
    vec4 _999 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _925, cbSceneParam._m0[86u].y * _926));
    float _1003 = ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * TEXCOORD_5.w) * _999.x;
    float _1004 = dot(vec3(_825, _826, _827), vec3(_905, _906, _907));
    float _1007 = _1004 * 2.0;
    float _1011 = (_1007 * _825) - _905;
    float _1012 = (_1007 * _826) - _906;
    float _1013 = (_1007 * _827) - _907;
    float _1017 = abs(dot(vec3(_905, _906, _907), vec3(_825, _826, _827)));
    float _3998 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1019 = sqrt(_828);
    float _1032 = exp2((_1019 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1019 * 3.0));
    float _1038 = (1.0 - _1032) * ((_1019 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1039 = _1032 * _1019;
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1405;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1130 = fma(_1075, cbModelParam._m0[26u].z, fma(_1071, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1067));
        float _1134 = fma(_1075, cbModelParam._m0[27u].z, fma(_1071, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1067));
        float _1138 = fma(_1075, cbModelParam._m0[28u].z, fma(_1071, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1067));
        float _1163 = _1067 + _825;
        float _1164 = _1071 + _826;
        float _1165 = _1075 + _827;
        float _1175 = fma(_1165, cbModelParam._m0[26u].z, fma(_1164, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163)) - _1130;
        float _1176 = fma(_1165, cbModelParam._m0[27u].z, fma(_1164, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163)) - _1134;
        float _1177 = fma(_1165, cbModelParam._m0[28u].z, fma(_1164, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163)) - _1138;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1130 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1134 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[34u].z) + ((((((_1138 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1233 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1199.x + (-0.5));
        float _1235 = _1233 * (_1199.y + (-0.5));
        float _1236 = _1233 * (_1199.z + (-0.5));
        float _1243 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1206.x + (-0.5));
        float _1245 = _1243 * (_1206.y + (-0.5));
        float _1246 = _1243 * (_1206.z + (-0.5));
        float _1253 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1213.x + (-0.5));
        float _1255 = _1253 * (_1213.y + (-0.5));
        float _1256 = _1253 * (_1213.z + (-0.5));
        float _1263 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1220.x + (-0.5));
        float _1265 = _1263 * (_1220.y + (-0.5));
        float _1266 = _1263 * (_1220.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1287 = (dot(vec3(_825, _826, _827), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1297 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4046 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1299 + 1.0))) + _1304) * _1267;
        float _1314 = _1235 * 0.5;
        float _1315 = _1245 * 0.5;
        float _1316 = _1255 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_825, _826, _827), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4079 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1341 + 1.0))) + _1346) * _1268;
        float _1356 = _1236 * 0.5;
        float _1357 = _1246 * 0.5;
        float _1358 = _1256 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_825, _826, _827), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4112 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1383 + 1.0))) + _1388) * _1269;
        _1405 = _1236;
        _1407 = _1235;
        _1408 = _1234;
        _1409 = _1246;
        _1410 = _1245;
        _1411 = _1244;
        _1412 = _1256;
        _1413 = _1255;
        _1414 = _1254;
        _1415 = _1269;
        _1416 = _1268;
        _1417 = _1267;
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
    }
    else
    {
        _1405 = _1406;
        _1407 = _1406;
        _1408 = _1406;
        _1409 = _1406;
        _1410 = _1406;
        _1411 = _1406;
        _1412 = _1406;
        _1413 = _1406;
        _1414 = _1406;
        _1415 = _1406;
        _1416 = _1406;
        _1417 = _1406;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1447 = fma(_1075, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067));
        float _1451 = fma(_1075, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067));
        float _1455 = fma(_1075, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067));
        float _1478 = _1067 + _825;
        float _1479 = _1071 + _826;
        float _1480 = _1075 + _827;
        float _1490 = fma(_1480, cbModelParam._m0[30u].z, fma(_1479, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1478)) - _1447;
        float _1491 = fma(_1480, cbModelParam._m0[31u].z, fma(_1479, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1478)) - _1451;
        float _1492 = fma(_1480, cbModelParam._m0[32u].z, fma(_1479, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1478)) - _1455;
        float _1496 = inversesqrt(dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492)));
        float _1509 = ((_1496 * _1490) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1447 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1510 = ((_1496 * _1491) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1451 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1496 * _1492) / cbModelParam._m0[35u].z) + ((((((_1455 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        float _1546 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1513.x + (-0.5));
        float _1548 = _1546 * (_1513.y + (-0.5));
        float _1549 = _1546 * (_1513.z + (-0.5));
        float _1556 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1520.x + (-0.5));
        float _1558 = _1556 * (_1520.y + (-0.5));
        float _1559 = _1556 * (_1520.z + (-0.5));
        float _1566 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1527.x + (-0.5));
        float _1568 = _1566 * (_1527.y + (-0.5));
        float _1569 = _1566 * (_1527.z + (-0.5));
        float _1576 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1534.x + (-0.5));
        float _1578 = _1576 * (_1534.y + (-0.5));
        float _1579 = _1576 * (_1534.z + (-0.5));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = _1547 * 0.5;
        float _1584 = _1557 * 0.5;
        float _1585 = _1567 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_825, _826, _827), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4175 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1610 + 1.0))) + _1615) * _1580;
        float _1625 = _1548 * 0.5;
        float _1626 = _1558 * 0.5;
        float _1627 = _1568 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_825, _826, _827), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4208 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1652 + 1.0))) + _1657) * _1581;
        float _1667 = _1549 * 0.5;
        float _1668 = _1559 * 0.5;
        float _1669 = _1569 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_825, _826, _827), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4241 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1694 + 1.0))) + _1699) * _1582;
        _1716 = _1549;
        _1717 = _1548;
        _1718 = _1547;
        _1719 = _1559;
        _1720 = _1558;
        _1721 = _1557;
        _1722 = _1569;
        _1723 = _1568;
        _1724 = _1567;
        _1725 = _1582;
        _1726 = _1581;
        _1727 = _1580;
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1729 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
    }
    else
    {
        _1716 = _1406;
        _1717 = _1406;
        _1718 = _1406;
        _1719 = _1406;
        _1720 = _1406;
        _1721 = _1406;
        _1722 = _1406;
        _1723 = _1406;
        _1724 = _1406;
        _1725 = _1406;
        _1726 = _1406;
        _1727 = _1406;
        _1728 = 0.0;
        _1729 = 0.0;
        _1730 = 0.0;
    }
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1418)) + _1418;
    float _1741 = (cbModelParam._m0[1u].x * (_1729 - _1419)) + _1419;
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1420)) + _1420;
    float _1763 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1741, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1741, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1741, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1740));
    float _1784 = _1011 * 0.5;
    float _1785 = _1012 * 0.5;
    float _1786 = _1013 * 0.5;
    float _1787 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1790 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1717, _1720, _1723, _1726));
    float _1793 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1827;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1800 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1405, _1409, _1412, _1415));
        float _1804 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1407, _1410, _1413, _1416));
        float _1808 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1815 = dot(vec4(cbModelParam._m0[39u]), vec4(_1784, _1785, _1786, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1815) ? 0.0 : (isnan(0.0) ? _1815 : max(0.0, _1815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1838;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1829 = dot(vec4(cbModelParam._m0[40u]), vec4(_1784, _1785, _1786, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1842 = (_1838 * cbModelParam._m0[1u].x) + (_1827 * (1.0 - cbModelParam._m0[1u].x));
    float _1852 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _828);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1852 : min(cbModelParam._m0[25u].z, _1852));
    float _1934;
    float _1936;
    float _1938;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1901 = fma(_1075, cbModelParam._m0[13u].z, fma(_1071, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067)) + cbModelParam._m0[13u].w;
        float _1905 = fma(_1075, cbModelParam._m0[14u].z, fma(_1071, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067)) + cbModelParam._m0[14u].w;
        float _1909 = fma(_1075, cbModelParam._m0[15u].z, fma(_1071, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067)) + cbModelParam._m0[15u].w;
        float _1912 = fma(_1013, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011));
        float _1915 = fma(_1013, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011));
        float _1918 = fma(_1013, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011));
        float _1946;
        if (_1912 > 0.0)
        {
            _1946 = abs((1.0 - _1901) / _1912);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1901 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1946 = frontier_phi_17_15_ladder;
        }
        float _2170;
        if (_1915 > 0.0)
        {
            _2170 = abs((1.0 - _1905) / _1915);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1905 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2170 = frontier_phi_26_22_ladder;
        }
        float _2427;
        if (_1918 > 0.0)
        {
            _2427 = abs((1.0 - _1909) / _1918);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1909 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2427 = frontier_phi_38_33_ladder;
        }
        float _2429 = isnan(_2170) ? _1946 : (isnan(_1946) ? _2170 : min(_1946, _2170));
        float _2430 = isnan(_2427) ? _2429 : (isnan(_2429) ? _2427 : min(_2429, _2427));
        float _2434 = (_2430 * _1912) + _1901;
        float _2435 = (_2430 * _1915) + _1905;
        float _2436 = (_2430 * _1918) + _1909;
        float _2437 = _2430 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2437;
        float _2441 = _2437 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 > _2441) || ((_2435 < _2439) || ((_2434 < _2439) || (_2434 > _2441))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2564 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2436, cbModelParam._m0[9u].z, fma(_2435, cbModelParam._m0[9u].y, _2434 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2436, cbModelParam._m0[10u].z, fma(_2435, cbModelParam._m0[10u].y, _2434 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2436, cbModelParam._m0[11u].z, fma(_2435, cbModelParam._m0[11u].y, _2434 * cbModelParam._m0[11u].x))), _1853);
            frontier_phi_16_38_ladder = _2564.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2564.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2564.x * cbModelParam._m0[1u].y;
        }
        _1934 = frontier_phi_16_38_ladder_2;
        _1936 = frontier_phi_16_38_ladder_1;
        _1938 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1922 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1011, _1012, _1013), _1853);
        _1934 = _1922.x * cbModelParam._m0[1u].y;
        _1936 = _1922.y * cbModelParam._m0[1u].y;
        _1938 = _1922.z * cbModelParam._m0[1u].y;
    }
    float _1942 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _828);
    float _1943 = isnan(_1942) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1942 : min(cbModelParam._m0[25u].w, _1942));
    float _2033;
    float _2035;
    float _2037;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1997 = fma(_1075, cbModelParam._m0[21u].z, fma(_1071, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067)) + cbModelParam._m0[21u].w;
        float _2001 = fma(_1075, cbModelParam._m0[22u].z, fma(_1071, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067)) + cbModelParam._m0[22u].w;
        float _2005 = fma(_1075, cbModelParam._m0[23u].z, fma(_1071, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067)) + cbModelParam._m0[23u].w;
        float _2008 = fma(_1013, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011));
        float _2011 = fma(_1013, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011));
        float _2014 = fma(_1013, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011));
        float _2175;
        if (_2008 > 0.0)
        {
            _2175 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2175 = frontier_phi_28_24_ladder;
        }
        float _2454;
        if (_2011 > 0.0)
        {
            _2454 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2454 = frontier_phi_40_35_ladder;
        }
        float _2667;
        if (_2014 > 0.0)
        {
            _2667 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2667 = frontier_phi_49_46_ladder;
        }
        float _2669 = isnan(_2454) ? _2175 : (isnan(_2175) ? _2454 : min(_2175, _2454));
        float _2670 = isnan(_2667) ? _2669 : (isnan(_2669) ? _2667 : min(_2669, _2667));
        float _2674 = (_2670 * _2008) + _1997;
        float _2675 = (_2670 * _2011) + _2001;
        float _2676 = (_2670 * _2014) + _2005;
        float _2677 = _2670 * 9.9999997473787516355514526367188e-05;
        float _2678 = (-1.0) - _2677;
        float _2680 = _2677 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2676 > _2680) || ((_2676 < _2678) || ((_2675 > _2680) || ((_2675 < _2678) || ((_2674 < _2678) || (_2674 > _2680))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2676, cbModelParam._m0[17u].z, fma(_2675, cbModelParam._m0[17u].y, _2674 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2676, cbModelParam._m0[18u].z, fma(_2675, cbModelParam._m0[18u].y, _2674 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2676, cbModelParam._m0[19u].z, fma(_2675, cbModelParam._m0[19u].y, _2674 * cbModelParam._m0[19u].x))), _1943);
            frontier_phi_25_49_ladder = _2875.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2875.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2875.x * cbModelParam._m0[1u].z;
        }
        _2033 = frontier_phi_25_49_ladder_2;
        _2035 = frontier_phi_25_49_ladder_1;
        _2037 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2017 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1011, _1012, _1013), _1943);
        _2033 = _2017.x * cbModelParam._m0[1u].z;
        _2035 = _2017.y * cbModelParam._m0[1u].z;
        _2037 = _2017.z * cbModelParam._m0[1u].z;
    }
    float _2050 = (((_1038 * _987) + _1039) * _1003) * ((cbModelParam._m0[1u].w * (_2033 - _1934)) + _1934);
    float _2052 = (((_1038 * _989) + _1039) * _1003) * ((cbModelParam._m0[1u].w * (_2035 - _1936)) + _1936);
    float _2054 = (((_1038 * _990) + _1039) * _1003) * ((cbModelParam._m0[1u].w * (_2037 - _1938)) + _1938);
    float _2057 = fma(_2054, cbSceneParam._m0[89u].z, fma(_2052, cbSceneParam._m0[89u].y, _2050 * cbSceneParam._m0[89u].x));
    float _2060 = fma(_2054, cbSceneParam._m0[90u].z, fma(_2052, cbSceneParam._m0[90u].y, _2050 * cbSceneParam._m0[90u].x));
    float _2063 = fma(_2054, cbSceneParam._m0[91u].z, fma(_2052, cbSceneParam._m0[91u].y, _2050 * cbSceneParam._m0[91u].x));
    vec4 _2071 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_925, _926));
    float _2073 = _2071.w;
    float _2085 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2073);
    float _2086 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2073);
    float _2087 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2073);
    uvec4 _2091 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2093 = _2091.x * 14u;
    uint _2094 = _2093 + 13u;
    float _2101 = _1003 + (-1.0);
    float _2106 = (cbLight._m0[_2094].x * _2101) + 1.0;
    float _2107 = (cbLight._m0[_2094].y * _2101) + 1.0;
    float _2108 = (cbLight._m0[_2094].z * _2101) + 1.0;
    float _2109 = (cbLight._m0[_2094].w * _2101) + 1.0;
    uint _2110 = _2093 + 5u;
    float _2116 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
    uint _2120 = _2093 + 4u;
    float _2129 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
    uint _2133 = _2093 | 1u;
    float _2144 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_825, _826, _827));
    float _2147 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_825, _826, _827));
    float _4377 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _4388 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2152 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.3183098733425140380859375;
    float _2154 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * 0.3183098733425140380859375;
    float _2161 = ((cbLight._m0[_2110].x * _2116) * _2154) + (((cbLight._m0[_2120].x * _2085) * _2129) * _2152);
    float _2162 = ((_2116 * cbLight._m0[_2110].y) * _2154) + (((cbLight._m0[_2120].y * _2086) * _2129) * _2152);
    float _2163 = ((_2116 * cbLight._m0[_2110].z) * _2154) + (((cbLight._m0[_2120].z * _2087) * _2129) * _2152);
    uvec4 _2167 = floatBitsToUint(cbLight._m0[_2093 + 12u]);
    bool _2169 = _2167.x == 0u;
    float _2180;
    float _2182;
    float _2184;
    if (_2169)
    {
        _2180 = _2161;
        _2182 = _2162;
        _2184 = _2163;
    }
    else
    {
        uint _2188 = _2093 + 6u;
        float _2204 = (dot(vec3(cbLight._m0[_2093 + 2u].xyz), vec3(_825, _826, _827)) * 0.5) + 0.5;
        float _2205 = _2204 * _2204;
        float _4399 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2206 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2207 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2180 = (((cbLight._m0[_2188].x * 0.3183098733425140380859375) * _2206) * _2207) + _2161;
        _2182 = (((cbLight._m0[_2188].y * 0.3183098733425140380859375) * _2206) * _2207) + _2162;
        _2184 = (((cbLight._m0[_2188].z * 0.3183098733425140380859375) * _2206) * _2207) + _2163;
    }
    bool _2187 = _2167.y == 0u;
    float _2225;
    float _2227;
    float _2229;
    if (_2187)
    {
        _2225 = _2180;
        _2227 = _2182;
        _2229 = _2184;
    }
    else
    {
        uint _2398 = _2093 + 7u;
        float _2414 = (dot(vec3(cbLight._m0[_2093 + 3u].xyz), vec3(_825, _826, _827)) * 0.5) + 0.5;
        float _2415 = _2414 * _2414;
        float _4415 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2416 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2417 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2225 = (((cbLight._m0[_2398].x * 0.3183098733425140380859375) * _2416) * _2417) + _2180;
        _2227 = (((cbLight._m0[_2398].y * 0.3183098733425140380859375) * _2416) * _2417) + _2182;
        _2229 = (((cbLight._m0[_2398].z * 0.3183098733425140380859375) * _2416) * _2417) + _2184;
    }
    uint _2232 = _2093 + 8u;
    float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _828) * 0.949999988079071044921875);
    float _2246 = _2245 * _2245;
    float _2247 = cbLight._m0[_2093].x + _905;
    float _2248 = cbLight._m0[_2093].y + _906;
    float _2249 = cbLight._m0[_2093].z + _907;
    float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
    float _2254 = _2253 * _2247;
    float _2255 = _2253 * _2248;
    float _2256 = _2253 * _2249;
    float _2257 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2093].xyz));
    float _4431 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _4442 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _2261 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2262 = dot(vec3(_825, _826, _827), vec3(_2254, _2255, _2256));
    float _4453 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2266 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2254, _2255, _2256));
    float _4464 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2270 = _2246 * _2246;
    float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
    float _2282 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
    float _2283 = 0.959999978542327880859375 - _984;
    float _2285 = 0.959999978542327880859375 - _985;
    float _2286 = 0.959999978542327880859375 - _986;
    float _2293 = 1.0 - _2246;
    float _2304 = (0.5 / (((_2261 * ((_2260 * _2293) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2293) + _2246) * _2260))) * _2260;
    float _4475 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2306 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
    uint _2320 = _2093 + 9u;
    float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2133].w)) * _828) * 0.949999988079071044921875);
    float _2332 = _2331 * _2331;
    float _2333 = cbLight._m0[_2133].x + _905;
    float _2334 = cbLight._m0[_2133].y + _906;
    float _2335 = cbLight._m0[_2133].z + _907;
    float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
    float _2340 = _2339 * _2333;
    float _2341 = _2339 * _2334;
    float _2342 = _2339 * _2335;
    float _2343 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2133].xyz));
    float _4486 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2347 = dot(vec3(_825, _826, _827), vec3(_2340, _2341, _2342));
    float _4497 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2351 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2340, _2341, _2342));
    float _4508 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2355 = _2332 * _2332;
    float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
    float _2366 = exp2(log2(1.0 - (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * 5.0);
    float _2373 = 1.0 - _2332;
    float _2383 = (0.5 / (((_2261 * ((_2346 * _2373) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2373) + _2332) * _2346))) * _2346;
    float _4519 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
    float _2395 = (((((_2366 * _2283) + _987) * cbLight._m0[_2320].x) * _2385) * _2116) + ((((cbLight._m0[_2232].x * _2085) * ((_2282 * _2283) + _987)) * _2306) * _2129);
    float _2396 = (((((_2366 * _2285) + _989) * cbLight._m0[_2320].y) * _2385) * _2116) + ((((cbLight._m0[_2232].y * _2086) * ((_2282 * _2285) + _989)) * _2306) * _2129);
    float _2397 = (((((_2366 * _2286) + _990) * cbLight._m0[_2320].z) * _2385) * _2116) + ((((cbLight._m0[_2232].z * _2087) * ((_2282 * _2286) + _990)) * _2306) * _2129);
    float _2459;
    float _2461;
    float _2463;
    if (_2169)
    {
        _2459 = _2395;
        _2461 = _2396;
        _2463 = _2397;
    }
    else
    {
        uint _2465 = _2093 + 2u;
        uint _2469 = _2093 + 10u;
        float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _828) * 0.949999988079071044921875);
        float _2484 = _2483 * _2483;
        float _2485 = cbLight._m0[_2465].x + _905;
        float _2486 = cbLight._m0[_2465].y + _906;
        float _2487 = cbLight._m0[_2465].z + _907;
        float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
        float _2492 = _2491 * _2485;
        float _2493 = _2491 * _2486;
        float _2494 = _2491 * _2487;
        float _2495 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2465].xyz));
        float _4530 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2499 = dot(vec3(_825, _826, _827), vec3(_2492, _2493, _2494));
        float _4541 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
        float _4552 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2507 = _2484 * _2484;
        float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
        float _2518 = exp2(log2(1.0 - (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) * 5.0);
        float _2525 = 1.0 - _2484;
        float _2535 = (0.5 / (((_2261 * ((_2498 * _2525) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2525) + _2484) * _2498))) * _2498;
        float _4563 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2459 = (((((_2518 * _2283) + _987) * cbLight._m0[_2469].x) * _2537) * _2538) + _2395;
        _2461 = (((((_2518 * _2285) + _989) * cbLight._m0[_2469].y) * _2537) * _2538) + _2396;
        _2463 = (((((_2518 * _2286) + _990) * cbLight._m0[_2469].z) * _2537) * _2538) + _2397;
    }
    float _2573;
    float _2575;
    float _2577;
    if (_2187)
    {
        _2573 = _2459;
        _2575 = _2461;
        _2577 = _2463;
    }
    else
    {
        uint _2584 = _2093 + 3u;
        uint _2588 = _2093 + 11u;
        float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2584].w)) * _828) * 0.949999988079071044921875);
        float _2603 = _2602 * _2602;
        float _2604 = cbLight._m0[_2584].x + _905;
        float _2605 = cbLight._m0[_2584].y + _906;
        float _2606 = cbLight._m0[_2584].z + _907;
        float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
        float _2611 = _2610 * _2604;
        float _2612 = _2610 * _2605;
        float _2613 = _2610 * _2606;
        float _2614 = dot(vec3(_825, _826, _827), vec3(cbLight._m0[_2584].xyz));
        float _4579 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2618 = dot(vec3(_825, _826, _827), vec3(_2611, _2612, _2613));
        float _4590 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2622 = dot(vec3(cbLight._m0[_2584].xyz), vec3(_2611, _2612, _2613));
        float _4601 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2626 = _2603 * _2603;
        float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
        float _2637 = exp2(log2(1.0 - (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) * 5.0);
        float _2644 = 1.0 - _2603;
        float _2654 = (0.5 / (((_2261 * ((_2617 * _2644) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2261 * _2644) + _2603) * _2617))) * _2617;
        float _4612 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2656 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
        float _2657 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2573 = (((((_2637 * _2283) + _987) * cbLight._m0[_2588].x) * _2656) * _2657) + _2459;
        _2575 = (((((_2637 * _2285) + _989) * cbLight._m0[_2588].y) * _2656) * _2657) + _2461;
        _2577 = (((((_2637 * _2286) + _990) * cbLight._m0[_2588].z) * _2656) * _2657) + _2463;
    }
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    if (_2091.y == 0u)
    {
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2732;
        float _2734 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2732;
        float _2735 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2732;
        uvec4 _2747 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2748 = _2747.x;
        uint _2759 = uint((float(_2747.y) * floor(float(uint(cbSceneParam._m0[85u].y * _926) / _2748))) + floor(float(uint(cbSceneParam._m0[85u].x * _925) / _2748)));
        float _2769 = (log2(_2735 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2770 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        uint _2773 = uint(isnan(14.0) ? _2770 : (isnan(_2770) ? 14.0 : min(_2770, 14.0)));
        uvec4 _2778 = texelFetch(g_lightClusterGridBuffer, int(((_2773 << 2u) + (_2759 << 6u)) >> 2u));
        uint _2779 = _2778.x;
        uint _2780 = _2747.z;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        if (((((1u << ((_2780 >> 4u) & 15u)) + 4294967295u) & _2779) == 0u) || ((_2780 & 240u) == 0u))
        {
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
        }
        else
        {
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            uint _3039 = 0u;
            uint _3048;
            bool _3049;
            for (;;)
            {
                _3048 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3039 << 2u)) >> 2u)).x;
                _3049 = _3048 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3049)
                {
                    frontier_phi_66_pred = _3033;
                    frontier_phi_66_pred_1 = _3038;
                    frontier_phi_66_pred_2 = _3037;
                    frontier_phi_66_pred_3 = _3036;
                    frontier_phi_66_pred_4 = _3035;
                    frontier_phi_66_pred_5 = _3034;
                }
                else
                {
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    uint _3184;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3048;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    for (;;)
                    {
                        uint _3188 = uint(findLSB(_3184)) + (_3039 << 5u);
                        uint _3185 = (_3184 + 4294967295u) & _3184;
                        uint _3190 = _3188 * 48u;
                        vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 3u)).x));
                        uint _3210 = (_3188 * 48u) + 4u;
                        vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3210)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 3u)).x));
                        uint _3229 = (_3188 * 48u) + 8u;
                        vec3 _3240 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3229)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 2u)).x));
                        float _3244 = _3204.x - _2733;
                        float _3245 = _3204.y - _2734;
                        float _3246 = _3204.z - _2735;
                        float _3247 = dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246));
                        float _3250 = inversesqrt(_3247);
                        float _3251 = _3250 * _3244;
                        float _3252 = _3250 * _3245;
                        float _3253 = _3250 * _3246;
                        float _3254 = dot(vec3(_944, _947, _950), vec3(_3251, _3252, _3253));
                        float _3259 = 1.0 - (_3247 * _3204.w);
                        float _4638 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3260 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3261 = sqrt(_3247) * _3223.w;
                        float _3264 = 1.39999997615814208984375 / (_3261 + 1.39999997615814208984375);
                        float _3265 = _3264 * _3264;
                        float _3268 = ((1.0 - _3265) * _3254) + _3265;
                        float _3271 = _3261 * _3261;
                        float _3275 = ((isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0))) * _3260) / ((_3271 * 0.699999988079071044921875) + 1.0);
                        float _3279 = (-0.0) - _2733;
                        float _3280 = (-0.0) - _2734;
                        float _3281 = (-0.0) - _2735;
                        float _3285 = inversesqrt(dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281)));
                        float _3286 = _3285 * _3279;
                        float _3287 = _3285 * _3280;
                        float _3288 = _3285 * _3281;
                        float _3296 = exp2(log2(1.0 / ((_3271 * 3.5) + 5.0)) * 0.25);
                        float _3297 = 1.0 - _1019;
                        float _3304 = sqrt(1.0 - ((1.0 - (_3297 * _3297)) * (1.0 - (_3296 * _3296))));
                        float _3305 = _3304 * _3304;
                        float _3306 = _3305 * _3305;
                        float _3307 = _3286 + _3251;
                        float _3308 = _3287 + _3252;
                        float _3309 = _3288 + _3253;
                        float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                        float _3317 = dot(vec3(_944, _947, _950), vec3(_3286, _3287, _3288));
                        float _4654 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3320 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3321 = dot(vec3(_944, _947, _950), vec3(_3313 * _3307, _3313 * _3308, _3313 * _3309));
                        float _4665 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3324 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3328 = ((_3324 * _3324) * (_3306 + (-1.0))) + 1.0;
                        float _3329 = _3264 * _3305;
                        float _3330 = _3329 * _3329;
                        float _3333 = ((1.0 - _3330) * _3254) + _3330;
                        float _4676 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3334 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3335 = 1.0 - _3305;
                        float _3345 = (0.5 / (((_3334 * ((_3320 * _3335) + _3305)) + 9.9999999392252902907785028219223e-09) + (((_3334 * _3335) + _3305) * _3320))) * _3334;
                        float _4687 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3356 = (((_3306 * 3.1415927410125732421875) * (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) / ((_3328 * _3328) * ((_3271 * 2.1991131305694580078125) + 3.141590118408203125))) * _3260;
                        _3108 = (_3275 * _3223.x) + _3181;
                        _3109 = (_3275 * _3223.y) + _3182;
                        _3110 = (_3275 * _3223.z) + _3183;
                        _3105 = (_3356 * _3240.x) + _3178;
                        _3106 = (_3356 * _3240.y) + _3179;
                        _3107 = (_3356 * _3240.z) + _3180;
                        if (_3185 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3185;
                        }
                    }
                    frontier_phi_66_pred = _3105;
                    frontier_phi_66_pred_1 = _3110;
                    frontier_phi_66_pred_2 = _3109;
                    frontier_phi_66_pred_3 = _3108;
                    frontier_phi_66_pred_4 = _3107;
                    frontier_phi_66_pred_5 = _3106;
                }
                _2881 = frontier_phi_66_pred;
                _2891 = frontier_phi_66_pred_1;
                _2889 = frontier_phi_66_pred_2;
                _2887 = frontier_phi_66_pred_3;
                _2885 = frontier_phi_66_pred_4;
                _2883 = frontier_phi_66_pred_5;
                uint _3040 = _3039 + 1u;
                if (_3040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3033 = _2881;
                    _3034 = _2883;
                    _3035 = _2885;
                    _3036 = _2887;
                    _3037 = _2889;
                    _3038 = _2891;
                    _3039 = _3040;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
        }
        uvec4 _2894 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2895 = _2894.z;
        uint _2897 = (_2895 >> 8u) & 15u;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        if (((4294967295u << _2897) & _2779) == 0u)
        {
            _3001 = _2880;
            _3003 = _2882;
            _3005 = _2884;
            _3007 = _2886;
            _3009 = _2888;
            _3011 = _2890;
        }
        else
        {
            float _3026 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
            float _3027 = _3026 * _2733;
            float _3028 = _3026 * _2734;
            float _3029 = _3026 * _2735;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2897 < ((_2895 >> 12u) & 15u))
            {
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3161 = _2880;
                float _3162 = _2882;
                float _3163 = _2884;
                float _3164 = _2886;
                float _3165 = _2888;
                float _3166 = _2890;
                uint _3167 = _2897;
                uint _3176;
                bool _3177;
                for (;;)
                {
                    _3176 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3167 << 2u)) >> 2u)).x;
                    _3177 = _3176 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3177)
                    {
                        frontier_phi_77_pred = _3166;
                        frontier_phi_77_pred_1 = _3165;
                        frontier_phi_77_pred_2 = _3164;
                        frontier_phi_77_pred_3 = _3163;
                        frontier_phi_77_pred_4 = _3162;
                        frontier_phi_77_pred_5 = _3161;
                    }
                    else
                    {
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3383 = _3161;
                        float _3384 = _3162;
                        float _3385 = _3163;
                        float _3386 = _3164;
                        float _3387 = _3165;
                        float _3388 = _3166;
                        uint _3389 = _3176;
                        uint _3390;
                        vec4 _3415;
                        float _3416;
                        vec4 _3431;
                        vec3 _3443;
                        vec4 _3458;
                        vec4 _3473;
                        float _3519;
                        bool _3520;
                        for (;;)
                        {
                            uint _3400 = ((_3167 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3389));
                            _3390 = (_3389 + 4294967295u) & _3389;
                            uint _3402 = _3400 * 40u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            _3416 = _3415.w;
                            uint _3418 = (_3400 * 40u) + 4u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3400 * 40u) + 8u;
                            _3443 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x));
                            uint _3445 = (_3400 * 40u) + 16u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3460 = (_3400 * 40u) + 20u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3400 * 40u) + 24u;
                            vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3494 = (_3400 * 40u) + 28u;
                            vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3519 = fma(_2735, _3507.z, fma(_2734, _3507.y, _3507.x * _2733)) + _3507.w;
                            _3520 = !((fma(_2735, _3488.z, fma(_2734, _3488.y, _3488.x * _2733)) + _3488.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3520)
                            {
                                float _3547 = _3415.x - _2733;
                                float _3548 = _3415.y - _2734;
                                float _3549 = _3415.z - _2735;
                                float _3550 = dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549));
                                float _3553 = inversesqrt(_3550);
                                float _3554 = _3553 * _3547;
                                float _3555 = _3553 * _3548;
                                float _3556 = _3553 * _3549;
                                float _3560 = 1.0 - (_3550 / (_3416 * _3416));
                                float _4698 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3565 = sqrt(_3550) * _3431.w;
                                float _3567 = 1.39999997615814208984375 / (_3565 + 1.39999997615814208984375);
                                float _3568 = _3567 * _3567;
                                float _3571 = ((1.0 - _3568) * dot(vec3(_3554, _3555, _3556), vec3(_944, _947, _950))) + _3568;
                                float _3574 = _3565 * _3565;
                                float _3578 = (fma(_2735, _3458.z, fma(_2734, _3458.y, _3458.x * _2733)) + _3458.w) / _3519;
                                float _3579 = (fma(_2735, _3473.z, fma(_2734, _3473.y, _3473.x * _2733)) + _3473.w) / _3519;
                                float _3583 = 1.0 - dot(vec2(_3578, _3579), vec2(_3578, _3579));
                                float _4714 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3585 = _3584 * (((isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0))) * _3561) / ((_3574 * 0.699999988079071044921875) + 1.0));
                                float _3597 = exp2(log2(1.0 / ((_3574 * 3.5) + 5.0)) * 0.25);
                                float _3598 = 1.0 - _1019;
                                float _3605 = sqrt(1.0 - ((1.0 - (_3598 * _3598)) * (1.0 - (_3597 * _3597))));
                                float _3606 = _3605 * _3605;
                                float _3607 = _3606 * _3606;
                                float _3608 = _3554 - _3027;
                                float _3609 = _3555 - _3028;
                                float _3610 = _3556 - _3029;
                                float _3614 = inversesqrt(dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610)));
                                float _3618 = dot(vec3(_944, _947, _950), vec3((-0.0) - _3027, (-0.0) - _3028, (-0.0) - _3029));
                                float _4725 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3622 = dot(vec3(_944, _947, _950), vec3(_3614 * _3608, _3614 * _3609, _3614 * _3610));
                                float _4736 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3629 = ((_3625 * _3625) * (_3607 + (-1.0))) + 1.0;
                                float _3630 = _3567 * _3606;
                                float _3631 = _3630 * _3630;
                                float _3637 = ((1.0 - _3631) * dot(vec3(_944, _947, _950), vec3(_3554, _3555, _3556))) + _3631;
                                float _4747 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3639 = 1.0 - _3606;
                                float _3649 = (0.5 / (((_3638 * ((_3621 * _3639) + _3606)) + 9.9999999392252902907785028219223e-09) + (((_3638 * _3639) + _3606) * _3621))) * _3638;
                                float _4758 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3659 = (_3584 * _3561) * (((_3607 * 3.1415927410125732421875) * (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) / ((_3629 * _3629) * ((_3574 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3585 * _3431.y;
                                frontier_phi_83_pred_1 = _3585 * _3431.x;
                                frontier_phi_83_pred_2 = _3659 * _3443.z;
                                frontier_phi_83_pred_3 = _3659 * _3443.y;
                                frontier_phi_83_pred_4 = _3659 * _3443.x;
                                frontier_phi_83_pred_5 = _3585 * _3431.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3667 = frontier_phi_83_pred;
                            _3666 = frontier_phi_83_pred_1;
                            _3665 = frontier_phi_83_pred_2;
                            _3664 = frontier_phi_83_pred_3;
                            _3663 = frontier_phi_83_pred_4;
                            _3668 = frontier_phi_83_pred_5;
                            _3373 = _3666 + _3386;
                            _3374 = _3667 + _3387;
                            _3375 = _3668 + _3388;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            _3372 = _3665 + _3385;
                            if (_3390 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3390;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3375;
                        frontier_phi_77_pred_1 = _3374;
                        frontier_phi_77_pred_2 = _3373;
                        frontier_phi_77_pred_3 = _3372;
                        frontier_phi_77_pred_4 = _3371;
                        frontier_phi_77_pred_5 = _3370;
                    }
                    _3012 = frontier_phi_77_pred;
                    _3010 = frontier_phi_77_pred_1;
                    _3008 = frontier_phi_77_pred_2;
                    _3006 = frontier_phi_77_pred_3;
                    _3004 = frontier_phi_77_pred_4;
                    _3002 = frontier_phi_77_pred_5;
                    uint _3168 = _3167 + 1u;
                    if (_3168 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3161 = _3002;
                        _3162 = _3004;
                        _3163 = _3006;
                        _3164 = _3008;
                        _3165 = _3010;
                        _3166 = _3012;
                        _3167 = _3168;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3006;
                frontier_phi_58_59_ladder_1 = _3012;
                frontier_phi_58_59_ladder_2 = _3010;
                frontier_phi_58_59_ladder_3 = _3008;
                frontier_phi_58_59_ladder_4 = _3004;
                frontier_phi_58_59_ladder_5 = _3002;
            }
            else
            {
                frontier_phi_58_59_ladder = _2884;
                frontier_phi_58_59_ladder_1 = _2890;
                frontier_phi_58_59_ladder_2 = _2888;
                frontier_phi_58_59_ladder_3 = _2886;
                frontier_phi_58_59_ladder_4 = _2882;
                frontier_phi_58_59_ladder_5 = _2880;
            }
            _3001 = frontier_phi_58_59_ladder_5;
            _3003 = frontier_phi_58_59_ladder_4;
            _3005 = frontier_phi_58_59_ladder;
            _3007 = frontier_phi_58_59_ladder_3;
            _3009 = frontier_phi_58_59_ladder_2;
            _3011 = frontier_phi_58_59_ladder_1;
        }
        float _3016 = isnan(1.0) ? _1003 : (isnan(_1003) ? 1.0 : min(_1003, 1.0));
        _2792 = (_3016 * _3007) + _2225;
        _2794 = (_3016 * _3009) + _2227;
        _2796 = (_3016 * _3011) + _2229;
        _2798 = ((_3001 * _987) * _3016) + _2573;
        _2800 = ((_3003 * _989) * _3016) + _2575;
        _2802 = ((_3005 * _990) * _3016) + _2577;
    }
    else
    {
        _2792 = _2225;
        _2794 = _2227;
        _2796 = _2229;
        _2798 = _2573;
        _2800 = _2575;
        _2802 = _2577;
    }
    float _4774 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4785 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4796 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _2819 = ((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2792 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1003))) + ((_2798 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1842)) * cbPerFrame._m0[3u].x);
    float _2820 = ((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2794 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1003))) + ((_2800 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1842)) * cbPerFrame._m0[3u].x);
    float _2821 = ((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2796 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1003))) + ((_2802 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1842)) * cbPerFrame._m0[3u].x);
    uint _2822 = _250 + 6u;
    float _2830 = _925 / cbSceneParam._m0[86u].x;
    float _2831 = _926 / cbSceneParam._m0[86u].y;
    vec4 _2845 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, (log2((isnan(cbSceneParam._m0[77u].w) ? _847 : (isnan(_847) ? cbSceneParam._m0[77u].w : min(_847, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2847 = _2845.x;
    float _2848 = _2845.y;
    float _2849 = _2845.z;
    float _2850 = _2845.w;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    if (_847 > cbSceneParam._m0[78u].w)
    {
        float _2905 = isnan(_847) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _847 : min(cbSceneParam._m0[80u].w, _847));
        float _2906 = _2905 / _847;
        float _2917 = _2906 * _898;
        float _2918 = _899 * _2906;
        float _2919 = (-0.0) - _2918;
        float _2921 = _2906 * _900;
        float _2923 = (cbSceneParam._m0[77u].w * _2919) / _2905;
        float _2924 = _2923 + cbSceneParam._m0[79u].w;
        float _2925 = cbSceneParam._m0[79u].w - _2918;
        float _2931 = sqrt(((_2917 * _2917) + (_2918 * _2918)) + (_2921 * _2921));
        float _2934 = (1.0 - (cbSceneParam._m0[77u].w / _2905)) * _2931;
        float _2939 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2941 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3118;
        if (abs((_2919 - _2923) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3118 = ((((_2924 > 0.0) ? exp2(_2939 * _2924) : (2.0 - exp2(_2941 * _2924))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2934;
        }
        else
        {
            float _3062 = 1.0 / cbSceneParam._m0[80u].x;
            float _3063 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : max(_2924, _2925));
            float _3064 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : min(_2924, _2925));
            float _3073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : min(_3063, 0.0));
            float _3074 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : min(_3064, 0.0));
            _3118 = ((abs(_2931 / _2919) * cbSceneParam._m0[80u].y) * ((((_3073 - _3074) * 2.0) - ((exp2(_2939 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0)))) - exp2(_2939 * (isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))))) * _3062)) - ((exp2(_2941 * _3073) - exp2(_2941 * _3074)) * _3062))) + (_2934 * cbSceneParam._m0[80u].z);
        }
        vec4 _3120 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, 1.0), 0.0);
        float _3129 = exp2((_3118 * (-1.44269502162933349609375)) * (1.0 - _3120.w));
        float _3130 = log2(_3129);
        float _3146 = log2(_2850);
        _2943 = (exp2(_3146 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].x)) * _3120.x) / cbSceneParam._m0[78u].x)) + _2847;
        _2945 = (exp2(_3146 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].y)) * _3120.y) / cbSceneParam._m0[78u].y)) + _2848;
        _2947 = (exp2(_3146 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].z)) * _3120.z) / cbSceneParam._m0[78u].z)) + _2849;
        _2949 = _3129 * _2850;
    }
    else
    {
        _2943 = _2847;
        _2945 = _2848;
        _2947 = _2849;
        _2949 = _2850;
    }
    bool _3156;
    vec4 _2959;
    vec4 _2981;
    float _2983;
    float _2987;
    float _2988;
    float _2989;
    float _2990;
    bool _3000;
    for (;;)
    {
        _2959 = cbMatDynParam._m0[0u];
        float _2961 = roundEven(_2959.y);
        bool _2962 = _2961 == 3.0;
        float _2963 = log2(_2949);
        float _2970 = exp2(_2963 * cbSceneParam._m0[78u].x) * _2819;
        float _2971 = exp2(_2963 * cbSceneParam._m0[78u].y) * _2820;
        float _2972 = exp2(_2963 * cbSceneParam._m0[78u].z) * _2821;
        float _2979 = _914 + (-0.5);
        _2981 = cbMtdParam._m0[1u];
        _2983 = _2981.y * _2979;
        float _2986 = (_2961 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2987 = _2986 * (_2962 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2943)));
        _2988 = _2986 * (_2962 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2945)));
        _2989 = _2986 * (_2962 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2947)));
        _2990 = _2979 * 0.999000012874603271484375;
        _3000 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3000)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _2990) < 0.5)
            {
                _3156 = true;
                break;
            }
        }
        uint _3097 = _963 + uint(_2959.w);
        if ((cbInstanceData._m0[_3097].w < 1.0) && ((cbInstanceData._m0[_3097].w + _2990) < 0.5))
        {
            _3156 = true;
            break;
        }
        if ((_2983 + 1.0) < _2981.x)
        {
            _3156 = true;
            break;
        }
        _3156 = false;
        break;
    }
    float _3361;
    if (_3156)
    {
        discard_state = true;
        _3361 = 0.0;
    }
    else
    {
        _3361 = cbInstanceData._m0[_2822].w;
    }
    SV_Target.x = _2987;
    SV_Target.y = _2988;
    SV_Target.z = _2989;
    SV_Target.w = _3361;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2822].w;
    discard_exit();
}


