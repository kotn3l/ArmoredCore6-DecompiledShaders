#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1432;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4040 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4051 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _4062 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _344 = _339.x * cbMtdParam._m0[11u].x;
    float _345 = _339.y * cbMtdParam._m0[11u].y;
    float _346 = _339.z * cbMtdParam._m0[11u].z;
    vec4 _365 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _419 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _421 = _419.x;
    float _433 = dot(vec4(_421, _419.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _450 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _384.x) * 2.0) - ((((_421 - _433) * cbMtdParam._m0[23u].w) + _433) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4073 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _458 = (_451 * ((_365.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _459 = (_451 * ((_365.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _460 = (_451 * ((_365.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _477 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _497 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _499 = _497.x;
    float _509 = dot(vec4(_499, _497.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _523 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _384.y) * 2.0) - ((((_499 - _509) * cbMtdParam._m0[23u].w) + _509) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4084 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _524 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _531 = (_524 * ((_477.x * cbMtdParam._m0[13u].x) - _458)) + _458;
    float _532 = (_524 * ((_477.y * cbMtdParam._m0[13u].y) - _459)) + _459;
    float _533 = (_524 * ((_477.z * cbMtdParam._m0[13u].z) - _460)) + _460;
    vec4 _552 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _301) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _302) + cbTextureTilingScale._m0[24u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _571 = _569.x;
    float _581 = dot(vec4(_571, _569.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _593 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _384.z) * 2.0) - ((((_571 - _581) * cbMtdParam._m0[23u].w) + _581) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4095 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _601 = (_594 * ((_552.x * cbMtdParam._m0[14u].x) - _531)) + _531;
    float _602 = (_594 * ((_552.y * cbMtdParam._m0[14u].y) - _532)) + _532;
    float _603 = (_594 * ((_552.z * cbMtdParam._m0[14u].z) - _533)) + _533;
    float _607 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _601;
    float _610 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _602;
    float _613 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _603;
    float _620 = ((_601 - _607) * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) + _607;
    float _621 = ((_602 - _610) * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) + _610;
    float _622 = ((_603 - _613) * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) + _613;
    vec4 _634 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _657 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _676 = _674.x;
    float _677 = _674.y;
    float _678 = _674.z;
    float _685 = ((_657.x - _676) * _451) + _676;
    float _686 = ((_657.y - _677) * _451) + _677;
    float _687 = ((_657.z - _678) * _451) + _678;
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _710 = ((_699.x - _685) * _524) + _685;
    float _711 = ((_699.y - _686) * _524) + _686;
    float _712 = ((_699.z - _687) * _524) + _687;
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _301) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _302) + cbTextureTilingScale._m0[23u].w));
    float _737 = ((_724.z - _712) * _594) + _712;
    float _740 = ((((_724.x - _710) * _594) + _710) * 2.0) + (-1.0);
    float _741 = ((((_724.y - _711) * _594) + _711) * 2.0) + (-1.0);
    float _742 = dot(vec2(_740, _741), vec2(_740, _741));
    float _4106 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _747 = sqrt(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))));
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _779 = (_740 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_634.x * 2.0) + (-1.0)))) + (((_767.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _780 = (_741 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_634.y * 2.0) + (-1.0)))) + (((_767.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _806 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _808 = _806.x;
    float _826 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _808) * _451) + _808;
    float _844 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _826) * _524) + _826;
    float _862 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _301) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _302) + cbTextureTilingScale._m0[10u].w)).x - _844) * _594) + _844;
    float _866 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _862) * cbMtdParam._m0[19u].z) + _862;
    float _871 = (((_634.z - _737) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _737;
    float _875 = ((_767.z - _871) * cbMtdParam._m0[19u].w) + _871;
    float _879 = cbMtdParam._m0[22u].x + _767.w;
    float _882 = fma(_747, _248 * NORMAL.x, fma(_780, _255 * TANGENT.x, (_241 * _233) * _779));
    float _885 = fma(_747, _248 * NORMAL.y, fma(_780, _255 * TANGENT.y, (_241 * _234) * _779));
    float _888 = fma(_747, _248 * NORMAL.z, fma(_780, _255 * TANGENT.z, (_241 * _235) * _779));
    float _892 = inversesqrt(dot(vec3(_882, _885, _888), vec3(_882, _885, _888)));
    float _893 = _892 * _882;
    float _894 = _892 * _885;
    float _895 = _892 * _888;
    float _4117 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _896 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4139 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4150 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4161 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4172 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _901 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _915 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _965 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _955);
    float _966 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _955);
    float _967 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _955);
    float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
    float _972 = _965 * _971;
    float _973 = _966 * _971;
    float _974 = _967 * _971;
    float _980 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _981 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _999 = fma(_895, cbSceneParam._m0[5u].z, fma(_894, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _893));
    float _1002 = fma(_895, cbSceneParam._m0[6u].z, fma(_894, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _893));
    float _1005 = fma(_895, cbSceneParam._m0[7u].z, fma(_894, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _893));
    uint _1019 = (_282 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1025 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * cbInstanceData._m0[_1019].x;
    float _1026 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * cbInstanceData._m0[_1019].y;
    float _1027 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * cbInstanceData._m0[_1019].z;
    float _4183 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1028 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1029 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1030 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _1031 = 1.0 - _901;
    float _1032 = _1028 * _1031;
    float _1033 = _1029 * _1031;
    float _1034 = _1030 * _1031;
    float _1039 = (_1028 + (-0.039999999105930328369140625)) * _901;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _901;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _901;
    float _1042 = _1039 + 0.039999999105930328369140625;
    float _1044 = _1040 + 0.039999999105930328369140625;
    float _1045 = _1041 + 0.039999999105930328369140625;
    vec4 _1054 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _980, cbSceneParam._m0[86u].y * _981));
    float _1058 = ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * TEXCOORD_5.w) * _1054.x;
    float _1059 = dot(vec3(_893, _894, _895), vec3(_972, _973, _974));
    float _1062 = _1059 * 2.0;
    float _1066 = (_1062 * _893) - _972;
    float _1067 = (_1062 * _894) - _973;
    float _1068 = (_1062 * _895) - _974;
    float _1072 = abs(dot(vec3(_972, _973, _974), vec3(_893, _894, _895)));
    float _4216 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1074 = sqrt(_896);
    float _1087 = exp2((_1074 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1074 * 3.0));
    float _1093 = (1.0 - _1087) * ((_1074 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1094 = _1087 * _1074;
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1431;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1156 = fma(_1130, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1122));
        float _1160 = fma(_1130, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1122));
        float _1164 = fma(_1130, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1122));
        float _1189 = _1122 + _893;
        float _1190 = _1126 + _894;
        float _1191 = _1130 + _895;
        float _1201 = fma(_1191, cbModelParam._m0[26u].z, fma(_1190, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1189)) - _1156;
        float _1202 = fma(_1191, cbModelParam._m0[27u].z, fma(_1190, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1189)) - _1160;
        float _1203 = fma(_1191, cbModelParam._m0[28u].z, fma(_1190, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1189)) - _1164;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1156 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1160 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[34u].z) + ((((((_1164 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1259 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1225.x + (-0.5));
        float _1261 = _1259 * (_1225.y + (-0.5));
        float _1262 = _1259 * (_1225.z + (-0.5));
        float _1269 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1232.x + (-0.5));
        float _1271 = _1269 * (_1232.y + (-0.5));
        float _1272 = _1269 * (_1232.z + (-0.5));
        float _1279 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1239.x + (-0.5));
        float _1281 = _1279 * (_1239.y + (-0.5));
        float _1282 = _1279 * (_1239.z + (-0.5));
        float _1289 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1246.x + (-0.5));
        float _1291 = _1289 * (_1246.y + (-0.5));
        float _1292 = _1289 * (_1246.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1313 = (dot(vec3(_893, _894, _895), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1323 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4264 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1325 + 1.0))) + _1330) * _1293;
        float _1340 = _1261 * 0.5;
        float _1341 = _1271 * 0.5;
        float _1342 = _1281 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_893, _894, _895), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4297 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1367 + 1.0))) + _1372) * _1294;
        float _1382 = _1262 * 0.5;
        float _1383 = _1272 * 0.5;
        float _1384 = _1282 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_893, _894, _895), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4330 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1409 + 1.0))) + _1414) * _1295;
        _1431 = _1262;
        _1433 = _1261;
        _1434 = _1260;
        _1435 = _1272;
        _1436 = _1271;
        _1437 = _1270;
        _1438 = _1282;
        _1439 = _1281;
        _1440 = _1280;
        _1441 = _1295;
        _1442 = _1294;
        _1443 = _1293;
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
    }
    else
    {
        _1431 = _1432;
        _1433 = _1432;
        _1434 = _1432;
        _1435 = _1432;
        _1436 = _1432;
        _1437 = _1432;
        _1438 = _1432;
        _1439 = _1432;
        _1440 = _1432;
        _1441 = _1432;
        _1442 = _1432;
        _1443 = _1432;
        _1444 = 0.0;
        _1445 = 0.0;
        _1446 = 0.0;
    }
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1469 = fma(_1130, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1122));
        float _1473 = fma(_1130, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1122));
        float _1477 = fma(_1130, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1122));
        float _1500 = _1122 + _893;
        float _1501 = _1126 + _894;
        float _1502 = _1130 + _895;
        float _1512 = fma(_1502, cbModelParam._m0[30u].z, fma(_1501, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1500)) - _1469;
        float _1513 = fma(_1502, cbModelParam._m0[31u].z, fma(_1501, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1500)) - _1473;
        float _1514 = fma(_1502, cbModelParam._m0[32u].z, fma(_1501, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1500)) - _1477;
        float _1518 = inversesqrt(dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514)));
        float _1531 = ((_1518 * _1512) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1469 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1518 * _1513) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1473 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1518 * _1514) / cbModelParam._m0[35u].z) + ((((((_1477 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        float _1568 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1535.x + (-0.5));
        float _1570 = _1568 * (_1535.y + (-0.5));
        float _1571 = _1568 * (_1535.z + (-0.5));
        float _1578 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1542.x + (-0.5));
        float _1580 = _1578 * (_1542.y + (-0.5));
        float _1581 = _1578 * (_1542.z + (-0.5));
        float _1588 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1549.x + (-0.5));
        float _1590 = _1588 * (_1549.y + (-0.5));
        float _1591 = _1588 * (_1549.z + (-0.5));
        float _1598 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1556.x + (-0.5));
        float _1600 = _1598 * (_1556.y + (-0.5));
        float _1601 = _1598 * (_1556.z + (-0.5));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = _1569 * 0.5;
        float _1606 = _1579 * 0.5;
        float _1607 = _1589 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_893, _894, _895), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4393 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1632 + 1.0))) + _1637) * _1602;
        float _1647 = _1570 * 0.5;
        float _1648 = _1580 * 0.5;
        float _1649 = _1590 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_893, _894, _895), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4426 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1674 + 1.0))) + _1679) * _1603;
        float _1689 = _1571 * 0.5;
        float _1690 = _1581 * 0.5;
        float _1691 = _1591 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_893, _894, _895), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4459 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1716 + 1.0))) + _1721) * _1604;
        _1738 = _1571;
        _1739 = _1570;
        _1740 = _1569;
        _1741 = _1581;
        _1742 = _1580;
        _1743 = _1579;
        _1744 = _1591;
        _1745 = _1590;
        _1746 = _1589;
        _1747 = _1604;
        _1748 = _1603;
        _1749 = _1602;
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
    }
    else
    {
        _1738 = _1432;
        _1739 = _1432;
        _1740 = _1432;
        _1741 = _1432;
        _1742 = _1432;
        _1743 = _1432;
        _1744 = _1432;
        _1745 = _1432;
        _1746 = _1432;
        _1747 = _1432;
        _1748 = _1432;
        _1749 = _1432;
        _1750 = 0.0;
        _1751 = 0.0;
        _1752 = 0.0;
    }
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1444)) + _1444;
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1445)) + _1445;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1446)) + _1446;
    float _1785 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1762 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1762 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1762));
    float _1806 = _1066 * 0.5;
    float _1807 = _1067 * 0.5;
    float _1808 = _1068 * 0.5;
    float _1809 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1812 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1815 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1849;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1822 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1431, _1435, _1438, _1441));
        float _1826 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1830 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1434, _1437, _1440, _1443));
        float _1837 = dot(vec4(cbModelParam._m0[39u]), vec4(_1806, _1807, _1808, 1.0));
        _1849 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1837) ? 0.0 : (isnan(0.0) ? _1837 : max(0.0, _1837))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1849 = 1.0;
    }
    float _1860;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1851 = dot(vec4(cbModelParam._m0[40u]), vec4(_1806, _1807, _1808, 1.0));
        _1860 = dot(vec3(isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1851) ? 0.0 : (isnan(0.0) ? _1851 : max(0.0, _1851))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1860 = 1.0;
    }
    float _1864 = (_1860 * cbModelParam._m0[1u].x) + (_1849 * (1.0 - cbModelParam._m0[1u].x));
    float _1874 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _896);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1874 : min(cbModelParam._m0[25u].z, _1874));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1923 = fma(_1130, cbModelParam._m0[13u].z, fma(_1126, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1122)) + cbModelParam._m0[13u].w;
        float _1927 = fma(_1130, cbModelParam._m0[14u].z, fma(_1126, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1122)) + cbModelParam._m0[14u].w;
        float _1931 = fma(_1130, cbModelParam._m0[15u].z, fma(_1126, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1122)) + cbModelParam._m0[15u].w;
        float _1934 = fma(_1068, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1066));
        float _1937 = fma(_1068, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1066));
        float _1940 = fma(_1068, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1066));
        float _1968;
        if (_1934 > 0.0)
        {
            _1968 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1968 = frontier_phi_14_12_ladder;
        }
        float _2140;
        if (_1937 > 0.0)
        {
            _2140 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2140 = frontier_phi_23_19_ladder;
        }
        float _2435;
        if (_1940 > 0.0)
        {
            _2435 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2435 = frontier_phi_35_30_ladder;
        }
        float _2437 = isnan(_2140) ? _1968 : (isnan(_1968) ? _2140 : min(_1968, _2140));
        float _2438 = isnan(_2435) ? _2437 : (isnan(_2437) ? _2435 : min(_2437, _2435));
        float _2442 = (_2438 * _1934) + _1923;
        float _2443 = (_2438 * _1937) + _1927;
        float _2444 = (_2438 * _1940) + _1931;
        float _2445 = _2438 * 9.9999997473787516355514526367188e-05;
        float _2447 = (-1.0) - _2445;
        float _2449 = _2445 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2444 > _2449) || ((_2444 < _2447) || ((_2443 > _2449) || ((_2443 < _2447) || ((_2442 < _2447) || (_2442 > _2449))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2589 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2444, cbModelParam._m0[9u].z, fma(_2443, cbModelParam._m0[9u].y, _2442 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2444, cbModelParam._m0[10u].z, fma(_2443, cbModelParam._m0[10u].y, _2442 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2444, cbModelParam._m0[11u].z, fma(_2443, cbModelParam._m0[11u].y, _2442 * cbModelParam._m0[11u].x))), _1875);
            frontier_phi_13_35_ladder = _2589.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2589.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2589.x * cbModelParam._m0[1u].y;
        }
        _1956 = frontier_phi_13_35_ladder_2;
        _1958 = frontier_phi_13_35_ladder_1;
        _1960 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1066, _1067, _1068), _1875);
        _1956 = _1944.x * cbModelParam._m0[1u].y;
        _1958 = _1944.y * cbModelParam._m0[1u].y;
        _1960 = _1944.z * cbModelParam._m0[1u].y;
    }
    float _1964 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _896);
    float _1965 = isnan(_1964) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1964 : min(cbModelParam._m0[25u].w, _1964));
    float _2055;
    float _2057;
    float _2059;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2019 = fma(_1130, cbModelParam._m0[21u].z, fma(_1126, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1122)) + cbModelParam._m0[21u].w;
        float _2023 = fma(_1130, cbModelParam._m0[22u].z, fma(_1126, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1122)) + cbModelParam._m0[22u].w;
        float _2027 = fma(_1130, cbModelParam._m0[23u].z, fma(_1126, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1122)) + cbModelParam._m0[23u].w;
        float _2030 = fma(_1068, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1066));
        float _2033 = fma(_1068, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1066));
        float _2036 = fma(_1068, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1066));
        float _2145;
        if (_2030 > 0.0)
        {
            _2145 = abs((1.0 - _2019) / _2030);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2019 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2145 = frontier_phi_25_21_ladder;
        }
        float _2462;
        if (_2033 > 0.0)
        {
            _2462 = abs((1.0 - _2023) / _2033);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2023 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2462 = frontier_phi_37_32_ladder;
        }
        float _2800;
        if (_2036 > 0.0)
        {
            _2800 = abs((1.0 - _2027) / _2036);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2027 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2800 = frontier_phi_47_44_ladder;
        }
        float _2802 = isnan(_2462) ? _2145 : (isnan(_2145) ? _2462 : min(_2145, _2462));
        float _2803 = isnan(_2800) ? _2802 : (isnan(_2802) ? _2800 : min(_2802, _2800));
        float _2807 = (_2803 * _2030) + _2019;
        float _2808 = (_2803 * _2033) + _2023;
        float _2809 = (_2803 * _2036) + _2027;
        float _2810 = _2803 * 9.9999997473787516355514526367188e-05;
        float _2811 = (-1.0) - _2810;
        float _2813 = _2810 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2809 > _2813) || ((_2809 < _2811) || ((_2808 > _2813) || ((_2808 < _2811) || ((_2807 < _2811) || (_2807 > _2813))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2931 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2809, cbModelParam._m0[17u].z, fma(_2808, cbModelParam._m0[17u].y, _2807 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2809, cbModelParam._m0[18u].z, fma(_2808, cbModelParam._m0[18u].y, _2807 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2809, cbModelParam._m0[19u].z, fma(_2808, cbModelParam._m0[19u].y, _2807 * cbModelParam._m0[19u].x))), _1965);
            frontier_phi_22_47_ladder = _2931.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2931.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2931.x * cbModelParam._m0[1u].z;
        }
        _2055 = frontier_phi_22_47_ladder_2;
        _2057 = frontier_phi_22_47_ladder_1;
        _2059 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2039 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1066, _1067, _1068), _1965);
        _2055 = _2039.x * cbModelParam._m0[1u].z;
        _2057 = _2039.y * cbModelParam._m0[1u].z;
        _2059 = _2039.z * cbModelParam._m0[1u].z;
    }
    float _2072 = (((_1093 * _1042) + _1094) * _1058) * ((cbModelParam._m0[1u].w * (_2055 - _1956)) + _1956);
    float _2074 = (((_1093 * _1044) + _1094) * _1058) * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2076 = (((_1093 * _1045) + _1094) * _1058) * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2079 = fma(_2076, cbSceneParam._m0[89u].z, fma(_2074, cbSceneParam._m0[89u].y, _2072 * cbSceneParam._m0[89u].x));
    float _2082 = fma(_2076, cbSceneParam._m0[90u].z, fma(_2074, cbSceneParam._m0[90u].y, _2072 * cbSceneParam._m0[90u].x));
    float _2085 = fma(_2076, cbSceneParam._m0[91u].z, fma(_2074, cbSceneParam._m0[91u].y, _2072 * cbSceneParam._m0[91u].x));
    float _2119 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2123 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2127 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2131 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2132 = _2119 / _2131;
    float _2133 = _2123 / _2131;
    float _2134 = _2127 / _2131;
    float _2281;
    float _2282;
    float _2283;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2161 = ((uint(_2134 > cbSceneParam._m0[59u].y) + uint(_2134 > cbSceneParam._m0[59u].x)) + uint(_2134 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2162 = _2161 + 43u;
        uint _2170 = _2161 + 44u;
        uint _2178 = _2161 + 45u;
        uint _2186 = _2161 + 46u;
        float _2197 = fma(_2131, cbSceneParam._m0[_2162].w, fma(_2127, cbSceneParam._m0[_2162].z, fma(_2123, cbSceneParam._m0[_2162].y, _2119 * cbSceneParam._m0[_2162].x)));
        float _2201 = fma(_2131, cbSceneParam._m0[_2170].w, fma(_2127, cbSceneParam._m0[_2170].z, fma(_2123, cbSceneParam._m0[_2170].y, _2119 * cbSceneParam._m0[_2170].x)));
        float _2209 = fma(_2131, cbSceneParam._m0[_2186].w, fma(_2127, cbSceneParam._m0[_2186].z, fma(_2123, cbSceneParam._m0[_2186].y, _2119 * cbSceneParam._m0[_2186].x)));
        float _2214 = cbSceneParam._m0[33u].z * _2209;
        float _2216 = cbSceneParam._m0[33u].w * _2209;
        float _2219 = fma(_2131, cbSceneParam._m0[_2178].w, fma(_2127, cbSceneParam._m0[_2178].z, fma(_2123, cbSceneParam._m0[_2178].y, _2119 * cbSceneParam._m0[_2178].x))) / _2209;
        float _2267 = (cbSceneParam._m0[33u].x - sqrt(((_2133 * _2133) + (_2132 * _2132)) + (_2134 * _2134))) * cbSceneParam._m0[33u].y;
        float _4585 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2274 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2214 + _2197) / _2209, (_2216 + _2201) / _2209), _2219), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2216 + _2197) / _2209, (_2201 - _2214) / _2209), _2219), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2197 - _2214) / _2209, (_2201 - _2216) / _2209), _2219), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2197 - _2216) / _2209, (_2214 + _2201) / _2209), _2219), 0.0)).x), vec4(0.25)));
        _2281 = 1.0 - (_2274 * cbSceneParam._m0[34u].x);
        _2282 = 1.0 - (_2274 * cbSceneParam._m0[34u].y);
        _2283 = 1.0 - (_2274 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2281 = 1.0;
        _2282 = 1.0;
        _2283 = 1.0;
    }
    float _2347;
    float _2349;
    float _2351;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2335 = fma(_2131, cbSceneParam._m0[63u].w, fma(_2127, cbSceneParam._m0[63u].z, fma(_2123, cbSceneParam._m0[63u].y, _2119 * cbSceneParam._m0[63u].x)));
        float _2336 = fma(_2131, cbSceneParam._m0[60u].w, fma(_2127, cbSceneParam._m0[60u].z, fma(_2123, cbSceneParam._m0[60u].y, _2119 * cbSceneParam._m0[60u].x))) / _2335;
        float _2337 = fma(_2131, cbSceneParam._m0[61u].w, fma(_2127, cbSceneParam._m0[61u].z, fma(_2123, cbSceneParam._m0[61u].y, _2119 * cbSceneParam._m0[61u].x))) / _2335;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2336 >= cbSceneParam._m0[64u].x) && (_2337 >= cbSceneParam._m0[64u].y)) && (_2336 <= cbSceneParam._m0[64u].z)) && (_2337 <= cbSceneParam._m0[64u].w))
        {
            float _2475 = fma(_2131, cbSceneParam._m0[62u].w, fma(_2127, cbSceneParam._m0[62u].z, fma(_2123, cbSceneParam._m0[62u].y, _2119 * cbSceneParam._m0[62u].x))) / _2335;
            float _2479 = isnan(cbSceneParam._m0[41u].w) ? _2475 : (isnan(_2475) ? cbSceneParam._m0[41u].w : max(_2475, cbSceneParam._m0[41u].w));
            float _2522 = (cbSceneParam._m0[33u].x - sqrt(((_2133 * _2133) + (_2132 * _2132)) + (_2134 * _2134))) * cbSceneParam._m0[33u].y;
            float _4601 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
            float _2529 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2336, cbSceneParam._m0[33u].w + _2337), _2479), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2336, _2337 - cbSceneParam._m0[33u].z), _2479), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2336 - cbSceneParam._m0[33u].z, _2337 - cbSceneParam._m0[33u].w), _2479), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2336 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2337), _2479), 0.0)).x), vec4(0.25)));
            float _2533 = 1.0 - (_2529 * cbSceneParam._m0[34u].x);
            float _2534 = 1.0 - (_2529 * cbSceneParam._m0[34u].y);
            float _2535 = 1.0 - (_2529 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2535) ? _2283 : (isnan(_2283) ? _2535 : min(_2283, _2535));
            frontier_phi_34_33_ladder_1 = isnan(_2534) ? _2282 : (isnan(_2282) ? _2534 : min(_2282, _2534));
            frontier_phi_34_33_ladder_2 = isnan(_2533) ? _2281 : (isnan(_2281) ? _2533 : min(_2281, _2533));
        }
        else
        {
            frontier_phi_34_33_ladder = _2283;
            frontier_phi_34_33_ladder_1 = _2282;
            frontier_phi_34_33_ladder_2 = _2281;
        }
        _2347 = frontier_phi_34_33_ladder_2;
        _2349 = frontier_phi_34_33_ladder_1;
        _2351 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2347 = _2281;
        _2349 = _2282;
        _2351 = _2283;
    }
    uvec4 _2356 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2358 = _2356.x * 14u;
    uint _2359 = _2358 + 13u;
    float _2366 = _1058 + (-1.0);
    float _2371 = (cbLight._m0[_2359].x * _2366) + 1.0;
    float _2372 = (cbLight._m0[_2359].y * _2366) + 1.0;
    float _2373 = (cbLight._m0[_2359].z * _2366) + 1.0;
    float _2374 = (cbLight._m0[_2359].w * _2366) + 1.0;
    uint _2375 = _2358 + 5u;
    float _2381 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
    uint _2385 = _2358 + 4u;
    float _2394 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
    uint _2398 = _2358 | 1u;
    float _2409 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_893, _894, _895));
    float _2412 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_893, _894, _895));
    float _4637 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _4648 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2417 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * 0.3183098733425140380859375;
    float _2419 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * 0.3183098733425140380859375;
    float _2426 = ((cbLight._m0[_2375].x * _2381) * _2419) + (((cbLight._m0[_2385].x * _2347) * _2394) * _2417);
    float _2427 = ((_2381 * cbLight._m0[_2375].y) * _2419) + (((cbLight._m0[_2385].y * _2349) * _2394) * _2417);
    float _2428 = ((_2381 * cbLight._m0[_2375].z) * _2419) + (((cbLight._m0[_2385].z * _2351) * _2394) * _2417);
    uvec4 _2432 = floatBitsToUint(cbLight._m0[_2358 + 12u]);
    bool _2434 = _2432.x == 0u;
    float _2536;
    float _2538;
    float _2540;
    if (_2434)
    {
        _2536 = _2426;
        _2538 = _2427;
        _2540 = _2428;
    }
    else
    {
        uint _2544 = _2358 + 6u;
        float _2560 = (dot(vec3(cbLight._m0[_2358 + 2u].xyz), vec3(_893, _894, _895)) * 0.5) + 0.5;
        float _2561 = _2560 * _2560;
        float _4659 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2562 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2563 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
        _2536 = (((cbLight._m0[_2544].x * 0.3183098733425140380859375) * _2562) * _2563) + _2426;
        _2538 = (((cbLight._m0[_2544].y * 0.3183098733425140380859375) * _2562) * _2563) + _2427;
        _2540 = (((cbLight._m0[_2544].z * 0.3183098733425140380859375) * _2562) * _2563) + _2428;
    }
    bool _2543 = _2432.y == 0u;
    float _2598;
    float _2600;
    float _2602;
    if (_2543)
    {
        _2598 = _2536;
        _2600 = _2538;
        _2602 = _2540;
    }
    else
    {
        uint _2771 = _2358 + 7u;
        float _2787 = (dot(vec3(cbLight._m0[_2358 + 3u].xyz), vec3(_893, _894, _895)) * 0.5) + 0.5;
        float _2788 = _2787 * _2787;
        float _4675 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2789 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2790 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
        _2598 = (((cbLight._m0[_2771].x * 0.3183098733425140380859375) * _2789) * _2790) + _2536;
        _2600 = (((cbLight._m0[_2771].y * 0.3183098733425140380859375) * _2789) * _2790) + _2538;
        _2602 = (((cbLight._m0[_2771].z * 0.3183098733425140380859375) * _2789) * _2790) + _2540;
    }
    uint _2605 = _2358 + 8u;
    float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2358].w)) * _896) * 0.949999988079071044921875);
    float _2619 = _2618 * _2618;
    float _2620 = cbLight._m0[_2358].x + _972;
    float _2621 = cbLight._m0[_2358].y + _973;
    float _2622 = cbLight._m0[_2358].z + _974;
    float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
    float _2627 = _2626 * _2620;
    float _2628 = _2626 * _2621;
    float _2629 = _2626 * _2622;
    float _2630 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2358].xyz));
    float _4691 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2633 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _4702 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _2634 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2635 = dot(vec3(_893, _894, _895), vec3(_2627, _2628, _2629));
    float _4713 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2638 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2639 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_2627, _2628, _2629));
    float _4724 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2643 = _2619 * _2619;
    float _2647 = ((_2638 * _2638) * (_2643 + (-1.0))) + 1.0;
    float _2655 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
    float _2656 = 0.959999978542327880859375 - _1039;
    float _2658 = 0.959999978542327880859375 - _1040;
    float _2659 = 0.959999978542327880859375 - _1041;
    float _2666 = 1.0 - _2619;
    float _2677 = (0.5 / (((_2634 * ((_2633 * _2666) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2634 * _2666) + _2619) * _2633))) * _2633;
    float _4735 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2679 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2643 / ((_2647 * _2647) * 3.141590118408203125));
    uint _2693 = _2358 + 9u;
    float _2704 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2398].w)) * _896) * 0.949999988079071044921875);
    float _2705 = _2704 * _2704;
    float _2706 = cbLight._m0[_2398].x + _972;
    float _2707 = cbLight._m0[_2398].y + _973;
    float _2708 = cbLight._m0[_2398].z + _974;
    float _2712 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
    float _2713 = _2712 * _2706;
    float _2714 = _2712 * _2707;
    float _2715 = _2712 * _2708;
    float _2716 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2398].xyz));
    float _4746 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2719 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2720 = dot(vec3(_893, _894, _895), vec3(_2713, _2714, _2715));
    float _4757 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2723 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2724 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_2713, _2714, _2715));
    float _4768 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2728 = _2705 * _2705;
    float _2732 = ((_2723 * _2723) * (_2728 + (-1.0))) + 1.0;
    float _2739 = exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0);
    float _2746 = 1.0 - _2705;
    float _2756 = (0.5 / (((_2634 * ((_2719 * _2746) + _2705)) + 9.9999999392252902907785028219223e-09) + (((_2634 * _2746) + _2705) * _2719))) * _2719;
    float _4779 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
    float _2758 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2728 / ((_2732 * _2732) * 3.141590118408203125));
    float _2768 = (((((_2739 * _2656) + _1042) * cbLight._m0[_2693].x) * _2758) * _2381) + ((((cbLight._m0[_2605].x * _2347) * ((_2655 * _2656) + _1042)) * _2679) * _2394);
    float _2769 = (((((_2739 * _2658) + _1044) * cbLight._m0[_2693].y) * _2758) * _2381) + ((((cbLight._m0[_2605].y * _2349) * ((_2655 * _2658) + _1044)) * _2679) * _2394);
    float _2770 = (((((_2739 * _2659) + _1045) * cbLight._m0[_2693].z) * _2758) * _2381) + ((((cbLight._m0[_2605].z * _2351) * ((_2655 * _2659) + _1045)) * _2679) * _2394);
    float _2826;
    float _2828;
    float _2830;
    if (_2434)
    {
        _2826 = _2768;
        _2828 = _2769;
        _2830 = _2770;
    }
    else
    {
        uint _2832 = _2358 + 2u;
        uint _2836 = _2358 + 10u;
        float _2850 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2832].w)) * _896) * 0.949999988079071044921875);
        float _2851 = _2850 * _2850;
        float _2852 = cbLight._m0[_2832].x + _972;
        float _2853 = cbLight._m0[_2832].y + _973;
        float _2854 = cbLight._m0[_2832].z + _974;
        float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
        float _2859 = _2858 * _2852;
        float _2860 = _2858 * _2853;
        float _2861 = _2858 * _2854;
        float _2862 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2832].xyz));
        float _4790 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2865 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2866 = dot(vec3(_893, _894, _895), vec3(_2859, _2860, _2861));
        float _4801 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2869 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2870 = dot(vec3(cbLight._m0[_2832].xyz), vec3(_2859, _2860, _2861));
        float _4812 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2874 = _2851 * _2851;
        float _2878 = ((_2869 * _2869) * (_2874 + (-1.0))) + 1.0;
        float _2885 = exp2(log2(1.0 - (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) * 5.0);
        float _2892 = 1.0 - _2851;
        float _2902 = (0.5 / (((_2634 * ((_2865 * _2892) + _2851)) + 9.9999999392252902907785028219223e-09) + (((_2634 * _2892) + _2851) * _2865))) * _2865;
        float _4823 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2904 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2874 / ((_2878 * _2878) * 3.141590118408203125));
        float _2905 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
        _2826 = (((((_2885 * _2656) + _1042) * cbLight._m0[_2836].x) * _2904) * _2905) + _2768;
        _2828 = (((((_2885 * _2658) + _1044) * cbLight._m0[_2836].y) * _2904) * _2905) + _2769;
        _2830 = (((((_2885 * _2659) + _1045) * cbLight._m0[_2836].z) * _2904) * _2905) + _2770;
    }
    float _2936;
    float _2938;
    float _2940;
    if (_2543)
    {
        _2936 = _2826;
        _2938 = _2828;
        _2940 = _2830;
    }
    else
    {
        uint _2947 = _2358 + 3u;
        uint _2951 = _2358 + 11u;
        float _2965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2947].w)) * _896) * 0.949999988079071044921875);
        float _2966 = _2965 * _2965;
        float _2967 = cbLight._m0[_2947].x + _972;
        float _2968 = cbLight._m0[_2947].y + _973;
        float _2969 = cbLight._m0[_2947].z + _974;
        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
        float _2974 = _2973 * _2967;
        float _2975 = _2973 * _2968;
        float _2976 = _2973 * _2969;
        float _2977 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2947].xyz));
        float _4839 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
        float _2980 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2981 = dot(vec3(_893, _894, _895), vec3(_2974, _2975, _2976));
        float _4850 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        float _2984 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2985 = dot(vec3(cbLight._m0[_2947].xyz), vec3(_2974, _2975, _2976));
        float _4861 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2989 = _2966 * _2966;
        float _2993 = ((_2984 * _2984) * (_2989 + (-1.0))) + 1.0;
        float _3000 = exp2(log2(1.0 - (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) * 5.0);
        float _3007 = 1.0 - _2966;
        float _3017 = (0.5 / (((_2634 * ((_2980 * _3007) + _2966)) + 9.9999999392252902907785028219223e-09) + (((_2634 * _3007) + _2966) * _2980))) * _2980;
        float _4872 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
        float _3019 = (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2989 / ((_2993 * _2993) * 3.141590118408203125));
        float _3020 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
        _2936 = (((((_3000 * _2656) + _1042) * cbLight._m0[_2951].x) * _3019) * _3020) + _2826;
        _2938 = (((((_3000 * _2658) + _1044) * cbLight._m0[_2951].y) * _3019) * _3020) + _2828;
        _2940 = (((((_3000 * _2659) + _1045) * cbLight._m0[_2951].z) * _3019) * _3020) + _2830;
    }
    float _3086;
    float _3088;
    float _3090;
    float _3092;
    float _3094;
    float _3096;
    if (_2356.y == 0u)
    {
        uvec4 _3041 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3042 = _3041.x;
        uint _3053 = uint((float(_3041.y) * floor(float(uint(cbSceneParam._m0[85u].y * _981) / _3042))) + floor(float(uint(cbSceneParam._m0[85u].x * _980) / _3042)));
        float _3063 = (log2(_2134 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3064 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
        uint _3067 = uint(isnan(14.0) ? _3064 : (isnan(_3064) ? 14.0 : min(_3064, 14.0)));
        uvec4 _3072 = texelFetch(g_lightClusterGridBuffer, int(((_3067 << 2u) + (_3053 << 6u)) >> 2u));
        uint _3073 = _3072.x;
        uint _3074 = _3041.z;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        if (((((1u << ((_3074 >> 4u) & 15u)) + 4294967295u) & _3073) == 0u) || ((_3074 & 240u) == 0u))
        {
            _3153 = 0.0;
            _3155 = 0.0;
            _3157 = 0.0;
            _3159 = 0.0;
            _3161 = 0.0;
            _3163 = 0.0;
        }
        else
        {
            float _3154;
            float _3156;
            float _3158;
            float _3160;
            float _3162;
            float _3164;
            float _3298 = 0.0;
            float _3299 = 0.0;
            float _3300 = 0.0;
            float _3301 = 0.0;
            float _3302 = 0.0;
            float _3303 = 0.0;
            uint _3304 = 0u;
            uint _3313;
            bool _3314;
            for (;;)
            {
                _3313 = texelFetch(g_lightClassification, int((((_3067 << 5u) + (_3053 << 9u)) + (_3304 << 2u)) >> 2u)).x;
                _3314 = _3313 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3314)
                {
                    frontier_phi_66_pred = _3303;
                    frontier_phi_66_pred_1 = _3302;
                    frontier_phi_66_pred_2 = _3301;
                    frontier_phi_66_pred_3 = _3300;
                    frontier_phi_66_pred_4 = _3299;
                    frontier_phi_66_pred_5 = _3298;
                }
                else
                {
                    float _3422;
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    float _3427;
                    uint _3428;
                    _3422 = _3298;
                    _3423 = _3299;
                    _3424 = _3300;
                    _3425 = _3301;
                    _3426 = _3302;
                    _3427 = _3303;
                    _3428 = _3313;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    for (;;)
                    {
                        uint _3432 = uint(findLSB(_3428)) + (_3304 << 5u);
                        uint _3429 = (_3428 + 4294967295u) & _3428;
                        uint _3434 = _3432 * 48u;
                        vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3434)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 3u)).x));
                        uint _3454 = (_3432 * 48u) + 4u;
                        vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 3u)).x));
                        uint _3473 = (_3432 * 48u) + 8u;
                        vec3 _3484 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3473)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 2u)).x));
                        float _3488 = _3448.x - _2132;
                        float _3489 = _3448.y - _2133;
                        float _3490 = _3448.z - _2134;
                        float _3491 = dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490));
                        float _3494 = inversesqrt(_3491);
                        float _3495 = _3494 * _3488;
                        float _3496 = _3494 * _3489;
                        float _3497 = _3494 * _3490;
                        float _3498 = dot(vec3(_999, _1002, _1005), vec3(_3495, _3496, _3497));
                        float _3503 = 1.0 - (_3491 * _3448.w);
                        float _4898 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3504 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3505 = sqrt(_3491) * _3467.w;
                        float _3508 = 1.39999997615814208984375 / (_3505 + 1.39999997615814208984375);
                        float _3509 = _3508 * _3508;
                        float _3512 = ((1.0 - _3509) * _3498) + _3509;
                        float _3515 = _3505 * _3505;
                        float _3519 = ((isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0))) * _3504) / ((_3515 * 0.699999988079071044921875) + 1.0);
                        float _3523 = (-0.0) - _2132;
                        float _3524 = (-0.0) - _2133;
                        float _3525 = (-0.0) - _2134;
                        float _3529 = inversesqrt(dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525)));
                        float _3530 = _3529 * _3523;
                        float _3531 = _3529 * _3524;
                        float _3532 = _3529 * _3525;
                        float _3539 = exp2(log2(1.0 / ((_3515 * 3.5) + 5.0)) * 0.25);
                        float _3540 = 1.0 - _1074;
                        float _3547 = sqrt(1.0 - ((1.0 - (_3540 * _3540)) * (1.0 - (_3539 * _3539))));
                        float _3548 = _3547 * _3547;
                        float _3549 = _3548 * _3548;
                        float _3550 = _3530 + _3495;
                        float _3551 = _3531 + _3496;
                        float _3552 = _3532 + _3497;
                        float _3556 = inversesqrt(dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552)));
                        float _3560 = dot(vec3(_999, _1002, _1005), vec3(_3530, _3531, _3532));
                        float _4914 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3563 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3564 = dot(vec3(_999, _1002, _1005), vec3(_3556 * _3550, _3556 * _3551, _3556 * _3552));
                        float _4925 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3567 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3571 = ((_3567 * _3567) * (_3549 + (-1.0))) + 1.0;
                        float _3572 = _3508 * _3548;
                        float _3573 = _3572 * _3572;
                        float _3576 = ((1.0 - _3573) * _3498) + _3573;
                        float _4936 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                        float _3577 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3578 = 1.0 - _3548;
                        float _3588 = (0.5 / (((_3577 * ((_3563 * _3578) + _3548)) + 9.9999999392252902907785028219223e-09) + (((_3577 * _3578) + _3548) * _3563))) * _3577;
                        float _4947 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                        float _3599 = (((_3549 * 3.1415927410125732421875) * (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0)))) / ((_3571 * _3571) * ((_3515 * 2.1991131305694580078125) + 3.141590118408203125))) * _3504;
                        _3357 = (_3519 * _3467.x) + _3425;
                        _3358 = (_3519 * _3467.y) + _3426;
                        _3359 = (_3519 * _3467.z) + _3427;
                        _3354 = (_3599 * _3484.x) + _3422;
                        _3355 = (_3599 * _3484.y) + _3423;
                        _3356 = (_3599 * _3484.z) + _3424;
                        if (_3429 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3422 = _3354;
                            _3423 = _3355;
                            _3424 = _3356;
                            _3425 = _3357;
                            _3426 = _3358;
                            _3427 = _3359;
                            _3428 = _3429;
                        }
                    }
                    frontier_phi_66_pred = _3359;
                    frontier_phi_66_pred_1 = _3358;
                    frontier_phi_66_pred_2 = _3357;
                    frontier_phi_66_pred_3 = _3356;
                    frontier_phi_66_pred_4 = _3355;
                    frontier_phi_66_pred_5 = _3354;
                }
                _3164 = frontier_phi_66_pred;
                _3162 = frontier_phi_66_pred_1;
                _3160 = frontier_phi_66_pred_2;
                _3158 = frontier_phi_66_pred_3;
                _3156 = frontier_phi_66_pred_4;
                _3154 = frontier_phi_66_pred_5;
                uint _3305 = _3304 + 1u;
                if (_3305 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3298 = _3154;
                    _3299 = _3156;
                    _3300 = _3158;
                    _3301 = _3160;
                    _3302 = _3162;
                    _3303 = _3164;
                    _3304 = _3305;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3153 = _3154;
            _3155 = _3156;
            _3157 = _3158;
            _3159 = _3160;
            _3161 = _3162;
            _3163 = _3164;
        }
        uvec4 _3167 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3168 = _3167.z;
        uint _3170 = (_3168 >> 8u) & 15u;
        float _3266;
        float _3268;
        float _3270;
        float _3272;
        float _3274;
        float _3276;
        if (((4294967295u << _3170) & _3073) == 0u)
        {
            _3266 = _3153;
            _3268 = _3155;
            _3270 = _3157;
            _3272 = _3159;
            _3274 = _3161;
            _3276 = _3163;
        }
        else
        {
            float _3291 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
            float _3292 = _3291 * _2132;
            float _3293 = _3291 * _2133;
            float _3294 = _3291 * _2134;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3170 < ((_3168 >> 12u) & 15u))
            {
                float _3267;
                float _3269;
                float _3271;
                float _3273;
                float _3275;
                float _3277;
                float _3405 = _3153;
                float _3406 = _3155;
                float _3407 = _3157;
                float _3408 = _3159;
                float _3409 = _3161;
                float _3410 = _3163;
                uint _3411 = _3170;
                uint _3420;
                bool _3421;
                for (;;)
                {
                    _3420 = texelFetch(g_lightClassification, int((((_3067 << 5u) + (_3053 << 9u)) + (_3411 << 2u)) >> 2u)).x;
                    _3421 = _3420 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3421)
                    {
                        frontier_phi_72_pred = _3410;
                        frontier_phi_72_pred_1 = _3409;
                        frontier_phi_72_pred_2 = _3408;
                        frontier_phi_72_pred_3 = _3407;
                        frontier_phi_72_pred_4 = _3406;
                        frontier_phi_72_pred_5 = _3405;
                    }
                    else
                    {
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3897;
                        float _3898;
                        float _3899;
                        float _3900;
                        float _3901;
                        float _3902;
                        float _3617 = _3405;
                        float _3618 = _3406;
                        float _3619 = _3407;
                        float _3620 = _3408;
                        float _3621 = _3409;
                        float _3622 = _3410;
                        uint _3623 = _3420;
                        uint _3624;
                        vec4 _3649;
                        float _3650;
                        vec4 _3665;
                        vec3 _3677;
                        vec4 _3692;
                        vec4 _3707;
                        float _3753;
                        bool _3754;
                        for (;;)
                        {
                            uint _3634 = ((_3411 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3623));
                            _3624 = (_3623 + 4294967295u) & _3623;
                            uint _3636 = _3634 * 40u;
                            _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            _3650 = _3649.w;
                            uint _3652 = (_3634 * 40u) + 4u;
                            _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            uint _3667 = (_3634 * 40u) + 8u;
                            _3677 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x));
                            uint _3679 = (_3634 * 40u) + 16u;
                            _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            uint _3694 = (_3634 * 40u) + 20u;
                            _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3709 = (_3634 * 40u) + 24u;
                            vec4 _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            uint _3728 = (_3634 * 40u) + 28u;
                            vec4 _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            _3753 = fma(_2134, _3741.z, fma(_2133, _3741.y, _3741.x * _2132)) + _3741.w;
                            _3754 = !((fma(_2134, _3722.z, fma(_2133, _3722.y, _3722.x * _2132)) + _3722.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3754)
                            {
                                float _3781 = _3649.x - _2132;
                                float _3782 = _3649.y - _2133;
                                float _3783 = _3649.z - _2134;
                                float _3784 = dot(vec3(_3781, _3782, _3783), vec3(_3781, _3782, _3783));
                                float _3787 = inversesqrt(_3784);
                                float _3788 = _3787 * _3781;
                                float _3789 = _3787 * _3782;
                                float _3790 = _3787 * _3783;
                                float _3794 = 1.0 - (_3784 / (_3650 * _3650));
                                float _4958 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3795 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3799 = sqrt(_3784) * _3665.w;
                                float _3801 = 1.39999997615814208984375 / (_3799 + 1.39999997615814208984375);
                                float _3802 = _3801 * _3801;
                                float _3805 = ((1.0 - _3802) * dot(vec3(_3788, _3789, _3790), vec3(_999, _1002, _1005))) + _3802;
                                float _3808 = _3799 * _3799;
                                float _3812 = (fma(_2134, _3692.z, fma(_2133, _3692.y, _3692.x * _2132)) + _3692.w) / _3753;
                                float _3813 = (fma(_2134, _3707.z, fma(_2133, _3707.y, _3707.x * _2132)) + _3707.w) / _3753;
                                float _3817 = 1.0 - dot(vec2(_3812, _3813), vec2(_3812, _3813));
                                float _4974 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3818 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3819 = _3818 * (((isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0))) * _3795) / ((_3808 * 0.699999988079071044921875) + 1.0));
                                float _3831 = exp2(log2(1.0 / ((_3808 * 3.5) + 5.0)) * 0.25);
                                float _3832 = 1.0 - _1074;
                                float _3839 = sqrt(1.0 - ((1.0 - (_3832 * _3832)) * (1.0 - (_3831 * _3831))));
                                float _3840 = _3839 * _3839;
                                float _3841 = _3840 * _3840;
                                float _3842 = _3788 - _3292;
                                float _3843 = _3789 - _3293;
                                float _3844 = _3790 - _3294;
                                float _3848 = inversesqrt(dot(vec3(_3842, _3843, _3844), vec3(_3842, _3843, _3844)));
                                float _3852 = dot(vec3(_999, _1002, _1005), vec3((-0.0) - _3292, (-0.0) - _3293, (-0.0) - _3294));
                                float _4985 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3855 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3856 = dot(vec3(_999, _1002, _1005), vec3(_3848 * _3842, _3848 * _3843, _3848 * _3844));
                                float _4996 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3859 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3863 = ((_3859 * _3859) * (_3841 + (-1.0))) + 1.0;
                                float _3864 = _3801 * _3840;
                                float _3865 = _3864 * _3864;
                                float _3871 = ((1.0 - _3865) * dot(vec3(_999, _1002, _1005), vec3(_3788, _3789, _3790))) + _3865;
                                float _5007 = isnan(0.0) ? _3871 : (isnan(_3871) ? 0.0 : max(_3871, 0.0));
                                float _3872 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3873 = 1.0 - _3840;
                                float _3883 = (0.5 / (((_3872 * ((_3855 * _3873) + _3840)) + 9.9999999392252902907785028219223e-09) + (((_3872 * _3873) + _3840) * _3855))) * _3872;
                                float _5018 = isnan(0.0) ? _3883 : (isnan(_3883) ? 0.0 : max(_3883, 0.0));
                                float _3893 = (_3818 * _3795) * (((_3841 * 3.1415927410125732421875) * (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0)))) / ((_3863 * _3863) * ((_3808 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3819 * _3665.y;
                                frontier_phi_78_pred_1 = _3819 * _3665.x;
                                frontier_phi_78_pred_2 = _3893 * _3677.z;
                                frontier_phi_78_pred_3 = _3893 * _3677.y;
                                frontier_phi_78_pred_4 = _3893 * _3677.x;
                                frontier_phi_78_pred_5 = _3819 * _3665.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3901 = frontier_phi_78_pred;
                            _3900 = frontier_phi_78_pred_1;
                            _3899 = frontier_phi_78_pred_2;
                            _3898 = frontier_phi_78_pred_3;
                            _3897 = frontier_phi_78_pred_4;
                            _3902 = frontier_phi_78_pred_5;
                            _3607 = _3900 + _3620;
                            _3608 = _3901 + _3621;
                            _3609 = _3902 + _3622;
                            _3604 = _3897 + _3617;
                            _3605 = _3898 + _3618;
                            _3606 = _3899 + _3619;
                            if (_3624 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3608;
                                _3622 = _3609;
                                _3623 = _3624;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3609;
                        frontier_phi_72_pred_1 = _3608;
                        frontier_phi_72_pred_2 = _3607;
                        frontier_phi_72_pred_3 = _3606;
                        frontier_phi_72_pred_4 = _3605;
                        frontier_phi_72_pred_5 = _3604;
                    }
                    _3277 = frontier_phi_72_pred;
                    _3275 = frontier_phi_72_pred_1;
                    _3273 = frontier_phi_72_pred_2;
                    _3271 = frontier_phi_72_pred_3;
                    _3269 = frontier_phi_72_pred_4;
                    _3267 = frontier_phi_72_pred_5;
                    uint _3412 = _3411 + 1u;
                    if (_3412 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3405 = _3267;
                        _3406 = _3269;
                        _3407 = _3271;
                        _3408 = _3273;
                        _3409 = _3275;
                        _3410 = _3277;
                        _3411 = _3412;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3277;
                frontier_phi_60_61_ladder_1 = _3275;
                frontier_phi_60_61_ladder_2 = _3271;
                frontier_phi_60_61_ladder_3 = _3269;
                frontier_phi_60_61_ladder_4 = _3267;
                frontier_phi_60_61_ladder_5 = _3273;
            }
            else
            {
                frontier_phi_60_61_ladder = _3163;
                frontier_phi_60_61_ladder_1 = _3161;
                frontier_phi_60_61_ladder_2 = _3157;
                frontier_phi_60_61_ladder_3 = _3155;
                frontier_phi_60_61_ladder_4 = _3153;
                frontier_phi_60_61_ladder_5 = _3159;
            }
            _3266 = frontier_phi_60_61_ladder_4;
            _3268 = frontier_phi_60_61_ladder_3;
            _3270 = frontier_phi_60_61_ladder_2;
            _3272 = frontier_phi_60_61_ladder_5;
            _3274 = frontier_phi_60_61_ladder_1;
            _3276 = frontier_phi_60_61_ladder;
        }
        float _3281 = isnan(1.0) ? _1058 : (isnan(_1058) ? 1.0 : min(_1058, 1.0));
        _3086 = (_3281 * _3272) + _2598;
        _3088 = (_3281 * _3274) + _2600;
        _3090 = (_3281 * _3276) + _2602;
        _3092 = ((_3266 * _1042) * _3281) + _2936;
        _3094 = ((_3268 * _1044) * _3281) + _2938;
        _3096 = ((_3270 * _1045) * _3281) + _2940;
    }
    else
    {
        _3086 = _2598;
        _3088 = _2600;
        _3090 = _2602;
        _3092 = _2936;
        _3094 = _2938;
        _3096 = _2940;
    }
    float _5034 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _5045 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _5056 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    uint _3116 = _282 + 6u;
    float _3124 = _980 / cbSceneParam._m0[86u].x;
    float _3125 = _981 / cbSceneParam._m0[86u].y;
    vec4 _3139 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3124, _3125, (log2((isnan(cbSceneParam._m0[77u].w) ? _915 : (isnan(_915) ? cbSceneParam._m0[77u].w : min(_915, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3141 = _3139.x;
    float _3142 = _3139.y;
    float _3143 = _3139.z;
    float _3144 = _3139.w;
    float _3216;
    float _3218;
    float _3220;
    float _3222;
    if (_915 > cbSceneParam._m0[78u].w)
    {
        float _3178 = isnan(_915) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _915 : min(cbSceneParam._m0[80u].w, _915));
        float _3179 = _3178 / _915;
        float _3190 = _3179 * _965;
        float _3191 = _966 * _3179;
        float _3192 = (-0.0) - _3191;
        float _3194 = _3179 * _967;
        float _3196 = (cbSceneParam._m0[77u].w * _3192) / _3178;
        float _3197 = _3196 + cbSceneParam._m0[79u].w;
        float _3198 = cbSceneParam._m0[79u].w - _3191;
        float _3204 = sqrt(((_3190 * _3190) + (_3191 * _3191)) + (_3194 * _3194));
        float _3207 = (1.0 - (cbSceneParam._m0[77u].w / _3178)) * _3204;
        float _3212 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3214 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3367;
        if (abs((_3192 - _3196) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3367 = ((((_3197 > 0.0) ? exp2(_3212 * _3197) : (2.0 - exp2(_3214 * _3197))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3207;
        }
        else
        {
            float _3327 = 1.0 / cbSceneParam._m0[80u].x;
            float _3328 = isnan(_3198) ? _3197 : (isnan(_3197) ? _3198 : max(_3197, _3198));
            float _3329 = isnan(_3198) ? _3197 : (isnan(_3197) ? _3198 : min(_3197, _3198));
            float _3338 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : min(_3328, 0.0));
            float _3339 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : min(_3329, 0.0));
            _3367 = ((abs(_3204 / _3192) * cbSceneParam._m0[80u].y) * ((((_3338 - _3339) * 2.0) - ((exp2(_3212 * (isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0)))) - exp2(_3212 * (isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))))) * _3327)) - ((exp2(_3214 * _3338) - exp2(_3214 * _3339)) * _3327))) + (_3207 * cbSceneParam._m0[80u].z);
        }
        vec4 _3369 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3124, _3125, 1.0), 0.0);
        float _3378 = exp2((_3367 * (-1.44269502162933349609375)) * (1.0 - _3369.w));
        float _3379 = log2(_3378);
        float _3395 = log2(_3144);
        _3216 = (exp2(_3395 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3379 * cbSceneParam._m0[78u].x)) * _3369.x) / cbSceneParam._m0[78u].x)) + _3141;
        _3218 = (exp2(_3395 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3379 * cbSceneParam._m0[78u].y)) * _3369.y) / cbSceneParam._m0[78u].y)) + _3142;
        _3220 = (exp2(_3395 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3379 * cbSceneParam._m0[78u].z)) * _3369.z) / cbSceneParam._m0[78u].z)) + _3143;
        _3222 = _3378 * _3144;
    }
    else
    {
        _3216 = _3141;
        _3218 = _3142;
        _3220 = _3143;
        _3222 = _3144;
    }
    float _3234 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3235 = _3234 == 3.0;
    float _3236 = log2(_3222);
    float _3243 = exp2(_3236 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0))) * (_3086 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1058))) + ((_3092 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1864)) * cbPerFrame._m0[3u].x));
    float _3244 = exp2(_3236 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_3088 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1058))) + ((_3094 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1864)) * cbPerFrame._m0[3u].x));
    float _3245 = exp2(_3236 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * (_3090 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1058))) + ((_3096 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1864)) * cbPerFrame._m0[3u].x));
    float _3254 = (_3234 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3254 * (_3235 ? _3243 : (_3243 + (cbSceneParam._m0[72u].w * _3216)));
    SV_Target.y = _3254 * (_3235 ? _3244 : (_3244 + (cbSceneParam._m0[72u].w * _3218)));
    SV_Target.z = _3254 * (_3235 ? _3245 : (_3245 + (cbSceneParam._m0[72u].w * _3220)));
    SV_Target.w = cbInstanceData._m0[_3116].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3116].w;
}


