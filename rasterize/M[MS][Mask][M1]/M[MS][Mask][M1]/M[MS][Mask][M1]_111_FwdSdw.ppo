#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1437;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _344.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[23u].w) + _397) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4044 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _422 = (_415 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _423 = (_415 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _424 = (_415 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _473 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _487 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _344.y) * 2.0) - ((((_463 - _473) * cbMtdParam._m0[23u].w) + _473) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4055 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _495 = (_488 * ((_441.x * cbMtdParam._m0[13u].x) - _422)) + _422;
    float _496 = (_488 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423;
    float _497 = (_488 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _533 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _535 = _533.x;
    float _545 = dot(vec4(_535, _533.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _557 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _344.z) * 2.0) - ((((_535 - _545) * cbMtdParam._m0[23u].w) + _545) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4066 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _565 = (_558 * ((_516.x * cbMtdParam._m0[14u].x) - _495)) + _495;
    float _566 = (_558 * ((_516.y * cbMtdParam._m0[14u].y) - _496)) + _496;
    float _567 = (_558 * ((_516.z * cbMtdParam._m0[14u].z) - _497)) + _497;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _604 = _602.x;
    float _605 = _602.y;
    float _606 = _602.z;
    float _613 = ((_585.x - _604) * _415) + _604;
    float _614 = ((_585.y - _605) * _415) + _605;
    float _615 = ((_585.z - _606) * _415) + _606;
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _638 = ((_627.x - _613) * _488) + _613;
    float _639 = ((_627.y - _614) * _488) + _614;
    float _640 = ((_627.z - _615) * _488) + _615;
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _665 = ((_652.z - _640) * _558) + _640;
    float _668 = ((((_652.x - _638) * _558) + _638) * 2.0) + (-1.0);
    float _670 = ((((_652.y - _639) * _558) + _639) * 2.0) + (-1.0);
    float _671 = dot(vec2(_668, _670), vec2(_668, _670));
    float _4077 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _676 = sqrt(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _715 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _717 = _715.x;
    float _718 = 1.0 - _717;
    float _733 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_717 - _718) * cbMtdParam._m0[24u].z) + _718) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4088 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _734 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _741 = (_734 * (cbMtdParam._m0[17u].x - _565)) + _565;
    float _742 = (_734 * (cbMtdParam._m0[17u].y - _566)) + _566;
    float _743 = (_734 * (cbMtdParam._m0[17u].z - _567)) + _567;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _771 = _769.x;
    float _789 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _771) * _415) + _771;
    float _806 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _789) * _488) + _789;
    float _824 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _276) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _277) + cbTextureTilingScale._m0[10u].w)).x - _806) * _558) + _806;
    float _828 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _824) * cbMtdParam._m0[19u].z) + _824;
    float _830 = _828 - (_828 * _734);
    float _834 = (cbMtdParam._m0[19u].w * (_690.z - _665)) + _665;
    vec4 _847 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _854 = (_847.x * 2.0) + (-1.0);
    float _855 = (_847.y * 2.0) + (-1.0);
    float _856 = dot(vec2(_854, _855), vec2(_854, _855));
    float _4099 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _864 = (_734 * (_847.z - _834)) + _834;
    float _867 = (((_690.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _668;
    float _868 = (((_690.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _670;
    float _880 = (((_854 - _867) + (cbMtdParam._m0[21u].x * _867)) * _734) + _867;
    float _881 = (((_855 - _868) + (cbMtdParam._m0[21u].x * _868)) * _734) + _868;
    float _882 = (_734 * (sqrt(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) - _676)) + _676;
    float _884 = cbMtdParam._m0[22u].x + _690.w;
    float _887 = fma(_882, _243 * NORMAL.x, fma(_881, _250 * TANGENT.x, (_236 * _228) * _880));
    float _890 = fma(_882, _243 * NORMAL.y, fma(_881, _250 * TANGENT.y, (_236 * _229) * _880));
    float _893 = fma(_882, _243 * NORMAL.z, fma(_881, _250 * TANGENT.z, (_236 * _230) * _880));
    float _897 = inversesqrt(dot(vec3(_887, _890, _893), vec3(_887, _890, _893)));
    float _898 = _897 * _887;
    float _899 = _897 * _890;
    float _900 = _897 * _893;
    float _4110 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _901 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4132 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4143 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4154 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4165 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _906 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _920 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _970 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _960);
    float _971 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _960);
    float _972 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _960);
    float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
    float _977 = _970 * _976;
    float _978 = _971 * _976;
    float _979 = _972 * _976;
    float _985 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _986 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1004 = fma(_900, cbSceneParam._m0[5u].z, fma(_899, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _898));
    float _1007 = fma(_900, cbSceneParam._m0[6u].z, fma(_899, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _898));
    float _1010 = fma(_900, cbSceneParam._m0[7u].z, fma(_899, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _898));
    uint _1024 = (_256 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1030 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * cbInstanceData._m0[_1024].x;
    float _1031 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * cbInstanceData._m0[_1024].y;
    float _1032 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * cbInstanceData._m0[_1024].z;
    float _4176 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _4198 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _1036 = 1.0 - _906;
    float _1037 = _1033 * _1036;
    float _1038 = _1034 * _1036;
    float _1039 = _1035 * _1036;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _906;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _906;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _906;
    float _1047 = _1044 + 0.039999999105930328369140625;
    float _1049 = _1045 + 0.039999999105930328369140625;
    float _1050 = _1046 + 0.039999999105930328369140625;
    vec4 _1059 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _985, cbSceneParam._m0[86u].y * _986));
    float _1063 = ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * TEXCOORD_5.w) * _1059.x;
    float _1064 = dot(vec3(_898, _899, _900), vec3(_977, _978, _979));
    float _1067 = _1064 * 2.0;
    float _1071 = (_1067 * _898) - _977;
    float _1072 = (_1067 * _899) - _978;
    float _1073 = (_1067 * _900) - _979;
    float _1077 = abs(dot(vec3(_977, _978, _979), vec3(_898, _899, _900)));
    float _4209 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1079 = sqrt(_901);
    float _1092 = exp2((_1079 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1079 * 3.0));
    float _1098 = (1.0 - _1092) * ((_1079 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1099 = _1092 * _1079;
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1135 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1436;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1161 = fma(_1135, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127));
        float _1165 = fma(_1135, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127));
        float _1169 = fma(_1135, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127));
        float _1194 = _1127 + _898;
        float _1195 = _1131 + _899;
        float _1196 = _1135 + _900;
        float _1206 = fma(_1196, cbModelParam._m0[26u].z, fma(_1195, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1194)) - _1161;
        float _1207 = fma(_1196, cbModelParam._m0[27u].z, fma(_1195, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1194)) - _1165;
        float _1208 = fma(_1196, cbModelParam._m0[28u].z, fma(_1195, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1194)) - _1169;
        float _1212 = inversesqrt(dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208)));
        float _1225 = ((_1212 * _1206) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1161 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1212 * _1207) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1165 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1212 * _1208) / cbModelParam._m0[34u].z) + ((((((_1169 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        float _1264 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1230.x + (-0.5));
        float _1266 = _1264 * (_1230.y + (-0.5));
        float _1267 = _1264 * (_1230.z + (-0.5));
        float _1274 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1237.x + (-0.5));
        float _1276 = _1274 * (_1237.y + (-0.5));
        float _1277 = _1274 * (_1237.z + (-0.5));
        float _1284 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1244.x + (-0.5));
        float _1286 = _1284 * (_1244.y + (-0.5));
        float _1287 = _1284 * (_1244.z + (-0.5));
        float _1294 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1251.x + (-0.5));
        float _1296 = _1294 * (_1251.y + (-0.5));
        float _1297 = _1294 * (_1251.z + (-0.5));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = _1265 * 0.5;
        float _1302 = _1275 * 0.5;
        float _1303 = _1285 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1318 = (dot(vec3(_898, _899, _900), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1328 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4257 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1330 + 1.0))) + _1335) * _1298;
        float _1345 = _1266 * 0.5;
        float _1346 = _1276 * 0.5;
        float _1347 = _1286 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_898, _899, _900), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4290 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1372 + 1.0))) + _1377) * _1299;
        float _1387 = _1267 * 0.5;
        float _1388 = _1277 * 0.5;
        float _1389 = _1287 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_898, _899, _900), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4323 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1414 + 1.0))) + _1419) * _1300;
        _1436 = _1267;
        _1438 = _1266;
        _1439 = _1265;
        _1440 = _1277;
        _1441 = _1276;
        _1442 = _1275;
        _1443 = _1287;
        _1444 = _1286;
        _1445 = _1285;
        _1446 = _1300;
        _1447 = _1299;
        _1448 = _1298;
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1437;
        _1438 = _1437;
        _1439 = _1437;
        _1440 = _1437;
        _1441 = _1437;
        _1442 = _1437;
        _1443 = _1437;
        _1444 = _1437;
        _1445 = _1437;
        _1446 = _1437;
        _1447 = _1437;
        _1448 = _1437;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1474 = fma(_1135, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1127));
        float _1478 = fma(_1135, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1127));
        float _1482 = fma(_1135, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1127));
        float _1505 = _1127 + _898;
        float _1506 = _1131 + _899;
        float _1507 = _1135 + _900;
        float _1517 = fma(_1507, cbModelParam._m0[30u].z, fma(_1506, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1505)) - _1474;
        float _1518 = fma(_1507, cbModelParam._m0[31u].z, fma(_1506, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1505)) - _1478;
        float _1519 = fma(_1507, cbModelParam._m0[32u].z, fma(_1506, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1505)) - _1482;
        float _1523 = inversesqrt(dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519)));
        float _1536 = ((_1523 * _1517) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1474 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1523 * _1518) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1478 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1523 * _1519) / cbModelParam._m0[35u].z) + ((((((_1482 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        float _1573 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1540.x + (-0.5));
        float _1575 = _1573 * (_1540.y + (-0.5));
        float _1576 = _1573 * (_1540.z + (-0.5));
        float _1583 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1547.x + (-0.5));
        float _1585 = _1583 * (_1547.y + (-0.5));
        float _1586 = _1583 * (_1547.z + (-0.5));
        float _1593 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1554.x + (-0.5));
        float _1595 = _1593 * (_1554.y + (-0.5));
        float _1596 = _1593 * (_1554.z + (-0.5));
        float _1603 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1561.x + (-0.5));
        float _1605 = _1603 * (_1561.y + (-0.5));
        float _1606 = _1603 * (_1561.z + (-0.5));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = _1574 * 0.5;
        float _1611 = _1584 * 0.5;
        float _1612 = _1594 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_898, _899, _900), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4386 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1637 + 1.0))) + _1642) * _1607;
        float _1652 = _1575 * 0.5;
        float _1653 = _1585 * 0.5;
        float _1654 = _1595 * 0.5;
        float _1655 = dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654));
        float _1660 = (_1655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1655);
        float _1668 = (dot(vec3(_898, _899, _900), vec3(_1660 * _1652, _1660 * _1653, _1660 * _1654)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1677 = sqrt(((_1653 * _1653) + (_1652 * _1652)) + (_1654 * _1654)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1679 = _1678 * 2.0;
        float _1683 = (1.0 - _1678) / (_1678 + 1.0);
        float _4419 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1693 = ((((1.0 - _1684) * (_1679 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1679 + 1.0))) + _1684) * _1608;
        float _1694 = _1576 * 0.5;
        float _1695 = _1586 * 0.5;
        float _1696 = _1596 * 0.5;
        float _1697 = dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696));
        float _1702 = (_1697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1697);
        float _1710 = (dot(vec3(_898, _899, _900), vec3(_1702 * _1694, _1702 * _1695, _1702 * _1696)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1719 = sqrt(((_1695 * _1695) + (_1694 * _1694)) + (_1696 * _1696)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1721 = _1720 * 2.0;
        float _1725 = (1.0 - _1720) / (_1720 + 1.0);
        float _4452 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1735 = ((((1.0 - _1726) * (_1721 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1721 + 1.0))) + _1726) * _1609;
        _1743 = _1576;
        _1744 = _1575;
        _1745 = _1574;
        _1746 = _1586;
        _1747 = _1585;
        _1748 = _1584;
        _1749 = _1596;
        _1750 = _1595;
        _1751 = _1594;
        _1752 = _1609;
        _1753 = _1608;
        _1754 = _1607;
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)));
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)));
    }
    else
    {
        _1743 = _1437;
        _1744 = _1437;
        _1745 = _1437;
        _1746 = _1437;
        _1747 = _1437;
        _1748 = _1437;
        _1749 = _1437;
        _1750 = _1437;
        _1751 = _1437;
        _1752 = _1437;
        _1753 = _1437;
        _1754 = _1437;
        _1755 = 0.0;
        _1756 = 0.0;
        _1757 = 0.0;
    }
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1449)) + _1449;
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1450)) + _1450;
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1451)) + _1451;
    float _1790 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1768, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1793 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1768, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1796 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1768, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1767));
    float _1811 = _1071 * 0.5;
    float _1812 = _1072 * 0.5;
    float _1813 = _1073 * 0.5;
    float _1814 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1817 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1820 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1854;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1827 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1436, _1440, _1443, _1446));
        float _1831 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1438, _1441, _1444, _1447));
        float _1835 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1842 = dot(vec4(cbModelParam._m0[39u]), vec4(_1811, _1812, _1813, 1.0));
        _1854 = dot(vec3(isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1854 = 1.0;
    }
    float _1865;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1856 = dot(vec4(cbModelParam._m0[40u]), vec4(_1811, _1812, _1813, 1.0));
        _1865 = dot(vec3(isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1856) ? 0.0 : (isnan(0.0) ? _1856 : max(0.0, _1856))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1865 = 1.0;
    }
    float _1869 = (_1865 * cbModelParam._m0[1u].x) + (_1854 * (1.0 - cbModelParam._m0[1u].x));
    float _1879 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _901);
    float _1880 = isnan(_1879) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1879 : min(cbModelParam._m0[25u].z, _1879));
    float _1960;
    float _1962;
    float _1964;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1927 = fma(_1135, cbModelParam._m0[13u].z, fma(_1131, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1127)) + cbModelParam._m0[13u].w;
        float _1931 = fma(_1135, cbModelParam._m0[14u].z, fma(_1131, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1127)) + cbModelParam._m0[14u].w;
        float _1935 = fma(_1135, cbModelParam._m0[15u].z, fma(_1131, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1127)) + cbModelParam._m0[15u].w;
        float _1938 = fma(_1073, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071));
        float _1941 = fma(_1073, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071));
        float _1944 = fma(_1073, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071));
        float _1972;
        if (_1938 > 0.0)
        {
            _1972 = abs((1.0 - _1927) / _1938);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1927 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1972 = frontier_phi_14_12_ladder;
        }
        float _2144;
        if (_1941 > 0.0)
        {
            _2144 = abs((1.0 - _1931) / _1941);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1931 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2144 = frontier_phi_23_19_ladder;
        }
        float _2439;
        if (_1944 > 0.0)
        {
            _2439 = abs((1.0 - _1935) / _1944);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1935 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2439 = frontier_phi_35_30_ladder;
        }
        float _2441 = isnan(_2144) ? _1972 : (isnan(_1972) ? _2144 : min(_1972, _2144));
        float _2442 = isnan(_2439) ? _2441 : (isnan(_2441) ? _2439 : min(_2441, _2439));
        float _2446 = (_2442 * _1938) + _1927;
        float _2447 = (_2442 * _1941) + _1931;
        float _2448 = (_2442 * _1944) + _1935;
        float _2449 = _2442 * 9.9999997473787516355514526367188e-05;
        float _2451 = (-1.0) - _2449;
        float _2453 = _2449 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2448 > _2453) || ((_2448 < _2451) || ((_2447 > _2453) || ((_2447 < _2451) || ((_2446 < _2451) || (_2446 > _2453))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2593 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2448, cbModelParam._m0[9u].z, fma(_2447, cbModelParam._m0[9u].y, _2446 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2448, cbModelParam._m0[10u].z, fma(_2447, cbModelParam._m0[10u].y, _2446 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2448, cbModelParam._m0[11u].z, fma(_2447, cbModelParam._m0[11u].y, _2446 * cbModelParam._m0[11u].x))), _1880);
            frontier_phi_13_35_ladder = _2593.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2593.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2593.x * cbModelParam._m0[1u].y;
        }
        _1960 = frontier_phi_13_35_ladder_2;
        _1962 = frontier_phi_13_35_ladder_1;
        _1964 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1948 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1071, _1072, _1073), _1880);
        _1960 = _1948.x * cbModelParam._m0[1u].y;
        _1962 = _1948.y * cbModelParam._m0[1u].y;
        _1964 = _1948.z * cbModelParam._m0[1u].y;
    }
    float _1968 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _901);
    float _1969 = isnan(_1968) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1968 : min(cbModelParam._m0[25u].w, _1968));
    float _2059;
    float _2061;
    float _2063;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2023 = fma(_1135, cbModelParam._m0[21u].z, fma(_1131, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1127)) + cbModelParam._m0[21u].w;
        float _2027 = fma(_1135, cbModelParam._m0[22u].z, fma(_1131, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1127)) + cbModelParam._m0[22u].w;
        float _2031 = fma(_1135, cbModelParam._m0[23u].z, fma(_1131, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1127)) + cbModelParam._m0[23u].w;
        float _2034 = fma(_1073, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071));
        float _2037 = fma(_1073, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071));
        float _2040 = fma(_1073, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071));
        float _2149;
        if (_2034 > 0.0)
        {
            _2149 = abs((1.0 - _2023) / _2034);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2023 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2149 = frontier_phi_25_21_ladder;
        }
        float _2466;
        if (_2037 > 0.0)
        {
            _2466 = abs((1.0 - _2027) / _2037);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2027 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2466 = frontier_phi_37_32_ladder;
        }
        float _2804;
        if (_2040 > 0.0)
        {
            _2804 = abs((1.0 - _2031) / _2040);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2031 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2804 = frontier_phi_47_44_ladder;
        }
        float _2806 = isnan(_2466) ? _2149 : (isnan(_2149) ? _2466 : min(_2149, _2466));
        float _2807 = isnan(_2804) ? _2806 : (isnan(_2806) ? _2804 : min(_2806, _2804));
        float _2811 = (_2807 * _2034) + _2023;
        float _2812 = (_2807 * _2037) + _2027;
        float _2813 = (_2807 * _2040) + _2031;
        float _2814 = _2807 * 9.9999997473787516355514526367188e-05;
        float _2815 = (-1.0) - _2814;
        float _2817 = _2814 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2813 > _2817) || ((_2813 < _2815) || ((_2812 > _2817) || ((_2812 < _2815) || ((_2811 < _2815) || (_2811 > _2817))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2813, cbModelParam._m0[17u].z, fma(_2812, cbModelParam._m0[17u].y, _2811 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2813, cbModelParam._m0[18u].z, fma(_2812, cbModelParam._m0[18u].y, _2811 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2813, cbModelParam._m0[19u].z, fma(_2812, cbModelParam._m0[19u].y, _2811 * cbModelParam._m0[19u].x))), _1969);
            frontier_phi_22_47_ladder = _2935.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2935.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2935.x * cbModelParam._m0[1u].z;
        }
        _2059 = frontier_phi_22_47_ladder_2;
        _2061 = frontier_phi_22_47_ladder_1;
        _2063 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2043 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1071, _1072, _1073), _1969);
        _2059 = _2043.x * cbModelParam._m0[1u].z;
        _2061 = _2043.y * cbModelParam._m0[1u].z;
        _2063 = _2043.z * cbModelParam._m0[1u].z;
    }
    float _2076 = (((_1098 * _1047) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2078 = (((_1098 * _1049) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2061 - _1962)) + _1962);
    float _2080 = (((_1098 * _1050) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2063 - _1964)) + _1964);
    float _2083 = fma(_2080, cbSceneParam._m0[89u].z, fma(_2078, cbSceneParam._m0[89u].y, _2076 * cbSceneParam._m0[89u].x));
    float _2086 = fma(_2080, cbSceneParam._m0[90u].z, fma(_2078, cbSceneParam._m0[90u].y, _2076 * cbSceneParam._m0[90u].x));
    float _2089 = fma(_2080, cbSceneParam._m0[91u].z, fma(_2078, cbSceneParam._m0[91u].y, _2076 * cbSceneParam._m0[91u].x));
    float _2123 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2127 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2131 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2135 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2136 = _2123 / _2135;
    float _2137 = _2127 / _2135;
    float _2138 = _2131 / _2135;
    float _2285;
    float _2286;
    float _2287;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2165 = ((uint(_2138 > cbSceneParam._m0[59u].y) + uint(_2138 > cbSceneParam._m0[59u].x)) + uint(_2138 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2166 = _2165 + 43u;
        uint _2174 = _2165 + 44u;
        uint _2182 = _2165 + 45u;
        uint _2190 = _2165 + 46u;
        float _2201 = fma(_2135, cbSceneParam._m0[_2166].w, fma(_2131, cbSceneParam._m0[_2166].z, fma(_2127, cbSceneParam._m0[_2166].y, _2123 * cbSceneParam._m0[_2166].x)));
        float _2205 = fma(_2135, cbSceneParam._m0[_2174].w, fma(_2131, cbSceneParam._m0[_2174].z, fma(_2127, cbSceneParam._m0[_2174].y, _2123 * cbSceneParam._m0[_2174].x)));
        float _2213 = fma(_2135, cbSceneParam._m0[_2190].w, fma(_2131, cbSceneParam._m0[_2190].z, fma(_2127, cbSceneParam._m0[_2190].y, _2123 * cbSceneParam._m0[_2190].x)));
        float _2218 = cbSceneParam._m0[33u].z * _2213;
        float _2220 = cbSceneParam._m0[33u].w * _2213;
        float _2223 = fma(_2135, cbSceneParam._m0[_2182].w, fma(_2131, cbSceneParam._m0[_2182].z, fma(_2127, cbSceneParam._m0[_2182].y, _2123 * cbSceneParam._m0[_2182].x))) / _2213;
        float _2271 = (cbSceneParam._m0[33u].x - sqrt(((_2137 * _2137) + (_2136 * _2136)) + (_2138 * _2138))) * cbSceneParam._m0[33u].y;
        float _4578 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2278 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2218 + _2201) / _2213, (_2220 + _2205) / _2213), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2220 + _2201) / _2213, (_2205 - _2218) / _2213), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2201 - _2218) / _2213, (_2205 - _2220) / _2213), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2201 - _2220) / _2213, (_2218 + _2205) / _2213), _2223), 0.0)).x), vec4(0.25)));
        _2285 = 1.0 - (_2278 * cbSceneParam._m0[34u].x);
        _2286 = 1.0 - (_2278 * cbSceneParam._m0[34u].y);
        _2287 = 1.0 - (_2278 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2285 = 1.0;
        _2286 = 1.0;
        _2287 = 1.0;
    }
    float _2351;
    float _2353;
    float _2355;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2339 = fma(_2135, cbSceneParam._m0[63u].w, fma(_2131, cbSceneParam._m0[63u].z, fma(_2127, cbSceneParam._m0[63u].y, _2123 * cbSceneParam._m0[63u].x)));
        float _2340 = fma(_2135, cbSceneParam._m0[60u].w, fma(_2131, cbSceneParam._m0[60u].z, fma(_2127, cbSceneParam._m0[60u].y, _2123 * cbSceneParam._m0[60u].x))) / _2339;
        float _2341 = fma(_2135, cbSceneParam._m0[61u].w, fma(_2131, cbSceneParam._m0[61u].z, fma(_2127, cbSceneParam._m0[61u].y, _2123 * cbSceneParam._m0[61u].x))) / _2339;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2340 >= cbSceneParam._m0[64u].x) && (_2341 >= cbSceneParam._m0[64u].y)) && (_2340 <= cbSceneParam._m0[64u].z)) && (_2341 <= cbSceneParam._m0[64u].w))
        {
            float _2479 = fma(_2135, cbSceneParam._m0[62u].w, fma(_2131, cbSceneParam._m0[62u].z, fma(_2127, cbSceneParam._m0[62u].y, _2123 * cbSceneParam._m0[62u].x))) / _2339;
            float _2483 = isnan(cbSceneParam._m0[41u].w) ? _2479 : (isnan(_2479) ? cbSceneParam._m0[41u].w : max(_2479, cbSceneParam._m0[41u].w));
            float _2526 = (cbSceneParam._m0[33u].x - sqrt(((_2137 * _2137) + (_2136 * _2136)) + (_2138 * _2138))) * cbSceneParam._m0[33u].y;
            float _4594 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
            float _2533 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2340, cbSceneParam._m0[33u].w + _2341), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2340, _2341 - cbSceneParam._m0[33u].z), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2340 - cbSceneParam._m0[33u].z, _2341 - cbSceneParam._m0[33u].w), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2340 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2341), _2483), 0.0)).x), vec4(0.25)));
            float _2537 = 1.0 - (_2533 * cbSceneParam._m0[34u].x);
            float _2538 = 1.0 - (_2533 * cbSceneParam._m0[34u].y);
            float _2539 = 1.0 - (_2533 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2539) ? _2287 : (isnan(_2287) ? _2539 : min(_2287, _2539));
            frontier_phi_34_33_ladder_1 = isnan(_2538) ? _2286 : (isnan(_2286) ? _2538 : min(_2286, _2538));
            frontier_phi_34_33_ladder_2 = isnan(_2537) ? _2285 : (isnan(_2285) ? _2537 : min(_2285, _2537));
        }
        else
        {
            frontier_phi_34_33_ladder = _2287;
            frontier_phi_34_33_ladder_1 = _2286;
            frontier_phi_34_33_ladder_2 = _2285;
        }
        _2351 = frontier_phi_34_33_ladder_2;
        _2353 = frontier_phi_34_33_ladder_1;
        _2355 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2351 = _2285;
        _2353 = _2286;
        _2355 = _2287;
    }
    uvec4 _2360 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2362 = _2360.x * 14u;
    uint _2363 = _2362 + 13u;
    float _2370 = _1063 + (-1.0);
    float _2375 = (cbLight._m0[_2363].x * _2370) + 1.0;
    float _2376 = (cbLight._m0[_2363].y * _2370) + 1.0;
    float _2377 = (cbLight._m0[_2363].z * _2370) + 1.0;
    float _2378 = (cbLight._m0[_2363].w * _2370) + 1.0;
    uint _2379 = _2362 + 5u;
    float _2385 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
    uint _2389 = _2362 + 4u;
    float _2398 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
    uint _2402 = _2362 | 1u;
    float _2413 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_898, _899, _900));
    float _2416 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_898, _899, _900));
    float _4630 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _4641 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2421 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * 0.3183098733425140380859375;
    float _2423 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * 0.3183098733425140380859375;
    float _2430 = ((cbLight._m0[_2379].x * _2385) * _2423) + (((cbLight._m0[_2389].x * _2351) * _2398) * _2421);
    float _2431 = ((_2385 * cbLight._m0[_2379].y) * _2423) + (((cbLight._m0[_2389].y * _2353) * _2398) * _2421);
    float _2432 = ((_2385 * cbLight._m0[_2379].z) * _2423) + (((cbLight._m0[_2389].z * _2355) * _2398) * _2421);
    uvec4 _2436 = floatBitsToUint(cbLight._m0[_2362 + 12u]);
    bool _2438 = _2436.x == 0u;
    float _2540;
    float _2542;
    float _2544;
    if (_2438)
    {
        _2540 = _2430;
        _2542 = _2431;
        _2544 = _2432;
    }
    else
    {
        uint _2548 = _2362 + 6u;
        float _2564 = (dot(vec3(cbLight._m0[_2362 + 2u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2565 = _2564 * _2564;
        float _4652 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2566 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2567 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2540 = (((cbLight._m0[_2548].x * 0.3183098733425140380859375) * _2566) * _2567) + _2430;
        _2542 = (((cbLight._m0[_2548].y * 0.3183098733425140380859375) * _2566) * _2567) + _2431;
        _2544 = (((cbLight._m0[_2548].z * 0.3183098733425140380859375) * _2566) * _2567) + _2432;
    }
    bool _2547 = _2436.y == 0u;
    float _2602;
    float _2604;
    float _2606;
    if (_2547)
    {
        _2602 = _2540;
        _2604 = _2542;
        _2606 = _2544;
    }
    else
    {
        uint _2775 = _2362 + 7u;
        float _2791 = (dot(vec3(cbLight._m0[_2362 + 3u].xyz), vec3(_898, _899, _900)) * 0.5) + 0.5;
        float _2792 = _2791 * _2791;
        float _4668 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2793 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2794 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
        _2602 = (((cbLight._m0[_2775].x * 0.3183098733425140380859375) * _2793) * _2794) + _2540;
        _2604 = (((cbLight._m0[_2775].y * 0.3183098733425140380859375) * _2793) * _2794) + _2542;
        _2606 = (((cbLight._m0[_2775].z * 0.3183098733425140380859375) * _2793) * _2794) + _2544;
    }
    uint _2609 = _2362 + 8u;
    float _2622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _901) * 0.949999988079071044921875);
    float _2623 = _2622 * _2622;
    float _2624 = cbLight._m0[_2362].x + _977;
    float _2625 = cbLight._m0[_2362].y + _978;
    float _2626 = cbLight._m0[_2362].z + _979;
    float _2630 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
    float _2631 = _2630 * _2624;
    float _2632 = _2630 * _2625;
    float _2633 = _2630 * _2626;
    float _2634 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2362].xyz));
    float _4684 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _4695 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _2638 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2639 = dot(vec3(_898, _899, _900), vec3(_2631, _2632, _2633));
    float _4706 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2643 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2631, _2632, _2633));
    float _4717 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2647 = _2623 * _2623;
    float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
    float _2659 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
    float _2660 = 0.959999978542327880859375 - _1044;
    float _2662 = 0.959999978542327880859375 - _1045;
    float _2663 = 0.959999978542327880859375 - _1046;
    float _2670 = 1.0 - _2623;
    float _2681 = (0.5 / (((_2638 * ((_2637 * _2670) + _2623)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _2670) + _2623) * _2637))) * _2637;
    float _4728 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2683 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
    uint _2697 = _2362 + 9u;
    float _2708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _901) * 0.949999988079071044921875);
    float _2709 = _2708 * _2708;
    float _2710 = cbLight._m0[_2402].x + _977;
    float _2711 = cbLight._m0[_2402].y + _978;
    float _2712 = cbLight._m0[_2402].z + _979;
    float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
    float _2717 = _2716 * _2710;
    float _2718 = _2716 * _2711;
    float _2719 = _2716 * _2712;
    float _2720 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2402].xyz));
    float _4739 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2723 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2724 = dot(vec3(_898, _899, _900), vec3(_2717, _2718, _2719));
    float _4750 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2727 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2728 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2717, _2718, _2719));
    float _4761 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2732 = _2709 * _2709;
    float _2736 = ((_2727 * _2727) * (_2732 + (-1.0))) + 1.0;
    float _2743 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
    float _2750 = 1.0 - _2709;
    float _2760 = (0.5 / (((_2638 * ((_2723 * _2750) + _2709)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _2750) + _2709) * _2723))) * _2723;
    float _4772 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2762 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2732 / ((_2736 * _2736) * 3.141590118408203125));
    float _2772 = (((((_2743 * _2660) + _1047) * cbLight._m0[_2697].x) * _2762) * _2385) + ((((cbLight._m0[_2609].x * _2351) * ((_2659 * _2660) + _1047)) * _2683) * _2398);
    float _2773 = (((((_2743 * _2662) + _1049) * cbLight._m0[_2697].y) * _2762) * _2385) + ((((cbLight._m0[_2609].y * _2353) * ((_2659 * _2662) + _1049)) * _2683) * _2398);
    float _2774 = (((((_2743 * _2663) + _1050) * cbLight._m0[_2697].z) * _2762) * _2385) + ((((cbLight._m0[_2609].z * _2355) * ((_2659 * _2663) + _1050)) * _2683) * _2398);
    float _2830;
    float _2832;
    float _2834;
    if (_2438)
    {
        _2830 = _2772;
        _2832 = _2773;
        _2834 = _2774;
    }
    else
    {
        uint _2836 = _2362 + 2u;
        uint _2840 = _2362 + 10u;
        float _2854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2836].w)) * _901) * 0.949999988079071044921875);
        float _2855 = _2854 * _2854;
        float _2856 = cbLight._m0[_2836].x + _977;
        float _2857 = cbLight._m0[_2836].y + _978;
        float _2858 = cbLight._m0[_2836].z + _979;
        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
        float _2863 = _2862 * _2856;
        float _2864 = _2862 * _2857;
        float _2865 = _2862 * _2858;
        float _2866 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2836].xyz));
        float _4783 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2869 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2870 = dot(vec3(_898, _899, _900), vec3(_2863, _2864, _2865));
        float _4794 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2874 = dot(vec3(cbLight._m0[_2836].xyz), vec3(_2863, _2864, _2865));
        float _4805 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2878 = _2855 * _2855;
        float _2882 = ((_2873 * _2873) * (_2878 + (-1.0))) + 1.0;
        float _2889 = exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0);
        float _2896 = 1.0 - _2855;
        float _2906 = (0.5 / (((_2638 * ((_2869 * _2896) + _2855)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _2896) + _2855) * _2869))) * _2869;
        float _4816 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2908 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2878 / ((_2882 * _2882) * 3.141590118408203125));
        float _2909 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2830 = (((((_2889 * _2660) + _1047) * cbLight._m0[_2840].x) * _2908) * _2909) + _2772;
        _2832 = (((((_2889 * _2662) + _1049) * cbLight._m0[_2840].y) * _2908) * _2909) + _2773;
        _2834 = (((((_2889 * _2663) + _1050) * cbLight._m0[_2840].z) * _2908) * _2909) + _2774;
    }
    float _2940;
    float _2942;
    float _2944;
    if (_2547)
    {
        _2940 = _2830;
        _2942 = _2832;
        _2944 = _2834;
    }
    else
    {
        uint _2951 = _2362 + 3u;
        uint _2955 = _2362 + 11u;
        float _2969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2951].w)) * _901) * 0.949999988079071044921875);
        float _2970 = _2969 * _2969;
        float _2971 = cbLight._m0[_2951].x + _977;
        float _2972 = cbLight._m0[_2951].y + _978;
        float _2973 = cbLight._m0[_2951].z + _979;
        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
        float _2978 = _2977 * _2971;
        float _2979 = _2977 * _2972;
        float _2980 = _2977 * _2973;
        float _2981 = dot(vec3(_898, _899, _900), vec3(cbLight._m0[_2951].xyz));
        float _4832 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        float _2984 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2985 = dot(vec3(_898, _899, _900), vec3(_2978, _2979, _2980));
        float _4843 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2988 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2989 = dot(vec3(cbLight._m0[_2951].xyz), vec3(_2978, _2979, _2980));
        float _4854 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2993 = _2970 * _2970;
        float _2997 = ((_2988 * _2988) * (_2993 + (-1.0))) + 1.0;
        float _3004 = exp2(log2(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) * 5.0);
        float _3011 = 1.0 - _2970;
        float _3021 = (0.5 / (((_2638 * ((_2984 * _3011) + _2970)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _3011) + _2970) * _2984))) * _2984;
        float _4865 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3023 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2993 / ((_2997 * _2997) * 3.141590118408203125));
        float _3024 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
        _2940 = (((((_3004 * _2660) + _1047) * cbLight._m0[_2955].x) * _3023) * _3024) + _2830;
        _2942 = (((((_3004 * _2662) + _1049) * cbLight._m0[_2955].y) * _3023) * _3024) + _2832;
        _2944 = (((((_3004 * _2663) + _1050) * cbLight._m0[_2955].z) * _3023) * _3024) + _2834;
    }
    float _3090;
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    float _3100;
    if (_2360.y == 0u)
    {
        uvec4 _3045 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3046 = _3045.x;
        uint _3057 = uint((float(_3045.y) * floor(float(uint(cbSceneParam._m0[85u].y * _986) / _3046))) + floor(float(uint(cbSceneParam._m0[85u].x * _985) / _3046)));
        float _3067 = (log2(_2138 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3068 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
        uint _3071 = uint(isnan(14.0) ? _3068 : (isnan(_3068) ? 14.0 : min(_3068, 14.0)));
        uvec4 _3076 = texelFetch(g_lightClusterGridBuffer, int(((_3071 << 2u) + (_3057 << 6u)) >> 2u));
        uint _3077 = _3076.x;
        uint _3078 = _3045.z;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        if (((((1u << ((_3078 >> 4u) & 15u)) + 4294967295u) & _3077) == 0u) || ((_3078 & 240u) == 0u))
        {
            _3157 = 0.0;
            _3159 = 0.0;
            _3161 = 0.0;
            _3163 = 0.0;
            _3165 = 0.0;
            _3167 = 0.0;
        }
        else
        {
            float _3158;
            float _3160;
            float _3162;
            float _3164;
            float _3166;
            float _3168;
            float _3302 = 0.0;
            float _3303 = 0.0;
            float _3304 = 0.0;
            float _3305 = 0.0;
            float _3306 = 0.0;
            float _3307 = 0.0;
            uint _3308 = 0u;
            uint _3317;
            bool _3318;
            for (;;)
            {
                _3317 = texelFetch(g_lightClassification, int((((_3071 << 5u) + (_3057 << 9u)) + (_3308 << 2u)) >> 2u)).x;
                _3318 = _3317 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3318)
                {
                    frontier_phi_66_pred = _3307;
                    frontier_phi_66_pred_1 = _3306;
                    frontier_phi_66_pred_2 = _3305;
                    frontier_phi_66_pred_3 = _3304;
                    frontier_phi_66_pred_4 = _3303;
                    frontier_phi_66_pred_5 = _3302;
                }
                else
                {
                    float _3426;
                    float _3427;
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    uint _3432;
                    _3426 = _3302;
                    _3427 = _3303;
                    _3428 = _3304;
                    _3429 = _3305;
                    _3430 = _3306;
                    _3431 = _3307;
                    _3432 = _3317;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    for (;;)
                    {
                        uint _3436 = uint(findLSB(_3432)) + (_3308 << 5u);
                        uint _3433 = (_3432 + 4294967295u) & _3432;
                        uint _3438 = _3436 * 48u;
                        vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3438)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 3u)).x));
                        uint _3458 = (_3436 * 48u) + 4u;
                        vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3458)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 3u)).x));
                        uint _3477 = (_3436 * 48u) + 8u;
                        vec3 _3488 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3477)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 2u)).x));
                        float _3492 = _3452.x - _2136;
                        float _3493 = _3452.y - _2137;
                        float _3494 = _3452.z - _2138;
                        float _3495 = dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494));
                        float _3498 = inversesqrt(_3495);
                        float _3499 = _3498 * _3492;
                        float _3500 = _3498 * _3493;
                        float _3501 = _3498 * _3494;
                        float _3502 = dot(vec3(_1004, _1007, _1010), vec3(_3499, _3500, _3501));
                        float _3507 = 1.0 - (_3495 * _3452.w);
                        float _4891 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3508 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3509 = sqrt(_3495) * _3471.w;
                        float _3512 = 1.39999997615814208984375 / (_3509 + 1.39999997615814208984375);
                        float _3513 = _3512 * _3512;
                        float _3516 = ((1.0 - _3513) * _3502) + _3513;
                        float _3519 = _3509 * _3509;
                        float _3523 = ((isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0))) * _3508) / ((_3519 * 0.699999988079071044921875) + 1.0);
                        float _3527 = (-0.0) - _2136;
                        float _3528 = (-0.0) - _2137;
                        float _3529 = (-0.0) - _2138;
                        float _3533 = inversesqrt(dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529)));
                        float _3534 = _3533 * _3527;
                        float _3535 = _3533 * _3528;
                        float _3536 = _3533 * _3529;
                        float _3543 = exp2(log2(1.0 / ((_3519 * 3.5) + 5.0)) * 0.25);
                        float _3544 = 1.0 - _1079;
                        float _3551 = sqrt(1.0 - ((1.0 - (_3544 * _3544)) * (1.0 - (_3543 * _3543))));
                        float _3552 = _3551 * _3551;
                        float _3553 = _3552 * _3552;
                        float _3554 = _3534 + _3499;
                        float _3555 = _3535 + _3500;
                        float _3556 = _3536 + _3501;
                        float _3560 = inversesqrt(dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556)));
                        float _3564 = dot(vec3(_1004, _1007, _1010), vec3(_3534, _3535, _3536));
                        float _4907 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3567 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3568 = dot(vec3(_1004, _1007, _1010), vec3(_3560 * _3554, _3560 * _3555, _3560 * _3556));
                        float _4918 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3571 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                        float _3575 = ((_3571 * _3571) * (_3553 + (-1.0))) + 1.0;
                        float _3576 = _3512 * _3552;
                        float _3577 = _3576 * _3576;
                        float _3580 = ((1.0 - _3577) * _3502) + _3577;
                        float _4929 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3581 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3582 = 1.0 - _3552;
                        float _3592 = (0.5 / (((_3581 * ((_3567 * _3582) + _3552)) + 9.9999999392252902907785028219223e-09) + (((_3581 * _3582) + _3552) * _3567))) * _3581;
                        float _4940 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                        float _3603 = (((_3553 * 3.1415927410125732421875) * (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) / ((_3575 * _3575) * ((_3519 * 2.1991131305694580078125) + 3.141590118408203125))) * _3508;
                        _3361 = (_3523 * _3471.x) + _3429;
                        _3362 = (_3523 * _3471.y) + _3430;
                        _3363 = (_3523 * _3471.z) + _3431;
                        _3358 = (_3603 * _3488.x) + _3426;
                        _3359 = (_3603 * _3488.y) + _3427;
                        _3360 = (_3603 * _3488.z) + _3428;
                        if (_3433 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3426 = _3358;
                            _3427 = _3359;
                            _3428 = _3360;
                            _3429 = _3361;
                            _3430 = _3362;
                            _3431 = _3363;
                            _3432 = _3433;
                        }
                    }
                    frontier_phi_66_pred = _3363;
                    frontier_phi_66_pred_1 = _3362;
                    frontier_phi_66_pred_2 = _3361;
                    frontier_phi_66_pred_3 = _3360;
                    frontier_phi_66_pred_4 = _3359;
                    frontier_phi_66_pred_5 = _3358;
                }
                _3168 = frontier_phi_66_pred;
                _3166 = frontier_phi_66_pred_1;
                _3164 = frontier_phi_66_pred_2;
                _3162 = frontier_phi_66_pred_3;
                _3160 = frontier_phi_66_pred_4;
                _3158 = frontier_phi_66_pred_5;
                uint _3309 = _3308 + 1u;
                if (_3309 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3302 = _3158;
                    _3303 = _3160;
                    _3304 = _3162;
                    _3305 = _3164;
                    _3306 = _3166;
                    _3307 = _3168;
                    _3308 = _3309;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3157 = _3158;
            _3159 = _3160;
            _3161 = _3162;
            _3163 = _3164;
            _3165 = _3166;
            _3167 = _3168;
        }
        uvec4 _3171 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3172 = _3171.z;
        uint _3174 = (_3172 >> 8u) & 15u;
        float _3270;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        float _3280;
        if (((4294967295u << _3174) & _3077) == 0u)
        {
            _3270 = _3157;
            _3272 = _3159;
            _3274 = _3161;
            _3276 = _3163;
            _3278 = _3165;
            _3280 = _3167;
        }
        else
        {
            float _3295 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
            float _3296 = _3295 * _2136;
            float _3297 = _3295 * _2137;
            float _3298 = _3295 * _2138;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3174 < ((_3172 >> 12u) & 15u))
            {
                float _3271;
                float _3273;
                float _3275;
                float _3277;
                float _3279;
                float _3281;
                float _3409 = _3157;
                float _3410 = _3159;
                float _3411 = _3161;
                float _3412 = _3163;
                float _3413 = _3165;
                float _3414 = _3167;
                uint _3415 = _3174;
                uint _3424;
                bool _3425;
                for (;;)
                {
                    _3424 = texelFetch(g_lightClassification, int((((_3071 << 5u) + (_3057 << 9u)) + (_3415 << 2u)) >> 2u)).x;
                    _3425 = _3424 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3425)
                    {
                        frontier_phi_72_pred = _3414;
                        frontier_phi_72_pred_1 = _3413;
                        frontier_phi_72_pred_2 = _3412;
                        frontier_phi_72_pred_3 = _3411;
                        frontier_phi_72_pred_4 = _3410;
                        frontier_phi_72_pred_5 = _3409;
                    }
                    else
                    {
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3904;
                        float _3905;
                        float _3906;
                        float _3621 = _3409;
                        float _3622 = _3410;
                        float _3623 = _3411;
                        float _3624 = _3412;
                        float _3625 = _3413;
                        float _3626 = _3414;
                        uint _3627 = _3424;
                        uint _3628;
                        vec4 _3653;
                        float _3654;
                        vec4 _3669;
                        vec3 _3681;
                        vec4 _3696;
                        vec4 _3711;
                        float _3757;
                        bool _3758;
                        for (;;)
                        {
                            uint _3638 = ((_3415 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3627));
                            _3628 = (_3627 + 4294967295u) & _3627;
                            uint _3640 = _3638 * 40u;
                            _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            _3654 = _3653.w;
                            uint _3656 = (_3638 * 40u) + 4u;
                            _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            uint _3671 = (_3638 * 40u) + 8u;
                            _3681 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x));
                            uint _3683 = (_3638 * 40u) + 16u;
                            _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            uint _3698 = (_3638 * 40u) + 20u;
                            _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            uint _3713 = (_3638 * 40u) + 24u;
                            vec4 _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            uint _3732 = (_3638 * 40u) + 28u;
                            vec4 _3745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 3u)).x));
                            _3757 = fma(_2138, _3745.z, fma(_2137, _3745.y, _3745.x * _2136)) + _3745.w;
                            _3758 = !((fma(_2138, _3726.z, fma(_2137, _3726.y, _3726.x * _2136)) + _3726.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3758)
                            {
                                float _3785 = _3653.x - _2136;
                                float _3786 = _3653.y - _2137;
                                float _3787 = _3653.z - _2138;
                                float _3788 = dot(vec3(_3785, _3786, _3787), vec3(_3785, _3786, _3787));
                                float _3791 = inversesqrt(_3788);
                                float _3792 = _3791 * _3785;
                                float _3793 = _3791 * _3786;
                                float _3794 = _3791 * _3787;
                                float _3798 = 1.0 - (_3788 / (_3654 * _3654));
                                float _4951 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3799 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3803 = sqrt(_3788) * _3669.w;
                                float _3805 = 1.39999997615814208984375 / (_3803 + 1.39999997615814208984375);
                                float _3806 = _3805 * _3805;
                                float _3809 = ((1.0 - _3806) * dot(vec3(_3792, _3793, _3794), vec3(_1004, _1007, _1010))) + _3806;
                                float _3812 = _3803 * _3803;
                                float _3816 = (fma(_2138, _3696.z, fma(_2137, _3696.y, _3696.x * _2136)) + _3696.w) / _3757;
                                float _3817 = (fma(_2138, _3711.z, fma(_2137, _3711.y, _3711.x * _2136)) + _3711.w) / _3757;
                                float _3821 = 1.0 - dot(vec2(_3816, _3817), vec2(_3816, _3817));
                                float _4967 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3822 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3823 = _3822 * (((isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0))) * _3799) / ((_3812 * 0.699999988079071044921875) + 1.0));
                                float _3835 = exp2(log2(1.0 / ((_3812 * 3.5) + 5.0)) * 0.25);
                                float _3836 = 1.0 - _1079;
                                float _3843 = sqrt(1.0 - ((1.0 - (_3836 * _3836)) * (1.0 - (_3835 * _3835))));
                                float _3844 = _3843 * _3843;
                                float _3845 = _3844 * _3844;
                                float _3846 = _3792 - _3296;
                                float _3847 = _3793 - _3297;
                                float _3848 = _3794 - _3298;
                                float _3852 = inversesqrt(dot(vec3(_3846, _3847, _3848), vec3(_3846, _3847, _3848)));
                                float _3856 = dot(vec3(_1004, _1007, _1010), vec3((-0.0) - _3296, (-0.0) - _3297, (-0.0) - _3298));
                                float _4978 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3859 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3860 = dot(vec3(_1004, _1007, _1010), vec3(_3852 * _3846, _3852 * _3847, _3852 * _3848));
                                float _4989 = isnan(0.0) ? _3860 : (isnan(_3860) ? 0.0 : max(_3860, 0.0));
                                float _3863 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3867 = ((_3863 * _3863) * (_3845 + (-1.0))) + 1.0;
                                float _3868 = _3805 * _3844;
                                float _3869 = _3868 * _3868;
                                float _3875 = ((1.0 - _3869) * dot(vec3(_1004, _1007, _1010), vec3(_3792, _3793, _3794))) + _3869;
                                float _5000 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3876 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3877 = 1.0 - _3844;
                                float _3887 = (0.5 / (((_3876 * ((_3859 * _3877) + _3844)) + 9.9999999392252902907785028219223e-09) + (((_3876 * _3877) + _3844) * _3859))) * _3876;
                                float _5011 = isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0));
                                float _3897 = (_3822 * _3799) * (((_3845 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3867 * _3867) * ((_3812 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3823 * _3669.y;
                                frontier_phi_78_pred_1 = _3823 * _3669.x;
                                frontier_phi_78_pred_2 = _3897 * _3681.z;
                                frontier_phi_78_pred_3 = _3897 * _3681.y;
                                frontier_phi_78_pred_4 = _3897 * _3681.x;
                                frontier_phi_78_pred_5 = _3823 * _3669.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3905 = frontier_phi_78_pred;
                            _3904 = frontier_phi_78_pred_1;
                            _3903 = frontier_phi_78_pred_2;
                            _3902 = frontier_phi_78_pred_3;
                            _3901 = frontier_phi_78_pred_4;
                            _3906 = frontier_phi_78_pred_5;
                            _3611 = _3904 + _3624;
                            _3612 = _3905 + _3625;
                            _3613 = _3906 + _3626;
                            _3608 = _3901 + _3621;
                            _3609 = _3902 + _3622;
                            _3610 = _3903 + _3623;
                            if (_3628 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3621 = _3608;
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3611;
                                _3625 = _3612;
                                _3626 = _3613;
                                _3627 = _3628;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3613;
                        frontier_phi_72_pred_1 = _3612;
                        frontier_phi_72_pred_2 = _3611;
                        frontier_phi_72_pred_3 = _3610;
                        frontier_phi_72_pred_4 = _3609;
                        frontier_phi_72_pred_5 = _3608;
                    }
                    _3281 = frontier_phi_72_pred;
                    _3279 = frontier_phi_72_pred_1;
                    _3277 = frontier_phi_72_pred_2;
                    _3275 = frontier_phi_72_pred_3;
                    _3273 = frontier_phi_72_pred_4;
                    _3271 = frontier_phi_72_pred_5;
                    uint _3416 = _3415 + 1u;
                    if (_3416 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3409 = _3271;
                        _3410 = _3273;
                        _3411 = _3275;
                        _3412 = _3277;
                        _3413 = _3279;
                        _3414 = _3281;
                        _3415 = _3416;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3281;
                frontier_phi_60_61_ladder_1 = _3279;
                frontier_phi_60_61_ladder_2 = _3275;
                frontier_phi_60_61_ladder_3 = _3273;
                frontier_phi_60_61_ladder_4 = _3271;
                frontier_phi_60_61_ladder_5 = _3277;
            }
            else
            {
                frontier_phi_60_61_ladder = _3167;
                frontier_phi_60_61_ladder_1 = _3165;
                frontier_phi_60_61_ladder_2 = _3161;
                frontier_phi_60_61_ladder_3 = _3159;
                frontier_phi_60_61_ladder_4 = _3157;
                frontier_phi_60_61_ladder_5 = _3163;
            }
            _3270 = frontier_phi_60_61_ladder_4;
            _3272 = frontier_phi_60_61_ladder_3;
            _3274 = frontier_phi_60_61_ladder_2;
            _3276 = frontier_phi_60_61_ladder_5;
            _3278 = frontier_phi_60_61_ladder_1;
            _3280 = frontier_phi_60_61_ladder;
        }
        float _3285 = isnan(1.0) ? _1063 : (isnan(_1063) ? 1.0 : min(_1063, 1.0));
        _3090 = (_3285 * _3276) + _2602;
        _3092 = (_3285 * _3278) + _2604;
        _3094 = (_3285 * _3280) + _2606;
        _3096 = ((_3270 * _1047) * _3285) + _2940;
        _3098 = ((_3272 * _1049) * _3285) + _2942;
        _3100 = ((_3274 * _1050) * _3285) + _2944;
    }
    else
    {
        _3090 = _2602;
        _3092 = _2604;
        _3094 = _2606;
        _3096 = _2940;
        _3098 = _2942;
        _3100 = _2944;
    }
    float _5027 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _5038 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _5049 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    uint _3120 = _256 + 6u;
    float _3128 = _985 / cbSceneParam._m0[86u].x;
    float _3129 = _986 / cbSceneParam._m0[86u].y;
    vec4 _3143 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3128, _3129, (log2((isnan(cbSceneParam._m0[77u].w) ? _920 : (isnan(_920) ? cbSceneParam._m0[77u].w : min(_920, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3145 = _3143.x;
    float _3146 = _3143.y;
    float _3147 = _3143.z;
    float _3148 = _3143.w;
    float _3220;
    float _3222;
    float _3224;
    float _3226;
    if (_920 > cbSceneParam._m0[78u].w)
    {
        float _3182 = isnan(_920) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _920 : min(cbSceneParam._m0[80u].w, _920));
        float _3183 = _3182 / _920;
        float _3194 = _3183 * _970;
        float _3195 = _971 * _3183;
        float _3196 = (-0.0) - _3195;
        float _3198 = _3183 * _972;
        float _3200 = (cbSceneParam._m0[77u].w * _3196) / _3182;
        float _3201 = _3200 + cbSceneParam._m0[79u].w;
        float _3202 = cbSceneParam._m0[79u].w - _3195;
        float _3208 = sqrt(((_3194 * _3194) + (_3195 * _3195)) + (_3198 * _3198));
        float _3211 = (1.0 - (cbSceneParam._m0[77u].w / _3182)) * _3208;
        float _3216 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3218 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3371;
        if (abs((_3196 - _3200) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3371 = ((((_3201 > 0.0) ? exp2(_3216 * _3201) : (2.0 - exp2(_3218 * _3201))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3211;
        }
        else
        {
            float _3331 = 1.0 / cbSceneParam._m0[80u].x;
            float _3332 = isnan(_3202) ? _3201 : (isnan(_3201) ? _3202 : max(_3201, _3202));
            float _3333 = isnan(_3202) ? _3201 : (isnan(_3201) ? _3202 : min(_3201, _3202));
            float _3342 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : min(_3332, 0.0));
            float _3343 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : min(_3333, 0.0));
            _3371 = ((abs(_3208 / _3196) * cbSceneParam._m0[80u].y) * ((((_3342 - _3343) * 2.0) - ((exp2(_3216 * (isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0)))) - exp2(_3216 * (isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0))))) * _3331)) - ((exp2(_3218 * _3342) - exp2(_3218 * _3343)) * _3331))) + (_3211 * cbSceneParam._m0[80u].z);
        }
        vec4 _3373 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3128, _3129, 1.0), 0.0);
        float _3382 = exp2((_3371 * (-1.44269502162933349609375)) * (1.0 - _3373.w));
        float _3383 = log2(_3382);
        float _3399 = log2(_3148);
        _3220 = (exp2(_3399 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3383 * cbSceneParam._m0[78u].x)) * _3373.x) / cbSceneParam._m0[78u].x)) + _3145;
        _3222 = (exp2(_3399 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3383 * cbSceneParam._m0[78u].y)) * _3373.y) / cbSceneParam._m0[78u].y)) + _3146;
        _3224 = (exp2(_3399 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3383 * cbSceneParam._m0[78u].z)) * _3373.z) / cbSceneParam._m0[78u].z)) + _3147;
        _3226 = _3382 * _3148;
    }
    else
    {
        _3220 = _3145;
        _3222 = _3146;
        _3224 = _3147;
        _3226 = _3148;
    }
    float _3238 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3239 = _3238 == 3.0;
    float _3240 = log2(_3226);
    float _3247 = exp2(_3240 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_3090 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1063))) + ((_3096 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1869)) * cbPerFrame._m0[3u].x));
    float _3248 = exp2(_3240 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_3092 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1063))) + ((_3098 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1869)) * cbPerFrame._m0[3u].x));
    float _3249 = exp2(_3240 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_3094 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1063))) + ((_3100 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1869)) * cbPerFrame._m0[3u].x));
    float _3258 = (_3238 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3258 * (_3239 ? _3247 : (_3247 + (cbSceneParam._m0[72u].w * _3220)));
    SV_Target.y = _3258 * (_3239 ? _3248 : (_3248 + (cbSceneParam._m0[72u].w * _3222)));
    SV_Target.z = _3258 * (_3239 ? _3249 : (_3249 + (cbSceneParam._m0[72u].w * _3224)));
    SV_Target.w = cbInstanceData._m0[_3120].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3120].w;
}


