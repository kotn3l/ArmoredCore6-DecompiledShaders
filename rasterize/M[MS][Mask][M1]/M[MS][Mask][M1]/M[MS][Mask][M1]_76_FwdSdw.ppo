#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1459;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _347.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[23u].w) + _397) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4067 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _422 = (_415 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _423 = (_415 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _424 = (_415 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _473 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _487 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _347.y) * 2.0) - ((((_463 - _473) * cbMtdParam._m0[23u].w) + _473) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4078 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _495 = (_488 * ((_441.x * cbMtdParam._m0[13u].x) - _422)) + _422;
    float _496 = (_488 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423;
    float _497 = (_488 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424;
    vec4 _515 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _536 = _532.z;
    float _543 = ((_515.x - _534) * _415) + _534;
    float _544 = ((_515.y - _535) * _415) + _535;
    float _545 = ((_515.z - _536) * _415) + _536;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _570 = ((_557.z - _545) * _488) + _545;
    float _573 = ((((_557.x - _543) * _488) + _543) * 2.0) + (-1.0);
    float _575 = ((((_557.y - _544) * _488) + _544) * 2.0) + (-1.0);
    float _576 = dot(vec2(_573, _575), vec2(_573, _575));
    float _4089 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _581 = sqrt(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _607 = (((_595.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _573;
    float _608 = (((_595.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _575;
    float _611 = fma(_581, _249, fma(_608, _256, _607 * _242));
    float _614 = fma(_581, _250, fma(_608, _257, _607 * _243));
    float _617 = fma(_581, _251, fma(_608, _258, _607 * _244));
    float _621 = inversesqrt(dot(vec3(_611, _614, _617), vec3(_611, _614, _617)));
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _650 = _648.x;
    float _651 = 1.0 - _650;
    float _660 = (cbMtdParam._m0[19u].x + dot(vec4(_621 * _611, _621 * _614, _621 * _617, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_650 - _651) * cbMtdParam._m0[24u].z) + _651) * cbMtdParam._m0[21u].z);
    float _4100 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _661 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _663 = (-0.0) - cbMtdParam._m0[24u].x;
    float _665 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0));
    float _673 = _661 - ((_661 * TEXCOORD_8.x) * _666);
    float _674 = _661 - ((_661 * TEXCOORD_8.y) * _666);
    float _675 = _661 - ((_661 * TEXCOORD_8.z) * _666);
    float _682 = (_673 * (cbMtdParam._m0[17u].x - _495)) + _495;
    float _683 = (_674 * (cbMtdParam._m0[17u].y - _496)) + _496;
    float _684 = (_675 * (cbMtdParam._m0[17u].z - _497)) + _497;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _698 = _696.x;
    float _699 = 1.0 - _698;
    float _725 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_698 - _699) * cbMtdParam._m0[24u].w) + _699) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4121 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _726 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _734 = ((((cbMtdParam._m0[10u].x - _682) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _726) + _682;
    float _735 = ((((cbMtdParam._m0[10u].y - _683) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _726) + _683;
    float _736 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _684)) * _726) + _684;
    vec4 _762 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _764 = _762.x;
    float _782 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _764) * _415) + _764;
    float _799 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _782) * _488) + _782;
    float _803 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _799) * cbMtdParam._m0[19u].z) + _799;
    float _805 = _803 - (_803 * _673);
    float _807 = _805 - (_805 * _726);
    float _811 = (cbMtdParam._m0[19u].w * (_595.z - _570)) + _570;
    vec4 _825 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _832 = (_825.x * 2.0) + (-1.0);
    float _833 = (_825.y * 2.0) + (-1.0);
    float _834 = dot(vec2(_832, _833), vec2(_832, _833));
    float _4132 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _842 = ((_825.z - _811) * _673) + _811;
    float _845 = ((cbMtdParam._m0[23u].x - _842) * _726) + _842;
    vec4 _864 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _870 = (_864.x * 2.0) + (-1.0);
    float _871 = (_864.y * 2.0) + (-1.0);
    float _872 = dot(vec2(_870, _871), vec2(_870, _871));
    float _4143 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _887 = ((sqrt(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) - _581) * _675) + _581;
    float _890 = (((_832 - _607) * _673) + _607) + (cbMtdParam._m0[21u].x * _607);
    float _891 = (((_833 - _608) * _674) + _608) + (cbMtdParam._m0[21u].x * _608);
    float _902 = (((_870 - _890) + (_890 * cbMtdParam._m0[22u].z)) * _726) + _890;
    float _903 = (((_871 - _891) + (_891 * cbMtdParam._m0[22u].z)) * _726) + _891;
    float _904 = (_726 * (sqrt(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) - _887)) + _887;
    float _906 = cbMtdParam._m0[22u].x + _595.w;
    float _909 = fma(_904, _249, fma(_903, _256, _902 * _242));
    float _912 = fma(_904, _250, fma(_903, _257, _902 * _243));
    float _915 = fma(_904, _251, fma(_903, _258, _902 * _244));
    float _919 = inversesqrt(dot(vec3(_909, _912, _915), vec3(_909, _912, _915)));
    float _920 = _919 * _909;
    float _921 = _919 * _912;
    float _922 = _919 * _915;
    float _4154 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _923 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _4165 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4176 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4187 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4198 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4209 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _928 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _942 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _992 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _982);
    float _993 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _982);
    float _994 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _982);
    float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
    float _999 = _992 * _998;
    float _1000 = _993 * _998;
    float _1001 = _994 * _998;
    float _1007 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1008 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1026 = fma(_922, cbSceneParam._m0[5u].z, fma(_921, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _920));
    float _1029 = fma(_922, cbSceneParam._m0[6u].z, fma(_921, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _920));
    float _1032 = fma(_922, cbSceneParam._m0[7u].z, fma(_921, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _920));
    uint _1046 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1052 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * cbInstanceData._m0[_1046].x;
    float _1053 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * cbInstanceData._m0[_1046].y;
    float _1054 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * cbInstanceData._m0[_1046].z;
    float _4220 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _4242 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1057 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _1058 = 1.0 - _928;
    float _1059 = _1055 * _1058;
    float _1060 = _1056 * _1058;
    float _1061 = _1057 * _1058;
    float _1066 = (_1055 + (-0.039999999105930328369140625)) * _928;
    float _1067 = (_1056 + (-0.039999999105930328369140625)) * _928;
    float _1068 = (_1057 + (-0.039999999105930328369140625)) * _928;
    float _1069 = _1066 + 0.039999999105930328369140625;
    float _1071 = _1067 + 0.039999999105930328369140625;
    float _1072 = _1068 + 0.039999999105930328369140625;
    vec4 _1081 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1007, cbSceneParam._m0[86u].y * _1008));
    float _1085 = ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * TEXCOORD_5.w) * _1081.x;
    float _1086 = dot(vec3(_920, _921, _922), vec3(_999, _1000, _1001));
    float _1089 = _1086 * 2.0;
    float _1093 = (_1089 * _920) - _999;
    float _1094 = (_1089 * _921) - _1000;
    float _1095 = (_1089 * _922) - _1001;
    float _1099 = abs(dot(vec3(_999, _1000, _1001), vec3(_920, _921, _922)));
    float _4253 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1101 = sqrt(_923);
    float _1114 = exp2((_1101 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1101 * 3.0));
    float _1120 = (1.0 - _1114) * ((_1101 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1121 = _1114 * _1101;
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1153 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1157 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1458;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1183 = fma(_1157, cbModelParam._m0[26u].z, fma(_1153, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1149));
        float _1187 = fma(_1157, cbModelParam._m0[27u].z, fma(_1153, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1149));
        float _1191 = fma(_1157, cbModelParam._m0[28u].z, fma(_1153, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1149));
        float _1216 = _1149 + _920;
        float _1217 = _1153 + _921;
        float _1218 = _1157 + _922;
        float _1228 = fma(_1218, cbModelParam._m0[26u].z, fma(_1217, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1216)) - _1183;
        float _1229 = fma(_1218, cbModelParam._m0[27u].z, fma(_1217, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1216)) - _1187;
        float _1230 = fma(_1218, cbModelParam._m0[28u].z, fma(_1217, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1216)) - _1191;
        float _1234 = inversesqrt(dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230)));
        float _1247 = ((_1234 * _1228) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1183 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1234 * _1229) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1187 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1234 * _1230) / cbModelParam._m0[34u].z) + ((((((_1191 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        float _1286 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1252.x + (-0.5));
        float _1288 = _1286 * (_1252.y + (-0.5));
        float _1289 = _1286 * (_1252.z + (-0.5));
        float _1296 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1259.x + (-0.5));
        float _1298 = _1296 * (_1259.y + (-0.5));
        float _1299 = _1296 * (_1259.z + (-0.5));
        float _1306 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1266.x + (-0.5));
        float _1308 = _1306 * (_1266.y + (-0.5));
        float _1309 = _1306 * (_1266.z + (-0.5));
        float _1316 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1273.x + (-0.5));
        float _1318 = _1316 * (_1273.y + (-0.5));
        float _1319 = _1316 * (_1273.z + (-0.5));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = _1287 * 0.5;
        float _1324 = _1297 * 0.5;
        float _1325 = _1307 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1340 = (dot(vec3(_920, _921, _922), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1350 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4301 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1352 + 1.0))) + _1357) * _1320;
        float _1367 = _1288 * 0.5;
        float _1368 = _1298 * 0.5;
        float _1369 = _1308 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_920, _921, _922), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4334 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1394 + 1.0))) + _1399) * _1321;
        float _1409 = _1289 * 0.5;
        float _1410 = _1299 * 0.5;
        float _1411 = _1309 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_920, _921, _922), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4367 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1436 + 1.0))) + _1441) * _1322;
        _1458 = _1289;
        _1460 = _1288;
        _1461 = _1287;
        _1462 = _1299;
        _1463 = _1298;
        _1464 = _1297;
        _1465 = _1309;
        _1466 = _1308;
        _1467 = _1307;
        _1468 = _1322;
        _1469 = _1321;
        _1470 = _1320;
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
    }
    else
    {
        _1458 = _1459;
        _1460 = _1459;
        _1461 = _1459;
        _1462 = _1459;
        _1463 = _1459;
        _1464 = _1459;
        _1465 = _1459;
        _1466 = _1459;
        _1467 = _1459;
        _1468 = _1459;
        _1469 = _1459;
        _1470 = _1459;
        _1471 = 0.0;
        _1472 = 0.0;
        _1473 = 0.0;
    }
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1497 = fma(_1157, cbModelParam._m0[30u].z, fma(_1153, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1149));
        float _1501 = fma(_1157, cbModelParam._m0[31u].z, fma(_1153, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1149));
        float _1505 = fma(_1157, cbModelParam._m0[32u].z, fma(_1153, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1149));
        float _1528 = _1149 + _920;
        float _1529 = _1153 + _921;
        float _1530 = _1157 + _922;
        float _1540 = fma(_1530, cbModelParam._m0[30u].z, fma(_1529, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1528)) - _1497;
        float _1541 = fma(_1530, cbModelParam._m0[31u].z, fma(_1529, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1528)) - _1501;
        float _1542 = fma(_1530, cbModelParam._m0[32u].z, fma(_1529, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1528)) - _1505;
        float _1546 = inversesqrt(dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542)));
        float _1559 = ((_1546 * _1540) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1497 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1560 = ((_1546 * _1541) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1501 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1561 = ((_1546 * _1542) / cbModelParam._m0[35u].z) + ((((((_1505 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        float _1596 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1563.x + (-0.5));
        float _1598 = _1596 * (_1563.y + (-0.5));
        float _1599 = _1596 * (_1563.z + (-0.5));
        float _1606 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1570.x + (-0.5));
        float _1608 = _1606 * (_1570.y + (-0.5));
        float _1609 = _1606 * (_1570.z + (-0.5));
        float _1616 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1577.x + (-0.5));
        float _1618 = _1616 * (_1577.y + (-0.5));
        float _1619 = _1616 * (_1577.z + (-0.5));
        float _1626 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1584.x + (-0.5));
        float _1628 = _1626 * (_1584.y + (-0.5));
        float _1629 = _1626 * (_1584.z + (-0.5));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = _1597 * 0.5;
        float _1634 = _1607 * 0.5;
        float _1635 = _1617 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_920, _921, _922), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4408 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4419 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4430 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_1660 + 1.0))) + _1665) * _1630;
        float _1675 = _1598 * 0.5;
        float _1676 = _1608 * 0.5;
        float _1677 = _1618 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_920, _921, _922), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4441 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4452 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4463 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_1702 + 1.0))) + _1707) * _1631;
        float _1717 = _1599 * 0.5;
        float _1718 = _1609 * 0.5;
        float _1719 = _1619 * 0.5;
        float _1720 = dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719));
        float _1725 = (_1720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1720);
        float _1733 = (dot(vec3(_920, _921, _922), vec3(_1725 * _1717, _1725 * _1718, _1725 * _1719)) + 1.0) * 0.5;
        float _4474 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1742 = sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4485 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1744 = _1743 * 2.0;
        float _1748 = (1.0 - _1743) / (_1743 + 1.0);
        float _4496 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1758 = ((((1.0 - _1749) * (_1744 + 2.0)) * exp2(log2(isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_1744 + 1.0))) + _1749) * _1632;
        _1766 = _1599;
        _1767 = _1598;
        _1768 = _1597;
        _1769 = _1609;
        _1770 = _1608;
        _1771 = _1607;
        _1772 = _1619;
        _1773 = _1618;
        _1774 = _1617;
        _1775 = _1632;
        _1776 = _1631;
        _1777 = _1630;
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)));
    }
    else
    {
        _1766 = _1459;
        _1767 = _1459;
        _1768 = _1459;
        _1769 = _1459;
        _1770 = _1459;
        _1771 = _1459;
        _1772 = _1459;
        _1773 = _1459;
        _1774 = _1459;
        _1775 = _1459;
        _1776 = _1459;
        _1777 = _1459;
        _1778 = 0.0;
        _1779 = 0.0;
        _1780 = 0.0;
    }
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1471)) + _1471;
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1472)) + _1472;
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1473)) + _1473;
    float _1813 = fma(_1792, cbSceneParam._m0[89u].z, fma(_1791, cbSceneParam._m0[89u].y, _1790 * cbSceneParam._m0[89u].x));
    float _1816 = fma(_1792, cbSceneParam._m0[90u].z, fma(_1791, cbSceneParam._m0[90u].y, _1790 * cbSceneParam._m0[90u].x));
    float _1819 = fma(_1792, cbSceneParam._m0[91u].z, fma(_1791, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1790));
    float _1834 = _1093 * 0.5;
    float _1835 = _1094 * 0.5;
    float _1836 = _1095 * 0.5;
    float _1837 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1840 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1843 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1877;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1850 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1458, _1462, _1465, _1468));
        float _1854 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1460, _1463, _1466, _1469));
        float _1858 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1461, _1464, _1467, _1470));
        float _1865 = dot(vec4(cbModelParam._m0[39u]), vec4(_1834, _1835, _1836, 1.0));
        _1877 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1865) ? 0.0 : (isnan(0.0) ? _1865 : max(0.0, _1865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1877 = 1.0;
    }
    float _1888;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1879 = dot(vec4(cbModelParam._m0[40u]), vec4(_1834, _1835, _1836, 1.0));
        _1888 = dot(vec3(isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1879) ? 0.0 : (isnan(0.0) ? _1879 : max(0.0, _1879))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1888 = 1.0;
    }
    float _1892 = (_1888 * cbModelParam._m0[1u].x) + (_1877 * (1.0 - cbModelParam._m0[1u].x));
    float _1902 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _923);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1902 : min(cbModelParam._m0[25u].z, _1902));
    float _1984;
    float _1986;
    float _1988;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1951 = fma(_1157, cbModelParam._m0[13u].z, fma(_1153, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1149)) + cbModelParam._m0[13u].w;
        float _1955 = fma(_1157, cbModelParam._m0[14u].z, fma(_1153, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1149)) + cbModelParam._m0[14u].w;
        float _1959 = fma(_1157, cbModelParam._m0[15u].z, fma(_1153, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1149)) + cbModelParam._m0[15u].w;
        float _1962 = fma(_1095, cbModelParam._m0[13u].z, fma(_1094, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1093));
        float _1965 = fma(_1095, cbModelParam._m0[14u].z, fma(_1094, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1093));
        float _1968 = fma(_1095, cbModelParam._m0[15u].z, fma(_1094, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1093));
        float _1996;
        if (_1962 > 0.0)
        {
            _1996 = abs((1.0 - _1951) / _1962);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1951 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1996 = frontier_phi_14_12_ladder;
        }
        float _2168;
        if (_1965 > 0.0)
        {
            _2168 = abs((1.0 - _1955) / _1965);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1955 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2168 = frontier_phi_23_19_ladder;
        }
        float _2463;
        if (_1968 > 0.0)
        {
            _2463 = abs((1.0 - _1959) / _1968);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1959 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2463 = frontier_phi_35_30_ladder;
        }
        float _2465 = isnan(_2168) ? _1996 : (isnan(_1996) ? _2168 : min(_1996, _2168));
        float _2466 = isnan(_2463) ? _2465 : (isnan(_2465) ? _2463 : min(_2465, _2463));
        float _2470 = (_2466 * _1962) + _1951;
        float _2471 = (_2466 * _1965) + _1955;
        float _2472 = (_2466 * _1968) + _1959;
        float _2473 = _2466 * 9.9999997473787516355514526367188e-05;
        float _2475 = (-1.0) - _2473;
        float _2477 = _2473 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2472 > _2477) || ((_2472 < _2475) || ((_2471 > _2477) || ((_2471 < _2475) || ((_2470 < _2475) || (_2470 > _2477))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2472, cbModelParam._m0[9u].z, fma(_2471, cbModelParam._m0[9u].y, _2470 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2472, cbModelParam._m0[10u].z, fma(_2471, cbModelParam._m0[10u].y, _2470 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2472, cbModelParam._m0[11u].z, fma(_2471, cbModelParam._m0[11u].y, _2470 * cbModelParam._m0[11u].x))), _1903);
            frontier_phi_13_35_ladder = _2617.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2617.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2617.x * cbModelParam._m0[1u].y;
        }
        _1984 = frontier_phi_13_35_ladder_2;
        _1986 = frontier_phi_13_35_ladder_1;
        _1988 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1972 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1093, _1094, _1095), _1903);
        _1984 = _1972.x * cbModelParam._m0[1u].y;
        _1986 = _1972.y * cbModelParam._m0[1u].y;
        _1988 = _1972.z * cbModelParam._m0[1u].y;
    }
    float _1992 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _923);
    float _1993 = isnan(_1992) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1992 : min(cbModelParam._m0[25u].w, _1992));
    float _2083;
    float _2085;
    float _2087;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2047 = fma(_1157, cbModelParam._m0[21u].z, fma(_1153, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1149)) + cbModelParam._m0[21u].w;
        float _2051 = fma(_1157, cbModelParam._m0[22u].z, fma(_1153, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1149)) + cbModelParam._m0[22u].w;
        float _2055 = fma(_1157, cbModelParam._m0[23u].z, fma(_1153, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1149)) + cbModelParam._m0[23u].w;
        float _2058 = fma(_1095, cbModelParam._m0[21u].z, fma(_1094, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1093));
        float _2061 = fma(_1095, cbModelParam._m0[22u].z, fma(_1094, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1093));
        float _2064 = fma(_1095, cbModelParam._m0[23u].z, fma(_1094, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1093));
        float _2173;
        if (_2058 > 0.0)
        {
            _2173 = abs((1.0 - _2047) / _2058);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2047 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2173 = frontier_phi_25_21_ladder;
        }
        float _2490;
        if (_2061 > 0.0)
        {
            _2490 = abs((1.0 - _2051) / _2061);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2051 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2490 = frontier_phi_37_32_ladder;
        }
        float _2828;
        if (_2064 > 0.0)
        {
            _2828 = abs((1.0 - _2055) / _2064);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2055 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2828 = frontier_phi_47_44_ladder;
        }
        float _2830 = isnan(_2490) ? _2173 : (isnan(_2173) ? _2490 : min(_2173, _2490));
        float _2831 = isnan(_2828) ? _2830 : (isnan(_2830) ? _2828 : min(_2830, _2828));
        float _2835 = (_2831 * _2058) + _2047;
        float _2836 = (_2831 * _2061) + _2051;
        float _2837 = (_2831 * _2064) + _2055;
        float _2838 = _2831 * 9.9999997473787516355514526367188e-05;
        float _2839 = (-1.0) - _2838;
        float _2841 = _2838 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2837 > _2841) || ((_2837 < _2839) || ((_2836 > _2841) || ((_2836 < _2839) || ((_2835 < _2839) || (_2835 > _2841))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2959 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2837, cbModelParam._m0[17u].z, fma(_2836, cbModelParam._m0[17u].y, _2835 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2837, cbModelParam._m0[18u].z, fma(_2836, cbModelParam._m0[18u].y, _2835 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2837, cbModelParam._m0[19u].z, fma(_2836, cbModelParam._m0[19u].y, _2835 * cbModelParam._m0[19u].x))), _1993);
            frontier_phi_22_47_ladder = _2959.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2959.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2959.x * cbModelParam._m0[1u].z;
        }
        _2083 = frontier_phi_22_47_ladder_2;
        _2085 = frontier_phi_22_47_ladder_1;
        _2087 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2067 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1093, _1094, _1095), _1993);
        _2083 = _2067.x * cbModelParam._m0[1u].z;
        _2085 = _2067.y * cbModelParam._m0[1u].z;
        _2087 = _2067.z * cbModelParam._m0[1u].z;
    }
    float _2100 = (((_1120 * _1069) + _1121) * _1085) * ((cbModelParam._m0[1u].w * (_2083 - _1984)) + _1984);
    float _2102 = (((_1120 * _1071) + _1121) * _1085) * ((cbModelParam._m0[1u].w * (_2085 - _1986)) + _1986);
    float _2104 = (((_1120 * _1072) + _1121) * _1085) * ((cbModelParam._m0[1u].w * (_2087 - _1988)) + _1988);
    float _2107 = fma(_2104, cbSceneParam._m0[89u].z, fma(_2102, cbSceneParam._m0[89u].y, _2100 * cbSceneParam._m0[89u].x));
    float _2110 = fma(_2104, cbSceneParam._m0[90u].z, fma(_2102, cbSceneParam._m0[90u].y, _2100 * cbSceneParam._m0[90u].x));
    float _2113 = fma(_2104, cbSceneParam._m0[91u].z, fma(_2102, cbSceneParam._m0[91u].y, _2100 * cbSceneParam._m0[91u].x));
    float _2147 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2151 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2155 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2159 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2160 = _2147 / _2159;
    float _2161 = _2151 / _2159;
    float _2162 = _2155 / _2159;
    float _2309;
    float _2310;
    float _2311;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2189 = ((uint(_2162 > cbSceneParam._m0[59u].y) + uint(_2162 > cbSceneParam._m0[59u].x)) + uint(_2162 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2190 = _2189 + 43u;
        uint _2198 = _2189 + 44u;
        uint _2206 = _2189 + 45u;
        uint _2214 = _2189 + 46u;
        float _2225 = fma(_2159, cbSceneParam._m0[_2190].w, fma(_2155, cbSceneParam._m0[_2190].z, fma(_2151, cbSceneParam._m0[_2190].y, _2147 * cbSceneParam._m0[_2190].x)));
        float _2229 = fma(_2159, cbSceneParam._m0[_2198].w, fma(_2155, cbSceneParam._m0[_2198].z, fma(_2151, cbSceneParam._m0[_2198].y, _2147 * cbSceneParam._m0[_2198].x)));
        float _2237 = fma(_2159, cbSceneParam._m0[_2214].w, fma(_2155, cbSceneParam._m0[_2214].z, fma(_2151, cbSceneParam._m0[_2214].y, _2147 * cbSceneParam._m0[_2214].x)));
        float _2242 = cbSceneParam._m0[33u].z * _2237;
        float _2244 = cbSceneParam._m0[33u].w * _2237;
        float _2247 = fma(_2159, cbSceneParam._m0[_2206].w, fma(_2155, cbSceneParam._m0[_2206].z, fma(_2151, cbSceneParam._m0[_2206].y, _2147 * cbSceneParam._m0[_2206].x))) / _2237;
        float _2295 = (cbSceneParam._m0[33u].x - sqrt(((_2161 * _2161) + (_2160 * _2160)) + (_2162 * _2162))) * cbSceneParam._m0[33u].y;
        float _4622 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2302 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2242 + _2225) / _2237, (_2244 + _2229) / _2237), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2244 + _2225) / _2237, (_2229 - _2242) / _2237), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2225 - _2242) / _2237, (_2229 - _2244) / _2237), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2225 - _2244) / _2237, (_2242 + _2229) / _2237), _2247), 0.0)).x), vec4(0.25)));
        _2309 = 1.0 - (_2302 * cbSceneParam._m0[34u].x);
        _2310 = 1.0 - (_2302 * cbSceneParam._m0[34u].y);
        _2311 = 1.0 - (_2302 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2309 = 1.0;
        _2310 = 1.0;
        _2311 = 1.0;
    }
    float _2375;
    float _2377;
    float _2379;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2363 = fma(_2159, cbSceneParam._m0[63u].w, fma(_2155, cbSceneParam._m0[63u].z, fma(_2151, cbSceneParam._m0[63u].y, _2147 * cbSceneParam._m0[63u].x)));
        float _2364 = fma(_2159, cbSceneParam._m0[60u].w, fma(_2155, cbSceneParam._m0[60u].z, fma(_2151, cbSceneParam._m0[60u].y, _2147 * cbSceneParam._m0[60u].x))) / _2363;
        float _2365 = fma(_2159, cbSceneParam._m0[61u].w, fma(_2155, cbSceneParam._m0[61u].z, fma(_2151, cbSceneParam._m0[61u].y, _2147 * cbSceneParam._m0[61u].x))) / _2363;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2364 >= cbSceneParam._m0[64u].x) && (_2365 >= cbSceneParam._m0[64u].y)) && (_2364 <= cbSceneParam._m0[64u].z)) && (_2365 <= cbSceneParam._m0[64u].w))
        {
            float _2503 = fma(_2159, cbSceneParam._m0[62u].w, fma(_2155, cbSceneParam._m0[62u].z, fma(_2151, cbSceneParam._m0[62u].y, _2147 * cbSceneParam._m0[62u].x))) / _2363;
            float _2507 = isnan(cbSceneParam._m0[41u].w) ? _2503 : (isnan(_2503) ? cbSceneParam._m0[41u].w : max(_2503, cbSceneParam._m0[41u].w));
            float _2550 = (cbSceneParam._m0[33u].x - sqrt(((_2161 * _2161) + (_2160 * _2160)) + (_2162 * _2162))) * cbSceneParam._m0[33u].y;
            float _4638 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
            float _2557 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2364, cbSceneParam._m0[33u].w + _2365), _2507), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2364, _2365 - cbSceneParam._m0[33u].z), _2507), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2364 - cbSceneParam._m0[33u].z, _2365 - cbSceneParam._m0[33u].w), _2507), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2364 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2365), _2507), 0.0)).x), vec4(0.25)));
            float _2561 = 1.0 - (_2557 * cbSceneParam._m0[34u].x);
            float _2562 = 1.0 - (_2557 * cbSceneParam._m0[34u].y);
            float _2563 = 1.0 - (_2557 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2563) ? _2311 : (isnan(_2311) ? _2563 : min(_2311, _2563));
            frontier_phi_34_33_ladder_1 = isnan(_2562) ? _2310 : (isnan(_2310) ? _2562 : min(_2310, _2562));
            frontier_phi_34_33_ladder_2 = isnan(_2561) ? _2309 : (isnan(_2309) ? _2561 : min(_2309, _2561));
        }
        else
        {
            frontier_phi_34_33_ladder = _2311;
            frontier_phi_34_33_ladder_1 = _2310;
            frontier_phi_34_33_ladder_2 = _2309;
        }
        _2375 = frontier_phi_34_33_ladder_2;
        _2377 = frontier_phi_34_33_ladder_1;
        _2379 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2375 = _2309;
        _2377 = _2310;
        _2379 = _2311;
    }
    uvec4 _2384 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2386 = _2384.x * 14u;
    uint _2387 = _2386 + 13u;
    float _2394 = _1085 + (-1.0);
    float _2399 = (cbLight._m0[_2387].x * _2394) + 1.0;
    float _2400 = (cbLight._m0[_2387].y * _2394) + 1.0;
    float _2401 = (cbLight._m0[_2387].z * _2394) + 1.0;
    float _2402 = (cbLight._m0[_2387].w * _2394) + 1.0;
    uint _2403 = _2386 + 5u;
    float _2409 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
    uint _2413 = _2386 + 4u;
    float _2422 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
    uint _2426 = _2386 | 1u;
    float _2437 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_920, _921, _922));
    float _2440 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_920, _921, _922));
    float _4674 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _4685 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2445 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * 0.3183098733425140380859375;
    float _2447 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * 0.3183098733425140380859375;
    float _2454 = ((cbLight._m0[_2403].x * _2409) * _2447) + (((cbLight._m0[_2413].x * _2375) * _2422) * _2445);
    float _2455 = ((_2409 * cbLight._m0[_2403].y) * _2447) + (((cbLight._m0[_2413].y * _2377) * _2422) * _2445);
    float _2456 = ((_2409 * cbLight._m0[_2403].z) * _2447) + (((cbLight._m0[_2413].z * _2379) * _2422) * _2445);
    uvec4 _2460 = floatBitsToUint(cbLight._m0[_2386 + 12u]);
    bool _2462 = _2460.x == 0u;
    float _2564;
    float _2566;
    float _2568;
    if (_2462)
    {
        _2564 = _2454;
        _2566 = _2455;
        _2568 = _2456;
    }
    else
    {
        uint _2572 = _2386 + 6u;
        float _2588 = (dot(vec3(cbLight._m0[_2386 + 2u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2589 = _2588 * _2588;
        float _4696 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2590 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2591 = isnan(1.0) ? _2401 : (isnan(_2401) ? 1.0 : min(_2401, 1.0));
        _2564 = (((cbLight._m0[_2572].x * 0.3183098733425140380859375) * _2590) * _2591) + _2454;
        _2566 = (((cbLight._m0[_2572].y * 0.3183098733425140380859375) * _2590) * _2591) + _2455;
        _2568 = (((cbLight._m0[_2572].z * 0.3183098733425140380859375) * _2590) * _2591) + _2456;
    }
    bool _2571 = _2460.y == 0u;
    float _2626;
    float _2628;
    float _2630;
    if (_2571)
    {
        _2626 = _2564;
        _2628 = _2566;
        _2630 = _2568;
    }
    else
    {
        uint _2799 = _2386 + 7u;
        float _2815 = (dot(vec3(cbLight._m0[_2386 + 3u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2816 = _2815 * _2815;
        float _4712 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2817 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2818 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
        _2626 = (((cbLight._m0[_2799].x * 0.3183098733425140380859375) * _2817) * _2818) + _2564;
        _2628 = (((cbLight._m0[_2799].y * 0.3183098733425140380859375) * _2817) * _2818) + _2566;
        _2630 = (((cbLight._m0[_2799].z * 0.3183098733425140380859375) * _2817) * _2818) + _2568;
    }
    uint _2633 = _2386 + 8u;
    float _2646 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2386].w)) * _923) * 0.949999988079071044921875);
    float _2647 = _2646 * _2646;
    float _2648 = cbLight._m0[_2386].x + _999;
    float _2649 = cbLight._m0[_2386].y + _1000;
    float _2650 = cbLight._m0[_2386].z + _1001;
    float _2654 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
    float _2655 = _2654 * _2648;
    float _2656 = _2654 * _2649;
    float _2657 = _2654 * _2650;
    float _2658 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2386].xyz));
    float _4728 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2661 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _4739 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _2662 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2663 = dot(vec3(_920, _921, _922), vec3(_2655, _2656, _2657));
    float _4750 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2666 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2667 = dot(vec3(cbLight._m0[_2386].xyz), vec3(_2655, _2656, _2657));
    float _4761 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2671 = _2647 * _2647;
    float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
    float _2683 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
    float _2684 = 0.959999978542327880859375 - _1066;
    float _2686 = 0.959999978542327880859375 - _1067;
    float _2687 = 0.959999978542327880859375 - _1068;
    float _2694 = 1.0 - _2647;
    float _2705 = (0.5 / (((_2662 * ((_2661 * _2694) + _2647)) + 9.9999999392252902907785028219223e-09) + (((_2662 * _2694) + _2647) * _2661))) * _2661;
    float _4772 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2707 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
    uint _2721 = _2386 + 9u;
    float _2732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _923) * 0.949999988079071044921875);
    float _2733 = _2732 * _2732;
    float _2734 = cbLight._m0[_2426].x + _999;
    float _2735 = cbLight._m0[_2426].y + _1000;
    float _2736 = cbLight._m0[_2426].z + _1001;
    float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
    float _2741 = _2740 * _2734;
    float _2742 = _2740 * _2735;
    float _2743 = _2740 * _2736;
    float _2744 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2426].xyz));
    float _4783 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2747 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
    float _2748 = dot(vec3(_920, _921, _922), vec3(_2741, _2742, _2743));
    float _4794 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2751 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
    float _2752 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2741, _2742, _2743));
    float _4805 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
    float _2756 = _2733 * _2733;
    float _2760 = ((_2751 * _2751) * (_2756 + (-1.0))) + 1.0;
    float _2767 = exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0);
    float _2774 = 1.0 - _2733;
    float _2784 = (0.5 / (((_2662 * ((_2747 * _2774) + _2733)) + 9.9999999392252902907785028219223e-09) + (((_2662 * _2774) + _2733) * _2747))) * _2747;
    float _4816 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
    float _2786 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2756 / ((_2760 * _2760) * 3.141590118408203125));
    float _2796 = (((((_2767 * _2684) + _1069) * cbLight._m0[_2721].x) * _2786) * _2409) + ((((cbLight._m0[_2633].x * _2375) * ((_2683 * _2684) + _1069)) * _2707) * _2422);
    float _2797 = (((((_2767 * _2686) + _1071) * cbLight._m0[_2721].y) * _2786) * _2409) + ((((cbLight._m0[_2633].y * _2377) * ((_2683 * _2686) + _1071)) * _2707) * _2422);
    float _2798 = (((((_2767 * _2687) + _1072) * cbLight._m0[_2721].z) * _2786) * _2409) + ((((cbLight._m0[_2633].z * _2379) * ((_2683 * _2687) + _1072)) * _2707) * _2422);
    float _2854;
    float _2856;
    float _2858;
    if (_2462)
    {
        _2854 = _2796;
        _2856 = _2797;
        _2858 = _2798;
    }
    else
    {
        uint _2860 = _2386 + 2u;
        uint _2864 = _2386 + 10u;
        float _2878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2860].w)) * _923) * 0.949999988079071044921875);
        float _2879 = _2878 * _2878;
        float _2880 = cbLight._m0[_2860].x + _999;
        float _2881 = cbLight._m0[_2860].y + _1000;
        float _2882 = cbLight._m0[_2860].z + _1001;
        float _2886 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
        float _2887 = _2886 * _2880;
        float _2888 = _2886 * _2881;
        float _2889 = _2886 * _2882;
        float _2890 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2860].xyz));
        float _4827 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2893 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2894 = dot(vec3(_920, _921, _922), vec3(_2887, _2888, _2889));
        float _4838 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2897 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2898 = dot(vec3(cbLight._m0[_2860].xyz), vec3(_2887, _2888, _2889));
        float _4849 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2902 = _2879 * _2879;
        float _2906 = ((_2897 * _2897) * (_2902 + (-1.0))) + 1.0;
        float _2913 = exp2(log2(1.0 - (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) * 5.0);
        float _2920 = 1.0 - _2879;
        float _2930 = (0.5 / (((_2662 * ((_2893 * _2920) + _2879)) + 9.9999999392252902907785028219223e-09) + (((_2662 * _2920) + _2879) * _2893))) * _2893;
        float _4860 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2932 = (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2902 / ((_2906 * _2906) * 3.141590118408203125));
        float _2933 = isnan(1.0) ? _2401 : (isnan(_2401) ? 1.0 : min(_2401, 1.0));
        _2854 = (((((_2913 * _2684) + _1069) * cbLight._m0[_2864].x) * _2932) * _2933) + _2796;
        _2856 = (((((_2913 * _2686) + _1071) * cbLight._m0[_2864].y) * _2932) * _2933) + _2797;
        _2858 = (((((_2913 * _2687) + _1072) * cbLight._m0[_2864].z) * _2932) * _2933) + _2798;
    }
    float _2964;
    float _2966;
    float _2968;
    if (_2571)
    {
        _2964 = _2854;
        _2966 = _2856;
        _2968 = _2858;
    }
    else
    {
        uint _2975 = _2386 + 3u;
        uint _2979 = _2386 + 11u;
        float _2993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2975].w)) * _923) * 0.949999988079071044921875);
        float _2994 = _2993 * _2993;
        float _2995 = cbLight._m0[_2975].x + _999;
        float _2996 = cbLight._m0[_2975].y + _1000;
        float _2997 = cbLight._m0[_2975].z + _1001;
        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
        float _3002 = _3001 * _2995;
        float _3003 = _3001 * _2996;
        float _3004 = _3001 * _2997;
        float _3005 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2975].xyz));
        float _4876 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
        float _3008 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _3009 = dot(vec3(_920, _921, _922), vec3(_3002, _3003, _3004));
        float _4887 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
        float _3012 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
        float _3013 = dot(vec3(cbLight._m0[_2975].xyz), vec3(_3002, _3003, _3004));
        float _4898 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        float _3017 = _2994 * _2994;
        float _3021 = ((_3012 * _3012) * (_3017 + (-1.0))) + 1.0;
        float _3028 = exp2(log2(1.0 - (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) * 5.0);
        float _3035 = 1.0 - _2994;
        float _3045 = (0.5 / (((_2662 * ((_3008 * _3035) + _2994)) + 9.9999999392252902907785028219223e-09) + (((_2662 * _3035) + _2994) * _3008))) * _3008;
        float _4909 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
        float _3047 = (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_3017 / ((_3021 * _3021) * 3.141590118408203125));
        float _3048 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
        _2964 = (((((_3028 * _2684) + _1069) * cbLight._m0[_2979].x) * _3047) * _3048) + _2854;
        _2966 = (((((_3028 * _2686) + _1071) * cbLight._m0[_2979].y) * _3047) * _3048) + _2856;
        _2968 = (((((_3028 * _2687) + _1072) * cbLight._m0[_2979].z) * _3047) * _3048) + _2858;
    }
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    float _3122;
    float _3124;
    if (_2384.y == 0u)
    {
        uvec4 _3069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3070 = _3069.x;
        uint _3081 = uint((float(_3069.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1008) / _3070))) + floor(float(uint(cbSceneParam._m0[85u].x * _1007) / _3070)));
        float _3091 = (log2(_2162 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3092 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
        uint _3095 = uint(isnan(14.0) ? _3092 : (isnan(_3092) ? 14.0 : min(_3092, 14.0)));
        uvec4 _3100 = texelFetch(g_lightClusterGridBuffer, int(((_3095 << 2u) + (_3081 << 6u)) >> 2u));
        uint _3101 = _3100.x;
        uint _3102 = _3069.z;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        if (((((1u << ((_3102 >> 4u) & 15u)) + 4294967295u) & _3101) == 0u) || ((_3102 & 240u) == 0u))
        {
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
            _3187 = 0.0;
            _3189 = 0.0;
            _3191 = 0.0;
        }
        else
        {
            float _3182;
            float _3184;
            float _3186;
            float _3188;
            float _3190;
            float _3192;
            float _3325 = 0.0;
            float _3326 = 0.0;
            float _3327 = 0.0;
            float _3328 = 0.0;
            float _3329 = 0.0;
            float _3330 = 0.0;
            uint _3331 = 0u;
            uint _3340;
            bool _3341;
            for (;;)
            {
                _3340 = texelFetch(g_lightClassification, int((((_3095 << 5u) + (_3081 << 9u)) + (_3331 << 2u)) >> 2u)).x;
                _3341 = _3340 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3341)
                {
                    frontier_phi_66_pred = _3330;
                    frontier_phi_66_pred_1 = _3329;
                    frontier_phi_66_pred_2 = _3328;
                    frontier_phi_66_pred_3 = _3327;
                    frontier_phi_66_pred_4 = _3326;
                    frontier_phi_66_pred_5 = _3325;
                }
                else
                {
                    float _3449;
                    float _3450;
                    float _3451;
                    float _3452;
                    float _3453;
                    float _3454;
                    uint _3455;
                    _3449 = _3325;
                    _3450 = _3326;
                    _3451 = _3327;
                    _3452 = _3328;
                    _3453 = _3329;
                    _3454 = _3330;
                    _3455 = _3340;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    for (;;)
                    {
                        uint _3459 = uint(findLSB(_3455)) + (_3331 << 5u);
                        uint _3456 = (_3455 + 4294967295u) & _3455;
                        uint _3461 = _3459 * 48u;
                        vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3461)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 3u)).x));
                        uint _3481 = (_3459 * 48u) + 4u;
                        vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3481)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3481 + 3u)).x));
                        uint _3500 = (_3459 * 48u) + 8u;
                        vec3 _3511 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3500)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 2u)).x));
                        float _3515 = _3475.x - _2160;
                        float _3516 = _3475.y - _2161;
                        float _3517 = _3475.z - _2162;
                        float _3518 = dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517));
                        float _3521 = inversesqrt(_3518);
                        float _3522 = _3521 * _3515;
                        float _3523 = _3521 * _3516;
                        float _3524 = _3521 * _3517;
                        float _3525 = dot(vec3(_1026, _1029, _1032), vec3(_3522, _3523, _3524));
                        float _3530 = 1.0 - (_3518 * _3475.w);
                        float _4935 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3531 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3532 = sqrt(_3518) * _3494.w;
                        float _3535 = 1.39999997615814208984375 / (_3532 + 1.39999997615814208984375);
                        float _3536 = _3535 * _3535;
                        float _3539 = ((1.0 - _3536) * _3525) + _3536;
                        float _3542 = _3532 * _3532;
                        float _3546 = ((isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0))) * _3531) / ((_3542 * 0.699999988079071044921875) + 1.0);
                        float _3550 = (-0.0) - _2160;
                        float _3551 = (-0.0) - _2161;
                        float _3552 = (-0.0) - _2162;
                        float _3556 = inversesqrt(dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552)));
                        float _3557 = _3556 * _3550;
                        float _3558 = _3556 * _3551;
                        float _3559 = _3556 * _3552;
                        float _3566 = exp2(log2(1.0 / ((_3542 * 3.5) + 5.0)) * 0.25);
                        float _3567 = 1.0 - _1101;
                        float _3574 = sqrt(1.0 - ((1.0 - (_3567 * _3567)) * (1.0 - (_3566 * _3566))));
                        float _3575 = _3574 * _3574;
                        float _3576 = _3575 * _3575;
                        float _3577 = _3557 + _3522;
                        float _3578 = _3558 + _3523;
                        float _3579 = _3559 + _3524;
                        float _3583 = inversesqrt(dot(vec3(_3577, _3578, _3579), vec3(_3577, _3578, _3579)));
                        float _3587 = dot(vec3(_1026, _1029, _1032), vec3(_3557, _3558, _3559));
                        float _4951 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3590 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                        float _3591 = dot(vec3(_1026, _1029, _1032), vec3(_3583 * _3577, _3583 * _3578, _3583 * _3579));
                        float _4962 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                        float _3594 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3598 = ((_3594 * _3594) * (_3576 + (-1.0))) + 1.0;
                        float _3599 = _3535 * _3575;
                        float _3600 = _3599 * _3599;
                        float _3603 = ((1.0 - _3600) * _3525) + _3600;
                        float _4973 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                        float _3604 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                        float _3605 = 1.0 - _3575;
                        float _3615 = (0.5 / (((_3604 * ((_3590 * _3605) + _3575)) + 9.9999999392252902907785028219223e-09) + (((_3604 * _3605) + _3575) * _3590))) * _3604;
                        float _4984 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                        float _3626 = (((_3576 * 3.1415927410125732421875) * (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0)))) / ((_3598 * _3598) * ((_3542 * 2.1991131305694580078125) + 3.141590118408203125))) * _3531;
                        _3384 = (_3546 * _3494.x) + _3452;
                        _3385 = (_3546 * _3494.y) + _3453;
                        _3386 = (_3546 * _3494.z) + _3454;
                        _3381 = (_3626 * _3511.x) + _3449;
                        _3382 = (_3626 * _3511.y) + _3450;
                        _3383 = (_3626 * _3511.z) + _3451;
                        if (_3456 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3449 = _3381;
                            _3450 = _3382;
                            _3451 = _3383;
                            _3452 = _3384;
                            _3453 = _3385;
                            _3454 = _3386;
                            _3455 = _3456;
                        }
                    }
                    frontier_phi_66_pred = _3386;
                    frontier_phi_66_pred_1 = _3385;
                    frontier_phi_66_pred_2 = _3384;
                    frontier_phi_66_pred_3 = _3383;
                    frontier_phi_66_pred_4 = _3382;
                    frontier_phi_66_pred_5 = _3381;
                }
                _3192 = frontier_phi_66_pred;
                _3190 = frontier_phi_66_pred_1;
                _3188 = frontier_phi_66_pred_2;
                _3186 = frontier_phi_66_pred_3;
                _3184 = frontier_phi_66_pred_4;
                _3182 = frontier_phi_66_pred_5;
                uint _3332 = _3331 + 1u;
                if (_3332 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3325 = _3182;
                    _3326 = _3184;
                    _3327 = _3186;
                    _3328 = _3188;
                    _3329 = _3190;
                    _3330 = _3192;
                    _3331 = _3332;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
            _3187 = _3188;
            _3189 = _3190;
            _3191 = _3192;
        }
        uvec4 _3195 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3196 = _3195.z;
        uint _3198 = (_3196 >> 8u) & 15u;
        float _3293;
        float _3295;
        float _3297;
        float _3299;
        float _3301;
        float _3303;
        if (((4294967295u << _3198) & _3101) == 0u)
        {
            _3293 = _3181;
            _3295 = _3183;
            _3297 = _3185;
            _3299 = _3187;
            _3301 = _3189;
            _3303 = _3191;
        }
        else
        {
            float _3318 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
            float _3319 = _3318 * _2160;
            float _3320 = _3318 * _2161;
            float _3321 = _3318 * _2162;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3198 < ((_3196 >> 12u) & 15u))
            {
                float _3294;
                float _3296;
                float _3298;
                float _3300;
                float _3302;
                float _3304;
                float _3432 = _3181;
                float _3433 = _3183;
                float _3434 = _3185;
                float _3435 = _3187;
                float _3436 = _3189;
                float _3437 = _3191;
                uint _3438 = _3198;
                uint _3447;
                bool _3448;
                for (;;)
                {
                    _3447 = texelFetch(g_lightClassification, int((((_3095 << 5u) + (_3081 << 9u)) + (_3438 << 2u)) >> 2u)).x;
                    _3448 = _3447 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3448)
                    {
                        frontier_phi_72_pred = _3437;
                        frontier_phi_72_pred_1 = _3436;
                        frontier_phi_72_pred_2 = _3435;
                        frontier_phi_72_pred_3 = _3434;
                        frontier_phi_72_pred_4 = _3433;
                        frontier_phi_72_pred_5 = _3432;
                    }
                    else
                    {
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3924;
                        float _3925;
                        float _3926;
                        float _3927;
                        float _3928;
                        float _3929;
                        float _3644 = _3432;
                        float _3645 = _3433;
                        float _3646 = _3434;
                        float _3647 = _3435;
                        float _3648 = _3436;
                        float _3649 = _3437;
                        uint _3650 = _3447;
                        uint _3651;
                        vec4 _3676;
                        float _3677;
                        vec4 _3692;
                        vec3 _3704;
                        vec4 _3719;
                        vec4 _3734;
                        float _3780;
                        bool _3781;
                        for (;;)
                        {
                            uint _3661 = ((_3438 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3650));
                            _3651 = (_3650 + 4294967295u) & _3650;
                            uint _3663 = _3661 * 40u;
                            _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            _3677 = _3676.w;
                            uint _3679 = (_3661 * 40u) + 4u;
                            _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            uint _3694 = (_3661 * 40u) + 8u;
                            _3704 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x));
                            uint _3706 = (_3661 * 40u) + 16u;
                            _3719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 3u)).x));
                            uint _3721 = (_3661 * 40u) + 20u;
                            _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            uint _3736 = (_3661 * 40u) + 24u;
                            vec4 _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            uint _3755 = (_3661 * 40u) + 28u;
                            vec4 _3768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 3u)).x));
                            _3780 = fma(_2162, _3768.z, fma(_2161, _3768.y, _3768.x * _2160)) + _3768.w;
                            _3781 = !((fma(_2162, _3749.z, fma(_2161, _3749.y, _3749.x * _2160)) + _3749.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3781)
                            {
                                float _3808 = _3676.x - _2160;
                                float _3809 = _3676.y - _2161;
                                float _3810 = _3676.z - _2162;
                                float _3811 = dot(vec3(_3808, _3809, _3810), vec3(_3808, _3809, _3810));
                                float _3814 = inversesqrt(_3811);
                                float _3815 = _3814 * _3808;
                                float _3816 = _3814 * _3809;
                                float _3817 = _3814 * _3810;
                                float _3821 = 1.0 - (_3811 / (_3677 * _3677));
                                float _4995 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3822 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3826 = sqrt(_3811) * _3692.w;
                                float _3828 = 1.39999997615814208984375 / (_3826 + 1.39999997615814208984375);
                                float _3829 = _3828 * _3828;
                                float _3832 = ((1.0 - _3829) * dot(vec3(_3815, _3816, _3817), vec3(_1026, _1029, _1032))) + _3829;
                                float _3835 = _3826 * _3826;
                                float _3839 = (fma(_2162, _3719.z, fma(_2161, _3719.y, _3719.x * _2160)) + _3719.w) / _3780;
                                float _3840 = (fma(_2162, _3734.z, fma(_2161, _3734.y, _3734.x * _2160)) + _3734.w) / _3780;
                                float _3844 = 1.0 - dot(vec2(_3839, _3840), vec2(_3839, _3840));
                                float _5011 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3845 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3846 = _3845 * (((isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0))) * _3822) / ((_3835 * 0.699999988079071044921875) + 1.0));
                                float _3858 = exp2(log2(1.0 / ((_3835 * 3.5) + 5.0)) * 0.25);
                                float _3859 = 1.0 - _1101;
                                float _3866 = sqrt(1.0 - ((1.0 - (_3859 * _3859)) * (1.0 - (_3858 * _3858))));
                                float _3867 = _3866 * _3866;
                                float _3868 = _3867 * _3867;
                                float _3869 = _3815 - _3319;
                                float _3870 = _3816 - _3320;
                                float _3871 = _3817 - _3321;
                                float _3875 = inversesqrt(dot(vec3(_3869, _3870, _3871), vec3(_3869, _3870, _3871)));
                                float _3879 = dot(vec3(_1026, _1029, _1032), vec3((-0.0) - _3319, (-0.0) - _3320, (-0.0) - _3321));
                                float _5022 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3882 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3883 = dot(vec3(_1026, _1029, _1032), vec3(_3875 * _3869, _3875 * _3870, _3875 * _3871));
                                float _5033 = isnan(0.0) ? _3883 : (isnan(_3883) ? 0.0 : max(_3883, 0.0));
                                float _3886 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3890 = ((_3886 * _3886) * (_3868 + (-1.0))) + 1.0;
                                float _3891 = _3828 * _3867;
                                float _3892 = _3891 * _3891;
                                float _3898 = ((1.0 - _3892) * dot(vec3(_1026, _1029, _1032), vec3(_3815, _3816, _3817))) + _3892;
                                float _5044 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3899 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                                float _3900 = 1.0 - _3867;
                                float _3910 = (0.5 / (((_3899 * ((_3882 * _3900) + _3867)) + 9.9999999392252902907785028219223e-09) + (((_3899 * _3900) + _3867) * _3882))) * _3899;
                                float _5055 = isnan(0.0) ? _3910 : (isnan(_3910) ? 0.0 : max(_3910, 0.0));
                                float _3920 = (_3845 * _3822) * (((_3868 * 3.1415927410125732421875) * (isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0)))) / ((_3890 * _3890) * ((_3835 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3846 * _3692.y;
                                frontier_phi_78_pred_1 = _3846 * _3692.x;
                                frontier_phi_78_pred_2 = _3920 * _3704.z;
                                frontier_phi_78_pred_3 = _3920 * _3704.y;
                                frontier_phi_78_pred_4 = _3920 * _3704.x;
                                frontier_phi_78_pred_5 = _3846 * _3692.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3928 = frontier_phi_78_pred;
                            _3927 = frontier_phi_78_pred_1;
                            _3926 = frontier_phi_78_pred_2;
                            _3925 = frontier_phi_78_pred_3;
                            _3924 = frontier_phi_78_pred_4;
                            _3929 = frontier_phi_78_pred_5;
                            _3634 = _3927 + _3647;
                            _3635 = _3928 + _3648;
                            _3636 = _3929 + _3649;
                            _3631 = _3924 + _3644;
                            _3632 = _3925 + _3645;
                            _3633 = _3926 + _3646;
                            if (_3651 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3633;
                                _3647 = _3634;
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3651;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3636;
                        frontier_phi_72_pred_1 = _3635;
                        frontier_phi_72_pred_2 = _3634;
                        frontier_phi_72_pred_3 = _3633;
                        frontier_phi_72_pred_4 = _3632;
                        frontier_phi_72_pred_5 = _3631;
                    }
                    _3304 = frontier_phi_72_pred;
                    _3302 = frontier_phi_72_pred_1;
                    _3300 = frontier_phi_72_pred_2;
                    _3298 = frontier_phi_72_pred_3;
                    _3296 = frontier_phi_72_pred_4;
                    _3294 = frontier_phi_72_pred_5;
                    uint _3439 = _3438 + 1u;
                    if (_3439 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3432 = _3294;
                        _3433 = _3296;
                        _3434 = _3298;
                        _3435 = _3300;
                        _3436 = _3302;
                        _3437 = _3304;
                        _3438 = _3439;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3304;
                frontier_phi_60_61_ladder_1 = _3302;
                frontier_phi_60_61_ladder_2 = _3298;
                frontier_phi_60_61_ladder_3 = _3296;
                frontier_phi_60_61_ladder_4 = _3294;
                frontier_phi_60_61_ladder_5 = _3300;
            }
            else
            {
                frontier_phi_60_61_ladder = _3191;
                frontier_phi_60_61_ladder_1 = _3189;
                frontier_phi_60_61_ladder_2 = _3185;
                frontier_phi_60_61_ladder_3 = _3183;
                frontier_phi_60_61_ladder_4 = _3181;
                frontier_phi_60_61_ladder_5 = _3187;
            }
            _3293 = frontier_phi_60_61_ladder_4;
            _3295 = frontier_phi_60_61_ladder_3;
            _3297 = frontier_phi_60_61_ladder_2;
            _3299 = frontier_phi_60_61_ladder_5;
            _3301 = frontier_phi_60_61_ladder_1;
            _3303 = frontier_phi_60_61_ladder;
        }
        float _3308 = isnan(1.0) ? _1085 : (isnan(_1085) ? 1.0 : min(_1085, 1.0));
        _3114 = (_3308 * _3299) + _2626;
        _3116 = (_3308 * _3301) + _2628;
        _3118 = (_3308 * _3303) + _2630;
        _3120 = ((_3293 * _1069) * _3308) + _2964;
        _3122 = ((_3295 * _1071) * _3308) + _2966;
        _3124 = ((_3297 * _1072) * _3308) + _2968;
    }
    else
    {
        _3114 = _2626;
        _3116 = _2628;
        _3118 = _2630;
        _3120 = _2964;
        _3122 = _2966;
        _3124 = _2968;
    }
    float _5071 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _5082 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _5093 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    uint _3144 = _261 + 6u;
    float _3152 = _1007 / cbSceneParam._m0[86u].x;
    float _3153 = _1008 / cbSceneParam._m0[86u].y;
    vec4 _3167 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3152, _3153, (log2((isnan(cbSceneParam._m0[77u].w) ? _942 : (isnan(_942) ? cbSceneParam._m0[77u].w : min(_942, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3169 = _3167.x;
    float _3170 = _3167.y;
    float _3171 = _3167.z;
    float _3172 = _3167.w;
    float _3243;
    float _3245;
    float _3247;
    float _3249;
    if (_942 > cbSceneParam._m0[78u].w)
    {
        float _3206 = isnan(_942) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _942 : min(cbSceneParam._m0[80u].w, _942));
        float _3207 = _3206 / _942;
        float _3218 = _3207 * _992;
        float _3219 = _993 * _3207;
        float _3220 = (-0.0) - _3219;
        float _3221 = _3207 * _994;
        float _3223 = (cbSceneParam._m0[77u].w * _3220) / _3206;
        float _3224 = _3223 + cbSceneParam._m0[79u].w;
        float _3225 = cbSceneParam._m0[79u].w - _3219;
        float _3231 = sqrt(((_3218 * _3218) + (_3219 * _3219)) + (_3221 * _3221));
        float _3234 = (1.0 - (cbSceneParam._m0[77u].w / _3206)) * _3231;
        float _3239 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3241 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3394;
        if (abs((_3220 - _3223) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3394 = ((((_3224 > 0.0) ? exp2(_3239 * _3224) : (2.0 - exp2(_3241 * _3224))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3234;
        }
        else
        {
            float _3354 = 1.0 / cbSceneParam._m0[80u].x;
            float _3355 = isnan(_3225) ? _3224 : (isnan(_3224) ? _3225 : max(_3224, _3225));
            float _3356 = isnan(_3225) ? _3224 : (isnan(_3224) ? _3225 : min(_3224, _3225));
            float _3365 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : min(_3355, 0.0));
            float _3366 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : min(_3356, 0.0));
            _3394 = ((abs(_3231 / _3220) * cbSceneParam._m0[80u].y) * ((((_3365 - _3366) * 2.0) - ((exp2(_3239 * (isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0)))) - exp2(_3239 * (isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0))))) * _3354)) - ((exp2(_3241 * _3365) - exp2(_3241 * _3366)) * _3354))) + (_3234 * cbSceneParam._m0[80u].z);
        }
        vec4 _3396 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3152, _3153, 1.0), 0.0);
        float _3405 = exp2((_3394 * (-1.44269502162933349609375)) * (1.0 - _3396.w));
        float _3406 = log2(_3405);
        float _3422 = log2(_3172);
        _3243 = (exp2(_3422 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3406 * cbSceneParam._m0[78u].x)) * _3396.x) / cbSceneParam._m0[78u].x)) + _3169;
        _3245 = (exp2(_3422 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3406 * cbSceneParam._m0[78u].y)) * _3396.y) / cbSceneParam._m0[78u].y)) + _3170;
        _3247 = (exp2(_3422 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3406 * cbSceneParam._m0[78u].z)) * _3396.z) / cbSceneParam._m0[78u].z)) + _3171;
        _3249 = _3405 * _3172;
    }
    else
    {
        _3243 = _3169;
        _3245 = _3170;
        _3247 = _3171;
        _3249 = _3172;
    }
    float _3261 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3262 = _3261 == 3.0;
    float _3263 = log2(_3249);
    float _3270 = exp2(_3263 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0))) * (_3114 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1085))) + ((_3120 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1892)) * cbPerFrame._m0[3u].x));
    float _3271 = exp2(_3263 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0))) * (_3116 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1085))) + ((_3122 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1892)) * cbPerFrame._m0[3u].x));
    float _3272 = exp2(_3263 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0))) * (_3118 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1085))) + ((_3124 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1892)) * cbPerFrame._m0[3u].x));
    float _3281 = (_3261 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3281 * (_3262 ? _3270 : (_3270 + (cbSceneParam._m0[72u].w * _3243)));
    SV_Target.y = _3281 * (_3262 ? _3271 : (_3271 + (cbSceneParam._m0[72u].w * _3245)));
    SV_Target.z = _3281 * (_3262 ? _3272 : (_3272 + (cbSceneParam._m0[72u].w * _3247)));
    SV_Target.w = cbInstanceData._m0[_3144].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3144].w;
}


