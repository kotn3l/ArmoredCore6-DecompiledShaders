#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1584;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _253 = _252 * _244;
    float _254 = _252 * _245;
    float _255 = _252 * _246;
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = _259 * NORMAL.x;
    float _261 = _259 * NORMAL.y;
    float _262 = _259 * NORMAL.z;
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = _266 * TANGENT.x;
    float _268 = _266 * TANGENT.y;
    float _269 = _266 * TANGENT.z;
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3933 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3944 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3955 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _378 = _373.x * cbMtdParam._m0[11u].x;
    float _379 = _373.y * cbMtdParam._m0[11u].y;
    float _380 = _373.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _464 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _481 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _418.x) * 2.0) - ((((_452 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3966 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _489 = (_482 * ((_399.x * cbMtdParam._m0[12u].x) - _378)) + _378;
    float _490 = (_482 * ((_399.y * cbMtdParam._m0[12u].y) - _379)) + _379;
    float _491 = (_482 * ((_399.z * cbMtdParam._m0[12u].z) - _380)) + _380;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _530 = _528.x;
    float _540 = dot(vec4(_530, _528.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _554 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _418.y) * 2.0) - ((((_530 - _540) * cbMtdParam._m0[23u].w) + _540) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3977 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _565 = (_347.x * cbMtdParam._m0[9u].x) * ((_555 * ((_508.x * cbMtdParam._m0[13u].x) - _489)) + _489);
    float _566 = (_347.y * cbMtdParam._m0[9u].y) * ((_555 * ((_508.y * cbMtdParam._m0[13u].y) - _490)) + _490);
    float _567 = (_347.z * cbMtdParam._m0[9u].z) * ((_555 * ((_508.z * cbMtdParam._m0[13u].z) - _491)) + _491);
    float _571 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _565;
    float _574 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _566;
    float _577 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _567;
    float _585 = (((_565 - _571) * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) + _571) * 4.55000019073486328125;
    float _587 = (((_566 - _574) * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) + _574) * 4.55000019073486328125;
    float _589 = (((_567 - _577) * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) + _577) * 4.55000019073486328125;
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _650 = _648.x;
    float _651 = _648.y;
    float _652 = _648.z;
    float _659 = ((_631.x - _650) * _482) + _650;
    float _660 = ((_631.y - _651) * _482) + _651;
    float _661 = ((_631.z - _652) * _482) + _652;
    vec4 _673 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _686 = ((_673.z - _661) * _555) + _661;
    float _689 = ((((_673.x - _659) * _555) + _659) * 2.0) + (-1.0);
    float _690 = ((((_673.y - _660) * _555) + _660) * 2.0) + (-1.0);
    float _691 = dot(vec2(_689, _690), vec2(_689, _690));
    float _3988 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _696 = sqrt(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _726 = (_689 + ((((_606.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_714.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _727 = (_690 + ((((_606.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_714.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _730 = fma(_696, _260, fma(_727, _267, _726 * _253));
    float _733 = fma(_696, _261, fma(_727, _268, _726 * _254));
    float _736 = fma(_696, _262, fma(_727, _269, _726 * _255));
    float _740 = inversesqrt(dot(vec3(_730, _733, _736), vec3(_730, _733, _736)));
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _769 = _767.x;
    float _770 = 1.0 - _769;
    float _779 = (cbMtdParam._m0[19u].x + dot(vec4(_740 * _730, _740 * _733, _740 * _736, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_769 - _770) * cbMtdParam._m0[24u].z) + _770) * cbMtdParam._m0[21u].z);
    float _3999 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _780 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _782 = (-0.0) - cbMtdParam._m0[24u].x;
    float _784 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _784 : (isnan(_784) ? 1.0 : min(_784, 1.0));
    float _792 = _780 - ((_780 * TEXCOORD_8.x) * _785);
    float _793 = _780 - ((_780 * TEXCOORD_8.y) * _785);
    float _794 = _780 - ((_780 * TEXCOORD_8.z) * _785);
    float _801 = (_792 * (cbMtdParam._m0[17u].x - _585)) + _585;
    float _802 = (_793 * (cbMtdParam._m0[17u].y - _587)) + _587;
    float _803 = (_794 * (cbMtdParam._m0[17u].z - _589)) + _589;
    vec4 _815 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _817 = _815.x;
    float _818 = 1.0 - _817;
    float _844 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_817 - _818) * cbMtdParam._m0[24u].w) + _818) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4020 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _845 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _853 = ((((cbMtdParam._m0[10u].x - _801) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _845) + _801;
    float _854 = ((((cbMtdParam._m0[10u].y - _802) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _845) + _802;
    float _855 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _803)) * _845) + _803;
    vec4 _881 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _883 = _881.x;
    float _900 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _883) * _482) + _883;
    float _917 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _900) * _555) + _900;
    float _921 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _917) * cbMtdParam._m0[19u].z) + _917;
    float _923 = _921 - (_921 * _792);
    float _925 = _923 - (_923 * _845);
    float _930 = (((_606.z - _686) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _686;
    float _934 = ((_714.z - _930) * cbMtdParam._m0[19u].w) + _930;
    vec4 _948 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _955 = (_948.x * 2.0) + (-1.0);
    float _956 = (_948.y * 2.0) + (-1.0);
    float _957 = dot(vec2(_955, _956), vec2(_955, _956));
    float _4031 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _965 = ((_948.z - _934) * _792) + _934;
    float _968 = ((cbMtdParam._m0[23u].x - _965) * _845) + _965;
    vec4 _989 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _995 = (_989.x * 2.0) + (-1.0);
    float _996 = (_989.y * 2.0) + (-1.0);
    float _997 = dot(vec2(_995, _996), vec2(_995, _996));
    float _4042 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1012 = ((sqrt(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) - _696) * _794) + _696;
    float _1015 = (((_955 - _726) * _792) + _726) + (cbMtdParam._m0[21u].x * _726);
    float _1016 = (((_956 - _727) * _793) + _727) + (cbMtdParam._m0[21u].x * _727);
    float _1027 = (((_995 - _1015) + (_1015 * cbMtdParam._m0[22u].z)) * _845) + _1015;
    float _1028 = (((_996 - _1016) + (_1016 * cbMtdParam._m0[22u].z)) * _845) + _1016;
    float _1029 = (_845 * (sqrt(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) - _1012)) + _1012;
    float _1031 = cbMtdParam._m0[22u].x + _714.w;
    float _1034 = fma(_1029, _260, fma(_1028, _267, _1027 * _253));
    float _1037 = fma(_1029, _261, fma(_1028, _268, _1027 * _254));
    float _1040 = fma(_1029, _262, fma(_1028, _269, _1027 * _255));
    float _1044 = inversesqrt(dot(vec3(_1034, _1037, _1040), vec3(_1034, _1037, _1040)));
    float _1045 = _1044 * _1034;
    float _1046 = _1044 * _1037;
    float _1047 = _1044 * _1040;
    float _4053 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _1048 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _4075 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4086 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4097 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4108 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _1053 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _1067 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1117 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1107);
    float _1118 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1107);
    float _1119 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1107);
    float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
    float _1124 = _1117 * _1123;
    float _1125 = _1118 * _1123;
    float _1126 = _1119 * _1123;
    float _1132 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1133 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1151 = fma(_1047, cbSceneParam._m0[5u].z, fma(_1046, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1045));
    float _1154 = fma(_1047, cbSceneParam._m0[6u].z, fma(_1046, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1045));
    float _1157 = fma(_1047, cbSceneParam._m0[7u].z, fma(_1046, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1045));
    uint _1171 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1177 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * cbInstanceData._m0[_1171].x;
    float _1178 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * cbInstanceData._m0[_1171].y;
    float _1179 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * cbInstanceData._m0[_1171].z;
    float _4119 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1180 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _1181 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1182 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _1183 = 1.0 - _1053;
    float _1184 = _1180 * _1183;
    float _1185 = _1181 * _1183;
    float _1186 = _1182 * _1183;
    float _1191 = (_1180 + (-0.039999999105930328369140625)) * _1053;
    float _1192 = (_1181 + (-0.039999999105930328369140625)) * _1053;
    float _1193 = (_1182 + (-0.039999999105930328369140625)) * _1053;
    float _1194 = _1191 + 0.039999999105930328369140625;
    float _1196 = _1192 + 0.039999999105930328369140625;
    float _1197 = _1193 + 0.039999999105930328369140625;
    vec4 _1206 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1132, cbSceneParam._m0[86u].y * _1133));
    float _1210 = ((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * TEXCOORD_5.w) * _1206.x;
    float _1211 = dot(vec3(_1045, _1046, _1047), vec3(_1124, _1125, _1126));
    float _1214 = _1211 * 2.0;
    float _1218 = (_1214 * _1045) - _1124;
    float _1219 = (_1214 * _1046) - _1125;
    float _1220 = (_1214 * _1047) - _1126;
    float _1224 = abs(dot(vec3(_1124, _1125, _1126), vec3(_1045, _1046, _1047)));
    float _4152 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _1226 = sqrt(_1048);
    float _1239 = exp2((_1226 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1226 * 3.0));
    float _1245 = (1.0 - _1239) * ((_1226 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1246 = _1239 * _1226;
    float _1274 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1278 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1282 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1583;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1308 = fma(_1282, cbModelParam._m0[26u].z, fma(_1278, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1274));
        float _1312 = fma(_1282, cbModelParam._m0[27u].z, fma(_1278, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1274));
        float _1316 = fma(_1282, cbModelParam._m0[28u].z, fma(_1278, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1274));
        float _1341 = _1274 + _1045;
        float _1342 = _1278 + _1046;
        float _1343 = _1282 + _1047;
        float _1353 = fma(_1343, cbModelParam._m0[26u].z, fma(_1342, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1341)) - _1308;
        float _1354 = fma(_1343, cbModelParam._m0[27u].z, fma(_1342, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1341)) - _1312;
        float _1355 = fma(_1343, cbModelParam._m0[28u].z, fma(_1342, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1341)) - _1316;
        float _1359 = inversesqrt(dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355)));
        float _1372 = ((_1359 * _1353) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1308 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1359 * _1354) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1312 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1359 * _1355) / cbModelParam._m0[34u].z) + ((((((_1316 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1411 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1377.x + (-0.5));
        float _1413 = _1411 * (_1377.y + (-0.5));
        float _1414 = _1411 * (_1377.z + (-0.5));
        float _1421 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1384.x + (-0.5));
        float _1423 = _1421 * (_1384.y + (-0.5));
        float _1424 = _1421 * (_1384.z + (-0.5));
        float _1431 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1391.x + (-0.5));
        float _1433 = _1431 * (_1391.y + (-0.5));
        float _1434 = _1431 * (_1391.z + (-0.5));
        float _1441 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1398.x + (-0.5));
        float _1443 = _1441 * (_1398.y + (-0.5));
        float _1444 = _1441 * (_1398.z + (-0.5));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = _1412 * 0.5;
        float _1449 = _1422 * 0.5;
        float _1450 = _1432 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1465 = (dot(vec3(_1045, _1046, _1047), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1475 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4200 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1477 + 1.0))) + _1482) * _1445;
        float _1492 = _1413 * 0.5;
        float _1493 = _1423 * 0.5;
        float _1494 = _1433 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_1045, _1046, _1047), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4233 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1519 + 1.0))) + _1524) * _1446;
        float _1534 = _1414 * 0.5;
        float _1535 = _1424 * 0.5;
        float _1536 = _1434 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_1045, _1046, _1047), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4266 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1561 + 1.0))) + _1566) * _1447;
        _1583 = _1414;
        _1585 = _1413;
        _1586 = _1412;
        _1587 = _1424;
        _1588 = _1423;
        _1589 = _1422;
        _1590 = _1434;
        _1591 = _1433;
        _1592 = _1432;
        _1593 = _1447;
        _1594 = _1446;
        _1595 = _1445;
        _1596 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1597 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1598 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
    }
    else
    {
        _1583 = _1584;
        _1585 = _1584;
        _1586 = _1584;
        _1587 = _1584;
        _1588 = _1584;
        _1589 = _1584;
        _1590 = _1584;
        _1591 = _1584;
        _1592 = _1584;
        _1593 = _1584;
        _1594 = _1584;
        _1595 = _1584;
        _1596 = 0.0;
        _1597 = 0.0;
        _1598 = 0.0;
    }
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1622 = fma(_1282, cbModelParam._m0[30u].z, fma(_1278, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1274));
        float _1626 = fma(_1282, cbModelParam._m0[31u].z, fma(_1278, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1274));
        float _1630 = fma(_1282, cbModelParam._m0[32u].z, fma(_1278, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1274));
        float _1653 = _1274 + _1045;
        float _1654 = _1278 + _1046;
        float _1655 = _1282 + _1047;
        float _1665 = fma(_1655, cbModelParam._m0[30u].z, fma(_1654, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1653)) - _1622;
        float _1666 = fma(_1655, cbModelParam._m0[31u].z, fma(_1654, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1653)) - _1626;
        float _1667 = fma(_1655, cbModelParam._m0[32u].z, fma(_1654, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1653)) - _1630;
        float _1671 = inversesqrt(dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667)));
        float _1684 = ((_1671 * _1665) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1622 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1685 = ((_1671 * _1666) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1626 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1686 = ((_1671 * _1667) / cbModelParam._m0[35u].z) + ((((((_1630 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1688 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1684, _1685, _1686), 0.0);
        vec4 _1695 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1684, _1685, _1686), 0.0);
        vec4 _1702 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1684, _1685, _1686), 0.0);
        vec4 _1709 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1684, _1685, _1686), 0.0);
        float _1721 = exp2((_1688.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1688.x + (-0.5));
        float _1723 = _1721 * (_1688.y + (-0.5));
        float _1724 = _1721 * (_1688.z + (-0.5));
        float _1731 = exp2((_1695.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1695.x + (-0.5));
        float _1733 = _1731 * (_1695.y + (-0.5));
        float _1734 = _1731 * (_1695.z + (-0.5));
        float _1741 = exp2((_1702.w + (-0.5)) * 20.0) * 2.0;
        float _1742 = _1741 * (_1702.x + (-0.5));
        float _1743 = _1741 * (_1702.y + (-0.5));
        float _1744 = _1741 * (_1702.z + (-0.5));
        float _1751 = exp2((_1709.w + (-0.5)) * 20.0) * 2.0;
        float _1752 = _1751 * (_1709.x + (-0.5));
        float _1753 = _1751 * (_1709.y + (-0.5));
        float _1754 = _1751 * (_1709.z + (-0.5));
        float _1755 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1756 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1757 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1758 = _1722 * 0.5;
        float _1759 = _1732 * 0.5;
        float _1760 = _1742 * 0.5;
        float _1761 = dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760));
        float _1766 = (_1761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1761);
        float _1774 = (dot(vec3(_1045, _1046, _1047), vec3(_1766 * _1758, _1766 * _1759, _1766 * _1760)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1783 = sqrt(((_1759 * _1759) + (_1758 * _1758)) + (_1760 * _1760)) / (_1755 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1785 = _1784 * 2.0;
        float _1789 = (1.0 - _1784) / (_1784 + 1.0);
        float _4329 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1799 = ((((1.0 - _1790) * (_1785 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1785 + 1.0))) + _1790) * _1755;
        float _1800 = _1723 * 0.5;
        float _1801 = _1733 * 0.5;
        float _1802 = _1743 * 0.5;
        float _1803 = dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802));
        float _1808 = (_1803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1803);
        float _1816 = (dot(vec3(_1045, _1046, _1047), vec3(_1808 * _1800, _1808 * _1801, _1808 * _1802)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1825 = sqrt(((_1801 * _1801) + (_1800 * _1800)) + (_1802 * _1802)) / (_1756 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1827 = _1826 * 2.0;
        float _1831 = (1.0 - _1826) / (_1826 + 1.0);
        float _4362 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1841 = ((((1.0 - _1832) * (_1827 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1827 + 1.0))) + _1832) * _1756;
        float _1842 = _1724 * 0.5;
        float _1843 = _1734 * 0.5;
        float _1844 = _1744 * 0.5;
        float _1845 = dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844));
        float _1850 = (_1845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1845);
        float _1858 = (dot(vec3(_1045, _1046, _1047), vec3(_1850 * _1842, _1850 * _1843, _1850 * _1844)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1867 = sqrt(((_1843 * _1843) + (_1842 * _1842)) + (_1844 * _1844)) / (_1757 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1869 = _1868 * 2.0;
        float _1873 = (1.0 - _1868) / (_1868 + 1.0);
        float _4395 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1883 = ((((1.0 - _1874) * (_1869 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1869 + 1.0))) + _1874) * _1757;
        _1891 = _1724;
        _1892 = _1723;
        _1893 = _1722;
        _1894 = _1734;
        _1895 = _1733;
        _1896 = _1732;
        _1897 = _1744;
        _1898 = _1743;
        _1899 = _1742;
        _1900 = _1757;
        _1901 = _1756;
        _1902 = _1755;
        _1903 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)));
        _1904 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)));
        _1905 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)));
    }
    else
    {
        _1891 = _1584;
        _1892 = _1584;
        _1893 = _1584;
        _1894 = _1584;
        _1895 = _1584;
        _1896 = _1584;
        _1897 = _1584;
        _1898 = _1584;
        _1899 = _1584;
        _1900 = _1584;
        _1901 = _1584;
        _1902 = _1584;
        _1903 = 0.0;
        _1904 = 0.0;
        _1905 = 0.0;
    }
    float _1915 = (cbModelParam._m0[1u].x * (_1903 - _1596)) + _1596;
    float _1916 = (cbModelParam._m0[1u].x * (_1904 - _1597)) + _1597;
    float _1917 = (cbModelParam._m0[1u].x * (_1905 - _1598)) + _1598;
    float _1938 = fma(_1917, cbSceneParam._m0[89u].z, fma(_1916, cbSceneParam._m0[89u].y, _1915 * cbSceneParam._m0[89u].x));
    float _1941 = fma(_1917, cbSceneParam._m0[90u].z, fma(_1916, cbSceneParam._m0[90u].y, _1915 * cbSceneParam._m0[90u].x));
    float _1944 = fma(_1917, cbSceneParam._m0[91u].z, fma(_1916, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1915));
    float _1959 = _1218 * 0.5;
    float _1960 = _1219 * 0.5;
    float _1961 = _1220 * 0.5;
    float _1962 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1893, _1896, _1899, _1902));
    float _1965 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1892, _1895, _1898, _1901));
    float _1968 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1891, _1894, _1897, _1900));
    float _2002;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1975 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1583, _1587, _1590, _1593));
        float _1979 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1585, _1588, _1591, _1594));
        float _1983 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1586, _1589, _1592, _1595));
        float _1990 = dot(vec4(cbModelParam._m0[39u]), vec4(_1959, _1960, _1961, 1.0));
        _2002 = dot(vec3(isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0)), isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)), isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1990) ? 0.0 : (isnan(0.0) ? _1990 : max(0.0, _1990))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2002 = 1.0;
    }
    float _2013;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2004 = dot(vec4(cbModelParam._m0[40u]), vec4(_1959, _1960, _1961, 1.0));
        _2013 = dot(vec3(isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0)), isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0)), isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2004) ? 0.0 : (isnan(0.0) ? _2004 : max(0.0, _2004))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2013 = 1.0;
    }
    float _2017 = (_2013 * cbModelParam._m0[1u].x) + (_2002 * (1.0 - cbModelParam._m0[1u].x));
    float _2027 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1048);
    float _2028 = isnan(_2027) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2027 : min(cbModelParam._m0[25u].z, _2027));
    float _2109;
    float _2111;
    float _2113;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2076 = fma(_1282, cbModelParam._m0[13u].z, fma(_1278, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1274)) + cbModelParam._m0[13u].w;
        float _2080 = fma(_1282, cbModelParam._m0[14u].z, fma(_1278, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1274)) + cbModelParam._m0[14u].w;
        float _2084 = fma(_1282, cbModelParam._m0[15u].z, fma(_1278, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1274)) + cbModelParam._m0[15u].w;
        float _2087 = fma(_1220, cbModelParam._m0[13u].z, fma(_1219, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1218));
        float _2090 = fma(_1220, cbModelParam._m0[14u].z, fma(_1219, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1218));
        float _2093 = fma(_1220, cbModelParam._m0[15u].z, fma(_1219, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1218));
        float _2121;
        if (_2087 > 0.0)
        {
            _2121 = abs((1.0 - _2076) / _2087);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2076 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2121 = frontier_phi_14_12_ladder;
        }
        float _2345;
        if (_2090 > 0.0)
        {
            _2345 = abs((1.0 - _2080) / _2090);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2080 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2345 = frontier_phi_23_19_ladder;
        }
        float _2602;
        if (_2093 > 0.0)
        {
            _2602 = abs((1.0 - _2084) / _2093);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2084 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2602 = frontier_phi_35_30_ladder;
        }
        float _2604 = isnan(_2345) ? _2121 : (isnan(_2121) ? _2345 : min(_2121, _2345));
        float _2605 = isnan(_2602) ? _2604 : (isnan(_2604) ? _2602 : min(_2604, _2602));
        float _2609 = (_2605 * _2087) + _2076;
        float _2610 = (_2605 * _2090) + _2080;
        float _2611 = (_2605 * _2093) + _2084;
        float _2612 = _2605 * 9.9999997473787516355514526367188e-05;
        float _2614 = (-1.0) - _2612;
        float _2616 = _2612 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2611 > _2616) || ((_2611 < _2614) || ((_2610 > _2616) || ((_2610 < _2614) || ((_2609 < _2614) || (_2609 > _2616))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2739 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2611, cbModelParam._m0[9u].z, fma(_2610, cbModelParam._m0[9u].y, _2609 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2611, cbModelParam._m0[10u].z, fma(_2610, cbModelParam._m0[10u].y, _2609 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2611, cbModelParam._m0[11u].z, fma(_2610, cbModelParam._m0[11u].y, _2609 * cbModelParam._m0[11u].x))), _2028);
            frontier_phi_13_35_ladder = _2739.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2739.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2739.x * cbModelParam._m0[1u].y;
        }
        _2109 = frontier_phi_13_35_ladder_2;
        _2111 = frontier_phi_13_35_ladder_1;
        _2113 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2097 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1218, _1219, _1220), _2028);
        _2109 = _2097.x * cbModelParam._m0[1u].y;
        _2111 = _2097.y * cbModelParam._m0[1u].y;
        _2113 = _2097.z * cbModelParam._m0[1u].y;
    }
    float _2117 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1048);
    float _2118 = isnan(_2117) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2117 : min(cbModelParam._m0[25u].w, _2117));
    float _2208;
    float _2210;
    float _2212;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2172 = fma(_1282, cbModelParam._m0[21u].z, fma(_1278, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1274)) + cbModelParam._m0[21u].w;
        float _2176 = fma(_1282, cbModelParam._m0[22u].z, fma(_1278, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1274)) + cbModelParam._m0[22u].w;
        float _2180 = fma(_1282, cbModelParam._m0[23u].z, fma(_1278, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1274)) + cbModelParam._m0[23u].w;
        float _2183 = fma(_1220, cbModelParam._m0[21u].z, fma(_1219, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1218));
        float _2186 = fma(_1220, cbModelParam._m0[22u].z, fma(_1219, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1218));
        float _2189 = fma(_1220, cbModelParam._m0[23u].z, fma(_1219, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1218));
        float _2350;
        if (_2183 > 0.0)
        {
            _2350 = abs((1.0 - _2172) / _2183);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2183 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2172 + 1.0) / _2183);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2350 = frontier_phi_25_21_ladder;
        }
        float _2629;
        if (_2186 > 0.0)
        {
            _2629 = abs((1.0 - _2176) / _2186);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2186 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2176 + 1.0) / _2186);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2629 = frontier_phi_37_32_ladder;
        }
        float _2842;
        if (_2189 > 0.0)
        {
            _2842 = abs((1.0 - _2180) / _2189);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2189 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2180 + 1.0) / _2189);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2842 = frontier_phi_46_43_ladder;
        }
        float _2844 = isnan(_2629) ? _2350 : (isnan(_2350) ? _2629 : min(_2350, _2629));
        float _2845 = isnan(_2842) ? _2844 : (isnan(_2844) ? _2842 : min(_2844, _2842));
        float _2849 = (_2845 * _2183) + _2172;
        float _2850 = (_2845 * _2186) + _2176;
        float _2851 = (_2845 * _2189) + _2180;
        float _2852 = _2845 * 9.9999997473787516355514526367188e-05;
        float _2853 = (-1.0) - _2852;
        float _2855 = _2852 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2851 > _2855) || ((_2851 < _2853) || ((_2850 > _2855) || ((_2850 < _2853) || ((_2849 < _2853) || (_2849 > _2855))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3050 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2851, cbModelParam._m0[17u].z, fma(_2850, cbModelParam._m0[17u].y, _2849 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2851, cbModelParam._m0[18u].z, fma(_2850, cbModelParam._m0[18u].y, _2849 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2851, cbModelParam._m0[19u].z, fma(_2850, cbModelParam._m0[19u].y, _2849 * cbModelParam._m0[19u].x))), _2118);
            frontier_phi_22_46_ladder = _3050.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3050.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3050.x * cbModelParam._m0[1u].z;
        }
        _2208 = frontier_phi_22_46_ladder_2;
        _2210 = frontier_phi_22_46_ladder_1;
        _2212 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2192 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1218, _1219, _1220), _2118);
        _2208 = _2192.x * cbModelParam._m0[1u].z;
        _2210 = _2192.y * cbModelParam._m0[1u].z;
        _2212 = _2192.z * cbModelParam._m0[1u].z;
    }
    float _2225 = (((_1245 * _1194) + _1246) * _1210) * ((cbModelParam._m0[1u].w * (_2208 - _2109)) + _2109);
    float _2227 = (((_1245 * _1196) + _1246) * _1210) * ((cbModelParam._m0[1u].w * (_2210 - _2111)) + _2111);
    float _2229 = (((_1245 * _1197) + _1246) * _1210) * ((cbModelParam._m0[1u].w * (_2212 - _2113)) + _2113);
    float _2232 = fma(_2229, cbSceneParam._m0[89u].z, fma(_2227, cbSceneParam._m0[89u].y, _2225 * cbSceneParam._m0[89u].x));
    float _2235 = fma(_2229, cbSceneParam._m0[90u].z, fma(_2227, cbSceneParam._m0[90u].y, _2225 * cbSceneParam._m0[90u].x));
    float _2238 = fma(_2229, cbSceneParam._m0[91u].z, fma(_2227, cbSceneParam._m0[91u].y, _2225 * cbSceneParam._m0[91u].x));
    vec4 _2246 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1132, _1133));
    float _2248 = _2246.w;
    float _2260 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2248);
    float _2261 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2248);
    float _2262 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2248);
    uvec4 _2266 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2268 = _2266.x * 14u;
    uint _2269 = _2268 + 13u;
    float _2276 = _1210 + (-1.0);
    float _2281 = (cbLight._m0[_2269].x * _2276) + 1.0;
    float _2282 = (cbLight._m0[_2269].y * _2276) + 1.0;
    float _2283 = (cbLight._m0[_2269].z * _2276) + 1.0;
    float _2284 = (cbLight._m0[_2269].w * _2276) + 1.0;
    uint _2285 = _2268 + 5u;
    float _2291 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
    uint _2295 = _2268 + 4u;
    float _2304 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
    uint _2308 = _2268 | 1u;
    float _2319 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_1045, _1046, _1047));
    float _2322 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_1045, _1046, _1047));
    float _4531 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _4542 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2327 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * 0.3183098733425140380859375;
    float _2329 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * 0.3183098733425140380859375;
    float _2336 = ((cbLight._m0[_2285].x * _2291) * _2329) + (((cbLight._m0[_2295].x * _2260) * _2304) * _2327);
    float _2337 = ((_2291 * cbLight._m0[_2285].y) * _2329) + (((cbLight._m0[_2295].y * _2261) * _2304) * _2327);
    float _2338 = ((_2291 * cbLight._m0[_2285].z) * _2329) + (((cbLight._m0[_2295].z * _2262) * _2304) * _2327);
    uvec4 _2342 = floatBitsToUint(cbLight._m0[_2268 + 12u]);
    bool _2344 = _2342.x == 0u;
    float _2355;
    float _2357;
    float _2359;
    if (_2344)
    {
        _2355 = _2336;
        _2357 = _2337;
        _2359 = _2338;
    }
    else
    {
        uint _2363 = _2268 + 6u;
        float _2379 = (dot(vec3(cbLight._m0[_2268 + 2u].xyz), vec3(_1045, _1046, _1047)) * 0.5) + 0.5;
        float _2380 = _2379 * _2379;
        float _4553 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2381 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2382 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2355 = (((cbLight._m0[_2363].x * 0.3183098733425140380859375) * _2381) * _2382) + _2336;
        _2357 = (((cbLight._m0[_2363].y * 0.3183098733425140380859375) * _2381) * _2382) + _2337;
        _2359 = (((cbLight._m0[_2363].z * 0.3183098733425140380859375) * _2381) * _2382) + _2338;
    }
    bool _2362 = _2342.y == 0u;
    float _2400;
    float _2402;
    float _2404;
    if (_2362)
    {
        _2400 = _2355;
        _2402 = _2357;
        _2404 = _2359;
    }
    else
    {
        uint _2573 = _2268 + 7u;
        float _2589 = (dot(vec3(cbLight._m0[_2268 + 3u].xyz), vec3(_1045, _1046, _1047)) * 0.5) + 0.5;
        float _2590 = _2589 * _2589;
        float _4569 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2591 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2592 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2400 = (((cbLight._m0[_2573].x * 0.3183098733425140380859375) * _2591) * _2592) + _2355;
        _2402 = (((cbLight._m0[_2573].y * 0.3183098733425140380859375) * _2591) * _2592) + _2357;
        _2404 = (((cbLight._m0[_2573].z * 0.3183098733425140380859375) * _2591) * _2592) + _2359;
    }
    uint _2407 = _2268 + 8u;
    float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _1048) * 0.949999988079071044921875);
    float _2421 = _2420 * _2420;
    float _2422 = cbLight._m0[_2268].x + _1124;
    float _2423 = cbLight._m0[_2268].y + _1125;
    float _2424 = cbLight._m0[_2268].z + _1126;
    float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
    float _2429 = _2428 * _2422;
    float _2430 = _2428 * _2423;
    float _2431 = _2428 * _2424;
    float _2432 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2268].xyz));
    float _4585 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _4596 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _2436 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2437 = dot(vec3(_1045, _1046, _1047), vec3(_2429, _2430, _2431));
    float _4607 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2441 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2429, _2430, _2431));
    float _4618 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2445 = _2421 * _2421;
    float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
    float _2457 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
    float _2458 = 0.959999978542327880859375 - _1191;
    float _2460 = 0.959999978542327880859375 - _1192;
    float _2461 = 0.959999978542327880859375 - _1193;
    float _2468 = 1.0 - _2421;
    float _2479 = (0.5 / (((_2436 * ((_2435 * _2468) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2468) + _2421) * _2435))) * _2435;
    float _4629 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
    uint _2495 = _2268 + 9u;
    float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _1048) * 0.949999988079071044921875);
    float _2507 = _2506 * _2506;
    float _2508 = cbLight._m0[_2308].x + _1124;
    float _2509 = cbLight._m0[_2308].y + _1125;
    float _2510 = cbLight._m0[_2308].z + _1126;
    float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
    float _2515 = _2514 * _2508;
    float _2516 = _2514 * _2509;
    float _2517 = _2514 * _2510;
    float _2518 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2308].xyz));
    float _4640 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2522 = dot(vec3(_1045, _1046, _1047), vec3(_2515, _2516, _2517));
    float _4651 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2525 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2526 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2515, _2516, _2517));
    float _4662 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2530 = _2507 * _2507;
    float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
    float _2541 = exp2(log2(1.0 - (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) * 5.0);
    float _2548 = 1.0 - _2507;
    float _2558 = (0.5 / (((_2436 * ((_2521 * _2548) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2548) + _2507) * _2521))) * _2521;
    float _4673 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2560 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
    float _2570 = (((((_2541 * _2458) + _1194) * cbLight._m0[_2495].x) * _2560) * _2291) + ((((cbLight._m0[_2407].x * _2260) * ((_2457 * _2458) + _1194)) * _2481) * _2304);
    float _2571 = (((((_2541 * _2460) + _1196) * cbLight._m0[_2495].y) * _2560) * _2291) + ((((cbLight._m0[_2407].y * _2261) * ((_2457 * _2460) + _1196)) * _2481) * _2304);
    float _2572 = (((((_2541 * _2461) + _1197) * cbLight._m0[_2495].z) * _2560) * _2291) + ((((cbLight._m0[_2407].z * _2262) * ((_2457 * _2461) + _1197)) * _2481) * _2304);
    float _2634;
    float _2636;
    float _2638;
    if (_2344)
    {
        _2634 = _2570;
        _2636 = _2571;
        _2638 = _2572;
    }
    else
    {
        uint _2640 = _2268 + 2u;
        uint _2644 = _2268 + 10u;
        float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2640].w)) * _1048) * 0.949999988079071044921875);
        float _2659 = _2658 * _2658;
        float _2660 = cbLight._m0[_2640].x + _1124;
        float _2661 = cbLight._m0[_2640].y + _1125;
        float _2662 = cbLight._m0[_2640].z + _1126;
        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
        float _2667 = _2666 * _2660;
        float _2668 = _2666 * _2661;
        float _2669 = _2666 * _2662;
        float _2670 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2640].xyz));
        float _4684 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2674 = dot(vec3(_1045, _1046, _1047), vec3(_2667, _2668, _2669));
        float _4695 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2678 = dot(vec3(cbLight._m0[_2640].xyz), vec3(_2667, _2668, _2669));
        float _4706 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2682 = _2659 * _2659;
        float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
        float _2693 = exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0);
        float _2700 = 1.0 - _2659;
        float _2710 = (0.5 / (((_2436 * ((_2673 * _2700) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2700) + _2659) * _2673))) * _2673;
        float _4717 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2712 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
        float _2713 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2634 = (((((_2693 * _2458) + _1194) * cbLight._m0[_2644].x) * _2712) * _2713) + _2570;
        _2636 = (((((_2693 * _2460) + _1196) * cbLight._m0[_2644].y) * _2712) * _2713) + _2571;
        _2638 = (((((_2693 * _2461) + _1197) * cbLight._m0[_2644].z) * _2712) * _2713) + _2572;
    }
    float _2748;
    float _2750;
    float _2752;
    if (_2362)
    {
        _2748 = _2634;
        _2750 = _2636;
        _2752 = _2638;
    }
    else
    {
        uint _2759 = _2268 + 3u;
        uint _2763 = _2268 + 11u;
        float _2777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2759].w)) * _1048) * 0.949999988079071044921875);
        float _2778 = _2777 * _2777;
        float _2779 = cbLight._m0[_2759].x + _1124;
        float _2780 = cbLight._m0[_2759].y + _1125;
        float _2781 = cbLight._m0[_2759].z + _1126;
        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
        float _2786 = _2785 * _2779;
        float _2787 = _2785 * _2780;
        float _2788 = _2785 * _2781;
        float _2789 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2759].xyz));
        float _4733 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2793 = dot(vec3(_1045, _1046, _1047), vec3(_2786, _2787, _2788));
        float _4744 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2797 = dot(vec3(cbLight._m0[_2759].xyz), vec3(_2786, _2787, _2788));
        float _4755 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2801 = _2778 * _2778;
        float _2805 = ((_2796 * _2796) * (_2801 + (-1.0))) + 1.0;
        float _2812 = exp2(log2(1.0 - (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) * 5.0);
        float _2819 = 1.0 - _2778;
        float _2829 = (0.5 / (((_2436 * ((_2792 * _2819) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2819) + _2778) * _2792))) * _2792;
        float _4766 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2831 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2801 / ((_2805 * _2805) * 3.141590118408203125));
        float _2832 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2748 = (((((_2812 * _2458) + _1194) * cbLight._m0[_2763].x) * _2831) * _2832) + _2634;
        _2750 = (((((_2812 * _2460) + _1196) * cbLight._m0[_2763].y) * _2831) * _2832) + _2636;
        _2752 = (((((_2812 * _2461) + _1197) * cbLight._m0[_2763].z) * _2831) * _2832) + _2638;
    }
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    float _2975;
    float _2977;
    if (_2266.y == 0u)
    {
        float _2907 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2908 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2907;
        float _2909 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2907;
        float _2910 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2907;
        uvec4 _2922 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2923 = _2922.x;
        uint _2934 = uint((float(_2922.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1133) / _2923))) + floor(float(uint(cbSceneParam._m0[85u].x * _1132) / _2923)));
        float _2944 = (log2(_2910 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2945 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        uint _2948 = uint(isnan(14.0) ? _2945 : (isnan(_2945) ? 14.0 : min(_2945, 14.0)));
        uvec4 _2953 = texelFetch(g_lightClusterGridBuffer, int(((_2948 << 2u) + (_2934 << 6u)) >> 2u));
        uint _2954 = _2953.x;
        uint _2955 = _2922.z;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((((1u << ((_2955 >> 4u) & 15u)) + 4294967295u) & _2954) == 0u) || ((_2955 & 240u) == 0u))
        {
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
        }
        else
        {
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            uint _3205 = 0u;
            uint _3214;
            bool _3215;
            for (;;)
            {
                _3214 = texelFetch(g_lightClassification, int((((_2948 << 5u) + (_2934 << 9u)) + (_3205 << 2u)) >> 2u)).x;
                _3215 = _3214 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3215)
                {
                    frontier_phi_61_pred = _3199;
                    frontier_phi_61_pred_1 = _3204;
                    frontier_phi_61_pred_2 = _3203;
                    frontier_phi_61_pred_3 = _3202;
                    frontier_phi_61_pred_4 = _3201;
                    frontier_phi_61_pred_5 = _3200;
                }
                else
                {
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    uint _3329;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3202;
                    _3327 = _3203;
                    _3328 = _3204;
                    _3329 = _3214;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    for (;;)
                    {
                        uint _3333 = uint(findLSB(_3329)) + (_3205 << 5u);
                        uint _3330 = (_3329 + 4294967295u) & _3329;
                        uint _3335 = _3333 * 48u;
                        vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 3u)).x));
                        uint _3355 = (_3333 * 48u) + 4u;
                        vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 3u)).x));
                        uint _3374 = (_3333 * 48u) + 8u;
                        vec3 _3385 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3374)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 2u)).x));
                        float _3389 = _3349.x - _2908;
                        float _3390 = _3349.y - _2909;
                        float _3391 = _3349.z - _2910;
                        float _3392 = dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391));
                        float _3395 = inversesqrt(_3392);
                        float _3396 = _3395 * _3389;
                        float _3397 = _3395 * _3390;
                        float _3398 = _3395 * _3391;
                        float _3399 = dot(vec3(_1151, _1154, _1157), vec3(_3396, _3397, _3398));
                        float _3404 = 1.0 - (_3392 * _3349.w);
                        float _4792 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3405 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3406 = sqrt(_3392) * _3368.w;
                        float _3409 = 1.39999997615814208984375 / (_3406 + 1.39999997615814208984375);
                        float _3410 = _3409 * _3409;
                        float _3413 = ((1.0 - _3410) * _3399) + _3410;
                        float _3416 = _3406 * _3406;
                        float _3420 = ((isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0))) * _3405) / ((_3416 * 0.699999988079071044921875) + 1.0);
                        float _3424 = (-0.0) - _2908;
                        float _3425 = (-0.0) - _2909;
                        float _3426 = (-0.0) - _2910;
                        float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                        float _3431 = _3430 * _3424;
                        float _3432 = _3430 * _3425;
                        float _3433 = _3430 * _3426;
                        float _3441 = exp2(log2(1.0 / ((_3416 * 3.5) + 5.0)) * 0.25);
                        float _3442 = 1.0 - _1226;
                        float _3449 = sqrt(1.0 - ((1.0 - (_3442 * _3442)) * (1.0 - (_3441 * _3441))));
                        float _3450 = _3449 * _3449;
                        float _3451 = _3450 * _3450;
                        float _3452 = _3431 + _3396;
                        float _3453 = _3432 + _3397;
                        float _3454 = _3433 + _3398;
                        float _3458 = inversesqrt(dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454)));
                        float _3462 = dot(vec3(_1151, _1154, _1157), vec3(_3431, _3432, _3433));
                        float _4808 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3465 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3466 = dot(vec3(_1151, _1154, _1157), vec3(_3458 * _3452, _3458 * _3453, _3458 * _3454));
                        float _4819 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3469 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3473 = ((_3469 * _3469) * (_3451 + (-1.0))) + 1.0;
                        float _3474 = _3409 * _3450;
                        float _3475 = _3474 * _3474;
                        float _3478 = ((1.0 - _3475) * _3399) + _3475;
                        float _4830 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3479 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3480 = 1.0 - _3450;
                        float _3490 = (0.5 / (((_3479 * ((_3465 * _3480) + _3450)) + 9.9999999392252902907785028219223e-09) + (((_3479 * _3480) + _3450) * _3465))) * _3479;
                        float _4841 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3501 = (((_3451 * 3.1415927410125732421875) * (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) / ((_3473 * _3473) * ((_3416 * 2.1991131305694580078125) + 3.141590118408203125))) * _3405;
                        _3258 = (_3420 * _3368.x) + _3326;
                        _3259 = (_3420 * _3368.y) + _3327;
                        _3260 = (_3420 * _3368.z) + _3328;
                        _3255 = (_3501 * _3385.x) + _3323;
                        _3256 = (_3501 * _3385.y) + _3324;
                        _3257 = (_3501 * _3385.z) + _3325;
                        if (_3330 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3258;
                            _3327 = _3259;
                            _3328 = _3260;
                            _3329 = _3330;
                        }
                    }
                    frontier_phi_61_pred = _3255;
                    frontier_phi_61_pred_1 = _3260;
                    frontier_phi_61_pred_2 = _3259;
                    frontier_phi_61_pred_3 = _3258;
                    frontier_phi_61_pred_4 = _3257;
                    frontier_phi_61_pred_5 = _3256;
                }
                _3056 = frontier_phi_61_pred;
                _3066 = frontier_phi_61_pred_1;
                _3064 = frontier_phi_61_pred_2;
                _3062 = frontier_phi_61_pred_3;
                _3060 = frontier_phi_61_pred_4;
                _3058 = frontier_phi_61_pred_5;
                uint _3206 = _3205 + 1u;
                if (_3206 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3199 = _3056;
                    _3200 = _3058;
                    _3201 = _3060;
                    _3202 = _3062;
                    _3203 = _3064;
                    _3204 = _3066;
                    _3205 = _3206;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
        }
        uvec4 _3069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3070 = _3069.z;
        uint _3072 = (_3070 >> 8u) & 15u;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        if (((4294967295u << _3072) & _2954) == 0u)
        {
            _3167 = _3055;
            _3169 = _3057;
            _3171 = _3059;
            _3173 = _3061;
            _3175 = _3063;
            _3177 = _3065;
        }
        else
        {
            float _3192 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
            float _3193 = _3192 * _2908;
            float _3194 = _3192 * _2909;
            float _3195 = _3192 * _2910;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3072 < ((_3070 >> 12u) & 15u))
            {
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3306 = _3055;
                float _3307 = _3057;
                float _3308 = _3059;
                float _3309 = _3061;
                float _3310 = _3063;
                float _3311 = _3065;
                uint _3312 = _3072;
                uint _3321;
                bool _3322;
                for (;;)
                {
                    _3321 = texelFetch(g_lightClassification, int((((_2948 << 5u) + (_2934 << 9u)) + (_3312 << 2u)) >> 2u)).x;
                    _3322 = _3321 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3322)
                    {
                        frontier_phi_67_pred = _3309;
                        frontier_phi_67_pred_1 = _3310;
                        frontier_phi_67_pred_2 = _3311;
                        frontier_phi_67_pred_3 = _3308;
                        frontier_phi_67_pred_4 = _3307;
                        frontier_phi_67_pred_5 = _3306;
                    }
                    else
                    {
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3519 = _3306;
                        float _3520 = _3307;
                        float _3521 = _3308;
                        float _3522 = _3309;
                        float _3523 = _3310;
                        float _3524 = _3311;
                        uint _3525 = _3321;
                        uint _3526;
                        vec4 _3551;
                        float _3552;
                        vec4 _3567;
                        vec3 _3579;
                        vec4 _3594;
                        vec4 _3609;
                        float _3655;
                        bool _3656;
                        for (;;)
                        {
                            uint _3536 = ((_3312 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3525));
                            _3526 = (_3525 + 4294967295u) & _3525;
                            uint _3538 = _3536 * 40u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            _3552 = _3551.w;
                            uint _3554 = (_3536 * 40u) + 4u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3536 * 40u) + 8u;
                            _3579 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x));
                            uint _3581 = (_3536 * 40u) + 16u;
                            _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3596 = (_3536 * 40u) + 20u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3536 * 40u) + 24u;
                            vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3630 = (_3536 * 40u) + 28u;
                            vec4 _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            _3655 = fma(_2910, _3643.z, fma(_2909, _3643.y, _3643.x * _2908)) + _3643.w;
                            _3656 = !((fma(_2910, _3624.z, fma(_2909, _3624.y, _3624.x * _2908)) + _3624.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3656)
                            {
                                float _3683 = _3551.x - _2908;
                                float _3684 = _3551.y - _2909;
                                float _3685 = _3551.z - _2910;
                                float _3686 = dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685));
                                float _3689 = inversesqrt(_3686);
                                float _3690 = _3689 * _3683;
                                float _3691 = _3689 * _3684;
                                float _3692 = _3689 * _3685;
                                float _3696 = 1.0 - (_3686 / (_3552 * _3552));
                                float _4852 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3697 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3701 = sqrt(_3686) * _3567.w;
                                float _3703 = 1.39999997615814208984375 / (_3701 + 1.39999997615814208984375);
                                float _3704 = _3703 * _3703;
                                float _3707 = ((1.0 - _3704) * dot(vec3(_3690, _3691, _3692), vec3(_1151, _1154, _1157))) + _3704;
                                float _3710 = _3701 * _3701;
                                float _3714 = (fma(_2910, _3594.z, fma(_2909, _3594.y, _3594.x * _2908)) + _3594.w) / _3655;
                                float _3715 = (fma(_2910, _3609.z, fma(_2909, _3609.y, _3609.x * _2908)) + _3609.w) / _3655;
                                float _3719 = 1.0 - dot(vec2(_3714, _3715), vec2(_3714, _3715));
                                float _4868 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3721 = _3720 * (((isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0))) * _3697) / ((_3710 * 0.699999988079071044921875) + 1.0));
                                float _3733 = exp2(log2(1.0 / ((_3710 * 3.5) + 5.0)) * 0.25);
                                float _3734 = 1.0 - _1226;
                                float _3741 = sqrt(1.0 - ((1.0 - (_3734 * _3734)) * (1.0 - (_3733 * _3733))));
                                float _3742 = _3741 * _3741;
                                float _3743 = _3742 * _3742;
                                float _3744 = _3690 - _3193;
                                float _3745 = _3691 - _3194;
                                float _3746 = _3692 - _3195;
                                float _3750 = inversesqrt(dot(vec3(_3744, _3745, _3746), vec3(_3744, _3745, _3746)));
                                float _3754 = dot(vec3(_1151, _1154, _1157), vec3((-0.0) - _3193, (-0.0) - _3194, (-0.0) - _3195));
                                float _4879 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3757 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3758 = dot(vec3(_1151, _1154, _1157), vec3(_3750 * _3744, _3750 * _3745, _3750 * _3746));
                                float _4890 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3761 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3765 = ((_3761 * _3761) * (_3743 + (-1.0))) + 1.0;
                                float _3766 = _3703 * _3742;
                                float _3767 = _3766 * _3766;
                                float _3773 = ((1.0 - _3767) * dot(vec3(_1151, _1154, _1157), vec3(_3690, _3691, _3692))) + _3767;
                                float _4901 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3774 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3775 = 1.0 - _3742;
                                float _3785 = (0.5 / (((_3774 * ((_3757 * _3775) + _3742)) + 9.9999999392252902907785028219223e-09) + (((_3774 * _3775) + _3742) * _3757))) * _3774;
                                float _4912 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3795 = (_3720 * _3697) * (((_3743 * 3.1415927410125732421875) * (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0)))) / ((_3765 * _3765) * ((_3710 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3795 * _3579.x;
                                frontier_phi_73_pred_1 = _3795 * _3579.y;
                                frontier_phi_73_pred_2 = _3721 * _3567.z;
                                frontier_phi_73_pred_3 = _3721 * _3567.y;
                                frontier_phi_73_pred_4 = _3721 * _3567.x;
                                frontier_phi_73_pred_5 = _3795 * _3579.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3799 = frontier_phi_73_pred;
                            _3800 = frontier_phi_73_pred_1;
                            _3804 = frontier_phi_73_pred_2;
                            _3803 = frontier_phi_73_pred_3;
                            _3802 = frontier_phi_73_pred_4;
                            _3801 = frontier_phi_73_pred_5;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            _3508 = _3801 + _3521;
                            if (_3526 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3526;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3509;
                        frontier_phi_67_pred_1 = _3510;
                        frontier_phi_67_pred_2 = _3511;
                        frontier_phi_67_pred_3 = _3508;
                        frontier_phi_67_pred_4 = _3507;
                        frontier_phi_67_pred_5 = _3506;
                    }
                    _3174 = frontier_phi_67_pred;
                    _3176 = frontier_phi_67_pred_1;
                    _3178 = frontier_phi_67_pred_2;
                    _3172 = frontier_phi_67_pred_3;
                    _3170 = frontier_phi_67_pred_4;
                    _3168 = frontier_phi_67_pred_5;
                    uint _3313 = _3312 + 1u;
                    if (_3313 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3306 = _3168;
                        _3307 = _3170;
                        _3308 = _3172;
                        _3309 = _3174;
                        _3310 = _3176;
                        _3311 = _3178;
                        _3312 = _3313;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3176;
                frontier_phi_55_56_ladder_1 = _3178;
                frontier_phi_55_56_ladder_2 = _3174;
                frontier_phi_55_56_ladder_3 = _3172;
                frontier_phi_55_56_ladder_4 = _3170;
                frontier_phi_55_56_ladder_5 = _3168;
            }
            else
            {
                frontier_phi_55_56_ladder = _3063;
                frontier_phi_55_56_ladder_1 = _3065;
                frontier_phi_55_56_ladder_2 = _3061;
                frontier_phi_55_56_ladder_3 = _3059;
                frontier_phi_55_56_ladder_4 = _3057;
                frontier_phi_55_56_ladder_5 = _3055;
            }
            _3167 = frontier_phi_55_56_ladder_5;
            _3169 = frontier_phi_55_56_ladder_4;
            _3171 = frontier_phi_55_56_ladder_3;
            _3173 = frontier_phi_55_56_ladder_2;
            _3175 = frontier_phi_55_56_ladder;
            _3177 = frontier_phi_55_56_ladder_1;
        }
        float _3182 = isnan(1.0) ? _1210 : (isnan(_1210) ? 1.0 : min(_1210, 1.0));
        _2967 = (_3182 * _3173) + _2400;
        _2969 = (_3182 * _3175) + _2402;
        _2971 = (_3182 * _3177) + _2404;
        _2973 = ((_3167 * _1194) * _3182) + _2748;
        _2975 = ((_3169 * _1196) * _3182) + _2750;
        _2977 = ((_3171 * _1197) * _3182) + _2752;
    }
    else
    {
        _2967 = _2400;
        _2969 = _2402;
        _2971 = _2404;
        _2973 = _2748;
        _2975 = _2750;
        _2977 = _2752;
    }
    float _4928 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _4939 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _4950 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    uint _2997 = _291 + 6u;
    float _3005 = _1132 / cbSceneParam._m0[86u].x;
    float _3006 = _1133 / cbSceneParam._m0[86u].y;
    vec4 _3020 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3005, _3006, (log2((isnan(cbSceneParam._m0[77u].w) ? _1067 : (isnan(_1067) ? cbSceneParam._m0[77u].w : min(_1067, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3022 = _3020.x;
    float _3023 = _3020.y;
    float _3024 = _3020.z;
    float _3025 = _3020.w;
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    if (_1067 > cbSceneParam._m0[78u].w)
    {
        float _3080 = isnan(_1067) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1067 : min(cbSceneParam._m0[80u].w, _1067));
        float _3081 = _3080 / _1067;
        float _3092 = _3081 * _1117;
        float _3093 = _1118 * _3081;
        float _3094 = (-0.0) - _3093;
        float _3095 = _3081 * _1119;
        float _3097 = (cbSceneParam._m0[77u].w * _3094) / _3080;
        float _3098 = _3097 + cbSceneParam._m0[79u].w;
        float _3099 = cbSceneParam._m0[79u].w - _3093;
        float _3105 = sqrt(((_3092 * _3092) + (_3093 * _3093)) + (_3095 * _3095));
        float _3108 = (1.0 - (cbSceneParam._m0[77u].w / _3080)) * _3105;
        float _3113 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3115 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3268;
        if (abs((_3094 - _3097) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3268 = ((((_3098 > 0.0) ? exp2(_3113 * _3098) : (2.0 - exp2(_3115 * _3098))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3108;
        }
        else
        {
            float _3228 = 1.0 / cbSceneParam._m0[80u].x;
            float _3229 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : max(_3098, _3099));
            float _3230 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : min(_3098, _3099));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            float _3240 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : min(_3230, 0.0));
            _3268 = ((abs(_3105 / _3094) * cbSceneParam._m0[80u].y) * ((((_3239 - _3240) * 2.0) - ((exp2(_3113 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0)))) - exp2(_3113 * (isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))))) * _3228)) - ((exp2(_3115 * _3239) - exp2(_3115 * _3240)) * _3228))) + (_3108 * cbSceneParam._m0[80u].z);
        }
        vec4 _3270 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3005, _3006, 1.0), 0.0);
        float _3279 = exp2((_3268 * (-1.44269502162933349609375)) * (1.0 - _3270.w));
        float _3280 = log2(_3279);
        float _3296 = log2(_3025);
        _3117 = (exp2(_3296 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].x)) * _3270.x) / cbSceneParam._m0[78u].x)) + _3022;
        _3119 = (exp2(_3296 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].y)) * _3270.y) / cbSceneParam._m0[78u].y)) + _3023;
        _3121 = (exp2(_3296 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].z)) * _3270.z) / cbSceneParam._m0[78u].z)) + _3024;
        _3123 = _3279 * _3025;
    }
    else
    {
        _3117 = _3022;
        _3119 = _3023;
        _3121 = _3024;
        _3123 = _3025;
    }
    float _3135 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3136 = _3135 == 3.0;
    float _3137 = log2(_3123);
    float _3144 = exp2(_3137 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2967 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1210))) + ((_2973 + ((isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0))) * _2017)) * cbPerFrame._m0[3u].x));
    float _3145 = exp2(_3137 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2969 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1210))) + ((_2975 + ((isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0))) * _2017)) * cbPerFrame._m0[3u].x));
    float _3146 = exp2(_3137 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2971 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1210))) + ((_2977 + ((isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0))) * _2017)) * cbPerFrame._m0[3u].x));
    float _3155 = (_3135 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3155 * (_3136 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3117)));
    SV_Target.y = _3155 * (_3136 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3119)));
    SV_Target.z = _3155 * (_3136 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3121)));
    SV_Target.w = cbInstanceData._m0[_2997].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2997].w;
}


