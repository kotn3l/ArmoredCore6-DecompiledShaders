#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1350;
float _3729;
float _3730;
float _3731;
float _3732;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3741 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3752 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3763 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[23u].w) + _419) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3774 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _444 = (_437 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _445 = (_437 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _446 = (_437 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    float _450 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _444;
    float _453 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _445;
    float _456 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _446;
    float _463 = ((_444 - _450) * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) + _450;
    float _464 = ((_445 - _453) * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) + _453;
    float _465 = ((_446 - _456) * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) + _456;
    vec4 _484 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _293) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _294) + cbTextureTilingScale._m0[14u].w));
    vec4 _504 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _548 = _546.x;
    float _549 = _546.y;
    float _550 = _546.z;
    float _559 = ((_529.z - _550) * _437) + _550;
    float _562 = ((((_529.x - _548) * _437) + _548) * 2.0) + (-1.0);
    float _563 = ((((_529.y - _549) * _437) + _549) * 2.0) + (-1.0);
    float _564 = dot(vec2(_562, _563), vec2(_562, _563));
    float _3785 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _569 = sqrt(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))));
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _610 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _612 = _610.x;
    float _613 = 1.0 - _612;
    float _629 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_612 - _613) * cbMtdParam._m0[24u].z) + _613) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3796 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _637 = (_630 * ((_484.x * cbMtdParam._m0[18u].x) - _463)) + _463;
    float _638 = (_630 * ((_484.y * cbMtdParam._m0[18u].y) - _464)) + _464;
    float _639 = (_630 * ((_484.z * cbMtdParam._m0[18u].z) - _465)) + _465;
    vec4 _651 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _667 = _665.x;
    float _685 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _667) * _437) + _667;
    float _689 = ((_651.x - _685) * cbMtdParam._m0[19u].z) + _685;
    float _691 = _689 - (_689 * _630);
    float _696 = (((_504.z - _559) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _559;
    float _700 = ((_585.z - _696) * cbMtdParam._m0[19u].w) + _696;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _720 = (_713.x * 2.0) + (-1.0);
    float _721 = (_713.y * 2.0) + (-1.0);
    float _722 = dot(vec2(_720, _721), vec2(_720, _721));
    float _3807 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _730 = (_630 * (_713.z - _700)) + _700;
    float _739 = (_562 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_504.x * 2.0) + (-1.0)))) + (((_585.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _740 = (_563 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_504.y * 2.0) + (-1.0)))) + (((_585.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _752 = (((_720 - _739) + (cbMtdParam._m0[21u].x * _739)) * _630) + _739;
    float _753 = (((_721 - _740) + (cbMtdParam._m0[21u].x * _740)) * _630) + _740;
    float _754 = (_630 * (sqrt(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) - _569)) + _569;
    float _756 = cbMtdParam._m0[22u].x + _585.w;
    float _759 = fma(_754, _240 * NORMAL.x, fma(_753, _247 * TANGENT.x, (_233 * _225) * _752));
    float _762 = fma(_754, _240 * NORMAL.y, fma(_753, _247 * TANGENT.y, (_233 * _226) * _752));
    float _765 = fma(_754, _240 * NORMAL.z, fma(_753, _247 * TANGENT.z, (_233 * _227) * _752));
    float _769 = inversesqrt(dot(vec3(_759, _762, _765), vec3(_759, _762, _765)));
    float _770 = _769 * _759;
    float _771 = _769 * _762;
    float _772 = _769 * _765;
    float _3818 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _773 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _3840 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3851 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3862 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3873 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _778 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _792 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _843 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _833);
    float _844 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _833);
    float _845 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _833);
    float _849 = inversesqrt(dot(vec3(_843, _844, _845), vec3(_843, _844, _845)));
    float _850 = _843 * _849;
    float _851 = _844 * _849;
    float _852 = _845 * _849;
    vec4 _857 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _859 = _857.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1031 = sqrt(((_843 * _843) + (_844 * _844)) + (_845 * _845));
        float _1037 = (cbMatDynParam._m0[5u].x * _1031) + cbMatDynParam._m0[5u].y;
        float _3884 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1042 = (cbMatDynParam._m0[5u].z * _1031) + cbMatDynParam._m0[5u].w;
        float _3895 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) - _1038)) + _1038) < ((_859 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _870 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _871 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _889 = fma(_772, cbSceneParam._m0[5u].z, fma(_771, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _770));
    float _892 = fma(_772, cbSceneParam._m0[6u].z, fma(_771, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _770));
    float _895 = fma(_772, cbSceneParam._m0[7u].z, fma(_771, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _770));
    uint _908 = _274 + 9u;
    uint _909 = _908 + uint(cbMatDynParam._m0[0u].w);
    float _915 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) * cbInstanceData._m0[_909].x;
    float _916 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * cbInstanceData._m0[_909].y;
    float _917 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_909].z;
    float _3906 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _921 = 1.0 - _778;
    float _922 = _918 * _921;
    float _923 = _919 * _921;
    float _924 = _920 * _921;
    float _929 = (_918 + (-0.039999999105930328369140625)) * _778;
    float _930 = (_919 + (-0.039999999105930328369140625)) * _778;
    float _931 = (_920 + (-0.039999999105930328369140625)) * _778;
    float _932 = _929 + 0.039999999105930328369140625;
    float _934 = _930 + 0.039999999105930328369140625;
    float _935 = _931 + 0.039999999105930328369140625;
    vec4 _944 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _870, cbSceneParam._m0[86u].y * _871));
    float _948 = ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * TEXCOORD_5.w) * _944.x;
    float _949 = dot(vec3(_770, _771, _772), vec3(_850, _851, _852));
    float _952 = _949 * 2.0;
    float _956 = (_952 * _770) - _850;
    float _957 = (_952 * _771) - _851;
    float _958 = (_952 * _772) - _852;
    float _962 = abs(dot(vec3(_850, _851, _852), vec3(_770, _771, _772)));
    float _3939 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _964 = sqrt(_773);
    float _977 = exp2((_964 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_964 * 3.0));
    float _983 = (1.0 - _977) * ((_964 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _984 = _977 * _964;
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1349;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1074 = fma(_1020, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012));
        float _1078 = fma(_1020, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012));
        float _1082 = fma(_1020, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012));
        float _1107 = _1012 + _770;
        float _1108 = _1016 + _771;
        float _1109 = _1020 + _772;
        float _1119 = fma(_1109, cbModelParam._m0[26u].z, fma(_1108, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1107)) - _1074;
        float _1120 = fma(_1109, cbModelParam._m0[27u].z, fma(_1108, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1107)) - _1078;
        float _1121 = fma(_1109, cbModelParam._m0[28u].z, fma(_1108, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1107)) - _1082;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1074 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1078 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[34u].z) + ((((((_1082 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1177 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1143.x + (-0.5));
        float _1179 = _1177 * (_1143.y + (-0.5));
        float _1180 = _1177 * (_1143.z + (-0.5));
        float _1187 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1150.x + (-0.5));
        float _1189 = _1187 * (_1150.y + (-0.5));
        float _1190 = _1187 * (_1150.z + (-0.5));
        float _1197 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1157.x + (-0.5));
        float _1199 = _1197 * (_1157.y + (-0.5));
        float _1200 = _1197 * (_1157.z + (-0.5));
        float _1207 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1164.x + (-0.5));
        float _1209 = _1207 * (_1164.y + (-0.5));
        float _1210 = _1207 * (_1164.z + (-0.5));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = _1178 * 0.5;
        float _1215 = _1188 * 0.5;
        float _1216 = _1198 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1231 = (dot(vec3(_770, _771, _772), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1241 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3987 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1243 + 1.0))) + _1248) * _1211;
        float _1258 = _1179 * 0.5;
        float _1259 = _1189 * 0.5;
        float _1260 = _1199 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_770, _771, _772), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4020 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1285 + 1.0))) + _1290) * _1212;
        float _1300 = _1180 * 0.5;
        float _1301 = _1190 * 0.5;
        float _1302 = _1200 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_770, _771, _772), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4053 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1327 + 1.0))) + _1332) * _1213;
        _1349 = _1180;
        _1351 = _1179;
        _1352 = _1178;
        _1353 = _1190;
        _1354 = _1189;
        _1355 = _1188;
        _1356 = _1200;
        _1357 = _1199;
        _1358 = _1198;
        _1359 = _1213;
        _1360 = _1212;
        _1361 = _1211;
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
    }
    else
    {
        _1349 = _1350;
        _1351 = _1350;
        _1352 = _1350;
        _1353 = _1350;
        _1354 = _1350;
        _1355 = _1350;
        _1356 = _1350;
        _1357 = _1350;
        _1358 = _1350;
        _1359 = _1350;
        _1360 = _1350;
        _1361 = _1350;
        _1362 = 0.0;
        _1363 = 0.0;
        _1364 = 0.0;
    }
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1392 = fma(_1020, cbModelParam._m0[30u].z, fma(_1016, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1012));
        float _1396 = fma(_1020, cbModelParam._m0[31u].z, fma(_1016, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1012));
        float _1400 = fma(_1020, cbModelParam._m0[32u].z, fma(_1016, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1012));
        float _1423 = _1012 + _770;
        float _1424 = _1016 + _771;
        float _1425 = _1020 + _772;
        float _1435 = fma(_1425, cbModelParam._m0[30u].z, fma(_1424, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1423)) - _1392;
        float _1436 = fma(_1425, cbModelParam._m0[31u].z, fma(_1424, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1423)) - _1396;
        float _1437 = fma(_1425, cbModelParam._m0[32u].z, fma(_1424, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1423)) - _1400;
        float _1441 = inversesqrt(dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437)));
        float _1454 = ((_1441 * _1435) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1392 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1455 = ((_1441 * _1436) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1396 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1441 * _1437) / cbModelParam._m0[35u].z) + ((((((_1400 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        float _1491 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1458.x + (-0.5));
        float _1493 = _1491 * (_1458.y + (-0.5));
        float _1494 = _1491 * (_1458.z + (-0.5));
        float _1501 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1465.x + (-0.5));
        float _1503 = _1501 * (_1465.y + (-0.5));
        float _1504 = _1501 * (_1465.z + (-0.5));
        float _1511 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1472.x + (-0.5));
        float _1513 = _1511 * (_1472.y + (-0.5));
        float _1514 = _1511 * (_1472.z + (-0.5));
        float _1521 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1479.x + (-0.5));
        float _1523 = _1521 * (_1479.y + (-0.5));
        float _1524 = _1521 * (_1479.z + (-0.5));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = _1492 * 0.5;
        float _1529 = _1502 * 0.5;
        float _1530 = _1512 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_770, _771, _772), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4116 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1555 + 1.0))) + _1560) * _1525;
        float _1570 = _1493 * 0.5;
        float _1571 = _1503 * 0.5;
        float _1572 = _1513 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_770, _771, _772), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4149 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1597 + 1.0))) + _1602) * _1526;
        float _1612 = _1494 * 0.5;
        float _1613 = _1504 * 0.5;
        float _1614 = _1514 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_770, _771, _772), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4182 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1639 + 1.0))) + _1644) * _1527;
        _1661 = _1494;
        _1662 = _1493;
        _1663 = _1492;
        _1664 = _1504;
        _1665 = _1503;
        _1666 = _1502;
        _1667 = _1514;
        _1668 = _1513;
        _1669 = _1512;
        _1670 = _1527;
        _1671 = _1526;
        _1672 = _1525;
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
    }
    else
    {
        _1661 = _1350;
        _1662 = _1350;
        _1663 = _1350;
        _1664 = _1350;
        _1665 = _1350;
        _1666 = _1350;
        _1667 = _1350;
        _1668 = _1350;
        _1669 = _1350;
        _1670 = _1350;
        _1671 = _1350;
        _1672 = _1350;
        _1673 = 0.0;
        _1674 = 0.0;
        _1675 = 0.0;
    }
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1362)) + _1362;
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1363)) + _1363;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1364)) + _1364;
    float _1708 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1686, cbSceneParam._m0[89u].y, _1685 * cbSceneParam._m0[89u].x));
    float _1711 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1686, cbSceneParam._m0[90u].y, _1685 * cbSceneParam._m0[90u].x));
    float _1714 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1686, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1685));
    float _1729 = _956 * 0.5;
    float _1730 = _957 * 0.5;
    float _1731 = _958 * 0.5;
    float _1732 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1735 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1738 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1772;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1745 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1349, _1353, _1356, _1359));
        float _1749 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1351, _1354, _1357, _1360));
        float _1753 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1352, _1355, _1358, _1361));
        float _1760 = dot(vec4(cbModelParam._m0[39u]), vec4(_1729, _1730, _1731, 1.0));
        _1772 = dot(vec3(isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1760) ? 0.0 : (isnan(0.0) ? _1760 : max(0.0, _1760))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1772 = 1.0;
    }
    float _1783;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1774 = dot(vec4(cbModelParam._m0[40u]), vec4(_1729, _1730, _1731, 1.0));
        _1783 = dot(vec3(isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1783 = 1.0;
    }
    float _1787 = (_1783 * cbModelParam._m0[1u].x) + (_1772 * (1.0 - cbModelParam._m0[1u].x));
    float _1797 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _773);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1797 : min(cbModelParam._m0[25u].z, _1797));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1845 = fma(_1020, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012)) + cbModelParam._m0[13u].w;
        float _1849 = fma(_1020, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012)) + cbModelParam._m0[14u].w;
        float _1853 = fma(_1020, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012)) + cbModelParam._m0[15u].w;
        float _1856 = fma(_958, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956));
        float _1859 = fma(_958, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956));
        float _1862 = fma(_958, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956));
        float _1890;
        if (_1856 > 0.0)
        {
            _1890 = abs((1.0 - _1845) / _1856);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1845 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1890 = frontier_phi_17_15_ladder;
        }
        float _2092;
        if (_1859 > 0.0)
        {
            _2092 = abs((1.0 - _1849) / _1859);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1849 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2092 = frontier_phi_26_22_ladder;
        }
        float _2346;
        if (_1862 > 0.0)
        {
            _2346 = abs((1.0 - _1853) / _1862);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1853 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2346 = frontier_phi_38_33_ladder;
        }
        float _2348 = isnan(_2092) ? _1890 : (isnan(_1890) ? _2092 : min(_1890, _2092));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1856) + _1845;
        float _2354 = (_2349 * _1859) + _1849;
        float _2355 = (_2349 * _1862) + _1853;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2358 = (-1.0) - _2356;
        float _2360 = _2356 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2355 > _2360) || ((_2355 < _2358) || ((_2354 > _2360) || ((_2354 < _2358) || ((_2353 < _2358) || (_2353 > _2360))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2483 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2355, cbModelParam._m0[9u].z, fma(_2354, cbModelParam._m0[9u].y, _2353 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2355, cbModelParam._m0[10u].z, fma(_2354, cbModelParam._m0[10u].y, _2353 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2355, cbModelParam._m0[11u].z, fma(_2354, cbModelParam._m0[11u].y, _2353 * cbModelParam._m0[11u].x))), _1798);
            frontier_phi_16_38_ladder = _2483.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2483.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2483.x * cbModelParam._m0[1u].y;
        }
        _1878 = frontier_phi_16_38_ladder_2;
        _1880 = frontier_phi_16_38_ladder_1;
        _1882 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_956, _957, _958), _1798);
        _1878 = _1866.x * cbModelParam._m0[1u].y;
        _1880 = _1866.y * cbModelParam._m0[1u].y;
        _1882 = _1866.z * cbModelParam._m0[1u].y;
    }
    float _1886 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _773);
    float _1887 = isnan(_1886) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1886 : min(cbModelParam._m0[25u].w, _1886));
    float _1976;
    float _1978;
    float _1980;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1940 = fma(_1020, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012)) + cbModelParam._m0[21u].w;
        float _1944 = fma(_1020, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012)) + cbModelParam._m0[22u].w;
        float _1948 = fma(_1020, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012)) + cbModelParam._m0[23u].w;
        float _1951 = fma(_958, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956));
        float _1954 = fma(_958, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956));
        float _1957 = fma(_958, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956));
        float _2097;
        if (_1951 > 0.0)
        {
            _2097 = abs((1.0 - _1940) / _1951);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1940 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2097 = frontier_phi_28_24_ladder;
        }
        float _2373;
        if (_1954 > 0.0)
        {
            _2373 = abs((1.0 - _1944) / _1954);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1944 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2373 = frontier_phi_40_35_ladder;
        }
        float _2586;
        if (_1957 > 0.0)
        {
            _2586 = abs((1.0 - _1948) / _1957);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1948 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2586 = frontier_phi_49_46_ladder;
        }
        float _2588 = isnan(_2373) ? _2097 : (isnan(_2097) ? _2373 : min(_2097, _2373));
        float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
        float _2593 = (_2589 * _1951) + _1940;
        float _2594 = (_2589 * _1954) + _1944;
        float _2595 = (_2589 * _1957) + _1948;
        float _2596 = _2589 * 9.9999997473787516355514526367188e-05;
        float _2597 = (-1.0) - _2596;
        float _2599 = _2596 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2595 > _2599) || ((_2595 < _2597) || ((_2594 > _2599) || ((_2594 < _2597) || ((_2593 < _2597) || (_2593 > _2599))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2595, cbModelParam._m0[17u].z, fma(_2594, cbModelParam._m0[17u].y, _2593 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2595, cbModelParam._m0[18u].z, fma(_2594, cbModelParam._m0[18u].y, _2593 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2595, cbModelParam._m0[19u].z, fma(_2594, cbModelParam._m0[19u].y, _2593 * cbModelParam._m0[19u].x))), _1887);
            frontier_phi_25_49_ladder = _2794.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2794.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2794.x * cbModelParam._m0[1u].z;
        }
        _1976 = frontier_phi_25_49_ladder_2;
        _1978 = frontier_phi_25_49_ladder_1;
        _1980 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1960 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_956, _957, _958), _1887);
        _1976 = _1960.x * cbModelParam._m0[1u].z;
        _1978 = _1960.y * cbModelParam._m0[1u].z;
        _1980 = _1960.z * cbModelParam._m0[1u].z;
    }
    float _1993 = (((_983 * _932) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1976 - _1878)) + _1878);
    float _1995 = (((_983 * _934) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1978 - _1880)) + _1880);
    float _1997 = (((_983 * _935) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1980 - _1882)) + _1882);
    float _2000 = fma(_1997, cbSceneParam._m0[89u].z, fma(_1995, cbSceneParam._m0[89u].y, _1993 * cbSceneParam._m0[89u].x));
    float _2003 = fma(_1997, cbSceneParam._m0[90u].z, fma(_1995, cbSceneParam._m0[90u].y, _1993 * cbSceneParam._m0[90u].x));
    float _2006 = fma(_1997, cbSceneParam._m0[91u].z, fma(_1995, cbSceneParam._m0[91u].y, _1993 * cbSceneParam._m0[91u].x));
    uvec4 _2016 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2018 = _2016.x * 14u;
    uint _2019 = _2018 + 13u;
    float _2026 = _948 + (-1.0);
    float _2031 = (cbLight._m0[_2019].x * _2026) + 1.0;
    float _2032 = (cbLight._m0[_2019].y * _2026) + 1.0;
    float _2033 = (cbLight._m0[_2019].z * _2026) + 1.0;
    float _2034 = (cbLight._m0[_2019].w * _2026) + 1.0;
    uint _2035 = _2018 + 5u;
    float _2041 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2045 = _2018 + 4u;
    float _2051 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2055 = _2018 | 1u;
    float _2066 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_770, _771, _772));
    float _2069 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_770, _771, _772));
    float _4318 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _4329 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2074 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * 0.3183098733425140380859375;
    float _2076 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * 0.3183098733425140380859375;
    float _2083 = ((cbLight._m0[_2035].x * _2041) * _2076) + ((cbLight._m0[_2045].x * _2051) * _2074);
    float _2084 = ((_2041 * cbLight._m0[_2035].y) * _2076) + ((_2051 * cbLight._m0[_2045].y) * _2074);
    float _2085 = ((_2041 * cbLight._m0[_2035].z) * _2076) + ((_2051 * cbLight._m0[_2045].z) * _2074);
    uvec4 _2089 = floatBitsToUint(cbLight._m0[_2018 + 12u]);
    bool _2091 = _2089.x == 0u;
    float _2102;
    float _2104;
    float _2106;
    if (_2091)
    {
        _2102 = _2083;
        _2104 = _2084;
        _2106 = _2085;
    }
    else
    {
        uint _2110 = _2018 + 6u;
        float _2126 = (dot(vec3(cbLight._m0[_2018 + 2u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2127 = _2126 * _2126;
        float _4340 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2128 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2129 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2102 = (((cbLight._m0[_2110].x * 0.3183098733425140380859375) * _2128) * _2129) + _2083;
        _2104 = (((cbLight._m0[_2110].y * 0.3183098733425140380859375) * _2128) * _2129) + _2084;
        _2106 = (((cbLight._m0[_2110].z * 0.3183098733425140380859375) * _2128) * _2129) + _2085;
    }
    bool _2109 = _2089.y == 0u;
    float _2147;
    float _2149;
    float _2151;
    if (_2109)
    {
        _2147 = _2102;
        _2149 = _2104;
        _2151 = _2106;
    }
    else
    {
        uint _2317 = _2018 + 7u;
        float _2333 = (dot(vec3(cbLight._m0[_2018 + 3u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2334 = _2333 * _2333;
        float _4356 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2335 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2336 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2147 = (((cbLight._m0[_2317].x * 0.3183098733425140380859375) * _2335) * _2336) + _2102;
        _2149 = (((cbLight._m0[_2317].y * 0.3183098733425140380859375) * _2335) * _2336) + _2104;
        _2151 = (((cbLight._m0[_2317].z * 0.3183098733425140380859375) * _2335) * _2336) + _2106;
    }
    uint _2154 = _2018 + 8u;
    float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _773) * 0.949999988079071044921875);
    float _2168 = _2167 * _2167;
    float _2169 = cbLight._m0[_2018].x + _850;
    float _2170 = cbLight._m0[_2018].y + _851;
    float _2171 = cbLight._m0[_2018].z + _852;
    float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
    float _2176 = _2175 * _2169;
    float _2177 = _2175 * _2170;
    float _2178 = _2175 * _2171;
    float _2179 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2018].xyz));
    float _4372 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _4383 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _2183 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _2184 = dot(vec3(_770, _771, _772), vec3(_2176, _2177, _2178));
    float _4394 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2188 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2176, _2177, _2178));
    float _4405 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2192 = _2168 * _2168;
    float _2196 = ((_2187 * _2187) * (_2192 + (-1.0))) + 1.0;
    float _2204 = exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0);
    float _2205 = 0.959999978542327880859375 - _929;
    float _2207 = 0.959999978542327880859375 - _930;
    float _2208 = 0.959999978542327880859375 - _931;
    float _2215 = 1.0 - _2168;
    float _2226 = (0.5 / (((_2183 * ((_2182 * _2215) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2215) + _2168) * _2182))) * _2182;
    float _4416 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2192 / ((_2196 * _2196) * 3.141590118408203125));
    uint _2239 = _2018 + 9u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _773) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_2055].x + _850;
    float _2253 = cbLight._m0[_2055].y + _851;
    float _2254 = cbLight._m0[_2055].z + _852;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2055].xyz));
    float _4427 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2266 = dot(vec3(_770, _771, _772), vec3(_2259, _2260, _2261));
    float _4438 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2270 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2259, _2260, _2261));
    float _4449 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2274 = _2251 * _2251;
    float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
    float _2285 = exp2(log2(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * 5.0);
    float _2292 = 1.0 - _2251;
    float _2302 = (0.5 / (((_2183 * ((_2265 * _2292) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2292) + _2251) * _2265))) * _2265;
    float _4460 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2304 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
    float _2314 = (((((_2285 * _2205) + _932) * cbLight._m0[_2239].x) * _2304) * _2041) + (((((_2204 * _2205) + _932) * cbLight._m0[_2154].x) * _2228) * _2051);
    float _2315 = (((((_2285 * _2207) + _934) * cbLight._m0[_2239].y) * _2304) * _2041) + (((((_2204 * _2207) + _934) * cbLight._m0[_2154].y) * _2228) * _2051);
    float _2316 = (((((_2285 * _2208) + _935) * cbLight._m0[_2239].z) * _2304) * _2041) + (((((_2204 * _2208) + _935) * cbLight._m0[_2154].z) * _2228) * _2051);
    float _2378;
    float _2380;
    float _2382;
    if (_2091)
    {
        _2378 = _2314;
        _2380 = _2315;
        _2382 = _2316;
    }
    else
    {
        uint _2384 = _2018 + 2u;
        uint _2388 = _2018 + 10u;
        float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _773) * 0.949999988079071044921875);
        float _2403 = _2402 * _2402;
        float _2404 = cbLight._m0[_2384].x + _850;
        float _2405 = cbLight._m0[_2384].y + _851;
        float _2406 = cbLight._m0[_2384].z + _852;
        float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
        float _2411 = _2410 * _2404;
        float _2412 = _2410 * _2405;
        float _2413 = _2410 * _2406;
        float _2414 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2384].xyz));
        float _4471 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2418 = dot(vec3(_770, _771, _772), vec3(_2411, _2412, _2413));
        float _4482 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2422 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2411, _2412, _2413));
        float _4493 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2426 = _2403 * _2403;
        float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
        float _2437 = exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0);
        float _2444 = 1.0 - _2403;
        float _2454 = (0.5 / (((_2183 * ((_2417 * _2444) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2444) + _2403) * _2417))) * _2417;
        float _4504 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2456 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
        float _2457 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2378 = (((((_2437 * _2205) + _932) * cbLight._m0[_2388].x) * _2456) * _2457) + _2314;
        _2380 = (((((_2437 * _2207) + _934) * cbLight._m0[_2388].y) * _2456) * _2457) + _2315;
        _2382 = (((((_2437 * _2208) + _935) * cbLight._m0[_2388].z) * _2456) * _2457) + _2316;
    }
    float _2492;
    float _2494;
    float _2496;
    if (_2109)
    {
        _2492 = _2378;
        _2494 = _2380;
        _2496 = _2382;
    }
    else
    {
        uint _2503 = _2018 + 3u;
        uint _2507 = _2018 + 11u;
        float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _773) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2503].x + _850;
        float _2524 = cbLight._m0[_2503].y + _851;
        float _2525 = cbLight._m0[_2503].z + _852;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2503].xyz));
        float _4520 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2537 = dot(vec3(_770, _771, _772), vec3(_2530, _2531, _2532));
        float _4531 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2530, _2531, _2532));
        float _4542 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0);
        float _2563 = 1.0 - _2522;
        float _2573 = (0.5 / (((_2183 * ((_2536 * _2563) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2563) + _2522) * _2536))) * _2536;
        float _4553 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2492 = (((((_2556 * _2205) + _932) * cbLight._m0[_2507].x) * _2575) * _2576) + _2378;
        _2494 = (((((_2556 * _2207) + _934) * cbLight._m0[_2507].y) * _2575) * _2576) + _2380;
        _2496 = (((((_2556 * _2208) + _935) * cbLight._m0[_2507].z) * _2575) * _2576) + _2382;
    }
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_2016.y == 0u)
    {
        float _2651 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2651;
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2651;
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2651;
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.x;
        uint _2678 = uint((float(_2666.y) * floor(float(uint(cbSceneParam._m0[85u].y * _871) / _2667))) + floor(float(uint(cbSceneParam._m0[85u].x * _870) / _2667)));
        float _2688 = (log2(_2654 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2689 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        uint _2692 = uint(isnan(14.0) ? _2689 : (isnan(_2689) ? 14.0 : min(_2689, 14.0)));
        uvec4 _2697 = texelFetch(g_lightClusterGridBuffer, int(((_2692 << 2u) + (_2678 << 6u)) >> 2u));
        uint _2698 = _2697.x;
        uint _2699 = _2666.z;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        if (((((1u << ((_2699 >> 4u) & 15u)) + 4294967295u) & _2698) == 0u) || ((_2699 & 240u) == 0u))
        {
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
        }
        else
        {
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            uint _2958 = 0u;
            uint _2967;
            bool _2968;
            for (;;)
            {
                _2967 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_2958 << 2u)) >> 2u)).x;
                _2968 = _2967 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2968)
                {
                    frontier_phi_66_pred = _2952;
                    frontier_phi_66_pred_1 = _2957;
                    frontier_phi_66_pred_2 = _2956;
                    frontier_phi_66_pred_3 = _2955;
                    frontier_phi_66_pred_4 = _2954;
                    frontier_phi_66_pred_5 = _2953;
                }
                else
                {
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    uint _3103;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2956;
                    _3102 = _2957;
                    _3103 = _2967;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    for (;;)
                    {
                        uint _3107 = uint(findLSB(_3103)) + (_2958 << 5u);
                        uint _3104 = (_3103 + 4294967295u) & _3103;
                        uint _3109 = _3107 * 48u;
                        vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 3u)).x));
                        uint _3129 = (_3107 * 48u) + 4u;
                        vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 3u)).x));
                        uint _3148 = (_3107 * 48u) + 8u;
                        vec3 _3159 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x));
                        float _3163 = _3123.x - _2652;
                        float _3164 = _3123.y - _2653;
                        float _3165 = _3123.z - _2654;
                        float _3166 = dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165));
                        float _3169 = inversesqrt(_3166);
                        float _3170 = _3169 * _3163;
                        float _3171 = _3169 * _3164;
                        float _3172 = _3169 * _3165;
                        float _3173 = dot(vec3(_889, _892, _895), vec3(_3170, _3171, _3172));
                        float _3178 = 1.0 - (_3166 * _3123.w);
                        float _4579 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3179 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                        float _3180 = sqrt(_3166) * _3142.w;
                        float _3183 = 1.39999997615814208984375 / (_3180 + 1.39999997615814208984375);
                        float _3184 = _3183 * _3183;
                        float _3187 = ((1.0 - _3184) * _3173) + _3184;
                        float _3190 = _3180 * _3180;
                        float _3194 = ((isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))) * _3179) / ((_3190 * 0.699999988079071044921875) + 1.0);
                        float _3198 = (-0.0) - _2652;
                        float _3199 = (-0.0) - _2653;
                        float _3200 = (-0.0) - _2654;
                        float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                        float _3205 = _3204 * _3198;
                        float _3206 = _3204 * _3199;
                        float _3207 = _3204 * _3200;
                        float _3215 = exp2(log2(1.0 / ((_3190 * 3.5) + 5.0)) * 0.25);
                        float _3216 = 1.0 - _964;
                        float _3223 = sqrt(1.0 - ((1.0 - (_3216 * _3216)) * (1.0 - (_3215 * _3215))));
                        float _3224 = _3223 * _3223;
                        float _3225 = _3224 * _3224;
                        float _3226 = _3205 + _3170;
                        float _3227 = _3206 + _3171;
                        float _3228 = _3207 + _3172;
                        float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                        float _3236 = dot(vec3(_889, _892, _895), vec3(_3205, _3206, _3207));
                        float _4595 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3239 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3240 = dot(vec3(_889, _892, _895), vec3(_3232 * _3226, _3232 * _3227, _3232 * _3228));
                        float _4606 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3243 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3247 = ((_3243 * _3243) * (_3225 + (-1.0))) + 1.0;
                        float _3248 = _3183 * _3224;
                        float _3249 = _3248 * _3248;
                        float _3252 = ((1.0 - _3249) * _3173) + _3249;
                        float _4617 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3253 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3254 = 1.0 - _3224;
                        float _3264 = (0.5 / (((_3253 * ((_3239 * _3254) + _3224)) + 9.9999999392252902907785028219223e-09) + (((_3253 * _3254) + _3224) * _3239))) * _3253;
                        float _4628 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3275 = (((_3225 * 3.1415927410125732421875) * (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) / ((_3247 * _3247) * ((_3190 * 2.1991131305694580078125) + 3.141590118408203125))) * _3179;
                        _3027 = (_3194 * _3142.x) + _3100;
                        _3028 = (_3194 * _3142.y) + _3101;
                        _3029 = (_3194 * _3142.z) + _3102;
                        _3024 = (_3275 * _3159.x) + _3097;
                        _3025 = (_3275 * _3159.y) + _3098;
                        _3026 = (_3275 * _3159.z) + _3099;
                        if (_3104 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3028;
                            _3102 = _3029;
                            _3103 = _3104;
                        }
                    }
                    frontier_phi_66_pred = _3024;
                    frontier_phi_66_pred_1 = _3029;
                    frontier_phi_66_pred_2 = _3028;
                    frontier_phi_66_pred_3 = _3027;
                    frontier_phi_66_pred_4 = _3026;
                    frontier_phi_66_pred_5 = _3025;
                }
                _2800 = frontier_phi_66_pred;
                _2810 = frontier_phi_66_pred_1;
                _2808 = frontier_phi_66_pred_2;
                _2806 = frontier_phi_66_pred_3;
                _2804 = frontier_phi_66_pred_4;
                _2802 = frontier_phi_66_pred_5;
                uint _2959 = _2958 + 1u;
                if (_2959 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2952 = _2800;
                    _2953 = _2802;
                    _2954 = _2804;
                    _2955 = _2806;
                    _2956 = _2808;
                    _2957 = _2810;
                    _2958 = _2959;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
        }
        uvec4 _2813 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2814 = _2813.z;
        uint _2816 = (_2814 >> 8u) & 15u;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        if (((4294967295u << _2816) & _2698) == 0u)
        {
            _2920 = _2799;
            _2922 = _2801;
            _2924 = _2803;
            _2926 = _2805;
            _2928 = _2807;
            _2930 = _2809;
        }
        else
        {
            float _2945 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
            float _2946 = _2945 * _2652;
            float _2947 = _2945 * _2653;
            float _2948 = _2945 * _2654;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2816 < ((_2814 >> 12u) & 15u))
            {
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _3080 = _2799;
                float _3081 = _2801;
                float _3082 = _2803;
                float _3083 = _2805;
                float _3084 = _2807;
                float _3085 = _2809;
                uint _3086 = _2816;
                uint _3095;
                bool _3096;
                for (;;)
                {
                    _3095 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_3086 << 2u)) >> 2u)).x;
                    _3096 = _3095 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3096)
                    {
                        frontier_phi_77_pred = _3085;
                        frontier_phi_77_pred_1 = _3084;
                        frontier_phi_77_pred_2 = _3083;
                        frontier_phi_77_pred_3 = _3082;
                        frontier_phi_77_pred_4 = _3081;
                        frontier_phi_77_pred_5 = _3080;
                    }
                    else
                    {
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3302 = _3080;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        float _3306 = _3084;
                        float _3307 = _3085;
                        uint _3308 = _3095;
                        uint _3309;
                        vec4 _3334;
                        float _3335;
                        vec4 _3350;
                        vec3 _3362;
                        vec4 _3377;
                        vec4 _3392;
                        float _3438;
                        bool _3439;
                        for (;;)
                        {
                            uint _3319 = ((_3086 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3308));
                            _3309 = (_3308 + 4294967295u) & _3308;
                            uint _3321 = _3319 * 40u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            _3335 = _3334.w;
                            uint _3337 = (_3319 * 40u) + 4u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3352 = (_3319 * 40u) + 8u;
                            _3362 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x));
                            uint _3364 = (_3319 * 40u) + 16u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3319 * 40u) + 20u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            uint _3394 = (_3319 * 40u) + 24u;
                            vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3413 = (_3319 * 40u) + 28u;
                            vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            _3438 = fma(_2654, _3426.z, fma(_2653, _3426.y, _3426.x * _2652)) + _3426.w;
                            _3439 = !((fma(_2654, _3407.z, fma(_2653, _3407.y, _3407.x * _2652)) + _3407.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3439)
                            {
                                float _3466 = _3334.x - _2652;
                                float _3467 = _3334.y - _2653;
                                float _3468 = _3334.z - _2654;
                                float _3469 = dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468));
                                float _3472 = inversesqrt(_3469);
                                float _3473 = _3472 * _3466;
                                float _3474 = _3472 * _3467;
                                float _3475 = _3472 * _3468;
                                float _3479 = 1.0 - (_3469 / (_3335 * _3335));
                                float _4639 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3484 = sqrt(_3469) * _3350.w;
                                float _3486 = 1.39999997615814208984375 / (_3484 + 1.39999997615814208984375);
                                float _3487 = _3486 * _3486;
                                float _3490 = ((1.0 - _3487) * dot(vec3(_3473, _3474, _3475), vec3(_889, _892, _895))) + _3487;
                                float _3493 = _3484 * _3484;
                                float _3497 = (fma(_2654, _3377.z, fma(_2653, _3377.y, _3377.x * _2652)) + _3377.w) / _3438;
                                float _3498 = (fma(_2654, _3392.z, fma(_2653, _3392.y, _3392.x * _2652)) + _3392.w) / _3438;
                                float _3502 = 1.0 - dot(vec2(_3497, _3498), vec2(_3497, _3498));
                                float _4655 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3504 = _3503 * (((isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0))) * _3480) / ((_3493 * 0.699999988079071044921875) + 1.0));
                                float _3516 = exp2(log2(1.0 / ((_3493 * 3.5) + 5.0)) * 0.25);
                                float _3517 = 1.0 - _964;
                                float _3524 = sqrt(1.0 - ((1.0 - (_3517 * _3517)) * (1.0 - (_3516 * _3516))));
                                float _3525 = _3524 * _3524;
                                float _3526 = _3525 * _3525;
                                float _3527 = _3473 - _2946;
                                float _3528 = _3474 - _2947;
                                float _3529 = _3475 - _2948;
                                float _3533 = inversesqrt(dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529)));
                                float _3537 = dot(vec3(_889, _892, _895), vec3((-0.0) - _2946, (-0.0) - _2947, (-0.0) - _2948));
                                float _4666 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3540 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3541 = dot(vec3(_889, _892, _895), vec3(_3533 * _3527, _3533 * _3528, _3533 * _3529));
                                float _4677 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3544 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3548 = ((_3544 * _3544) * (_3526 + (-1.0))) + 1.0;
                                float _3549 = _3486 * _3525;
                                float _3550 = _3549 * _3549;
                                float _3556 = ((1.0 - _3550) * dot(vec3(_889, _892, _895), vec3(_3473, _3474, _3475))) + _3550;
                                float _4688 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3558 = 1.0 - _3525;
                                float _3568 = (0.5 / (((_3557 * ((_3540 * _3558) + _3525)) + 9.9999999392252902907785028219223e-09) + (((_3557 * _3558) + _3525) * _3540))) * _3557;
                                float _4699 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3578 = (_3503 * _3480) * (((_3526 * 3.1415927410125732421875) * (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) / ((_3548 * _3548) * ((_3493 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3504 * _3350.y;
                                frontier_phi_83_pred_1 = _3504 * _3350.x;
                                frontier_phi_83_pred_2 = _3578 * _3362.z;
                                frontier_phi_83_pred_3 = _3578 * _3362.y;
                                frontier_phi_83_pred_4 = _3578 * _3362.x;
                                frontier_phi_83_pred_5 = _3504 * _3350.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3586 = frontier_phi_83_pred;
                            _3585 = frontier_phi_83_pred_1;
                            _3584 = frontier_phi_83_pred_2;
                            _3583 = frontier_phi_83_pred_3;
                            _3582 = frontier_phi_83_pred_4;
                            _3587 = frontier_phi_83_pred_5;
                            _3292 = _3585 + _3305;
                            _3293 = _3586 + _3306;
                            _3294 = _3587 + _3307;
                            _3289 = _3582 + _3302;
                            _3290 = _3583 + _3303;
                            _3291 = _3584 + _3304;
                            if (_3309 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3309;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3294;
                        frontier_phi_77_pred_1 = _3293;
                        frontier_phi_77_pred_2 = _3292;
                        frontier_phi_77_pred_3 = _3291;
                        frontier_phi_77_pred_4 = _3290;
                        frontier_phi_77_pred_5 = _3289;
                    }
                    _2931 = frontier_phi_77_pred;
                    _2929 = frontier_phi_77_pred_1;
                    _2927 = frontier_phi_77_pred_2;
                    _2925 = frontier_phi_77_pred_3;
                    _2923 = frontier_phi_77_pred_4;
                    _2921 = frontier_phi_77_pred_5;
                    uint _3087 = _3086 + 1u;
                    if (_3087 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3080 = _2921;
                        _3081 = _2923;
                        _3082 = _2925;
                        _3083 = _2927;
                        _3084 = _2929;
                        _3085 = _2931;
                        _3086 = _3087;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2925;
                frontier_phi_58_59_ladder_1 = _2931;
                frontier_phi_58_59_ladder_2 = _2929;
                frontier_phi_58_59_ladder_3 = _2927;
                frontier_phi_58_59_ladder_4 = _2923;
                frontier_phi_58_59_ladder_5 = _2921;
            }
            else
            {
                frontier_phi_58_59_ladder = _2803;
                frontier_phi_58_59_ladder_1 = _2809;
                frontier_phi_58_59_ladder_2 = _2807;
                frontier_phi_58_59_ladder_3 = _2805;
                frontier_phi_58_59_ladder_4 = _2801;
                frontier_phi_58_59_ladder_5 = _2799;
            }
            _2920 = frontier_phi_58_59_ladder_5;
            _2922 = frontier_phi_58_59_ladder_4;
            _2924 = frontier_phi_58_59_ladder;
            _2926 = frontier_phi_58_59_ladder_3;
            _2928 = frontier_phi_58_59_ladder_2;
            _2930 = frontier_phi_58_59_ladder_1;
        }
        float _2935 = isnan(1.0) ? _948 : (isnan(_948) ? 1.0 : min(_948, 1.0));
        _2711 = (_2935 * _2926) + _2147;
        _2713 = (_2935 * _2928) + _2149;
        _2715 = (_2935 * _2930) + _2151;
        _2717 = ((_2920 * _932) * _2935) + _2492;
        _2719 = ((_2922 * _934) * _2935) + _2494;
        _2721 = ((_2924 * _935) * _2935) + _2496;
    }
    else
    {
        _2711 = _2147;
        _2713 = _2149;
        _2715 = _2151;
        _2717 = _2492;
        _2719 = _2494;
        _2721 = _2496;
    }
    float _4715 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _4726 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _4737 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _2738 = ((isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2711 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _948))) + ((_2717 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1787)) * cbPerFrame._m0[3u].x);
    float _2739 = ((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2713 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _948))) + ((_2719 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1787)) * cbPerFrame._m0[3u].x);
    float _2740 = ((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2715 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _948))) + ((_2721 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1787)) * cbPerFrame._m0[3u].x);
    uint _2741 = _274 + 6u;
    float _2749 = _870 / cbSceneParam._m0[86u].x;
    float _2750 = _871 / cbSceneParam._m0[86u].y;
    vec4 _2764 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, (log2((isnan(cbSceneParam._m0[77u].w) ? _792 : (isnan(_792) ? cbSceneParam._m0[77u].w : min(_792, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2766 = _2764.x;
    float _2767 = _2764.y;
    float _2768 = _2764.z;
    float _2769 = _2764.w;
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    if (_792 > cbSceneParam._m0[78u].w)
    {
        float _2824 = isnan(_792) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _792 : min(cbSceneParam._m0[80u].w, _792));
        float _2825 = _2824 / _792;
        float _2836 = _2825 * _843;
        float _2837 = _844 * _2825;
        float _2838 = (-0.0) - _2837;
        float _2840 = _2825 * _845;
        float _2842 = (cbSceneParam._m0[77u].w * _2838) / _2824;
        float _2843 = _2842 + cbSceneParam._m0[79u].w;
        float _2844 = cbSceneParam._m0[79u].w - _2837;
        float _2850 = sqrt(((_2836 * _2836) + (_2837 * _2837)) + (_2840 * _2840));
        float _2853 = (1.0 - (cbSceneParam._m0[77u].w / _2824)) * _2850;
        float _2858 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2860 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3037;
        if (abs((_2838 - _2842) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3037 = ((((_2843 > 0.0) ? exp2(_2858 * _2843) : (2.0 - exp2(_2860 * _2843))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2853;
        }
        else
        {
            float _2981 = 1.0 / cbSceneParam._m0[80u].x;
            float _2982 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : max(_2843, _2844));
            float _2983 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : min(_2843, _2844));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            _3037 = ((abs(_2850 / _2838) * cbSceneParam._m0[80u].y) * ((((_2992 - _2993) * 2.0) - ((exp2(_2858 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0)))) - exp2(_2858 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))))) * _2981)) - ((exp2(_2860 * _2992) - exp2(_2860 * _2993)) * _2981))) + (_2853 * cbSceneParam._m0[80u].z);
        }
        vec4 _3039 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, 1.0), 0.0);
        float _3048 = exp2((_3037 * (-1.44269502162933349609375)) * (1.0 - _3039.w));
        float _3049 = log2(_3048);
        float _3065 = log2(_2769);
        _2862 = (exp2(_3065 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].x)) * _3039.x) / cbSceneParam._m0[78u].x)) + _2766;
        _2864 = (exp2(_3065 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].y)) * _3039.y) / cbSceneParam._m0[78u].y)) + _2767;
        _2866 = (exp2(_3065 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].z)) * _3039.z) / cbSceneParam._m0[78u].z)) + _2768;
        _2868 = _3048 * _2769;
    }
    else
    {
        _2862 = _2766;
        _2864 = _2767;
        _2866 = _2768;
        _2868 = _2769;
    }
    bool _3075;
    vec4 _2878;
    vec4 _2900;
    float _2902;
    float _2906;
    float _2907;
    float _2908;
    float _2909;
    bool _2919;
    for (;;)
    {
        _2878 = cbMatDynParam._m0[0u];
        float _2880 = roundEven(_2878.y);
        bool _2881 = _2880 == 3.0;
        float _2882 = log2(_2868);
        float _2889 = exp2(_2882 * cbSceneParam._m0[78u].x) * _2738;
        float _2890 = exp2(_2882 * cbSceneParam._m0[78u].y) * _2739;
        float _2891 = exp2(_2882 * cbSceneParam._m0[78u].z) * _2740;
        float _2898 = _859 + (-0.5);
        _2900 = cbMtdParam._m0[1u];
        _2902 = _2900.y * _2898;
        float _2905 = (_2880 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2906 = _2905 * (_2881 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2862)));
        _2907 = _2905 * (_2881 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2864)));
        _2908 = _2905 * (_2881 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2866)));
        _2909 = _2898 * 0.999000012874603271484375;
        _2919 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2919)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _2909) < 0.5)
            {
                _3075 = true;
                break;
            }
        }
        uint _3016 = _908 + uint(_2878.w);
        if ((cbInstanceData._m0[_3016].w < 1.0) && ((cbInstanceData._m0[_3016].w + _2909) < 0.5))
        {
            _3075 = true;
            break;
        }
        if ((_2902 + 1.0) < _2900.x)
        {
            _3075 = true;
            break;
        }
        _3075 = false;
        break;
    }
    float _3280;
    if (_3075)
    {
        discard_state = true;
        _3280 = 0.0;
    }
    else
    {
        _3280 = cbInstanceData._m0[_2741].w;
    }
    SV_Target.x = _2906;
    SV_Target.y = _2907;
    SV_Target.z = _2908;
    SV_Target.w = _3280;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2741].w;
    discard_exit();
}


