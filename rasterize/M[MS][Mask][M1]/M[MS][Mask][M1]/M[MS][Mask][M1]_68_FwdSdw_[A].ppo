#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1573;
float _4236;
float _4237;
float _4238;
float _4239;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4248 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4259 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4270 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _445 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _462 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _399.x) * 2.0) - ((((_433 - _445) * cbMtdParam._m0[23u].w) + _445) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4281 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _470 = (_463 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _471 = (_463 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _472 = (_463 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _511 = _509.x;
    float _521 = dot(vec4(_511, _509.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _535 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _399.y) * 2.0) - ((((_511 - _521) * cbMtdParam._m0[23u].w) + _521) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4292 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _543 = (_536 * ((_489.x * cbMtdParam._m0[13u].x) - _470)) + _470;
    float _544 = (_536 * ((_489.y * cbMtdParam._m0[13u].y) - _471)) + _471;
    float _545 = (_536 * ((_489.z * cbMtdParam._m0[13u].z) - _472)) + _472;
    float _549 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _543;
    float _552 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _544;
    float _555 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _545;
    float _562 = ((_543 - _549) * (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) + _549;
    float _563 = ((_544 - _552) * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) + _552;
    float _564 = ((_545 - _555) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) + _555;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _621 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _623 = _621.x;
    float _624 = _621.y;
    float _625 = _621.z;
    float _632 = ((_604.x - _623) * _463) + _623;
    float _633 = ((_604.y - _624) * _463) + _624;
    float _634 = ((_604.z - _625) * _463) + _625;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _659 = ((_646.z - _634) * _536) + _634;
    float _662 = ((((_646.x - _632) * _536) + _632) * 2.0) + (-1.0);
    float _663 = ((((_646.y - _633) * _536) + _633) * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _4303 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _669 = sqrt(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))));
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _708 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _710 = _708.x;
    float _711 = 1.0 - _710;
    float _720 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _723 = ((isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : min(_720, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _732 = (_723 - ((((((_710 - _711) * cbMtdParam._m0[24u].z) + _711) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _723))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4324 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _733 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _740 = (_733 * (cbMtdParam._m0[17u].x - _562)) + _562;
    float _741 = (_733 * (cbMtdParam._m0[17u].y - _563)) + _563;
    float _742 = (_733 * (cbMtdParam._m0[17u].z - _564)) + _564;
    vec4 _754 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _756 = _754.x;
    float _757 = 1.0 - _756;
    float _782 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_756 - _757) * cbMtdParam._m0[24u].w) + _757) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4335 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _783 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _791 = ((((cbMtdParam._m0[10u].x - _740) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _783) + _740;
    float _792 = ((((cbMtdParam._m0[10u].y - _741) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _783) + _741;
    float _793 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _742)) * _783) + _742;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _821 = _819.x;
    float _839 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _821) * _463) + _821;
    float _856 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _839) * _536) + _839;
    float _860 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _856) * cbMtdParam._m0[19u].z) + _856;
    float _862 = _860 - (_860 * _733);
    float _864 = _862 - (_862 * _783);
    float _869 = (((_581.z - _659) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _659;
    float _873 = ((_683.z - _869) * cbMtdParam._m0[19u].w) + _869;
    vec4 _887 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _894 = (_887.x * 2.0) + (-1.0);
    float _895 = (_887.y * 2.0) + (-1.0);
    float _896 = dot(vec2(_894, _895), vec2(_894, _895));
    float _4346 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _904 = (_733 * (_887.z - _873)) + _873;
    float _907 = ((cbMtdParam._m0[23u].x - _904) * _783) + _904;
    vec4 _928 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _934 = (_928.x * 2.0) + (-1.0);
    float _935 = (_928.y * 2.0) + (-1.0);
    float _936 = dot(vec2(_934, _935), vec2(_934, _935));
    float _4357 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _950 = (_662 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_581.x * 2.0) + (-1.0)))) + (((_683.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _951 = (_663 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_581.y * 2.0) + (-1.0)))) + (((_683.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _963 = (((_894 - _950) + (cbMtdParam._m0[21u].x * _950)) * _733) + _950;
    float _964 = (((_895 - _951) + (cbMtdParam._m0[21u].x * _951)) * _733) + _951;
    float _965 = (_733 * (sqrt(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) - _669)) + _669;
    float _976 = (((_934 - _963) + (_963 * cbMtdParam._m0[22u].z)) * _783) + _963;
    float _977 = (((_935 - _964) + (_964 * cbMtdParam._m0[22u].z)) * _783) + _964;
    float _978 = ((sqrt(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) - _965) * _783) + _965;
    float _980 = cbMtdParam._m0[22u].x + _683.w;
    float _983 = fma(_978, _265 * NORMAL.x, fma(_977, _272 * TANGENT.x, (_258 * _250) * _976));
    float _986 = fma(_978, _265 * NORMAL.y, fma(_977, _272 * TANGENT.y, (_258 * _251) * _976));
    float _989 = fma(_978, _265 * NORMAL.z, fma(_977, _272 * TANGENT.z, (_258 * _252) * _976));
    float _993 = inversesqrt(dot(vec3(_983, _986, _989), vec3(_983, _986, _989)));
    float _994 = _993 * _983;
    float _995 = _993 * _986;
    float _996 = _993 * _989;
    float _4368 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _997 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _4379 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4390 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4401 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4412 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4423 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _1002 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _1016 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1066 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1056);
    float _1067 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1056);
    float _1068 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1056);
    float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
    float _1073 = _1066 * _1072;
    float _1074 = _1067 * _1072;
    float _1075 = _1068 * _1072;
    vec4 _1080 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1082 = _1080.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1254 = sqrt(((_1066 * _1066) + (_1067 * _1067)) + (_1068 * _1068));
        float _1260 = (cbMatDynParam._m0[5u].x * _1254) + cbMatDynParam._m0[5u].y;
        float _4434 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1265 = (cbMatDynParam._m0[5u].z * _1254) + cbMatDynParam._m0[5u].w;
        float _4445 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) - _1261)) + _1261) < ((_1082 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1093 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1094 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1112 = fma(_996, cbSceneParam._m0[5u].z, fma(_995, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _994));
    float _1115 = fma(_996, cbSceneParam._m0[6u].z, fma(_995, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _994));
    float _1118 = fma(_996, cbSceneParam._m0[7u].z, fma(_995, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _994));
    uint _1131 = _297 + 9u;
    uint _1132 = _1131 + uint(cbMatDynParam._m0[0u].w);
    float _1138 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * cbInstanceData._m0[_1132].x;
    float _1139 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * cbInstanceData._m0[_1132].y;
    float _1140 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * cbInstanceData._m0[_1132].z;
    float _4456 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _1141 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _4467 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1142 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _4478 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1143 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _1144 = 1.0 - _1002;
    float _1145 = _1141 * _1144;
    float _1146 = _1142 * _1144;
    float _1147 = _1143 * _1144;
    float _1152 = (_1141 + (-0.039999999105930328369140625)) * _1002;
    float _1153 = (_1142 + (-0.039999999105930328369140625)) * _1002;
    float _1154 = (_1143 + (-0.039999999105930328369140625)) * _1002;
    float _1155 = _1152 + 0.039999999105930328369140625;
    float _1157 = _1153 + 0.039999999105930328369140625;
    float _1158 = _1154 + 0.039999999105930328369140625;
    vec4 _1167 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1093, cbSceneParam._m0[86u].y * _1094));
    float _1171 = ((isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * TEXCOORD_5.w) * _1167.x;
    float _1172 = dot(vec3(_994, _995, _996), vec3(_1073, _1074, _1075));
    float _1175 = _1172 * 2.0;
    float _1179 = (_1175 * _994) - _1073;
    float _1180 = (_1175 * _995) - _1074;
    float _1181 = (_1175 * _996) - _1075;
    float _1185 = abs(dot(vec3(_1073, _1074, _1075), vec3(_994, _995, _996)));
    float _4489 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1187 = sqrt(_997);
    float _1200 = exp2((_1187 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1187 * 3.0));
    float _1206 = (1.0 - _1200) * ((_1187 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1207 = _1200 * _1187;
    float _1235 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1239 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1243 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1572;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1297 = fma(_1243, cbModelParam._m0[26u].z, fma(_1239, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1235));
        float _1301 = fma(_1243, cbModelParam._m0[27u].z, fma(_1239, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1235));
        float _1305 = fma(_1243, cbModelParam._m0[28u].z, fma(_1239, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1235));
        float _1330 = _1235 + _994;
        float _1331 = _1239 + _995;
        float _1332 = _1243 + _996;
        float _1342 = fma(_1332, cbModelParam._m0[26u].z, fma(_1331, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1330)) - _1297;
        float _1343 = fma(_1332, cbModelParam._m0[27u].z, fma(_1331, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1330)) - _1301;
        float _1344 = fma(_1332, cbModelParam._m0[28u].z, fma(_1331, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1330)) - _1305;
        float _1348 = inversesqrt(dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344)));
        float _1361 = ((_1348 * _1342) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1297 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1348 * _1343) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1301 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1348 * _1344) / cbModelParam._m0[34u].z) + ((((((_1305 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        float _1400 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1366.x + (-0.5));
        float _1402 = _1400 * (_1366.y + (-0.5));
        float _1403 = _1400 * (_1366.z + (-0.5));
        float _1410 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1373.x + (-0.5));
        float _1412 = _1410 * (_1373.y + (-0.5));
        float _1413 = _1410 * (_1373.z + (-0.5));
        float _1420 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1380.x + (-0.5));
        float _1422 = _1420 * (_1380.y + (-0.5));
        float _1423 = _1420 * (_1380.z + (-0.5));
        float _1430 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1387.x + (-0.5));
        float _1432 = _1430 * (_1387.y + (-0.5));
        float _1433 = _1430 * (_1387.z + (-0.5));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = _1401 * 0.5;
        float _1438 = _1411 * 0.5;
        float _1439 = _1421 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1454 = (dot(vec3(_994, _995, _996), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4515 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1464 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4526 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4537 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_1466 + 1.0))) + _1471) * _1434;
        float _1481 = _1402 * 0.5;
        float _1482 = _1412 * 0.5;
        float _1483 = _1422 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_994, _995, _996), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4548 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4559 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4570 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_1508 + 1.0))) + _1513) * _1435;
        float _1523 = _1403 * 0.5;
        float _1524 = _1413 * 0.5;
        float _1525 = _1423 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_994, _995, _996), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4581 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4592 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4603 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_1550 + 1.0))) + _1555) * _1436;
        _1572 = _1403;
        _1574 = _1402;
        _1575 = _1401;
        _1576 = _1413;
        _1577 = _1412;
        _1578 = _1411;
        _1579 = _1423;
        _1580 = _1422;
        _1581 = _1421;
        _1582 = _1436;
        _1583 = _1435;
        _1584 = _1434;
        _1585 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1586 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1587 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
    }
    else
    {
        _1572 = _1573;
        _1574 = _1573;
        _1575 = _1573;
        _1576 = _1573;
        _1577 = _1573;
        _1578 = _1573;
        _1579 = _1573;
        _1580 = _1573;
        _1581 = _1573;
        _1582 = _1573;
        _1583 = _1573;
        _1584 = _1573;
        _1585 = 0.0;
        _1586 = 0.0;
        _1587 = 0.0;
    }
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1614 = fma(_1243, cbModelParam._m0[30u].z, fma(_1239, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1235));
        float _1618 = fma(_1243, cbModelParam._m0[31u].z, fma(_1239, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1235));
        float _1622 = fma(_1243, cbModelParam._m0[32u].z, fma(_1239, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1235));
        float _1645 = _1235 + _994;
        float _1646 = _1239 + _995;
        float _1647 = _1243 + _996;
        float _1657 = fma(_1647, cbModelParam._m0[30u].z, fma(_1646, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1645)) - _1614;
        float _1658 = fma(_1647, cbModelParam._m0[31u].z, fma(_1646, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1645)) - _1618;
        float _1659 = fma(_1647, cbModelParam._m0[32u].z, fma(_1646, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1645)) - _1622;
        float _1663 = inversesqrt(dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659)));
        float _1676 = ((_1663 * _1657) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1614 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1677 = ((_1663 * _1658) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1618 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1678 = ((_1663 * _1659) / cbModelParam._m0[35u].z) + ((((((_1622 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1694 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        float _1713 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1680.x + (-0.5));
        float _1715 = _1713 * (_1680.y + (-0.5));
        float _1716 = _1713 * (_1680.z + (-0.5));
        float _1723 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1724 = _1723 * (_1687.x + (-0.5));
        float _1725 = _1723 * (_1687.y + (-0.5));
        float _1726 = _1723 * (_1687.z + (-0.5));
        float _1733 = exp2((_1694.w + (-0.5)) * 20.0) * 2.0;
        float _1734 = _1733 * (_1694.x + (-0.5));
        float _1735 = _1733 * (_1694.y + (-0.5));
        float _1736 = _1733 * (_1694.z + (-0.5));
        float _1743 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1701.x + (-0.5));
        float _1745 = _1743 * (_1701.y + (-0.5));
        float _1746 = _1743 * (_1701.z + (-0.5));
        float _1747 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1748 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1749 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1750 = _1714 * 0.5;
        float _1751 = _1724 * 0.5;
        float _1752 = _1734 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_994, _995, _996), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4644 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1747 + 9.9999997473787516355514526367188e-06);
        float _4655 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4666 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_1777 + 1.0))) + _1782) * _1747;
        float _1792 = _1715 * 0.5;
        float _1793 = _1725 * 0.5;
        float _1794 = _1735 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_994, _995, _996), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4677 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1748 + 9.9999997473787516355514526367188e-06);
        float _4688 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4699 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_1819 + 1.0))) + _1824) * _1748;
        float _1834 = _1716 * 0.5;
        float _1835 = _1726 * 0.5;
        float _1836 = _1736 * 0.5;
        float _1837 = dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836));
        float _1842 = (_1837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1837);
        float _1850 = (dot(vec3(_994, _995, _996), vec3(_1842 * _1834, _1842 * _1835, _1842 * _1836)) + 1.0) * 0.5;
        float _4710 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1859 = sqrt(((_1835 * _1835) + (_1834 * _1834)) + (_1836 * _1836)) / (_1749 + 9.9999997473787516355514526367188e-06);
        float _4721 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _1861 = _1860 * 2.0;
        float _1865 = (1.0 - _1860) / (_1860 + 1.0);
        float _4732 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _1875 = ((((1.0 - _1866) * (_1861 + 2.0)) * exp2(log2(isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_1861 + 1.0))) + _1866) * _1749;
        _1883 = _1716;
        _1884 = _1715;
        _1885 = _1714;
        _1886 = _1726;
        _1887 = _1725;
        _1888 = _1724;
        _1889 = _1736;
        _1890 = _1735;
        _1891 = _1734;
        _1892 = _1749;
        _1893 = _1748;
        _1894 = _1747;
        _1895 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1896 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
        _1897 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)));
    }
    else
    {
        _1883 = _1573;
        _1884 = _1573;
        _1885 = _1573;
        _1886 = _1573;
        _1887 = _1573;
        _1888 = _1573;
        _1889 = _1573;
        _1890 = _1573;
        _1891 = _1573;
        _1892 = _1573;
        _1893 = _1573;
        _1894 = _1573;
        _1895 = 0.0;
        _1896 = 0.0;
        _1897 = 0.0;
    }
    float _1907 = (cbModelParam._m0[1u].x * (_1895 - _1585)) + _1585;
    float _1908 = (cbModelParam._m0[1u].x * (_1896 - _1586)) + _1586;
    float _1909 = (cbModelParam._m0[1u].x * (_1897 - _1587)) + _1587;
    float _1930 = fma(_1909, cbSceneParam._m0[89u].z, fma(_1908, cbSceneParam._m0[89u].y, _1907 * cbSceneParam._m0[89u].x));
    float _1933 = fma(_1909, cbSceneParam._m0[90u].z, fma(_1908, cbSceneParam._m0[90u].y, _1907 * cbSceneParam._m0[90u].x));
    float _1936 = fma(_1909, cbSceneParam._m0[91u].z, fma(_1908, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1907));
    float _1951 = _1179 * 0.5;
    float _1952 = _1180 * 0.5;
    float _1953 = _1181 * 0.5;
    float _1954 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1885, _1888, _1891, _1894));
    float _1957 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1884, _1887, _1890, _1893));
    float _1960 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1883, _1886, _1889, _1892));
    float _1994;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1967 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1572, _1576, _1579, _1582));
        float _1971 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1574, _1577, _1580, _1583));
        float _1975 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1575, _1578, _1581, _1584));
        float _1982 = dot(vec4(cbModelParam._m0[39u]), vec4(_1951, _1952, _1953, 1.0));
        _1994 = dot(vec3(isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0)), isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0)), isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1982) ? 0.0 : (isnan(0.0) ? _1982 : max(0.0, _1982))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1994 = 1.0;
    }
    float _2005;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1996 = dot(vec4(cbModelParam._m0[40u]), vec4(_1951, _1952, _1953, 1.0));
        _2005 = dot(vec3(isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1996) ? 0.0 : (isnan(0.0) ? _1996 : max(0.0, _1996))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2005 = 1.0;
    }
    float _2009 = (_2005 * cbModelParam._m0[1u].x) + (_1994 * (1.0 - cbModelParam._m0[1u].x));
    float _2019 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _997);
    float _2020 = isnan(_2019) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2019 : min(cbModelParam._m0[25u].z, _2019));
    float _2101;
    float _2103;
    float _2105;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2068 = fma(_1243, cbModelParam._m0[13u].z, fma(_1239, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1235)) + cbModelParam._m0[13u].w;
        float _2072 = fma(_1243, cbModelParam._m0[14u].z, fma(_1239, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1235)) + cbModelParam._m0[14u].w;
        float _2076 = fma(_1243, cbModelParam._m0[15u].z, fma(_1239, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1235)) + cbModelParam._m0[15u].w;
        float _2079 = fma(_1181, cbModelParam._m0[13u].z, fma(_1180, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1179));
        float _2082 = fma(_1181, cbModelParam._m0[14u].z, fma(_1180, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1179));
        float _2085 = fma(_1181, cbModelParam._m0[15u].z, fma(_1180, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1179));
        float _2113;
        if (_2079 > 0.0)
        {
            _2113 = abs((1.0 - _2068) / _2079);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2068 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2113 = frontier_phi_17_15_ladder;
        }
        float _2285;
        if (_2082 > 0.0)
        {
            _2285 = abs((1.0 - _2072) / _2082);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2072 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2285 = frontier_phi_26_22_ladder;
        }
        float _2580;
        if (_2085 > 0.0)
        {
            _2580 = abs((1.0 - _2076) / _2085);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2076 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2580 = frontier_phi_38_33_ladder;
        }
        float _2582 = isnan(_2285) ? _2113 : (isnan(_2113) ? _2285 : min(_2113, _2285));
        float _2583 = isnan(_2580) ? _2582 : (isnan(_2582) ? _2580 : min(_2582, _2580));
        float _2587 = (_2583 * _2079) + _2068;
        float _2588 = (_2583 * _2082) + _2072;
        float _2589 = (_2583 * _2085) + _2076;
        float _2590 = _2583 * 9.9999997473787516355514526367188e-05;
        float _2592 = (-1.0) - _2590;
        float _2594 = _2590 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2589 > _2594) || ((_2589 < _2592) || ((_2588 > _2594) || ((_2588 < _2592) || ((_2587 < _2592) || (_2587 > _2594))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2589, cbModelParam._m0[9u].z, fma(_2588, cbModelParam._m0[9u].y, _2587 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2589, cbModelParam._m0[10u].z, fma(_2588, cbModelParam._m0[10u].y, _2587 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2589, cbModelParam._m0[11u].z, fma(_2588, cbModelParam._m0[11u].y, _2587 * cbModelParam._m0[11u].x))), _2020);
            frontier_phi_16_38_ladder = _2734.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2734.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2734.x * cbModelParam._m0[1u].y;
        }
        _2101 = frontier_phi_16_38_ladder_2;
        _2103 = frontier_phi_16_38_ladder_1;
        _2105 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2089 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1179, _1180, _1181), _2020);
        _2101 = _2089.x * cbModelParam._m0[1u].y;
        _2103 = _2089.y * cbModelParam._m0[1u].y;
        _2105 = _2089.z * cbModelParam._m0[1u].y;
    }
    float _2109 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _997);
    float _2110 = isnan(_2109) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2109 : min(cbModelParam._m0[25u].w, _2109));
    float _2200;
    float _2202;
    float _2204;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2164 = fma(_1243, cbModelParam._m0[21u].z, fma(_1239, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1235)) + cbModelParam._m0[21u].w;
        float _2168 = fma(_1243, cbModelParam._m0[22u].z, fma(_1239, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1235)) + cbModelParam._m0[22u].w;
        float _2172 = fma(_1243, cbModelParam._m0[23u].z, fma(_1239, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1235)) + cbModelParam._m0[23u].w;
        float _2175 = fma(_1181, cbModelParam._m0[21u].z, fma(_1180, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1179));
        float _2178 = fma(_1181, cbModelParam._m0[22u].z, fma(_1180, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1179));
        float _2181 = fma(_1181, cbModelParam._m0[23u].z, fma(_1180, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1179));
        float _2290;
        if (_2175 > 0.0)
        {
            _2290 = abs((1.0 - _2164) / _2175);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2175 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2164 + 1.0) / _2175);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2290 = frontier_phi_28_24_ladder;
        }
        float _2607;
        if (_2178 > 0.0)
        {
            _2607 = abs((1.0 - _2168) / _2178);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2178 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2168 + 1.0) / _2178);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2607 = frontier_phi_40_35_ladder;
        }
        float _2945;
        if (_2181 > 0.0)
        {
            _2945 = abs((1.0 - _2172) / _2181);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2181 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2172 + 1.0) / _2181);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2945 = frontier_phi_50_47_ladder;
        }
        float _2947 = isnan(_2607) ? _2290 : (isnan(_2290) ? _2607 : min(_2290, _2607));
        float _2948 = isnan(_2945) ? _2947 : (isnan(_2947) ? _2945 : min(_2947, _2945));
        float _2952 = (_2948 * _2175) + _2164;
        float _2953 = (_2948 * _2178) + _2168;
        float _2954 = (_2948 * _2181) + _2172;
        float _2955 = _2948 * 9.9999997473787516355514526367188e-05;
        float _2956 = (-1.0) - _2955;
        float _2958 = _2955 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2954 > _2958) || ((_2954 < _2956) || ((_2953 > _2958) || ((_2953 < _2956) || ((_2952 < _2956) || (_2952 > _2958))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3076 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2954, cbModelParam._m0[17u].z, fma(_2953, cbModelParam._m0[17u].y, _2952 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2954, cbModelParam._m0[18u].z, fma(_2953, cbModelParam._m0[18u].y, _2952 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2954, cbModelParam._m0[19u].z, fma(_2953, cbModelParam._m0[19u].y, _2952 * cbModelParam._m0[19u].x))), _2110);
            frontier_phi_25_50_ladder = _3076.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3076.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3076.x * cbModelParam._m0[1u].z;
        }
        _2200 = frontier_phi_25_50_ladder_2;
        _2202 = frontier_phi_25_50_ladder_1;
        _2204 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2184 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1179, _1180, _1181), _2110);
        _2200 = _2184.x * cbModelParam._m0[1u].z;
        _2202 = _2184.y * cbModelParam._m0[1u].z;
        _2204 = _2184.z * cbModelParam._m0[1u].z;
    }
    float _2217 = (((_1206 * _1155) + _1207) * _1171) * ((cbModelParam._m0[1u].w * (_2200 - _2101)) + _2101);
    float _2219 = (((_1206 * _1157) + _1207) * _1171) * ((cbModelParam._m0[1u].w * (_2202 - _2103)) + _2103);
    float _2221 = (((_1206 * _1158) + _1207) * _1171) * ((cbModelParam._m0[1u].w * (_2204 - _2105)) + _2105);
    float _2224 = fma(_2221, cbSceneParam._m0[89u].z, fma(_2219, cbSceneParam._m0[89u].y, _2217 * cbSceneParam._m0[89u].x));
    float _2227 = fma(_2221, cbSceneParam._m0[90u].z, fma(_2219, cbSceneParam._m0[90u].y, _2217 * cbSceneParam._m0[90u].x));
    float _2230 = fma(_2221, cbSceneParam._m0[91u].z, fma(_2219, cbSceneParam._m0[91u].y, _2217 * cbSceneParam._m0[91u].x));
    float _2264 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2268 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2272 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2276 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2277 = _2264 / _2276;
    float _2278 = _2268 / _2276;
    float _2279 = _2272 / _2276;
    float _2426;
    float _2427;
    float _2428;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2306 = ((uint(_2279 > cbSceneParam._m0[59u].y) + uint(_2279 > cbSceneParam._m0[59u].x)) + uint(_2279 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2307 = _2306 + 43u;
        uint _2315 = _2306 + 44u;
        uint _2323 = _2306 + 45u;
        uint _2331 = _2306 + 46u;
        float _2342 = fma(_2276, cbSceneParam._m0[_2307].w, fma(_2272, cbSceneParam._m0[_2307].z, fma(_2268, cbSceneParam._m0[_2307].y, _2264 * cbSceneParam._m0[_2307].x)));
        float _2346 = fma(_2276, cbSceneParam._m0[_2315].w, fma(_2272, cbSceneParam._m0[_2315].z, fma(_2268, cbSceneParam._m0[_2315].y, _2264 * cbSceneParam._m0[_2315].x)));
        float _2354 = fma(_2276, cbSceneParam._m0[_2331].w, fma(_2272, cbSceneParam._m0[_2331].z, fma(_2268, cbSceneParam._m0[_2331].y, _2264 * cbSceneParam._m0[_2331].x)));
        float _2359 = cbSceneParam._m0[33u].z * _2354;
        float _2361 = cbSceneParam._m0[33u].w * _2354;
        float _2364 = fma(_2276, cbSceneParam._m0[_2323].w, fma(_2272, cbSceneParam._m0[_2323].z, fma(_2268, cbSceneParam._m0[_2323].y, _2264 * cbSceneParam._m0[_2323].x))) / _2354;
        float _2412 = (cbSceneParam._m0[33u].x - sqrt(((_2278 * _2278) + (_2277 * _2277)) + (_2279 * _2279))) * cbSceneParam._m0[33u].y;
        float _4858 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2419 = (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2359 + _2342) / _2354, (_2361 + _2346) / _2354), _2364), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2361 + _2342) / _2354, (_2346 - _2359) / _2354), _2364), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2342 - _2359) / _2354, (_2346 - _2361) / _2354), _2364), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2342 - _2361) / _2354, (_2359 + _2346) / _2354), _2364), 0.0)).x), vec4(0.25)));
        _2426 = 1.0 - (_2419 * cbSceneParam._m0[34u].x);
        _2427 = 1.0 - (_2419 * cbSceneParam._m0[34u].y);
        _2428 = 1.0 - (_2419 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2426 = 1.0;
        _2427 = 1.0;
        _2428 = 1.0;
    }
    float _2492;
    float _2494;
    float _2496;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2480 = fma(_2276, cbSceneParam._m0[63u].w, fma(_2272, cbSceneParam._m0[63u].z, fma(_2268, cbSceneParam._m0[63u].y, _2264 * cbSceneParam._m0[63u].x)));
        float _2481 = fma(_2276, cbSceneParam._m0[60u].w, fma(_2272, cbSceneParam._m0[60u].z, fma(_2268, cbSceneParam._m0[60u].y, _2264 * cbSceneParam._m0[60u].x))) / _2480;
        float _2482 = fma(_2276, cbSceneParam._m0[61u].w, fma(_2272, cbSceneParam._m0[61u].z, fma(_2268, cbSceneParam._m0[61u].y, _2264 * cbSceneParam._m0[61u].x))) / _2480;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2481 >= cbSceneParam._m0[64u].x) && (_2482 >= cbSceneParam._m0[64u].y)) && (_2481 <= cbSceneParam._m0[64u].z)) && (_2482 <= cbSceneParam._m0[64u].w))
        {
            float _2620 = fma(_2276, cbSceneParam._m0[62u].w, fma(_2272, cbSceneParam._m0[62u].z, fma(_2268, cbSceneParam._m0[62u].y, _2264 * cbSceneParam._m0[62u].x))) / _2480;
            float _2624 = isnan(cbSceneParam._m0[41u].w) ? _2620 : (isnan(_2620) ? cbSceneParam._m0[41u].w : max(_2620, cbSceneParam._m0[41u].w));
            float _2667 = (cbSceneParam._m0[33u].x - sqrt(((_2278 * _2278) + (_2277 * _2277)) + (_2279 * _2279))) * cbSceneParam._m0[33u].y;
            float _4874 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
            float _2674 = (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2481, cbSceneParam._m0[33u].w + _2482), _2624), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2481, _2482 - cbSceneParam._m0[33u].z), _2624), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2481 - cbSceneParam._m0[33u].z, _2482 - cbSceneParam._m0[33u].w), _2624), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2481 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2482), _2624), 0.0)).x), vec4(0.25)));
            float _2678 = 1.0 - (_2674 * cbSceneParam._m0[34u].x);
            float _2679 = 1.0 - (_2674 * cbSceneParam._m0[34u].y);
            float _2680 = 1.0 - (_2674 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2680) ? _2428 : (isnan(_2428) ? _2680 : min(_2428, _2680));
            frontier_phi_37_36_ladder_1 = isnan(_2679) ? _2427 : (isnan(_2427) ? _2679 : min(_2427, _2679));
            frontier_phi_37_36_ladder_2 = isnan(_2678) ? _2426 : (isnan(_2426) ? _2678 : min(_2426, _2678));
        }
        else
        {
            frontier_phi_37_36_ladder = _2428;
            frontier_phi_37_36_ladder_1 = _2427;
            frontier_phi_37_36_ladder_2 = _2426;
        }
        _2492 = frontier_phi_37_36_ladder_2;
        _2494 = frontier_phi_37_36_ladder_1;
        _2496 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2492 = _2426;
        _2494 = _2427;
        _2496 = _2428;
    }
    uvec4 _2501 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2503 = _2501.x * 14u;
    uint _2504 = _2503 + 13u;
    float _2511 = _1171 + (-1.0);
    float _2516 = (cbLight._m0[_2504].x * _2511) + 1.0;
    float _2517 = (cbLight._m0[_2504].y * _2511) + 1.0;
    float _2518 = (cbLight._m0[_2504].z * _2511) + 1.0;
    float _2519 = (cbLight._m0[_2504].w * _2511) + 1.0;
    uint _2520 = _2503 + 5u;
    float _2526 = isnan(1.0) ? _2517 : (isnan(_2517) ? 1.0 : min(_2517, 1.0));
    uint _2530 = _2503 + 4u;
    float _2539 = isnan(1.0) ? _2516 : (isnan(_2516) ? 1.0 : min(_2516, 1.0));
    uint _2543 = _2503 | 1u;
    float _2554 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_994, _995, _996));
    float _2557 = dot(vec3(cbLight._m0[_2543].xyz), vec3(_994, _995, _996));
    float _4910 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _4921 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2562 = (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * 0.3183098733425140380859375;
    float _2564 = (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * 0.3183098733425140380859375;
    float _2571 = ((cbLight._m0[_2520].x * _2526) * _2564) + (((cbLight._m0[_2530].x * _2492) * _2539) * _2562);
    float _2572 = ((_2526 * cbLight._m0[_2520].y) * _2564) + (((cbLight._m0[_2530].y * _2494) * _2539) * _2562);
    float _2573 = ((_2526 * cbLight._m0[_2520].z) * _2564) + (((cbLight._m0[_2530].z * _2496) * _2539) * _2562);
    uvec4 _2577 = floatBitsToUint(cbLight._m0[_2503 + 12u]);
    bool _2579 = _2577.x == 0u;
    float _2681;
    float _2683;
    float _2685;
    if (_2579)
    {
        _2681 = _2571;
        _2683 = _2572;
        _2685 = _2573;
    }
    else
    {
        uint _2689 = _2503 + 6u;
        float _2705 = (dot(vec3(cbLight._m0[_2503 + 2u].xyz), vec3(_994, _995, _996)) * 0.5) + 0.5;
        float _2706 = _2705 * _2705;
        float _4932 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2707 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
        float _2708 = isnan(1.0) ? _2518 : (isnan(_2518) ? 1.0 : min(_2518, 1.0));
        _2681 = (((cbLight._m0[_2689].x * 0.3183098733425140380859375) * _2707) * _2708) + _2571;
        _2683 = (((cbLight._m0[_2689].y * 0.3183098733425140380859375) * _2707) * _2708) + _2572;
        _2685 = (((cbLight._m0[_2689].z * 0.3183098733425140380859375) * _2707) * _2708) + _2573;
    }
    bool _2688 = _2577.y == 0u;
    float _2743;
    float _2745;
    float _2747;
    if (_2688)
    {
        _2743 = _2681;
        _2745 = _2683;
        _2747 = _2685;
    }
    else
    {
        uint _2916 = _2503 + 7u;
        float _2932 = (dot(vec3(cbLight._m0[_2503 + 3u].xyz), vec3(_994, _995, _996)) * 0.5) + 0.5;
        float _2933 = _2932 * _2932;
        float _4948 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2934 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
        float _2935 = isnan(1.0) ? _2519 : (isnan(_2519) ? 1.0 : min(_2519, 1.0));
        _2743 = (((cbLight._m0[_2916].x * 0.3183098733425140380859375) * _2934) * _2935) + _2681;
        _2745 = (((cbLight._m0[_2916].y * 0.3183098733425140380859375) * _2934) * _2935) + _2683;
        _2747 = (((cbLight._m0[_2916].z * 0.3183098733425140380859375) * _2934) * _2935) + _2685;
    }
    uint _2750 = _2503 + 8u;
    float _2763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _997) * 0.949999988079071044921875);
    float _2764 = _2763 * _2763;
    float _2765 = cbLight._m0[_2503].x + _1073;
    float _2766 = cbLight._m0[_2503].y + _1074;
    float _2767 = cbLight._m0[_2503].z + _1075;
    float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
    float _2772 = _2771 * _2765;
    float _2773 = _2771 * _2766;
    float _2774 = _2771 * _2767;
    float _2775 = dot(vec3(_994, _995, _996), vec3(cbLight._m0[_2503].xyz));
    float _4964 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2778 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
    float _4975 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _2779 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
    float _2780 = dot(vec3(_994, _995, _996), vec3(_2772, _2773, _2774));
    float _4986 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _2783 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
    float _2784 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2772, _2773, _2774));
    float _4997 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
    float _2788 = _2764 * _2764;
    float _2792 = ((_2783 * _2783) * (_2788 + (-1.0))) + 1.0;
    float _2800 = exp2(log2(1.0 - (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0)))) * 5.0);
    float _2801 = 0.959999978542327880859375 - _1152;
    float _2803 = 0.959999978542327880859375 - _1153;
    float _2804 = 0.959999978542327880859375 - _1154;
    float _2811 = 1.0 - _2764;
    float _2822 = (0.5 / (((_2779 * ((_2778 * _2811) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2779 * _2811) + _2764) * _2778))) * _2778;
    float _5008 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2824 = (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) * (_2788 / ((_2792 * _2792) * 3.141590118408203125));
    uint _2838 = _2503 + 9u;
    float _2849 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2543].w)) * _997) * 0.949999988079071044921875);
    float _2850 = _2849 * _2849;
    float _2851 = cbLight._m0[_2543].x + _1073;
    float _2852 = cbLight._m0[_2543].y + _1074;
    float _2853 = cbLight._m0[_2543].z + _1075;
    float _2857 = inversesqrt(dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853)));
    float _2858 = _2857 * _2851;
    float _2859 = _2857 * _2852;
    float _2860 = _2857 * _2853;
    float _2861 = dot(vec3(_994, _995, _996), vec3(cbLight._m0[_2543].xyz));
    float _5019 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
    float _2864 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
    float _2865 = dot(vec3(_994, _995, _996), vec3(_2858, _2859, _2860));
    float _5030 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
    float _2868 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
    float _2869 = dot(vec3(cbLight._m0[_2543].xyz), vec3(_2858, _2859, _2860));
    float _5041 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
    float _2873 = _2850 * _2850;
    float _2877 = ((_2868 * _2868) * (_2873 + (-1.0))) + 1.0;
    float _2884 = exp2(log2(1.0 - (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0)))) * 5.0);
    float _2891 = 1.0 - _2850;
    float _2901 = (0.5 / (((_2779 * ((_2864 * _2891) + _2850)) + 9.9999999392252902907785028219223e-09) + (((_2779 * _2891) + _2850) * _2864))) * _2864;
    float _5052 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
    float _2903 = (isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_2873 / ((_2877 * _2877) * 3.141590118408203125));
    float _2913 = (((((_2884 * _2801) + _1155) * cbLight._m0[_2838].x) * _2903) * _2526) + ((((cbLight._m0[_2750].x * _2492) * ((_2800 * _2801) + _1155)) * _2824) * _2539);
    float _2914 = (((((_2884 * _2803) + _1157) * cbLight._m0[_2838].y) * _2903) * _2526) + ((((cbLight._m0[_2750].y * _2494) * ((_2800 * _2803) + _1157)) * _2824) * _2539);
    float _2915 = (((((_2884 * _2804) + _1158) * cbLight._m0[_2838].z) * _2903) * _2526) + ((((cbLight._m0[_2750].z * _2496) * ((_2800 * _2804) + _1158)) * _2824) * _2539);
    float _2971;
    float _2973;
    float _2975;
    if (_2579)
    {
        _2971 = _2913;
        _2973 = _2914;
        _2975 = _2915;
    }
    else
    {
        uint _2977 = _2503 + 2u;
        uint _2981 = _2503 + 10u;
        float _2995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2977].w)) * _997) * 0.949999988079071044921875);
        float _2996 = _2995 * _2995;
        float _2997 = cbLight._m0[_2977].x + _1073;
        float _2998 = cbLight._m0[_2977].y + _1074;
        float _2999 = cbLight._m0[_2977].z + _1075;
        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
        float _3004 = _3003 * _2997;
        float _3005 = _3003 * _2998;
        float _3006 = _3003 * _2999;
        float _3007 = dot(vec3(_994, _995, _996), vec3(cbLight._m0[_2977].xyz));
        float _5063 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        float _3010 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
        float _3011 = dot(vec3(_994, _995, _996), vec3(_3004, _3005, _3006));
        float _5074 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        float _3014 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
        float _3015 = dot(vec3(cbLight._m0[_2977].xyz), vec3(_3004, _3005, _3006));
        float _5085 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
        float _3019 = _2996 * _2996;
        float _3023 = ((_3014 * _3014) * (_3019 + (-1.0))) + 1.0;
        float _3030 = exp2(log2(1.0 - (isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0)))) * 5.0);
        float _3037 = 1.0 - _2996;
        float _3047 = (0.5 / (((_2779 * ((_3010 * _3037) + _2996)) + 9.9999999392252902907785028219223e-09) + (((_2779 * _3037) + _2996) * _3010))) * _3010;
        float _5096 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
        float _3049 = (isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0))) * (_3019 / ((_3023 * _3023) * 3.141590118408203125));
        float _3050 = isnan(1.0) ? _2518 : (isnan(_2518) ? 1.0 : min(_2518, 1.0));
        _2971 = (((((_3030 * _2801) + _1155) * cbLight._m0[_2981].x) * _3049) * _3050) + _2913;
        _2973 = (((((_3030 * _2803) + _1157) * cbLight._m0[_2981].y) * _3049) * _3050) + _2914;
        _2975 = (((((_3030 * _2804) + _1158) * cbLight._m0[_2981].z) * _3049) * _3050) + _2915;
    }
    float _3081;
    float _3083;
    float _3085;
    if (_2688)
    {
        _3081 = _2971;
        _3083 = _2973;
        _3085 = _2975;
    }
    else
    {
        uint _3092 = _2503 + 3u;
        uint _3096 = _2503 + 11u;
        float _3110 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3092].w)) * _997) * 0.949999988079071044921875);
        float _3111 = _3110 * _3110;
        float _3112 = cbLight._m0[_3092].x + _1073;
        float _3113 = cbLight._m0[_3092].y + _1074;
        float _3114 = cbLight._m0[_3092].z + _1075;
        float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
        float _3119 = _3118 * _3112;
        float _3120 = _3118 * _3113;
        float _3121 = _3118 * _3114;
        float _3122 = dot(vec3(_994, _995, _996), vec3(cbLight._m0[_3092].xyz));
        float _5112 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
        float _3125 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
        float _3126 = dot(vec3(_994, _995, _996), vec3(_3119, _3120, _3121));
        float _5123 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
        float _3129 = isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0));
        float _3130 = dot(vec3(cbLight._m0[_3092].xyz), vec3(_3119, _3120, _3121));
        float _5134 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
        float _3134 = _3111 * _3111;
        float _3138 = ((_3129 * _3129) * (_3134 + (-1.0))) + 1.0;
        float _3145 = exp2(log2(1.0 - (isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0)))) * 5.0);
        float _3152 = 1.0 - _3111;
        float _3162 = (0.5 / (((_2779 * ((_3125 * _3152) + _3111)) + 9.9999999392252902907785028219223e-09) + (((_2779 * _3152) + _3111) * _3125))) * _3125;
        float _5145 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
        float _3164 = (isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0))) * (_3134 / ((_3138 * _3138) * 3.141590118408203125));
        float _3165 = isnan(1.0) ? _2519 : (isnan(_2519) ? 1.0 : min(_2519, 1.0));
        _3081 = (((((_3145 * _2801) + _1155) * cbLight._m0[_3096].x) * _3164) * _3165) + _2971;
        _3083 = (((((_3145 * _2803) + _1157) * cbLight._m0[_3096].y) * _3164) * _3165) + _2973;
        _3085 = (((((_3145 * _2804) + _1158) * cbLight._m0[_3096].z) * _3164) * _3165) + _2975;
    }
    float _3231;
    float _3233;
    float _3235;
    float _3237;
    float _3239;
    float _3241;
    if (_2501.y == 0u)
    {
        uvec4 _3186 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3187 = _3186.x;
        uint _3198 = uint((float(_3186.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1094) / _3187))) + floor(float(uint(cbSceneParam._m0[85u].x * _1093) / _3187)));
        float _3208 = (log2(_2279 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3209 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
        uint _3212 = uint(isnan(14.0) ? _3209 : (isnan(_3209) ? 14.0 : min(_3209, 14.0)));
        uvec4 _3217 = texelFetch(g_lightClusterGridBuffer, int(((_3212 << 2u) + (_3198 << 6u)) >> 2u));
        uint _3218 = _3217.x;
        uint _3219 = _3186.z;
        float _3298;
        float _3300;
        float _3302;
        float _3304;
        float _3306;
        float _3308;
        if (((((1u << ((_3219 >> 4u) & 15u)) + 4294967295u) & _3218) == 0u) || ((_3219 & 240u) == 0u))
        {
            _3298 = 0.0;
            _3300 = 0.0;
            _3302 = 0.0;
            _3304 = 0.0;
            _3306 = 0.0;
            _3308 = 0.0;
        }
        else
        {
            float _3299;
            float _3301;
            float _3303;
            float _3305;
            float _3307;
            float _3309;
            float _3451 = 0.0;
            float _3452 = 0.0;
            float _3453 = 0.0;
            float _3454 = 0.0;
            float _3455 = 0.0;
            float _3456 = 0.0;
            uint _3457 = 0u;
            uint _3466;
            bool _3467;
            for (;;)
            {
                _3466 = texelFetch(g_lightClassification, int((((_3212 << 5u) + (_3198 << 9u)) + (_3457 << 2u)) >> 2u)).x;
                _3467 = _3466 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3467)
                {
                    frontier_phi_71_pred = _3456;
                    frontier_phi_71_pred_1 = _3455;
                    frontier_phi_71_pred_2 = _3454;
                    frontier_phi_71_pred_3 = _3453;
                    frontier_phi_71_pred_4 = _3452;
                    frontier_phi_71_pred_5 = _3451;
                }
                else
                {
                    float _3596;
                    float _3597;
                    float _3598;
                    float _3599;
                    float _3600;
                    float _3601;
                    uint _3602;
                    _3596 = _3451;
                    _3597 = _3452;
                    _3598 = _3453;
                    _3599 = _3454;
                    _3600 = _3455;
                    _3601 = _3456;
                    _3602 = _3466;
                    float _3523;
                    float _3524;
                    float _3525;
                    float _3526;
                    float _3527;
                    float _3528;
                    for (;;)
                    {
                        uint _3606 = uint(findLSB(_3602)) + (_3457 << 5u);
                        uint _3603 = (_3602 + 4294967295u) & _3602;
                        uint _3608 = _3606 * 48u;
                        vec4 _3622 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3608)).x, texelFetch(g_PointLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3608 + 3u)).x));
                        uint _3628 = (_3606 * 48u) + 4u;
                        vec4 _3641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3628)).x, texelFetch(g_PointLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3628 + 3u)).x));
                        uint _3647 = (_3606 * 48u) + 8u;
                        vec3 _3658 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3647)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3647 + 2u)).x));
                        float _3662 = _3622.x - _2277;
                        float _3663 = _3622.y - _2278;
                        float _3664 = _3622.z - _2279;
                        float _3665 = dot(vec3(_3662, _3663, _3664), vec3(_3662, _3663, _3664));
                        float _3668 = inversesqrt(_3665);
                        float _3669 = _3668 * _3662;
                        float _3670 = _3668 * _3663;
                        float _3671 = _3668 * _3664;
                        float _3672 = dot(vec3(_1112, _1115, _1118), vec3(_3669, _3670, _3671));
                        float _3677 = 1.0 - (_3665 * _3622.w);
                        float _5171 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                        float _3678 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
                        float _3679 = sqrt(_3665) * _3641.w;
                        float _3682 = 1.39999997615814208984375 / (_3679 + 1.39999997615814208984375);
                        float _3683 = _3682 * _3682;
                        float _3686 = ((1.0 - _3683) * _3672) + _3683;
                        float _3689 = _3679 * _3679;
                        float _3693 = ((isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0))) * _3678) / ((_3689 * 0.699999988079071044921875) + 1.0);
                        float _3697 = (-0.0) - _2277;
                        float _3698 = (-0.0) - _2278;
                        float _3699 = (-0.0) - _2279;
                        float _3703 = inversesqrt(dot(vec3(_3697, _3698, _3699), vec3(_3697, _3698, _3699)));
                        float _3704 = _3703 * _3697;
                        float _3705 = _3703 * _3698;
                        float _3706 = _3703 * _3699;
                        float _3713 = exp2(log2(1.0 / ((_3689 * 3.5) + 5.0)) * 0.25);
                        float _3714 = 1.0 - _1187;
                        float _3721 = sqrt(1.0 - ((1.0 - (_3714 * _3714)) * (1.0 - (_3713 * _3713))));
                        float _3722 = _3721 * _3721;
                        float _3723 = _3722 * _3722;
                        float _3724 = _3704 + _3669;
                        float _3725 = _3705 + _3670;
                        float _3726 = _3706 + _3671;
                        float _3730 = inversesqrt(dot(vec3(_3724, _3725, _3726), vec3(_3724, _3725, _3726)));
                        float _3734 = dot(vec3(_1112, _1115, _1118), vec3(_3704, _3705, _3706));
                        float _5187 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                        float _3737 = isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0));
                        float _3738 = dot(vec3(_1112, _1115, _1118), vec3(_3730 * _3724, _3730 * _3725, _3730 * _3726));
                        float _5198 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                        float _3741 = isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0));
                        float _3745 = ((_3741 * _3741) * (_3723 + (-1.0))) + 1.0;
                        float _3746 = _3682 * _3722;
                        float _3747 = _3746 * _3746;
                        float _3750 = ((1.0 - _3747) * _3672) + _3747;
                        float _5209 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                        float _3751 = isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0));
                        float _3752 = 1.0 - _3722;
                        float _3762 = (0.5 / (((_3751 * ((_3737 * _3752) + _3722)) + 9.9999999392252902907785028219223e-09) + (((_3751 * _3752) + _3722) * _3737))) * _3751;
                        float _5220 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                        float _3773 = (((_3723 * 3.1415927410125732421875) * (isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0)))) / ((_3745 * _3745) * ((_3689 * 2.1991131305694580078125) + 3.141590118408203125))) * _3678;
                        _3526 = (_3693 * _3641.x) + _3599;
                        _3527 = (_3693 * _3641.y) + _3600;
                        _3528 = (_3693 * _3641.z) + _3601;
                        _3523 = (_3773 * _3658.x) + _3596;
                        _3524 = (_3773 * _3658.y) + _3597;
                        _3525 = (_3773 * _3658.z) + _3598;
                        if (_3603 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3596 = _3523;
                            _3597 = _3524;
                            _3598 = _3525;
                            _3599 = _3526;
                            _3600 = _3527;
                            _3601 = _3528;
                            _3602 = _3603;
                        }
                    }
                    frontier_phi_71_pred = _3528;
                    frontier_phi_71_pred_1 = _3527;
                    frontier_phi_71_pred_2 = _3526;
                    frontier_phi_71_pred_3 = _3525;
                    frontier_phi_71_pred_4 = _3524;
                    frontier_phi_71_pred_5 = _3523;
                }
                _3309 = frontier_phi_71_pred;
                _3307 = frontier_phi_71_pred_1;
                _3305 = frontier_phi_71_pred_2;
                _3303 = frontier_phi_71_pred_3;
                _3301 = frontier_phi_71_pred_4;
                _3299 = frontier_phi_71_pred_5;
                uint _3458 = _3457 + 1u;
                if (_3458 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3451 = _3299;
                    _3452 = _3301;
                    _3453 = _3303;
                    _3454 = _3305;
                    _3455 = _3307;
                    _3456 = _3309;
                    _3457 = _3458;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3298 = _3299;
            _3300 = _3301;
            _3302 = _3303;
            _3304 = _3305;
            _3306 = _3307;
            _3308 = _3309;
        }
        uvec4 _3312 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3313 = _3312.z;
        uint _3315 = (_3313 >> 8u) & 15u;
        float _3419;
        float _3421;
        float _3423;
        float _3425;
        float _3427;
        float _3429;
        if (((4294967295u << _3315) & _3218) == 0u)
        {
            _3419 = _3298;
            _3421 = _3300;
            _3423 = _3302;
            _3425 = _3304;
            _3427 = _3306;
            _3429 = _3308;
        }
        else
        {
            float _3444 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
            float _3445 = _3444 * _2277;
            float _3446 = _3444 * _2278;
            float _3447 = _3444 * _2279;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3315 < ((_3313 >> 12u) & 15u))
            {
                float _3420;
                float _3422;
                float _3424;
                float _3426;
                float _3428;
                float _3430;
                float _3579 = _3298;
                float _3580 = _3300;
                float _3581 = _3302;
                float _3582 = _3304;
                float _3583 = _3306;
                float _3584 = _3308;
                uint _3585 = _3315;
                uint _3594;
                bool _3595;
                for (;;)
                {
                    _3594 = texelFetch(g_lightClassification, int((((_3212 << 5u) + (_3198 << 9u)) + (_3585 << 2u)) >> 2u)).x;
                    _3595 = _3594 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3595)
                    {
                        frontier_phi_82_pred = _3584;
                        frontier_phi_82_pred_1 = _3583;
                        frontier_phi_82_pred_2 = _3582;
                        frontier_phi_82_pred_3 = _3581;
                        frontier_phi_82_pred_4 = _3580;
                        frontier_phi_82_pred_5 = _3579;
                    }
                    else
                    {
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _4080;
                        float _4081;
                        float _4082;
                        float _4083;
                        float _4084;
                        float _4085;
                        float _3800 = _3579;
                        float _3801 = _3580;
                        float _3802 = _3581;
                        float _3803 = _3582;
                        float _3804 = _3583;
                        float _3805 = _3584;
                        uint _3806 = _3594;
                        uint _3807;
                        vec4 _3832;
                        float _3833;
                        vec4 _3848;
                        vec3 _3860;
                        vec4 _3875;
                        vec4 _3890;
                        float _3936;
                        bool _3937;
                        for (;;)
                        {
                            uint _3817 = ((_3585 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3806));
                            _3807 = (_3806 + 4294967295u) & _3806;
                            uint _3819 = _3817 * 40u;
                            _3832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 3u)).x));
                            _3833 = _3832.w;
                            uint _3835 = (_3817 * 40u) + 4u;
                            _3848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 3u)).x));
                            uint _3850 = (_3817 * 40u) + 8u;
                            _3860 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3850 + 2u)).x));
                            uint _3862 = (_3817 * 40u) + 16u;
                            _3875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 3u)).x));
                            uint _3877 = (_3817 * 40u) + 20u;
                            _3890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 3u)).x));
                            uint _3892 = (_3817 * 40u) + 24u;
                            vec4 _3905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3892 + 3u)).x));
                            uint _3911 = (_3817 * 40u) + 28u;
                            vec4 _3924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 3u)).x));
                            _3936 = fma(_2279, _3924.z, fma(_2278, _3924.y, _3924.x * _2277)) + _3924.w;
                            _3937 = !((fma(_2279, _3905.z, fma(_2278, _3905.y, _3905.x * _2277)) + _3905.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3937)
                            {
                                float _3964 = _3832.x - _2277;
                                float _3965 = _3832.y - _2278;
                                float _3966 = _3832.z - _2279;
                                float _3967 = dot(vec3(_3964, _3965, _3966), vec3(_3964, _3965, _3966));
                                float _3970 = inversesqrt(_3967);
                                float _3971 = _3970 * _3964;
                                float _3972 = _3970 * _3965;
                                float _3973 = _3970 * _3966;
                                float _3977 = 1.0 - (_3967 / (_3833 * _3833));
                                float _5231 = isnan(0.0) ? _3977 : (isnan(_3977) ? 0.0 : max(_3977, 0.0));
                                float _3978 = isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0));
                                float _3982 = sqrt(_3967) * _3848.w;
                                float _3984 = 1.39999997615814208984375 / (_3982 + 1.39999997615814208984375);
                                float _3985 = _3984 * _3984;
                                float _3988 = ((1.0 - _3985) * dot(vec3(_3971, _3972, _3973), vec3(_1112, _1115, _1118))) + _3985;
                                float _3991 = _3982 * _3982;
                                float _3995 = (fma(_2279, _3875.z, fma(_2278, _3875.y, _3875.x * _2277)) + _3875.w) / _3936;
                                float _3996 = (fma(_2279, _3890.z, fma(_2278, _3890.y, _3890.x * _2277)) + _3890.w) / _3936;
                                float _4000 = 1.0 - dot(vec2(_3995, _3996), vec2(_3995, _3996));
                                float _5247 = isnan(0.0) ? _4000 : (isnan(_4000) ? 0.0 : max(_4000, 0.0));
                                float _4001 = isnan(1.0) ? _5247 : (isnan(_5247) ? 1.0 : min(_5247, 1.0));
                                float _4002 = _4001 * (((isnan(0.0) ? _3988 : (isnan(_3988) ? 0.0 : max(_3988, 0.0))) * _3978) / ((_3991 * 0.699999988079071044921875) + 1.0));
                                float _4014 = exp2(log2(1.0 / ((_3991 * 3.5) + 5.0)) * 0.25);
                                float _4015 = 1.0 - _1187;
                                float _4022 = sqrt(1.0 - ((1.0 - (_4015 * _4015)) * (1.0 - (_4014 * _4014))));
                                float _4023 = _4022 * _4022;
                                float _4024 = _4023 * _4023;
                                float _4025 = _3971 - _3445;
                                float _4026 = _3972 - _3446;
                                float _4027 = _3973 - _3447;
                                float _4031 = inversesqrt(dot(vec3(_4025, _4026, _4027), vec3(_4025, _4026, _4027)));
                                float _4035 = dot(vec3(_1112, _1115, _1118), vec3((-0.0) - _3445, (-0.0) - _3446, (-0.0) - _3447));
                                float _5258 = isnan(0.0) ? _4035 : (isnan(_4035) ? 0.0 : max(_4035, 0.0));
                                float _4038 = isnan(1.0) ? _5258 : (isnan(_5258) ? 1.0 : min(_5258, 1.0));
                                float _4039 = dot(vec3(_1112, _1115, _1118), vec3(_4031 * _4025, _4031 * _4026, _4031 * _4027));
                                float _5269 = isnan(0.0) ? _4039 : (isnan(_4039) ? 0.0 : max(_4039, 0.0));
                                float _4042 = isnan(1.0) ? _5269 : (isnan(_5269) ? 1.0 : min(_5269, 1.0));
                                float _4046 = ((_4042 * _4042) * (_4024 + (-1.0))) + 1.0;
                                float _4047 = _3984 * _4023;
                                float _4048 = _4047 * _4047;
                                float _4054 = ((1.0 - _4048) * dot(vec3(_1112, _1115, _1118), vec3(_3971, _3972, _3973))) + _4048;
                                float _5280 = isnan(0.0) ? _4054 : (isnan(_4054) ? 0.0 : max(_4054, 0.0));
                                float _4055 = isnan(1.0) ? _5280 : (isnan(_5280) ? 1.0 : min(_5280, 1.0));
                                float _4056 = 1.0 - _4023;
                                float _4066 = (0.5 / (((_4055 * ((_4038 * _4056) + _4023)) + 9.9999999392252902907785028219223e-09) + (((_4055 * _4056) + _4023) * _4038))) * _4055;
                                float _5291 = isnan(0.0) ? _4066 : (isnan(_4066) ? 0.0 : max(_4066, 0.0));
                                float _4076 = (_4001 * _3978) * (((_4024 * 3.1415927410125732421875) * (isnan(1.0) ? _5291 : (isnan(_5291) ? 1.0 : min(_5291, 1.0)))) / ((_4046 * _4046) * ((_3991 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4002 * _3848.z;
                                frontier_phi_88_pred_1 = _4002 * _3848.y;
                                frontier_phi_88_pred_2 = _4002 * _3848.x;
                                frontier_phi_88_pred_3 = _4076 * _3860.z;
                                frontier_phi_88_pred_4 = _4076 * _3860.y;
                                frontier_phi_88_pred_5 = _4076 * _3860.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4085 = frontier_phi_88_pred;
                            _4084 = frontier_phi_88_pred_1;
                            _4083 = frontier_phi_88_pred_2;
                            _4082 = frontier_phi_88_pred_3;
                            _4081 = frontier_phi_88_pred_4;
                            _4080 = frontier_phi_88_pred_5;
                            _3790 = _4083 + _3803;
                            _3791 = _4084 + _3804;
                            _3792 = _4085 + _3805;
                            _3787 = _4080 + _3800;
                            _3788 = _4081 + _3801;
                            _3789 = _4082 + _3802;
                            if (_3807 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3800 = _3787;
                                _3801 = _3788;
                                _3802 = _3789;
                                _3803 = _3790;
                                _3804 = _3791;
                                _3805 = _3792;
                                _3806 = _3807;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3792;
                        frontier_phi_82_pred_1 = _3791;
                        frontier_phi_82_pred_2 = _3790;
                        frontier_phi_82_pred_3 = _3789;
                        frontier_phi_82_pred_4 = _3788;
                        frontier_phi_82_pred_5 = _3787;
                    }
                    _3430 = frontier_phi_82_pred;
                    _3428 = frontier_phi_82_pred_1;
                    _3426 = frontier_phi_82_pred_2;
                    _3424 = frontier_phi_82_pred_3;
                    _3422 = frontier_phi_82_pred_4;
                    _3420 = frontier_phi_82_pred_5;
                    uint _3586 = _3585 + 1u;
                    if (_3586 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3579 = _3420;
                        _3580 = _3422;
                        _3581 = _3424;
                        _3582 = _3426;
                        _3583 = _3428;
                        _3584 = _3430;
                        _3585 = _3586;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3426;
                frontier_phi_63_64_ladder_1 = _3430;
                frontier_phi_63_64_ladder_2 = _3428;
                frontier_phi_63_64_ladder_3 = _3424;
                frontier_phi_63_64_ladder_4 = _3422;
                frontier_phi_63_64_ladder_5 = _3420;
            }
            else
            {
                frontier_phi_63_64_ladder = _3304;
                frontier_phi_63_64_ladder_1 = _3308;
                frontier_phi_63_64_ladder_2 = _3306;
                frontier_phi_63_64_ladder_3 = _3302;
                frontier_phi_63_64_ladder_4 = _3300;
                frontier_phi_63_64_ladder_5 = _3298;
            }
            _3419 = frontier_phi_63_64_ladder_5;
            _3421 = frontier_phi_63_64_ladder_4;
            _3423 = frontier_phi_63_64_ladder_3;
            _3425 = frontier_phi_63_64_ladder;
            _3427 = frontier_phi_63_64_ladder_2;
            _3429 = frontier_phi_63_64_ladder_1;
        }
        float _3434 = isnan(1.0) ? _1171 : (isnan(_1171) ? 1.0 : min(_1171, 1.0));
        _3231 = (_3434 * _3425) + _2743;
        _3233 = (_3434 * _3427) + _2745;
        _3235 = (_3434 * _3429) + _2747;
        _3237 = ((_3419 * _1155) * _3434) + _3081;
        _3239 = ((_3421 * _1157) * _3434) + _3083;
        _3241 = ((_3423 * _1158) * _3434) + _3085;
    }
    else
    {
        _3231 = _2743;
        _3233 = _2745;
        _3235 = _2747;
        _3237 = _3081;
        _3239 = _3083;
        _3241 = _3085;
    }
    float _5307 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _5318 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _5329 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _3258 = ((isnan(1.0) ? _5307 : (isnan(_5307) ? 1.0 : min(_5307, 1.0))) * (_3231 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1171))) + ((_3237 + ((isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0))) * _2009)) * cbPerFrame._m0[3u].x);
    float _3259 = ((isnan(1.0) ? _5318 : (isnan(_5318) ? 1.0 : min(_5318, 1.0))) * (_3233 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1171))) + ((_3239 + ((isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0))) * _2009)) * cbPerFrame._m0[3u].x);
    float _3260 = ((isnan(1.0) ? _5329 : (isnan(_5329) ? 1.0 : min(_5329, 1.0))) * (_3235 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1171))) + ((_3241 + ((isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0))) * _2009)) * cbPerFrame._m0[3u].x);
    uint _3261 = _297 + 6u;
    float _3269 = _1093 / cbSceneParam._m0[86u].x;
    float _3270 = _1094 / cbSceneParam._m0[86u].y;
    vec4 _3284 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3269, _3270, (log2((isnan(cbSceneParam._m0[77u].w) ? _1016 : (isnan(_1016) ? cbSceneParam._m0[77u].w : min(_1016, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3286 = _3284.x;
    float _3287 = _3284.y;
    float _3288 = _3284.z;
    float _3289 = _3284.w;
    float _3361;
    float _3363;
    float _3365;
    float _3367;
    if (_1016 > cbSceneParam._m0[78u].w)
    {
        float _3323 = isnan(_1016) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1016 : min(cbSceneParam._m0[80u].w, _1016));
        float _3324 = _3323 / _1016;
        float _3335 = _3324 * _1066;
        float _3336 = _1067 * _3324;
        float _3337 = (-0.0) - _3336;
        float _3339 = _3324 * _1068;
        float _3341 = (cbSceneParam._m0[77u].w * _3337) / _3323;
        float _3342 = _3341 + cbSceneParam._m0[79u].w;
        float _3343 = cbSceneParam._m0[79u].w - _3336;
        float _3349 = sqrt(((_3335 * _3335) + (_3336 * _3336)) + (_3339 * _3339));
        float _3352 = (1.0 - (cbSceneParam._m0[77u].w / _3323)) * _3349;
        float _3357 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3359 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3536;
        if (abs((_3337 - _3341) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3536 = ((((_3342 > 0.0) ? exp2(_3357 * _3342) : (2.0 - exp2(_3359 * _3342))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3352;
        }
        else
        {
            float _3480 = 1.0 / cbSceneParam._m0[80u].x;
            float _3481 = isnan(_3343) ? _3342 : (isnan(_3342) ? _3343 : max(_3342, _3343));
            float _3482 = isnan(_3343) ? _3342 : (isnan(_3342) ? _3343 : min(_3342, _3343));
            float _3491 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : min(_3481, 0.0));
            float _3492 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : min(_3482, 0.0));
            _3536 = ((abs(_3349 / _3337) * cbSceneParam._m0[80u].y) * ((((_3491 - _3492) * 2.0) - ((exp2(_3357 * (isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0)))) - exp2(_3357 * (isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0))))) * _3480)) - ((exp2(_3359 * _3491) - exp2(_3359 * _3492)) * _3480))) + (_3352 * cbSceneParam._m0[80u].z);
        }
        vec4 _3538 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3269, _3270, 1.0), 0.0);
        float _3547 = exp2((_3536 * (-1.44269502162933349609375)) * (1.0 - _3538.w));
        float _3548 = log2(_3547);
        float _3564 = log2(_3289);
        _3361 = (exp2(_3564 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3548 * cbSceneParam._m0[78u].x)) * _3538.x) / cbSceneParam._m0[78u].x)) + _3286;
        _3363 = (exp2(_3564 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3548 * cbSceneParam._m0[78u].y)) * _3538.y) / cbSceneParam._m0[78u].y)) + _3287;
        _3365 = (exp2(_3564 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3548 * cbSceneParam._m0[78u].z)) * _3538.z) / cbSceneParam._m0[78u].z)) + _3288;
        _3367 = _3547 * _3289;
    }
    else
    {
        _3361 = _3286;
        _3363 = _3287;
        _3365 = _3288;
        _3367 = _3289;
    }
    bool _3574;
    vec4 _3377;
    vec4 _3399;
    float _3401;
    float _3405;
    float _3406;
    float _3407;
    float _3408;
    bool _3418;
    for (;;)
    {
        _3377 = cbMatDynParam._m0[0u];
        float _3379 = roundEven(_3377.y);
        bool _3380 = _3379 == 3.0;
        float _3381 = log2(_3367);
        float _3388 = exp2(_3381 * cbSceneParam._m0[78u].x) * _3258;
        float _3389 = exp2(_3381 * cbSceneParam._m0[78u].y) * _3259;
        float _3390 = exp2(_3381 * cbSceneParam._m0[78u].z) * _3260;
        float _3397 = _1082 + (-0.5);
        _3399 = cbMtdParam._m0[1u];
        _3401 = _3399.y * _3397;
        float _3404 = (_3379 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3405 = _3404 * (_3380 ? _3388 : (_3388 + (cbSceneParam._m0[72u].w * _3361)));
        _3406 = _3404 * (_3380 ? _3389 : (_3389 + (cbSceneParam._m0[72u].w * _3363)));
        _3407 = _3404 * (_3380 ? _3390 : (_3390 + (cbSceneParam._m0[72u].w * _3365)));
        _3408 = _3397 * 0.999000012874603271484375;
        _3418 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3418)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _3408) < 0.5)
            {
                _3574 = true;
                break;
            }
        }
        uint _3515 = _1131 + uint(_3377.w);
        if ((cbInstanceData._m0[_3515].w < 1.0) && ((cbInstanceData._m0[_3515].w + _3408) < 0.5))
        {
            _3574 = true;
            break;
        }
        if ((_3401 + 1.0) < _3399.x)
        {
            _3574 = true;
            break;
        }
        _3574 = false;
        break;
    }
    float _3778;
    if (_3574)
    {
        discard_state = true;
        _3778 = 0.0;
    }
    else
    {
        _3778 = cbInstanceData._m0[_3261].w;
    }
    SV_Target.x = _3405;
    SV_Target.y = _3406;
    SV_Target.z = _3407;
    SV_Target.w = _3778;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3261].w;
    discard_exit();
}


