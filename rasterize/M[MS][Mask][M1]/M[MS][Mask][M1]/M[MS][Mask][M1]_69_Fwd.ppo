#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1557;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3883 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3894 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3905 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _378 = _373.x * cbMtdParam._m0[11u].x;
    float _379 = _373.y * cbMtdParam._m0[11u].y;
    float _380 = _373.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _464 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _481 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _418.x) * 2.0) - ((((_452 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3916 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _489 = (_482 * ((_399.x * cbMtdParam._m0[12u].x) - _378)) + _378;
    float _490 = (_482 * ((_399.y * cbMtdParam._m0[12u].y) - _379)) + _379;
    float _491 = (_482 * ((_399.z * cbMtdParam._m0[12u].z) - _380)) + _380;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _530 = _528.x;
    float _540 = dot(vec4(_530, _528.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _554 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _418.y) * 2.0) - ((((_530 - _540) * cbMtdParam._m0[23u].w) + _540) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3927 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _565 = (_347.x * cbMtdParam._m0[9u].x) * ((_555 * ((_508.x * cbMtdParam._m0[13u].x) - _489)) + _489);
    float _566 = (_347.y * cbMtdParam._m0[9u].y) * ((_555 * ((_508.y * cbMtdParam._m0[13u].y) - _490)) + _490);
    float _567 = (_347.z * cbMtdParam._m0[9u].z) * ((_555 * ((_508.z * cbMtdParam._m0[13u].z) - _491)) + _491);
    float _571 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _565;
    float _574 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _566;
    float _577 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _567;
    float _585 = (((_565 - _571) * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) + _571) * 4.55000019073486328125;
    float _587 = (((_566 - _574) * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) + _574) * 4.55000019073486328125;
    float _589 = (((_567 - _577) * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) + _577) * 4.55000019073486328125;
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _648 = _646.x;
    float _649 = _646.y;
    float _650 = _646.z;
    float _657 = ((_629.x - _648) * _482) + _648;
    float _658 = ((_629.y - _649) * _482) + _649;
    float _659 = ((_629.z - _650) * _482) + _650;
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _684 = ((_671.z - _659) * _555) + _659;
    float _687 = ((((_671.x - _657) * _555) + _657) * 2.0) + (-1.0);
    float _688 = ((((_671.y - _658) * _555) + _658) * 2.0) + (-1.0);
    float _689 = dot(vec2(_687, _688), vec2(_687, _688));
    float _3938 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _694 = sqrt(1.0 - (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))));
    vec4 _708 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _733 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _735 = _733.x;
    float _736 = 1.0 - _735;
    float _745 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _748 = ((isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : min(_745, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _757 = (_748 - ((((((_735 - _736) * cbMtdParam._m0[24u].z) + _736) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _748))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3959 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _758 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _765 = (_758 * (cbMtdParam._m0[17u].x - _585)) + _585;
    float _766 = (_758 * (cbMtdParam._m0[17u].y - _587)) + _587;
    float _767 = (_758 * (cbMtdParam._m0[17u].z - _589)) + _589;
    vec4 _779 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _781 = _779.x;
    float _782 = 1.0 - _781;
    float _807 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_781 - _782) * cbMtdParam._m0[24u].w) + _782) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3970 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _808 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _816 = ((((cbMtdParam._m0[10u].x - _765) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _808) + _765;
    float _817 = ((((cbMtdParam._m0[10u].y - _766) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _808) + _766;
    float _818 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _767)) * _808) + _767;
    vec4 _844 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _846 = _844.x;
    float _863 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _846) * _482) + _846;
    float _880 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _863) * _555) + _863;
    float _884 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _880) * cbMtdParam._m0[19u].z) + _880;
    float _886 = _884 - (_884 * _758);
    float _888 = _886 - (_886 * _808);
    float _893 = (((_606.z - _684) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _684;
    float _897 = ((_708.z - _893) * cbMtdParam._m0[19u].w) + _893;
    vec4 _911 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _918 = (_911.x * 2.0) + (-1.0);
    float _919 = (_911.y * 2.0) + (-1.0);
    float _920 = dot(vec2(_918, _919), vec2(_918, _919));
    float _3981 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _928 = (_758 * (_911.z - _897)) + _897;
    float _931 = ((cbMtdParam._m0[23u].x - _928) * _808) + _928;
    vec4 _952 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _958 = (_952.x * 2.0) + (-1.0);
    float _959 = (_952.y * 2.0) + (-1.0);
    float _960 = dot(vec2(_958, _959), vec2(_958, _959));
    float _3992 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _974 = (_687 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_606.x * 2.0) + (-1.0)))) + (((_708.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _975 = (_688 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_606.y * 2.0) + (-1.0)))) + (((_708.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _987 = (((_918 - _974) + (cbMtdParam._m0[21u].x * _974)) * _758) + _974;
    float _988 = (((_919 - _975) + (cbMtdParam._m0[21u].x * _975)) * _758) + _975;
    float _989 = (_758 * (sqrt(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) - _694)) + _694;
    float _1000 = (((_958 - _987) + (_987 * cbMtdParam._m0[22u].z)) * _808) + _987;
    float _1001 = (((_959 - _988) + (_988 * cbMtdParam._m0[22u].z)) * _808) + _988;
    float _1002 = ((sqrt(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) - _989) * _808) + _989;
    float _1004 = cbMtdParam._m0[22u].x + _708.w;
    float _1007 = fma(_1002, _259 * NORMAL.x, fma(_1001, _266 * TANGENT.x, (_252 * _244) * _1000));
    float _1010 = fma(_1002, _259 * NORMAL.y, fma(_1001, _266 * TANGENT.y, (_252 * _245) * _1000));
    float _1013 = fma(_1002, _259 * NORMAL.z, fma(_1001, _266 * TANGENT.z, (_252 * _246) * _1000));
    float _1017 = inversesqrt(dot(vec3(_1007, _1010, _1013), vec3(_1007, _1010, _1013)));
    float _1018 = _1017 * _1007;
    float _1019 = _1017 * _1010;
    float _1020 = _1017 * _1013;
    float _4003 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _1021 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _4025 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4036 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4047 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4058 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _1026 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _1040 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1090 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1080);
    float _1091 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1080);
    float _1092 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1080);
    float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
    float _1097 = _1090 * _1096;
    float _1098 = _1091 * _1096;
    float _1099 = _1092 * _1096;
    float _1105 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1106 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1124 = fma(_1020, cbSceneParam._m0[5u].z, fma(_1019, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1018));
    float _1127 = fma(_1020, cbSceneParam._m0[6u].z, fma(_1019, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1018));
    float _1130 = fma(_1020, cbSceneParam._m0[7u].z, fma(_1019, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1018));
    uint _1144 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1150 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_1144].x;
    float _1151 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_1144].y;
    float _1152 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * cbInstanceData._m0[_1144].z;
    float _4069 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _1153 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _1154 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _1155 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _1156 = 1.0 - _1026;
    float _1157 = _1153 * _1156;
    float _1158 = _1154 * _1156;
    float _1159 = _1155 * _1156;
    float _1164 = (_1153 + (-0.039999999105930328369140625)) * _1026;
    float _1165 = (_1154 + (-0.039999999105930328369140625)) * _1026;
    float _1166 = (_1155 + (-0.039999999105930328369140625)) * _1026;
    float _1167 = _1164 + 0.039999999105930328369140625;
    float _1169 = _1165 + 0.039999999105930328369140625;
    float _1170 = _1166 + 0.039999999105930328369140625;
    vec4 _1179 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1105, cbSceneParam._m0[86u].y * _1106));
    float _1183 = ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * TEXCOORD_5.w) * _1179.x;
    float _1184 = dot(vec3(_1018, _1019, _1020), vec3(_1097, _1098, _1099));
    float _1187 = _1184 * 2.0;
    float _1191 = (_1187 * _1018) - _1097;
    float _1192 = (_1187 * _1019) - _1098;
    float _1193 = (_1187 * _1020) - _1099;
    float _1197 = abs(dot(vec3(_1097, _1098, _1099), vec3(_1018, _1019, _1020)));
    float _4102 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    float _1199 = sqrt(_1021);
    float _1212 = exp2((_1199 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1199 * 3.0));
    float _1218 = (1.0 - _1212) * ((_1199 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1219 = _1212 * _1199;
    float _1247 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1251 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1255 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1556;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1281 = fma(_1255, cbModelParam._m0[26u].z, fma(_1251, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1247));
        float _1285 = fma(_1255, cbModelParam._m0[27u].z, fma(_1251, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1247));
        float _1289 = fma(_1255, cbModelParam._m0[28u].z, fma(_1251, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1247));
        float _1314 = _1247 + _1018;
        float _1315 = _1251 + _1019;
        float _1316 = _1255 + _1020;
        float _1326 = fma(_1316, cbModelParam._m0[26u].z, fma(_1315, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1314)) - _1281;
        float _1327 = fma(_1316, cbModelParam._m0[27u].z, fma(_1315, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1314)) - _1285;
        float _1328 = fma(_1316, cbModelParam._m0[28u].z, fma(_1315, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1314)) - _1289;
        float _1332 = inversesqrt(dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328)));
        float _1345 = ((_1332 * _1326) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1281 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1332 * _1327) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1285 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1332 * _1328) / cbModelParam._m0[34u].z) + ((((((_1289 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        float _1384 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1350.x + (-0.5));
        float _1386 = _1384 * (_1350.y + (-0.5));
        float _1387 = _1384 * (_1350.z + (-0.5));
        float _1394 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1357.x + (-0.5));
        float _1396 = _1394 * (_1357.y + (-0.5));
        float _1397 = _1394 * (_1357.z + (-0.5));
        float _1404 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1364.x + (-0.5));
        float _1406 = _1404 * (_1364.y + (-0.5));
        float _1407 = _1404 * (_1364.z + (-0.5));
        float _1414 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1371.x + (-0.5));
        float _1416 = _1414 * (_1371.y + (-0.5));
        float _1417 = _1414 * (_1371.z + (-0.5));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = _1385 * 0.5;
        float _1422 = _1395 * 0.5;
        float _1423 = _1405 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1438 = (dot(vec3(_1018, _1019, _1020), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1448 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4150 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1450 + 1.0))) + _1455) * _1418;
        float _1465 = _1386 * 0.5;
        float _1466 = _1396 * 0.5;
        float _1467 = _1406 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_1018, _1019, _1020), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4183 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1492 + 1.0))) + _1497) * _1419;
        float _1507 = _1387 * 0.5;
        float _1508 = _1397 * 0.5;
        float _1509 = _1407 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_1018, _1019, _1020), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4216 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1534 + 1.0))) + _1539) * _1420;
        _1556 = _1387;
        _1558 = _1386;
        _1559 = _1385;
        _1560 = _1397;
        _1561 = _1396;
        _1562 = _1395;
        _1563 = _1407;
        _1564 = _1406;
        _1565 = _1405;
        _1566 = _1420;
        _1567 = _1419;
        _1568 = _1418;
        _1569 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1570 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1571 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
    }
    else
    {
        _1556 = _1557;
        _1558 = _1557;
        _1559 = _1557;
        _1560 = _1557;
        _1561 = _1557;
        _1562 = _1557;
        _1563 = _1557;
        _1564 = _1557;
        _1565 = _1557;
        _1566 = _1557;
        _1567 = _1557;
        _1568 = _1557;
        _1569 = 0.0;
        _1570 = 0.0;
        _1571 = 0.0;
    }
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1595 = fma(_1255, cbModelParam._m0[30u].z, fma(_1251, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1247));
        float _1599 = fma(_1255, cbModelParam._m0[31u].z, fma(_1251, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1247));
        float _1603 = fma(_1255, cbModelParam._m0[32u].z, fma(_1251, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1247));
        float _1626 = _1247 + _1018;
        float _1627 = _1251 + _1019;
        float _1628 = _1255 + _1020;
        float _1638 = fma(_1628, cbModelParam._m0[30u].z, fma(_1627, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1626)) - _1595;
        float _1639 = fma(_1628, cbModelParam._m0[31u].z, fma(_1627, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1626)) - _1599;
        float _1640 = fma(_1628, cbModelParam._m0[32u].z, fma(_1627, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1626)) - _1603;
        float _1644 = inversesqrt(dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640)));
        float _1657 = ((_1644 * _1638) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1595 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1658 = ((_1644 * _1639) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1599 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1659 = ((_1644 * _1640) / cbModelParam._m0[35u].z) + ((((((_1603 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1661 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1657, _1658, _1659), 0.0);
        float _1694 = exp2((_1661.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1661.x + (-0.5));
        float _1696 = _1694 * (_1661.y + (-0.5));
        float _1697 = _1694 * (_1661.z + (-0.5));
        float _1704 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1705 = _1704 * (_1668.x + (-0.5));
        float _1706 = _1704 * (_1668.y + (-0.5));
        float _1707 = _1704 * (_1668.z + (-0.5));
        float _1714 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1715 = _1714 * (_1675.x + (-0.5));
        float _1716 = _1714 * (_1675.y + (-0.5));
        float _1717 = _1714 * (_1675.z + (-0.5));
        float _1724 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1725 = _1724 * (_1682.x + (-0.5));
        float _1726 = _1724 * (_1682.y + (-0.5));
        float _1727 = _1724 * (_1682.z + (-0.5));
        float _1728 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1729 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1730 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1731 = _1695 * 0.5;
        float _1732 = _1705 * 0.5;
        float _1733 = _1715 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_1018, _1019, _1020), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1728 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4279 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1758 + 1.0))) + _1763) * _1728;
        float _1773 = _1696 * 0.5;
        float _1774 = _1706 * 0.5;
        float _1775 = _1716 * 0.5;
        float _1776 = dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775));
        float _1781 = (_1776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1776);
        float _1789 = (dot(vec3(_1018, _1019, _1020), vec3(_1781 * _1773, _1781 * _1774, _1781 * _1775)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1798 = sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775)) / (_1729 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1800 = _1799 * 2.0;
        float _1804 = (1.0 - _1799) / (_1799 + 1.0);
        float _4312 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1814 = ((((1.0 - _1805) * (_1800 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1800 + 1.0))) + _1805) * _1729;
        float _1815 = _1697 * 0.5;
        float _1816 = _1707 * 0.5;
        float _1817 = _1717 * 0.5;
        float _1818 = dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817));
        float _1823 = (_1818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1818);
        float _1831 = (dot(vec3(_1018, _1019, _1020), vec3(_1823 * _1815, _1823 * _1816, _1823 * _1817)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1840 = sqrt(((_1816 * _1816) + (_1815 * _1815)) + (_1817 * _1817)) / (_1730 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1842 = _1841 * 2.0;
        float _1846 = (1.0 - _1841) / (_1841 + 1.0);
        float _4345 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1856 = ((((1.0 - _1847) * (_1842 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1842 + 1.0))) + _1847) * _1730;
        _1864 = _1697;
        _1865 = _1696;
        _1866 = _1695;
        _1867 = _1707;
        _1868 = _1706;
        _1869 = _1705;
        _1870 = _1717;
        _1871 = _1716;
        _1872 = _1715;
        _1873 = _1730;
        _1874 = _1729;
        _1875 = _1728;
        _1876 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
        _1877 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)));
        _1878 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)));
    }
    else
    {
        _1864 = _1557;
        _1865 = _1557;
        _1866 = _1557;
        _1867 = _1557;
        _1868 = _1557;
        _1869 = _1557;
        _1870 = _1557;
        _1871 = _1557;
        _1872 = _1557;
        _1873 = _1557;
        _1874 = _1557;
        _1875 = _1557;
        _1876 = 0.0;
        _1877 = 0.0;
        _1878 = 0.0;
    }
    float _1888 = (cbModelParam._m0[1u].x * (_1876 - _1569)) + _1569;
    float _1889 = (cbModelParam._m0[1u].x * (_1877 - _1570)) + _1570;
    float _1890 = (cbModelParam._m0[1u].x * (_1878 - _1571)) + _1571;
    float _1911 = fma(_1890, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1888 * cbSceneParam._m0[89u].x));
    float _1914 = fma(_1890, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1888 * cbSceneParam._m0[90u].x));
    float _1917 = fma(_1890, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1888));
    float _1932 = _1191 * 0.5;
    float _1933 = _1192 * 0.5;
    float _1934 = _1193 * 0.5;
    float _1935 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1866, _1869, _1872, _1875));
    float _1938 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1865, _1868, _1871, _1874));
    float _1941 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1864, _1867, _1870, _1873));
    float _1975;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1948 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1556, _1560, _1563, _1566));
        float _1952 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1558, _1561, _1564, _1567));
        float _1956 = dot(vec4(_1932, _1933, _1934, 1.0), vec4(_1559, _1562, _1565, _1568));
        float _1963 = dot(vec4(cbModelParam._m0[39u]), vec4(_1932, _1933, _1934, 1.0));
        _1975 = dot(vec3(isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)), isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1963) ? 0.0 : (isnan(0.0) ? _1963 : max(0.0, _1963))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1975 = 1.0;
    }
    float _1986;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1977 = dot(vec4(cbModelParam._m0[40u]), vec4(_1932, _1933, _1934, 1.0));
        _1986 = dot(vec3(isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1977) ? 0.0 : (isnan(0.0) ? _1977 : max(0.0, _1977))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1986 = 1.0;
    }
    float _1990 = (_1986 * cbModelParam._m0[1u].x) + (_1975 * (1.0 - cbModelParam._m0[1u].x));
    float _2000 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1021);
    float _2001 = isnan(_2000) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2000 : min(cbModelParam._m0[25u].z, _2000));
    float _2082;
    float _2084;
    float _2086;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2049 = fma(_1255, cbModelParam._m0[13u].z, fma(_1251, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1247)) + cbModelParam._m0[13u].w;
        float _2053 = fma(_1255, cbModelParam._m0[14u].z, fma(_1251, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1247)) + cbModelParam._m0[14u].w;
        float _2057 = fma(_1255, cbModelParam._m0[15u].z, fma(_1251, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1247)) + cbModelParam._m0[15u].w;
        float _2060 = fma(_1193, cbModelParam._m0[13u].z, fma(_1192, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1191));
        float _2063 = fma(_1193, cbModelParam._m0[14u].z, fma(_1192, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1191));
        float _2066 = fma(_1193, cbModelParam._m0[15u].z, fma(_1192, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1191));
        float _2094;
        if (_2060 > 0.0)
        {
            _2094 = abs((1.0 - _2049) / _2060);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2049 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2094 = frontier_phi_14_12_ladder;
        }
        float _2297;
        if (_2063 > 0.0)
        {
            _2297 = abs((1.0 - _2053) / _2063);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2053 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2297 = frontier_phi_23_19_ladder;
        }
        float _2551;
        if (_2066 > 0.0)
        {
            _2551 = abs((1.0 - _2057) / _2066);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2057 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2551 = frontier_phi_35_30_ladder;
        }
        float _2553 = isnan(_2297) ? _2094 : (isnan(_2094) ? _2297 : min(_2094, _2297));
        float _2554 = isnan(_2551) ? _2553 : (isnan(_2553) ? _2551 : min(_2553, _2551));
        float _2558 = (_2554 * _2060) + _2049;
        float _2559 = (_2554 * _2063) + _2053;
        float _2560 = (_2554 * _2066) + _2057;
        float _2561 = _2554 * 9.9999997473787516355514526367188e-05;
        float _2563 = (-1.0) - _2561;
        float _2565 = _2561 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2560 > _2565) || ((_2560 < _2563) || ((_2559 > _2565) || ((_2559 < _2563) || ((_2558 < _2563) || (_2558 > _2565))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2560, cbModelParam._m0[9u].z, fma(_2559, cbModelParam._m0[9u].y, _2558 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2560, cbModelParam._m0[10u].z, fma(_2559, cbModelParam._m0[10u].y, _2558 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2560, cbModelParam._m0[11u].z, fma(_2559, cbModelParam._m0[11u].y, _2558 * cbModelParam._m0[11u].x))), _2001);
            frontier_phi_13_35_ladder = _2688.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2688.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2688.x * cbModelParam._m0[1u].y;
        }
        _2082 = frontier_phi_13_35_ladder_2;
        _2084 = frontier_phi_13_35_ladder_1;
        _2086 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2070 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1191, _1192, _1193), _2001);
        _2082 = _2070.x * cbModelParam._m0[1u].y;
        _2084 = _2070.y * cbModelParam._m0[1u].y;
        _2086 = _2070.z * cbModelParam._m0[1u].y;
    }
    float _2090 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1021);
    float _2091 = isnan(_2090) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2090 : min(cbModelParam._m0[25u].w, _2090));
    float _2181;
    float _2183;
    float _2185;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2145 = fma(_1255, cbModelParam._m0[21u].z, fma(_1251, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1247)) + cbModelParam._m0[21u].w;
        float _2149 = fma(_1255, cbModelParam._m0[22u].z, fma(_1251, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1247)) + cbModelParam._m0[22u].w;
        float _2153 = fma(_1255, cbModelParam._m0[23u].z, fma(_1251, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1247)) + cbModelParam._m0[23u].w;
        float _2156 = fma(_1193, cbModelParam._m0[21u].z, fma(_1192, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1191));
        float _2159 = fma(_1193, cbModelParam._m0[22u].z, fma(_1192, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1191));
        float _2162 = fma(_1193, cbModelParam._m0[23u].z, fma(_1192, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1191));
        float _2302;
        if (_2156 > 0.0)
        {
            _2302 = abs((1.0 - _2145) / _2156);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2145 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2302 = frontier_phi_25_21_ladder;
        }
        float _2578;
        if (_2159 > 0.0)
        {
            _2578 = abs((1.0 - _2149) / _2159);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2149 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2578 = frontier_phi_37_32_ladder;
        }
        float _2791;
        if (_2162 > 0.0)
        {
            _2791 = abs((1.0 - _2153) / _2162);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2162 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2153 + 1.0) / _2162);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2791 = frontier_phi_46_43_ladder;
        }
        float _2793 = isnan(_2578) ? _2302 : (isnan(_2302) ? _2578 : min(_2302, _2578));
        float _2794 = isnan(_2791) ? _2793 : (isnan(_2793) ? _2791 : min(_2793, _2791));
        float _2798 = (_2794 * _2156) + _2145;
        float _2799 = (_2794 * _2159) + _2149;
        float _2800 = (_2794 * _2162) + _2153;
        float _2801 = _2794 * 9.9999997473787516355514526367188e-05;
        float _2802 = (-1.0) - _2801;
        float _2804 = _2801 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2800 > _2804) || ((_2800 < _2802) || ((_2799 > _2804) || ((_2799 < _2802) || ((_2798 < _2802) || (_2798 > _2804))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2999 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2800, cbModelParam._m0[17u].z, fma(_2799, cbModelParam._m0[17u].y, _2798 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2800, cbModelParam._m0[18u].z, fma(_2799, cbModelParam._m0[18u].y, _2798 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2800, cbModelParam._m0[19u].z, fma(_2799, cbModelParam._m0[19u].y, _2798 * cbModelParam._m0[19u].x))), _2091);
            frontier_phi_22_46_ladder = _2999.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2999.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2999.x * cbModelParam._m0[1u].z;
        }
        _2181 = frontier_phi_22_46_ladder_2;
        _2183 = frontier_phi_22_46_ladder_1;
        _2185 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2165 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1191, _1192, _1193), _2091);
        _2181 = _2165.x * cbModelParam._m0[1u].z;
        _2183 = _2165.y * cbModelParam._m0[1u].z;
        _2185 = _2165.z * cbModelParam._m0[1u].z;
    }
    float _2198 = (((_1218 * _1167) + _1219) * _1183) * ((cbModelParam._m0[1u].w * (_2181 - _2082)) + _2082);
    float _2200 = (((_1218 * _1169) + _1219) * _1183) * ((cbModelParam._m0[1u].w * (_2183 - _2084)) + _2084);
    float _2202 = (((_1218 * _1170) + _1219) * _1183) * ((cbModelParam._m0[1u].w * (_2185 - _2086)) + _2086);
    float _2205 = fma(_2202, cbSceneParam._m0[89u].z, fma(_2200, cbSceneParam._m0[89u].y, _2198 * cbSceneParam._m0[89u].x));
    float _2208 = fma(_2202, cbSceneParam._m0[90u].z, fma(_2200, cbSceneParam._m0[90u].y, _2198 * cbSceneParam._m0[90u].x));
    float _2211 = fma(_2202, cbSceneParam._m0[91u].z, fma(_2200, cbSceneParam._m0[91u].y, _2198 * cbSceneParam._m0[91u].x));
    uvec4 _2221 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2223 = _2221.x * 14u;
    uint _2224 = _2223 + 13u;
    float _2231 = _1183 + (-1.0);
    float _2236 = (cbLight._m0[_2224].x * _2231) + 1.0;
    float _2237 = (cbLight._m0[_2224].y * _2231) + 1.0;
    float _2238 = (cbLight._m0[_2224].z * _2231) + 1.0;
    float _2239 = (cbLight._m0[_2224].w * _2231) + 1.0;
    uint _2240 = _2223 + 5u;
    float _2246 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
    uint _2250 = _2223 + 4u;
    float _2256 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
    uint _2260 = _2223 | 1u;
    float _2271 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_1018, _1019, _1020));
    float _2274 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_1018, _1019, _1020));
    float _4481 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _4492 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2279 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * 0.3183098733425140380859375;
    float _2281 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * 0.3183098733425140380859375;
    float _2288 = ((cbLight._m0[_2240].x * _2246) * _2281) + ((cbLight._m0[_2250].x * _2256) * _2279);
    float _2289 = ((_2246 * cbLight._m0[_2240].y) * _2281) + ((_2256 * cbLight._m0[_2250].y) * _2279);
    float _2290 = ((_2246 * cbLight._m0[_2240].z) * _2281) + ((_2256 * cbLight._m0[_2250].z) * _2279);
    uvec4 _2294 = floatBitsToUint(cbLight._m0[_2223 + 12u]);
    bool _2296 = _2294.x == 0u;
    float _2307;
    float _2309;
    float _2311;
    if (_2296)
    {
        _2307 = _2288;
        _2309 = _2289;
        _2311 = _2290;
    }
    else
    {
        uint _2315 = _2223 + 6u;
        float _2331 = (dot(vec3(cbLight._m0[_2223 + 2u].xyz), vec3(_1018, _1019, _1020)) * 0.5) + 0.5;
        float _2332 = _2331 * _2331;
        float _4503 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2333 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2334 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2307 = (((cbLight._m0[_2315].x * 0.3183098733425140380859375) * _2333) * _2334) + _2288;
        _2309 = (((cbLight._m0[_2315].y * 0.3183098733425140380859375) * _2333) * _2334) + _2289;
        _2311 = (((cbLight._m0[_2315].z * 0.3183098733425140380859375) * _2333) * _2334) + _2290;
    }
    bool _2314 = _2294.y == 0u;
    float _2352;
    float _2354;
    float _2356;
    if (_2314)
    {
        _2352 = _2307;
        _2354 = _2309;
        _2356 = _2311;
    }
    else
    {
        uint _2522 = _2223 + 7u;
        float _2538 = (dot(vec3(cbLight._m0[_2223 + 3u].xyz), vec3(_1018, _1019, _1020)) * 0.5) + 0.5;
        float _2539 = _2538 * _2538;
        float _4519 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2540 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2541 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2352 = (((cbLight._m0[_2522].x * 0.3183098733425140380859375) * _2540) * _2541) + _2307;
        _2354 = (((cbLight._m0[_2522].y * 0.3183098733425140380859375) * _2540) * _2541) + _2309;
        _2356 = (((cbLight._m0[_2522].z * 0.3183098733425140380859375) * _2540) * _2541) + _2311;
    }
    uint _2359 = _2223 + 8u;
    float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _1021) * 0.949999988079071044921875);
    float _2373 = _2372 * _2372;
    float _2374 = cbLight._m0[_2223].x + _1097;
    float _2375 = cbLight._m0[_2223].y + _1098;
    float _2376 = cbLight._m0[_2223].z + _1099;
    float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
    float _2381 = _2380 * _2374;
    float _2382 = _2380 * _2375;
    float _2383 = _2380 * _2376;
    float _2384 = dot(vec3(_1018, _1019, _1020), vec3(cbLight._m0[_2223].xyz));
    float _4535 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2387 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _4546 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _2388 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2389 = dot(vec3(_1018, _1019, _1020), vec3(_2381, _2382, _2383));
    float _4557 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2393 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2381, _2382, _2383));
    float _4568 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2397 = _2373 * _2373;
    float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
    float _2409 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
    float _2410 = 0.959999978542327880859375 - _1164;
    float _2412 = 0.959999978542327880859375 - _1165;
    float _2413 = 0.959999978542327880859375 - _1166;
    float _2420 = 1.0 - _2373;
    float _2431 = (0.5 / (((_2388 * ((_2387 * _2420) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2388 * _2420) + _2373) * _2387))) * _2387;
    float _4579 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2433 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
    uint _2444 = _2223 + 9u;
    float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _1021) * 0.949999988079071044921875);
    float _2456 = _2455 * _2455;
    float _2457 = cbLight._m0[_2260].x + _1097;
    float _2458 = cbLight._m0[_2260].y + _1098;
    float _2459 = cbLight._m0[_2260].z + _1099;
    float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
    float _2464 = _2463 * _2457;
    float _2465 = _2463 * _2458;
    float _2466 = _2463 * _2459;
    float _2467 = dot(vec3(_1018, _1019, _1020), vec3(cbLight._m0[_2260].xyz));
    float _4590 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2470 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2471 = dot(vec3(_1018, _1019, _1020), vec3(_2464, _2465, _2466));
    float _4601 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2475 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2464, _2465, _2466));
    float _4612 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2479 = _2456 * _2456;
    float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
    float _2490 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
    float _2497 = 1.0 - _2456;
    float _2507 = (0.5 / (((_2388 * ((_2470 * _2497) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2388 * _2497) + _2456) * _2470))) * _2470;
    float _4623 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2509 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
    float _2519 = (((((_2490 * _2410) + _1167) * cbLight._m0[_2444].x) * _2509) * _2246) + (((((_2409 * _2410) + _1167) * cbLight._m0[_2359].x) * _2433) * _2256);
    float _2520 = (((((_2490 * _2412) + _1169) * cbLight._m0[_2444].y) * _2509) * _2246) + (((((_2409 * _2412) + _1169) * cbLight._m0[_2359].y) * _2433) * _2256);
    float _2521 = (((((_2490 * _2413) + _1170) * cbLight._m0[_2444].z) * _2509) * _2246) + (((((_2409 * _2413) + _1170) * cbLight._m0[_2359].z) * _2433) * _2256);
    float _2583;
    float _2585;
    float _2587;
    if (_2296)
    {
        _2583 = _2519;
        _2585 = _2520;
        _2587 = _2521;
    }
    else
    {
        uint _2589 = _2223 + 2u;
        uint _2593 = _2223 + 10u;
        float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2589].w)) * _1021) * 0.949999988079071044921875);
        float _2608 = _2607 * _2607;
        float _2609 = cbLight._m0[_2589].x + _1097;
        float _2610 = cbLight._m0[_2589].y + _1098;
        float _2611 = cbLight._m0[_2589].z + _1099;
        float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
        float _2616 = _2615 * _2609;
        float _2617 = _2615 * _2610;
        float _2618 = _2615 * _2611;
        float _2619 = dot(vec3(_1018, _1019, _1020), vec3(cbLight._m0[_2589].xyz));
        float _4634 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2623 = dot(vec3(_1018, _1019, _1020), vec3(_2616, _2617, _2618));
        float _4645 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2627 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_2616, _2617, _2618));
        float _4656 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2631 = _2608 * _2608;
        float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
        float _2642 = exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0);
        float _2649 = 1.0 - _2608;
        float _2659 = (0.5 / (((_2388 * ((_2622 * _2649) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2388 * _2649) + _2608) * _2622))) * _2622;
        float _4667 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2661 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
        float _2662 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2583 = (((((_2642 * _2410) + _1167) * cbLight._m0[_2593].x) * _2661) * _2662) + _2519;
        _2585 = (((((_2642 * _2412) + _1169) * cbLight._m0[_2593].y) * _2661) * _2662) + _2520;
        _2587 = (((((_2642 * _2413) + _1170) * cbLight._m0[_2593].z) * _2661) * _2662) + _2521;
    }
    float _2697;
    float _2699;
    float _2701;
    if (_2314)
    {
        _2697 = _2583;
        _2699 = _2585;
        _2701 = _2587;
    }
    else
    {
        uint _2708 = _2223 + 3u;
        uint _2712 = _2223 + 11u;
        float _2726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2708].w)) * _1021) * 0.949999988079071044921875);
        float _2727 = _2726 * _2726;
        float _2728 = cbLight._m0[_2708].x + _1097;
        float _2729 = cbLight._m0[_2708].y + _1098;
        float _2730 = cbLight._m0[_2708].z + _1099;
        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
        float _2735 = _2734 * _2728;
        float _2736 = _2734 * _2729;
        float _2737 = _2734 * _2730;
        float _2738 = dot(vec3(_1018, _1019, _1020), vec3(cbLight._m0[_2708].xyz));
        float _4683 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2742 = dot(vec3(_1018, _1019, _1020), vec3(_2735, _2736, _2737));
        float _4694 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2745 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2746 = dot(vec3(cbLight._m0[_2708].xyz), vec3(_2735, _2736, _2737));
        float _4705 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2750 = _2727 * _2727;
        float _2754 = ((_2745 * _2745) * (_2750 + (-1.0))) + 1.0;
        float _2761 = exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0);
        float _2768 = 1.0 - _2727;
        float _2778 = (0.5 / (((_2388 * ((_2741 * _2768) + _2727)) + 9.9999999392252902907785028219223e-09) + (((_2388 * _2768) + _2727) * _2741))) * _2741;
        float _4716 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2780 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2750 / ((_2754 * _2754) * 3.141590118408203125));
        float _2781 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2697 = (((((_2761 * _2410) + _1167) * cbLight._m0[_2712].x) * _2780) * _2781) + _2583;
        _2699 = (((((_2761 * _2412) + _1169) * cbLight._m0[_2712].y) * _2780) * _2781) + _2585;
        _2701 = (((((_2761 * _2413) + _1170) * cbLight._m0[_2712].z) * _2780) * _2781) + _2587;
    }
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    if (_2221.y == 0u)
    {
        float _2856 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2856;
        float _2858 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2856;
        float _2859 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2856;
        uvec4 _2871 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2872 = _2871.x;
        uint _2883 = uint((float(_2871.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1106) / _2872))) + floor(float(uint(cbSceneParam._m0[85u].x * _1105) / _2872)));
        float _2893 = (log2(_2859 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2894 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        uint _2897 = uint(isnan(14.0) ? _2894 : (isnan(_2894) ? 14.0 : min(_2894, 14.0)));
        uvec4 _2902 = texelFetch(g_lightClusterGridBuffer, int(((_2897 << 2u) + (_2883 << 6u)) >> 2u));
        uint _2903 = _2902.x;
        uint _2904 = _2871.z;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        if (((((1u << ((_2904 >> 4u) & 15u)) + 4294967295u) & _2903) == 0u) || ((_2904 & 240u) == 0u))
        {
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
        }
        else
        {
            float _3005;
            float _3007;
            float _3009;
            float _3011;
            float _3013;
            float _3015;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            float _3154 = 0.0;
            uint _3155 = 0u;
            uint _3164;
            bool _3165;
            for (;;)
            {
                _3164 = texelFetch(g_lightClassification, int((((_2897 << 5u) + (_2883 << 9u)) + (_3155 << 2u)) >> 2u)).x;
                _3165 = _3164 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3165)
                {
                    frontier_phi_61_pred = _3149;
                    frontier_phi_61_pred_1 = _3154;
                    frontier_phi_61_pred_2 = _3153;
                    frontier_phi_61_pred_3 = _3152;
                    frontier_phi_61_pred_4 = _3151;
                    frontier_phi_61_pred_5 = _3150;
                }
                else
                {
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    uint _3279;
                    _3273 = _3149;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3152;
                    _3277 = _3153;
                    _3278 = _3154;
                    _3279 = _3164;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    for (;;)
                    {
                        uint _3283 = uint(findLSB(_3279)) + (_3155 << 5u);
                        uint _3280 = (_3279 + 4294967295u) & _3279;
                        uint _3285 = _3283 * 48u;
                        vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 3u)).x));
                        uint _3305 = (_3283 * 48u) + 4u;
                        vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3305)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 3u)).x));
                        uint _3324 = (_3283 * 48u) + 8u;
                        vec3 _3335 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3324)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 2u)).x));
                        float _3339 = _3299.x - _2857;
                        float _3340 = _3299.y - _2858;
                        float _3341 = _3299.z - _2859;
                        float _3342 = dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341));
                        float _3345 = inversesqrt(_3342);
                        float _3346 = _3345 * _3339;
                        float _3347 = _3345 * _3340;
                        float _3348 = _3345 * _3341;
                        float _3349 = dot(vec3(_1124, _1127, _1130), vec3(_3346, _3347, _3348));
                        float _3354 = 1.0 - (_3342 * _3299.w);
                        float _4742 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3355 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3356 = sqrt(_3342) * _3318.w;
                        float _3359 = 1.39999997615814208984375 / (_3356 + 1.39999997615814208984375);
                        float _3360 = _3359 * _3359;
                        float _3363 = ((1.0 - _3360) * _3349) + _3360;
                        float _3366 = _3356 * _3356;
                        float _3370 = ((isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0))) * _3355) / ((_3366 * 0.699999988079071044921875) + 1.0);
                        float _3374 = (-0.0) - _2857;
                        float _3375 = (-0.0) - _2858;
                        float _3376 = (-0.0) - _2859;
                        float _3380 = inversesqrt(dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376)));
                        float _3381 = _3380 * _3374;
                        float _3382 = _3380 * _3375;
                        float _3383 = _3380 * _3376;
                        float _3391 = exp2(log2(1.0 / ((_3366 * 3.5) + 5.0)) * 0.25);
                        float _3392 = 1.0 - _1199;
                        float _3399 = sqrt(1.0 - ((1.0 - (_3392 * _3392)) * (1.0 - (_3391 * _3391))));
                        float _3400 = _3399 * _3399;
                        float _3401 = _3400 * _3400;
                        float _3402 = _3381 + _3346;
                        float _3403 = _3382 + _3347;
                        float _3404 = _3383 + _3348;
                        float _3408 = inversesqrt(dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404)));
                        float _3412 = dot(vec3(_1124, _1127, _1130), vec3(_3381, _3382, _3383));
                        float _4758 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3415 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3416 = dot(vec3(_1124, _1127, _1130), vec3(_3408 * _3402, _3408 * _3403, _3408 * _3404));
                        float _4769 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3419 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3423 = ((_3419 * _3419) * (_3401 + (-1.0))) + 1.0;
                        float _3424 = _3359 * _3400;
                        float _3425 = _3424 * _3424;
                        float _3428 = ((1.0 - _3425) * _3349) + _3425;
                        float _4780 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3429 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3430 = 1.0 - _3400;
                        float _3440 = (0.5 / (((_3429 * ((_3415 * _3430) + _3400)) + 9.9999999392252902907785028219223e-09) + (((_3429 * _3430) + _3400) * _3415))) * _3429;
                        float _4791 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3451 = (((_3401 * 3.1415927410125732421875) * (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) / ((_3423 * _3423) * ((_3366 * 2.1991131305694580078125) + 3.141590118408203125))) * _3355;
                        _3208 = (_3370 * _3318.x) + _3276;
                        _3209 = (_3370 * _3318.y) + _3277;
                        _3210 = (_3370 * _3318.z) + _3278;
                        _3205 = (_3451 * _3335.x) + _3273;
                        _3206 = (_3451 * _3335.y) + _3274;
                        _3207 = (_3451 * _3335.z) + _3275;
                        if (_3280 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3273 = _3205;
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3208;
                            _3277 = _3209;
                            _3278 = _3210;
                            _3279 = _3280;
                        }
                    }
                    frontier_phi_61_pred = _3205;
                    frontier_phi_61_pred_1 = _3210;
                    frontier_phi_61_pred_2 = _3209;
                    frontier_phi_61_pred_3 = _3208;
                    frontier_phi_61_pred_4 = _3207;
                    frontier_phi_61_pred_5 = _3206;
                }
                _3005 = frontier_phi_61_pred;
                _3015 = frontier_phi_61_pred_1;
                _3013 = frontier_phi_61_pred_2;
                _3011 = frontier_phi_61_pred_3;
                _3009 = frontier_phi_61_pred_4;
                _3007 = frontier_phi_61_pred_5;
                uint _3156 = _3155 + 1u;
                if (_3156 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3149 = _3005;
                    _3150 = _3007;
                    _3151 = _3009;
                    _3152 = _3011;
                    _3153 = _3013;
                    _3154 = _3015;
                    _3155 = _3156;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
        }
        uvec4 _3018 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3019 = _3018.z;
        uint _3021 = (_3019 >> 8u) & 15u;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        if (((4294967295u << _3021) & _2903) == 0u)
        {
            _3117 = _3004;
            _3119 = _3006;
            _3121 = _3008;
            _3123 = _3010;
            _3125 = _3012;
            _3127 = _3014;
        }
        else
        {
            float _3142 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
            float _3143 = _3142 * _2857;
            float _3144 = _3142 * _2858;
            float _3145 = _3142 * _2859;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3021 < ((_3019 >> 12u) & 15u))
            {
                float _3118;
                float _3120;
                float _3122;
                float _3124;
                float _3126;
                float _3128;
                float _3256 = _3004;
                float _3257 = _3006;
                float _3258 = _3008;
                float _3259 = _3010;
                float _3260 = _3012;
                float _3261 = _3014;
                uint _3262 = _3021;
                uint _3271;
                bool _3272;
                for (;;)
                {
                    _3271 = texelFetch(g_lightClassification, int((((_2897 << 5u) + (_2883 << 9u)) + (_3262 << 2u)) >> 2u)).x;
                    _3272 = _3271 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3272)
                    {
                        frontier_phi_67_pred = _3259;
                        frontier_phi_67_pred_1 = _3260;
                        frontier_phi_67_pred_2 = _3261;
                        frontier_phi_67_pred_3 = _3258;
                        frontier_phi_67_pred_4 = _3257;
                        frontier_phi_67_pred_5 = _3256;
                    }
                    else
                    {
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3469 = _3256;
                        float _3470 = _3257;
                        float _3471 = _3258;
                        float _3472 = _3259;
                        float _3473 = _3260;
                        float _3474 = _3261;
                        uint _3475 = _3271;
                        uint _3476;
                        vec4 _3501;
                        float _3502;
                        vec4 _3517;
                        vec3 _3529;
                        vec4 _3544;
                        vec4 _3559;
                        float _3605;
                        bool _3606;
                        for (;;)
                        {
                            uint _3486 = ((_3262 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3475));
                            _3476 = (_3475 + 4294967295u) & _3475;
                            uint _3488 = _3486 * 40u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            _3502 = _3501.w;
                            uint _3504 = (_3486 * 40u) + 4u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3519 = (_3486 * 40u) + 8u;
                            _3529 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x));
                            uint _3531 = (_3486 * 40u) + 16u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3546 = (_3486 * 40u) + 20u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3561 = (_3486 * 40u) + 24u;
                            vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3580 = (_3486 * 40u) + 28u;
                            vec4 _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            _3605 = fma(_2859, _3593.z, fma(_2858, _3593.y, _3593.x * _2857)) + _3593.w;
                            _3606 = !((fma(_2859, _3574.z, fma(_2858, _3574.y, _3574.x * _2857)) + _3574.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3606)
                            {
                                float _3633 = _3501.x - _2857;
                                float _3634 = _3501.y - _2858;
                                float _3635 = _3501.z - _2859;
                                float _3636 = dot(vec3(_3633, _3634, _3635), vec3(_3633, _3634, _3635));
                                float _3639 = inversesqrt(_3636);
                                float _3640 = _3639 * _3633;
                                float _3641 = _3639 * _3634;
                                float _3642 = _3639 * _3635;
                                float _3646 = 1.0 - (_3636 / (_3502 * _3502));
                                float _4802 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3651 = sqrt(_3636) * _3517.w;
                                float _3653 = 1.39999997615814208984375 / (_3651 + 1.39999997615814208984375);
                                float _3654 = _3653 * _3653;
                                float _3657 = ((1.0 - _3654) * dot(vec3(_3640, _3641, _3642), vec3(_1124, _1127, _1130))) + _3654;
                                float _3660 = _3651 * _3651;
                                float _3664 = (fma(_2859, _3544.z, fma(_2858, _3544.y, _3544.x * _2857)) + _3544.w) / _3605;
                                float _3665 = (fma(_2859, _3559.z, fma(_2858, _3559.y, _3559.x * _2857)) + _3559.w) / _3605;
                                float _3669 = 1.0 - dot(vec2(_3664, _3665), vec2(_3664, _3665));
                                float _4818 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3671 = _3670 * (((isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0))) * _3647) / ((_3660 * 0.699999988079071044921875) + 1.0));
                                float _3683 = exp2(log2(1.0 / ((_3660 * 3.5) + 5.0)) * 0.25);
                                float _3684 = 1.0 - _1199;
                                float _3691 = sqrt(1.0 - ((1.0 - (_3684 * _3684)) * (1.0 - (_3683 * _3683))));
                                float _3692 = _3691 * _3691;
                                float _3693 = _3692 * _3692;
                                float _3694 = _3640 - _3143;
                                float _3695 = _3641 - _3144;
                                float _3696 = _3642 - _3145;
                                float _3700 = inversesqrt(dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696)));
                                float _3704 = dot(vec3(_1124, _1127, _1130), vec3((-0.0) - _3143, (-0.0) - _3144, (-0.0) - _3145));
                                float _4829 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3707 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3708 = dot(vec3(_1124, _1127, _1130), vec3(_3700 * _3694, _3700 * _3695, _3700 * _3696));
                                float _4840 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3711 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3715 = ((_3711 * _3711) * (_3693 + (-1.0))) + 1.0;
                                float _3716 = _3653 * _3692;
                                float _3717 = _3716 * _3716;
                                float _3723 = ((1.0 - _3717) * dot(vec3(_1124, _1127, _1130), vec3(_3640, _3641, _3642))) + _3717;
                                float _4851 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3724 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3725 = 1.0 - _3692;
                                float _3735 = (0.5 / (((_3724 * ((_3707 * _3725) + _3692)) + 9.9999999392252902907785028219223e-09) + (((_3724 * _3725) + _3692) * _3707))) * _3724;
                                float _4862 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3745 = (_3670 * _3647) * (((_3693 * 3.1415927410125732421875) * (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0)))) / ((_3715 * _3715) * ((_3660 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3745 * _3529.x;
                                frontier_phi_73_pred_1 = _3745 * _3529.y;
                                frontier_phi_73_pred_2 = _3671 * _3517.z;
                                frontier_phi_73_pred_3 = _3671 * _3517.y;
                                frontier_phi_73_pred_4 = _3671 * _3517.x;
                                frontier_phi_73_pred_5 = _3745 * _3529.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3749 = frontier_phi_73_pred;
                            _3750 = frontier_phi_73_pred_1;
                            _3754 = frontier_phi_73_pred_2;
                            _3753 = frontier_phi_73_pred_3;
                            _3752 = frontier_phi_73_pred_4;
                            _3751 = frontier_phi_73_pred_5;
                            _3459 = _3752 + _3472;
                            _3460 = _3753 + _3473;
                            _3461 = _3754 + _3474;
                            _3456 = _3749 + _3469;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            if (_3476 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3476;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3459;
                        frontier_phi_67_pred_1 = _3460;
                        frontier_phi_67_pred_2 = _3461;
                        frontier_phi_67_pred_3 = _3458;
                        frontier_phi_67_pred_4 = _3457;
                        frontier_phi_67_pred_5 = _3456;
                    }
                    _3124 = frontier_phi_67_pred;
                    _3126 = frontier_phi_67_pred_1;
                    _3128 = frontier_phi_67_pred_2;
                    _3122 = frontier_phi_67_pred_3;
                    _3120 = frontier_phi_67_pred_4;
                    _3118 = frontier_phi_67_pred_5;
                    uint _3263 = _3262 + 1u;
                    if (_3263 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3256 = _3118;
                        _3257 = _3120;
                        _3258 = _3122;
                        _3259 = _3124;
                        _3260 = _3126;
                        _3261 = _3128;
                        _3262 = _3263;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3126;
                frontier_phi_55_56_ladder_1 = _3128;
                frontier_phi_55_56_ladder_2 = _3124;
                frontier_phi_55_56_ladder_3 = _3122;
                frontier_phi_55_56_ladder_4 = _3120;
                frontier_phi_55_56_ladder_5 = _3118;
            }
            else
            {
                frontier_phi_55_56_ladder = _3012;
                frontier_phi_55_56_ladder_1 = _3014;
                frontier_phi_55_56_ladder_2 = _3010;
                frontier_phi_55_56_ladder_3 = _3008;
                frontier_phi_55_56_ladder_4 = _3006;
                frontier_phi_55_56_ladder_5 = _3004;
            }
            _3117 = frontier_phi_55_56_ladder_5;
            _3119 = frontier_phi_55_56_ladder_4;
            _3121 = frontier_phi_55_56_ladder_3;
            _3123 = frontier_phi_55_56_ladder_2;
            _3125 = frontier_phi_55_56_ladder;
            _3127 = frontier_phi_55_56_ladder_1;
        }
        float _3132 = isnan(1.0) ? _1183 : (isnan(_1183) ? 1.0 : min(_1183, 1.0));
        _2916 = (_3132 * _3123) + _2352;
        _2918 = (_3132 * _3125) + _2354;
        _2920 = (_3132 * _3127) + _2356;
        _2922 = ((_3117 * _1167) * _3132) + _2697;
        _2924 = ((_3119 * _1169) * _3132) + _2699;
        _2926 = ((_3121 * _1170) * _3132) + _2701;
    }
    else
    {
        _2916 = _2352;
        _2918 = _2354;
        _2920 = _2356;
        _2922 = _2697;
        _2924 = _2699;
        _2926 = _2701;
    }
    float _4878 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _4889 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _4900 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    uint _2946 = _291 + 6u;
    float _2954 = _1105 / cbSceneParam._m0[86u].x;
    float _2955 = _1106 / cbSceneParam._m0[86u].y;
    vec4 _2969 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2954, _2955, (log2((isnan(cbSceneParam._m0[77u].w) ? _1040 : (isnan(_1040) ? cbSceneParam._m0[77u].w : min(_1040, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2971 = _2969.x;
    float _2972 = _2969.y;
    float _2973 = _2969.z;
    float _2974 = _2969.w;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    if (_1040 > cbSceneParam._m0[78u].w)
    {
        float _3029 = isnan(_1040) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1040 : min(cbSceneParam._m0[80u].w, _1040));
        float _3030 = _3029 / _1040;
        float _3041 = _3030 * _1090;
        float _3042 = _1091 * _3030;
        float _3043 = (-0.0) - _3042;
        float _3045 = _3030 * _1092;
        float _3047 = (cbSceneParam._m0[77u].w * _3043) / _3029;
        float _3048 = _3047 + cbSceneParam._m0[79u].w;
        float _3049 = cbSceneParam._m0[79u].w - _3042;
        float _3055 = sqrt(((_3041 * _3041) + (_3042 * _3042)) + (_3045 * _3045));
        float _3058 = (1.0 - (cbSceneParam._m0[77u].w / _3029)) * _3055;
        float _3063 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3065 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3218;
        if (abs((_3043 - _3047) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3218 = ((((_3048 > 0.0) ? exp2(_3063 * _3048) : (2.0 - exp2(_3065 * _3048))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3058;
        }
        else
        {
            float _3178 = 1.0 / cbSceneParam._m0[80u].x;
            float _3179 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : max(_3048, _3049));
            float _3180 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : min(_3048, _3049));
            float _3189 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : min(_3179, 0.0));
            float _3190 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : min(_3180, 0.0));
            _3218 = ((abs(_3055 / _3043) * cbSceneParam._m0[80u].y) * ((((_3189 - _3190) * 2.0) - ((exp2(_3063 * (isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0)))) - exp2(_3063 * (isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))))) * _3178)) - ((exp2(_3065 * _3189) - exp2(_3065 * _3190)) * _3178))) + (_3058 * cbSceneParam._m0[80u].z);
        }
        vec4 _3220 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2954, _2955, 1.0), 0.0);
        float _3229 = exp2((_3218 * (-1.44269502162933349609375)) * (1.0 - _3220.w));
        float _3230 = log2(_3229);
        float _3246 = log2(_2974);
        _3067 = (exp2(_3246 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].x)) * _3220.x) / cbSceneParam._m0[78u].x)) + _2971;
        _3069 = (exp2(_3246 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].y)) * _3220.y) / cbSceneParam._m0[78u].y)) + _2972;
        _3071 = (exp2(_3246 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].z)) * _3220.z) / cbSceneParam._m0[78u].z)) + _2973;
        _3073 = _3229 * _2974;
    }
    else
    {
        _3067 = _2971;
        _3069 = _2972;
        _3071 = _2973;
        _3073 = _2974;
    }
    float _3085 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3086 = _3085 == 3.0;
    float _3087 = log2(_3073);
    float _3094 = exp2(_3087 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2916 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1183))) + ((_2922 + ((isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0))) * _1990)) * cbPerFrame._m0[3u].x));
    float _3095 = exp2(_3087 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2918 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1183))) + ((_2924 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1990)) * cbPerFrame._m0[3u].x));
    float _3096 = exp2(_3087 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2920 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1183))) + ((_2926 + ((isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0))) * _1990)) * cbPerFrame._m0[3u].x));
    float _3105 = (_3085 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3105 * (_3086 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3067)));
    SV_Target.y = _3105 * (_3086 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3069)));
    SV_Target.z = _3105 * (_3086 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3071)));
    SV_Target.w = cbInstanceData._m0[_2946].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2946].w;
}


