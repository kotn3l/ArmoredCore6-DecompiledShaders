#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1247;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _392 = _390.x;
    float _404 = dot(vec4(_392, _390.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _354.x) * 2.0) - ((((_392 - _404) * cbMtdParam._m0[23u].w) + _404) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3858 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _429 = (_422 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _430 = (_422 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _431 = (_422 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _468 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _470 = _468.x;
    float _480 = dot(vec4(_470, _468.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _494 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _354.y) * 2.0) - ((((_470 - _480) * cbMtdParam._m0[23u].w) + _480) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3869 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _508 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_495 * ((_448.x * cbMtdParam._m0[13u].x) - _429)) + _429);
    float _511 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_495 * ((_448.y * cbMtdParam._m0[13u].y) - _430)) + _430);
    float _514 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_495 * ((_448.z * cbMtdParam._m0[13u].z) - _431)) + _431);
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _548 = _544.z;
    float _555 = ((_527.x - _546) * _422) + _546;
    float _556 = ((_527.y - _547) * _422) + _547;
    float _557 = ((_527.z - _548) * _422) + _548;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _582 = ((_569.z - _557) * _495) + _557;
    float _585 = ((((_569.x - _555) * _495) + _555) * 2.0) + (-1.0);
    float _587 = ((((_569.y - _556) * _495) + _556) * 2.0) + (-1.0);
    float _588 = dot(vec2(_585, _587), vec2(_585, _587));
    float _3880 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _593 = sqrt(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _619 = (((_607.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _585;
    float _620 = (((_607.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _587;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _648 = _646.x;
    float _665 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _648) * _422) + _648;
    float _683 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _264) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _265) + cbTextureTilingScale._m0[21u].w)).x - _665) * _495) + _665;
    float _687 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _683) * cbMtdParam._m0[19u].z) + _683;
    float _691 = (cbMtdParam._m0[19u].w * (_607.z - _582)) + _582;
    float _693 = cbMtdParam._m0[22u].x + _607.w;
    float _696 = fma(_593, _231 * NORMAL.x, fma(_620, _238 * TANGENT.x, (_224 * _216) * _619));
    float _699 = fma(_593, _231 * NORMAL.y, fma(_620, _238 * TANGENT.y, (_224 * _217) * _619));
    float _702 = fma(_593, _231 * NORMAL.z, fma(_620, _238 * TANGENT.z, (_224 * _218) * _619));
    float _706 = inversesqrt(dot(vec3(_696, _699, _702), vec3(_696, _699, _702)));
    float _707 = _706 * _696;
    float _708 = _706 * _699;
    float _709 = _706 * _702;
    float _3891 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _710 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3913 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3924 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3935 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3946 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _715 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _780 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _770);
    float _781 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _770);
    float _782 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _770);
    float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
    float _787 = _780 * _786;
    float _788 = _781 * _786;
    float _789 = _782 * _786;
    float _795 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _796 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _814 = fma(_709, cbSceneParam._m0[5u].z, fma(_708, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _707));
    float _817 = fma(_709, cbSceneParam._m0[6u].z, fma(_708, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _707));
    float _820 = fma(_709, cbSceneParam._m0[7u].z, fma(_708, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _707));
    uint _834 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _840 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_834].x;
    float _841 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * cbInstanceData._m0[_834].y;
    float _842 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_834].z;
    float _3957 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _846 = 1.0 - _715;
    float _847 = _843 * _846;
    float _848 = _844 * _846;
    float _849 = _845 * _846;
    float _854 = (_843 + (-0.039999999105930328369140625)) * _715;
    float _855 = (_844 + (-0.039999999105930328369140625)) * _715;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _715;
    float _857 = _854 + 0.039999999105930328369140625;
    float _859 = _855 + 0.039999999105930328369140625;
    float _860 = _856 + 0.039999999105930328369140625;
    vec4 _869 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _795, cbSceneParam._m0[86u].y * _796));
    float _873 = ((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * TEXCOORD_5.w) * _869.x;
    float _874 = dot(vec3(_707, _708, _709), vec3(_787, _788, _789));
    float _877 = _874 * 2.0;
    float _881 = (_877 * _707) - _787;
    float _882 = (_877 * _708) - _788;
    float _883 = (_877 * _709) - _789;
    float _887 = abs(dot(vec3(_787, _788, _789), vec3(_707, _708, _709)));
    float _3990 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _889 = sqrt(_710);
    float _902 = exp2((_889 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_889 * 3.0));
    float _908 = (1.0 - _902) * ((_889 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _909 = _902 * _889;
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1246;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _971 = fma(_945, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937));
        float _975 = fma(_945, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937));
        float _979 = fma(_945, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937));
        float _1004 = _937 + _707;
        float _1005 = _941 + _708;
        float _1006 = _945 + _709;
        float _1016 = fma(_1006, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004)) - _971;
        float _1017 = fma(_1006, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004)) - _975;
        float _1018 = fma(_1006, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004)) - _979;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_971 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_975 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[34u].z) + ((((((_979 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1074 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1040.x + (-0.5));
        float _1076 = _1074 * (_1040.y + (-0.5));
        float _1077 = _1074 * (_1040.z + (-0.5));
        float _1084 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1047.x + (-0.5));
        float _1086 = _1084 * (_1047.y + (-0.5));
        float _1087 = _1084 * (_1047.z + (-0.5));
        float _1094 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1054.x + (-0.5));
        float _1096 = _1094 * (_1054.y + (-0.5));
        float _1097 = _1094 * (_1054.z + (-0.5));
        float _1104 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1061.x + (-0.5));
        float _1106 = _1104 * (_1061.y + (-0.5));
        float _1107 = _1104 * (_1061.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1128 = (dot(vec3(_707, _708, _709), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1138 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _4038 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1140 + 1.0))) + _1145) * _1108;
        float _1155 = _1076 * 0.5;
        float _1156 = _1086 * 0.5;
        float _1157 = _1096 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_707, _708, _709), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _4071 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1182 + 1.0))) + _1187) * _1109;
        float _1197 = _1077 * 0.5;
        float _1198 = _1087 * 0.5;
        float _1199 = _1097 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_707, _708, _709), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _4104 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1224 + 1.0))) + _1229) * _1110;
        _1246 = _1077;
        _1248 = _1076;
        _1249 = _1075;
        _1250 = _1087;
        _1251 = _1086;
        _1252 = _1085;
        _1253 = _1097;
        _1254 = _1096;
        _1255 = _1095;
        _1256 = _1110;
        _1257 = _1109;
        _1258 = _1108;
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _1247;
        _1248 = _1247;
        _1249 = _1247;
        _1250 = _1247;
        _1251 = _1247;
        _1252 = _1247;
        _1253 = _1247;
        _1254 = _1247;
        _1255 = _1247;
        _1256 = _1247;
        _1257 = _1247;
        _1258 = _1247;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1285 = fma(_945, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _937));
        float _1289 = fma(_945, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _937));
        float _1293 = fma(_945, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _937));
        float _1316 = _937 + _707;
        float _1317 = _941 + _708;
        float _1318 = _945 + _709;
        float _1328 = fma(_1318, cbModelParam._m0[30u].z, fma(_1317, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1316)) - _1285;
        float _1329 = fma(_1318, cbModelParam._m0[31u].z, fma(_1317, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1316)) - _1289;
        float _1330 = fma(_1318, cbModelParam._m0[32u].z, fma(_1317, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1316)) - _1293;
        float _1334 = inversesqrt(dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330)));
        float _1347 = ((_1334 * _1328) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1285 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1334 * _1329) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1289 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1334 * _1330) / cbModelParam._m0[35u].z) + ((((((_1293 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        float _1384 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1351.x + (-0.5));
        float _1386 = _1384 * (_1351.y + (-0.5));
        float _1387 = _1384 * (_1351.z + (-0.5));
        float _1394 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1358.x + (-0.5));
        float _1396 = _1394 * (_1358.y + (-0.5));
        float _1397 = _1394 * (_1358.z + (-0.5));
        float _1404 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1365.x + (-0.5));
        float _1406 = _1404 * (_1365.y + (-0.5));
        float _1407 = _1404 * (_1365.z + (-0.5));
        float _1414 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1372.x + (-0.5));
        float _1416 = _1414 * (_1372.y + (-0.5));
        float _1417 = _1414 * (_1372.z + (-0.5));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = _1385 * 0.5;
        float _1422 = _1395 * 0.5;
        float _1423 = _1405 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_707, _708, _709), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4167 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1448 + 1.0))) + _1453) * _1418;
        float _1463 = _1386 * 0.5;
        float _1464 = _1396 * 0.5;
        float _1465 = _1406 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_707, _708, _709), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4200 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1490 + 1.0))) + _1495) * _1419;
        float _1505 = _1387 * 0.5;
        float _1506 = _1397 * 0.5;
        float _1507 = _1407 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_707, _708, _709), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4233 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1532 + 1.0))) + _1537) * _1420;
        _1554 = _1387;
        _1555 = _1386;
        _1556 = _1385;
        _1557 = _1397;
        _1558 = _1396;
        _1559 = _1395;
        _1560 = _1407;
        _1561 = _1406;
        _1562 = _1405;
        _1563 = _1420;
        _1564 = _1419;
        _1565 = _1418;
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
    }
    else
    {
        _1554 = _1247;
        _1555 = _1247;
        _1556 = _1247;
        _1557 = _1247;
        _1558 = _1247;
        _1559 = _1247;
        _1560 = _1247;
        _1561 = _1247;
        _1562 = _1247;
        _1563 = _1247;
        _1564 = _1247;
        _1565 = _1247;
        _1566 = 0.0;
        _1567 = 0.0;
        _1568 = 0.0;
    }
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1259)) + _1259;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1260)) + _1260;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1261)) + _1261;
    float _1601 = fma(_1580, cbSceneParam._m0[89u].z, fma(_1579, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1604 = fma(_1580, cbSceneParam._m0[90u].z, fma(_1579, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1607 = fma(_1580, cbSceneParam._m0[91u].z, fma(_1579, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1578));
    float _1622 = _881 * 0.5;
    float _1623 = _882 * 0.5;
    float _1624 = _883 * 0.5;
    float _1625 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1628 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1631 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1665;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1638 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1246, _1250, _1253, _1256));
        float _1642 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1646 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1653 = dot(vec4(cbModelParam._m0[39u]), vec4(_1622, _1623, _1624, 1.0));
        _1665 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1665 = 1.0;
    }
    float _1676;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1667 = dot(vec4(cbModelParam._m0[40u]), vec4(_1622, _1623, _1624, 1.0));
        _1676 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1667) ? 0.0 : (isnan(0.0) ? _1667 : max(0.0, _1667))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1676 = 1.0;
    }
    float _1680 = (_1676 * cbModelParam._m0[1u].x) + (_1665 * (1.0 - cbModelParam._m0[1u].x));
    float _1690 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _710);
    float _1691 = isnan(_1690) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1690 : min(cbModelParam._m0[25u].z, _1690));
    float _1773;
    float _1775;
    float _1777;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1740 = fma(_945, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937)) + cbModelParam._m0[13u].w;
        float _1744 = fma(_945, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937)) + cbModelParam._m0[14u].w;
        float _1748 = fma(_945, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937)) + cbModelParam._m0[15u].w;
        float _1751 = fma(_883, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881));
        float _1754 = fma(_883, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881));
        float _1757 = fma(_883, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881));
        float _1785;
        if (_1751 > 0.0)
        {
            _1785 = abs((1.0 - _1740) / _1751);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1740 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1785 = frontier_phi_14_12_ladder;
        }
        float _1957;
        if (_1754 > 0.0)
        {
            _1957 = abs((1.0 - _1744) / _1754);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1744 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1957 = frontier_phi_23_19_ladder;
        }
        float _2252;
        if (_1757 > 0.0)
        {
            _2252 = abs((1.0 - _1748) / _1757);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1748 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2252 = frontier_phi_35_30_ladder;
        }
        float _2254 = isnan(_1957) ? _1785 : (isnan(_1785) ? _1957 : min(_1785, _1957));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1751) + _1740;
        float _2260 = (_2255 * _1754) + _1744;
        float _2261 = (_2255 * _1757) + _1748;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2264 = (-1.0) - _2262;
        float _2266 = _2262 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2261 > _2266) || ((_2261 < _2264) || ((_2260 > _2266) || ((_2260 < _2264) || ((_2259 < _2264) || (_2259 > _2266))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2261, cbModelParam._m0[9u].z, fma(_2260, cbModelParam._m0[9u].y, _2259 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2261, cbModelParam._m0[10u].z, fma(_2260, cbModelParam._m0[10u].y, _2259 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2261, cbModelParam._m0[11u].z, fma(_2260, cbModelParam._m0[11u].y, _2259 * cbModelParam._m0[11u].x))), _1691);
            frontier_phi_13_35_ladder = _2406.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2406.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2406.x * cbModelParam._m0[1u].y;
        }
        _1773 = frontier_phi_13_35_ladder_2;
        _1775 = frontier_phi_13_35_ladder_1;
        _1777 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1761 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_881, _882, _883), _1691);
        _1773 = _1761.x * cbModelParam._m0[1u].y;
        _1775 = _1761.y * cbModelParam._m0[1u].y;
        _1777 = _1761.z * cbModelParam._m0[1u].y;
    }
    float _1781 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _710);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1781 : min(cbModelParam._m0[25u].w, _1781));
    float _1872;
    float _1874;
    float _1876;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1836 = fma(_945, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937)) + cbModelParam._m0[21u].w;
        float _1840 = fma(_945, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937)) + cbModelParam._m0[22u].w;
        float _1844 = fma(_945, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937)) + cbModelParam._m0[23u].w;
        float _1847 = fma(_883, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881));
        float _1850 = fma(_883, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881));
        float _1853 = fma(_883, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881));
        float _1962;
        if (_1847 > 0.0)
        {
            _1962 = abs((1.0 - _1836) / _1847);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1836 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1962 = frontier_phi_25_21_ladder;
        }
        float _2279;
        if (_1850 > 0.0)
        {
            _2279 = abs((1.0 - _1840) / _1850);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1840 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2279 = frontier_phi_37_32_ladder;
        }
        float _2617;
        if (_1853 > 0.0)
        {
            _2617 = abs((1.0 - _1844) / _1853);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1844 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2617 = frontier_phi_47_44_ladder;
        }
        float _2619 = isnan(_2279) ? _1962 : (isnan(_1962) ? _2279 : min(_1962, _2279));
        float _2620 = isnan(_2617) ? _2619 : (isnan(_2619) ? _2617 : min(_2619, _2617));
        float _2624 = (_2620 * _1847) + _1836;
        float _2625 = (_2620 * _1850) + _1840;
        float _2626 = (_2620 * _1853) + _1844;
        float _2627 = _2620 * 9.9999997473787516355514526367188e-05;
        float _2628 = (-1.0) - _2627;
        float _2630 = _2627 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2626 > _2630) || ((_2626 < _2628) || ((_2625 > _2630) || ((_2625 < _2628) || ((_2624 < _2628) || (_2624 > _2630))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2748 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2626, cbModelParam._m0[17u].z, fma(_2625, cbModelParam._m0[17u].y, _2624 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2626, cbModelParam._m0[18u].z, fma(_2625, cbModelParam._m0[18u].y, _2624 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2626, cbModelParam._m0[19u].z, fma(_2625, cbModelParam._m0[19u].y, _2624 * cbModelParam._m0[19u].x))), _1782);
            frontier_phi_22_47_ladder = _2748.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2748.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2748.x * cbModelParam._m0[1u].z;
        }
        _1872 = frontier_phi_22_47_ladder_2;
        _1874 = frontier_phi_22_47_ladder_1;
        _1876 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1856 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_881, _882, _883), _1782);
        _1872 = _1856.x * cbModelParam._m0[1u].z;
        _1874 = _1856.y * cbModelParam._m0[1u].z;
        _1876 = _1856.z * cbModelParam._m0[1u].z;
    }
    float _1889 = (((_908 * _857) + _909) * _873) * ((cbModelParam._m0[1u].w * (_1872 - _1773)) + _1773);
    float _1891 = (((_908 * _859) + _909) * _873) * ((cbModelParam._m0[1u].w * (_1874 - _1775)) + _1775);
    float _1893 = (((_908 * _860) + _909) * _873) * ((cbModelParam._m0[1u].w * (_1876 - _1777)) + _1777);
    float _1896 = fma(_1893, cbSceneParam._m0[89u].z, fma(_1891, cbSceneParam._m0[89u].y, _1889 * cbSceneParam._m0[89u].x));
    float _1899 = fma(_1893, cbSceneParam._m0[90u].z, fma(_1891, cbSceneParam._m0[90u].y, _1889 * cbSceneParam._m0[90u].x));
    float _1902 = fma(_1893, cbSceneParam._m0[91u].z, fma(_1891, cbSceneParam._m0[91u].y, _1889 * cbSceneParam._m0[91u].x));
    float _1936 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1940 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1944 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1948 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1949 = _1936 / _1948;
    float _1950 = _1940 / _1948;
    float _1951 = _1944 / _1948;
    float _2098;
    float _2099;
    float _2100;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1978 = ((uint(_1951 > cbSceneParam._m0[59u].y) + uint(_1951 > cbSceneParam._m0[59u].x)) + uint(_1951 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1979 = _1978 + 43u;
        uint _1987 = _1978 + 44u;
        uint _1995 = _1978 + 45u;
        uint _2003 = _1978 + 46u;
        float _2014 = fma(_1948, cbSceneParam._m0[_1979].w, fma(_1944, cbSceneParam._m0[_1979].z, fma(_1940, cbSceneParam._m0[_1979].y, _1936 * cbSceneParam._m0[_1979].x)));
        float _2018 = fma(_1948, cbSceneParam._m0[_1987].w, fma(_1944, cbSceneParam._m0[_1987].z, fma(_1940, cbSceneParam._m0[_1987].y, _1936 * cbSceneParam._m0[_1987].x)));
        float _2026 = fma(_1948, cbSceneParam._m0[_2003].w, fma(_1944, cbSceneParam._m0[_2003].z, fma(_1940, cbSceneParam._m0[_2003].y, _1936 * cbSceneParam._m0[_2003].x)));
        float _2031 = cbSceneParam._m0[33u].z * _2026;
        float _2033 = cbSceneParam._m0[33u].w * _2026;
        float _2036 = fma(_1948, cbSceneParam._m0[_1995].w, fma(_1944, cbSceneParam._m0[_1995].z, fma(_1940, cbSceneParam._m0[_1995].y, _1936 * cbSceneParam._m0[_1995].x))) / _2026;
        float _2084 = (cbSceneParam._m0[33u].x - sqrt(((_1950 * _1950) + (_1949 * _1949)) + (_1951 * _1951))) * cbSceneParam._m0[33u].y;
        float _4359 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2091 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2031 + _2014) / _2026, (_2033 + _2018) / _2026), _2036), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2033 + _2014) / _2026, (_2018 - _2031) / _2026), _2036), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2014 - _2031) / _2026, (_2018 - _2033) / _2026), _2036), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2014 - _2033) / _2026, (_2031 + _2018) / _2026), _2036), 0.0)).x), vec4(0.25)));
        _2098 = 1.0 - (_2091 * cbSceneParam._m0[34u].x);
        _2099 = 1.0 - (_2091 * cbSceneParam._m0[34u].y);
        _2100 = 1.0 - (_2091 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2098 = 1.0;
        _2099 = 1.0;
        _2100 = 1.0;
    }
    float _2164;
    float _2166;
    float _2168;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2152 = fma(_1948, cbSceneParam._m0[63u].w, fma(_1944, cbSceneParam._m0[63u].z, fma(_1940, cbSceneParam._m0[63u].y, _1936 * cbSceneParam._m0[63u].x)));
        float _2153 = fma(_1948, cbSceneParam._m0[60u].w, fma(_1944, cbSceneParam._m0[60u].z, fma(_1940, cbSceneParam._m0[60u].y, _1936 * cbSceneParam._m0[60u].x))) / _2152;
        float _2154 = fma(_1948, cbSceneParam._m0[61u].w, fma(_1944, cbSceneParam._m0[61u].z, fma(_1940, cbSceneParam._m0[61u].y, _1936 * cbSceneParam._m0[61u].x))) / _2152;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2153 >= cbSceneParam._m0[64u].x) && (_2154 >= cbSceneParam._m0[64u].y)) && (_2153 <= cbSceneParam._m0[64u].z)) && (_2154 <= cbSceneParam._m0[64u].w))
        {
            float _2292 = fma(_1948, cbSceneParam._m0[62u].w, fma(_1944, cbSceneParam._m0[62u].z, fma(_1940, cbSceneParam._m0[62u].y, _1936 * cbSceneParam._m0[62u].x))) / _2152;
            float _2296 = isnan(cbSceneParam._m0[41u].w) ? _2292 : (isnan(_2292) ? cbSceneParam._m0[41u].w : max(_2292, cbSceneParam._m0[41u].w));
            float _2339 = (cbSceneParam._m0[33u].x - sqrt(((_1950 * _1950) + (_1949 * _1949)) + (_1951 * _1951))) * cbSceneParam._m0[33u].y;
            float _4375 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
            float _2346 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2153, cbSceneParam._m0[33u].w + _2154), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2153, _2154 - cbSceneParam._m0[33u].z), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2153 - cbSceneParam._m0[33u].z, _2154 - cbSceneParam._m0[33u].w), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2153 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2154), _2296), 0.0)).x), vec4(0.25)));
            float _2350 = 1.0 - (_2346 * cbSceneParam._m0[34u].x);
            float _2351 = 1.0 - (_2346 * cbSceneParam._m0[34u].y);
            float _2352 = 1.0 - (_2346 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2352) ? _2100 : (isnan(_2100) ? _2352 : min(_2100, _2352));
            frontier_phi_34_33_ladder_1 = isnan(_2351) ? _2099 : (isnan(_2099) ? _2351 : min(_2099, _2351));
            frontier_phi_34_33_ladder_2 = isnan(_2350) ? _2098 : (isnan(_2098) ? _2350 : min(_2098, _2350));
        }
        else
        {
            frontier_phi_34_33_ladder = _2100;
            frontier_phi_34_33_ladder_1 = _2099;
            frontier_phi_34_33_ladder_2 = _2098;
        }
        _2164 = frontier_phi_34_33_ladder_2;
        _2166 = frontier_phi_34_33_ladder_1;
        _2168 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2164 = _2098;
        _2166 = _2099;
        _2168 = _2100;
    }
    uvec4 _2173 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2175 = _2173.x * 14u;
    uint _2176 = _2175 + 13u;
    float _2183 = _873 + (-1.0);
    float _2188 = (cbLight._m0[_2176].x * _2183) + 1.0;
    float _2189 = (cbLight._m0[_2176].y * _2183) + 1.0;
    float _2190 = (cbLight._m0[_2176].z * _2183) + 1.0;
    float _2191 = (cbLight._m0[_2176].w * _2183) + 1.0;
    uint _2192 = _2175 + 5u;
    float _2198 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
    uint _2202 = _2175 + 4u;
    float _2211 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
    uint _2215 = _2175 | 1u;
    float _2226 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_707, _708, _709));
    float _2229 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_707, _708, _709));
    float _4411 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _4422 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2234 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * 0.3183098733425140380859375;
    float _2236 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * 0.3183098733425140380859375;
    float _2243 = ((cbLight._m0[_2192].x * _2198) * _2236) + (((cbLight._m0[_2202].x * _2164) * _2211) * _2234);
    float _2244 = ((_2198 * cbLight._m0[_2192].y) * _2236) + (((cbLight._m0[_2202].y * _2166) * _2211) * _2234);
    float _2245 = ((_2198 * cbLight._m0[_2192].z) * _2236) + (((cbLight._m0[_2202].z * _2168) * _2211) * _2234);
    uvec4 _2249 = floatBitsToUint(cbLight._m0[_2175 + 12u]);
    bool _2251 = _2249.x == 0u;
    float _2353;
    float _2355;
    float _2357;
    if (_2251)
    {
        _2353 = _2243;
        _2355 = _2244;
        _2357 = _2245;
    }
    else
    {
        uint _2361 = _2175 + 6u;
        float _2377 = (dot(vec3(cbLight._m0[_2175 + 2u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2378 = _2377 * _2377;
        float _4433 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2379 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2380 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2353 = (((cbLight._m0[_2361].x * 0.3183098733425140380859375) * _2379) * _2380) + _2243;
        _2355 = (((cbLight._m0[_2361].y * 0.3183098733425140380859375) * _2379) * _2380) + _2244;
        _2357 = (((cbLight._m0[_2361].z * 0.3183098733425140380859375) * _2379) * _2380) + _2245;
    }
    bool _2360 = _2249.y == 0u;
    float _2415;
    float _2417;
    float _2419;
    if (_2360)
    {
        _2415 = _2353;
        _2417 = _2355;
        _2419 = _2357;
    }
    else
    {
        uint _2588 = _2175 + 7u;
        float _2604 = (dot(vec3(cbLight._m0[_2175 + 3u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2605 = _2604 * _2604;
        float _4449 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2606 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2607 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2415 = (((cbLight._m0[_2588].x * 0.3183098733425140380859375) * _2606) * _2607) + _2353;
        _2417 = (((cbLight._m0[_2588].y * 0.3183098733425140380859375) * _2606) * _2607) + _2355;
        _2419 = (((cbLight._m0[_2588].z * 0.3183098733425140380859375) * _2606) * _2607) + _2357;
    }
    uint _2422 = _2175 + 8u;
    float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _710) * 0.949999988079071044921875);
    float _2436 = _2435 * _2435;
    float _2437 = cbLight._m0[_2175].x + _787;
    float _2438 = cbLight._m0[_2175].y + _788;
    float _2439 = cbLight._m0[_2175].z + _789;
    float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
    float _2444 = _2443 * _2437;
    float _2445 = _2443 * _2438;
    float _2446 = _2443 * _2439;
    float _2447 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2175].xyz));
    float _4465 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2450 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _4476 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _2451 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2452 = dot(vec3(_707, _708, _709), vec3(_2444, _2445, _2446));
    float _4487 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2456 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2444, _2445, _2446));
    float _4498 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2460 = _2436 * _2436;
    float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
    float _2472 = exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0);
    float _2473 = 0.959999978542327880859375 - _854;
    float _2475 = 0.959999978542327880859375 - _855;
    float _2476 = 0.959999978542327880859375 - _856;
    float _2483 = 1.0 - _2436;
    float _2494 = (0.5 / (((_2451 * ((_2450 * _2483) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2483) + _2436) * _2450))) * _2450;
    float _4509 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2496 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
    uint _2510 = _2175 + 9u;
    float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _710) * 0.949999988079071044921875);
    float _2522 = _2521 * _2521;
    float _2523 = cbLight._m0[_2215].x + _787;
    float _2524 = cbLight._m0[_2215].y + _788;
    float _2525 = cbLight._m0[_2215].z + _789;
    float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
    float _2530 = _2529 * _2523;
    float _2531 = _2529 * _2524;
    float _2532 = _2529 * _2525;
    float _2533 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2215].xyz));
    float _4520 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2537 = dot(vec3(_707, _708, _709), vec3(_2530, _2531, _2532));
    float _4531 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2540 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2541 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2530, _2531, _2532));
    float _4542 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2545 = _2522 * _2522;
    float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
    float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0);
    float _2563 = 1.0 - _2522;
    float _2573 = (0.5 / (((_2451 * ((_2536 * _2563) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2563) + _2522) * _2536))) * _2536;
    float _4553 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2575 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
    float _2585 = (((((_2556 * _2473) + _857) * cbLight._m0[_2510].x) * _2575) * _2198) + ((((cbLight._m0[_2422].x * _2164) * ((_2472 * _2473) + _857)) * _2496) * _2211);
    float _2586 = (((((_2556 * _2475) + _859) * cbLight._m0[_2510].y) * _2575) * _2198) + ((((cbLight._m0[_2422].y * _2166) * ((_2472 * _2475) + _859)) * _2496) * _2211);
    float _2587 = (((((_2556 * _2476) + _860) * cbLight._m0[_2510].z) * _2575) * _2198) + ((((cbLight._m0[_2422].z * _2168) * ((_2472 * _2476) + _860)) * _2496) * _2211);
    float _2643;
    float _2645;
    float _2647;
    if (_2251)
    {
        _2643 = _2585;
        _2645 = _2586;
        _2647 = _2587;
    }
    else
    {
        uint _2649 = _2175 + 2u;
        uint _2653 = _2175 + 10u;
        float _2667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2649].w)) * _710) * 0.949999988079071044921875);
        float _2668 = _2667 * _2667;
        float _2669 = cbLight._m0[_2649].x + _787;
        float _2670 = cbLight._m0[_2649].y + _788;
        float _2671 = cbLight._m0[_2649].z + _789;
        float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
        float _2676 = _2675 * _2669;
        float _2677 = _2675 * _2670;
        float _2678 = _2675 * _2671;
        float _2679 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2649].xyz));
        float _4564 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2683 = dot(vec3(_707, _708, _709), vec3(_2676, _2677, _2678));
        float _4575 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2686 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2687 = dot(vec3(cbLight._m0[_2649].xyz), vec3(_2676, _2677, _2678));
        float _4586 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2691 = _2668 * _2668;
        float _2695 = ((_2686 * _2686) * (_2691 + (-1.0))) + 1.0;
        float _2702 = exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0);
        float _2709 = 1.0 - _2668;
        float _2719 = (0.5 / (((_2451 * ((_2682 * _2709) + _2668)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2709) + _2668) * _2682))) * _2682;
        float _4597 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2721 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2691 / ((_2695 * _2695) * 3.141590118408203125));
        float _2722 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2643 = (((((_2702 * _2473) + _857) * cbLight._m0[_2653].x) * _2721) * _2722) + _2585;
        _2645 = (((((_2702 * _2475) + _859) * cbLight._m0[_2653].y) * _2721) * _2722) + _2586;
        _2647 = (((((_2702 * _2476) + _860) * cbLight._m0[_2653].z) * _2721) * _2722) + _2587;
    }
    float _2753;
    float _2755;
    float _2757;
    if (_2360)
    {
        _2753 = _2643;
        _2755 = _2645;
        _2757 = _2647;
    }
    else
    {
        uint _2764 = _2175 + 3u;
        uint _2768 = _2175 + 11u;
        float _2782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2764].w)) * _710) * 0.949999988079071044921875);
        float _2783 = _2782 * _2782;
        float _2784 = cbLight._m0[_2764].x + _787;
        float _2785 = cbLight._m0[_2764].y + _788;
        float _2786 = cbLight._m0[_2764].z + _789;
        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
        float _2791 = _2790 * _2784;
        float _2792 = _2790 * _2785;
        float _2793 = _2790 * _2786;
        float _2794 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2764].xyz));
        float _4613 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2798 = dot(vec3(_707, _708, _709), vec3(_2791, _2792, _2793));
        float _4624 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2801 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2802 = dot(vec3(cbLight._m0[_2764].xyz), vec3(_2791, _2792, _2793));
        float _4635 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2806 = _2783 * _2783;
        float _2810 = ((_2801 * _2801) * (_2806 + (-1.0))) + 1.0;
        float _2817 = exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0);
        float _2824 = 1.0 - _2783;
        float _2834 = (0.5 / (((_2451 * ((_2797 * _2824) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2824) + _2783) * _2797))) * _2797;
        float _4646 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2836 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2806 / ((_2810 * _2810) * 3.141590118408203125));
        float _2837 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2753 = (((((_2817 * _2473) + _857) * cbLight._m0[_2768].x) * _2836) * _2837) + _2643;
        _2755 = (((((_2817 * _2475) + _859) * cbLight._m0[_2768].y) * _2836) * _2837) + _2645;
        _2757 = (((((_2817 * _2476) + _860) * cbLight._m0[_2768].z) * _2836) * _2837) + _2647;
    }
    float _2903;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    if (_2173.y == 0u)
    {
        uvec4 _2858 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2859 = _2858.x;
        uint _2870 = uint((float(_2858.y) * floor(float(uint(cbSceneParam._m0[85u].y * _796) / _2859))) + floor(float(uint(cbSceneParam._m0[85u].x * _795) / _2859)));
        float _2880 = (log2(_1951 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2881 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        uint _2884 = uint(isnan(14.0) ? _2881 : (isnan(_2881) ? 14.0 : min(_2881, 14.0)));
        uvec4 _2889 = texelFetch(g_lightClusterGridBuffer, int(((_2884 << 2u) + (_2870 << 6u)) >> 2u));
        uint _2890 = _2889.x;
        uint _2891 = _2858.z;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        if (((((1u << ((_2891 >> 4u) & 15u)) + 4294967295u) & _2890) == 0u) || ((_2891 & 240u) == 0u))
        {
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
        }
        else
        {
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _2979;
            float _2981;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            uint _3121 = 0u;
            uint _3130;
            bool _3131;
            for (;;)
            {
                _3130 = texelFetch(g_lightClassification, int((((_2884 << 5u) + (_2870 << 9u)) + (_3121 << 2u)) >> 2u)).x;
                _3131 = _3130 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3131)
                {
                    frontier_phi_66_pred = _3120;
                    frontier_phi_66_pred_1 = _3119;
                    frontier_phi_66_pred_2 = _3118;
                    frontier_phi_66_pred_3 = _3117;
                    frontier_phi_66_pred_4 = _3116;
                    frontier_phi_66_pred_5 = _3115;
                }
                else
                {
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    uint _3245;
                    _3239 = _3115;
                    _3240 = _3116;
                    _3241 = _3117;
                    _3242 = _3118;
                    _3243 = _3119;
                    _3244 = _3120;
                    _3245 = _3130;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    for (;;)
                    {
                        uint _3249 = uint(findLSB(_3245)) + (_3121 << 5u);
                        uint _3246 = (_3245 + 4294967295u) & _3245;
                        uint _3251 = _3249 * 48u;
                        vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 3u)).x));
                        uint _3271 = (_3249 * 48u) + 4u;
                        vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 3u)).x));
                        uint _3290 = (_3249 * 48u) + 8u;
                        vec3 _3301 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3290)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 2u)).x));
                        float _3305 = _3265.x - _1949;
                        float _3306 = _3265.y - _1950;
                        float _3307 = _3265.z - _1951;
                        float _3308 = dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307));
                        float _3311 = inversesqrt(_3308);
                        float _3312 = _3311 * _3305;
                        float _3313 = _3311 * _3306;
                        float _3314 = _3311 * _3307;
                        float _3315 = dot(vec3(_814, _817, _820), vec3(_3312, _3313, _3314));
                        float _3320 = 1.0 - (_3308 * _3265.w);
                        float _4672 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3321 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                        float _3322 = sqrt(_3308) * _3284.w;
                        float _3325 = 1.39999997615814208984375 / (_3322 + 1.39999997615814208984375);
                        float _3326 = _3325 * _3325;
                        float _3329 = ((1.0 - _3326) * _3315) + _3326;
                        float _3332 = _3322 * _3322;
                        float _3336 = ((isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))) * _3321) / ((_3332 * 0.699999988079071044921875) + 1.0);
                        float _3340 = (-0.0) - _1949;
                        float _3341 = (-0.0) - _1950;
                        float _3342 = (-0.0) - _1951;
                        float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                        float _3347 = _3346 * _3340;
                        float _3348 = _3346 * _3341;
                        float _3349 = _3346 * _3342;
                        float _3356 = exp2(log2(1.0 / ((_3332 * 3.5) + 5.0)) * 0.25);
                        float _3357 = 1.0 - _889;
                        float _3364 = sqrt(1.0 - ((1.0 - (_3357 * _3357)) * (1.0 - (_3356 * _3356))));
                        float _3365 = _3364 * _3364;
                        float _3366 = _3365 * _3365;
                        float _3367 = _3347 + _3312;
                        float _3368 = _3348 + _3313;
                        float _3369 = _3349 + _3314;
                        float _3373 = inversesqrt(dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369)));
                        float _3377 = dot(vec3(_814, _817, _820), vec3(_3347, _3348, _3349));
                        float _4688 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3380 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3381 = dot(vec3(_814, _817, _820), vec3(_3373 * _3367, _3373 * _3368, _3373 * _3369));
                        float _4699 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3384 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                        float _3388 = ((_3384 * _3384) * (_3366 + (-1.0))) + 1.0;
                        float _3389 = _3325 * _3365;
                        float _3390 = _3389 * _3389;
                        float _3393 = ((1.0 - _3390) * _3315) + _3390;
                        float _4710 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3394 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3395 = 1.0 - _3365;
                        float _3405 = (0.5 / (((_3394 * ((_3380 * _3395) + _3365)) + 9.9999999392252902907785028219223e-09) + (((_3394 * _3395) + _3365) * _3380))) * _3394;
                        float _4721 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3416 = (((_3366 * 3.1415927410125732421875) * (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) / ((_3388 * _3388) * ((_3332 * 2.1991131305694580078125) + 3.141590118408203125))) * _3321;
                        _3174 = (_3336 * _3284.x) + _3242;
                        _3175 = (_3336 * _3284.y) + _3243;
                        _3176 = (_3336 * _3284.z) + _3244;
                        _3171 = (_3416 * _3301.x) + _3239;
                        _3172 = (_3416 * _3301.y) + _3240;
                        _3173 = (_3416 * _3301.z) + _3241;
                        if (_3246 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3239 = _3171;
                            _3240 = _3172;
                            _3241 = _3173;
                            _3242 = _3174;
                            _3243 = _3175;
                            _3244 = _3176;
                            _3245 = _3246;
                        }
                    }
                    frontier_phi_66_pred = _3176;
                    frontier_phi_66_pred_1 = _3175;
                    frontier_phi_66_pred_2 = _3174;
                    frontier_phi_66_pred_3 = _3173;
                    frontier_phi_66_pred_4 = _3172;
                    frontier_phi_66_pred_5 = _3171;
                }
                _2981 = frontier_phi_66_pred;
                _2979 = frontier_phi_66_pred_1;
                _2977 = frontier_phi_66_pred_2;
                _2975 = frontier_phi_66_pred_3;
                _2973 = frontier_phi_66_pred_4;
                _2971 = frontier_phi_66_pred_5;
                uint _3122 = _3121 + 1u;
                if (_3122 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3115 = _2971;
                    _3116 = _2973;
                    _3117 = _2975;
                    _3118 = _2977;
                    _3119 = _2979;
                    _3120 = _2981;
                    _3121 = _3122;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
        }
        uvec4 _2984 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2985 = _2984.z;
        uint _2987 = (_2985 >> 8u) & 15u;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        if (((4294967295u << _2987) & _2890) == 0u)
        {
            _3083 = _2970;
            _3085 = _2972;
            _3087 = _2974;
            _3089 = _2976;
            _3091 = _2978;
            _3093 = _2980;
        }
        else
        {
            float _3108 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
            float _3109 = _3108 * _1949;
            float _3110 = _3108 * _1950;
            float _3111 = _3108 * _1951;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2987 < ((_2985 >> 12u) & 15u))
            {
                float _3084;
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3094;
                float _3222 = _2970;
                float _3223 = _2972;
                float _3224 = _2974;
                float _3225 = _2976;
                float _3226 = _2978;
                float _3227 = _2980;
                uint _3228 = _2987;
                uint _3237;
                bool _3238;
                for (;;)
                {
                    _3237 = texelFetch(g_lightClassification, int((((_2884 << 5u) + (_2870 << 9u)) + (_3228 << 2u)) >> 2u)).x;
                    _3238 = _3237 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3238)
                    {
                        frontier_phi_72_pred = _3227;
                        frontier_phi_72_pred_1 = _3226;
                        frontier_phi_72_pred_2 = _3225;
                        frontier_phi_72_pred_3 = _3224;
                        frontier_phi_72_pred_4 = _3223;
                        frontier_phi_72_pred_5 = _3222;
                    }
                    else
                    {
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3434 = _3222;
                        float _3435 = _3223;
                        float _3436 = _3224;
                        float _3437 = _3225;
                        float _3438 = _3226;
                        float _3439 = _3227;
                        uint _3440 = _3237;
                        uint _3441;
                        vec4 _3466;
                        float _3467;
                        vec4 _3482;
                        vec3 _3494;
                        vec4 _3509;
                        vec4 _3524;
                        float _3571;
                        bool _3572;
                        for (;;)
                        {
                            uint _3451 = ((_3228 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3440));
                            _3441 = (_3440 + 4294967295u) & _3440;
                            uint _3453 = _3451 * 40u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            _3467 = _3466.w;
                            uint _3469 = (_3451 * 40u) + 4u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3451 * 40u) + 8u;
                            _3494 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x));
                            uint _3496 = (_3451 * 40u) + 16u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3511 = (_3451 * 40u) + 20u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3527 = (_3451 * 40u) + 24u;
                            vec4 _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3546 = (_3451 * 40u) + 28u;
                            vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            _3571 = fma(_1951, _3559.z, fma(_1950, _3559.y, _3559.x * _1949)) + _3559.w;
                            _3572 = !((fma(_1951, _3540.z, fma(_1950, _3540.y, _3540.x * _1949)) + _3540.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3572)
                            {
                                float _3599 = _3466.x - _1949;
                                float _3600 = _3466.y - _1950;
                                float _3601 = _3466.z - _1951;
                                float _3602 = dot(vec3(_3599, _3600, _3601), vec3(_3599, _3600, _3601));
                                float _3605 = inversesqrt(_3602);
                                float _3606 = _3605 * _3599;
                                float _3607 = _3605 * _3600;
                                float _3608 = _3605 * _3601;
                                float _3612 = 1.0 - (_3602 / (_3467 * _3467));
                                float _4732 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3617 = sqrt(_3602) * _3482.w;
                                float _3619 = 1.39999997615814208984375 / (_3617 + 1.39999997615814208984375);
                                float _3620 = _3619 * _3619;
                                float _3623 = ((1.0 - _3620) * dot(vec3(_3606, _3607, _3608), vec3(_814, _817, _820))) + _3620;
                                float _3626 = _3617 * _3617;
                                float _3630 = (fma(_1951, _3509.z, fma(_1950, _3509.y, _3509.x * _1949)) + _3509.w) / _3571;
                                float _3631 = (fma(_1951, _3524.z, fma(_1950, _3524.y, _3524.x * _1949)) + _3524.w) / _3571;
                                float _3635 = 1.0 - dot(vec2(_3630, _3631), vec2(_3630, _3631));
                                float _4748 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3637 = _3636 * (((isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0))) * _3613) / ((_3626 * 0.699999988079071044921875) + 1.0));
                                float _3649 = exp2(log2(1.0 / ((_3626 * 3.5) + 5.0)) * 0.25);
                                float _3650 = 1.0 - _889;
                                float _3657 = sqrt(1.0 - ((1.0 - (_3650 * _3650)) * (1.0 - (_3649 * _3649))));
                                float _3658 = _3657 * _3657;
                                float _3659 = _3658 * _3658;
                                float _3660 = _3606 - _3109;
                                float _3661 = _3607 - _3110;
                                float _3662 = _3608 - _3111;
                                float _3666 = inversesqrt(dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662)));
                                float _3670 = dot(vec3(_814, _817, _820), vec3((-0.0) - _3109, (-0.0) - _3110, (-0.0) - _3111));
                                float _4759 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3673 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3674 = dot(vec3(_814, _817, _820), vec3(_3666 * _3660, _3666 * _3661, _3666 * _3662));
                                float _4770 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3677 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3681 = ((_3677 * _3677) * (_3659 + (-1.0))) + 1.0;
                                float _3682 = _3619 * _3658;
                                float _3683 = _3682 * _3682;
                                float _3689 = ((1.0 - _3683) * dot(vec3(_814, _817, _820), vec3(_3606, _3607, _3608))) + _3683;
                                float _4781 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3691 = 1.0 - _3658;
                                float _3701 = (0.5 / (((_3690 * ((_3673 * _3691) + _3658)) + 9.9999999392252902907785028219223e-09) + (((_3690 * _3691) + _3658) * _3673))) * _3690;
                                float _4792 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3711 = (_3636 * _3613) * (((_3659 * 3.1415927410125732421875) * (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) / ((_3681 * _3681) * ((_3626 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3637 * _3482.y;
                                frontier_phi_78_pred_1 = _3637 * _3482.x;
                                frontier_phi_78_pred_2 = _3711 * _3494.z;
                                frontier_phi_78_pred_3 = _3711 * _3494.y;
                                frontier_phi_78_pred_4 = _3711 * _3494.x;
                                frontier_phi_78_pred_5 = _3637 * _3482.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3719 = frontier_phi_78_pred;
                            _3718 = frontier_phi_78_pred_1;
                            _3717 = frontier_phi_78_pred_2;
                            _3716 = frontier_phi_78_pred_3;
                            _3715 = frontier_phi_78_pred_4;
                            _3720 = frontier_phi_78_pred_5;
                            _3424 = _3718 + _3437;
                            _3425 = _3719 + _3438;
                            _3426 = _3720 + _3439;
                            _3421 = _3715 + _3434;
                            _3422 = _3716 + _3435;
                            _3423 = _3717 + _3436;
                            if (_3441 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3441;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3426;
                        frontier_phi_72_pred_1 = _3425;
                        frontier_phi_72_pred_2 = _3424;
                        frontier_phi_72_pred_3 = _3423;
                        frontier_phi_72_pred_4 = _3422;
                        frontier_phi_72_pred_5 = _3421;
                    }
                    _3094 = frontier_phi_72_pred;
                    _3092 = frontier_phi_72_pred_1;
                    _3090 = frontier_phi_72_pred_2;
                    _3088 = frontier_phi_72_pred_3;
                    _3086 = frontier_phi_72_pred_4;
                    _3084 = frontier_phi_72_pred_5;
                    uint _3229 = _3228 + 1u;
                    if (_3229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3222 = _3084;
                        _3223 = _3086;
                        _3224 = _3088;
                        _3225 = _3090;
                        _3226 = _3092;
                        _3227 = _3094;
                        _3228 = _3229;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3094;
                frontier_phi_60_61_ladder_1 = _3092;
                frontier_phi_60_61_ladder_2 = _3088;
                frontier_phi_60_61_ladder_3 = _3086;
                frontier_phi_60_61_ladder_4 = _3084;
                frontier_phi_60_61_ladder_5 = _3090;
            }
            else
            {
                frontier_phi_60_61_ladder = _2980;
                frontier_phi_60_61_ladder_1 = _2978;
                frontier_phi_60_61_ladder_2 = _2974;
                frontier_phi_60_61_ladder_3 = _2972;
                frontier_phi_60_61_ladder_4 = _2970;
                frontier_phi_60_61_ladder_5 = _2976;
            }
            _3083 = frontier_phi_60_61_ladder_4;
            _3085 = frontier_phi_60_61_ladder_3;
            _3087 = frontier_phi_60_61_ladder_2;
            _3089 = frontier_phi_60_61_ladder_5;
            _3091 = frontier_phi_60_61_ladder_1;
            _3093 = frontier_phi_60_61_ladder;
        }
        float _3098 = isnan(1.0) ? _873 : (isnan(_873) ? 1.0 : min(_873, 1.0));
        _2903 = (_3098 * _3089) + _2415;
        _2905 = (_3098 * _3091) + _2417;
        _2907 = (_3098 * _3093) + _2419;
        _2909 = ((_3083 * _857) * _3098) + _2753;
        _2911 = ((_3085 * _859) * _3098) + _2755;
        _2913 = ((_3087 * _860) * _3098) + _2757;
    }
    else
    {
        _2903 = _2415;
        _2905 = _2417;
        _2907 = _2419;
        _2909 = _2753;
        _2911 = _2755;
        _2913 = _2757;
    }
    float _4808 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4819 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4830 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    uint _2933 = _244 + 6u;
    float _2941 = _795 / cbSceneParam._m0[86u].x;
    float _2942 = _796 / cbSceneParam._m0[86u].y;
    vec4 _2956 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2941, _2942, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2958 = _2956.x;
    float _2959 = _2956.y;
    float _2960 = _2956.z;
    float _2961 = _2956.w;
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2995 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2996 = _2995 / _729;
        float _3007 = _2996 * _780;
        float _3008 = _781 * _2996;
        float _3009 = (-0.0) - _3008;
        float _3011 = _2996 * _782;
        float _3013 = (cbSceneParam._m0[77u].w * _3009) / _2995;
        float _3014 = _3013 + cbSceneParam._m0[79u].w;
        float _3015 = cbSceneParam._m0[79u].w - _3008;
        float _3021 = sqrt(((_3007 * _3007) + (_3008 * _3008)) + (_3011 * _3011));
        float _3024 = (1.0 - (cbSceneParam._m0[77u].w / _2995)) * _3021;
        float _3029 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3031 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3184;
        if (abs((_3009 - _3013) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3184 = ((((_3014 > 0.0) ? exp2(_3029 * _3014) : (2.0 - exp2(_3031 * _3014))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3024;
        }
        else
        {
            float _3144 = 1.0 / cbSceneParam._m0[80u].x;
            float _3145 = isnan(_3015) ? _3014 : (isnan(_3014) ? _3015 : max(_3014, _3015));
            float _3146 = isnan(_3015) ? _3014 : (isnan(_3014) ? _3015 : min(_3014, _3015));
            float _3155 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : min(_3145, 0.0));
            float _3156 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : min(_3146, 0.0));
            _3184 = ((abs(_3021 / _3009) * cbSceneParam._m0[80u].y) * ((((_3155 - _3156) * 2.0) - ((exp2(_3029 * (isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0)))) - exp2(_3029 * (isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))))) * _3144)) - ((exp2(_3031 * _3155) - exp2(_3031 * _3156)) * _3144))) + (_3024 * cbSceneParam._m0[80u].z);
        }
        vec4 _3186 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2941, _2942, 1.0), 0.0);
        float _3195 = exp2((_3184 * (-1.44269502162933349609375)) * (1.0 - _3186.w));
        float _3196 = log2(_3195);
        float _3212 = log2(_2961);
        _3033 = (exp2(_3212 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3196 * cbSceneParam._m0[78u].x)) * _3186.x) / cbSceneParam._m0[78u].x)) + _2958;
        _3035 = (exp2(_3212 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3196 * cbSceneParam._m0[78u].y)) * _3186.y) / cbSceneParam._m0[78u].y)) + _2959;
        _3037 = (exp2(_3212 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3196 * cbSceneParam._m0[78u].z)) * _3186.z) / cbSceneParam._m0[78u].z)) + _2960;
        _3039 = _3195 * _2961;
    }
    else
    {
        _3033 = _2958;
        _3035 = _2959;
        _3037 = _2960;
        _3039 = _2961;
    }
    float _3051 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3052 = _3051 == 3.0;
    float _3053 = log2(_3039);
    float _3060 = exp2(_3053 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2903 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _873))) + ((_2909 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1680)) * cbPerFrame._m0[3u].x));
    float _3061 = exp2(_3053 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2905 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _873))) + ((_2911 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1680)) * cbPerFrame._m0[3u].x));
    float _3062 = exp2(_3053 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2907 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _873))) + ((_2913 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1680)) * cbPerFrame._m0[3u].x));
    float _3071 = (_3051 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3071 * (_3052 ? _3060 : (_3060 + (cbSceneParam._m0[72u].w * _3033)));
    SV_Target.y = _3071 * (_3052 ? _3061 : (_3061 + (cbSceneParam._m0[72u].w * _3035)));
    SV_Target.z = _3071 * (_3052 ? _3062 : (_3062 + (cbSceneParam._m0[72u].w * _3037)));
    SV_Target.w = cbInstanceData._m0[_2933].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2933].w;
}


