#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1326;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _368 = _366.x;
    float _380 = dot(vec4(_368, _366.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _397 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _330.x) * 2.0) - ((((_368 - _380) * cbMtdParam._m0[23u].w) + _380) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3652 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _405 = (_398 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _406 = (_398 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _407 = (_398 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _444 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _446 = _444.x;
    float _456 = dot(vec4(_446, _444.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _470 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _330.y) * 2.0) - ((((_446 - _456) * cbMtdParam._m0[23u].w) + _456) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3663 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _478 = (_471 * ((_424.x * cbMtdParam._m0[13u].x) - _405)) + _405;
    float _479 = (_471 * ((_424.y * cbMtdParam._m0[13u].y) - _406)) + _406;
    float _480 = (_471 * ((_424.z * cbMtdParam._m0[13u].z) - _407)) + _407;
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _517 = _515.x;
    float _518 = _515.y;
    float _519 = _515.z;
    float _526 = ((_498.x - _517) * _398) + _517;
    float _527 = ((_498.y - _518) * _398) + _518;
    float _528 = ((_498.z - _519) * _398) + _519;
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _553 = ((_540.z - _528) * _471) + _528;
    float _556 = ((((_540.x - _526) * _471) + _526) * 2.0) + (-1.0);
    float _558 = ((((_540.y - _527) * _471) + _527) * 2.0) + (-1.0);
    float _559 = dot(vec2(_556, _558), vec2(_556, _558));
    float _3674 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _564 = sqrt(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))));
    vec4 _578 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _590 = (((_578.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _556;
    float _591 = (((_578.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _558;
    float _594 = fma(_564, _230, fma(_591, _237, _590 * _223));
    float _597 = fma(_564, _231, fma(_591, _238, _590 * _224));
    float _600 = fma(_564, _232, fma(_591, _239, _590 * _225));
    float _604 = inversesqrt(dot(vec3(_594, _597, _600), vec3(_594, _597, _600)));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _633 = _631.x;
    float _634 = 1.0 - _633;
    float _643 = (cbMtdParam._m0[19u].x + dot(vec4(_604 * _594, _604 * _597, _604 * _600, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_633 - _634) * cbMtdParam._m0[24u].z) + _634) * cbMtdParam._m0[21u].z);
    float _3685 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _651 = (_644 * (cbMtdParam._m0[17u].x - _478)) + _478;
    float _652 = (_644 * (cbMtdParam._m0[17u].y - _479)) + _479;
    float _653 = (_644 * (cbMtdParam._m0[17u].z - _480)) + _480;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _681 = _679.x;
    float _699 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _681) * _398) + _681;
    float _716 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _262) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _263) + cbTextureTilingScale._m0[21u].w)).x - _699) * _471) + _699;
    float _720 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _716) * cbMtdParam._m0[19u].z) + _716;
    float _722 = _720 - (_720 * _644);
    float _726 = (cbMtdParam._m0[19u].w * (_578.z - _553)) + _553;
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _746 = (_739.x * 2.0) + (-1.0);
    float _747 = (_739.y * 2.0) + (-1.0);
    float _748 = dot(vec2(_746, _747), vec2(_746, _747));
    float _3696 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _756 = ((_739.z - _726) * _644) + _726;
    float _766 = ((sqrt(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) - _564) * _644) + _564;
    float _769 = (((_746 - _590) * _644) + _590) + (cbMtdParam._m0[21u].x * _590);
    float _770 = (((_747 - _591) * _644) + _591) + (cbMtdParam._m0[21u].x * _591);
    float _772 = cbMtdParam._m0[22u].x + _578.w;
    float _775 = fma(_766, _230, fma(_770, _237, _769 * _223));
    float _778 = fma(_766, _231, fma(_770, _238, _769 * _224));
    float _781 = fma(_766, _232, fma(_770, _239, _769 * _225));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _3707 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _789 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _3729 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _3740 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _3751 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _3762 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _794 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _859 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _849);
    float _860 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _849);
    float _861 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _849);
    float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
    float _866 = _859 * _865;
    float _867 = _860 * _865;
    float _868 = _861 * _865;
    float _874 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _875 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _893 = fma(_788, cbSceneParam._m0[5u].z, fma(_787, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _786));
    float _896 = fma(_788, cbSceneParam._m0[6u].z, fma(_787, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _786));
    float _899 = fma(_788, cbSceneParam._m0[7u].z, fma(_787, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _786));
    uint _913 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _919 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * cbInstanceData._m0[_913].x;
    float _920 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_913].y;
    float _921 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_913].z;
    float _3773 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _925 = 1.0 - _794;
    float _926 = _922 * _925;
    float _927 = _923 * _925;
    float _928 = _924 * _925;
    float _933 = (_922 + (-0.039999999105930328369140625)) * _794;
    float _934 = (_923 + (-0.039999999105930328369140625)) * _794;
    float _935 = (_924 + (-0.039999999105930328369140625)) * _794;
    float _936 = _933 + 0.039999999105930328369140625;
    float _938 = _934 + 0.039999999105930328369140625;
    float _939 = _935 + 0.039999999105930328369140625;
    vec4 _948 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _874, cbSceneParam._m0[86u].y * _875));
    float _952 = ((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * TEXCOORD_5.w) * _948.x;
    float _953 = dot(vec3(_786, _787, _788), vec3(_866, _867, _868));
    float _956 = _953 * 2.0;
    float _960 = (_956 * _786) - _866;
    float _961 = (_956 * _787) - _867;
    float _962 = (_956 * _788) - _868;
    float _966 = abs(dot(vec3(_866, _867, _868), vec3(_786, _787, _788)));
    float _3806 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _968 = sqrt(_789);
    float _981 = exp2((_968 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_968 * 3.0));
    float _987 = (1.0 - _981) * ((_968 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _988 = _981 * _968;
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1325;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1050 = fma(_1024, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016));
        float _1054 = fma(_1024, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016));
        float _1058 = fma(_1024, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016));
        float _1083 = _1016 + _786;
        float _1084 = _1020 + _787;
        float _1085 = _1024 + _788;
        float _1095 = fma(_1085, cbModelParam._m0[26u].z, fma(_1084, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083)) - _1050;
        float _1096 = fma(_1085, cbModelParam._m0[27u].z, fma(_1084, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083)) - _1054;
        float _1097 = fma(_1085, cbModelParam._m0[28u].z, fma(_1084, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083)) - _1058;
        float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
        float _1114 = ((_1101 * _1095) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1050 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1101 * _1096) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1054 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1101 * _1097) / cbModelParam._m0[34u].z) + ((((((_1058 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1153 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1119.x + (-0.5));
        float _1155 = _1153 * (_1119.y + (-0.5));
        float _1156 = _1153 * (_1119.z + (-0.5));
        float _1163 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1126.x + (-0.5));
        float _1165 = _1163 * (_1126.y + (-0.5));
        float _1166 = _1163 * (_1126.z + (-0.5));
        float _1173 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1133.x + (-0.5));
        float _1175 = _1173 * (_1133.y + (-0.5));
        float _1176 = _1173 * (_1133.z + (-0.5));
        float _1183 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1140.x + (-0.5));
        float _1185 = _1183 * (_1140.y + (-0.5));
        float _1186 = _1183 * (_1140.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1207 = (dot(vec3(_786, _787, _788), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1217 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3854 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1219 + 1.0))) + _1224) * _1187;
        float _1234 = _1155 * 0.5;
        float _1235 = _1165 * 0.5;
        float _1236 = _1175 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_786, _787, _788), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3887 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1261 + 1.0))) + _1266) * _1188;
        float _1276 = _1156 * 0.5;
        float _1277 = _1166 * 0.5;
        float _1278 = _1176 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_786, _787, _788), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3920 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1303 + 1.0))) + _1308) * _1189;
        _1325 = _1156;
        _1327 = _1155;
        _1328 = _1154;
        _1329 = _1166;
        _1330 = _1165;
        _1331 = _1164;
        _1332 = _1176;
        _1333 = _1175;
        _1334 = _1174;
        _1335 = _1189;
        _1336 = _1188;
        _1337 = _1187;
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1326;
        _1327 = _1326;
        _1328 = _1326;
        _1329 = _1326;
        _1330 = _1326;
        _1331 = _1326;
        _1332 = _1326;
        _1333 = _1326;
        _1334 = _1326;
        _1335 = _1326;
        _1336 = _1326;
        _1337 = _1326;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1364 = fma(_1024, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1016));
        float _1368 = fma(_1024, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1016));
        float _1372 = fma(_1024, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1016));
        float _1395 = _1016 + _786;
        float _1396 = _1020 + _787;
        float _1397 = _1024 + _788;
        float _1407 = fma(_1397, cbModelParam._m0[30u].z, fma(_1396, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1395)) - _1364;
        float _1408 = fma(_1397, cbModelParam._m0[31u].z, fma(_1396, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1395)) - _1368;
        float _1409 = fma(_1397, cbModelParam._m0[32u].z, fma(_1396, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1395)) - _1372;
        float _1413 = inversesqrt(dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409)));
        float _1426 = ((_1413 * _1407) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1364 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1427 = ((_1413 * _1408) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1368 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1413 * _1409) / cbModelParam._m0[35u].z) + ((((((_1372 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        float _1463 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1430.x + (-0.5));
        float _1465 = _1463 * (_1430.y + (-0.5));
        float _1466 = _1463 * (_1430.z + (-0.5));
        float _1473 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1437.x + (-0.5));
        float _1475 = _1473 * (_1437.y + (-0.5));
        float _1476 = _1473 * (_1437.z + (-0.5));
        float _1483 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1444.x + (-0.5));
        float _1485 = _1483 * (_1444.y + (-0.5));
        float _1486 = _1483 * (_1444.z + (-0.5));
        float _1493 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1451.x + (-0.5));
        float _1495 = _1493 * (_1451.y + (-0.5));
        float _1496 = _1493 * (_1451.z + (-0.5));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = _1464 * 0.5;
        float _1501 = _1474 * 0.5;
        float _1502 = _1484 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_786, _787, _788), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _3983 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1527 + 1.0))) + _1532) * _1497;
        float _1542 = _1465 * 0.5;
        float _1543 = _1475 * 0.5;
        float _1544 = _1485 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_786, _787, _788), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4016 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1569 + 1.0))) + _1574) * _1498;
        float _1584 = _1466 * 0.5;
        float _1585 = _1476 * 0.5;
        float _1586 = _1486 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_786, _787, _788), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4049 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1611 + 1.0))) + _1616) * _1499;
        _1633 = _1466;
        _1634 = _1465;
        _1635 = _1464;
        _1636 = _1476;
        _1637 = _1475;
        _1638 = _1474;
        _1639 = _1486;
        _1640 = _1485;
        _1641 = _1484;
        _1642 = _1499;
        _1643 = _1498;
        _1644 = _1497;
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
    }
    else
    {
        _1633 = _1326;
        _1634 = _1326;
        _1635 = _1326;
        _1636 = _1326;
        _1637 = _1326;
        _1638 = _1326;
        _1639 = _1326;
        _1640 = _1326;
        _1641 = _1326;
        _1642 = _1326;
        _1643 = _1326;
        _1644 = _1326;
        _1645 = 0.0;
        _1646 = 0.0;
        _1647 = 0.0;
    }
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1338)) + _1338;
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1339)) + _1339;
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1340)) + _1340;
    float _1680 = fma(_1659, cbSceneParam._m0[89u].z, fma(_1658, cbSceneParam._m0[89u].y, _1657 * cbSceneParam._m0[89u].x));
    float _1683 = fma(_1659, cbSceneParam._m0[90u].z, fma(_1658, cbSceneParam._m0[90u].y, _1657 * cbSceneParam._m0[90u].x));
    float _1686 = fma(_1659, cbSceneParam._m0[91u].z, fma(_1658, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1657));
    float _1701 = _960 * 0.5;
    float _1702 = _961 * 0.5;
    float _1703 = _962 * 0.5;
    float _1704 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1707 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1710 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1744;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1717 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1325, _1329, _1332, _1335));
        float _1721 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1725 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1732 = dot(vec4(cbModelParam._m0[39u]), vec4(_1701, _1702, _1703, 1.0));
        _1744 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1732) ? 0.0 : (isnan(0.0) ? _1732 : max(0.0, _1732))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1744 = 1.0;
    }
    float _1755;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1746 = dot(vec4(cbModelParam._m0[40u]), vec4(_1701, _1702, _1703, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1746) ? 0.0 : (isnan(0.0) ? _1746 : max(0.0, _1746))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1759 = (_1755 * cbModelParam._m0[1u].x) + (_1744 * (1.0 - cbModelParam._m0[1u].x));
    float _1769 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _789);
    float _1770 = isnan(_1769) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1769 : min(cbModelParam._m0[25u].z, _1769));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1818 = fma(_1024, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016)) + cbModelParam._m0[13u].w;
        float _1822 = fma(_1024, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016)) + cbModelParam._m0[14u].w;
        float _1826 = fma(_1024, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016)) + cbModelParam._m0[15u].w;
        float _1829 = fma(_962, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960));
        float _1832 = fma(_962, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960));
        float _1835 = fma(_962, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960));
        float _1863;
        if (_1829 > 0.0)
        {
            _1863 = abs((1.0 - _1818) / _1829);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1818 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1863 = frontier_phi_14_12_ladder;
        }
        float _2066;
        if (_1832 > 0.0)
        {
            _2066 = abs((1.0 - _1822) / _1832);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1822 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2066 = frontier_phi_23_19_ladder;
        }
        float _2320;
        if (_1835 > 0.0)
        {
            _2320 = abs((1.0 - _1826) / _1835);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1826 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2320 = frontier_phi_35_30_ladder;
        }
        float _2322 = isnan(_2066) ? _1863 : (isnan(_1863) ? _2066 : min(_1863, _2066));
        float _2323 = isnan(_2320) ? _2322 : (isnan(_2322) ? _2320 : min(_2322, _2320));
        float _2327 = (_2323 * _1829) + _1818;
        float _2328 = (_2323 * _1832) + _1822;
        float _2329 = (_2323 * _1835) + _1826;
        float _2330 = _2323 * 9.9999997473787516355514526367188e-05;
        float _2332 = (-1.0) - _2330;
        float _2334 = _2330 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2329 > _2334) || ((_2329 < _2332) || ((_2328 > _2334) || ((_2328 < _2332) || ((_2327 < _2332) || (_2327 > _2334))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2457 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2329, cbModelParam._m0[9u].z, fma(_2328, cbModelParam._m0[9u].y, _2327 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2329, cbModelParam._m0[10u].z, fma(_2328, cbModelParam._m0[10u].y, _2327 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2329, cbModelParam._m0[11u].z, fma(_2328, cbModelParam._m0[11u].y, _2327 * cbModelParam._m0[11u].x))), _1770);
            frontier_phi_13_35_ladder = _2457.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2457.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2457.x * cbModelParam._m0[1u].y;
        }
        _1851 = frontier_phi_13_35_ladder_2;
        _1853 = frontier_phi_13_35_ladder_1;
        _1855 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_960, _961, _962), _1770);
        _1851 = _1839.x * cbModelParam._m0[1u].y;
        _1853 = _1839.y * cbModelParam._m0[1u].y;
        _1855 = _1839.z * cbModelParam._m0[1u].y;
    }
    float _1859 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _789);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1859 : min(cbModelParam._m0[25u].w, _1859));
    float _1950;
    float _1952;
    float _1954;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1914 = fma(_1024, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016)) + cbModelParam._m0[21u].w;
        float _1918 = fma(_1024, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016)) + cbModelParam._m0[22u].w;
        float _1922 = fma(_1024, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016)) + cbModelParam._m0[23u].w;
        float _1925 = fma(_962, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960));
        float _1928 = fma(_962, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960));
        float _1931 = fma(_962, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960));
        float _2071;
        if (_1925 > 0.0)
        {
            _2071 = abs((1.0 - _1914) / _1925);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1914 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2071 = frontier_phi_25_21_ladder;
        }
        float _2347;
        if (_1928 > 0.0)
        {
            _2347 = abs((1.0 - _1918) / _1928);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1918 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2347 = frontier_phi_37_32_ladder;
        }
        float _2560;
        if (_1931 > 0.0)
        {
            _2560 = abs((1.0 - _1922) / _1931);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1922 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2560 = frontier_phi_46_43_ladder;
        }
        float _2562 = isnan(_2347) ? _2071 : (isnan(_2071) ? _2347 : min(_2071, _2347));
        float _2563 = isnan(_2560) ? _2562 : (isnan(_2562) ? _2560 : min(_2562, _2560));
        float _2567 = (_2563 * _1925) + _1914;
        float _2568 = (_2563 * _1928) + _1918;
        float _2569 = (_2563 * _1931) + _1922;
        float _2570 = _2563 * 9.9999997473787516355514526367188e-05;
        float _2571 = (-1.0) - _2570;
        float _2573 = _2570 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2569 > _2573) || ((_2569 < _2571) || ((_2568 > _2573) || ((_2568 < _2571) || ((_2567 < _2571) || (_2567 > _2573))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2768 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2569, cbModelParam._m0[17u].z, fma(_2568, cbModelParam._m0[17u].y, _2567 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2569, cbModelParam._m0[18u].z, fma(_2568, cbModelParam._m0[18u].y, _2567 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2569, cbModelParam._m0[19u].z, fma(_2568, cbModelParam._m0[19u].y, _2567 * cbModelParam._m0[19u].x))), _1860);
            frontier_phi_22_46_ladder = _2768.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2768.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2768.x * cbModelParam._m0[1u].z;
        }
        _1950 = frontier_phi_22_46_ladder_2;
        _1952 = frontier_phi_22_46_ladder_1;
        _1954 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1934 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_960, _961, _962), _1860);
        _1950 = _1934.x * cbModelParam._m0[1u].z;
        _1952 = _1934.y * cbModelParam._m0[1u].z;
        _1954 = _1934.z * cbModelParam._m0[1u].z;
    }
    float _1967 = (((_987 * _936) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1950 - _1851)) + _1851);
    float _1969 = (((_987 * _938) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1952 - _1853)) + _1853);
    float _1971 = (((_987 * _939) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1954 - _1855)) + _1855);
    float _1974 = fma(_1971, cbSceneParam._m0[89u].z, fma(_1969, cbSceneParam._m0[89u].y, _1967 * cbSceneParam._m0[89u].x));
    float _1977 = fma(_1971, cbSceneParam._m0[90u].z, fma(_1969, cbSceneParam._m0[90u].y, _1967 * cbSceneParam._m0[90u].x));
    float _1980 = fma(_1971, cbSceneParam._m0[91u].z, fma(_1969, cbSceneParam._m0[91u].y, _1967 * cbSceneParam._m0[91u].x));
    uvec4 _1990 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1992 = _1990.x * 14u;
    uint _1993 = _1992 + 13u;
    float _2000 = _952 + (-1.0);
    float _2005 = (cbLight._m0[_1993].x * _2000) + 1.0;
    float _2006 = (cbLight._m0[_1993].y * _2000) + 1.0;
    float _2007 = (cbLight._m0[_1993].z * _2000) + 1.0;
    float _2008 = (cbLight._m0[_1993].w * _2000) + 1.0;
    uint _2009 = _1992 + 5u;
    float _2015 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
    uint _2019 = _1992 + 4u;
    float _2025 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
    uint _2029 = _1992 | 1u;
    float _2040 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_786, _787, _788));
    float _2043 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_786, _787, _788));
    float _4185 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _4196 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2048 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.3183098733425140380859375;
    float _2050 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.3183098733425140380859375;
    float _2057 = ((cbLight._m0[_2009].x * _2015) * _2050) + ((cbLight._m0[_2019].x * _2025) * _2048);
    float _2058 = ((_2015 * cbLight._m0[_2009].y) * _2050) + ((_2025 * cbLight._m0[_2019].y) * _2048);
    float _2059 = ((_2015 * cbLight._m0[_2009].z) * _2050) + ((_2025 * cbLight._m0[_2019].z) * _2048);
    uvec4 _2063 = floatBitsToUint(cbLight._m0[_1992 + 12u]);
    bool _2065 = _2063.x == 0u;
    float _2076;
    float _2078;
    float _2080;
    if (_2065)
    {
        _2076 = _2057;
        _2078 = _2058;
        _2080 = _2059;
    }
    else
    {
        uint _2084 = _1992 + 6u;
        float _2100 = (dot(vec3(cbLight._m0[_1992 + 2u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2101 = _2100 * _2100;
        float _4207 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2102 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2103 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2076 = (((cbLight._m0[_2084].x * 0.3183098733425140380859375) * _2102) * _2103) + _2057;
        _2078 = (((cbLight._m0[_2084].y * 0.3183098733425140380859375) * _2102) * _2103) + _2058;
        _2080 = (((cbLight._m0[_2084].z * 0.3183098733425140380859375) * _2102) * _2103) + _2059;
    }
    bool _2083 = _2063.y == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2083)
    {
        _2121 = _2076;
        _2123 = _2078;
        _2125 = _2080;
    }
    else
    {
        uint _2291 = _1992 + 7u;
        float _2307 = (dot(vec3(cbLight._m0[_1992 + 3u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2308 = _2307 * _2307;
        float _4223 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2309 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2310 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2121 = (((cbLight._m0[_2291].x * 0.3183098733425140380859375) * _2309) * _2310) + _2076;
        _2123 = (((cbLight._m0[_2291].y * 0.3183098733425140380859375) * _2309) * _2310) + _2078;
        _2125 = (((cbLight._m0[_2291].z * 0.3183098733425140380859375) * _2309) * _2310) + _2080;
    }
    uint _2128 = _1992 + 8u;
    float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _789) * 0.949999988079071044921875);
    float _2142 = _2141 * _2141;
    float _2143 = cbLight._m0[_1992].x + _866;
    float _2144 = cbLight._m0[_1992].y + _867;
    float _2145 = cbLight._m0[_1992].z + _868;
    float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
    float _2150 = _2149 * _2143;
    float _2151 = _2149 * _2144;
    float _2152 = _2149 * _2145;
    float _2153 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_1992].xyz));
    float _4239 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _2157 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2158 = dot(vec3(_786, _787, _788), vec3(_2150, _2151, _2152));
    float _4261 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2150, _2151, _2152));
    float _4272 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2142 * _2142;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2178 = exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0);
    float _2179 = 0.959999978542327880859375 - _933;
    float _2181 = 0.959999978542327880859375 - _934;
    float _2182 = 0.959999978542327880859375 - _935;
    float _2189 = 1.0 - _2142;
    float _2200 = (0.5 / (((_2157 * ((_2156 * _2189) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2189) + _2142) * _2156))) * _2156;
    float _4283 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2202 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    uint _2213 = _1992 + 9u;
    float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2029].w)) * _789) * 0.949999988079071044921875);
    float _2225 = _2224 * _2224;
    float _2226 = cbLight._m0[_2029].x + _866;
    float _2227 = cbLight._m0[_2029].y + _867;
    float _2228 = cbLight._m0[_2029].z + _868;
    float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
    float _2233 = _2232 * _2226;
    float _2234 = _2232 * _2227;
    float _2235 = _2232 * _2228;
    float _2236 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2029].xyz));
    float _4294 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2240 = dot(vec3(_786, _787, _788), vec3(_2233, _2234, _2235));
    float _4305 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2244 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_2233, _2234, _2235));
    float _4316 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2248 = _2225 * _2225;
    float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
    float _2259 = exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0);
    float _2266 = 1.0 - _2225;
    float _2276 = (0.5 / (((_2157 * ((_2239 * _2266) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2266) + _2225) * _2239))) * _2239;
    float _4327 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2278 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
    float _2288 = (((((_2259 * _2179) + _936) * cbLight._m0[_2213].x) * _2278) * _2015) + (((((_2178 * _2179) + _936) * cbLight._m0[_2128].x) * _2202) * _2025);
    float _2289 = (((((_2259 * _2181) + _938) * cbLight._m0[_2213].y) * _2278) * _2015) + (((((_2178 * _2181) + _938) * cbLight._m0[_2128].y) * _2202) * _2025);
    float _2290 = (((((_2259 * _2182) + _939) * cbLight._m0[_2213].z) * _2278) * _2015) + (((((_2178 * _2182) + _939) * cbLight._m0[_2128].z) * _2202) * _2025);
    float _2352;
    float _2354;
    float _2356;
    if (_2065)
    {
        _2352 = _2288;
        _2354 = _2289;
        _2356 = _2290;
    }
    else
    {
        uint _2358 = _1992 + 2u;
        uint _2362 = _1992 + 10u;
        float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2358].w)) * _789) * 0.949999988079071044921875);
        float _2377 = _2376 * _2376;
        float _2378 = cbLight._m0[_2358].x + _866;
        float _2379 = cbLight._m0[_2358].y + _867;
        float _2380 = cbLight._m0[_2358].z + _868;
        float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
        float _2385 = _2384 * _2378;
        float _2386 = _2384 * _2379;
        float _2387 = _2384 * _2380;
        float _2388 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2358].xyz));
        float _4338 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2392 = dot(vec3(_786, _787, _788), vec3(_2385, _2386, _2387));
        float _4349 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2396 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_2385, _2386, _2387));
        float _4360 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2400 = _2377 * _2377;
        float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
        float _2411 = exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0);
        float _2418 = 1.0 - _2377;
        float _2428 = (0.5 / (((_2157 * ((_2391 * _2418) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2418) + _2377) * _2391))) * _2391;
        float _4371 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2430 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
        float _2431 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2352 = (((((_2411 * _2179) + _936) * cbLight._m0[_2362].x) * _2430) * _2431) + _2288;
        _2354 = (((((_2411 * _2181) + _938) * cbLight._m0[_2362].y) * _2430) * _2431) + _2289;
        _2356 = (((((_2411 * _2182) + _939) * cbLight._m0[_2362].z) * _2430) * _2431) + _2290;
    }
    float _2466;
    float _2468;
    float _2470;
    if (_2083)
    {
        _2466 = _2352;
        _2468 = _2354;
        _2470 = _2356;
    }
    else
    {
        uint _2477 = _1992 + 3u;
        uint _2481 = _1992 + 11u;
        float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2477].w)) * _789) * 0.949999988079071044921875);
        float _2496 = _2495 * _2495;
        float _2497 = cbLight._m0[_2477].x + _866;
        float _2498 = cbLight._m0[_2477].y + _867;
        float _2499 = cbLight._m0[_2477].z + _868;
        float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
        float _2504 = _2503 * _2497;
        float _2505 = _2503 * _2498;
        float _2506 = _2503 * _2499;
        float _2507 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2477].xyz));
        float _4387 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2511 = dot(vec3(_786, _787, _788), vec3(_2504, _2505, _2506));
        float _4398 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2515 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_2504, _2505, _2506));
        float _4409 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2519 = _2496 * _2496;
        float _2523 = ((_2514 * _2514) * (_2519 + (-1.0))) + 1.0;
        float _2530 = exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0);
        float _2537 = 1.0 - _2496;
        float _2547 = (0.5 / (((_2157 * ((_2510 * _2537) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2537) + _2496) * _2510))) * _2510;
        float _4420 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2549 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2519 / ((_2523 * _2523) * 3.141590118408203125));
        float _2550 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2466 = (((((_2530 * _2179) + _936) * cbLight._m0[_2481].x) * _2549) * _2550) + _2352;
        _2468 = (((((_2530 * _2181) + _938) * cbLight._m0[_2481].y) * _2549) * _2550) + _2354;
        _2470 = (((((_2530 * _2182) + _939) * cbLight._m0[_2481].z) * _2549) * _2550) + _2356;
    }
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    if (_1990.y == 0u)
    {
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2626 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2625;
        float _2627 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2625;
        float _2628 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2625;
        uvec4 _2640 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2641 = _2640.x;
        uint _2652 = uint((float(_2640.y) * floor(float(uint(cbSceneParam._m0[85u].y * _875) / _2641))) + floor(float(uint(cbSceneParam._m0[85u].x * _874) / _2641)));
        float _2662 = (log2(_2628 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2663 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        uint _2666 = uint(isnan(14.0) ? _2663 : (isnan(_2663) ? 14.0 : min(_2663, 14.0)));
        uvec4 _2671 = texelFetch(g_lightClusterGridBuffer, int(((_2666 << 2u) + (_2652 << 6u)) >> 2u));
        uint _2672 = _2671.x;
        uint _2673 = _2640.z;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        if (((((1u << ((_2673 >> 4u) & 15u)) + 4294967295u) & _2672) == 0u) || ((_2673 & 240u) == 0u))
        {
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
        }
        else
        {
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2784;
            float _2918 = 0.0;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            uint _2924 = 0u;
            uint _2933;
            bool _2934;
            for (;;)
            {
                _2933 = texelFetch(g_lightClassification, int((((_2666 << 5u) + (_2652 << 9u)) + (_2924 << 2u)) >> 2u)).x;
                _2934 = _2933 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2934)
                {
                    frontier_phi_61_pred = _2918;
                    frontier_phi_61_pred_1 = _2923;
                    frontier_phi_61_pred_2 = _2922;
                    frontier_phi_61_pred_3 = _2921;
                    frontier_phi_61_pred_4 = _2920;
                    frontier_phi_61_pred_5 = _2919;
                }
                else
                {
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    uint _3048;
                    _3042 = _2918;
                    _3043 = _2919;
                    _3044 = _2920;
                    _3045 = _2921;
                    _3046 = _2922;
                    _3047 = _2923;
                    _3048 = _2933;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    for (;;)
                    {
                        uint _3052 = uint(findLSB(_3048)) + (_2924 << 5u);
                        uint _3049 = (_3048 + 4294967295u) & _3048;
                        uint _3054 = _3052 * 48u;
                        vec4 _3068 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3054)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 3u)).x));
                        uint _3074 = (_3052 * 48u) + 4u;
                        vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 3u)).x));
                        uint _3093 = (_3052 * 48u) + 8u;
                        vec3 _3104 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3093)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 2u)).x));
                        float _3108 = _3068.x - _2626;
                        float _3109 = _3068.y - _2627;
                        float _3110 = _3068.z - _2628;
                        float _3111 = dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110));
                        float _3114 = inversesqrt(_3111);
                        float _3115 = _3114 * _3108;
                        float _3116 = _3114 * _3109;
                        float _3117 = _3114 * _3110;
                        float _3118 = dot(vec3(_893, _896, _899), vec3(_3115, _3116, _3117));
                        float _3123 = 1.0 - (_3111 * _3068.w);
                        float _4446 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3124 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3125 = sqrt(_3111) * _3087.w;
                        float _3128 = 1.39999997615814208984375 / (_3125 + 1.39999997615814208984375);
                        float _3129 = _3128 * _3128;
                        float _3132 = ((1.0 - _3129) * _3118) + _3129;
                        float _3135 = _3125 * _3125;
                        float _3139 = ((isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0))) * _3124) / ((_3135 * 0.699999988079071044921875) + 1.0);
                        float _3143 = (-0.0) - _2626;
                        float _3144 = (-0.0) - _2627;
                        float _3145 = (-0.0) - _2628;
                        float _3149 = inversesqrt(dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145)));
                        float _3150 = _3149 * _3143;
                        float _3151 = _3149 * _3144;
                        float _3152 = _3149 * _3145;
                        float _3160 = exp2(log2(1.0 / ((_3135 * 3.5) + 5.0)) * 0.25);
                        float _3161 = 1.0 - _968;
                        float _3168 = sqrt(1.0 - ((1.0 - (_3161 * _3161)) * (1.0 - (_3160 * _3160))));
                        float _3169 = _3168 * _3168;
                        float _3170 = _3169 * _3169;
                        float _3171 = _3150 + _3115;
                        float _3172 = _3151 + _3116;
                        float _3173 = _3152 + _3117;
                        float _3177 = inversesqrt(dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173)));
                        float _3181 = dot(vec3(_893, _896, _899), vec3(_3150, _3151, _3152));
                        float _4462 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3184 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3185 = dot(vec3(_893, _896, _899), vec3(_3177 * _3171, _3177 * _3172, _3177 * _3173));
                        float _4473 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3188 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3192 = ((_3188 * _3188) * (_3170 + (-1.0))) + 1.0;
                        float _3193 = _3128 * _3169;
                        float _3194 = _3193 * _3193;
                        float _3197 = ((1.0 - _3194) * _3118) + _3194;
                        float _4484 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3198 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3199 = 1.0 - _3169;
                        float _3209 = (0.5 / (((_3198 * ((_3184 * _3199) + _3169)) + 9.9999999392252902907785028219223e-09) + (((_3198 * _3199) + _3169) * _3184))) * _3198;
                        float _4495 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3220 = (((_3170 * 3.1415927410125732421875) * (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) / ((_3192 * _3192) * ((_3135 * 2.1991131305694580078125) + 3.141590118408203125))) * _3124;
                        _2977 = (_3139 * _3087.x) + _3045;
                        _2978 = (_3139 * _3087.y) + _3046;
                        _2979 = (_3139 * _3087.z) + _3047;
                        _2974 = (_3220 * _3104.x) + _3042;
                        _2975 = (_3220 * _3104.y) + _3043;
                        _2976 = (_3220 * _3104.z) + _3044;
                        if (_3049 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3042 = _2974;
                            _3043 = _2975;
                            _3044 = _2976;
                            _3045 = _2977;
                            _3046 = _2978;
                            _3047 = _2979;
                            _3048 = _3049;
                        }
                    }
                    frontier_phi_61_pred = _2974;
                    frontier_phi_61_pred_1 = _2979;
                    frontier_phi_61_pred_2 = _2978;
                    frontier_phi_61_pred_3 = _2977;
                    frontier_phi_61_pred_4 = _2976;
                    frontier_phi_61_pred_5 = _2975;
                }
                _2774 = frontier_phi_61_pred;
                _2784 = frontier_phi_61_pred_1;
                _2782 = frontier_phi_61_pred_2;
                _2780 = frontier_phi_61_pred_3;
                _2778 = frontier_phi_61_pred_4;
                _2776 = frontier_phi_61_pred_5;
                uint _2925 = _2924 + 1u;
                if (_2925 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2918 = _2774;
                    _2919 = _2776;
                    _2920 = _2778;
                    _2921 = _2780;
                    _2922 = _2782;
                    _2923 = _2784;
                    _2924 = _2925;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
        }
        uvec4 _2787 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2788 = _2787.z;
        uint _2790 = (_2788 >> 8u) & 15u;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        if (((4294967295u << _2790) & _2672) == 0u)
        {
            _2886 = _2773;
            _2888 = _2775;
            _2890 = _2777;
            _2892 = _2779;
            _2894 = _2781;
            _2896 = _2783;
        }
        else
        {
            float _2911 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
            float _2912 = _2911 * _2626;
            float _2913 = _2911 * _2627;
            float _2914 = _2911 * _2628;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2790 < ((_2788 >> 12u) & 15u))
            {
                float _2887;
                float _2889;
                float _2891;
                float _2893;
                float _2895;
                float _2897;
                float _3025 = _2773;
                float _3026 = _2775;
                float _3027 = _2777;
                float _3028 = _2779;
                float _3029 = _2781;
                float _3030 = _2783;
                uint _3031 = _2790;
                uint _3040;
                bool _3041;
                for (;;)
                {
                    _3040 = texelFetch(g_lightClassification, int((((_2666 << 5u) + (_2652 << 9u)) + (_3031 << 2u)) >> 2u)).x;
                    _3041 = _3040 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3041)
                    {
                        frontier_phi_67_pred = _3028;
                        frontier_phi_67_pred_1 = _3029;
                        frontier_phi_67_pred_2 = _3030;
                        frontier_phi_67_pred_3 = _3027;
                        frontier_phi_67_pred_4 = _3026;
                        frontier_phi_67_pred_5 = _3025;
                    }
                    else
                    {
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3238 = _3025;
                        float _3239 = _3026;
                        float _3240 = _3027;
                        float _3241 = _3028;
                        float _3242 = _3029;
                        float _3243 = _3030;
                        uint _3244 = _3040;
                        uint _3245;
                        vec4 _3270;
                        float _3271;
                        vec4 _3286;
                        vec3 _3298;
                        vec4 _3313;
                        vec4 _3328;
                        float _3374;
                        bool _3375;
                        for (;;)
                        {
                            uint _3255 = ((_3031 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3244));
                            _3245 = (_3244 + 4294967295u) & _3244;
                            uint _3257 = _3255 * 40u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            _3271 = _3270.w;
                            uint _3273 = (_3255 * 40u) + 4u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3288 = (_3255 * 40u) + 8u;
                            _3298 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x));
                            uint _3300 = (_3255 * 40u) + 16u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3315 = (_3255 * 40u) + 20u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3255 * 40u) + 24u;
                            vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3349 = (_3255 * 40u) + 28u;
                            vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            _3374 = fma(_2628, _3362.z, fma(_2627, _3362.y, _3362.x * _2626)) + _3362.w;
                            _3375 = !((fma(_2628, _3343.z, fma(_2627, _3343.y, _3343.x * _2626)) + _3343.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3375)
                            {
                                float _3402 = _3270.x - _2626;
                                float _3403 = _3270.y - _2627;
                                float _3404 = _3270.z - _2628;
                                float _3405 = dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404));
                                float _3408 = inversesqrt(_3405);
                                float _3409 = _3408 * _3402;
                                float _3410 = _3408 * _3403;
                                float _3411 = _3408 * _3404;
                                float _3415 = 1.0 - (_3405 / (_3271 * _3271));
                                float _4506 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3420 = sqrt(_3405) * _3286.w;
                                float _3422 = 1.39999997615814208984375 / (_3420 + 1.39999997615814208984375);
                                float _3423 = _3422 * _3422;
                                float _3426 = ((1.0 - _3423) * dot(vec3(_3409, _3410, _3411), vec3(_893, _896, _899))) + _3423;
                                float _3429 = _3420 * _3420;
                                float _3433 = (fma(_2628, _3313.z, fma(_2627, _3313.y, _3313.x * _2626)) + _3313.w) / _3374;
                                float _3434 = (fma(_2628, _3328.z, fma(_2627, _3328.y, _3328.x * _2626)) + _3328.w) / _3374;
                                float _3438 = 1.0 - dot(vec2(_3433, _3434), vec2(_3433, _3434));
                                float _4522 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3440 = _3439 * (((isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0))) * _3416) / ((_3429 * 0.699999988079071044921875) + 1.0));
                                float _3452 = exp2(log2(1.0 / ((_3429 * 3.5) + 5.0)) * 0.25);
                                float _3453 = 1.0 - _968;
                                float _3460 = sqrt(1.0 - ((1.0 - (_3453 * _3453)) * (1.0 - (_3452 * _3452))));
                                float _3461 = _3460 * _3460;
                                float _3462 = _3461 * _3461;
                                float _3463 = _3409 - _2912;
                                float _3464 = _3410 - _2913;
                                float _3465 = _3411 - _2914;
                                float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                                float _3473 = dot(vec3(_893, _896, _899), vec3((-0.0) - _2912, (-0.0) - _2913, (-0.0) - _2914));
                                float _4533 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3476 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3477 = dot(vec3(_893, _896, _899), vec3(_3469 * _3463, _3469 * _3464, _3469 * _3465));
                                float _4544 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3480 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3484 = ((_3480 * _3480) * (_3462 + (-1.0))) + 1.0;
                                float _3485 = _3422 * _3461;
                                float _3486 = _3485 * _3485;
                                float _3492 = ((1.0 - _3486) * dot(vec3(_893, _896, _899), vec3(_3409, _3410, _3411))) + _3486;
                                float _4555 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3494 = 1.0 - _3461;
                                float _3504 = (0.5 / (((_3493 * ((_3476 * _3494) + _3461)) + 9.9999999392252902907785028219223e-09) + (((_3493 * _3494) + _3461) * _3476))) * _3493;
                                float _4566 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3514 = (_3439 * _3416) * (((_3462 * 3.1415927410125732421875) * (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) / ((_3484 * _3484) * ((_3429 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3514 * _3298.x;
                                frontier_phi_73_pred_1 = _3514 * _3298.y;
                                frontier_phi_73_pred_2 = _3440 * _3286.z;
                                frontier_phi_73_pred_3 = _3440 * _3286.y;
                                frontier_phi_73_pred_4 = _3440 * _3286.x;
                                frontier_phi_73_pred_5 = _3514 * _3298.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3518 = frontier_phi_73_pred;
                            _3519 = frontier_phi_73_pred_1;
                            _3523 = frontier_phi_73_pred_2;
                            _3522 = frontier_phi_73_pred_3;
                            _3521 = frontier_phi_73_pred_4;
                            _3520 = frontier_phi_73_pred_5;
                            _3228 = _3521 + _3241;
                            _3229 = _3522 + _3242;
                            _3230 = _3523 + _3243;
                            _3225 = _3518 + _3238;
                            _3226 = _3519 + _3239;
                            _3227 = _3520 + _3240;
                            if (_3245 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3245;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3228;
                        frontier_phi_67_pred_1 = _3229;
                        frontier_phi_67_pred_2 = _3230;
                        frontier_phi_67_pred_3 = _3227;
                        frontier_phi_67_pred_4 = _3226;
                        frontier_phi_67_pred_5 = _3225;
                    }
                    _2893 = frontier_phi_67_pred;
                    _2895 = frontier_phi_67_pred_1;
                    _2897 = frontier_phi_67_pred_2;
                    _2891 = frontier_phi_67_pred_3;
                    _2889 = frontier_phi_67_pred_4;
                    _2887 = frontier_phi_67_pred_5;
                    uint _3032 = _3031 + 1u;
                    if (_3032 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3025 = _2887;
                        _3026 = _2889;
                        _3027 = _2891;
                        _3028 = _2893;
                        _3029 = _2895;
                        _3030 = _2897;
                        _3031 = _3032;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2895;
                frontier_phi_55_56_ladder_1 = _2897;
                frontier_phi_55_56_ladder_2 = _2893;
                frontier_phi_55_56_ladder_3 = _2891;
                frontier_phi_55_56_ladder_4 = _2889;
                frontier_phi_55_56_ladder_5 = _2887;
            }
            else
            {
                frontier_phi_55_56_ladder = _2781;
                frontier_phi_55_56_ladder_1 = _2783;
                frontier_phi_55_56_ladder_2 = _2779;
                frontier_phi_55_56_ladder_3 = _2777;
                frontier_phi_55_56_ladder_4 = _2775;
                frontier_phi_55_56_ladder_5 = _2773;
            }
            _2886 = frontier_phi_55_56_ladder_5;
            _2888 = frontier_phi_55_56_ladder_4;
            _2890 = frontier_phi_55_56_ladder_3;
            _2892 = frontier_phi_55_56_ladder_2;
            _2894 = frontier_phi_55_56_ladder;
            _2896 = frontier_phi_55_56_ladder_1;
        }
        float _2901 = isnan(1.0) ? _952 : (isnan(_952) ? 1.0 : min(_952, 1.0));
        _2685 = (_2901 * _2892) + _2121;
        _2687 = (_2901 * _2894) + _2123;
        _2689 = (_2901 * _2896) + _2125;
        _2691 = ((_2886 * _936) * _2901) + _2466;
        _2693 = ((_2888 * _938) * _2901) + _2468;
        _2695 = ((_2890 * _939) * _2901) + _2470;
    }
    else
    {
        _2685 = _2121;
        _2687 = _2123;
        _2689 = _2125;
        _2691 = _2466;
        _2693 = _2468;
        _2695 = _2470;
    }
    float _4582 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4593 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _4604 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    uint _2715 = _242 + 6u;
    float _2723 = _874 / cbSceneParam._m0[86u].x;
    float _2724 = _875 / cbSceneParam._m0[86u].y;
    vec4 _2738 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2723, _2724, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2740 = _2738.x;
    float _2741 = _2738.y;
    float _2742 = _2738.z;
    float _2743 = _2738.w;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _2798 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _2799 = _2798 / _808;
        float _2810 = _2799 * _859;
        float _2811 = _860 * _2799;
        float _2812 = (-0.0) - _2811;
        float _2814 = _2799 * _861;
        float _2816 = (cbSceneParam._m0[77u].w * _2812) / _2798;
        float _2817 = _2816 + cbSceneParam._m0[79u].w;
        float _2818 = cbSceneParam._m0[79u].w - _2811;
        float _2824 = sqrt(((_2810 * _2810) + (_2811 * _2811)) + (_2814 * _2814));
        float _2827 = (1.0 - (cbSceneParam._m0[77u].w / _2798)) * _2824;
        float _2832 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2834 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2987;
        if (abs((_2812 - _2816) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2987 = ((((_2817 > 0.0) ? exp2(_2832 * _2817) : (2.0 - exp2(_2834 * _2817))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2827;
        }
        else
        {
            float _2947 = 1.0 / cbSceneParam._m0[80u].x;
            float _2948 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : max(_2817, _2818));
            float _2949 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : min(_2817, _2818));
            float _2958 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : min(_2948, 0.0));
            float _2959 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : min(_2949, 0.0));
            _2987 = ((abs(_2824 / _2812) * cbSceneParam._m0[80u].y) * ((((_2958 - _2959) * 2.0) - ((exp2(_2832 * (isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0)))) - exp2(_2832 * (isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0))))) * _2947)) - ((exp2(_2834 * _2958) - exp2(_2834 * _2959)) * _2947))) + (_2827 * cbSceneParam._m0[80u].z);
        }
        vec4 _2989 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2723, _2724, 1.0), 0.0);
        float _2998 = exp2((_2987 * (-1.44269502162933349609375)) * (1.0 - _2989.w));
        float _2999 = log2(_2998);
        float _3015 = log2(_2743);
        _2836 = (exp2(_3015 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].x)) * _2989.x) / cbSceneParam._m0[78u].x)) + _2740;
        _2838 = (exp2(_3015 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].y)) * _2989.y) / cbSceneParam._m0[78u].y)) + _2741;
        _2840 = (exp2(_3015 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2999 * cbSceneParam._m0[78u].z)) * _2989.z) / cbSceneParam._m0[78u].z)) + _2742;
        _2842 = _2998 * _2743;
    }
    else
    {
        _2836 = _2740;
        _2838 = _2741;
        _2840 = _2742;
        _2842 = _2743;
    }
    float _2854 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2855 = _2854 == 3.0;
    float _2856 = log2(_2842);
    float _2863 = exp2(_2856 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2685 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _952))) + ((_2691 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1759)) * cbPerFrame._m0[3u].x));
    float _2864 = exp2(_2856 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2687 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _952))) + ((_2693 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1759)) * cbPerFrame._m0[3u].x));
    float _2865 = exp2(_2856 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2689 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _952))) + ((_2695 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1759)) * cbPerFrame._m0[3u].x));
    float _2874 = (_2854 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2874 * (_2855 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2836)));
    SV_Target.y = _2874 * (_2855 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2838)));
    SV_Target.z = _2874 * (_2855 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2840)));
    SV_Target.w = cbInstanceData._m0[_2715].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2715].w;
}


