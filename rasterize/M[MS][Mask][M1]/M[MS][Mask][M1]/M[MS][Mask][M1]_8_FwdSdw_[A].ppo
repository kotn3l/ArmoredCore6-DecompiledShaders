#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1347;
float _4013;
float _4014;
float _4015;
float _4016;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4025 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4036 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4047 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4058 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _453 = (_446 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _454 = (_446 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _455 = (_446 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _459 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _453;
    float _462 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _454;
    float _465 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _455;
    float _472 = ((_453 - _459) * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) + _459;
    float _473 = ((_454 - _462) * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) + _462;
    float _474 = ((_455 - _465) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) + _465;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _531 = _529.x;
    float _532 = _529.y;
    float _533 = _529.z;
    float _542 = ((_512.z - _533) * _446) + _533;
    float _545 = ((((_512.x - _531) * _446) + _531) * 2.0) + (-1.0);
    float _546 = ((((_512.y - _532) * _446) + _532) * 2.0) + (-1.0);
    float _547 = dot(vec2(_545, _546), vec2(_545, _546));
    float _4069 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _552 = sqrt(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _586 = (_545 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_487.x * 2.0) + (-1.0)))) + (((_574.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _587 = (_546 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_487.y * 2.0) + (-1.0)))) + (((_574.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _599 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _601 = _599.x;
    float _602 = 1.0 - _601;
    float _631 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_601 - _602) * cbMtdParam._m0[24u].w) + _602) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4080 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _640 = ((((cbMtdParam._m0[10u].x - _472) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _632) + _472;
    float _641 = ((((cbMtdParam._m0[10u].y - _473) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _632) + _473;
    float _642 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _474)) * _632) + _474;
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _670 = _668.x;
    float _688 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _670) * _446) + _670;
    float _692 = ((_654.x - _688) * cbMtdParam._m0[19u].z) + _688;
    float _694 = _692 - (_692 * _632);
    float _699 = (((_487.z - _542) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _542;
    float _703 = ((_574.z - _699) * cbMtdParam._m0[19u].w) + _699;
    float _707 = ((cbMtdParam._m0[23u].x - _703) * _632) + _703;
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _732 = (_726.x * 2.0) + (-1.0);
    float _733 = (_726.y * 2.0) + (-1.0);
    float _734 = dot(vec2(_732, _733), vec2(_732, _733));
    float _4091 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _750 = (_632 * (((cbMtdParam._m0[22u].z * _586) - _586) + _732)) + _586;
    float _751 = (_632 * (((cbMtdParam._m0[22u].z * _587) - _587) + _733)) + _587;
    float _752 = (_632 * (sqrt(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) - _552)) + _552;
    float _754 = cbMtdParam._m0[22u].x + _574.w;
    float _757 = fma(_752, _251 * NORMAL.x, fma(_751, _258 * TANGENT.x, (_244 * _236) * _750));
    float _760 = fma(_752, _251 * NORMAL.y, fma(_751, _258 * TANGENT.y, (_244 * _237) * _750));
    float _763 = fma(_752, _251 * NORMAL.z, fma(_751, _258 * TANGENT.z, (_244 * _238) * _750));
    float _767 = inversesqrt(dot(vec3(_757, _760, _763), vec3(_757, _760, _763)));
    float _768 = _767 * _757;
    float _769 = _767 * _760;
    float _770 = _767 * _763;
    float _4102 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _771 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4124 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4135 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4146 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4157 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _776 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _790 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _840 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _830);
    float _841 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _830);
    float _842 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _830);
    float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
    float _847 = _840 * _846;
    float _848 = _841 * _846;
    float _849 = _842 * _846;
    vec4 _854 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _856 = _854.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1028 = sqrt(((_840 * _840) + (_841 * _841)) + (_842 * _842));
        float _1034 = (cbMatDynParam._m0[5u].x * _1028) + cbMatDynParam._m0[5u].y;
        float _4168 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1039 = (cbMatDynParam._m0[5u].z * _1028) + cbMatDynParam._m0[5u].w;
        float _4179 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) - _1035)) + _1035) < ((_856 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _867 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _868 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _886 = fma(_770, cbSceneParam._m0[5u].z, fma(_769, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _768));
    float _889 = fma(_770, cbSceneParam._m0[6u].z, fma(_769, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _768));
    float _892 = fma(_770, cbSceneParam._m0[7u].z, fma(_769, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _768));
    uint _905 = _283 + 9u;
    uint _906 = _905 + uint(cbMatDynParam._m0[0u].w);
    float _912 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * cbInstanceData._m0[_906].x;
    float _913 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * cbInstanceData._m0[_906].y;
    float _914 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * cbInstanceData._m0[_906].z;
    float _4190 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _918 = 1.0 - _776;
    float _919 = _915 * _918;
    float _920 = _916 * _918;
    float _921 = _917 * _918;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _776;
    float _927 = (_916 + (-0.039999999105930328369140625)) * _776;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _776;
    float _929 = _926 + 0.039999999105930328369140625;
    float _931 = _927 + 0.039999999105930328369140625;
    float _932 = _928 + 0.039999999105930328369140625;
    vec4 _941 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _867, cbSceneParam._m0[86u].y * _868));
    float _945 = ((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * TEXCOORD_5.w) * _941.x;
    float _946 = dot(vec3(_768, _769, _770), vec3(_847, _848, _849));
    float _949 = _946 * 2.0;
    float _953 = (_949 * _768) - _847;
    float _954 = (_949 * _769) - _848;
    float _955 = (_949 * _770) - _849;
    float _959 = abs(dot(vec3(_847, _848, _849), vec3(_768, _769, _770)));
    float _4223 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _961 = sqrt(_771);
    float _974 = exp2((_961 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_961 * 3.0));
    float _980 = (1.0 - _974) * ((_961 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _981 = _974 * _961;
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1346;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1071 = fma(_1017, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009));
        float _1075 = fma(_1017, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009));
        float _1079 = fma(_1017, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009));
        float _1104 = _1009 + _768;
        float _1105 = _1013 + _769;
        float _1106 = _1017 + _770;
        float _1116 = fma(_1106, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1104)) - _1071;
        float _1117 = fma(_1106, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1104)) - _1075;
        float _1118 = fma(_1106, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1104)) - _1079;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1071 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1075 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[34u].z) + ((((((_1079 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1174 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1140.x + (-0.5));
        float _1176 = _1174 * (_1140.y + (-0.5));
        float _1177 = _1174 * (_1140.z + (-0.5));
        float _1184 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1147.x + (-0.5));
        float _1186 = _1184 * (_1147.y + (-0.5));
        float _1187 = _1184 * (_1147.z + (-0.5));
        float _1194 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1154.x + (-0.5));
        float _1196 = _1194 * (_1154.y + (-0.5));
        float _1197 = _1194 * (_1154.z + (-0.5));
        float _1204 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1161.x + (-0.5));
        float _1206 = _1204 * (_1161.y + (-0.5));
        float _1207 = _1204 * (_1161.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1228 = (dot(vec3(_768, _769, _770), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1238 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _4271 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1240 + 1.0))) + _1245) * _1208;
        float _1255 = _1176 * 0.5;
        float _1256 = _1186 * 0.5;
        float _1257 = _1196 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_768, _769, _770), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4304 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1282 + 1.0))) + _1287) * _1209;
        float _1297 = _1177 * 0.5;
        float _1298 = _1187 * 0.5;
        float _1299 = _1197 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_768, _769, _770), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4337 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1324 + 1.0))) + _1329) * _1210;
        _1346 = _1177;
        _1348 = _1176;
        _1349 = _1175;
        _1350 = _1187;
        _1351 = _1186;
        _1352 = _1185;
        _1353 = _1197;
        _1354 = _1196;
        _1355 = _1195;
        _1356 = _1210;
        _1357 = _1209;
        _1358 = _1208;
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _1347;
        _1348 = _1347;
        _1349 = _1347;
        _1350 = _1347;
        _1351 = _1347;
        _1352 = _1347;
        _1353 = _1347;
        _1354 = _1347;
        _1355 = _1347;
        _1356 = _1347;
        _1357 = _1347;
        _1358 = _1347;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1389 = fma(_1017, cbModelParam._m0[30u].z, fma(_1013, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009));
        float _1393 = fma(_1017, cbModelParam._m0[31u].z, fma(_1013, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009));
        float _1397 = fma(_1017, cbModelParam._m0[32u].z, fma(_1013, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009));
        float _1420 = _1009 + _768;
        float _1421 = _1013 + _769;
        float _1422 = _1017 + _770;
        float _1432 = fma(_1422, cbModelParam._m0[30u].z, fma(_1421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1420)) - _1389;
        float _1433 = fma(_1422, cbModelParam._m0[31u].z, fma(_1421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1420)) - _1393;
        float _1434 = fma(_1422, cbModelParam._m0[32u].z, fma(_1421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1420)) - _1397;
        float _1438 = inversesqrt(dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434)));
        float _1451 = ((_1438 * _1432) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1389 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1438 * _1433) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1393 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1438 * _1434) / cbModelParam._m0[35u].z) + ((((((_1397 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        float _1488 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1455.x + (-0.5));
        float _1490 = _1488 * (_1455.y + (-0.5));
        float _1491 = _1488 * (_1455.z + (-0.5));
        float _1498 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1462.x + (-0.5));
        float _1500 = _1498 * (_1462.y + (-0.5));
        float _1501 = _1498 * (_1462.z + (-0.5));
        float _1508 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1469.x + (-0.5));
        float _1510 = _1508 * (_1469.y + (-0.5));
        float _1511 = _1508 * (_1469.z + (-0.5));
        float _1518 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1476.x + (-0.5));
        float _1520 = _1518 * (_1476.y + (-0.5));
        float _1521 = _1518 * (_1476.z + (-0.5));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = _1489 * 0.5;
        float _1526 = _1499 * 0.5;
        float _1527 = _1509 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_768, _769, _770), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4400 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1552 + 1.0))) + _1557) * _1522;
        float _1567 = _1490 * 0.5;
        float _1568 = _1500 * 0.5;
        float _1569 = _1510 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_768, _769, _770), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4433 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1594 + 1.0))) + _1599) * _1523;
        float _1609 = _1491 * 0.5;
        float _1610 = _1501 * 0.5;
        float _1611 = _1511 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_768, _769, _770), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4466 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1636 + 1.0))) + _1641) * _1524;
        _1658 = _1491;
        _1659 = _1490;
        _1660 = _1489;
        _1661 = _1501;
        _1662 = _1500;
        _1663 = _1499;
        _1664 = _1511;
        _1665 = _1510;
        _1666 = _1509;
        _1667 = _1524;
        _1668 = _1523;
        _1669 = _1522;
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
    }
    else
    {
        _1658 = _1347;
        _1659 = _1347;
        _1660 = _1347;
        _1661 = _1347;
        _1662 = _1347;
        _1663 = _1347;
        _1664 = _1347;
        _1665 = _1347;
        _1666 = _1347;
        _1667 = _1347;
        _1668 = _1347;
        _1669 = _1347;
        _1670 = 0.0;
        _1671 = 0.0;
        _1672 = 0.0;
    }
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1359)) + _1359;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1360)) + _1360;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1361)) + _1361;
    float _1705 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1682));
    float _1726 = _953 * 0.5;
    float _1727 = _954 * 0.5;
    float _1728 = _955 * 0.5;
    float _1729 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1732 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1735 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1769;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1742 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1346, _1350, _1353, _1356));
        float _1746 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1750 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1757 = dot(vec4(cbModelParam._m0[39u]), vec4(_1726, _1727, _1728, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1780;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1771 = dot(vec4(cbModelParam._m0[40u]), vec4(_1726, _1727, _1728, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1784 = (_1780 * cbModelParam._m0[1u].x) + (_1769 * (1.0 - cbModelParam._m0[1u].x));
    float _1794 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _771);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1794 : min(cbModelParam._m0[25u].z, _1794));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1844 = fma(_1017, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009)) + cbModelParam._m0[13u].w;
        float _1848 = fma(_1017, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009)) + cbModelParam._m0[14u].w;
        float _1852 = fma(_1017, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009)) + cbModelParam._m0[15u].w;
        float _1855 = fma(_955, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953));
        float _1858 = fma(_955, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953));
        float _1861 = fma(_955, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953));
        float _1889;
        if (_1855 > 0.0)
        {
            _1889 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1889 = frontier_phi_17_15_ladder;
        }
        float _2062;
        if (_1858 > 0.0)
        {
            _2062 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2062 = frontier_phi_26_22_ladder;
        }
        float _2357;
        if (_1861 > 0.0)
        {
            _2357 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2357 = frontier_phi_38_33_ladder;
        }
        float _2359 = isnan(_2062) ? _1889 : (isnan(_1889) ? _2062 : min(_1889, _2062));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1855) + _1844;
        float _2365 = (_2360 * _1858) + _1848;
        float _2366 = (_2360 * _1861) + _1852;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2369 = (-1.0) - _2367;
        float _2371 = _2367 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2366 > _2371) || ((_2366 < _2369) || ((_2365 > _2371) || ((_2365 < _2369) || ((_2364 < _2369) || (_2364 > _2371))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2511 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2366, cbModelParam._m0[9u].z, fma(_2365, cbModelParam._m0[9u].y, _2364 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2366, cbModelParam._m0[10u].z, fma(_2365, cbModelParam._m0[10u].y, _2364 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2366, cbModelParam._m0[11u].z, fma(_2365, cbModelParam._m0[11u].y, _2364 * cbModelParam._m0[11u].x))), _1795);
            frontier_phi_16_38_ladder = _2511.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2511.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2511.x * cbModelParam._m0[1u].y;
        }
        _1877 = frontier_phi_16_38_ladder_2;
        _1879 = frontier_phi_16_38_ladder_1;
        _1881 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1865 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_953, _954, _955), _1795);
        _1877 = _1865.x * cbModelParam._m0[1u].y;
        _1879 = _1865.y * cbModelParam._m0[1u].y;
        _1881 = _1865.z * cbModelParam._m0[1u].y;
    }
    float _1885 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _771);
    float _1886 = isnan(_1885) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1885 : min(cbModelParam._m0[25u].w, _1885));
    float _1977;
    float _1979;
    float _1981;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1941 = fma(_1017, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009)) + cbModelParam._m0[21u].w;
        float _1945 = fma(_1017, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009)) + cbModelParam._m0[22u].w;
        float _1949 = fma(_1017, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009)) + cbModelParam._m0[23u].w;
        float _1952 = fma(_955, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953));
        float _1955 = fma(_955, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953));
        float _1958 = fma(_955, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953));
        float _2067;
        if (_1952 > 0.0)
        {
            _2067 = abs((1.0 - _1941) / _1952);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1941 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2067 = frontier_phi_28_24_ladder;
        }
        float _2384;
        if (_1955 > 0.0)
        {
            _2384 = abs((1.0 - _1945) / _1955);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1945 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2384 = frontier_phi_40_35_ladder;
        }
        float _2722;
        if (_1958 > 0.0)
        {
            _2722 = abs((1.0 - _1949) / _1958);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1949 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2722 = frontier_phi_50_47_ladder;
        }
        float _2724 = isnan(_2384) ? _2067 : (isnan(_2067) ? _2384 : min(_2067, _2384));
        float _2725 = isnan(_2722) ? _2724 : (isnan(_2724) ? _2722 : min(_2724, _2722));
        float _2729 = (_2725 * _1952) + _1941;
        float _2730 = (_2725 * _1955) + _1945;
        float _2731 = (_2725 * _1958) + _1949;
        float _2732 = _2725 * 9.9999997473787516355514526367188e-05;
        float _2733 = (-1.0) - _2732;
        float _2735 = _2732 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2731 > _2735) || ((_2731 < _2733) || ((_2730 > _2735) || ((_2730 < _2733) || ((_2729 < _2733) || (_2729 > _2735))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2853 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2731, cbModelParam._m0[17u].z, fma(_2730, cbModelParam._m0[17u].y, _2729 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2731, cbModelParam._m0[18u].z, fma(_2730, cbModelParam._m0[18u].y, _2729 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2731, cbModelParam._m0[19u].z, fma(_2730, cbModelParam._m0[19u].y, _2729 * cbModelParam._m0[19u].x))), _1886);
            frontier_phi_25_50_ladder = _2853.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2853.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2853.x * cbModelParam._m0[1u].z;
        }
        _1977 = frontier_phi_25_50_ladder_2;
        _1979 = frontier_phi_25_50_ladder_1;
        _1981 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1961 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_953, _954, _955), _1886);
        _1977 = _1961.x * cbModelParam._m0[1u].z;
        _1979 = _1961.y * cbModelParam._m0[1u].z;
        _1981 = _1961.z * cbModelParam._m0[1u].z;
    }
    float _1994 = (((_980 * _929) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1977 - _1877)) + _1877);
    float _1996 = (((_980 * _931) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1979 - _1879)) + _1879);
    float _1998 = (((_980 * _932) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1981 - _1881)) + _1881);
    float _2001 = fma(_1998, cbSceneParam._m0[89u].z, fma(_1996, cbSceneParam._m0[89u].y, _1994 * cbSceneParam._m0[89u].x));
    float _2004 = fma(_1998, cbSceneParam._m0[90u].z, fma(_1996, cbSceneParam._m0[90u].y, _1994 * cbSceneParam._m0[90u].x));
    float _2007 = fma(_1998, cbSceneParam._m0[91u].z, fma(_1996, cbSceneParam._m0[91u].y, _1994 * cbSceneParam._m0[91u].x));
    float _2041 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2054 = _2041 / _2053;
    float _2055 = _2045 / _2053;
    float _2056 = _2049 / _2053;
    float _2203;
    float _2204;
    float _2205;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2083 = ((uint(_2056 > cbSceneParam._m0[59u].y) + uint(_2056 > cbSceneParam._m0[59u].x)) + uint(_2056 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2084 = _2083 + 43u;
        uint _2092 = _2083 + 44u;
        uint _2100 = _2083 + 45u;
        uint _2108 = _2083 + 46u;
        float _2119 = fma(_2053, cbSceneParam._m0[_2084].w, fma(_2049, cbSceneParam._m0[_2084].z, fma(_2045, cbSceneParam._m0[_2084].y, _2041 * cbSceneParam._m0[_2084].x)));
        float _2123 = fma(_2053, cbSceneParam._m0[_2092].w, fma(_2049, cbSceneParam._m0[_2092].z, fma(_2045, cbSceneParam._m0[_2092].y, _2041 * cbSceneParam._m0[_2092].x)));
        float _2131 = fma(_2053, cbSceneParam._m0[_2108].w, fma(_2049, cbSceneParam._m0[_2108].z, fma(_2045, cbSceneParam._m0[_2108].y, _2041 * cbSceneParam._m0[_2108].x)));
        float _2136 = cbSceneParam._m0[33u].z * _2131;
        float _2138 = cbSceneParam._m0[33u].w * _2131;
        float _2141 = fma(_2053, cbSceneParam._m0[_2100].w, fma(_2049, cbSceneParam._m0[_2100].z, fma(_2045, cbSceneParam._m0[_2100].y, _2041 * cbSceneParam._m0[_2100].x))) / _2131;
        float _2189 = (cbSceneParam._m0[33u].x - sqrt(((_2055 * _2055) + (_2054 * _2054)) + (_2056 * _2056))) * cbSceneParam._m0[33u].y;
        float _4592 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2196 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2136 + _2119) / _2131, (_2138 + _2123) / _2131), _2141), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 + _2119) / _2131, (_2123 - _2136) / _2131), _2141), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 - _2136) / _2131, (_2123 - _2138) / _2131), _2141), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 - _2138) / _2131, (_2136 + _2123) / _2131), _2141), 0.0)).x), vec4(0.25)));
        _2203 = 1.0 - (_2196 * cbSceneParam._m0[34u].x);
        _2204 = 1.0 - (_2196 * cbSceneParam._m0[34u].y);
        _2205 = 1.0 - (_2196 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2203 = 1.0;
        _2204 = 1.0;
        _2205 = 1.0;
    }
    float _2269;
    float _2271;
    float _2273;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2257 = fma(_2053, cbSceneParam._m0[63u].w, fma(_2049, cbSceneParam._m0[63u].z, fma(_2045, cbSceneParam._m0[63u].y, _2041 * cbSceneParam._m0[63u].x)));
        float _2258 = fma(_2053, cbSceneParam._m0[60u].w, fma(_2049, cbSceneParam._m0[60u].z, fma(_2045, cbSceneParam._m0[60u].y, _2041 * cbSceneParam._m0[60u].x))) / _2257;
        float _2259 = fma(_2053, cbSceneParam._m0[61u].w, fma(_2049, cbSceneParam._m0[61u].z, fma(_2045, cbSceneParam._m0[61u].y, _2041 * cbSceneParam._m0[61u].x))) / _2257;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2258 >= cbSceneParam._m0[64u].x) && (_2259 >= cbSceneParam._m0[64u].y)) && (_2258 <= cbSceneParam._m0[64u].z)) && (_2259 <= cbSceneParam._m0[64u].w))
        {
            float _2397 = fma(_2053, cbSceneParam._m0[62u].w, fma(_2049, cbSceneParam._m0[62u].z, fma(_2045, cbSceneParam._m0[62u].y, _2041 * cbSceneParam._m0[62u].x))) / _2257;
            float _2401 = isnan(cbSceneParam._m0[41u].w) ? _2397 : (isnan(_2397) ? cbSceneParam._m0[41u].w : max(_2397, cbSceneParam._m0[41u].w));
            float _2444 = (cbSceneParam._m0[33u].x - sqrt(((_2055 * _2055) + (_2054 * _2054)) + (_2056 * _2056))) * cbSceneParam._m0[33u].y;
            float _4608 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
            float _2451 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2258, cbSceneParam._m0[33u].w + _2259), _2401), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2258, _2259 - cbSceneParam._m0[33u].z), _2401), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2258 - cbSceneParam._m0[33u].z, _2259 - cbSceneParam._m0[33u].w), _2401), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2258 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2259), _2401), 0.0)).x), vec4(0.25)));
            float _2455 = 1.0 - (_2451 * cbSceneParam._m0[34u].x);
            float _2456 = 1.0 - (_2451 * cbSceneParam._m0[34u].y);
            float _2457 = 1.0 - (_2451 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2457) ? _2205 : (isnan(_2205) ? _2457 : min(_2205, _2457));
            frontier_phi_37_36_ladder_1 = isnan(_2456) ? _2204 : (isnan(_2204) ? _2456 : min(_2204, _2456));
            frontier_phi_37_36_ladder_2 = isnan(_2455) ? _2203 : (isnan(_2203) ? _2455 : min(_2203, _2455));
        }
        else
        {
            frontier_phi_37_36_ladder = _2205;
            frontier_phi_37_36_ladder_1 = _2204;
            frontier_phi_37_36_ladder_2 = _2203;
        }
        _2269 = frontier_phi_37_36_ladder_2;
        _2271 = frontier_phi_37_36_ladder_1;
        _2273 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2269 = _2203;
        _2271 = _2204;
        _2273 = _2205;
    }
    uvec4 _2278 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2280 = _2278.x * 14u;
    uint _2281 = _2280 + 13u;
    float _2288 = _945 + (-1.0);
    float _2293 = (cbLight._m0[_2281].x * _2288) + 1.0;
    float _2294 = (cbLight._m0[_2281].y * _2288) + 1.0;
    float _2295 = (cbLight._m0[_2281].z * _2288) + 1.0;
    float _2296 = (cbLight._m0[_2281].w * _2288) + 1.0;
    uint _2297 = _2280 + 5u;
    float _2303 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
    uint _2307 = _2280 + 4u;
    float _2316 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
    uint _2320 = _2280 | 1u;
    float _2331 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_768, _769, _770));
    float _2334 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_768, _769, _770));
    float _4644 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _4655 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2339 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * 0.3183098733425140380859375;
    float _2341 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * 0.3183098733425140380859375;
    float _2348 = ((cbLight._m0[_2297].x * _2303) * _2341) + (((cbLight._m0[_2307].x * _2269) * _2316) * _2339);
    float _2349 = ((_2303 * cbLight._m0[_2297].y) * _2341) + (((cbLight._m0[_2307].y * _2271) * _2316) * _2339);
    float _2350 = ((_2303 * cbLight._m0[_2297].z) * _2341) + (((cbLight._m0[_2307].z * _2273) * _2316) * _2339);
    uvec4 _2354 = floatBitsToUint(cbLight._m0[_2280 + 12u]);
    bool _2356 = _2354.x == 0u;
    float _2458;
    float _2460;
    float _2462;
    if (_2356)
    {
        _2458 = _2348;
        _2460 = _2349;
        _2462 = _2350;
    }
    else
    {
        uint _2466 = _2280 + 6u;
        float _2482 = (dot(vec3(cbLight._m0[_2280 + 2u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2483 = _2482 * _2482;
        float _4666 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2484 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2485 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2458 = (((cbLight._m0[_2466].x * 0.3183098733425140380859375) * _2484) * _2485) + _2348;
        _2460 = (((cbLight._m0[_2466].y * 0.3183098733425140380859375) * _2484) * _2485) + _2349;
        _2462 = (((cbLight._m0[_2466].z * 0.3183098733425140380859375) * _2484) * _2485) + _2350;
    }
    bool _2465 = _2354.y == 0u;
    float _2520;
    float _2522;
    float _2524;
    if (_2465)
    {
        _2520 = _2458;
        _2522 = _2460;
        _2524 = _2462;
    }
    else
    {
        uint _2693 = _2280 + 7u;
        float _2709 = (dot(vec3(cbLight._m0[_2280 + 3u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2710 = _2709 * _2709;
        float _4682 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2711 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2712 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2520 = (((cbLight._m0[_2693].x * 0.3183098733425140380859375) * _2711) * _2712) + _2458;
        _2522 = (((cbLight._m0[_2693].y * 0.3183098733425140380859375) * _2711) * _2712) + _2460;
        _2524 = (((cbLight._m0[_2693].z * 0.3183098733425140380859375) * _2711) * _2712) + _2462;
    }
    uint _2527 = _2280 + 8u;
    float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2280].w)) * _771) * 0.949999988079071044921875);
    float _2541 = _2540 * _2540;
    float _2542 = cbLight._m0[_2280].x + _847;
    float _2543 = cbLight._m0[_2280].y + _848;
    float _2544 = cbLight._m0[_2280].z + _849;
    float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
    float _2549 = _2548 * _2542;
    float _2550 = _2548 * _2543;
    float _2551 = _2548 * _2544;
    float _2552 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2280].xyz));
    float _4698 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2555 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _4709 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _2556 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _2557 = dot(vec3(_768, _769, _770), vec3(_2549, _2550, _2551));
    float _4720 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2561 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_2549, _2550, _2551));
    float _4731 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2565 = _2541 * _2541;
    float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
    float _2577 = exp2(log2(1.0 - (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) * 5.0);
    float _2578 = 0.959999978542327880859375 - _926;
    float _2580 = 0.959999978542327880859375 - _927;
    float _2581 = 0.959999978542327880859375 - _928;
    float _2588 = 1.0 - _2541;
    float _2599 = (0.5 / (((_2556 * ((_2555 * _2588) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2556 * _2588) + _2541) * _2555))) * _2555;
    float _4742 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
    uint _2615 = _2280 + 9u;
    float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _771) * 0.949999988079071044921875);
    float _2627 = _2626 * _2626;
    float _2628 = cbLight._m0[_2320].x + _847;
    float _2629 = cbLight._m0[_2320].y + _848;
    float _2630 = cbLight._m0[_2320].z + _849;
    float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
    float _2635 = _2634 * _2628;
    float _2636 = _2634 * _2629;
    float _2637 = _2634 * _2630;
    float _2638 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2320].xyz));
    float _4753 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2641 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2642 = dot(vec3(_768, _769, _770), vec3(_2635, _2636, _2637));
    float _4764 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2645 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    float _2646 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2635, _2636, _2637));
    float _4775 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2650 = _2627 * _2627;
    float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
    float _2661 = exp2(log2(1.0 - (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) * 5.0);
    float _2668 = 1.0 - _2627;
    float _2678 = (0.5 / (((_2556 * ((_2641 * _2668) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2556 * _2668) + _2627) * _2641))) * _2641;
    float _4786 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2680 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
    float _2690 = (((((_2661 * _2578) + _929) * cbLight._m0[_2615].x) * _2680) * _2303) + ((((cbLight._m0[_2527].x * _2269) * ((_2577 * _2578) + _929)) * _2601) * _2316);
    float _2691 = (((((_2661 * _2580) + _931) * cbLight._m0[_2615].y) * _2680) * _2303) + ((((cbLight._m0[_2527].y * _2271) * ((_2577 * _2580) + _931)) * _2601) * _2316);
    float _2692 = (((((_2661 * _2581) + _932) * cbLight._m0[_2615].z) * _2680) * _2303) + ((((cbLight._m0[_2527].z * _2273) * ((_2577 * _2581) + _932)) * _2601) * _2316);
    float _2748;
    float _2750;
    float _2752;
    if (_2356)
    {
        _2748 = _2690;
        _2750 = _2691;
        _2752 = _2692;
    }
    else
    {
        uint _2754 = _2280 + 2u;
        uint _2758 = _2280 + 10u;
        float _2772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2754].w)) * _771) * 0.949999988079071044921875);
        float _2773 = _2772 * _2772;
        float _2774 = cbLight._m0[_2754].x + _847;
        float _2775 = cbLight._m0[_2754].y + _848;
        float _2776 = cbLight._m0[_2754].z + _849;
        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
        float _2781 = _2780 * _2774;
        float _2782 = _2780 * _2775;
        float _2783 = _2780 * _2776;
        float _2784 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2754].xyz));
        float _4797 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2787 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2788 = dot(vec3(_768, _769, _770), vec3(_2781, _2782, _2783));
        float _4808 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2791 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2792 = dot(vec3(cbLight._m0[_2754].xyz), vec3(_2781, _2782, _2783));
        float _4819 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2796 = _2773 * _2773;
        float _2800 = ((_2791 * _2791) * (_2796 + (-1.0))) + 1.0;
        float _2807 = exp2(log2(1.0 - (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0)))) * 5.0);
        float _2814 = 1.0 - _2773;
        float _2824 = (0.5 / (((_2556 * ((_2787 * _2814) + _2773)) + 9.9999999392252902907785028219223e-09) + (((_2556 * _2814) + _2773) * _2787))) * _2787;
        float _4830 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2826 = (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2796 / ((_2800 * _2800) * 3.141590118408203125));
        float _2827 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2748 = (((((_2807 * _2578) + _929) * cbLight._m0[_2758].x) * _2826) * _2827) + _2690;
        _2750 = (((((_2807 * _2580) + _931) * cbLight._m0[_2758].y) * _2826) * _2827) + _2691;
        _2752 = (((((_2807 * _2581) + _932) * cbLight._m0[_2758].z) * _2826) * _2827) + _2692;
    }
    float _2858;
    float _2860;
    float _2862;
    if (_2465)
    {
        _2858 = _2748;
        _2860 = _2750;
        _2862 = _2752;
    }
    else
    {
        uint _2869 = _2280 + 3u;
        uint _2873 = _2280 + 11u;
        float _2887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2869].w)) * _771) * 0.949999988079071044921875);
        float _2888 = _2887 * _2887;
        float _2889 = cbLight._m0[_2869].x + _847;
        float _2890 = cbLight._m0[_2869].y + _848;
        float _2891 = cbLight._m0[_2869].z + _849;
        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
        float _2896 = _2895 * _2889;
        float _2897 = _2895 * _2890;
        float _2898 = _2895 * _2891;
        float _2899 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2869].xyz));
        float _4846 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2902 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2903 = dot(vec3(_768, _769, _770), vec3(_2896, _2897, _2898));
        float _4857 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2906 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _2907 = dot(vec3(cbLight._m0[_2869].xyz), vec3(_2896, _2897, _2898));
        float _4868 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2911 = _2888 * _2888;
        float _2915 = ((_2906 * _2906) * (_2911 + (-1.0))) + 1.0;
        float _2922 = exp2(log2(1.0 - (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0)))) * 5.0);
        float _2929 = 1.0 - _2888;
        float _2939 = (0.5 / (((_2556 * ((_2902 * _2929) + _2888)) + 9.9999999392252902907785028219223e-09) + (((_2556 * _2929) + _2888) * _2902))) * _2902;
        float _4879 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2941 = (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2911 / ((_2915 * _2915) * 3.141590118408203125));
        float _2942 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2858 = (((((_2922 * _2578) + _929) * cbLight._m0[_2873].x) * _2941) * _2942) + _2748;
        _2860 = (((((_2922 * _2580) + _931) * cbLight._m0[_2873].y) * _2941) * _2942) + _2750;
        _2862 = (((((_2922 * _2581) + _932) * cbLight._m0[_2873].z) * _2941) * _2942) + _2752;
    }
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    if (_2278.y == 0u)
    {
        uvec4 _2963 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2964 = _2963.x;
        uint _2975 = uint((float(_2963.y) * floor(float(uint(cbSceneParam._m0[85u].y * _868) / _2964))) + floor(float(uint(cbSceneParam._m0[85u].x * _867) / _2964)));
        float _2985 = (log2(_2056 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2986 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        uint _2989 = uint(isnan(14.0) ? _2986 : (isnan(_2986) ? 14.0 : min(_2986, 14.0)));
        uvec4 _2994 = texelFetch(g_lightClusterGridBuffer, int(((_2989 << 2u) + (_2975 << 6u)) >> 2u));
        uint _2995 = _2994.x;
        uint _2996 = _2963.z;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        if (((((1u << ((_2996 >> 4u) & 15u)) + 4294967295u) & _2995) == 0u) || ((_2996 & 240u) == 0u))
        {
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
        }
        else
        {
            float _3076;
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3086;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            uint _3234 = 0u;
            uint _3243;
            bool _3244;
            for (;;)
            {
                _3243 = texelFetch(g_lightClassification, int((((_2989 << 5u) + (_2975 << 9u)) + (_3234 << 2u)) >> 2u)).x;
                _3244 = _3243 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3244)
                {
                    frontier_phi_71_pred = _3233;
                    frontier_phi_71_pred_1 = _3232;
                    frontier_phi_71_pred_2 = _3231;
                    frontier_phi_71_pred_3 = _3230;
                    frontier_phi_71_pred_4 = _3229;
                    frontier_phi_71_pred_5 = _3228;
                }
                else
                {
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    uint _3379;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3243;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    for (;;)
                    {
                        uint _3383 = uint(findLSB(_3379)) + (_3234 << 5u);
                        uint _3380 = (_3379 + 4294967295u) & _3379;
                        uint _3385 = _3383 * 48u;
                        vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3385)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 3u)).x));
                        uint _3405 = (_3383 * 48u) + 4u;
                        vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 3u)).x));
                        uint _3424 = (_3383 * 48u) + 8u;
                        vec3 _3435 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3424)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 2u)).x));
                        float _3439 = _3399.x - _2054;
                        float _3440 = _3399.y - _2055;
                        float _3441 = _3399.z - _2056;
                        float _3442 = dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441));
                        float _3445 = inversesqrt(_3442);
                        float _3446 = _3445 * _3439;
                        float _3447 = _3445 * _3440;
                        float _3448 = _3445 * _3441;
                        float _3449 = dot(vec3(_886, _889, _892), vec3(_3446, _3447, _3448));
                        float _3454 = 1.0 - (_3442 * _3399.w);
                        float _4905 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3455 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3456 = sqrt(_3442) * _3418.w;
                        float _3459 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                        float _3460 = _3459 * _3459;
                        float _3463 = ((1.0 - _3460) * _3449) + _3460;
                        float _3466 = _3456 * _3456;
                        float _3470 = ((isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))) * _3455) / ((_3466 * 0.699999988079071044921875) + 1.0);
                        float _3474 = (-0.0) - _2054;
                        float _3475 = (-0.0) - _2055;
                        float _3476 = (-0.0) - _2056;
                        float _3480 = inversesqrt(dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476)));
                        float _3481 = _3480 * _3474;
                        float _3482 = _3480 * _3475;
                        float _3483 = _3480 * _3476;
                        float _3490 = exp2(log2(1.0 / ((_3466 * 3.5) + 5.0)) * 0.25);
                        float _3491 = 1.0 - _961;
                        float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                        float _3499 = _3498 * _3498;
                        float _3500 = _3499 * _3499;
                        float _3501 = _3481 + _3446;
                        float _3502 = _3482 + _3447;
                        float _3503 = _3483 + _3448;
                        float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                        float _3511 = dot(vec3(_886, _889, _892), vec3(_3481, _3482, _3483));
                        float _4921 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3514 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3515 = dot(vec3(_886, _889, _892), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                        float _4932 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3518 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                        float _3523 = _3459 * _3499;
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3449) + _3524;
                        float _4943 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3528 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3529 = 1.0 - _3499;
                        float _3539 = (0.5 / (((_3528 * ((_3514 * _3529) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3499) * _3514))) * _3528;
                        float _4954 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3550 = (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0)))) / ((_3522 * _3522) * ((_3466 * 2.1991131305694580078125) + 3.141590118408203125))) * _3455;
                        _3303 = (_3470 * _3418.x) + _3376;
                        _3304 = (_3470 * _3418.y) + _3377;
                        _3305 = (_3470 * _3418.z) + _3378;
                        _3300 = (_3550 * _3435.x) + _3373;
                        _3301 = (_3550 * _3435.y) + _3374;
                        _3302 = (_3550 * _3435.z) + _3375;
                        if (_3380 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3380;
                        }
                    }
                    frontier_phi_71_pred = _3305;
                    frontier_phi_71_pred_1 = _3304;
                    frontier_phi_71_pred_2 = _3303;
                    frontier_phi_71_pred_3 = _3302;
                    frontier_phi_71_pred_4 = _3301;
                    frontier_phi_71_pred_5 = _3300;
                }
                _3086 = frontier_phi_71_pred;
                _3084 = frontier_phi_71_pred_1;
                _3082 = frontier_phi_71_pred_2;
                _3080 = frontier_phi_71_pred_3;
                _3078 = frontier_phi_71_pred_4;
                _3076 = frontier_phi_71_pred_5;
                uint _3235 = _3234 + 1u;
                if (_3235 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3228 = _3076;
                    _3229 = _3078;
                    _3230 = _3080;
                    _3231 = _3082;
                    _3232 = _3084;
                    _3233 = _3086;
                    _3234 = _3235;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
        }
        uvec4 _3089 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3090 = _3089.z;
        uint _3092 = (_3090 >> 8u) & 15u;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        if (((4294967295u << _3092) & _2995) == 0u)
        {
            _3196 = _3075;
            _3198 = _3077;
            _3200 = _3079;
            _3202 = _3081;
            _3204 = _3083;
            _3206 = _3085;
        }
        else
        {
            float _3221 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
            float _3222 = _3221 * _2054;
            float _3223 = _3221 * _2055;
            float _3224 = _3221 * _2056;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3092 < ((_3090 >> 12u) & 15u))
            {
                float _3197;
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3356 = _3075;
                float _3357 = _3077;
                float _3358 = _3079;
                float _3359 = _3081;
                float _3360 = _3083;
                float _3361 = _3085;
                uint _3362 = _3092;
                uint _3371;
                bool _3372;
                for (;;)
                {
                    _3371 = texelFetch(g_lightClassification, int((((_2989 << 5u) + (_2975 << 9u)) + (_3362 << 2u)) >> 2u)).x;
                    _3372 = _3371 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3372)
                    {
                        frontier_phi_82_pred = _3361;
                        frontier_phi_82_pred_1 = _3360;
                        frontier_phi_82_pred_2 = _3359;
                        frontier_phi_82_pred_3 = _3358;
                        frontier_phi_82_pred_4 = _3357;
                        frontier_phi_82_pred_5 = _3356;
                    }
                    else
                    {
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3577 = _3356;
                        float _3578 = _3357;
                        float _3579 = _3358;
                        float _3580 = _3359;
                        float _3581 = _3360;
                        float _3582 = _3361;
                        uint _3583 = _3371;
                        uint _3584;
                        vec4 _3609;
                        float _3610;
                        vec4 _3625;
                        vec3 _3637;
                        vec4 _3652;
                        vec4 _3667;
                        float _3713;
                        bool _3714;
                        for (;;)
                        {
                            uint _3594 = ((_3362 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3583));
                            _3584 = (_3583 + 4294967295u) & _3583;
                            uint _3596 = _3594 * 40u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            _3610 = _3609.w;
                            uint _3612 = (_3594 * 40u) + 4u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3627 = (_3594 * 40u) + 8u;
                            _3637 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x));
                            uint _3639 = (_3594 * 40u) + 16u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3654 = (_3594 * 40u) + 20u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3594 * 40u) + 24u;
                            vec4 _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3688 = (_3594 * 40u) + 28u;
                            vec4 _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            _3713 = fma(_2056, _3701.z, fma(_2055, _3701.y, _3701.x * _2054)) + _3701.w;
                            _3714 = !((fma(_2056, _3682.z, fma(_2055, _3682.y, _3682.x * _2054)) + _3682.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3714)
                            {
                                float _3741 = _3609.x - _2054;
                                float _3742 = _3609.y - _2055;
                                float _3743 = _3609.z - _2056;
                                float _3744 = dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743));
                                float _3747 = inversesqrt(_3744);
                                float _3748 = _3747 * _3741;
                                float _3749 = _3747 * _3742;
                                float _3750 = _3747 * _3743;
                                float _3754 = 1.0 - (_3744 / (_3610 * _3610));
                                float _4965 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3759 = sqrt(_3744) * _3625.w;
                                float _3761 = 1.39999997615814208984375 / (_3759 + 1.39999997615814208984375);
                                float _3762 = _3761 * _3761;
                                float _3765 = ((1.0 - _3762) * dot(vec3(_3748, _3749, _3750), vec3(_886, _889, _892))) + _3762;
                                float _3768 = _3759 * _3759;
                                float _3772 = (fma(_2056, _3652.z, fma(_2055, _3652.y, _3652.x * _2054)) + _3652.w) / _3713;
                                float _3773 = (fma(_2056, _3667.z, fma(_2055, _3667.y, _3667.x * _2054)) + _3667.w) / _3713;
                                float _3777 = 1.0 - dot(vec2(_3772, _3773), vec2(_3772, _3773));
                                float _4981 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3778 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3779 = _3778 * (((isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0))) * _3755) / ((_3768 * 0.699999988079071044921875) + 1.0));
                                float _3791 = exp2(log2(1.0 / ((_3768 * 3.5) + 5.0)) * 0.25);
                                float _3792 = 1.0 - _961;
                                float _3799 = sqrt(1.0 - ((1.0 - (_3792 * _3792)) * (1.0 - (_3791 * _3791))));
                                float _3800 = _3799 * _3799;
                                float _3801 = _3800 * _3800;
                                float _3802 = _3748 - _3222;
                                float _3803 = _3749 - _3223;
                                float _3804 = _3750 - _3224;
                                float _3808 = inversesqrt(dot(vec3(_3802, _3803, _3804), vec3(_3802, _3803, _3804)));
                                float _3812 = dot(vec3(_886, _889, _892), vec3((-0.0) - _3222, (-0.0) - _3223, (-0.0) - _3224));
                                float _4992 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3815 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3816 = dot(vec3(_886, _889, _892), vec3(_3808 * _3802, _3808 * _3803, _3808 * _3804));
                                float _5003 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3823 = ((_3819 * _3819) * (_3801 + (-1.0))) + 1.0;
                                float _3824 = _3761 * _3800;
                                float _3825 = _3824 * _3824;
                                float _3831 = ((1.0 - _3825) * dot(vec3(_886, _889, _892), vec3(_3748, _3749, _3750))) + _3825;
                                float _5014 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3832 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3833 = 1.0 - _3800;
                                float _3843 = (0.5 / (((_3832 * ((_3815 * _3833) + _3800)) + 9.9999999392252902907785028219223e-09) + (((_3832 * _3833) + _3800) * _3815))) * _3832;
                                float _5025 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3853 = (_3778 * _3755) * (((_3801 * 3.1415927410125732421875) * (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0)))) / ((_3823 * _3823) * ((_3768 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3779 * _3625.z;
                                frontier_phi_88_pred_1 = _3779 * _3625.y;
                                frontier_phi_88_pred_2 = _3779 * _3625.x;
                                frontier_phi_88_pred_3 = _3853 * _3637.z;
                                frontier_phi_88_pred_4 = _3853 * _3637.y;
                                frontier_phi_88_pred_5 = _3853 * _3637.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3862 = frontier_phi_88_pred;
                            _3861 = frontier_phi_88_pred_1;
                            _3860 = frontier_phi_88_pred_2;
                            _3859 = frontier_phi_88_pred_3;
                            _3858 = frontier_phi_88_pred_4;
                            _3857 = frontier_phi_88_pred_5;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3564 = _3857 + _3577;
                            _3565 = _3858 + _3578;
                            _3566 = _3859 + _3579;
                            if (_3584 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3584;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3569;
                        frontier_phi_82_pred_1 = _3568;
                        frontier_phi_82_pred_2 = _3567;
                        frontier_phi_82_pred_3 = _3566;
                        frontier_phi_82_pred_4 = _3565;
                        frontier_phi_82_pred_5 = _3564;
                    }
                    _3207 = frontier_phi_82_pred;
                    _3205 = frontier_phi_82_pred_1;
                    _3203 = frontier_phi_82_pred_2;
                    _3201 = frontier_phi_82_pred_3;
                    _3199 = frontier_phi_82_pred_4;
                    _3197 = frontier_phi_82_pred_5;
                    uint _3363 = _3362 + 1u;
                    if (_3363 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3356 = _3197;
                        _3357 = _3199;
                        _3358 = _3201;
                        _3359 = _3203;
                        _3360 = _3205;
                        _3361 = _3207;
                        _3362 = _3363;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3203;
                frontier_phi_63_64_ladder_1 = _3207;
                frontier_phi_63_64_ladder_2 = _3205;
                frontier_phi_63_64_ladder_3 = _3201;
                frontier_phi_63_64_ladder_4 = _3199;
                frontier_phi_63_64_ladder_5 = _3197;
            }
            else
            {
                frontier_phi_63_64_ladder = _3081;
                frontier_phi_63_64_ladder_1 = _3085;
                frontier_phi_63_64_ladder_2 = _3083;
                frontier_phi_63_64_ladder_3 = _3079;
                frontier_phi_63_64_ladder_4 = _3077;
                frontier_phi_63_64_ladder_5 = _3075;
            }
            _3196 = frontier_phi_63_64_ladder_5;
            _3198 = frontier_phi_63_64_ladder_4;
            _3200 = frontier_phi_63_64_ladder_3;
            _3202 = frontier_phi_63_64_ladder;
            _3204 = frontier_phi_63_64_ladder_2;
            _3206 = frontier_phi_63_64_ladder_1;
        }
        float _3211 = isnan(1.0) ? _945 : (isnan(_945) ? 1.0 : min(_945, 1.0));
        _3008 = (_3211 * _3202) + _2520;
        _3010 = (_3211 * _3204) + _2522;
        _3012 = (_3211 * _3206) + _2524;
        _3014 = ((_3196 * _929) * _3211) + _2858;
        _3016 = ((_3198 * _931) * _3211) + _2860;
        _3018 = ((_3200 * _932) * _3211) + _2862;
    }
    else
    {
        _3008 = _2520;
        _3010 = _2522;
        _3012 = _2524;
        _3014 = _2858;
        _3016 = _2860;
        _3018 = _2862;
    }
    float _5041 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _5052 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _5063 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _3035 = ((isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_3008 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _945))) + ((_3014 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    float _3036 = ((isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (_3010 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _945))) + ((_3016 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    float _3037 = ((isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0))) * (_3012 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _945))) + ((_3018 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    uint _3038 = _283 + 6u;
    float _3046 = _867 / cbSceneParam._m0[86u].x;
    float _3047 = _868 / cbSceneParam._m0[86u].y;
    vec4 _3061 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3046, _3047, (log2((isnan(cbSceneParam._m0[77u].w) ? _790 : (isnan(_790) ? cbSceneParam._m0[77u].w : min(_790, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3063 = _3061.x;
    float _3064 = _3061.y;
    float _3065 = _3061.z;
    float _3066 = _3061.w;
    float _3138;
    float _3140;
    float _3142;
    float _3144;
    if (_790 > cbSceneParam._m0[78u].w)
    {
        float _3100 = isnan(_790) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _790 : min(cbSceneParam._m0[80u].w, _790));
        float _3101 = _3100 / _790;
        float _3112 = _3101 * _840;
        float _3113 = _841 * _3101;
        float _3114 = (-0.0) - _3113;
        float _3116 = _3101 * _842;
        float _3118 = (cbSceneParam._m0[77u].w * _3114) / _3100;
        float _3119 = _3118 + cbSceneParam._m0[79u].w;
        float _3120 = cbSceneParam._m0[79u].w - _3113;
        float _3126 = sqrt(((_3112 * _3112) + (_3113 * _3113)) + (_3116 * _3116));
        float _3129 = (1.0 - (cbSceneParam._m0[77u].w / _3100)) * _3126;
        float _3134 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3136 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3313;
        if (abs((_3114 - _3118) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3313 = ((((_3119 > 0.0) ? exp2(_3134 * _3119) : (2.0 - exp2(_3136 * _3119))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3129;
        }
        else
        {
            float _3257 = 1.0 / cbSceneParam._m0[80u].x;
            float _3258 = isnan(_3120) ? _3119 : (isnan(_3119) ? _3120 : max(_3119, _3120));
            float _3259 = isnan(_3120) ? _3119 : (isnan(_3119) ? _3120 : min(_3119, _3120));
            float _3268 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : min(_3258, 0.0));
            float _3269 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : min(_3259, 0.0));
            _3313 = ((abs(_3126 / _3114) * cbSceneParam._m0[80u].y) * ((((_3268 - _3269) * 2.0) - ((exp2(_3134 * (isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0)))) - exp2(_3134 * (isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))))) * _3257)) - ((exp2(_3136 * _3268) - exp2(_3136 * _3269)) * _3257))) + (_3129 * cbSceneParam._m0[80u].z);
        }
        vec4 _3315 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3046, _3047, 1.0), 0.0);
        float _3324 = exp2((_3313 * (-1.44269502162933349609375)) * (1.0 - _3315.w));
        float _3325 = log2(_3324);
        float _3341 = log2(_3066);
        _3138 = (exp2(_3341 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].x)) * _3315.x) / cbSceneParam._m0[78u].x)) + _3063;
        _3140 = (exp2(_3341 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].y)) * _3315.y) / cbSceneParam._m0[78u].y)) + _3064;
        _3142 = (exp2(_3341 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3325 * cbSceneParam._m0[78u].z)) * _3315.z) / cbSceneParam._m0[78u].z)) + _3065;
        _3144 = _3324 * _3066;
    }
    else
    {
        _3138 = _3063;
        _3140 = _3064;
        _3142 = _3065;
        _3144 = _3066;
    }
    bool _3351;
    vec4 _3154;
    vec4 _3176;
    float _3178;
    float _3182;
    float _3183;
    float _3184;
    float _3185;
    bool _3195;
    for (;;)
    {
        _3154 = cbMatDynParam._m0[0u];
        float _3156 = roundEven(_3154.y);
        bool _3157 = _3156 == 3.0;
        float _3158 = log2(_3144);
        float _3165 = exp2(_3158 * cbSceneParam._m0[78u].x) * _3035;
        float _3166 = exp2(_3158 * cbSceneParam._m0[78u].y) * _3036;
        float _3167 = exp2(_3158 * cbSceneParam._m0[78u].z) * _3037;
        float _3174 = _856 + (-0.5);
        _3176 = cbMtdParam._m0[1u];
        _3178 = _3176.y * _3174;
        float _3181 = (_3156 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3182 = _3181 * (_3157 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3138)));
        _3183 = _3181 * (_3157 ? _3166 : (_3166 + (cbSceneParam._m0[72u].w * _3140)));
        _3184 = _3181 * (_3157 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3142)));
        _3185 = _3174 * 0.999000012874603271484375;
        _3195 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3195)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3185) < 0.5)
            {
                _3351 = true;
                break;
            }
        }
        uint _3292 = _905 + uint(_3154.w);
        if ((cbInstanceData._m0[_3292].w < 1.0) && ((cbInstanceData._m0[_3292].w + _3185) < 0.5))
        {
            _3351 = true;
            break;
        }
        if ((_3178 + 1.0) < _3176.x)
        {
            _3351 = true;
            break;
        }
        _3351 = false;
        break;
    }
    float _3555;
    if (_3351)
    {
        discard_state = true;
        _3555 = 0.0;
    }
    else
    {
        _3555 = cbInstanceData._m0[_3038].w;
    }
    SV_Target.x = _3182;
    SV_Target.y = _3183;
    SV_Target.z = _3184;
    SV_Target.w = _3555;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3038].w;
    discard_exit();
}


