#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1475;
float _3877;
float _3878;
float _3879;
float _3880;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3889 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3900 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3911 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _346 = _341.x * cbMtdParam._m0[11u].x;
    float _347 = _341.y * cbMtdParam._m0[11u].y;
    float _348 = _341.z * cbMtdParam._m0[11u].z;
    vec4 _367 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _386.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[23u].w) + _432) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3922 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _457 = (_450 * ((_367.x * cbMtdParam._m0[12u].x) - _346)) + _346;
    float _458 = (_450 * ((_367.y * cbMtdParam._m0[12u].y) - _347)) + _347;
    float _459 = (_450 * ((_367.z * cbMtdParam._m0[12u].z) - _348)) + _348;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _386.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[23u].w) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3933 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    float _536 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _530;
    float _539 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _531;
    float _542 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _532;
    float _549 = ((_530 - _536) * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) + _536;
    float _550 = ((_531 - _539) * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) + _539;
    float _551 = ((_532 - _542) * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) + _542;
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _303) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _304) + cbTextureTilingScale._m0[14u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _631 = _629.x;
    float _632 = _629.y;
    float _633 = _629.z;
    float _640 = ((_612.x - _631) * _450) + _631;
    float _641 = ((_612.y - _632) * _450) + _632;
    float _642 = ((_612.z - _633) * _450) + _633;
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _667 = ((_654.z - _642) * _523) + _642;
    float _670 = ((((_654.x - _640) * _523) + _640) * 2.0) + (-1.0);
    float _671 = ((((_654.y - _641) * _523) + _641) * 2.0) + (-1.0);
    float _672 = dot(vec2(_670, _671), vec2(_670, _671));
    float _3944 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _677 = sqrt(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _718 = _716.x;
    float _719 = 1.0 - _718;
    float _735 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_718 - _719) * cbMtdParam._m0[24u].z) + _719) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3955 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _736 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _743 = (_736 * ((_570.x * cbMtdParam._m0[18u].x) - _549)) + _549;
    float _744 = (_736 * ((_570.y * cbMtdParam._m0[18u].y) - _550)) + _550;
    float _745 = (_736 * ((_570.z * cbMtdParam._m0[18u].z) - _551)) + _551;
    vec4 _771 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _773 = _771.x;
    float _791 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w)).x - _773) * _450) + _773;
    float _808 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _303) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _304) + cbTextureTilingScale._m0[21u].w)).x - _791) * _523) + _791;
    float _812 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _808) * cbMtdParam._m0[19u].z) + _808;
    float _814 = _812 - (_812 * _736);
    float _819 = (((_589.z - _667) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _667;
    float _823 = ((_691.z - _819) * cbMtdParam._m0[19u].w) + _819;
    vec4 _836 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _843 = (_836.x * 2.0) + (-1.0);
    float _844 = (_836.y * 2.0) + (-1.0);
    float _845 = dot(vec2(_843, _844), vec2(_843, _844));
    float _3966 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _853 = (_736 * (_836.z - _823)) + _823;
    float _862 = (_670 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_589.x * 2.0) + (-1.0)))) + (((_691.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _863 = (_671 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_589.y * 2.0) + (-1.0)))) + (((_691.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _875 = (((_843 - _862) + (cbMtdParam._m0[21u].x * _862)) * _736) + _862;
    float _876 = (((_844 - _863) + (cbMtdParam._m0[21u].x * _863)) * _736) + _863;
    float _877 = (_736 * (sqrt(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) - _677)) + _677;
    float _881 = cbMtdParam._m0[22u].x + _691.w;
    float _884 = fma(_877, _250 * NORMAL.x, fma(_876, _257 * TANGENT.x, (_243 * _235) * _875));
    float _887 = fma(_877, _250 * NORMAL.y, fma(_876, _257 * TANGENT.y, (_243 * _236) * _875));
    float _890 = fma(_877, _250 * NORMAL.z, fma(_876, _257 * TANGENT.z, (_243 * _237) * _875));
    float _894 = inversesqrt(dot(vec3(_884, _887, _890), vec3(_884, _887, _890)));
    float _895 = _894 * _884;
    float _896 = _894 * _887;
    float _897 = _894 * _890;
    float _3977 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _898 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _3999 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4010 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4021 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4032 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _903 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _917 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _968 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _958);
    float _969 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _958);
    float _970 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _958);
    float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
    float _975 = _968 * _974;
    float _976 = _969 * _974;
    float _977 = _970 * _974;
    vec4 _982 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _984 = _982.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1156 = sqrt(((_968 * _968) + (_969 * _969)) + (_970 * _970));
        float _1162 = (cbMatDynParam._m0[5u].x * _1156) + cbMatDynParam._m0[5u].y;
        float _4043 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1167 = (cbMatDynParam._m0[5u].z * _1156) + cbMatDynParam._m0[5u].w;
        float _4054 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) - _1163)) + _1163) < ((_984 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _995 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _996 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1014 = fma(_897, cbSceneParam._m0[5u].z, fma(_896, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _895));
    float _1017 = fma(_897, cbSceneParam._m0[6u].z, fma(_896, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _895));
    float _1020 = fma(_897, cbSceneParam._m0[7u].z, fma(_896, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _895));
    uint _1033 = _284 + 9u;
    uint _1034 = _1033 + uint(cbMatDynParam._m0[0u].w);
    float _1040 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_1034].x;
    float _1041 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * cbInstanceData._m0[_1034].y;
    float _1042 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * cbInstanceData._m0[_1034].z;
    float _4065 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1046 = 1.0 - _903;
    float _1047 = _1043 * _1046;
    float _1048 = _1044 * _1046;
    float _1049 = _1045 * _1046;
    float _1054 = (_1043 + (-0.039999999105930328369140625)) * _903;
    float _1055 = (_1044 + (-0.039999999105930328369140625)) * _903;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _903;
    float _1057 = _1054 + 0.039999999105930328369140625;
    float _1059 = _1055 + 0.039999999105930328369140625;
    float _1060 = _1056 + 0.039999999105930328369140625;
    vec4 _1069 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _995, cbSceneParam._m0[86u].y * _996));
    float _1073 = ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * TEXCOORD_5.w) * _1069.x;
    float _1074 = dot(vec3(_895, _896, _897), vec3(_975, _976, _977));
    float _1077 = _1074 * 2.0;
    float _1081 = (_1077 * _895) - _975;
    float _1082 = (_1077 * _896) - _976;
    float _1083 = (_1077 * _897) - _977;
    float _1087 = abs(dot(vec3(_975, _976, _977), vec3(_895, _896, _897)));
    float _4098 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1089 = sqrt(_898);
    float _1102 = exp2((_1089 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1089 * 3.0));
    float _1108 = (1.0 - _1102) * ((_1089 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1109 = _1102 * _1089;
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1474;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1199 = fma(_1145, cbModelParam._m0[26u].z, fma(_1141, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137));
        float _1203 = fma(_1145, cbModelParam._m0[27u].z, fma(_1141, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137));
        float _1207 = fma(_1145, cbModelParam._m0[28u].z, fma(_1141, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137));
        float _1232 = _1137 + _895;
        float _1233 = _1141 + _896;
        float _1234 = _1145 + _897;
        float _1244 = fma(_1234, cbModelParam._m0[26u].z, fma(_1233, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1232)) - _1199;
        float _1245 = fma(_1234, cbModelParam._m0[27u].z, fma(_1233, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1232)) - _1203;
        float _1246 = fma(_1234, cbModelParam._m0[28u].z, fma(_1233, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1232)) - _1207;
        float _1250 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
        float _1263 = ((_1250 * _1244) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1199 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1250 * _1245) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1203 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1250 * _1246) / cbModelParam._m0[34u].z) + ((((((_1207 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        float _1302 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1268.x + (-0.5));
        float _1304 = _1302 * (_1268.y + (-0.5));
        float _1305 = _1302 * (_1268.z + (-0.5));
        float _1312 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1275.x + (-0.5));
        float _1314 = _1312 * (_1275.y + (-0.5));
        float _1315 = _1312 * (_1275.z + (-0.5));
        float _1322 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1282.x + (-0.5));
        float _1324 = _1322 * (_1282.y + (-0.5));
        float _1325 = _1322 * (_1282.z + (-0.5));
        float _1332 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1289.x + (-0.5));
        float _1334 = _1332 * (_1289.y + (-0.5));
        float _1335 = _1332 * (_1289.z + (-0.5));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = _1303 * 0.5;
        float _1340 = _1313 * 0.5;
        float _1341 = _1323 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1356 = (dot(vec3(_895, _896, _897), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1366 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4146 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1368 + 1.0))) + _1373) * _1336;
        float _1383 = _1304 * 0.5;
        float _1384 = _1314 * 0.5;
        float _1385 = _1324 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_895, _896, _897), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4179 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1410 + 1.0))) + _1415) * _1337;
        float _1425 = _1305 * 0.5;
        float _1426 = _1315 * 0.5;
        float _1427 = _1325 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_895, _896, _897), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4212 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1452 + 1.0))) + _1457) * _1338;
        _1474 = _1305;
        _1476 = _1304;
        _1477 = _1303;
        _1478 = _1315;
        _1479 = _1314;
        _1480 = _1313;
        _1481 = _1325;
        _1482 = _1324;
        _1483 = _1323;
        _1484 = _1338;
        _1485 = _1337;
        _1486 = _1336;
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
    }
    else
    {
        _1474 = _1475;
        _1476 = _1475;
        _1477 = _1475;
        _1478 = _1475;
        _1479 = _1475;
        _1480 = _1475;
        _1481 = _1475;
        _1482 = _1475;
        _1483 = _1475;
        _1484 = _1475;
        _1485 = _1475;
        _1486 = _1475;
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
    }
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1516 = fma(_1145, cbModelParam._m0[30u].z, fma(_1141, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1137));
        float _1520 = fma(_1145, cbModelParam._m0[31u].z, fma(_1141, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1137));
        float _1524 = fma(_1145, cbModelParam._m0[32u].z, fma(_1141, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1137));
        float _1547 = _1137 + _895;
        float _1548 = _1141 + _896;
        float _1549 = _1145 + _897;
        float _1559 = fma(_1549, cbModelParam._m0[30u].z, fma(_1548, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1547)) - _1516;
        float _1560 = fma(_1549, cbModelParam._m0[31u].z, fma(_1548, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1547)) - _1520;
        float _1561 = fma(_1549, cbModelParam._m0[32u].z, fma(_1548, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1547)) - _1524;
        float _1565 = inversesqrt(dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561)));
        float _1578 = ((_1565 * _1559) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1516 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1579 = ((_1565 * _1560) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1520 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1580 = ((_1565 * _1561) / cbModelParam._m0[35u].z) + ((((((_1524 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        float _1615 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1582.x + (-0.5));
        float _1617 = _1615 * (_1582.y + (-0.5));
        float _1618 = _1615 * (_1582.z + (-0.5));
        float _1625 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1589.x + (-0.5));
        float _1627 = _1625 * (_1589.y + (-0.5));
        float _1628 = _1625 * (_1589.z + (-0.5));
        float _1635 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1596.x + (-0.5));
        float _1637 = _1635 * (_1596.y + (-0.5));
        float _1638 = _1635 * (_1596.z + (-0.5));
        float _1645 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1603.x + (-0.5));
        float _1647 = _1645 * (_1603.y + (-0.5));
        float _1648 = _1645 * (_1603.z + (-0.5));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = _1616 * 0.5;
        float _1653 = _1626 * 0.5;
        float _1654 = _1636 * 0.5;
        float _1655 = dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654));
        float _1660 = (_1655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1655);
        float _1668 = (dot(vec3(_895, _896, _897), vec3(_1660 * _1652, _1660 * _1653, _1660 * _1654)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1677 = sqrt(((_1653 * _1653) + (_1652 * _1652)) + (_1654 * _1654)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1679 = _1678 * 2.0;
        float _1683 = (1.0 - _1678) / (_1678 + 1.0);
        float _4275 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1693 = ((((1.0 - _1684) * (_1679 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1679 + 1.0))) + _1684) * _1649;
        float _1694 = _1617 * 0.5;
        float _1695 = _1627 * 0.5;
        float _1696 = _1637 * 0.5;
        float _1697 = dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696));
        float _1702 = (_1697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1697);
        float _1710 = (dot(vec3(_895, _896, _897), vec3(_1702 * _1694, _1702 * _1695, _1702 * _1696)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1719 = sqrt(((_1695 * _1695) + (_1694 * _1694)) + (_1696 * _1696)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1721 = _1720 * 2.0;
        float _1725 = (1.0 - _1720) / (_1720 + 1.0);
        float _4308 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1735 = ((((1.0 - _1726) * (_1721 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1721 + 1.0))) + _1726) * _1650;
        float _1736 = _1618 * 0.5;
        float _1737 = _1628 * 0.5;
        float _1738 = _1638 * 0.5;
        float _1739 = dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738));
        float _1744 = (_1739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1739);
        float _1752 = (dot(vec3(_895, _896, _897), vec3(_1744 * _1736, _1744 * _1737, _1744 * _1738)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1761 = sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1763 = _1762 * 2.0;
        float _1767 = (1.0 - _1762) / (_1762 + 1.0);
        float _4341 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1777 = ((((1.0 - _1768) * (_1763 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1763 + 1.0))) + _1768) * _1651;
        _1785 = _1618;
        _1786 = _1617;
        _1787 = _1616;
        _1788 = _1628;
        _1789 = _1627;
        _1790 = _1626;
        _1791 = _1638;
        _1792 = _1637;
        _1793 = _1636;
        _1794 = _1651;
        _1795 = _1650;
        _1796 = _1649;
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)));
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)));
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)));
    }
    else
    {
        _1785 = _1475;
        _1786 = _1475;
        _1787 = _1475;
        _1788 = _1475;
        _1789 = _1475;
        _1790 = _1475;
        _1791 = _1475;
        _1792 = _1475;
        _1793 = _1475;
        _1794 = _1475;
        _1795 = _1475;
        _1796 = _1475;
        _1797 = 0.0;
        _1798 = 0.0;
        _1799 = 0.0;
    }
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1487)) + _1487;
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1488)) + _1488;
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1489)) + _1489;
    float _1832 = fma(_1811, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1809 * cbSceneParam._m0[89u].x));
    float _1835 = fma(_1811, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1809 * cbSceneParam._m0[90u].x));
    float _1838 = fma(_1811, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1809));
    float _1853 = _1081 * 0.5;
    float _1854 = _1082 * 0.5;
    float _1855 = _1083 * 0.5;
    float _1856 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1859 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1862 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1896;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1869 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1474, _1478, _1481, _1484));
        float _1873 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1476, _1479, _1482, _1485));
        float _1877 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1477, _1480, _1483, _1486));
        float _1884 = dot(vec4(cbModelParam._m0[39u]), vec4(_1853, _1854, _1855, 1.0));
        _1896 = dot(vec3(isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1884) ? 0.0 : (isnan(0.0) ? _1884 : max(0.0, _1884))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1896 = 1.0;
    }
    float _1907;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1898 = dot(vec4(cbModelParam._m0[40u]), vec4(_1853, _1854, _1855, 1.0));
        _1907 = dot(vec3(isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1898) ? 0.0 : (isnan(0.0) ? _1898 : max(0.0, _1898))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1907 = 1.0;
    }
    float _1911 = (_1907 * cbModelParam._m0[1u].x) + (_1896 * (1.0 - cbModelParam._m0[1u].x));
    float _1921 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _898);
    float _1922 = isnan(_1921) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1921 : min(cbModelParam._m0[25u].z, _1921));
    float _2002;
    float _2004;
    float _2006;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1969 = fma(_1145, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1137)) + cbModelParam._m0[13u].w;
        float _1973 = fma(_1145, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1137)) + cbModelParam._m0[14u].w;
        float _1977 = fma(_1145, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1137)) + cbModelParam._m0[15u].w;
        float _1980 = fma(_1083, cbModelParam._m0[13u].z, fma(_1082, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081));
        float _1983 = fma(_1083, cbModelParam._m0[14u].z, fma(_1082, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081));
        float _1986 = fma(_1083, cbModelParam._m0[15u].z, fma(_1082, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081));
        float _2014;
        if (_1980 > 0.0)
        {
            _2014 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2014 = frontier_phi_17_15_ladder;
        }
        float _2237;
        if (_1983 > 0.0)
        {
            _2237 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2237 = frontier_phi_26_22_ladder;
        }
        float _2494;
        if (_1986 > 0.0)
        {
            _2494 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2494 = frontier_phi_38_33_ladder;
        }
        float _2496 = isnan(_2237) ? _2014 : (isnan(_2014) ? _2237 : min(_2014, _2237));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1980) + _1969;
        float _2502 = (_2497 * _1983) + _1973;
        float _2503 = (_2497 * _1986) + _1977;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2506 = (-1.0) - _2504;
        float _2508 = _2504 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2503 > _2508) || ((_2503 < _2506) || ((_2502 > _2508) || ((_2502 < _2506) || ((_2501 < _2506) || (_2501 > _2508))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2631 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2503, cbModelParam._m0[9u].z, fma(_2502, cbModelParam._m0[9u].y, _2501 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2503, cbModelParam._m0[10u].z, fma(_2502, cbModelParam._m0[10u].y, _2501 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2503, cbModelParam._m0[11u].z, fma(_2502, cbModelParam._m0[11u].y, _2501 * cbModelParam._m0[11u].x))), _1922);
            frontier_phi_16_38_ladder = _2631.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2631.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2631.x * cbModelParam._m0[1u].y;
        }
        _2002 = frontier_phi_16_38_ladder_2;
        _2004 = frontier_phi_16_38_ladder_1;
        _2006 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1990 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1081, _1082, _1083), _1922);
        _2002 = _1990.x * cbModelParam._m0[1u].y;
        _2004 = _1990.y * cbModelParam._m0[1u].y;
        _2006 = _1990.z * cbModelParam._m0[1u].y;
    }
    float _2010 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _898);
    float _2011 = isnan(_2010) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2010 : min(cbModelParam._m0[25u].w, _2010));
    float _2100;
    float _2102;
    float _2104;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2064 = fma(_1145, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1137)) + cbModelParam._m0[21u].w;
        float _2068 = fma(_1145, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1137)) + cbModelParam._m0[22u].w;
        float _2072 = fma(_1145, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1137)) + cbModelParam._m0[23u].w;
        float _2075 = fma(_1083, cbModelParam._m0[21u].z, fma(_1082, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081));
        float _2078 = fma(_1083, cbModelParam._m0[22u].z, fma(_1082, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081));
        float _2081 = fma(_1083, cbModelParam._m0[23u].z, fma(_1082, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081));
        float _2242;
        if (_2075 > 0.0)
        {
            _2242 = abs((1.0 - _2064) / _2075);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2064 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2242 = frontier_phi_28_24_ladder;
        }
        float _2521;
        if (_2078 > 0.0)
        {
            _2521 = abs((1.0 - _2068) / _2078);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2068 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2521 = frontier_phi_40_35_ladder;
        }
        float _2734;
        if (_2081 > 0.0)
        {
            _2734 = abs((1.0 - _2072) / _2081);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2072 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2734 = frontier_phi_49_46_ladder;
        }
        float _2736 = isnan(_2521) ? _2242 : (isnan(_2242) ? _2521 : min(_2242, _2521));
        float _2737 = isnan(_2734) ? _2736 : (isnan(_2736) ? _2734 : min(_2736, _2734));
        float _2741 = (_2737 * _2075) + _2064;
        float _2742 = (_2737 * _2078) + _2068;
        float _2743 = (_2737 * _2081) + _2072;
        float _2744 = _2737 * 9.9999997473787516355514526367188e-05;
        float _2745 = (-1.0) - _2744;
        float _2747 = _2744 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2743 > _2747) || ((_2743 < _2745) || ((_2742 > _2747) || ((_2742 < _2745) || ((_2741 < _2745) || (_2741 > _2747))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2743, cbModelParam._m0[17u].z, fma(_2742, cbModelParam._m0[17u].y, _2741 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2743, cbModelParam._m0[18u].z, fma(_2742, cbModelParam._m0[18u].y, _2741 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2743, cbModelParam._m0[19u].z, fma(_2742, cbModelParam._m0[19u].y, _2741 * cbModelParam._m0[19u].x))), _2011);
            frontier_phi_25_49_ladder = _2942.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2942.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2942.x * cbModelParam._m0[1u].z;
        }
        _2100 = frontier_phi_25_49_ladder_2;
        _2102 = frontier_phi_25_49_ladder_1;
        _2104 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2084 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1081, _1082, _1083), _2011);
        _2100 = _2084.x * cbModelParam._m0[1u].z;
        _2102 = _2084.y * cbModelParam._m0[1u].z;
        _2104 = _2084.z * cbModelParam._m0[1u].z;
    }
    float _2117 = (((_1108 * _1057) + _1109) * _1073) * ((cbModelParam._m0[1u].w * (_2100 - _2002)) + _2002);
    float _2119 = (((_1108 * _1059) + _1109) * _1073) * ((cbModelParam._m0[1u].w * (_2102 - _2004)) + _2004);
    float _2121 = (((_1108 * _1060) + _1109) * _1073) * ((cbModelParam._m0[1u].w * (_2104 - _2006)) + _2006);
    float _2124 = fma(_2121, cbSceneParam._m0[89u].z, fma(_2119, cbSceneParam._m0[89u].y, _2117 * cbSceneParam._m0[89u].x));
    float _2127 = fma(_2121, cbSceneParam._m0[90u].z, fma(_2119, cbSceneParam._m0[90u].y, _2117 * cbSceneParam._m0[90u].x));
    float _2130 = fma(_2121, cbSceneParam._m0[91u].z, fma(_2119, cbSceneParam._m0[91u].y, _2117 * cbSceneParam._m0[91u].x));
    vec4 _2138 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_995, _996));
    float _2140 = _2138.w;
    float _2152 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2140);
    float _2153 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2140);
    float _2154 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2140);
    uvec4 _2158 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2160 = _2158.x * 14u;
    uint _2161 = _2160 + 13u;
    float _2168 = _1073 + (-1.0);
    float _2173 = (cbLight._m0[_2161].x * _2168) + 1.0;
    float _2174 = (cbLight._m0[_2161].y * _2168) + 1.0;
    float _2175 = (cbLight._m0[_2161].z * _2168) + 1.0;
    float _2176 = (cbLight._m0[_2161].w * _2168) + 1.0;
    uint _2177 = _2160 + 5u;
    float _2183 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
    uint _2187 = _2160 + 4u;
    float _2196 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
    uint _2200 = _2160 | 1u;
    float _2211 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_895, _896, _897));
    float _2214 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_895, _896, _897));
    float _4477 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _4488 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2219 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * 0.3183098733425140380859375;
    float _2221 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * 0.3183098733425140380859375;
    float _2228 = ((cbLight._m0[_2177].x * _2183) * _2221) + (((cbLight._m0[_2187].x * _2152) * _2196) * _2219);
    float _2229 = ((_2183 * cbLight._m0[_2177].y) * _2221) + (((cbLight._m0[_2187].y * _2153) * _2196) * _2219);
    float _2230 = ((_2183 * cbLight._m0[_2177].z) * _2221) + (((cbLight._m0[_2187].z * _2154) * _2196) * _2219);
    uvec4 _2234 = floatBitsToUint(cbLight._m0[_2160 + 12u]);
    bool _2236 = _2234.x == 0u;
    float _2247;
    float _2249;
    float _2251;
    if (_2236)
    {
        _2247 = _2228;
        _2249 = _2229;
        _2251 = _2230;
    }
    else
    {
        uint _2255 = _2160 + 6u;
        float _2271 = (dot(vec3(cbLight._m0[_2160 + 2u].xyz), vec3(_895, _896, _897)) * 0.5) + 0.5;
        float _2272 = _2271 * _2271;
        float _4499 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2273 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2274 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2247 = (((cbLight._m0[_2255].x * 0.3183098733425140380859375) * _2273) * _2274) + _2228;
        _2249 = (((cbLight._m0[_2255].y * 0.3183098733425140380859375) * _2273) * _2274) + _2229;
        _2251 = (((cbLight._m0[_2255].z * 0.3183098733425140380859375) * _2273) * _2274) + _2230;
    }
    bool _2254 = _2234.y == 0u;
    float _2292;
    float _2294;
    float _2296;
    if (_2254)
    {
        _2292 = _2247;
        _2294 = _2249;
        _2296 = _2251;
    }
    else
    {
        uint _2465 = _2160 + 7u;
        float _2481 = (dot(vec3(cbLight._m0[_2160 + 3u].xyz), vec3(_895, _896, _897)) * 0.5) + 0.5;
        float _2482 = _2481 * _2481;
        float _4515 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2483 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2484 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2292 = (((cbLight._m0[_2465].x * 0.3183098733425140380859375) * _2483) * _2484) + _2247;
        _2294 = (((cbLight._m0[_2465].y * 0.3183098733425140380859375) * _2483) * _2484) + _2249;
        _2296 = (((cbLight._m0[_2465].z * 0.3183098733425140380859375) * _2483) * _2484) + _2251;
    }
    uint _2299 = _2160 + 8u;
    float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _898) * 0.949999988079071044921875);
    float _2313 = _2312 * _2312;
    float _2314 = cbLight._m0[_2160].x + _975;
    float _2315 = cbLight._m0[_2160].y + _976;
    float _2316 = cbLight._m0[_2160].z + _977;
    float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
    float _2321 = _2320 * _2314;
    float _2322 = _2320 * _2315;
    float _2323 = _2320 * _2316;
    float _2324 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2160].xyz));
    float _4531 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _4542 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _2328 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2329 = dot(vec3(_895, _896, _897), vec3(_2321, _2322, _2323));
    float _4553 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2333 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2321, _2322, _2323));
    float _4564 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2337 = _2313 * _2313;
    float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
    float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
    float _2350 = 0.959999978542327880859375 - _1054;
    float _2352 = 0.959999978542327880859375 - _1055;
    float _2353 = 0.959999978542327880859375 - _1056;
    float _2360 = 1.0 - _2313;
    float _2371 = (0.5 / (((_2328 * ((_2327 * _2360) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2360) + _2313) * _2327))) * _2327;
    float _4575 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
    uint _2387 = _2160 + 9u;
    float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _898) * 0.949999988079071044921875);
    float _2399 = _2398 * _2398;
    float _2400 = cbLight._m0[_2200].x + _975;
    float _2401 = cbLight._m0[_2200].y + _976;
    float _2402 = cbLight._m0[_2200].z + _977;
    float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
    float _2407 = _2406 * _2400;
    float _2408 = _2406 * _2401;
    float _2409 = _2406 * _2402;
    float _2410 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2200].xyz));
    float _4586 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2414 = dot(vec3(_895, _896, _897), vec3(_2407, _2408, _2409));
    float _4597 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2418 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2407, _2408, _2409));
    float _4608 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2422 = _2399 * _2399;
    float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
    float _2440 = 1.0 - _2399;
    float _2450 = (0.5 / (((_2328 * ((_2413 * _2440) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2440) + _2399) * _2413))) * _2413;
    float _4619 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
    float _2462 = (((((_2433 * _2350) + _1057) * cbLight._m0[_2387].x) * _2452) * _2183) + ((((cbLight._m0[_2299].x * _2152) * ((_2349 * _2350) + _1057)) * _2373) * _2196);
    float _2463 = (((((_2433 * _2352) + _1059) * cbLight._m0[_2387].y) * _2452) * _2183) + ((((cbLight._m0[_2299].y * _2153) * ((_2349 * _2352) + _1059)) * _2373) * _2196);
    float _2464 = (((((_2433 * _2353) + _1060) * cbLight._m0[_2387].z) * _2452) * _2183) + ((((cbLight._m0[_2299].z * _2154) * ((_2349 * _2353) + _1060)) * _2373) * _2196);
    float _2526;
    float _2528;
    float _2530;
    if (_2236)
    {
        _2526 = _2462;
        _2528 = _2463;
        _2530 = _2464;
    }
    else
    {
        uint _2532 = _2160 + 2u;
        uint _2536 = _2160 + 10u;
        float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2532].w)) * _898) * 0.949999988079071044921875);
        float _2551 = _2550 * _2550;
        float _2552 = cbLight._m0[_2532].x + _975;
        float _2553 = cbLight._m0[_2532].y + _976;
        float _2554 = cbLight._m0[_2532].z + _977;
        float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
        float _2559 = _2558 * _2552;
        float _2560 = _2558 * _2553;
        float _2561 = _2558 * _2554;
        float _2562 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2532].xyz));
        float _4630 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2566 = dot(vec3(_895, _896, _897), vec3(_2559, _2560, _2561));
        float _4641 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2570 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_2559, _2560, _2561));
        float _4652 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2574 = _2551 * _2551;
        float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
        float _2585 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
        float _2592 = 1.0 - _2551;
        float _2602 = (0.5 / (((_2328 * ((_2565 * _2592) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2592) + _2551) * _2565))) * _2565;
        float _4663 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2604 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
        float _2605 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2526 = (((((_2585 * _2350) + _1057) * cbLight._m0[_2536].x) * _2604) * _2605) + _2462;
        _2528 = (((((_2585 * _2352) + _1059) * cbLight._m0[_2536].y) * _2604) * _2605) + _2463;
        _2530 = (((((_2585 * _2353) + _1060) * cbLight._m0[_2536].z) * _2604) * _2605) + _2464;
    }
    float _2640;
    float _2642;
    float _2644;
    if (_2254)
    {
        _2640 = _2526;
        _2642 = _2528;
        _2644 = _2530;
    }
    else
    {
        uint _2651 = _2160 + 3u;
        uint _2655 = _2160 + 11u;
        float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2651].w)) * _898) * 0.949999988079071044921875);
        float _2670 = _2669 * _2669;
        float _2671 = cbLight._m0[_2651].x + _975;
        float _2672 = cbLight._m0[_2651].y + _976;
        float _2673 = cbLight._m0[_2651].z + _977;
        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
        float _2678 = _2677 * _2671;
        float _2679 = _2677 * _2672;
        float _2680 = _2677 * _2673;
        float _2681 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2651].xyz));
        float _4679 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2685 = dot(vec3(_895, _896, _897), vec3(_2678, _2679, _2680));
        float _4690 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2689 = dot(vec3(cbLight._m0[_2651].xyz), vec3(_2678, _2679, _2680));
        float _4701 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2693 = _2670 * _2670;
        float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
        float _2704 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
        float _2711 = 1.0 - _2670;
        float _2721 = (0.5 / (((_2328 * ((_2684 * _2711) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2711) + _2670) * _2684))) * _2684;
        float _4712 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2723 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
        float _2724 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2640 = (((((_2704 * _2350) + _1057) * cbLight._m0[_2655].x) * _2723) * _2724) + _2526;
        _2642 = (((((_2704 * _2352) + _1059) * cbLight._m0[_2655].y) * _2723) * _2724) + _2528;
        _2644 = (((((_2704 * _2353) + _1060) * cbLight._m0[_2655].z) * _2723) * _2724) + _2530;
    }
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    if (_2158.y == 0u)
    {
        float _2799 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2800 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2799;
        float _2801 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2799;
        float _2802 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2799;
        uvec4 _2814 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2815 = _2814.x;
        uint _2826 = uint((float(_2814.y) * floor(float(uint(cbSceneParam._m0[85u].y * _996) / _2815))) + floor(float(uint(cbSceneParam._m0[85u].x * _995) / _2815)));
        float _2836 = (log2(_2802 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2837 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        uint _2840 = uint(isnan(14.0) ? _2837 : (isnan(_2837) ? 14.0 : min(_2837, 14.0)));
        uvec4 _2845 = texelFetch(g_lightClusterGridBuffer, int(((_2840 << 2u) + (_2826 << 6u)) >> 2u));
        uint _2846 = _2845.x;
        uint _2847 = _2814.z;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((((1u << ((_2847 >> 4u) & 15u)) + 4294967295u) & _2846) == 0u) || ((_2847 & 240u) == 0u))
        {
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
        }
        else
        {
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            uint _3106 = 0u;
            uint _3115;
            bool _3116;
            for (;;)
            {
                _3115 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3106 << 2u)) >> 2u)).x;
                _3116 = _3115 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3116)
                {
                    frontier_phi_66_pred = _3100;
                    frontier_phi_66_pred_1 = _3105;
                    frontier_phi_66_pred_2 = _3104;
                    frontier_phi_66_pred_3 = _3103;
                    frontier_phi_66_pred_4 = _3102;
                    frontier_phi_66_pred_5 = _3101;
                }
                else
                {
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    uint _3251;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3115;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    for (;;)
                    {
                        uint _3255 = uint(findLSB(_3251)) + (_3106 << 5u);
                        uint _3252 = (_3251 + 4294967295u) & _3251;
                        uint _3257 = _3255 * 48u;
                        vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 3u)).x));
                        uint _3277 = (_3255 * 48u) + 4u;
                        vec4 _3290 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 3u)).x));
                        uint _3296 = (_3255 * 48u) + 8u;
                        vec3 _3307 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3296)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3296 + 2u)).x));
                        float _3311 = _3271.x - _2800;
                        float _3312 = _3271.y - _2801;
                        float _3313 = _3271.z - _2802;
                        float _3314 = dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313));
                        float _3317 = inversesqrt(_3314);
                        float _3318 = _3317 * _3311;
                        float _3319 = _3317 * _3312;
                        float _3320 = _3317 * _3313;
                        float _3321 = dot(vec3(_1014, _1017, _1020), vec3(_3318, _3319, _3320));
                        float _3326 = 1.0 - (_3314 * _3271.w);
                        float _4738 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3327 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3328 = sqrt(_3314) * _3290.w;
                        float _3331 = 1.39999997615814208984375 / (_3328 + 1.39999997615814208984375);
                        float _3332 = _3331 * _3331;
                        float _3335 = ((1.0 - _3332) * _3321) + _3332;
                        float _3338 = _3328 * _3328;
                        float _3342 = ((isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0))) * _3327) / ((_3338 * 0.699999988079071044921875) + 1.0);
                        float _3346 = (-0.0) - _2800;
                        float _3347 = (-0.0) - _2801;
                        float _3348 = (-0.0) - _2802;
                        float _3352 = inversesqrt(dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348)));
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3363 = exp2(log2(1.0 / ((_3338 * 3.5) + 5.0)) * 0.25);
                        float _3364 = 1.0 - _1089;
                        float _3371 = sqrt(1.0 - ((1.0 - (_3364 * _3364)) * (1.0 - (_3363 * _3363))));
                        float _3372 = _3371 * _3371;
                        float _3373 = _3372 * _3372;
                        float _3374 = _3353 + _3318;
                        float _3375 = _3354 + _3319;
                        float _3376 = _3355 + _3320;
                        float _3380 = inversesqrt(dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376)));
                        float _3384 = dot(vec3(_1014, _1017, _1020), vec3(_3353, _3354, _3355));
                        float _4754 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3387 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3388 = dot(vec3(_1014, _1017, _1020), vec3(_3380 * _3374, _3380 * _3375, _3380 * _3376));
                        float _4765 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3391 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3395 = ((_3391 * _3391) * (_3373 + (-1.0))) + 1.0;
                        float _3396 = _3331 * _3372;
                        float _3397 = _3396 * _3396;
                        float _3400 = ((1.0 - _3397) * _3321) + _3397;
                        float _4776 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3401 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3402 = 1.0 - _3372;
                        float _3412 = (0.5 / (((_3401 * ((_3387 * _3402) + _3372)) + 9.9999999392252902907785028219223e-09) + (((_3401 * _3402) + _3372) * _3387))) * _3401;
                        float _4787 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3423 = (((_3373 * 3.1415927410125732421875) * (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) / ((_3395 * _3395) * ((_3338 * 2.1991131305694580078125) + 3.141590118408203125))) * _3327;
                        _3175 = (_3342 * _3290.x) + _3248;
                        _3176 = (_3342 * _3290.y) + _3249;
                        _3177 = (_3342 * _3290.z) + _3250;
                        _3172 = (_3423 * _3307.x) + _3245;
                        _3173 = (_3423 * _3307.y) + _3246;
                        _3174 = (_3423 * _3307.z) + _3247;
                        if (_3252 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3252;
                        }
                    }
                    frontier_phi_66_pred = _3172;
                    frontier_phi_66_pred_1 = _3177;
                    frontier_phi_66_pred_2 = _3176;
                    frontier_phi_66_pred_3 = _3175;
                    frontier_phi_66_pred_4 = _3174;
                    frontier_phi_66_pred_5 = _3173;
                }
                _2948 = frontier_phi_66_pred;
                _2958 = frontier_phi_66_pred_1;
                _2956 = frontier_phi_66_pred_2;
                _2954 = frontier_phi_66_pred_3;
                _2952 = frontier_phi_66_pred_4;
                _2950 = frontier_phi_66_pred_5;
                uint _3107 = _3106 + 1u;
                if (_3107 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3100 = _2948;
                    _3101 = _2950;
                    _3102 = _2952;
                    _3103 = _2954;
                    _3104 = _2956;
                    _3105 = _2958;
                    _3106 = _3107;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
        }
        uvec4 _2961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2962 = _2961.z;
        uint _2964 = (_2962 >> 8u) & 15u;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        if (((4294967295u << _2964) & _2846) == 0u)
        {
            _3068 = _2947;
            _3070 = _2949;
            _3072 = _2951;
            _3074 = _2953;
            _3076 = _2955;
            _3078 = _2957;
        }
        else
        {
            float _3093 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
            float _3094 = _3093 * _2800;
            float _3095 = _3093 * _2801;
            float _3096 = _3093 * _2802;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2964 < ((_2962 >> 12u) & 15u))
            {
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3228 = _2947;
                float _3229 = _2949;
                float _3230 = _2951;
                float _3231 = _2953;
                float _3232 = _2955;
                float _3233 = _2957;
                uint _3234 = _2964;
                uint _3243;
                bool _3244;
                for (;;)
                {
                    _3243 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3234 << 2u)) >> 2u)).x;
                    _3244 = _3243 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3244)
                    {
                        frontier_phi_77_pred = _3233;
                        frontier_phi_77_pred_1 = _3232;
                        frontier_phi_77_pred_2 = _3231;
                        frontier_phi_77_pred_3 = _3230;
                        frontier_phi_77_pred_4 = _3229;
                        frontier_phi_77_pred_5 = _3228;
                    }
                    else
                    {
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3450 = _3228;
                        float _3451 = _3229;
                        float _3452 = _3230;
                        float _3453 = _3231;
                        float _3454 = _3232;
                        float _3455 = _3233;
                        uint _3456 = _3243;
                        uint _3457;
                        vec4 _3482;
                        float _3483;
                        vec4 _3498;
                        vec3 _3510;
                        vec4 _3525;
                        vec4 _3540;
                        float _3586;
                        bool _3587;
                        for (;;)
                        {
                            uint _3467 = ((_3234 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3456));
                            _3457 = (_3456 + 4294967295u) & _3456;
                            uint _3469 = _3467 * 40u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            _3483 = _3482.w;
                            uint _3485 = (_3467 * 40u) + 4u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            uint _3500 = (_3467 * 40u) + 8u;
                            _3510 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x));
                            uint _3512 = (_3467 * 40u) + 16u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3527 = (_3467 * 40u) + 20u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3542 = (_3467 * 40u) + 24u;
                            vec4 _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3561 = (_3467 * 40u) + 28u;
                            vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            _3586 = fma(_2802, _3574.z, fma(_2801, _3574.y, _3574.x * _2800)) + _3574.w;
                            _3587 = !((fma(_2802, _3555.z, fma(_2801, _3555.y, _3555.x * _2800)) + _3555.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3587)
                            {
                                float _3614 = _3482.x - _2800;
                                float _3615 = _3482.y - _2801;
                                float _3616 = _3482.z - _2802;
                                float _3617 = dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616));
                                float _3620 = inversesqrt(_3617);
                                float _3621 = _3620 * _3614;
                                float _3622 = _3620 * _3615;
                                float _3623 = _3620 * _3616;
                                float _3627 = 1.0 - (_3617 / (_3483 * _3483));
                                float _4798 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3632 = sqrt(_3617) * _3498.w;
                                float _3634 = 1.39999997615814208984375 / (_3632 + 1.39999997615814208984375);
                                float _3635 = _3634 * _3634;
                                float _3638 = ((1.0 - _3635) * dot(vec3(_3621, _3622, _3623), vec3(_1014, _1017, _1020))) + _3635;
                                float _3641 = _3632 * _3632;
                                float _3645 = (fma(_2802, _3525.z, fma(_2801, _3525.y, _3525.x * _2800)) + _3525.w) / _3586;
                                float _3646 = (fma(_2802, _3540.z, fma(_2801, _3540.y, _3540.x * _2800)) + _3540.w) / _3586;
                                float _3650 = 1.0 - dot(vec2(_3645, _3646), vec2(_3645, _3646));
                                float _4814 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3651 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3652 = _3651 * (((isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0))) * _3628) / ((_3641 * 0.699999988079071044921875) + 1.0));
                                float _3664 = exp2(log2(1.0 / ((_3641 * 3.5) + 5.0)) * 0.25);
                                float _3665 = 1.0 - _1089;
                                float _3672 = sqrt(1.0 - ((1.0 - (_3665 * _3665)) * (1.0 - (_3664 * _3664))));
                                float _3673 = _3672 * _3672;
                                float _3674 = _3673 * _3673;
                                float _3675 = _3621 - _3094;
                                float _3676 = _3622 - _3095;
                                float _3677 = _3623 - _3096;
                                float _3681 = inversesqrt(dot(vec3(_3675, _3676, _3677), vec3(_3675, _3676, _3677)));
                                float _3685 = dot(vec3(_1014, _1017, _1020), vec3((-0.0) - _3094, (-0.0) - _3095, (-0.0) - _3096));
                                float _4825 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3688 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3689 = dot(vec3(_1014, _1017, _1020), vec3(_3681 * _3675, _3681 * _3676, _3681 * _3677));
                                float _4836 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3692 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3696 = ((_3692 * _3692) * (_3674 + (-1.0))) + 1.0;
                                float _3697 = _3634 * _3673;
                                float _3698 = _3697 * _3697;
                                float _3704 = ((1.0 - _3698) * dot(vec3(_1014, _1017, _1020), vec3(_3621, _3622, _3623))) + _3698;
                                float _4847 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3705 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3706 = 1.0 - _3673;
                                float _3716 = (0.5 / (((_3705 * ((_3688 * _3706) + _3673)) + 9.9999999392252902907785028219223e-09) + (((_3705 * _3706) + _3673) * _3688))) * _3705;
                                float _4858 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3726 = (_3651 * _3628) * (((_3674 * 3.1415927410125732421875) * (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) / ((_3696 * _3696) * ((_3641 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3652 * _3498.y;
                                frontier_phi_83_pred_1 = _3652 * _3498.x;
                                frontier_phi_83_pred_2 = _3726 * _3510.z;
                                frontier_phi_83_pred_3 = _3726 * _3510.y;
                                frontier_phi_83_pred_4 = _3726 * _3510.x;
                                frontier_phi_83_pred_5 = _3652 * _3498.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3734 = frontier_phi_83_pred;
                            _3733 = frontier_phi_83_pred_1;
                            _3732 = frontier_phi_83_pred_2;
                            _3731 = frontier_phi_83_pred_3;
                            _3730 = frontier_phi_83_pred_4;
                            _3735 = frontier_phi_83_pred_5;
                            _3440 = _3733 + _3453;
                            _3441 = _3734 + _3454;
                            _3442 = _3735 + _3455;
                            _3437 = _3730 + _3450;
                            _3438 = _3731 + _3451;
                            _3439 = _3732 + _3452;
                            if (_3457 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3457;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3442;
                        frontier_phi_77_pred_1 = _3441;
                        frontier_phi_77_pred_2 = _3440;
                        frontier_phi_77_pred_3 = _3439;
                        frontier_phi_77_pred_4 = _3438;
                        frontier_phi_77_pred_5 = _3437;
                    }
                    _3079 = frontier_phi_77_pred;
                    _3077 = frontier_phi_77_pred_1;
                    _3075 = frontier_phi_77_pred_2;
                    _3073 = frontier_phi_77_pred_3;
                    _3071 = frontier_phi_77_pred_4;
                    _3069 = frontier_phi_77_pred_5;
                    uint _3235 = _3234 + 1u;
                    if (_3235 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3228 = _3069;
                        _3229 = _3071;
                        _3230 = _3073;
                        _3231 = _3075;
                        _3232 = _3077;
                        _3233 = _3079;
                        _3234 = _3235;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3073;
                frontier_phi_58_59_ladder_1 = _3079;
                frontier_phi_58_59_ladder_2 = _3077;
                frontier_phi_58_59_ladder_3 = _3075;
                frontier_phi_58_59_ladder_4 = _3071;
                frontier_phi_58_59_ladder_5 = _3069;
            }
            else
            {
                frontier_phi_58_59_ladder = _2951;
                frontier_phi_58_59_ladder_1 = _2957;
                frontier_phi_58_59_ladder_2 = _2955;
                frontier_phi_58_59_ladder_3 = _2953;
                frontier_phi_58_59_ladder_4 = _2949;
                frontier_phi_58_59_ladder_5 = _2947;
            }
            _3068 = frontier_phi_58_59_ladder_5;
            _3070 = frontier_phi_58_59_ladder_4;
            _3072 = frontier_phi_58_59_ladder;
            _3074 = frontier_phi_58_59_ladder_3;
            _3076 = frontier_phi_58_59_ladder_2;
            _3078 = frontier_phi_58_59_ladder_1;
        }
        float _3083 = isnan(1.0) ? _1073 : (isnan(_1073) ? 1.0 : min(_1073, 1.0));
        _2859 = (_3083 * _3074) + _2292;
        _2861 = (_3083 * _3076) + _2294;
        _2863 = (_3083 * _3078) + _2296;
        _2865 = ((_3068 * _1057) * _3083) + _2640;
        _2867 = ((_3070 * _1059) * _3083) + _2642;
        _2869 = ((_3072 * _1060) * _3083) + _2644;
    }
    else
    {
        _2859 = _2292;
        _2861 = _2294;
        _2863 = _2296;
        _2865 = _2640;
        _2867 = _2642;
        _2869 = _2644;
    }
    float _4874 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _4885 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _4896 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _2886 = ((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2859 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1073))) + ((_2865 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1911)) * cbPerFrame._m0[3u].x);
    float _2887 = ((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2861 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1073))) + ((_2867 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1911)) * cbPerFrame._m0[3u].x);
    float _2888 = ((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2863 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1073))) + ((_2869 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1911)) * cbPerFrame._m0[3u].x);
    uint _2889 = _284 + 6u;
    float _2897 = _995 / cbSceneParam._m0[86u].x;
    float _2898 = _996 / cbSceneParam._m0[86u].y;
    vec4 _2912 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, (log2((isnan(cbSceneParam._m0[77u].w) ? _917 : (isnan(_917) ? cbSceneParam._m0[77u].w : min(_917, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2914 = _2912.x;
    float _2915 = _2912.y;
    float _2916 = _2912.z;
    float _2917 = _2912.w;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    if (_917 > cbSceneParam._m0[78u].w)
    {
        float _2972 = isnan(_917) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _917 : min(cbSceneParam._m0[80u].w, _917));
        float _2973 = _2972 / _917;
        float _2984 = _2973 * _968;
        float _2985 = _969 * _2973;
        float _2986 = (-0.0) - _2985;
        float _2988 = _2973 * _970;
        float _2990 = (cbSceneParam._m0[77u].w * _2986) / _2972;
        float _2991 = _2990 + cbSceneParam._m0[79u].w;
        float _2992 = cbSceneParam._m0[79u].w - _2985;
        float _2998 = sqrt(((_2984 * _2984) + (_2985 * _2985)) + (_2988 * _2988));
        float _3001 = (1.0 - (cbSceneParam._m0[77u].w / _2972)) * _2998;
        float _3006 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3008 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3185;
        if (abs((_2986 - _2990) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3185 = ((((_2991 > 0.0) ? exp2(_3006 * _2991) : (2.0 - exp2(_3008 * _2991))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3001;
        }
        else
        {
            float _3129 = 1.0 / cbSceneParam._m0[80u].x;
            float _3130 = isnan(_2992) ? _2991 : (isnan(_2991) ? _2992 : max(_2991, _2992));
            float _3131 = isnan(_2992) ? _2991 : (isnan(_2991) ? _2992 : min(_2991, _2992));
            float _3140 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : min(_3130, 0.0));
            float _3141 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : min(_3131, 0.0));
            _3185 = ((abs(_2998 / _2986) * cbSceneParam._m0[80u].y) * ((((_3140 - _3141) * 2.0) - ((exp2(_3006 * (isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0)))) - exp2(_3006 * (isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0))))) * _3129)) - ((exp2(_3008 * _3140) - exp2(_3008 * _3141)) * _3129))) + (_3001 * cbSceneParam._m0[80u].z);
        }
        vec4 _3187 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, 1.0), 0.0);
        float _3196 = exp2((_3185 * (-1.44269502162933349609375)) * (1.0 - _3187.w));
        float _3197 = log2(_3196);
        float _3213 = log2(_2917);
        _3010 = (exp2(_3213 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3197 * cbSceneParam._m0[78u].x)) * _3187.x) / cbSceneParam._m0[78u].x)) + _2914;
        _3012 = (exp2(_3213 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3197 * cbSceneParam._m0[78u].y)) * _3187.y) / cbSceneParam._m0[78u].y)) + _2915;
        _3014 = (exp2(_3213 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3197 * cbSceneParam._m0[78u].z)) * _3187.z) / cbSceneParam._m0[78u].z)) + _2916;
        _3016 = _3196 * _2917;
    }
    else
    {
        _3010 = _2914;
        _3012 = _2915;
        _3014 = _2916;
        _3016 = _2917;
    }
    bool _3223;
    vec4 _3026;
    vec4 _3048;
    float _3050;
    float _3054;
    float _3055;
    float _3056;
    float _3057;
    bool _3067;
    for (;;)
    {
        _3026 = cbMatDynParam._m0[0u];
        float _3028 = roundEven(_3026.y);
        bool _3029 = _3028 == 3.0;
        float _3030 = log2(_3016);
        float _3037 = exp2(_3030 * cbSceneParam._m0[78u].x) * _2886;
        float _3038 = exp2(_3030 * cbSceneParam._m0[78u].y) * _2887;
        float _3039 = exp2(_3030 * cbSceneParam._m0[78u].z) * _2888;
        float _3046 = _984 + (-0.5);
        _3048 = cbMtdParam._m0[1u];
        _3050 = _3048.y * _3046;
        float _3053 = (_3028 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3054 = _3053 * (_3029 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3010)));
        _3055 = _3053 * (_3029 ? _3038 : (_3038 + (cbSceneParam._m0[72u].w * _3012)));
        _3056 = _3053 * (_3029 ? _3039 : (_3039 + (cbSceneParam._m0[72u].w * _3014)));
        _3057 = _3046 * 0.999000012874603271484375;
        _3067 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3067)
        {
            if ((cbInstanceData._m0[_284 + 7u].x + _3057) < 0.5)
            {
                _3223 = true;
                break;
            }
        }
        uint _3164 = _1033 + uint(_3026.w);
        if ((cbInstanceData._m0[_3164].w < 1.0) && ((cbInstanceData._m0[_3164].w + _3057) < 0.5))
        {
            _3223 = true;
            break;
        }
        if ((_3050 + 1.0) < _3048.x)
        {
            _3223 = true;
            break;
        }
        _3223 = false;
        break;
    }
    float _3428;
    if (_3223)
    {
        discard_state = true;
        _3428 = 0.0;
    }
    else
    {
        _3428 = cbInstanceData._m0[_2889].w;
    }
    SV_Target.x = _3054;
    SV_Target.y = _3055;
    SV_Target.z = _3056;
    SV_Target.w = _3428;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2889].w;
    discard_exit();
}


