#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1402;
float _4064;
float _4065;
float _4066;
float _4067;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4076 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4087 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4098 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _436 = _434.x;
    float _448 = dot(vec4(_436, _434.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _465 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_436 - _448) * cbMtdParam._m0[23u].w) + _448) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4109 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _476 = (_334.x * cbMtdParam._m0[9u].x) * ((_466 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365);
    float _477 = (_334.y * cbMtdParam._m0[9u].y) * ((_466 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366);
    float _478 = (_334.z * cbMtdParam._m0[9u].z) * ((_466 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367);
    float _482 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _476;
    float _485 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _477;
    float _488 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _478;
    float _496 = (((_476 - _482) * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) + _482) * 4.55000019073486328125;
    float _498 = (((_477 - _485) * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) + _485) * 4.55000019073486328125;
    float _500 = (((_478 - _488) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) + _488) * 4.55000019073486328125;
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _297) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _298) + cbTextureTilingScale._m0[14u].w));
    vec4 _539 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _585 = _583.x;
    float _586 = _583.y;
    float _587 = _583.z;
    float _596 = ((_566.z - _587) * _466) + _587;
    float _599 = ((((_566.x - _585) * _466) + _585) * 2.0) + (-1.0);
    float _600 = ((((_566.y - _586) * _466) + _586) * 2.0) + (-1.0);
    float _601 = dot(vec2(_599, _600), vec2(_599, _600));
    float _4120 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _606 = sqrt(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _638 = (_599 + ((((_539.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_626.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _639 = (_600 + ((((_539.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_626.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _642 = fma(_606, _245, fma(_639, _252, _638 * _238));
    float _645 = fma(_606, _246, fma(_639, _253, _638 * _239));
    float _648 = fma(_606, _247, fma(_639, _254, _638 * _240));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _681 = _679.x;
    float _682 = 1.0 - _681;
    float _691 = (cbMtdParam._m0[19u].x + dot(vec4(_652 * _642, _652 * _645, _652 * _648, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_681 - _682) * cbMtdParam._m0[24u].z) + _682) * cbMtdParam._m0[21u].z);
    float _4131 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _692 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _699 = (_692 * ((_519.x * cbMtdParam._m0[18u].x) - _496)) + _496;
    float _700 = (_692 * ((_519.y * cbMtdParam._m0[18u].y) - _498)) + _498;
    float _701 = (_692 * ((_519.z * cbMtdParam._m0[18u].z) - _500)) + _500;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _727 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _729 = _727.x;
    float _746 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _729) * _466) + _729;
    float _750 = ((_713.x - _746) * cbMtdParam._m0[19u].z) + _746;
    float _752 = _750 - (_750 * _692);
    float _757 = (((_539.z - _596) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _596;
    float _761 = ((_626.z - _757) * cbMtdParam._m0[19u].w) + _757;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _781 = (_774.x * 2.0) + (-1.0);
    float _782 = (_774.y * 2.0) + (-1.0);
    float _783 = dot(vec2(_781, _782), vec2(_781, _782));
    float _4142 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _791 = ((_774.z - _761) * _692) + _761;
    float _801 = ((sqrt(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) - _606) * _692) + _606;
    float _804 = (((_781 - _638) * _692) + _638) + (cbMtdParam._m0[21u].x * _638);
    float _805 = (((_782 - _639) * _692) + _639) + (cbMtdParam._m0[21u].x * _639);
    float _807 = cbMtdParam._m0[22u].x + _626.w;
    float _810 = fma(_801, _245, fma(_805, _252, _804 * _238));
    float _813 = fma(_801, _246, fma(_805, _253, _804 * _239));
    float _816 = fma(_801, _247, fma(_805, _254, _804 * _240));
    float _820 = inversesqrt(dot(vec3(_810, _813, _816), vec3(_810, _813, _816)));
    float _821 = _820 * _810;
    float _822 = _820 * _813;
    float _823 = _820 * _816;
    float _4153 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _824 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4175 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _4186 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _4197 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _4208 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _829 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _843 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _894 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _884);
    float _895 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _884);
    float _896 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _884);
    float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
    float _901 = _894 * _900;
    float _902 = _895 * _900;
    float _903 = _896 * _900;
    vec4 _908 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _910 = _908.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1082 = sqrt(((_894 * _894) + (_895 * _895)) + (_896 * _896));
        float _1088 = (cbMatDynParam._m0[5u].x * _1082) + cbMatDynParam._m0[5u].y;
        float _4219 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1093 = (cbMatDynParam._m0[5u].z * _1082) + cbMatDynParam._m0[5u].w;
        float _4230 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) - _1089)) + _1089) < ((_910 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _921 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _922 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _940 = fma(_823, cbSceneParam._m0[5u].z, fma(_822, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _821));
    float _943 = fma(_823, cbSceneParam._m0[6u].z, fma(_822, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _821));
    float _946 = fma(_823, cbSceneParam._m0[7u].z, fma(_822, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _821));
    uint _959 = _278 + 9u;
    uint _960 = _959 + uint(cbMatDynParam._m0[0u].w);
    float _966 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * cbInstanceData._m0[_960].x;
    float _967 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * cbInstanceData._m0[_960].y;
    float _968 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * cbInstanceData._m0[_960].z;
    float _4241 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _4263 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _972 = 1.0 - _829;
    float _973 = _969 * _972;
    float _974 = _970 * _972;
    float _975 = _971 * _972;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _829;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _829;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _829;
    float _983 = _980 + 0.039999999105930328369140625;
    float _985 = _981 + 0.039999999105930328369140625;
    float _986 = _982 + 0.039999999105930328369140625;
    vec4 _995 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _921, cbSceneParam._m0[86u].y * _922));
    float _999 = ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * TEXCOORD_5.w) * _995.x;
    float _1000 = dot(vec3(_821, _822, _823), vec3(_901, _902, _903));
    float _1003 = _1000 * 2.0;
    float _1007 = (_1003 * _821) - _901;
    float _1008 = (_1003 * _822) - _902;
    float _1009 = (_1003 * _823) - _903;
    float _1013 = abs(dot(vec3(_901, _902, _903), vec3(_821, _822, _823)));
    float _4274 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1015 = sqrt(_824);
    float _1028 = exp2((_1015 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1015 * 3.0));
    float _1034 = (1.0 - _1028) * ((_1015 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1035 = _1028 * _1015;
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1401;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1126 = fma(_1071, cbModelParam._m0[26u].z, fma(_1067, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063));
        float _1130 = fma(_1071, cbModelParam._m0[27u].z, fma(_1067, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063));
        float _1134 = fma(_1071, cbModelParam._m0[28u].z, fma(_1067, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063));
        float _1159 = _1063 + _821;
        float _1160 = _1067 + _822;
        float _1161 = _1071 + _823;
        float _1171 = fma(_1161, cbModelParam._m0[26u].z, fma(_1160, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1159)) - _1126;
        float _1172 = fma(_1161, cbModelParam._m0[27u].z, fma(_1160, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1159)) - _1130;
        float _1173 = fma(_1161, cbModelParam._m0[28u].z, fma(_1160, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1159)) - _1134;
        float _1177 = inversesqrt(dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173)));
        float _1190 = ((_1177 * _1171) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1126 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1177 * _1172) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1130 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1177 * _1173) / cbModelParam._m0[34u].z) + ((((((_1134 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        float _1229 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1195.x + (-0.5));
        float _1231 = _1229 * (_1195.y + (-0.5));
        float _1232 = _1229 * (_1195.z + (-0.5));
        float _1239 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1202.x + (-0.5));
        float _1241 = _1239 * (_1202.y + (-0.5));
        float _1242 = _1239 * (_1202.z + (-0.5));
        float _1249 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1209.x + (-0.5));
        float _1251 = _1249 * (_1209.y + (-0.5));
        float _1252 = _1249 * (_1209.z + (-0.5));
        float _1259 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1216.x + (-0.5));
        float _1261 = _1259 * (_1216.y + (-0.5));
        float _1262 = _1259 * (_1216.z + (-0.5));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = _1230 * 0.5;
        float _1267 = _1240 * 0.5;
        float _1268 = _1250 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1283 = (dot(vec3(_821, _822, _823), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1293 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4322 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1295 + 1.0))) + _1300) * _1263;
        float _1310 = _1231 * 0.5;
        float _1311 = _1241 * 0.5;
        float _1312 = _1251 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_821, _822, _823), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4355 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1337 + 1.0))) + _1342) * _1264;
        float _1352 = _1232 * 0.5;
        float _1353 = _1242 * 0.5;
        float _1354 = _1252 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_821, _822, _823), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4388 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1379 + 1.0))) + _1384) * _1265;
        _1401 = _1232;
        _1403 = _1231;
        _1404 = _1230;
        _1405 = _1242;
        _1406 = _1241;
        _1407 = _1240;
        _1408 = _1252;
        _1409 = _1251;
        _1410 = _1250;
        _1411 = _1265;
        _1412 = _1264;
        _1413 = _1263;
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    }
    else
    {
        _1401 = _1402;
        _1403 = _1402;
        _1404 = _1402;
        _1405 = _1402;
        _1406 = _1402;
        _1407 = _1402;
        _1408 = _1402;
        _1409 = _1402;
        _1410 = _1402;
        _1411 = _1402;
        _1412 = _1402;
        _1413 = _1402;
        _1414 = 0.0;
        _1415 = 0.0;
        _1416 = 0.0;
    }
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1444 = fma(_1071, cbModelParam._m0[30u].z, fma(_1067, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063));
        float _1448 = fma(_1071, cbModelParam._m0[31u].z, fma(_1067, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063));
        float _1452 = fma(_1071, cbModelParam._m0[32u].z, fma(_1067, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063));
        float _1475 = _1063 + _821;
        float _1476 = _1067 + _822;
        float _1477 = _1071 + _823;
        float _1487 = fma(_1477, cbModelParam._m0[30u].z, fma(_1476, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1475)) - _1444;
        float _1488 = fma(_1477, cbModelParam._m0[31u].z, fma(_1476, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1475)) - _1448;
        float _1489 = fma(_1477, cbModelParam._m0[32u].z, fma(_1476, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1475)) - _1452;
        float _1493 = inversesqrt(dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489)));
        float _1506 = ((_1493 * _1487) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1444 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1493 * _1488) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1448 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1493 * _1489) / cbModelParam._m0[35u].z) + ((((((_1452 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        float _1543 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1510.x + (-0.5));
        float _1545 = _1543 * (_1510.y + (-0.5));
        float _1546 = _1543 * (_1510.z + (-0.5));
        float _1553 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1517.x + (-0.5));
        float _1555 = _1553 * (_1517.y + (-0.5));
        float _1556 = _1553 * (_1517.z + (-0.5));
        float _1563 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1524.x + (-0.5));
        float _1565 = _1563 * (_1524.y + (-0.5));
        float _1566 = _1563 * (_1524.z + (-0.5));
        float _1573 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1531.x + (-0.5));
        float _1575 = _1573 * (_1531.y + (-0.5));
        float _1576 = _1573 * (_1531.z + (-0.5));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = _1544 * 0.5;
        float _1581 = _1554 * 0.5;
        float _1582 = _1564 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_821, _822, _823), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4451 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1607 + 1.0))) + _1612) * _1577;
        float _1622 = _1545 * 0.5;
        float _1623 = _1555 * 0.5;
        float _1624 = _1565 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_821, _822, _823), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4484 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1649 + 1.0))) + _1654) * _1578;
        float _1664 = _1546 * 0.5;
        float _1665 = _1556 * 0.5;
        float _1666 = _1566 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_821, _822, _823), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4517 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1691 + 1.0))) + _1696) * _1579;
        _1713 = _1546;
        _1714 = _1545;
        _1715 = _1544;
        _1716 = _1556;
        _1717 = _1555;
        _1718 = _1554;
        _1719 = _1566;
        _1720 = _1565;
        _1721 = _1564;
        _1722 = _1579;
        _1723 = _1578;
        _1724 = _1577;
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
    }
    else
    {
        _1713 = _1402;
        _1714 = _1402;
        _1715 = _1402;
        _1716 = _1402;
        _1717 = _1402;
        _1718 = _1402;
        _1719 = _1402;
        _1720 = _1402;
        _1721 = _1402;
        _1722 = _1402;
        _1723 = _1402;
        _1724 = _1402;
        _1725 = 0.0;
        _1726 = 0.0;
        _1727 = 0.0;
    }
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1414)) + _1414;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1415)) + _1415;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1416)) + _1416;
    float _1760 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1737));
    float _1781 = _1007 * 0.5;
    float _1782 = _1008 * 0.5;
    float _1783 = _1009 * 0.5;
    float _1784 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1787 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1790 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1824;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1797 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1401, _1405, _1408, _1411));
        float _1801 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1805 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1404, _1407, _1410, _1413));
        float _1812 = dot(vec4(cbModelParam._m0[39u]), vec4(_1781, _1782, _1783, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1835;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1826 = dot(vec4(cbModelParam._m0[40u]), vec4(_1781, _1782, _1783, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1826) ? 0.0 : (isnan(0.0) ? _1826 : max(0.0, _1826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1839 = (_1835 * cbModelParam._m0[1u].x) + (_1824 * (1.0 - cbModelParam._m0[1u].x));
    float _1849 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _824);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1849 : min(cbModelParam._m0[25u].z, _1849));
    float _1930;
    float _1932;
    float _1934;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1897 = fma(_1071, cbModelParam._m0[13u].z, fma(_1067, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063)) + cbModelParam._m0[13u].w;
        float _1901 = fma(_1071, cbModelParam._m0[14u].z, fma(_1067, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063)) + cbModelParam._m0[14u].w;
        float _1905 = fma(_1071, cbModelParam._m0[15u].z, fma(_1067, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063)) + cbModelParam._m0[15u].w;
        float _1908 = fma(_1009, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007));
        float _1911 = fma(_1009, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007));
        float _1914 = fma(_1009, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007));
        float _1942;
        if (_1908 > 0.0)
        {
            _1942 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1942 = frontier_phi_17_15_ladder;
        }
        float _2113;
        if (_1911 > 0.0)
        {
            _2113 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2113 = frontier_phi_26_22_ladder;
        }
        float _2408;
        if (_1914 > 0.0)
        {
            _2408 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2408 = frontier_phi_38_33_ladder;
        }
        float _2410 = isnan(_2113) ? _1942 : (isnan(_1942) ? _2113 : min(_1942, _2113));
        float _2411 = isnan(_2408) ? _2410 : (isnan(_2410) ? _2408 : min(_2410, _2408));
        float _2415 = (_2411 * _1908) + _1897;
        float _2416 = (_2411 * _1911) + _1901;
        float _2417 = (_2411 * _1914) + _1905;
        float _2418 = _2411 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2418;
        float _2422 = _2418 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 > _2422) || ((_2416 < _2420) || ((_2415 < _2420) || (_2415 > _2422))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2562 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2417, cbModelParam._m0[9u].z, fma(_2416, cbModelParam._m0[9u].y, _2415 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2417, cbModelParam._m0[10u].z, fma(_2416, cbModelParam._m0[10u].y, _2415 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2417, cbModelParam._m0[11u].z, fma(_2416, cbModelParam._m0[11u].y, _2415 * cbModelParam._m0[11u].x))), _1850);
            frontier_phi_16_38_ladder = _2562.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2562.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2562.x * cbModelParam._m0[1u].y;
        }
        _1930 = frontier_phi_16_38_ladder_2;
        _1932 = frontier_phi_16_38_ladder_1;
        _1934 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1918 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1007, _1008, _1009), _1850);
        _1930 = _1918.x * cbModelParam._m0[1u].y;
        _1932 = _1918.y * cbModelParam._m0[1u].y;
        _1934 = _1918.z * cbModelParam._m0[1u].y;
    }
    float _1938 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _824);
    float _1939 = isnan(_1938) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1938 : min(cbModelParam._m0[25u].w, _1938));
    float _2028;
    float _2030;
    float _2032;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1992 = fma(_1071, cbModelParam._m0[21u].z, fma(_1067, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063)) + cbModelParam._m0[21u].w;
        float _1996 = fma(_1071, cbModelParam._m0[22u].z, fma(_1067, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063)) + cbModelParam._m0[22u].w;
        float _2000 = fma(_1071, cbModelParam._m0[23u].z, fma(_1067, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063)) + cbModelParam._m0[23u].w;
        float _2003 = fma(_1009, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007));
        float _2006 = fma(_1009, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007));
        float _2009 = fma(_1009, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007));
        float _2118;
        if (_2003 > 0.0)
        {
            _2118 = abs((1.0 - _1992) / _2003);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1992 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2118 = frontier_phi_28_24_ladder;
        }
        float _2435;
        if (_2006 > 0.0)
        {
            _2435 = abs((1.0 - _1996) / _2006);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1996 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2435 = frontier_phi_40_35_ladder;
        }
        float _2773;
        if (_2009 > 0.0)
        {
            _2773 = abs((1.0 - _2000) / _2009);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2000 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2773 = frontier_phi_50_47_ladder;
        }
        float _2775 = isnan(_2435) ? _2118 : (isnan(_2118) ? _2435 : min(_2118, _2435));
        float _2776 = isnan(_2773) ? _2775 : (isnan(_2775) ? _2773 : min(_2775, _2773));
        float _2780 = (_2776 * _2003) + _1992;
        float _2781 = (_2776 * _2006) + _1996;
        float _2782 = (_2776 * _2009) + _2000;
        float _2783 = _2776 * 9.9999997473787516355514526367188e-05;
        float _2784 = (-1.0) - _2783;
        float _2786 = _2783 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2782 > _2786) || ((_2782 < _2784) || ((_2781 > _2786) || ((_2781 < _2784) || ((_2780 < _2784) || (_2780 > _2786))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2782, cbModelParam._m0[17u].z, fma(_2781, cbModelParam._m0[17u].y, _2780 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2782, cbModelParam._m0[18u].z, fma(_2781, cbModelParam._m0[18u].y, _2780 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2782, cbModelParam._m0[19u].z, fma(_2781, cbModelParam._m0[19u].y, _2780 * cbModelParam._m0[19u].x))), _1939);
            frontier_phi_25_50_ladder = _2904.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2904.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2904.x * cbModelParam._m0[1u].z;
        }
        _2028 = frontier_phi_25_50_ladder_2;
        _2030 = frontier_phi_25_50_ladder_1;
        _2032 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2012 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1007, _1008, _1009), _1939);
        _2028 = _2012.x * cbModelParam._m0[1u].z;
        _2030 = _2012.y * cbModelParam._m0[1u].z;
        _2032 = _2012.z * cbModelParam._m0[1u].z;
    }
    float _2045 = (((_1034 * _983) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2028 - _1930)) + _1930);
    float _2047 = (((_1034 * _985) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2030 - _1932)) + _1932);
    float _2049 = (((_1034 * _986) + _1035) * _999) * ((cbModelParam._m0[1u].w * (_2032 - _1934)) + _1934);
    float _2052 = fma(_2049, cbSceneParam._m0[89u].z, fma(_2047, cbSceneParam._m0[89u].y, _2045 * cbSceneParam._m0[89u].x));
    float _2055 = fma(_2049, cbSceneParam._m0[90u].z, fma(_2047, cbSceneParam._m0[90u].y, _2045 * cbSceneParam._m0[90u].x));
    float _2058 = fma(_2049, cbSceneParam._m0[91u].z, fma(_2047, cbSceneParam._m0[91u].y, _2045 * cbSceneParam._m0[91u].x));
    float _2092 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2096 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2100 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2104 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2105 = _2092 / _2104;
    float _2106 = _2096 / _2104;
    float _2107 = _2100 / _2104;
    float _2254;
    float _2255;
    float _2256;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2134 = ((uint(_2107 > cbSceneParam._m0[59u].y) + uint(_2107 > cbSceneParam._m0[59u].x)) + uint(_2107 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2135 = _2134 + 43u;
        uint _2143 = _2134 + 44u;
        uint _2151 = _2134 + 45u;
        uint _2159 = _2134 + 46u;
        float _2170 = fma(_2104, cbSceneParam._m0[_2135].w, fma(_2100, cbSceneParam._m0[_2135].z, fma(_2096, cbSceneParam._m0[_2135].y, _2092 * cbSceneParam._m0[_2135].x)));
        float _2174 = fma(_2104, cbSceneParam._m0[_2143].w, fma(_2100, cbSceneParam._m0[_2143].z, fma(_2096, cbSceneParam._m0[_2143].y, _2092 * cbSceneParam._m0[_2143].x)));
        float _2182 = fma(_2104, cbSceneParam._m0[_2159].w, fma(_2100, cbSceneParam._m0[_2159].z, fma(_2096, cbSceneParam._m0[_2159].y, _2092 * cbSceneParam._m0[_2159].x)));
        float _2187 = cbSceneParam._m0[33u].z * _2182;
        float _2189 = cbSceneParam._m0[33u].w * _2182;
        float _2192 = fma(_2104, cbSceneParam._m0[_2151].w, fma(_2100, cbSceneParam._m0[_2151].z, fma(_2096, cbSceneParam._m0[_2151].y, _2092 * cbSceneParam._m0[_2151].x))) / _2182;
        float _2240 = (cbSceneParam._m0[33u].x - sqrt(((_2106 * _2106) + (_2105 * _2105)) + (_2107 * _2107))) * cbSceneParam._m0[33u].y;
        float _4643 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2247 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2187 + _2170) / _2182, (_2189 + _2174) / _2182), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2189 + _2170) / _2182, (_2174 - _2187) / _2182), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 - _2187) / _2182, (_2174 - _2189) / _2182), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 - _2189) / _2182, (_2187 + _2174) / _2182), _2192), 0.0)).x), vec4(0.25)));
        _2254 = 1.0 - (_2247 * cbSceneParam._m0[34u].x);
        _2255 = 1.0 - (_2247 * cbSceneParam._m0[34u].y);
        _2256 = 1.0 - (_2247 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2254 = 1.0;
        _2255 = 1.0;
        _2256 = 1.0;
    }
    float _2320;
    float _2322;
    float _2324;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2308 = fma(_2104, cbSceneParam._m0[63u].w, fma(_2100, cbSceneParam._m0[63u].z, fma(_2096, cbSceneParam._m0[63u].y, _2092 * cbSceneParam._m0[63u].x)));
        float _2309 = fma(_2104, cbSceneParam._m0[60u].w, fma(_2100, cbSceneParam._m0[60u].z, fma(_2096, cbSceneParam._m0[60u].y, _2092 * cbSceneParam._m0[60u].x))) / _2308;
        float _2310 = fma(_2104, cbSceneParam._m0[61u].w, fma(_2100, cbSceneParam._m0[61u].z, fma(_2096, cbSceneParam._m0[61u].y, _2092 * cbSceneParam._m0[61u].x))) / _2308;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2309 >= cbSceneParam._m0[64u].x) && (_2310 >= cbSceneParam._m0[64u].y)) && (_2309 <= cbSceneParam._m0[64u].z)) && (_2310 <= cbSceneParam._m0[64u].w))
        {
            float _2448 = fma(_2104, cbSceneParam._m0[62u].w, fma(_2100, cbSceneParam._m0[62u].z, fma(_2096, cbSceneParam._m0[62u].y, _2092 * cbSceneParam._m0[62u].x))) / _2308;
            float _2452 = isnan(cbSceneParam._m0[41u].w) ? _2448 : (isnan(_2448) ? cbSceneParam._m0[41u].w : max(_2448, cbSceneParam._m0[41u].w));
            float _2495 = (cbSceneParam._m0[33u].x - sqrt(((_2106 * _2106) + (_2105 * _2105)) + (_2107 * _2107))) * cbSceneParam._m0[33u].y;
            float _4659 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
            float _2502 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2309, cbSceneParam._m0[33u].w + _2310), _2452), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2309, _2310 - cbSceneParam._m0[33u].z), _2452), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2309 - cbSceneParam._m0[33u].z, _2310 - cbSceneParam._m0[33u].w), _2452), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2309 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2310), _2452), 0.0)).x), vec4(0.25)));
            float _2506 = 1.0 - (_2502 * cbSceneParam._m0[34u].x);
            float _2507 = 1.0 - (_2502 * cbSceneParam._m0[34u].y);
            float _2508 = 1.0 - (_2502 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2508) ? _2256 : (isnan(_2256) ? _2508 : min(_2256, _2508));
            frontier_phi_37_36_ladder_1 = isnan(_2507) ? _2255 : (isnan(_2255) ? _2507 : min(_2255, _2507));
            frontier_phi_37_36_ladder_2 = isnan(_2506) ? _2254 : (isnan(_2254) ? _2506 : min(_2254, _2506));
        }
        else
        {
            frontier_phi_37_36_ladder = _2256;
            frontier_phi_37_36_ladder_1 = _2255;
            frontier_phi_37_36_ladder_2 = _2254;
        }
        _2320 = frontier_phi_37_36_ladder_2;
        _2322 = frontier_phi_37_36_ladder_1;
        _2324 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2320 = _2254;
        _2322 = _2255;
        _2324 = _2256;
    }
    uvec4 _2329 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2331 = _2329.x * 14u;
    uint _2332 = _2331 + 13u;
    float _2339 = _999 + (-1.0);
    float _2344 = (cbLight._m0[_2332].x * _2339) + 1.0;
    float _2345 = (cbLight._m0[_2332].y * _2339) + 1.0;
    float _2346 = (cbLight._m0[_2332].z * _2339) + 1.0;
    float _2347 = (cbLight._m0[_2332].w * _2339) + 1.0;
    uint _2348 = _2331 + 5u;
    float _2354 = isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0));
    uint _2358 = _2331 + 4u;
    float _2367 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
    uint _2371 = _2331 | 1u;
    float _2382 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_821, _822, _823));
    float _2385 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_821, _822, _823));
    float _4695 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _4706 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2390 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * 0.3183098733425140380859375;
    float _2392 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * 0.3183098733425140380859375;
    float _2399 = ((cbLight._m0[_2348].x * _2354) * _2392) + (((cbLight._m0[_2358].x * _2320) * _2367) * _2390);
    float _2400 = ((_2354 * cbLight._m0[_2348].y) * _2392) + (((cbLight._m0[_2358].y * _2322) * _2367) * _2390);
    float _2401 = ((_2354 * cbLight._m0[_2348].z) * _2392) + (((cbLight._m0[_2358].z * _2324) * _2367) * _2390);
    uvec4 _2405 = floatBitsToUint(cbLight._m0[_2331 + 12u]);
    bool _2407 = _2405.x == 0u;
    float _2509;
    float _2511;
    float _2513;
    if (_2407)
    {
        _2509 = _2399;
        _2511 = _2400;
        _2513 = _2401;
    }
    else
    {
        uint _2517 = _2331 + 6u;
        float _2533 = (dot(vec3(cbLight._m0[_2331 + 2u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2534 = _2533 * _2533;
        float _4717 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2535 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2536 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2509 = (((cbLight._m0[_2517].x * 0.3183098733425140380859375) * _2535) * _2536) + _2399;
        _2511 = (((cbLight._m0[_2517].y * 0.3183098733425140380859375) * _2535) * _2536) + _2400;
        _2513 = (((cbLight._m0[_2517].z * 0.3183098733425140380859375) * _2535) * _2536) + _2401;
    }
    bool _2516 = _2405.y == 0u;
    float _2571;
    float _2573;
    float _2575;
    if (_2516)
    {
        _2571 = _2509;
        _2573 = _2511;
        _2575 = _2513;
    }
    else
    {
        uint _2744 = _2331 + 7u;
        float _2760 = (dot(vec3(cbLight._m0[_2331 + 3u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2761 = _2760 * _2760;
        float _4733 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2762 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2763 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
        _2571 = (((cbLight._m0[_2744].x * 0.3183098733425140380859375) * _2762) * _2763) + _2509;
        _2573 = (((cbLight._m0[_2744].y * 0.3183098733425140380859375) * _2762) * _2763) + _2511;
        _2575 = (((cbLight._m0[_2744].z * 0.3183098733425140380859375) * _2762) * _2763) + _2513;
    }
    uint _2578 = _2331 + 8u;
    float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _824) * 0.949999988079071044921875);
    float _2592 = _2591 * _2591;
    float _2593 = cbLight._m0[_2331].x + _901;
    float _2594 = cbLight._m0[_2331].y + _902;
    float _2595 = cbLight._m0[_2331].z + _903;
    float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
    float _2600 = _2599 * _2593;
    float _2601 = _2599 * _2594;
    float _2602 = _2599 * _2595;
    float _2603 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2331].xyz));
    float _4749 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2606 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
    float _4760 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _2607 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
    float _2608 = dot(vec3(_821, _822, _823), vec3(_2600, _2601, _2602));
    float _4771 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2611 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
    float _2612 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2600, _2601, _2602));
    float _4782 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2616 = _2592 * _2592;
    float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
    float _2628 = exp2(log2(1.0 - (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * 5.0);
    float _2629 = 0.959999978542327880859375 - _980;
    float _2631 = 0.959999978542327880859375 - _981;
    float _2632 = 0.959999978542327880859375 - _982;
    float _2639 = 1.0 - _2592;
    float _2650 = (0.5 / (((_2607 * ((_2606 * _2639) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2607 * _2639) + _2592) * _2606))) * _2606;
    float _4793 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2652 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
    uint _2666 = _2331 + 9u;
    float _2677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _824) * 0.949999988079071044921875);
    float _2678 = _2677 * _2677;
    float _2679 = cbLight._m0[_2371].x + _901;
    float _2680 = cbLight._m0[_2371].y + _902;
    float _2681 = cbLight._m0[_2371].z + _903;
    float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
    float _2686 = _2685 * _2679;
    float _2687 = _2685 * _2680;
    float _2688 = _2685 * _2681;
    float _2689 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2371].xyz));
    float _4804 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2692 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
    float _2693 = dot(vec3(_821, _822, _823), vec3(_2686, _2687, _2688));
    float _4815 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2696 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
    float _2697 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2686, _2687, _2688));
    float _4826 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2701 = _2678 * _2678;
    float _2705 = ((_2696 * _2696) * (_2701 + (-1.0))) + 1.0;
    float _2712 = exp2(log2(1.0 - (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0)))) * 5.0);
    float _2719 = 1.0 - _2678;
    float _2729 = (0.5 / (((_2607 * ((_2692 * _2719) + _2678)) + 9.9999999392252902907785028219223e-09) + (((_2607 * _2719) + _2678) * _2692))) * _2692;
    float _4837 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2731 = (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2701 / ((_2705 * _2705) * 3.141590118408203125));
    float _2741 = (((((_2712 * _2629) + _983) * cbLight._m0[_2666].x) * _2731) * _2354) + ((((cbLight._m0[_2578].x * _2320) * ((_2628 * _2629) + _983)) * _2652) * _2367);
    float _2742 = (((((_2712 * _2631) + _985) * cbLight._m0[_2666].y) * _2731) * _2354) + ((((cbLight._m0[_2578].y * _2322) * ((_2628 * _2631) + _985)) * _2652) * _2367);
    float _2743 = (((((_2712 * _2632) + _986) * cbLight._m0[_2666].z) * _2731) * _2354) + ((((cbLight._m0[_2578].z * _2324) * ((_2628 * _2632) + _986)) * _2652) * _2367);
    float _2799;
    float _2801;
    float _2803;
    if (_2407)
    {
        _2799 = _2741;
        _2801 = _2742;
        _2803 = _2743;
    }
    else
    {
        uint _2805 = _2331 + 2u;
        uint _2809 = _2331 + 10u;
        float _2823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2805].w)) * _824) * 0.949999988079071044921875);
        float _2824 = _2823 * _2823;
        float _2825 = cbLight._m0[_2805].x + _901;
        float _2826 = cbLight._m0[_2805].y + _902;
        float _2827 = cbLight._m0[_2805].z + _903;
        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
        float _2832 = _2831 * _2825;
        float _2833 = _2831 * _2826;
        float _2834 = _2831 * _2827;
        float _2835 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2805].xyz));
        float _4848 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2838 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
        float _2839 = dot(vec3(_821, _822, _823), vec3(_2832, _2833, _2834));
        float _4859 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2842 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
        float _2843 = dot(vec3(cbLight._m0[_2805].xyz), vec3(_2832, _2833, _2834));
        float _4870 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2847 = _2824 * _2824;
        float _2851 = ((_2842 * _2842) * (_2847 + (-1.0))) + 1.0;
        float _2858 = exp2(log2(1.0 - (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) * 5.0);
        float _2865 = 1.0 - _2824;
        float _2875 = (0.5 / (((_2607 * ((_2838 * _2865) + _2824)) + 9.9999999392252902907785028219223e-09) + (((_2607 * _2865) + _2824) * _2838))) * _2838;
        float _4881 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2877 = (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2847 / ((_2851 * _2851) * 3.141590118408203125));
        float _2878 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
        _2799 = (((((_2858 * _2629) + _983) * cbLight._m0[_2809].x) * _2877) * _2878) + _2741;
        _2801 = (((((_2858 * _2631) + _985) * cbLight._m0[_2809].y) * _2877) * _2878) + _2742;
        _2803 = (((((_2858 * _2632) + _986) * cbLight._m0[_2809].z) * _2877) * _2878) + _2743;
    }
    float _2909;
    float _2911;
    float _2913;
    if (_2516)
    {
        _2909 = _2799;
        _2911 = _2801;
        _2913 = _2803;
    }
    else
    {
        uint _2920 = _2331 + 3u;
        uint _2924 = _2331 + 11u;
        float _2938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2920].w)) * _824) * 0.949999988079071044921875);
        float _2939 = _2938 * _2938;
        float _2940 = cbLight._m0[_2920].x + _901;
        float _2941 = cbLight._m0[_2920].y + _902;
        float _2942 = cbLight._m0[_2920].z + _903;
        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
        float _2947 = _2946 * _2940;
        float _2948 = _2946 * _2941;
        float _2949 = _2946 * _2942;
        float _2950 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2920].xyz));
        float _4897 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2953 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
        float _2954 = dot(vec3(_821, _822, _823), vec3(_2947, _2948, _2949));
        float _4908 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2957 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
        float _2958 = dot(vec3(cbLight._m0[_2920].xyz), vec3(_2947, _2948, _2949));
        float _4919 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2962 = _2939 * _2939;
        float _2966 = ((_2957 * _2957) * (_2962 + (-1.0))) + 1.0;
        float _2973 = exp2(log2(1.0 - (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) * 5.0);
        float _2980 = 1.0 - _2939;
        float _2990 = (0.5 / (((_2607 * ((_2953 * _2980) + _2939)) + 9.9999999392252902907785028219223e-09) + (((_2607 * _2980) + _2939) * _2953))) * _2953;
        float _4930 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        float _2992 = (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2962 / ((_2966 * _2966) * 3.141590118408203125));
        float _2993 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
        _2909 = (((((_2973 * _2629) + _983) * cbLight._m0[_2924].x) * _2992) * _2993) + _2799;
        _2911 = (((((_2973 * _2631) + _985) * cbLight._m0[_2924].y) * _2992) * _2993) + _2801;
        _2913 = (((((_2973 * _2632) + _986) * cbLight._m0[_2924].z) * _2992) * _2993) + _2803;
    }
    float _3059;
    float _3061;
    float _3063;
    float _3065;
    float _3067;
    float _3069;
    if (_2329.y == 0u)
    {
        uvec4 _3014 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3015 = _3014.x;
        uint _3026 = uint((float(_3014.y) * floor(float(uint(cbSceneParam._m0[85u].y * _922) / _3015))) + floor(float(uint(cbSceneParam._m0[85u].x * _921) / _3015)));
        float _3036 = (log2(_2107 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3037 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
        uint _3040 = uint(isnan(14.0) ? _3037 : (isnan(_3037) ? 14.0 : min(_3037, 14.0)));
        uvec4 _3045 = texelFetch(g_lightClusterGridBuffer, int(((_3040 << 2u) + (_3026 << 6u)) >> 2u));
        uint _3046 = _3045.x;
        uint _3047 = _3014.z;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        if (((((1u << ((_3047 >> 4u) & 15u)) + 4294967295u) & _3046) == 0u) || ((_3047 & 240u) == 0u))
        {
            _3126 = 0.0;
            _3128 = 0.0;
            _3130 = 0.0;
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
        }
        else
        {
            float _3127;
            float _3129;
            float _3131;
            float _3133;
            float _3135;
            float _3137;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            float _3283 = 0.0;
            float _3284 = 0.0;
            uint _3285 = 0u;
            uint _3294;
            bool _3295;
            for (;;)
            {
                _3294 = texelFetch(g_lightClassification, int((((_3040 << 5u) + (_3026 << 9u)) + (_3285 << 2u)) >> 2u)).x;
                _3295 = _3294 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3295)
                {
                    frontier_phi_71_pred = _3284;
                    frontier_phi_71_pred_1 = _3283;
                    frontier_phi_71_pred_2 = _3282;
                    frontier_phi_71_pred_3 = _3281;
                    frontier_phi_71_pred_4 = _3280;
                    frontier_phi_71_pred_5 = _3279;
                }
                else
                {
                    float _3424;
                    float _3425;
                    float _3426;
                    float _3427;
                    float _3428;
                    float _3429;
                    uint _3430;
                    _3424 = _3279;
                    _3425 = _3280;
                    _3426 = _3281;
                    _3427 = _3282;
                    _3428 = _3283;
                    _3429 = _3284;
                    _3430 = _3294;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    for (;;)
                    {
                        uint _3434 = uint(findLSB(_3430)) + (_3285 << 5u);
                        uint _3431 = (_3430 + 4294967295u) & _3430;
                        uint _3436 = _3434 * 48u;
                        vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 3u)).x));
                        uint _3456 = (_3434 * 48u) + 4u;
                        vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3456)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 3u)).x));
                        uint _3475 = (_3434 * 48u) + 8u;
                        vec3 _3486 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3475)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 2u)).x));
                        float _3490 = _3450.x - _2105;
                        float _3491 = _3450.y - _2106;
                        float _3492 = _3450.z - _2107;
                        float _3493 = dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492));
                        float _3496 = inversesqrt(_3493);
                        float _3497 = _3496 * _3490;
                        float _3498 = _3496 * _3491;
                        float _3499 = _3496 * _3492;
                        float _3500 = dot(vec3(_940, _943, _946), vec3(_3497, _3498, _3499));
                        float _3505 = 1.0 - (_3493 * _3450.w);
                        float _4956 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3506 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                        float _3507 = sqrt(_3493) * _3469.w;
                        float _3510 = 1.39999997615814208984375 / (_3507 + 1.39999997615814208984375);
                        float _3511 = _3510 * _3510;
                        float _3514 = ((1.0 - _3511) * _3500) + _3511;
                        float _3517 = _3507 * _3507;
                        float _3521 = ((isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0))) * _3506) / ((_3517 * 0.699999988079071044921875) + 1.0);
                        float _3525 = (-0.0) - _2105;
                        float _3526 = (-0.0) - _2106;
                        float _3527 = (-0.0) - _2107;
                        float _3531 = inversesqrt(dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527)));
                        float _3532 = _3531 * _3525;
                        float _3533 = _3531 * _3526;
                        float _3534 = _3531 * _3527;
                        float _3541 = exp2(log2(1.0 / ((_3517 * 3.5) + 5.0)) * 0.25);
                        float _3542 = 1.0 - _1015;
                        float _3549 = sqrt(1.0 - ((1.0 - (_3542 * _3542)) * (1.0 - (_3541 * _3541))));
                        float _3550 = _3549 * _3549;
                        float _3551 = _3550 * _3550;
                        float _3552 = _3532 + _3497;
                        float _3553 = _3533 + _3498;
                        float _3554 = _3534 + _3499;
                        float _3558 = inversesqrt(dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554)));
                        float _3562 = dot(vec3(_940, _943, _946), vec3(_3532, _3533, _3534));
                        float _4972 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3565 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                        float _3566 = dot(vec3(_940, _943, _946), vec3(_3558 * _3552, _3558 * _3553, _3558 * _3554));
                        float _4983 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3569 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                        float _3573 = ((_3569 * _3569) * (_3551 + (-1.0))) + 1.0;
                        float _3574 = _3510 * _3550;
                        float _3575 = _3574 * _3574;
                        float _3578 = ((1.0 - _3575) * _3500) + _3575;
                        float _4994 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3579 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                        float _3580 = 1.0 - _3550;
                        float _3590 = (0.5 / (((_3579 * ((_3565 * _3580) + _3550)) + 9.9999999392252902907785028219223e-09) + (((_3579 * _3580) + _3550) * _3565))) * _3579;
                        float _5005 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3601 = (((_3551 * 3.1415927410125732421875) * (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0)))) / ((_3573 * _3573) * ((_3517 * 2.1991131305694580078125) + 3.141590118408203125))) * _3506;
                        _3354 = (_3521 * _3469.x) + _3427;
                        _3355 = (_3521 * _3469.y) + _3428;
                        _3356 = (_3521 * _3469.z) + _3429;
                        _3351 = (_3601 * _3486.x) + _3424;
                        _3352 = (_3601 * _3486.y) + _3425;
                        _3353 = (_3601 * _3486.z) + _3426;
                        if (_3431 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3424 = _3351;
                            _3425 = _3352;
                            _3426 = _3353;
                            _3427 = _3354;
                            _3428 = _3355;
                            _3429 = _3356;
                            _3430 = _3431;
                        }
                    }
                    frontier_phi_71_pred = _3356;
                    frontier_phi_71_pred_1 = _3355;
                    frontier_phi_71_pred_2 = _3354;
                    frontier_phi_71_pred_3 = _3353;
                    frontier_phi_71_pred_4 = _3352;
                    frontier_phi_71_pred_5 = _3351;
                }
                _3137 = frontier_phi_71_pred;
                _3135 = frontier_phi_71_pred_1;
                _3133 = frontier_phi_71_pred_2;
                _3131 = frontier_phi_71_pred_3;
                _3129 = frontier_phi_71_pred_4;
                _3127 = frontier_phi_71_pred_5;
                uint _3286 = _3285 + 1u;
                if (_3286 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3279 = _3127;
                    _3280 = _3129;
                    _3281 = _3131;
                    _3282 = _3133;
                    _3283 = _3135;
                    _3284 = _3137;
                    _3285 = _3286;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3126 = _3127;
            _3128 = _3129;
            _3130 = _3131;
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
        }
        uvec4 _3140 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3141 = _3140.z;
        uint _3143 = (_3141 >> 8u) & 15u;
        float _3247;
        float _3249;
        float _3251;
        float _3253;
        float _3255;
        float _3257;
        if (((4294967295u << _3143) & _3046) == 0u)
        {
            _3247 = _3126;
            _3249 = _3128;
            _3251 = _3130;
            _3253 = _3132;
            _3255 = _3134;
            _3257 = _3136;
        }
        else
        {
            float _3272 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
            float _3273 = _3272 * _2105;
            float _3274 = _3272 * _2106;
            float _3275 = _3272 * _2107;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3143 < ((_3141 >> 12u) & 15u))
            {
                float _3248;
                float _3250;
                float _3252;
                float _3254;
                float _3256;
                float _3258;
                float _3407 = _3126;
                float _3408 = _3128;
                float _3409 = _3130;
                float _3410 = _3132;
                float _3411 = _3134;
                float _3412 = _3136;
                uint _3413 = _3143;
                uint _3422;
                bool _3423;
                for (;;)
                {
                    _3422 = texelFetch(g_lightClassification, int((((_3040 << 5u) + (_3026 << 9u)) + (_3413 << 2u)) >> 2u)).x;
                    _3423 = _3422 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3423)
                    {
                        frontier_phi_82_pred = _3412;
                        frontier_phi_82_pred_1 = _3411;
                        frontier_phi_82_pred_2 = _3410;
                        frontier_phi_82_pred_3 = _3409;
                        frontier_phi_82_pred_4 = _3408;
                        frontier_phi_82_pred_5 = _3407;
                    }
                    else
                    {
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3911;
                        float _3912;
                        float _3913;
                        float _3628 = _3407;
                        float _3629 = _3408;
                        float _3630 = _3409;
                        float _3631 = _3410;
                        float _3632 = _3411;
                        float _3633 = _3412;
                        uint _3634 = _3422;
                        uint _3635;
                        vec4 _3660;
                        float _3661;
                        vec4 _3676;
                        vec3 _3688;
                        vec4 _3703;
                        vec4 _3718;
                        float _3764;
                        bool _3765;
                        for (;;)
                        {
                            uint _3645 = ((_3413 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3634));
                            _3635 = (_3634 + 4294967295u) & _3634;
                            uint _3647 = _3645 * 40u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            _3661 = _3660.w;
                            uint _3663 = (_3645 * 40u) + 4u;
                            _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3678 = (_3645 * 40u) + 8u;
                            _3688 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x));
                            uint _3690 = (_3645 * 40u) + 16u;
                            _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3705 = (_3645 * 40u) + 20u;
                            _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            uint _3720 = (_3645 * 40u) + 24u;
                            vec4 _3733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 3u)).x));
                            uint _3739 = (_3645 * 40u) + 28u;
                            vec4 _3752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 3u)).x));
                            _3764 = fma(_2107, _3752.z, fma(_2106, _3752.y, _3752.x * _2105)) + _3752.w;
                            _3765 = !((fma(_2107, _3733.z, fma(_2106, _3733.y, _3733.x * _2105)) + _3733.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3765)
                            {
                                float _3792 = _3660.x - _2105;
                                float _3793 = _3660.y - _2106;
                                float _3794 = _3660.z - _2107;
                                float _3795 = dot(vec3(_3792, _3793, _3794), vec3(_3792, _3793, _3794));
                                float _3798 = inversesqrt(_3795);
                                float _3799 = _3798 * _3792;
                                float _3800 = _3798 * _3793;
                                float _3801 = _3798 * _3794;
                                float _3805 = 1.0 - (_3795 / (_3661 * _3661));
                                float _5016 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3806 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
                                float _3810 = sqrt(_3795) * _3676.w;
                                float _3812 = 1.39999997615814208984375 / (_3810 + 1.39999997615814208984375);
                                float _3813 = _3812 * _3812;
                                float _3816 = ((1.0 - _3813) * dot(vec3(_3799, _3800, _3801), vec3(_940, _943, _946))) + _3813;
                                float _3819 = _3810 * _3810;
                                float _3823 = (fma(_2107, _3703.z, fma(_2106, _3703.y, _3703.x * _2105)) + _3703.w) / _3764;
                                float _3824 = (fma(_2107, _3718.z, fma(_2106, _3718.y, _3718.x * _2105)) + _3718.w) / _3764;
                                float _3828 = 1.0 - dot(vec2(_3823, _3824), vec2(_3823, _3824));
                                float _5032 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3829 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
                                float _3830 = _3829 * (((isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0))) * _3806) / ((_3819 * 0.699999988079071044921875) + 1.0));
                                float _3842 = exp2(log2(1.0 / ((_3819 * 3.5) + 5.0)) * 0.25);
                                float _3843 = 1.0 - _1015;
                                float _3850 = sqrt(1.0 - ((1.0 - (_3843 * _3843)) * (1.0 - (_3842 * _3842))));
                                float _3851 = _3850 * _3850;
                                float _3852 = _3851 * _3851;
                                float _3853 = _3799 - _3273;
                                float _3854 = _3800 - _3274;
                                float _3855 = _3801 - _3275;
                                float _3859 = inversesqrt(dot(vec3(_3853, _3854, _3855), vec3(_3853, _3854, _3855)));
                                float _3863 = dot(vec3(_940, _943, _946), vec3((-0.0) - _3273, (-0.0) - _3274, (-0.0) - _3275));
                                float _5043 = isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0));
                                float _3866 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                                float _3867 = dot(vec3(_940, _943, _946), vec3(_3859 * _3853, _3859 * _3854, _3859 * _3855));
                                float _5054 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3870 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
                                float _3874 = ((_3870 * _3870) * (_3852 + (-1.0))) + 1.0;
                                float _3875 = _3812 * _3851;
                                float _3876 = _3875 * _3875;
                                float _3882 = ((1.0 - _3876) * dot(vec3(_940, _943, _946), vec3(_3799, _3800, _3801))) + _3876;
                                float _5065 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                                float _3883 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
                                float _3884 = 1.0 - _3851;
                                float _3894 = (0.5 / (((_3883 * ((_3866 * _3884) + _3851)) + 9.9999999392252902907785028219223e-09) + (((_3883 * _3884) + _3851) * _3866))) * _3883;
                                float _5076 = isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0));
                                float _3904 = (_3829 * _3806) * (((_3852 * 3.1415927410125732421875) * (isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0)))) / ((_3874 * _3874) * ((_3819 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3830 * _3676.z;
                                frontier_phi_88_pred_1 = _3830 * _3676.y;
                                frontier_phi_88_pred_2 = _3830 * _3676.x;
                                frontier_phi_88_pred_3 = _3904 * _3688.z;
                                frontier_phi_88_pred_4 = _3904 * _3688.y;
                                frontier_phi_88_pred_5 = _3904 * _3688.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3913 = frontier_phi_88_pred;
                            _3912 = frontier_phi_88_pred_1;
                            _3911 = frontier_phi_88_pred_2;
                            _3910 = frontier_phi_88_pred_3;
                            _3909 = frontier_phi_88_pred_4;
                            _3908 = frontier_phi_88_pred_5;
                            _3618 = _3911 + _3631;
                            _3619 = _3912 + _3632;
                            _3620 = _3913 + _3633;
                            _3615 = _3908 + _3628;
                            _3616 = _3909 + _3629;
                            _3617 = _3910 + _3630;
                            if (_3635 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3617;
                                _3631 = _3618;
                                _3632 = _3619;
                                _3633 = _3620;
                                _3634 = _3635;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3620;
                        frontier_phi_82_pred_1 = _3619;
                        frontier_phi_82_pred_2 = _3618;
                        frontier_phi_82_pred_3 = _3617;
                        frontier_phi_82_pred_4 = _3616;
                        frontier_phi_82_pred_5 = _3615;
                    }
                    _3258 = frontier_phi_82_pred;
                    _3256 = frontier_phi_82_pred_1;
                    _3254 = frontier_phi_82_pred_2;
                    _3252 = frontier_phi_82_pred_3;
                    _3250 = frontier_phi_82_pred_4;
                    _3248 = frontier_phi_82_pred_5;
                    uint _3414 = _3413 + 1u;
                    if (_3414 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3407 = _3248;
                        _3408 = _3250;
                        _3409 = _3252;
                        _3410 = _3254;
                        _3411 = _3256;
                        _3412 = _3258;
                        _3413 = _3414;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3254;
                frontier_phi_63_64_ladder_1 = _3258;
                frontier_phi_63_64_ladder_2 = _3256;
                frontier_phi_63_64_ladder_3 = _3252;
                frontier_phi_63_64_ladder_4 = _3250;
                frontier_phi_63_64_ladder_5 = _3248;
            }
            else
            {
                frontier_phi_63_64_ladder = _3132;
                frontier_phi_63_64_ladder_1 = _3136;
                frontier_phi_63_64_ladder_2 = _3134;
                frontier_phi_63_64_ladder_3 = _3130;
                frontier_phi_63_64_ladder_4 = _3128;
                frontier_phi_63_64_ladder_5 = _3126;
            }
            _3247 = frontier_phi_63_64_ladder_5;
            _3249 = frontier_phi_63_64_ladder_4;
            _3251 = frontier_phi_63_64_ladder_3;
            _3253 = frontier_phi_63_64_ladder;
            _3255 = frontier_phi_63_64_ladder_2;
            _3257 = frontier_phi_63_64_ladder_1;
        }
        float _3262 = isnan(1.0) ? _999 : (isnan(_999) ? 1.0 : min(_999, 1.0));
        _3059 = (_3262 * _3253) + _2571;
        _3061 = (_3262 * _3255) + _2573;
        _3063 = (_3262 * _3257) + _2575;
        _3065 = ((_3247 * _983) * _3262) + _2909;
        _3067 = ((_3249 * _985) * _3262) + _2911;
        _3069 = ((_3251 * _986) * _3262) + _2913;
    }
    else
    {
        _3059 = _2571;
        _3061 = _2573;
        _3063 = _2575;
        _3065 = _2909;
        _3067 = _2911;
        _3069 = _2913;
    }
    float _5092 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _5103 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _5114 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _3086 = ((isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0))) * (_3059 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _999))) + ((_3065 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1839)) * cbPerFrame._m0[3u].x);
    float _3087 = ((isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0))) * (_3061 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _999))) + ((_3067 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1839)) * cbPerFrame._m0[3u].x);
    float _3088 = ((isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0))) * (_3063 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _999))) + ((_3069 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1839)) * cbPerFrame._m0[3u].x);
    uint _3089 = _278 + 6u;
    float _3097 = _921 / cbSceneParam._m0[86u].x;
    float _3098 = _922 / cbSceneParam._m0[86u].y;
    vec4 _3112 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3097, _3098, (log2((isnan(cbSceneParam._m0[77u].w) ? _843 : (isnan(_843) ? cbSceneParam._m0[77u].w : min(_843, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3114 = _3112.x;
    float _3115 = _3112.y;
    float _3116 = _3112.z;
    float _3117 = _3112.w;
    float _3189;
    float _3191;
    float _3193;
    float _3195;
    if (_843 > cbSceneParam._m0[78u].w)
    {
        float _3151 = isnan(_843) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _843 : min(cbSceneParam._m0[80u].w, _843));
        float _3152 = _3151 / _843;
        float _3163 = _3152 * _894;
        float _3164 = _895 * _3152;
        float _3165 = (-0.0) - _3164;
        float _3167 = _3152 * _896;
        float _3169 = (cbSceneParam._m0[77u].w * _3165) / _3151;
        float _3170 = _3169 + cbSceneParam._m0[79u].w;
        float _3171 = cbSceneParam._m0[79u].w - _3164;
        float _3177 = sqrt(((_3163 * _3163) + (_3164 * _3164)) + (_3167 * _3167));
        float _3180 = (1.0 - (cbSceneParam._m0[77u].w / _3151)) * _3177;
        float _3185 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3187 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3364;
        if (abs((_3165 - _3169) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3364 = ((((_3170 > 0.0) ? exp2(_3185 * _3170) : (2.0 - exp2(_3187 * _3170))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3180;
        }
        else
        {
            float _3308 = 1.0 / cbSceneParam._m0[80u].x;
            float _3309 = isnan(_3171) ? _3170 : (isnan(_3170) ? _3171 : max(_3170, _3171));
            float _3310 = isnan(_3171) ? _3170 : (isnan(_3170) ? _3171 : min(_3170, _3171));
            float _3319 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : min(_3309, 0.0));
            float _3320 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : min(_3310, 0.0));
            _3364 = ((abs(_3177 / _3165) * cbSceneParam._m0[80u].y) * ((((_3319 - _3320) * 2.0) - ((exp2(_3185 * (isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0)))) - exp2(_3185 * (isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))))) * _3308)) - ((exp2(_3187 * _3319) - exp2(_3187 * _3320)) * _3308))) + (_3180 * cbSceneParam._m0[80u].z);
        }
        vec4 _3366 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3097, _3098, 1.0), 0.0);
        float _3375 = exp2((_3364 * (-1.44269502162933349609375)) * (1.0 - _3366.w));
        float _3376 = log2(_3375);
        float _3392 = log2(_3117);
        _3189 = (exp2(_3392 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3376 * cbSceneParam._m0[78u].x)) * _3366.x) / cbSceneParam._m0[78u].x)) + _3114;
        _3191 = (exp2(_3392 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3376 * cbSceneParam._m0[78u].y)) * _3366.y) / cbSceneParam._m0[78u].y)) + _3115;
        _3193 = (exp2(_3392 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3376 * cbSceneParam._m0[78u].z)) * _3366.z) / cbSceneParam._m0[78u].z)) + _3116;
        _3195 = _3375 * _3117;
    }
    else
    {
        _3189 = _3114;
        _3191 = _3115;
        _3193 = _3116;
        _3195 = _3117;
    }
    bool _3402;
    vec4 _3205;
    vec4 _3227;
    float _3229;
    float _3233;
    float _3234;
    float _3235;
    float _3236;
    bool _3246;
    for (;;)
    {
        _3205 = cbMatDynParam._m0[0u];
        float _3207 = roundEven(_3205.y);
        bool _3208 = _3207 == 3.0;
        float _3209 = log2(_3195);
        float _3216 = exp2(_3209 * cbSceneParam._m0[78u].x) * _3086;
        float _3217 = exp2(_3209 * cbSceneParam._m0[78u].y) * _3087;
        float _3218 = exp2(_3209 * cbSceneParam._m0[78u].z) * _3088;
        float _3225 = _910 + (-0.5);
        _3227 = cbMtdParam._m0[1u];
        _3229 = _3227.y * _3225;
        float _3232 = (_3207 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3233 = _3232 * (_3208 ? _3216 : (_3216 + (cbSceneParam._m0[72u].w * _3189)));
        _3234 = _3232 * (_3208 ? _3217 : (_3217 + (cbSceneParam._m0[72u].w * _3191)));
        _3235 = _3232 * (_3208 ? _3218 : (_3218 + (cbSceneParam._m0[72u].w * _3193)));
        _3236 = _3225 * 0.999000012874603271484375;
        _3246 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3246)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _3236) < 0.5)
            {
                _3402 = true;
                break;
            }
        }
        uint _3343 = _959 + uint(_3205.w);
        if ((cbInstanceData._m0[_3343].w < 1.0) && ((cbInstanceData._m0[_3343].w + _3236) < 0.5))
        {
            _3402 = true;
            break;
        }
        if ((_3229 + 1.0) < _3227.x)
        {
            _3402 = true;
            break;
        }
        _3402 = false;
        break;
    }
    float _3606;
    if (_3402)
    {
        discard_state = true;
        _3606 = 0.0;
    }
    else
    {
        _3606 = cbInstanceData._m0[_3089].w;
    }
    SV_Target.x = _3233;
    SV_Target.y = _3234;
    SV_Target.z = _3235;
    SV_Target.w = _3606;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3089].w;
    discard_exit();
}


