#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1601;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _250 = _249 * _241;
    float _251 = _249 * _242;
    float _252 = _249 * _243;
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = _256 * NORMAL.x;
    float _258 = _256 * NORMAL.y;
    float _259 = _256 * NORMAL.z;
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = _263 * TANGENT.x;
    float _265 = _263 * TANGENT.y;
    float _266 = _263 * TANGENT.z;
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4207 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4218 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4229 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    uint _290 = uint(roundEven(NORMAL.w)) * 13u;
    uint _295 = _290 + 1u;
    uint _299 = _290 + 2u;
    float _308 = sqrt(((cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x)) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x));
    float _309 = _308 * TEXCOORD.z;
    float _310 = _308 * TEXCOORD.w;
    vec4 _323 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _309) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _310) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _377 = _372.x * cbMtdParam._m0[11u].x;
    float _378 = _372.y * cbMtdParam._m0[11u].y;
    float _379 = _372.z * cbMtdParam._m0[11u].z;
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _309) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _310) + cbTextureTilingScale._m0[5u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _466 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _483 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _417.x) * 2.0) - ((((_454 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4240 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _491 = (_484 * ((_398.x * cbMtdParam._m0[12u].x) - _377)) + _377;
    float _492 = (_484 * ((_398.y * cbMtdParam._m0[12u].y) - _378)) + _378;
    float _493 = (_484 * ((_398.z * cbMtdParam._m0[12u].z) - _379)) + _379;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _309) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _310) + cbTextureTilingScale._m0[3u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _532 = _530.x;
    float _542 = dot(vec4(_532, _530.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _556 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _417.y) * 2.0) - ((((_532 - _542) * cbMtdParam._m0[23u].w) + _542) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4251 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _564 = (_557 * ((_510.x * cbMtdParam._m0[13u].x) - _491)) + _491;
    float _565 = (_557 * ((_510.y * cbMtdParam._m0[13u].y) - _492)) + _492;
    float _566 = (_557 * ((_510.z * cbMtdParam._m0[13u].z) - _493)) + _493;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _309) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _310) + cbTextureTilingScale._m0[24u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _604 = _602.x;
    float _614 = dot(vec4(_604, _602.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _626 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _417.z) * 2.0) - ((((_604 - _614) * cbMtdParam._m0[23u].w) + _614) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4262 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _637 = (_346.x * cbMtdParam._m0[9u].x) * ((_627 * ((_585.x * cbMtdParam._m0[14u].x) - _564)) + _564);
    float _638 = (_346.y * cbMtdParam._m0[9u].y) * ((_627 * ((_585.y * cbMtdParam._m0[14u].y) - _565)) + _565);
    float _639 = (_346.z * cbMtdParam._m0[9u].z) * ((_627 * ((_585.z * cbMtdParam._m0[14u].z) - _566)) + _566);
    float _643 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _323.x) * _637;
    float _646 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _323.y) * _638;
    float _649 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _323.z) * _639;
    float _657 = (((_637 - _643) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) + _643) * 4.55000019073486328125;
    float _659 = (((_638 - _646) * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) + _646) * 4.55000019073486328125;
    float _661 = (((_639 - _649) * (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) + _649) * 4.55000019073486328125;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _309) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _310) + cbTextureTilingScale._m0[14u].w));
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _309) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _310) + cbTextureTilingScale._m0[20u].w));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _309) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _310) + cbTextureTilingScale._m0[4u].w));
    vec4 _740 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _742 = _740.x;
    float _743 = _740.y;
    float _744 = _740.z;
    float _751 = ((_723.x - _742) * _484) + _742;
    float _752 = ((_723.y - _743) * _484) + _743;
    float _753 = ((_723.z - _744) * _484) + _744;
    vec4 _765 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _309) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _310) + cbTextureTilingScale._m0[2u].w));
    float _776 = ((_765.x - _751) * _557) + _751;
    float _777 = ((_765.y - _752) * _557) + _752;
    float _778 = ((_765.z - _753) * _557) + _753;
    vec4 _790 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _309) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _310) + cbTextureTilingScale._m0[23u].w));
    float _803 = ((_790.z - _778) * _627) + _778;
    float _806 = ((((_790.x - _776) * _627) + _776) * 2.0) + (-1.0);
    float _807 = ((((_790.y - _777) * _627) + _777) * 2.0) + (-1.0);
    float _808 = dot(vec2(_806, _807), vec2(_806, _807));
    float _4273 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _813 = sqrt(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))));
    vec4 _831 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _843 = (_806 + ((((_698.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_831.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _844 = (_807 + ((((_698.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_831.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _847 = fma(_813, _257, fma(_844, _264, _843 * _250));
    float _850 = fma(_813, _258, fma(_844, _265, _843 * _251));
    float _853 = fma(_813, _259, fma(_844, _266, _843 * _252));
    float _857 = inversesqrt(dot(vec3(_847, _850, _853), vec3(_847, _850, _853)));
    vec4 _884 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _309) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _310) + cbTextureTilingScale._m0[11u].w));
    float _886 = _884.x;
    float _887 = 1.0 - _886;
    float _895 = (cbMtdParam._m0[19u].x + dot(vec4(_857 * _847, _857 * _850, _857 * _853, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_886 - _887) * cbMtdParam._m0[24u].z) + _887) * cbMtdParam._m0[21u].z);
    float _4284 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _896 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _903 = (_896 * ((_679.x * cbMtdParam._m0[18u].x) - _657)) + _657;
    float _904 = (_896 * ((_679.y * cbMtdParam._m0[18u].y) - _659)) + _659;
    float _905 = (_896 * ((_679.z * cbMtdParam._m0[18u].z) - _661)) + _661;
    vec4 _931 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _933 = _931.x;
    float _950 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _309) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _310) + cbTextureTilingScale._m0[9u].w)).x - _933) * _484) + _933;
    float _967 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _309) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _310) + cbTextureTilingScale._m0[21u].w)).x - _950) * _557) + _950;
    float _985 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _309) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _310) + cbTextureTilingScale._m0[10u].w)).x - _967) * _627) + _967;
    float _989 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _985) * cbMtdParam._m0[19u].z) + _985;
    float _991 = _989 - (_989 * _896);
    float _996 = (((_698.z - _803) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _803;
    float _1000 = ((_831.z - _996) * cbMtdParam._m0[19u].w) + _996;
    vec4 _1013 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _309) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _310) + cbTextureTilingScale._m0[15u].w));
    float _1020 = (_1013.x * 2.0) + (-1.0);
    float _1021 = (_1013.y * 2.0) + (-1.0);
    float _1022 = dot(vec2(_1020, _1021), vec2(_1020, _1021));
    float _4295 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1030 = ((_1013.z - _1000) * _896) + _1000;
    float _1040 = ((sqrt(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) - _813) * _896) + _813;
    float _1043 = (((_1020 - _843) * _896) + _843) + (cbMtdParam._m0[21u].x * _843);
    float _1044 = (((_1021 - _844) * _896) + _844) + (cbMtdParam._m0[21u].x * _844);
    float _1048 = cbMtdParam._m0[22u].x + _831.w;
    float _1051 = fma(_1040, _257, fma(_1044, _264, _1043 * _250));
    float _1054 = fma(_1040, _258, fma(_1044, _265, _1043 * _251));
    float _1057 = fma(_1040, _259, fma(_1044, _266, _1043 * _252));
    float _1061 = inversesqrt(dot(vec3(_1051, _1054, _1057), vec3(_1051, _1054, _1057)));
    float _1062 = _1061 * _1051;
    float _1063 = _1061 * _1054;
    float _1064 = _1061 * _1057;
    float _4306 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1065 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _4317 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _4328 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4339 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4350 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4361 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _1070 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _1084 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1134 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1124);
    float _1135 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1124);
    float _1136 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1124);
    float _1140 = inversesqrt(dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136)));
    float _1141 = _1134 * _1140;
    float _1142 = _1135 * _1140;
    float _1143 = _1136 * _1140;
    float _1149 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1150 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1168 = fma(_1064, cbSceneParam._m0[5u].z, fma(_1063, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1062));
    float _1171 = fma(_1064, cbSceneParam._m0[6u].z, fma(_1063, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1062));
    float _1174 = fma(_1064, cbSceneParam._m0[7u].z, fma(_1063, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1062));
    uint _1188 = (_290 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1194 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * cbInstanceData._m0[_1188].x;
    float _1195 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * cbInstanceData._m0[_1188].y;
    float _1196 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) * cbInstanceData._m0[_1188].z;
    float _4372 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _1197 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _4383 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _1198 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _4394 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _1199 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _1200 = 1.0 - _1070;
    float _1201 = _1197 * _1200;
    float _1202 = _1198 * _1200;
    float _1203 = _1199 * _1200;
    float _1208 = (_1197 + (-0.039999999105930328369140625)) * _1070;
    float _1209 = (_1198 + (-0.039999999105930328369140625)) * _1070;
    float _1210 = (_1199 + (-0.039999999105930328369140625)) * _1070;
    float _1211 = _1208 + 0.039999999105930328369140625;
    float _1213 = _1209 + 0.039999999105930328369140625;
    float _1214 = _1210 + 0.039999999105930328369140625;
    vec4 _1223 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1149, cbSceneParam._m0[86u].y * _1150));
    float _1227 = ((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * TEXCOORD_5.w) * _1223.x;
    float _1228 = dot(vec3(_1062, _1063, _1064), vec3(_1141, _1142, _1143));
    float _1231 = _1228 * 2.0;
    float _1235 = (_1231 * _1062) - _1141;
    float _1236 = (_1231 * _1063) - _1142;
    float _1237 = (_1231 * _1064) - _1143;
    float _1241 = abs(dot(vec3(_1141, _1142, _1143), vec3(_1062, _1063, _1064)));
    float _4405 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
    float _1243 = sqrt(_1065);
    float _1256 = exp2((_1243 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1243 * 3.0));
    float _1262 = (1.0 - _1256) * ((_1243 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1263 = _1256 * _1243;
    float _1291 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1295 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1299 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1600;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1325 = fma(_1299, cbModelParam._m0[26u].z, fma(_1295, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1291));
        float _1329 = fma(_1299, cbModelParam._m0[27u].z, fma(_1295, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1291));
        float _1333 = fma(_1299, cbModelParam._m0[28u].z, fma(_1295, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1291));
        float _1358 = _1291 + _1062;
        float _1359 = _1295 + _1063;
        float _1360 = _1299 + _1064;
        float _1370 = fma(_1360, cbModelParam._m0[26u].z, fma(_1359, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1358)) - _1325;
        float _1371 = fma(_1360, cbModelParam._m0[27u].z, fma(_1359, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1358)) - _1329;
        float _1372 = fma(_1360, cbModelParam._m0[28u].z, fma(_1359, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1358)) - _1333;
        float _1376 = inversesqrt(dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372)));
        float _1389 = ((_1376 * _1370) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1325 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1376 * _1371) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1329 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1376 * _1372) / cbModelParam._m0[34u].z) + ((((((_1333 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        float _1428 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1394.x + (-0.5));
        float _1430 = _1428 * (_1394.y + (-0.5));
        float _1431 = _1428 * (_1394.z + (-0.5));
        float _1438 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1401.x + (-0.5));
        float _1440 = _1438 * (_1401.y + (-0.5));
        float _1441 = _1438 * (_1401.z + (-0.5));
        float _1448 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1408.x + (-0.5));
        float _1450 = _1448 * (_1408.y + (-0.5));
        float _1451 = _1448 * (_1408.z + (-0.5));
        float _1458 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1415.x + (-0.5));
        float _1460 = _1458 * (_1415.y + (-0.5));
        float _1461 = _1458 * (_1415.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1482 = (dot(vec3(_1062, _1063, _1064), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1492 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4453 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1494 + 1.0))) + _1499) * _1462;
        float _1509 = _1430 * 0.5;
        float _1510 = _1440 * 0.5;
        float _1511 = _1450 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_1062, _1063, _1064), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4486 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1536 + 1.0))) + _1541) * _1463;
        float _1551 = _1431 * 0.5;
        float _1552 = _1441 * 0.5;
        float _1553 = _1451 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_1062, _1063, _1064), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4497 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4508 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4519 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_1578 + 1.0))) + _1583) * _1464;
        _1600 = _1431;
        _1602 = _1430;
        _1603 = _1429;
        _1604 = _1441;
        _1605 = _1440;
        _1606 = _1439;
        _1607 = _1451;
        _1608 = _1450;
        _1609 = _1449;
        _1610 = _1464;
        _1611 = _1463;
        _1612 = _1462;
        _1613 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1614 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1615 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
    }
    else
    {
        _1600 = _1601;
        _1602 = _1601;
        _1603 = _1601;
        _1604 = _1601;
        _1605 = _1601;
        _1606 = _1601;
        _1607 = _1601;
        _1608 = _1601;
        _1609 = _1601;
        _1610 = _1601;
        _1611 = _1601;
        _1612 = _1601;
        _1613 = 0.0;
        _1614 = 0.0;
        _1615 = 0.0;
    }
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1638 = fma(_1299, cbModelParam._m0[30u].z, fma(_1295, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1291));
        float _1642 = fma(_1299, cbModelParam._m0[31u].z, fma(_1295, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1291));
        float _1646 = fma(_1299, cbModelParam._m0[32u].z, fma(_1295, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1291));
        float _1669 = _1291 + _1062;
        float _1670 = _1295 + _1063;
        float _1671 = _1299 + _1064;
        float _1681 = fma(_1671, cbModelParam._m0[30u].z, fma(_1670, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1669)) - _1638;
        float _1682 = fma(_1671, cbModelParam._m0[31u].z, fma(_1670, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1669)) - _1642;
        float _1683 = fma(_1671, cbModelParam._m0[32u].z, fma(_1670, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1669)) - _1646;
        float _1687 = inversesqrt(dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683)));
        float _1700 = ((_1687 * _1681) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1638 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1701 = ((_1687 * _1682) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1642 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1702 = ((_1687 * _1683) / cbModelParam._m0[35u].z) + ((((((_1646 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1704 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        vec4 _1711 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        vec4 _1718 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        vec4 _1725 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        float _1737 = exp2((_1704.w + (-0.5)) * 20.0) * 2.0;
        float _1738 = _1737 * (_1704.x + (-0.5));
        float _1739 = _1737 * (_1704.y + (-0.5));
        float _1740 = _1737 * (_1704.z + (-0.5));
        float _1747 = exp2((_1711.w + (-0.5)) * 20.0) * 2.0;
        float _1748 = _1747 * (_1711.x + (-0.5));
        float _1749 = _1747 * (_1711.y + (-0.5));
        float _1750 = _1747 * (_1711.z + (-0.5));
        float _1757 = exp2((_1718.w + (-0.5)) * 20.0) * 2.0;
        float _1758 = _1757 * (_1718.x + (-0.5));
        float _1759 = _1757 * (_1718.y + (-0.5));
        float _1760 = _1757 * (_1718.z + (-0.5));
        float _1767 = exp2((_1725.w + (-0.5)) * 20.0) * 2.0;
        float _1768 = _1767 * (_1725.x + (-0.5));
        float _1769 = _1767 * (_1725.y + (-0.5));
        float _1770 = _1767 * (_1725.z + (-0.5));
        float _1771 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1772 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1773 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1774 = _1738 * 0.5;
        float _1775 = _1748 * 0.5;
        float _1776 = _1758 * 0.5;
        float _1777 = dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776));
        float _1782 = (_1777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1777);
        float _1790 = (dot(vec3(_1062, _1063, _1064), vec3(_1782 * _1774, _1782 * _1775, _1782 * _1776)) + 1.0) * 0.5;
        float _4560 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1799 = sqrt(((_1775 * _1775) + (_1774 * _1774)) + (_1776 * _1776)) / (_1771 + 9.9999997473787516355514526367188e-06);
        float _4571 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1801 = _1800 * 2.0;
        float _1805 = (1.0 - _1800) / (_1800 + 1.0);
        float _4582 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1815 = ((((1.0 - _1806) * (_1801 + 2.0)) * exp2(log2(isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_1801 + 1.0))) + _1806) * _1771;
        float _1816 = _1739 * 0.5;
        float _1817 = _1749 * 0.5;
        float _1818 = _1759 * 0.5;
        float _1819 = dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818));
        float _1824 = (_1819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1819);
        float _1832 = (dot(vec3(_1062, _1063, _1064), vec3(_1824 * _1816, _1824 * _1817, _1824 * _1818)) + 1.0) * 0.5;
        float _4593 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1841 = sqrt(((_1817 * _1817) + (_1816 * _1816)) + (_1818 * _1818)) / (_1772 + 9.9999997473787516355514526367188e-06);
        float _4604 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1843 = _1842 * 2.0;
        float _1847 = (1.0 - _1842) / (_1842 + 1.0);
        float _4615 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _1857 = ((((1.0 - _1848) * (_1843 + 2.0)) * exp2(log2(isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_1843 + 1.0))) + _1848) * _1772;
        float _1858 = _1740 * 0.5;
        float _1859 = _1750 * 0.5;
        float _1860 = _1760 * 0.5;
        float _1861 = dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860));
        float _1866 = (_1861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1861);
        float _1874 = (dot(vec3(_1062, _1063, _1064), vec3(_1866 * _1858, _1866 * _1859, _1866 * _1860)) + 1.0) * 0.5;
        float _4626 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1883 = sqrt(((_1859 * _1859) + (_1858 * _1858)) + (_1860 * _1860)) / (_1773 + 9.9999997473787516355514526367188e-06);
        float _4637 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1884 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _1885 = _1884 * 2.0;
        float _1889 = (1.0 - _1884) / (_1884 + 1.0);
        float _4648 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _1899 = ((((1.0 - _1890) * (_1885 + 2.0)) * exp2(log2(isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_1885 + 1.0))) + _1890) * _1773;
        _1907 = _1740;
        _1908 = _1739;
        _1909 = _1738;
        _1910 = _1750;
        _1911 = _1749;
        _1912 = _1748;
        _1913 = _1760;
        _1914 = _1759;
        _1915 = _1758;
        _1916 = _1773;
        _1917 = _1772;
        _1918 = _1771;
        _1919 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)));
        _1920 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)));
        _1921 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)));
    }
    else
    {
        _1907 = _1601;
        _1908 = _1601;
        _1909 = _1601;
        _1910 = _1601;
        _1911 = _1601;
        _1912 = _1601;
        _1913 = _1601;
        _1914 = _1601;
        _1915 = _1601;
        _1916 = _1601;
        _1917 = _1601;
        _1918 = _1601;
        _1919 = 0.0;
        _1920 = 0.0;
        _1921 = 0.0;
    }
    float _1931 = (cbModelParam._m0[1u].x * (_1919 - _1613)) + _1613;
    float _1932 = (cbModelParam._m0[1u].x * (_1920 - _1614)) + _1614;
    float _1933 = (cbModelParam._m0[1u].x * (_1921 - _1615)) + _1615;
    float _1954 = fma(_1933, cbSceneParam._m0[89u].z, fma(_1932, cbSceneParam._m0[89u].y, _1931 * cbSceneParam._m0[89u].x));
    float _1957 = fma(_1933, cbSceneParam._m0[90u].z, fma(_1932, cbSceneParam._m0[90u].y, _1931 * cbSceneParam._m0[90u].x));
    float _1960 = fma(_1933, cbSceneParam._m0[91u].z, fma(_1932, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1931));
    float _1975 = _1235 * 0.5;
    float _1976 = _1236 * 0.5;
    float _1977 = _1237 * 0.5;
    float _1978 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1909, _1912, _1915, _1918));
    float _1981 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1908, _1911, _1914, _1917));
    float _1984 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1907, _1910, _1913, _1916));
    float _2018;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1991 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1600, _1604, _1607, _1610));
        float _1995 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1602, _1605, _1608, _1611));
        float _1999 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1603, _1606, _1609, _1612));
        float _2006 = dot(vec4(cbModelParam._m0[39u]), vec4(_1975, _1976, _1977, 1.0));
        _2018 = dot(vec3(isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0)), isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0)), isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2006) ? 0.0 : (isnan(0.0) ? _2006 : max(0.0, _2006))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2018 = 1.0;
    }
    float _2029;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2020 = dot(vec4(cbModelParam._m0[40u]), vec4(_1975, _1976, _1977, 1.0));
        _2029 = dot(vec3(isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0)), isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0)), isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2020) ? 0.0 : (isnan(0.0) ? _2020 : max(0.0, _2020))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2029 = 1.0;
    }
    float _2033 = (_2029 * cbModelParam._m0[1u].x) + (_2018 * (1.0 - cbModelParam._m0[1u].x));
    float _2043 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1065);
    float _2044 = isnan(_2043) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2043 : min(cbModelParam._m0[25u].z, _2043));
    float _2124;
    float _2126;
    float _2128;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2091 = fma(_1299, cbModelParam._m0[13u].z, fma(_1295, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1291)) + cbModelParam._m0[13u].w;
        float _2095 = fma(_1299, cbModelParam._m0[14u].z, fma(_1295, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1291)) + cbModelParam._m0[14u].w;
        float _2099 = fma(_1299, cbModelParam._m0[15u].z, fma(_1295, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1291)) + cbModelParam._m0[15u].w;
        float _2102 = fma(_1237, cbModelParam._m0[13u].z, fma(_1236, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1235));
        float _2105 = fma(_1237, cbModelParam._m0[14u].z, fma(_1236, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1235));
        float _2108 = fma(_1237, cbModelParam._m0[15u].z, fma(_1236, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1235));
        float _2136;
        if (_2102 > 0.0)
        {
            _2136 = abs((1.0 - _2091) / _2102);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2091 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2136 = frontier_phi_14_12_ladder;
        }
        float _2307;
        if (_2105 > 0.0)
        {
            _2307 = abs((1.0 - _2095) / _2105);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2095 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2307 = frontier_phi_23_19_ladder;
        }
        float _2602;
        if (_2108 > 0.0)
        {
            _2602 = abs((1.0 - _2099) / _2108);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2099 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2602 = frontier_phi_35_30_ladder;
        }
        float _2604 = isnan(_2307) ? _2136 : (isnan(_2136) ? _2307 : min(_2136, _2307));
        float _2605 = isnan(_2602) ? _2604 : (isnan(_2604) ? _2602 : min(_2604, _2602));
        float _2609 = (_2605 * _2102) + _2091;
        float _2610 = (_2605 * _2105) + _2095;
        float _2611 = (_2605 * _2108) + _2099;
        float _2612 = _2605 * 9.9999997473787516355514526367188e-05;
        float _2614 = (-1.0) - _2612;
        float _2616 = _2612 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2611 > _2616) || ((_2611 < _2614) || ((_2610 > _2616) || ((_2610 < _2614) || ((_2609 < _2614) || (_2609 > _2616))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2611, cbModelParam._m0[9u].z, fma(_2610, cbModelParam._m0[9u].y, _2609 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2611, cbModelParam._m0[10u].z, fma(_2610, cbModelParam._m0[10u].y, _2609 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2611, cbModelParam._m0[11u].z, fma(_2610, cbModelParam._m0[11u].y, _2609 * cbModelParam._m0[11u].x))), _2044);
            frontier_phi_13_35_ladder = _2756.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2756.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2756.x * cbModelParam._m0[1u].y;
        }
        _2124 = frontier_phi_13_35_ladder_2;
        _2126 = frontier_phi_13_35_ladder_1;
        _2128 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2112 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1235, _1236, _1237), _2044);
        _2124 = _2112.x * cbModelParam._m0[1u].y;
        _2126 = _2112.y * cbModelParam._m0[1u].y;
        _2128 = _2112.z * cbModelParam._m0[1u].y;
    }
    float _2132 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1065);
    float _2133 = isnan(_2132) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2132 : min(cbModelParam._m0[25u].w, _2132));
    float _2222;
    float _2224;
    float _2226;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2186 = fma(_1299, cbModelParam._m0[21u].z, fma(_1295, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1291)) + cbModelParam._m0[21u].w;
        float _2190 = fma(_1299, cbModelParam._m0[22u].z, fma(_1295, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1291)) + cbModelParam._m0[22u].w;
        float _2194 = fma(_1299, cbModelParam._m0[23u].z, fma(_1295, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1291)) + cbModelParam._m0[23u].w;
        float _2197 = fma(_1237, cbModelParam._m0[21u].z, fma(_1236, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1235));
        float _2200 = fma(_1237, cbModelParam._m0[22u].z, fma(_1236, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1235));
        float _2203 = fma(_1237, cbModelParam._m0[23u].z, fma(_1236, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1235));
        float _2312;
        if (_2197 > 0.0)
        {
            _2312 = abs((1.0 - _2186) / _2197);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2197 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2186 + 1.0) / _2197);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2312 = frontier_phi_25_21_ladder;
        }
        float _2629;
        if (_2200 > 0.0)
        {
            _2629 = abs((1.0 - _2190) / _2200);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2200 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2190 + 1.0) / _2200);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2629 = frontier_phi_37_32_ladder;
        }
        float _2967;
        if (_2203 > 0.0)
        {
            _2967 = abs((1.0 - _2194) / _2203);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2203 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2194 + 1.0) / _2203);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2967 = frontier_phi_47_44_ladder;
        }
        float _2969 = isnan(_2629) ? _2312 : (isnan(_2312) ? _2629 : min(_2312, _2629));
        float _2970 = isnan(_2967) ? _2969 : (isnan(_2969) ? _2967 : min(_2969, _2967));
        float _2974 = (_2970 * _2197) + _2186;
        float _2975 = (_2970 * _2200) + _2190;
        float _2976 = (_2970 * _2203) + _2194;
        float _2977 = _2970 * 9.9999997473787516355514526367188e-05;
        float _2978 = (-1.0) - _2977;
        float _2980 = _2977 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2976 > _2980) || ((_2976 < _2978) || ((_2975 > _2980) || ((_2975 < _2978) || ((_2974 < _2978) || (_2974 > _2980))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3098 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2976, cbModelParam._m0[17u].z, fma(_2975, cbModelParam._m0[17u].y, _2974 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2976, cbModelParam._m0[18u].z, fma(_2975, cbModelParam._m0[18u].y, _2974 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2976, cbModelParam._m0[19u].z, fma(_2975, cbModelParam._m0[19u].y, _2974 * cbModelParam._m0[19u].x))), _2133);
            frontier_phi_22_47_ladder = _3098.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3098.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3098.x * cbModelParam._m0[1u].z;
        }
        _2222 = frontier_phi_22_47_ladder_2;
        _2224 = frontier_phi_22_47_ladder_1;
        _2226 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2206 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1235, _1236, _1237), _2133);
        _2222 = _2206.x * cbModelParam._m0[1u].z;
        _2224 = _2206.y * cbModelParam._m0[1u].z;
        _2226 = _2206.z * cbModelParam._m0[1u].z;
    }
    float _2239 = (((_1262 * _1211) + _1263) * _1227) * ((cbModelParam._m0[1u].w * (_2222 - _2124)) + _2124);
    float _2241 = (((_1262 * _1213) + _1263) * _1227) * ((cbModelParam._m0[1u].w * (_2224 - _2126)) + _2126);
    float _2243 = (((_1262 * _1214) + _1263) * _1227) * ((cbModelParam._m0[1u].w * (_2226 - _2128)) + _2128);
    float _2246 = fma(_2243, cbSceneParam._m0[89u].z, fma(_2241, cbSceneParam._m0[89u].y, _2239 * cbSceneParam._m0[89u].x));
    float _2249 = fma(_2243, cbSceneParam._m0[90u].z, fma(_2241, cbSceneParam._m0[90u].y, _2239 * cbSceneParam._m0[90u].x));
    float _2252 = fma(_2243, cbSceneParam._m0[91u].z, fma(_2241, cbSceneParam._m0[91u].y, _2239 * cbSceneParam._m0[91u].x));
    float _2286 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2290 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2294 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2298 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2299 = _2286 / _2298;
    float _2300 = _2290 / _2298;
    float _2301 = _2294 / _2298;
    float _2448;
    float _2449;
    float _2450;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2328 = ((uint(_2301 > cbSceneParam._m0[59u].y) + uint(_2301 > cbSceneParam._m0[59u].x)) + uint(_2301 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2329 = _2328 + 43u;
        uint _2337 = _2328 + 44u;
        uint _2345 = _2328 + 45u;
        uint _2353 = _2328 + 46u;
        float _2364 = fma(_2298, cbSceneParam._m0[_2329].w, fma(_2294, cbSceneParam._m0[_2329].z, fma(_2290, cbSceneParam._m0[_2329].y, _2286 * cbSceneParam._m0[_2329].x)));
        float _2368 = fma(_2298, cbSceneParam._m0[_2337].w, fma(_2294, cbSceneParam._m0[_2337].z, fma(_2290, cbSceneParam._m0[_2337].y, _2286 * cbSceneParam._m0[_2337].x)));
        float _2376 = fma(_2298, cbSceneParam._m0[_2353].w, fma(_2294, cbSceneParam._m0[_2353].z, fma(_2290, cbSceneParam._m0[_2353].y, _2286 * cbSceneParam._m0[_2353].x)));
        float _2381 = cbSceneParam._m0[33u].z * _2376;
        float _2383 = cbSceneParam._m0[33u].w * _2376;
        float _2386 = fma(_2298, cbSceneParam._m0[_2345].w, fma(_2294, cbSceneParam._m0[_2345].z, fma(_2290, cbSceneParam._m0[_2345].y, _2286 * cbSceneParam._m0[_2345].x))) / _2376;
        float _2434 = (cbSceneParam._m0[33u].x - sqrt(((_2300 * _2300) + (_2299 * _2299)) + (_2301 * _2301))) * cbSceneParam._m0[33u].y;
        float _4774 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2441 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2381 + _2364) / _2376, (_2383 + _2368) / _2376), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2383 + _2364) / _2376, (_2368 - _2381) / _2376), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2364 - _2381) / _2376, (_2368 - _2383) / _2376), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2364 - _2383) / _2376, (_2381 + _2368) / _2376), _2386), 0.0)).x), vec4(0.25)));
        _2448 = 1.0 - (_2441 * cbSceneParam._m0[34u].x);
        _2449 = 1.0 - (_2441 * cbSceneParam._m0[34u].y);
        _2450 = 1.0 - (_2441 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2448 = 1.0;
        _2449 = 1.0;
        _2450 = 1.0;
    }
    float _2514;
    float _2516;
    float _2518;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2502 = fma(_2298, cbSceneParam._m0[63u].w, fma(_2294, cbSceneParam._m0[63u].z, fma(_2290, cbSceneParam._m0[63u].y, _2286 * cbSceneParam._m0[63u].x)));
        float _2503 = fma(_2298, cbSceneParam._m0[60u].w, fma(_2294, cbSceneParam._m0[60u].z, fma(_2290, cbSceneParam._m0[60u].y, _2286 * cbSceneParam._m0[60u].x))) / _2502;
        float _2504 = fma(_2298, cbSceneParam._m0[61u].w, fma(_2294, cbSceneParam._m0[61u].z, fma(_2290, cbSceneParam._m0[61u].y, _2286 * cbSceneParam._m0[61u].x))) / _2502;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2503 >= cbSceneParam._m0[64u].x) && (_2504 >= cbSceneParam._m0[64u].y)) && (_2503 <= cbSceneParam._m0[64u].z)) && (_2504 <= cbSceneParam._m0[64u].w))
        {
            float _2642 = fma(_2298, cbSceneParam._m0[62u].w, fma(_2294, cbSceneParam._m0[62u].z, fma(_2290, cbSceneParam._m0[62u].y, _2286 * cbSceneParam._m0[62u].x))) / _2502;
            float _2646 = isnan(cbSceneParam._m0[41u].w) ? _2642 : (isnan(_2642) ? cbSceneParam._m0[41u].w : max(_2642, cbSceneParam._m0[41u].w));
            float _2689 = (cbSceneParam._m0[33u].x - sqrt(((_2300 * _2300) + (_2299 * _2299)) + (_2301 * _2301))) * cbSceneParam._m0[33u].y;
            float _4790 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
            float _2696 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2503, cbSceneParam._m0[33u].w + _2504), _2646), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2503, _2504 - cbSceneParam._m0[33u].z), _2646), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2503 - cbSceneParam._m0[33u].z, _2504 - cbSceneParam._m0[33u].w), _2646), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2503 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2504), _2646), 0.0)).x), vec4(0.25)));
            float _2700 = 1.0 - (_2696 * cbSceneParam._m0[34u].x);
            float _2701 = 1.0 - (_2696 * cbSceneParam._m0[34u].y);
            float _2702 = 1.0 - (_2696 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2702) ? _2450 : (isnan(_2450) ? _2702 : min(_2450, _2702));
            frontier_phi_34_33_ladder_1 = isnan(_2701) ? _2449 : (isnan(_2449) ? _2701 : min(_2449, _2701));
            frontier_phi_34_33_ladder_2 = isnan(_2700) ? _2448 : (isnan(_2448) ? _2700 : min(_2448, _2700));
        }
        else
        {
            frontier_phi_34_33_ladder = _2450;
            frontier_phi_34_33_ladder_1 = _2449;
            frontier_phi_34_33_ladder_2 = _2448;
        }
        _2514 = frontier_phi_34_33_ladder_2;
        _2516 = frontier_phi_34_33_ladder_1;
        _2518 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2514 = _2448;
        _2516 = _2449;
        _2518 = _2450;
    }
    uvec4 _2523 = floatBitsToUint(cbInstanceData._m0[_290 + 5u]);
    uint _2525 = _2523.x * 14u;
    uint _2526 = _2525 + 13u;
    float _2533 = _1227 + (-1.0);
    float _2538 = (cbLight._m0[_2526].x * _2533) + 1.0;
    float _2539 = (cbLight._m0[_2526].y * _2533) + 1.0;
    float _2540 = (cbLight._m0[_2526].z * _2533) + 1.0;
    float _2541 = (cbLight._m0[_2526].w * _2533) + 1.0;
    uint _2542 = _2525 + 5u;
    float _2548 = isnan(1.0) ? _2539 : (isnan(_2539) ? 1.0 : min(_2539, 1.0));
    uint _2552 = _2525 + 4u;
    float _2561 = isnan(1.0) ? _2538 : (isnan(_2538) ? 1.0 : min(_2538, 1.0));
    uint _2565 = _2525 | 1u;
    float _2576 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_1062, _1063, _1064));
    float _2579 = dot(vec3(cbLight._m0[_2565].xyz), vec3(_1062, _1063, _1064));
    float _4826 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _4837 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2584 = (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * 0.3183098733425140380859375;
    float _2586 = (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * 0.3183098733425140380859375;
    float _2593 = ((cbLight._m0[_2542].x * _2548) * _2586) + (((cbLight._m0[_2552].x * _2514) * _2561) * _2584);
    float _2594 = ((_2548 * cbLight._m0[_2542].y) * _2586) + (((cbLight._m0[_2552].y * _2516) * _2561) * _2584);
    float _2595 = ((_2548 * cbLight._m0[_2542].z) * _2586) + (((cbLight._m0[_2552].z * _2518) * _2561) * _2584);
    uvec4 _2599 = floatBitsToUint(cbLight._m0[_2525 + 12u]);
    bool _2601 = _2599.x == 0u;
    float _2703;
    float _2705;
    float _2707;
    if (_2601)
    {
        _2703 = _2593;
        _2705 = _2594;
        _2707 = _2595;
    }
    else
    {
        uint _2711 = _2525 + 6u;
        float _2727 = (dot(vec3(cbLight._m0[_2525 + 2u].xyz), vec3(_1062, _1063, _1064)) * 0.5) + 0.5;
        float _2728 = _2727 * _2727;
        float _4848 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2729 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
        float _2730 = isnan(1.0) ? _2540 : (isnan(_2540) ? 1.0 : min(_2540, 1.0));
        _2703 = (((cbLight._m0[_2711].x * 0.3183098733425140380859375) * _2729) * _2730) + _2593;
        _2705 = (((cbLight._m0[_2711].y * 0.3183098733425140380859375) * _2729) * _2730) + _2594;
        _2707 = (((cbLight._m0[_2711].z * 0.3183098733425140380859375) * _2729) * _2730) + _2595;
    }
    bool _2710 = _2599.y == 0u;
    float _2765;
    float _2767;
    float _2769;
    if (_2710)
    {
        _2765 = _2703;
        _2767 = _2705;
        _2769 = _2707;
    }
    else
    {
        uint _2938 = _2525 + 7u;
        float _2954 = (dot(vec3(cbLight._m0[_2525 + 3u].xyz), vec3(_1062, _1063, _1064)) * 0.5) + 0.5;
        float _2955 = _2954 * _2954;
        float _4864 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2956 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
        float _2957 = isnan(1.0) ? _2541 : (isnan(_2541) ? 1.0 : min(_2541, 1.0));
        _2765 = (((cbLight._m0[_2938].x * 0.3183098733425140380859375) * _2956) * _2957) + _2703;
        _2767 = (((cbLight._m0[_2938].y * 0.3183098733425140380859375) * _2956) * _2957) + _2705;
        _2769 = (((cbLight._m0[_2938].z * 0.3183098733425140380859375) * _2956) * _2957) + _2707;
    }
    uint _2772 = _2525 + 8u;
    float _2785 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _1065) * 0.949999988079071044921875);
    float _2786 = _2785 * _2785;
    float _2787 = cbLight._m0[_2525].x + _1141;
    float _2788 = cbLight._m0[_2525].y + _1142;
    float _2789 = cbLight._m0[_2525].z + _1143;
    float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
    float _2794 = _2793 * _2787;
    float _2795 = _2793 * _2788;
    float _2796 = _2793 * _2789;
    float _2797 = dot(vec3(_1062, _1063, _1064), vec3(cbLight._m0[_2525].xyz));
    float _4880 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
    float _2800 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
    float _4891 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
    float _2801 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
    float _2802 = dot(vec3(_1062, _1063, _1064), vec3(_2794, _2795, _2796));
    float _4902 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
    float _2805 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
    float _2806 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2794, _2795, _2796));
    float _4913 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
    float _2810 = _2786 * _2786;
    float _2814 = ((_2805 * _2805) * (_2810 + (-1.0))) + 1.0;
    float _2822 = exp2(log2(1.0 - (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0)))) * 5.0);
    float _2823 = 0.959999978542327880859375 - _1208;
    float _2825 = 0.959999978542327880859375 - _1209;
    float _2826 = 0.959999978542327880859375 - _1210;
    float _2833 = 1.0 - _2786;
    float _2844 = (0.5 / (((_2801 * ((_2800 * _2833) + _2786)) + 9.9999999392252902907785028219223e-09) + (((_2801 * _2833) + _2786) * _2800))) * _2800;
    float _4924 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
    float _2846 = (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2810 / ((_2814 * _2814) * 3.141590118408203125));
    uint _2860 = _2525 + 9u;
    float _2871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2565].w)) * _1065) * 0.949999988079071044921875);
    float _2872 = _2871 * _2871;
    float _2873 = cbLight._m0[_2565].x + _1141;
    float _2874 = cbLight._m0[_2565].y + _1142;
    float _2875 = cbLight._m0[_2565].z + _1143;
    float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
    float _2880 = _2879 * _2873;
    float _2881 = _2879 * _2874;
    float _2882 = _2879 * _2875;
    float _2883 = dot(vec3(_1062, _1063, _1064), vec3(cbLight._m0[_2565].xyz));
    float _4935 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
    float _2886 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
    float _2887 = dot(vec3(_1062, _1063, _1064), vec3(_2880, _2881, _2882));
    float _4946 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
    float _2890 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
    float _2891 = dot(vec3(cbLight._m0[_2565].xyz), vec3(_2880, _2881, _2882));
    float _4957 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
    float _2895 = _2872 * _2872;
    float _2899 = ((_2890 * _2890) * (_2895 + (-1.0))) + 1.0;
    float _2906 = exp2(log2(1.0 - (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) * 5.0);
    float _2913 = 1.0 - _2872;
    float _2923 = (0.5 / (((_2801 * ((_2886 * _2913) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2801 * _2913) + _2872) * _2886))) * _2886;
    float _4968 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
    float _2925 = (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2895 / ((_2899 * _2899) * 3.141590118408203125));
    float _2935 = (((((_2906 * _2823) + _1211) * cbLight._m0[_2860].x) * _2925) * _2548) + ((((cbLight._m0[_2772].x * _2514) * ((_2822 * _2823) + _1211)) * _2846) * _2561);
    float _2936 = (((((_2906 * _2825) + _1213) * cbLight._m0[_2860].y) * _2925) * _2548) + ((((cbLight._m0[_2772].y * _2516) * ((_2822 * _2825) + _1213)) * _2846) * _2561);
    float _2937 = (((((_2906 * _2826) + _1214) * cbLight._m0[_2860].z) * _2925) * _2548) + ((((cbLight._m0[_2772].z * _2518) * ((_2822 * _2826) + _1214)) * _2846) * _2561);
    float _2993;
    float _2995;
    float _2997;
    if (_2601)
    {
        _2993 = _2935;
        _2995 = _2936;
        _2997 = _2937;
    }
    else
    {
        uint _2999 = _2525 + 2u;
        uint _3003 = _2525 + 10u;
        float _3017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2999].w)) * _1065) * 0.949999988079071044921875);
        float _3018 = _3017 * _3017;
        float _3019 = cbLight._m0[_2999].x + _1141;
        float _3020 = cbLight._m0[_2999].y + _1142;
        float _3021 = cbLight._m0[_2999].z + _1143;
        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
        float _3026 = _3025 * _3019;
        float _3027 = _3025 * _3020;
        float _3028 = _3025 * _3021;
        float _3029 = dot(vec3(_1062, _1063, _1064), vec3(cbLight._m0[_2999].xyz));
        float _4979 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3032 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
        float _3033 = dot(vec3(_1062, _1063, _1064), vec3(_3026, _3027, _3028));
        float _4990 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3036 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
        float _3037 = dot(vec3(cbLight._m0[_2999].xyz), vec3(_3026, _3027, _3028));
        float _5001 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
        float _3041 = _3018 * _3018;
        float _3045 = ((_3036 * _3036) * (_3041 + (-1.0))) + 1.0;
        float _3052 = exp2(log2(1.0 - (isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0)))) * 5.0);
        float _3059 = 1.0 - _3018;
        float _3069 = (0.5 / (((_2801 * ((_3032 * _3059) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_2801 * _3059) + _3018) * _3032))) * _3032;
        float _5012 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        float _3071 = (isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0))) * (_3041 / ((_3045 * _3045) * 3.141590118408203125));
        float _3072 = isnan(1.0) ? _2540 : (isnan(_2540) ? 1.0 : min(_2540, 1.0));
        _2993 = (((((_3052 * _2823) + _1211) * cbLight._m0[_3003].x) * _3071) * _3072) + _2935;
        _2995 = (((((_3052 * _2825) + _1213) * cbLight._m0[_3003].y) * _3071) * _3072) + _2936;
        _2997 = (((((_3052 * _2826) + _1214) * cbLight._m0[_3003].z) * _3071) * _3072) + _2937;
    }
    float _3103;
    float _3105;
    float _3107;
    if (_2710)
    {
        _3103 = _2993;
        _3105 = _2995;
        _3107 = _2997;
    }
    else
    {
        uint _3114 = _2525 + 3u;
        uint _3118 = _2525 + 11u;
        float _3132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3114].w)) * _1065) * 0.949999988079071044921875);
        float _3133 = _3132 * _3132;
        float _3134 = cbLight._m0[_3114].x + _1141;
        float _3135 = cbLight._m0[_3114].y + _1142;
        float _3136 = cbLight._m0[_3114].z + _1143;
        float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
        float _3141 = _3140 * _3134;
        float _3142 = _3140 * _3135;
        float _3143 = _3140 * _3136;
        float _3144 = dot(vec3(_1062, _1063, _1064), vec3(cbLight._m0[_3114].xyz));
        float _5028 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
        float _3147 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
        float _3148 = dot(vec3(_1062, _1063, _1064), vec3(_3141, _3142, _3143));
        float _5039 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
        float _3151 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
        float _3152 = dot(vec3(cbLight._m0[_3114].xyz), vec3(_3141, _3142, _3143));
        float _5050 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
        float _3156 = _3133 * _3133;
        float _3160 = ((_3151 * _3151) * (_3156 + (-1.0))) + 1.0;
        float _3167 = exp2(log2(1.0 - (isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0)))) * 5.0);
        float _3174 = 1.0 - _3133;
        float _3184 = (0.5 / (((_2801 * ((_3147 * _3174) + _3133)) + 9.9999999392252902907785028219223e-09) + (((_2801 * _3174) + _3133) * _3147))) * _3147;
        float _5061 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
        float _3186 = (isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3156 / ((_3160 * _3160) * 3.141590118408203125));
        float _3187 = isnan(1.0) ? _2541 : (isnan(_2541) ? 1.0 : min(_2541, 1.0));
        _3103 = (((((_3167 * _2823) + _1211) * cbLight._m0[_3118].x) * _3186) * _3187) + _2993;
        _3105 = (((((_3167 * _2825) + _1213) * cbLight._m0[_3118].y) * _3186) * _3187) + _2995;
        _3107 = (((((_3167 * _2826) + _1214) * cbLight._m0[_3118].z) * _3186) * _3187) + _2997;
    }
    float _3253;
    float _3255;
    float _3257;
    float _3259;
    float _3261;
    float _3263;
    if (_2523.y == 0u)
    {
        uvec4 _3208 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3209 = _3208.x;
        uint _3220 = uint((float(_3208.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1150) / _3209))) + floor(float(uint(cbSceneParam._m0[85u].x * _1149) / _3209)));
        float _3230 = (log2(_2301 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3231 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
        uint _3234 = uint(isnan(14.0) ? _3231 : (isnan(_3231) ? 14.0 : min(_3231, 14.0)));
        uvec4 _3239 = texelFetch(g_lightClusterGridBuffer, int(((_3234 << 2u) + (_3220 << 6u)) >> 2u));
        uint _3240 = _3239.x;
        uint _3241 = _3208.z;
        float _3320;
        float _3322;
        float _3324;
        float _3326;
        float _3328;
        float _3330;
        if (((((1u << ((_3241 >> 4u) & 15u)) + 4294967295u) & _3240) == 0u) || ((_3241 & 240u) == 0u))
        {
            _3320 = 0.0;
            _3322 = 0.0;
            _3324 = 0.0;
            _3326 = 0.0;
            _3328 = 0.0;
            _3330 = 0.0;
        }
        else
        {
            float _3321;
            float _3323;
            float _3325;
            float _3327;
            float _3329;
            float _3331;
            float _3465 = 0.0;
            float _3466 = 0.0;
            float _3467 = 0.0;
            float _3468 = 0.0;
            float _3469 = 0.0;
            float _3470 = 0.0;
            uint _3471 = 0u;
            uint _3480;
            bool _3481;
            for (;;)
            {
                _3480 = texelFetch(g_lightClassification, int((((_3234 << 5u) + (_3220 << 9u)) + (_3471 << 2u)) >> 2u)).x;
                _3481 = _3480 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3481)
                {
                    frontier_phi_66_pred = _3470;
                    frontier_phi_66_pred_1 = _3469;
                    frontier_phi_66_pred_2 = _3468;
                    frontier_phi_66_pred_3 = _3467;
                    frontier_phi_66_pred_4 = _3466;
                    frontier_phi_66_pred_5 = _3465;
                }
                else
                {
                    float _3589;
                    float _3590;
                    float _3591;
                    float _3592;
                    float _3593;
                    float _3594;
                    uint _3595;
                    _3589 = _3465;
                    _3590 = _3466;
                    _3591 = _3467;
                    _3592 = _3468;
                    _3593 = _3469;
                    _3594 = _3470;
                    _3595 = _3480;
                    float _3521;
                    float _3522;
                    float _3523;
                    float _3524;
                    float _3525;
                    float _3526;
                    for (;;)
                    {
                        uint _3599 = uint(findLSB(_3595)) + (_3471 << 5u);
                        uint _3596 = (_3595 + 4294967295u) & _3595;
                        uint _3601 = _3599 * 48u;
                        vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3601)).x, texelFetch(g_PointLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3601 + 3u)).x));
                        uint _3621 = (_3599 * 48u) + 4u;
                        vec4 _3634 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3621)).x, texelFetch(g_PointLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3621 + 3u)).x));
                        uint _3640 = (_3599 * 48u) + 8u;
                        vec3 _3651 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3640)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 2u)).x));
                        float _3655 = _3615.x - _2299;
                        float _3656 = _3615.y - _2300;
                        float _3657 = _3615.z - _2301;
                        float _3658 = dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657));
                        float _3661 = inversesqrt(_3658);
                        float _3662 = _3661 * _3655;
                        float _3663 = _3661 * _3656;
                        float _3664 = _3661 * _3657;
                        float _3665 = dot(vec3(_1168, _1171, _1174), vec3(_3662, _3663, _3664));
                        float _3670 = 1.0 - (_3658 * _3615.w);
                        float _5087 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                        float _3671 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
                        float _3672 = sqrt(_3658) * _3634.w;
                        float _3675 = 1.39999997615814208984375 / (_3672 + 1.39999997615814208984375);
                        float _3676 = _3675 * _3675;
                        float _3679 = ((1.0 - _3676) * _3665) + _3676;
                        float _3682 = _3672 * _3672;
                        float _3686 = ((isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0))) * _3671) / ((_3682 * 0.699999988079071044921875) + 1.0);
                        float _3690 = (-0.0) - _2299;
                        float _3691 = (-0.0) - _2300;
                        float _3692 = (-0.0) - _2301;
                        float _3696 = inversesqrt(dot(vec3(_3690, _3691, _3692), vec3(_3690, _3691, _3692)));
                        float _3697 = _3696 * _3690;
                        float _3698 = _3696 * _3691;
                        float _3699 = _3696 * _3692;
                        float _3706 = exp2(log2(1.0 / ((_3682 * 3.5) + 5.0)) * 0.25);
                        float _3707 = 1.0 - _1243;
                        float _3714 = sqrt(1.0 - ((1.0 - (_3707 * _3707)) * (1.0 - (_3706 * _3706))));
                        float _3715 = _3714 * _3714;
                        float _3716 = _3715 * _3715;
                        float _3717 = _3697 + _3662;
                        float _3718 = _3698 + _3663;
                        float _3719 = _3699 + _3664;
                        float _3723 = inversesqrt(dot(vec3(_3717, _3718, _3719), vec3(_3717, _3718, _3719)));
                        float _3727 = dot(vec3(_1168, _1171, _1174), vec3(_3697, _3698, _3699));
                        float _5103 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                        float _3730 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
                        float _3731 = dot(vec3(_1168, _1171, _1174), vec3(_3723 * _3717, _3723 * _3718, _3723 * _3719));
                        float _5114 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                        float _3734 = isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0));
                        float _3738 = ((_3734 * _3734) * (_3716 + (-1.0))) + 1.0;
                        float _3739 = _3675 * _3715;
                        float _3740 = _3739 * _3739;
                        float _3743 = ((1.0 - _3740) * _3665) + _3740;
                        float _5125 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                        float _3744 = isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0));
                        float _3745 = 1.0 - _3715;
                        float _3755 = (0.5 / (((_3744 * ((_3730 * _3745) + _3715)) + 9.9999999392252902907785028219223e-09) + (((_3744 * _3745) + _3715) * _3730))) * _3744;
                        float _5136 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                        float _3766 = (((_3716 * 3.1415927410125732421875) * (isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0)))) / ((_3738 * _3738) * ((_3682 * 2.1991131305694580078125) + 3.141590118408203125))) * _3671;
                        _3524 = (_3686 * _3634.x) + _3592;
                        _3525 = (_3686 * _3634.y) + _3593;
                        _3526 = (_3686 * _3634.z) + _3594;
                        _3521 = (_3766 * _3651.x) + _3589;
                        _3522 = (_3766 * _3651.y) + _3590;
                        _3523 = (_3766 * _3651.z) + _3591;
                        if (_3596 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3589 = _3521;
                            _3590 = _3522;
                            _3591 = _3523;
                            _3592 = _3524;
                            _3593 = _3525;
                            _3594 = _3526;
                            _3595 = _3596;
                        }
                    }
                    frontier_phi_66_pred = _3526;
                    frontier_phi_66_pred_1 = _3525;
                    frontier_phi_66_pred_2 = _3524;
                    frontier_phi_66_pred_3 = _3523;
                    frontier_phi_66_pred_4 = _3522;
                    frontier_phi_66_pred_5 = _3521;
                }
                _3331 = frontier_phi_66_pred;
                _3329 = frontier_phi_66_pred_1;
                _3327 = frontier_phi_66_pred_2;
                _3325 = frontier_phi_66_pred_3;
                _3323 = frontier_phi_66_pred_4;
                _3321 = frontier_phi_66_pred_5;
                uint _3472 = _3471 + 1u;
                if (_3472 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3465 = _3321;
                    _3466 = _3323;
                    _3467 = _3325;
                    _3468 = _3327;
                    _3469 = _3329;
                    _3470 = _3331;
                    _3471 = _3472;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3320 = _3321;
            _3322 = _3323;
            _3324 = _3325;
            _3326 = _3327;
            _3328 = _3329;
            _3330 = _3331;
        }
        uvec4 _3334 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3335 = _3334.z;
        uint _3337 = (_3335 >> 8u) & 15u;
        float _3433;
        float _3435;
        float _3437;
        float _3439;
        float _3441;
        float _3443;
        if (((4294967295u << _3337) & _3240) == 0u)
        {
            _3433 = _3320;
            _3435 = _3322;
            _3437 = _3324;
            _3439 = _3326;
            _3441 = _3328;
            _3443 = _3330;
        }
        else
        {
            float _3458 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
            float _3459 = _3458 * _2299;
            float _3460 = _3458 * _2300;
            float _3461 = _3458 * _2301;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3337 < ((_3335 >> 12u) & 15u))
            {
                float _3434;
                float _3436;
                float _3438;
                float _3440;
                float _3442;
                float _3444;
                float _3572 = _3320;
                float _3573 = _3322;
                float _3574 = _3324;
                float _3575 = _3326;
                float _3576 = _3328;
                float _3577 = _3330;
                uint _3578 = _3337;
                uint _3587;
                bool _3588;
                for (;;)
                {
                    _3587 = texelFetch(g_lightClassification, int((((_3234 << 5u) + (_3220 << 9u)) + (_3578 << 2u)) >> 2u)).x;
                    _3588 = _3587 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3588)
                    {
                        frontier_phi_72_pred = _3577;
                        frontier_phi_72_pred_1 = _3576;
                        frontier_phi_72_pred_2 = _3575;
                        frontier_phi_72_pred_3 = _3574;
                        frontier_phi_72_pred_4 = _3573;
                        frontier_phi_72_pred_5 = _3572;
                    }
                    else
                    {
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _4064;
                        float _4065;
                        float _4066;
                        float _4067;
                        float _4068;
                        float _4069;
                        float _3784 = _3572;
                        float _3785 = _3573;
                        float _3786 = _3574;
                        float _3787 = _3575;
                        float _3788 = _3576;
                        float _3789 = _3577;
                        uint _3790 = _3587;
                        uint _3791;
                        vec4 _3816;
                        float _3817;
                        vec4 _3832;
                        vec3 _3844;
                        vec4 _3859;
                        vec4 _3874;
                        float _3920;
                        bool _3921;
                        for (;;)
                        {
                            uint _3801 = ((_3578 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3790));
                            _3791 = (_3790 + 4294967295u) & _3790;
                            uint _3803 = _3801 * 40u;
                            _3816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 3u)).x));
                            _3817 = _3816.w;
                            uint _3819 = (_3801 * 40u) + 4u;
                            _3832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 3u)).x));
                            uint _3834 = (_3801 * 40u) + 8u;
                            _3844 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 2u)).x));
                            uint _3846 = (_3801 * 40u) + 16u;
                            _3859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 3u)).x));
                            uint _3861 = (_3801 * 40u) + 20u;
                            _3874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 3u)).x));
                            uint _3876 = (_3801 * 40u) + 24u;
                            vec4 _3889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3876 + 3u)).x));
                            uint _3895 = (_3801 * 40u) + 28u;
                            vec4 _3908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 3u)).x));
                            _3920 = fma(_2301, _3908.z, fma(_2300, _3908.y, _3908.x * _2299)) + _3908.w;
                            _3921 = !((fma(_2301, _3889.z, fma(_2300, _3889.y, _3889.x * _2299)) + _3889.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3921)
                            {
                                float _3948 = _3816.x - _2299;
                                float _3949 = _3816.y - _2300;
                                float _3950 = _3816.z - _2301;
                                float _3951 = dot(vec3(_3948, _3949, _3950), vec3(_3948, _3949, _3950));
                                float _3954 = inversesqrt(_3951);
                                float _3955 = _3954 * _3948;
                                float _3956 = _3954 * _3949;
                                float _3957 = _3954 * _3950;
                                float _3961 = 1.0 - (_3951 / (_3817 * _3817));
                                float _5147 = isnan(0.0) ? _3961 : (isnan(_3961) ? 0.0 : max(_3961, 0.0));
                                float _3962 = isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0));
                                float _3966 = sqrt(_3951) * _3832.w;
                                float _3968 = 1.39999997615814208984375 / (_3966 + 1.39999997615814208984375);
                                float _3969 = _3968 * _3968;
                                float _3972 = ((1.0 - _3969) * dot(vec3(_3955, _3956, _3957), vec3(_1168, _1171, _1174))) + _3969;
                                float _3975 = _3966 * _3966;
                                float _3979 = (fma(_2301, _3859.z, fma(_2300, _3859.y, _3859.x * _2299)) + _3859.w) / _3920;
                                float _3980 = (fma(_2301, _3874.z, fma(_2300, _3874.y, _3874.x * _2299)) + _3874.w) / _3920;
                                float _3984 = 1.0 - dot(vec2(_3979, _3980), vec2(_3979, _3980));
                                float _5163 = isnan(0.0) ? _3984 : (isnan(_3984) ? 0.0 : max(_3984, 0.0));
                                float _3985 = isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0));
                                float _3986 = _3985 * (((isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0))) * _3962) / ((_3975 * 0.699999988079071044921875) + 1.0));
                                float _3998 = exp2(log2(1.0 / ((_3975 * 3.5) + 5.0)) * 0.25);
                                float _3999 = 1.0 - _1243;
                                float _4006 = sqrt(1.0 - ((1.0 - (_3999 * _3999)) * (1.0 - (_3998 * _3998))));
                                float _4007 = _4006 * _4006;
                                float _4008 = _4007 * _4007;
                                float _4009 = _3955 - _3459;
                                float _4010 = _3956 - _3460;
                                float _4011 = _3957 - _3461;
                                float _4015 = inversesqrt(dot(vec3(_4009, _4010, _4011), vec3(_4009, _4010, _4011)));
                                float _4019 = dot(vec3(_1168, _1171, _1174), vec3((-0.0) - _3459, (-0.0) - _3460, (-0.0) - _3461));
                                float _5174 = isnan(0.0) ? _4019 : (isnan(_4019) ? 0.0 : max(_4019, 0.0));
                                float _4022 = isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0));
                                float _4023 = dot(vec3(_1168, _1171, _1174), vec3(_4015 * _4009, _4015 * _4010, _4015 * _4011));
                                float _5185 = isnan(0.0) ? _4023 : (isnan(_4023) ? 0.0 : max(_4023, 0.0));
                                float _4026 = isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0));
                                float _4030 = ((_4026 * _4026) * (_4008 + (-1.0))) + 1.0;
                                float _4031 = _3968 * _4007;
                                float _4032 = _4031 * _4031;
                                float _4038 = ((1.0 - _4032) * dot(vec3(_1168, _1171, _1174), vec3(_3955, _3956, _3957))) + _4032;
                                float _5196 = isnan(0.0) ? _4038 : (isnan(_4038) ? 0.0 : max(_4038, 0.0));
                                float _4039 = isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0));
                                float _4040 = 1.0 - _4007;
                                float _4050 = (0.5 / (((_4039 * ((_4022 * _4040) + _4007)) + 9.9999999392252902907785028219223e-09) + (((_4039 * _4040) + _4007) * _4022))) * _4039;
                                float _5207 = isnan(0.0) ? _4050 : (isnan(_4050) ? 0.0 : max(_4050, 0.0));
                                float _4060 = (_3985 * _3962) * (((_4008 * 3.1415927410125732421875) * (isnan(1.0) ? _5207 : (isnan(_5207) ? 1.0 : min(_5207, 1.0)))) / ((_4030 * _4030) * ((_3975 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3986 * _3832.y;
                                frontier_phi_78_pred_1 = _3986 * _3832.x;
                                frontier_phi_78_pred_2 = _4060 * _3844.z;
                                frontier_phi_78_pred_3 = _4060 * _3844.y;
                                frontier_phi_78_pred_4 = _4060 * _3844.x;
                                frontier_phi_78_pred_5 = _3986 * _3832.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4068 = frontier_phi_78_pred;
                            _4067 = frontier_phi_78_pred_1;
                            _4066 = frontier_phi_78_pred_2;
                            _4065 = frontier_phi_78_pred_3;
                            _4064 = frontier_phi_78_pred_4;
                            _4069 = frontier_phi_78_pred_5;
                            _3774 = _4067 + _3787;
                            _3775 = _4068 + _3788;
                            _3776 = _4069 + _3789;
                            _3771 = _4064 + _3784;
                            _3772 = _4065 + _3785;
                            _3773 = _4066 + _3786;
                            if (_3791 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3784 = _3771;
                                _3785 = _3772;
                                _3786 = _3773;
                                _3787 = _3774;
                                _3788 = _3775;
                                _3789 = _3776;
                                _3790 = _3791;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3776;
                        frontier_phi_72_pred_1 = _3775;
                        frontier_phi_72_pred_2 = _3774;
                        frontier_phi_72_pred_3 = _3773;
                        frontier_phi_72_pred_4 = _3772;
                        frontier_phi_72_pred_5 = _3771;
                    }
                    _3444 = frontier_phi_72_pred;
                    _3442 = frontier_phi_72_pred_1;
                    _3440 = frontier_phi_72_pred_2;
                    _3438 = frontier_phi_72_pred_3;
                    _3436 = frontier_phi_72_pred_4;
                    _3434 = frontier_phi_72_pred_5;
                    uint _3579 = _3578 + 1u;
                    if (_3579 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3572 = _3434;
                        _3573 = _3436;
                        _3574 = _3438;
                        _3575 = _3440;
                        _3576 = _3442;
                        _3577 = _3444;
                        _3578 = _3579;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3444;
                frontier_phi_60_61_ladder_1 = _3442;
                frontier_phi_60_61_ladder_2 = _3438;
                frontier_phi_60_61_ladder_3 = _3436;
                frontier_phi_60_61_ladder_4 = _3434;
                frontier_phi_60_61_ladder_5 = _3440;
            }
            else
            {
                frontier_phi_60_61_ladder = _3330;
                frontier_phi_60_61_ladder_1 = _3328;
                frontier_phi_60_61_ladder_2 = _3324;
                frontier_phi_60_61_ladder_3 = _3322;
                frontier_phi_60_61_ladder_4 = _3320;
                frontier_phi_60_61_ladder_5 = _3326;
            }
            _3433 = frontier_phi_60_61_ladder_4;
            _3435 = frontier_phi_60_61_ladder_3;
            _3437 = frontier_phi_60_61_ladder_2;
            _3439 = frontier_phi_60_61_ladder_5;
            _3441 = frontier_phi_60_61_ladder_1;
            _3443 = frontier_phi_60_61_ladder;
        }
        float _3448 = isnan(1.0) ? _1227 : (isnan(_1227) ? 1.0 : min(_1227, 1.0));
        _3253 = (_3448 * _3439) + _2765;
        _3255 = (_3448 * _3441) + _2767;
        _3257 = (_3448 * _3443) + _2769;
        _3259 = ((_3433 * _1211) * _3448) + _3103;
        _3261 = ((_3435 * _1213) * _3448) + _3105;
        _3263 = ((_3437 * _1214) * _3448) + _3107;
    }
    else
    {
        _3253 = _2765;
        _3255 = _2767;
        _3257 = _2769;
        _3259 = _3103;
        _3261 = _3105;
        _3263 = _3107;
    }
    float _5223 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _5234 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _5245 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    uint _3283 = _290 + 6u;
    float _3291 = _1149 / cbSceneParam._m0[86u].x;
    float _3292 = _1150 / cbSceneParam._m0[86u].y;
    vec4 _3306 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3291, _3292, (log2((isnan(cbSceneParam._m0[77u].w) ? _1084 : (isnan(_1084) ? cbSceneParam._m0[77u].w : min(_1084, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3308 = _3306.x;
    float _3309 = _3306.y;
    float _3310 = _3306.z;
    float _3311 = _3306.w;
    float _3383;
    float _3385;
    float _3387;
    float _3389;
    if (_1084 > cbSceneParam._m0[78u].w)
    {
        float _3345 = isnan(_1084) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1084 : min(cbSceneParam._m0[80u].w, _1084));
        float _3346 = _3345 / _1084;
        float _3357 = _3346 * _1134;
        float _3358 = _1135 * _3346;
        float _3359 = (-0.0) - _3358;
        float _3361 = _3346 * _1136;
        float _3363 = (cbSceneParam._m0[77u].w * _3359) / _3345;
        float _3364 = _3363 + cbSceneParam._m0[79u].w;
        float _3365 = cbSceneParam._m0[79u].w - _3358;
        float _3371 = sqrt(((_3357 * _3357) + (_3358 * _3358)) + (_3361 * _3361));
        float _3374 = (1.0 - (cbSceneParam._m0[77u].w / _3345)) * _3371;
        float _3379 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3381 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3534;
        if (abs((_3359 - _3363) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3534 = ((((_3364 > 0.0) ? exp2(_3379 * _3364) : (2.0 - exp2(_3381 * _3364))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3374;
        }
        else
        {
            float _3494 = 1.0 / cbSceneParam._m0[80u].x;
            float _3495 = isnan(_3365) ? _3364 : (isnan(_3364) ? _3365 : max(_3364, _3365));
            float _3496 = isnan(_3365) ? _3364 : (isnan(_3364) ? _3365 : min(_3364, _3365));
            float _3505 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : min(_3495, 0.0));
            float _3506 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : min(_3496, 0.0));
            _3534 = ((abs(_3371 / _3359) * cbSceneParam._m0[80u].y) * ((((_3505 - _3506) * 2.0) - ((exp2(_3379 * (isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0)))) - exp2(_3379 * (isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0))))) * _3494)) - ((exp2(_3381 * _3505) - exp2(_3381 * _3506)) * _3494))) + (_3374 * cbSceneParam._m0[80u].z);
        }
        vec4 _3536 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3291, _3292, 1.0), 0.0);
        float _3545 = exp2((_3534 * (-1.44269502162933349609375)) * (1.0 - _3536.w));
        float _3546 = log2(_3545);
        float _3562 = log2(_3311);
        _3383 = (exp2(_3562 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3546 * cbSceneParam._m0[78u].x)) * _3536.x) / cbSceneParam._m0[78u].x)) + _3308;
        _3385 = (exp2(_3562 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3546 * cbSceneParam._m0[78u].y)) * _3536.y) / cbSceneParam._m0[78u].y)) + _3309;
        _3387 = (exp2(_3562 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3546 * cbSceneParam._m0[78u].z)) * _3536.z) / cbSceneParam._m0[78u].z)) + _3310;
        _3389 = _3545 * _3311;
    }
    else
    {
        _3383 = _3308;
        _3385 = _3309;
        _3387 = _3310;
        _3389 = _3311;
    }
    float _3401 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3402 = _3401 == 3.0;
    float _3403 = log2(_3389);
    float _3410 = exp2(_3403 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5223 : (isnan(_5223) ? 1.0 : min(_5223, 1.0))) * (_3253 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1227))) + ((_3259 + ((isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0))) * _2033)) * cbPerFrame._m0[3u].x));
    float _3411 = exp2(_3403 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5234 : (isnan(_5234) ? 1.0 : min(_5234, 1.0))) * (_3255 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1227))) + ((_3261 + ((isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0))) * _2033)) * cbPerFrame._m0[3u].x));
    float _3412 = exp2(_3403 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5245 : (isnan(_5245) ? 1.0 : min(_5245, 1.0))) * (_3257 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1227))) + ((_3263 + ((isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0))) * _2033)) * cbPerFrame._m0[3u].x));
    float _3421 = (_3401 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3421 * (_3402 ? _3410 : (_3410 + (cbSceneParam._m0[72u].w * _3383)));
    SV_Target.y = _3421 * (_3402 ? _3411 : (_3411 + (cbSceneParam._m0[72u].w * _3385)));
    SV_Target.z = _3421 * (_3402 ? _3412 : (_3412 + (cbSceneParam._m0[72u].w * _3387)));
    SV_Target.w = cbInstanceData._m0[_3283].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3283].w;
}


