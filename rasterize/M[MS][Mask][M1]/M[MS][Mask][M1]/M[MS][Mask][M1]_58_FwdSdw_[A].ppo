#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1471;
float _4135;
float _4136;
float _4137;
float _4138;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4147 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4158 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4169 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[23u].w) + _439) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4180 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _464 = (_457 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _465 = (_457 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _466 = (_457 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[23u].w) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4191 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    float _543 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _537;
    float _546 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _538;
    float _549 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _539;
    float _556 = ((_537 - _543) * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) + _543;
    float _557 = ((_538 - _546) * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) + _546;
    float _558 = ((_539 - _549) * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) + _549;
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _610 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _612 = _610.x;
    float _613 = _610.y;
    float _614 = _610.z;
    float _621 = ((_593.x - _612) * _457) + _612;
    float _622 = ((_593.y - _613) * _457) + _613;
    float _623 = ((_593.z - _614) * _457) + _614;
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _648 = ((_635.z - _623) * _530) + _623;
    float _651 = ((((_635.x - _621) * _530) + _621) * 2.0) + (-1.0);
    float _652 = ((((_635.y - _622) * _530) + _622) * 2.0) + (-1.0);
    float _653 = dot(vec2(_651, _652), vec2(_651, _652));
    float _4202 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _658 = sqrt(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))));
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _690 = (_651 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_570.x * 2.0) + (-1.0)))) + (((_678.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _691 = (_652 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_570.y * 2.0) + (-1.0)))) + (((_678.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _705 = _703.x;
    float _706 = 1.0 - _705;
    float _735 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_705 - _706) * cbMtdParam._m0[24u].w) + _706) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4213 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _736 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _744 = ((((cbMtdParam._m0[10u].x - _556) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _736) + _556;
    float _745 = ((((cbMtdParam._m0[10u].y - _557) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _736) + _557;
    float _746 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _558)) * _736) + _558;
    vec4 _772 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _774 = _772.x;
    float _792 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _774) * _457) + _774;
    float _810 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _792) * _530) + _792;
    float _814 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _810) * cbMtdParam._m0[19u].z) + _810;
    float _816 = _814 - (_814 * _736);
    float _821 = (((_570.z - _648) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _648;
    float _825 = ((_678.z - _821) * cbMtdParam._m0[19u].w) + _821;
    float _829 = ((cbMtdParam._m0[23u].x - _825) * _736) + _825;
    vec4 _848 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _854 = (_848.x * 2.0) + (-1.0);
    float _855 = (_848.y * 2.0) + (-1.0);
    float _856 = dot(vec2(_854, _855), vec2(_854, _855));
    float _4224 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _872 = (_736 * (((cbMtdParam._m0[22u].z * _690) - _690) + _854)) + _690;
    float _873 = (_736 * (((cbMtdParam._m0[22u].z * _691) - _691) + _855)) + _691;
    float _874 = (_736 * (sqrt(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) - _658)) + _658;
    float _878 = cbMtdParam._m0[22u].x + _678.w;
    float _881 = fma(_874, _259 * NORMAL.x, fma(_873, _266 * TANGENT.x, (_252 * _244) * _872));
    float _884 = fma(_874, _259 * NORMAL.y, fma(_873, _266 * TANGENT.y, (_252 * _245) * _872));
    float _887 = fma(_874, _259 * NORMAL.z, fma(_873, _266 * TANGENT.z, (_252 * _246) * _872));
    float _891 = inversesqrt(dot(vec3(_881, _884, _887), vec3(_881, _884, _887)));
    float _892 = _891 * _881;
    float _893 = _891 * _884;
    float _894 = _891 * _887;
    float _4235 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _895 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _4246 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4257 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4268 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4279 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4290 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _900 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _914 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _964 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _954);
    float _965 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _954);
    float _966 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _954);
    float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
    float _971 = _964 * _970;
    float _972 = _965 * _970;
    float _973 = _966 * _970;
    vec4 _978 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _980 = _978.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1152 = sqrt(((_964 * _964) + (_965 * _965)) + (_966 * _966));
        float _1158 = (cbMatDynParam._m0[5u].x * _1152) + cbMatDynParam._m0[5u].y;
        float _4301 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1163 = (cbMatDynParam._m0[5u].z * _1152) + cbMatDynParam._m0[5u].w;
        float _4312 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) - _1159)) + _1159) < ((_980 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _991 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _992 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1010 = fma(_894, cbSceneParam._m0[5u].z, fma(_893, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _892));
    float _1013 = fma(_894, cbSceneParam._m0[6u].z, fma(_893, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _892));
    float _1016 = fma(_894, cbSceneParam._m0[7u].z, fma(_893, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _892));
    uint _1029 = _291 + 9u;
    uint _1030 = _1029 + uint(cbMatDynParam._m0[0u].w);
    float _1036 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * cbInstanceData._m0[_1030].x;
    float _1037 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * cbInstanceData._m0[_1030].y;
    float _1038 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * cbInstanceData._m0[_1030].z;
    float _4323 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1039 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _4334 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1040 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _4345 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1041 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _1042 = 1.0 - _900;
    float _1043 = _1039 * _1042;
    float _1044 = _1040 * _1042;
    float _1045 = _1041 * _1042;
    float _1050 = (_1039 + (-0.039999999105930328369140625)) * _900;
    float _1051 = (_1040 + (-0.039999999105930328369140625)) * _900;
    float _1052 = (_1041 + (-0.039999999105930328369140625)) * _900;
    float _1053 = _1050 + 0.039999999105930328369140625;
    float _1055 = _1051 + 0.039999999105930328369140625;
    float _1056 = _1052 + 0.039999999105930328369140625;
    vec4 _1065 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _991, cbSceneParam._m0[86u].y * _992));
    float _1069 = ((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * TEXCOORD_5.w) * _1065.x;
    float _1070 = dot(vec3(_892, _893, _894), vec3(_971, _972, _973));
    float _1073 = _1070 * 2.0;
    float _1077 = (_1073 * _892) - _971;
    float _1078 = (_1073 * _893) - _972;
    float _1079 = (_1073 * _894) - _973;
    float _1083 = abs(dot(vec3(_971, _972, _973), vec3(_892, _893, _894)));
    float _4356 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1085 = sqrt(_895);
    float _1098 = exp2((_1085 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1085 * 3.0));
    float _1104 = (1.0 - _1098) * ((_1085 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1105 = _1098 * _1085;
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1470;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1195 = fma(_1141, cbModelParam._m0[26u].z, fma(_1137, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133));
        float _1199 = fma(_1141, cbModelParam._m0[27u].z, fma(_1137, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133));
        float _1203 = fma(_1141, cbModelParam._m0[28u].z, fma(_1137, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133));
        float _1228 = _1133 + _892;
        float _1229 = _1137 + _893;
        float _1230 = _1141 + _894;
        float _1240 = fma(_1230, cbModelParam._m0[26u].z, fma(_1229, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1228)) - _1195;
        float _1241 = fma(_1230, cbModelParam._m0[27u].z, fma(_1229, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1228)) - _1199;
        float _1242 = fma(_1230, cbModelParam._m0[28u].z, fma(_1229, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1228)) - _1203;
        float _1246 = inversesqrt(dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242)));
        float _1259 = ((_1246 * _1240) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1195 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1246 * _1241) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1199 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1246 * _1242) / cbModelParam._m0[34u].z) + ((((((_1203 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        float _1298 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1264.x + (-0.5));
        float _1300 = _1298 * (_1264.y + (-0.5));
        float _1301 = _1298 * (_1264.z + (-0.5));
        float _1308 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1271.x + (-0.5));
        float _1310 = _1308 * (_1271.y + (-0.5));
        float _1311 = _1308 * (_1271.z + (-0.5));
        float _1318 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1278.x + (-0.5));
        float _1320 = _1318 * (_1278.y + (-0.5));
        float _1321 = _1318 * (_1278.z + (-0.5));
        float _1328 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1285.x + (-0.5));
        float _1330 = _1328 * (_1285.y + (-0.5));
        float _1331 = _1328 * (_1285.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1352 = (dot(vec3(_892, _893, _894), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4382 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1362 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4393 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4404 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_1364 + 1.0))) + _1369) * _1332;
        float _1379 = _1300 * 0.5;
        float _1380 = _1310 * 0.5;
        float _1381 = _1320 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_892, _893, _894), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4437 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1406 + 1.0))) + _1411) * _1333;
        float _1421 = _1301 * 0.5;
        float _1422 = _1311 * 0.5;
        float _1423 = _1321 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_892, _893, _894), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4470 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1448 + 1.0))) + _1453) * _1334;
        _1470 = _1301;
        _1472 = _1300;
        _1473 = _1299;
        _1474 = _1311;
        _1475 = _1310;
        _1476 = _1309;
        _1477 = _1321;
        _1478 = _1320;
        _1479 = _1319;
        _1480 = _1334;
        _1481 = _1333;
        _1482 = _1332;
        _1483 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1484 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
    }
    else
    {
        _1470 = _1471;
        _1472 = _1471;
        _1473 = _1471;
        _1474 = _1471;
        _1475 = _1471;
        _1476 = _1471;
        _1477 = _1471;
        _1478 = _1471;
        _1479 = _1471;
        _1480 = _1471;
        _1481 = _1471;
        _1482 = _1471;
        _1483 = 0.0;
        _1484 = 0.0;
        _1485 = 0.0;
    }
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1512 = fma(_1141, cbModelParam._m0[30u].z, fma(_1137, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1133));
        float _1516 = fma(_1141, cbModelParam._m0[31u].z, fma(_1137, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1133));
        float _1520 = fma(_1141, cbModelParam._m0[32u].z, fma(_1137, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1133));
        float _1543 = _1133 + _892;
        float _1544 = _1137 + _893;
        float _1545 = _1141 + _894;
        float _1555 = fma(_1545, cbModelParam._m0[30u].z, fma(_1544, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1543)) - _1512;
        float _1556 = fma(_1545, cbModelParam._m0[31u].z, fma(_1544, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1543)) - _1516;
        float _1557 = fma(_1545, cbModelParam._m0[32u].z, fma(_1544, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1543)) - _1520;
        float _1561 = inversesqrt(dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557)));
        float _1574 = ((_1561 * _1555) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1512 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1575 = ((_1561 * _1556) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1516 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1576 = ((_1561 * _1557) / cbModelParam._m0[35u].z) + ((((((_1520 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1574, _1575, _1576), 0.0);
        vec4 _1585 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1574, _1575, _1576), 0.0);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1574, _1575, _1576), 0.0);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1574, _1575, _1576), 0.0);
        float _1611 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1578.x + (-0.5));
        float _1613 = _1611 * (_1578.y + (-0.5));
        float _1614 = _1611 * (_1578.z + (-0.5));
        float _1621 = exp2((_1585.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1585.x + (-0.5));
        float _1623 = _1621 * (_1585.y + (-0.5));
        float _1624 = _1621 * (_1585.z + (-0.5));
        float _1631 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1592.x + (-0.5));
        float _1633 = _1631 * (_1592.y + (-0.5));
        float _1634 = _1631 * (_1592.z + (-0.5));
        float _1641 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1599.x + (-0.5));
        float _1643 = _1641 * (_1599.y + (-0.5));
        float _1644 = _1641 * (_1599.z + (-0.5));
        float _1645 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1648 = _1612 * 0.5;
        float _1649 = _1622 * 0.5;
        float _1650 = _1632 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_892, _893, _894), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4511 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1645 + 9.9999997473787516355514526367188e-06);
        float _4522 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4533 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_1675 + 1.0))) + _1680) * _1645;
        float _1690 = _1613 * 0.5;
        float _1691 = _1623 * 0.5;
        float _1692 = _1633 * 0.5;
        float _1693 = dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692));
        float _1698 = (_1693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1693);
        float _1706 = (dot(vec3(_892, _893, _894), vec3(_1698 * _1690, _1698 * _1691, _1698 * _1692)) + 1.0) * 0.5;
        float _4544 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1715 = sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4555 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _1717 = _1716 * 2.0;
        float _1721 = (1.0 - _1716) / (_1716 + 1.0);
        float _4566 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _1731 = ((((1.0 - _1722) * (_1717 + 2.0)) * exp2(log2(isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_1717 + 1.0))) + _1722) * _1646;
        float _1732 = _1614 * 0.5;
        float _1733 = _1624 * 0.5;
        float _1734 = _1634 * 0.5;
        float _1735 = dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734));
        float _1740 = (_1735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1735);
        float _1748 = (dot(vec3(_892, _893, _894), vec3(_1740 * _1732, _1740 * _1733, _1740 * _1734)) + 1.0) * 0.5;
        float _4577 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1757 = sqrt(((_1733 * _1733) + (_1732 * _1732)) + (_1734 * _1734)) / (_1647 + 9.9999997473787516355514526367188e-06);
        float _4588 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _1759 = _1758 * 2.0;
        float _1763 = (1.0 - _1758) / (_1758 + 1.0);
        float _4599 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _1773 = ((((1.0 - _1764) * (_1759 + 2.0)) * exp2(log2(isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_1759 + 1.0))) + _1764) * _1647;
        _1781 = _1614;
        _1782 = _1613;
        _1783 = _1612;
        _1784 = _1624;
        _1785 = _1623;
        _1786 = _1622;
        _1787 = _1634;
        _1788 = _1633;
        _1789 = _1632;
        _1790 = _1647;
        _1791 = _1646;
        _1792 = _1645;
        _1793 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)));
        _1795 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)));
    }
    else
    {
        _1781 = _1471;
        _1782 = _1471;
        _1783 = _1471;
        _1784 = _1471;
        _1785 = _1471;
        _1786 = _1471;
        _1787 = _1471;
        _1788 = _1471;
        _1789 = _1471;
        _1790 = _1471;
        _1791 = _1471;
        _1792 = _1471;
        _1793 = 0.0;
        _1794 = 0.0;
        _1795 = 0.0;
    }
    float _1805 = (cbModelParam._m0[1u].x * (_1793 - _1483)) + _1483;
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1484)) + _1484;
    float _1807 = (cbModelParam._m0[1u].x * (_1795 - _1485)) + _1485;
    float _1828 = fma(_1807, cbSceneParam._m0[89u].z, fma(_1806, cbSceneParam._m0[89u].y, _1805 * cbSceneParam._m0[89u].x));
    float _1831 = fma(_1807, cbSceneParam._m0[90u].z, fma(_1806, cbSceneParam._m0[90u].y, _1805 * cbSceneParam._m0[90u].x));
    float _1834 = fma(_1807, cbSceneParam._m0[91u].z, fma(_1806, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1805));
    float _1849 = _1077 * 0.5;
    float _1850 = _1078 * 0.5;
    float _1851 = _1079 * 0.5;
    float _1852 = dot(vec4(_1849, _1850, _1851, 1.0), vec4(_1783, _1786, _1789, _1792));
    float _1855 = dot(vec4(_1849, _1850, _1851, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1858 = dot(vec4(_1849, _1850, _1851, 1.0), vec4(_1781, _1784, _1787, _1790));
    float _1892;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1865 = dot(vec4(_1849, _1850, _1851, 1.0), vec4(_1470, _1474, _1477, _1480));
        float _1869 = dot(vec4(_1849, _1850, _1851, 1.0), vec4(_1472, _1475, _1478, _1481));
        float _1873 = dot(vec4(_1849, _1850, _1851, 1.0), vec4(_1473, _1476, _1479, _1482));
        float _1880 = dot(vec4(cbModelParam._m0[39u]), vec4(_1849, _1850, _1851, 1.0));
        _1892 = dot(vec3(isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1880) ? 0.0 : (isnan(0.0) ? _1880 : max(0.0, _1880))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1892 = 1.0;
    }
    float _1903;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1894 = dot(vec4(cbModelParam._m0[40u]), vec4(_1849, _1850, _1851, 1.0));
        _1903 = dot(vec3(isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1894) ? 0.0 : (isnan(0.0) ? _1894 : max(0.0, _1894))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1903 = 1.0;
    }
    float _1907 = (_1903 * cbModelParam._m0[1u].x) + (_1892 * (1.0 - cbModelParam._m0[1u].x));
    float _1917 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _895);
    float _1918 = isnan(_1917) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1917 : min(cbModelParam._m0[25u].z, _1917));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1967 = fma(_1141, cbModelParam._m0[13u].z, fma(_1137, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1133)) + cbModelParam._m0[13u].w;
        float _1971 = fma(_1141, cbModelParam._m0[14u].z, fma(_1137, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1133)) + cbModelParam._m0[14u].w;
        float _1975 = fma(_1141, cbModelParam._m0[15u].z, fma(_1137, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1133)) + cbModelParam._m0[15u].w;
        float _1978 = fma(_1079, cbModelParam._m0[13u].z, fma(_1078, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077));
        float _1981 = fma(_1079, cbModelParam._m0[14u].z, fma(_1078, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077));
        float _1984 = fma(_1079, cbModelParam._m0[15u].z, fma(_1078, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077));
        float _2012;
        if (_1978 > 0.0)
        {
            _2012 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2012 = frontier_phi_17_15_ladder;
        }
        float _2184;
        if (_1981 > 0.0)
        {
            _2184 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2184 = frontier_phi_26_22_ladder;
        }
        float _2479;
        if (_1984 > 0.0)
        {
            _2479 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2479 = frontier_phi_38_33_ladder;
        }
        float _2481 = isnan(_2184) ? _2012 : (isnan(_2012) ? _2184 : min(_2012, _2184));
        float _2482 = isnan(_2479) ? _2481 : (isnan(_2481) ? _2479 : min(_2481, _2479));
        float _2486 = (_2482 * _1978) + _1967;
        float _2487 = (_2482 * _1981) + _1971;
        float _2488 = (_2482 * _1984) + _1975;
        float _2489 = _2482 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2489;
        float _2493 = _2489 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 > _2493) || ((_2487 < _2491) || ((_2486 < _2491) || (_2486 > _2493))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2633 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2488, cbModelParam._m0[9u].z, fma(_2487, cbModelParam._m0[9u].y, _2486 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2488, cbModelParam._m0[10u].z, fma(_2487, cbModelParam._m0[10u].y, _2486 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2488, cbModelParam._m0[11u].z, fma(_2487, cbModelParam._m0[11u].y, _2486 * cbModelParam._m0[11u].x))), _1918);
            frontier_phi_16_38_ladder = _2633.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2633.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2633.x * cbModelParam._m0[1u].y;
        }
        _2000 = frontier_phi_16_38_ladder_2;
        _2002 = frontier_phi_16_38_ladder_1;
        _2004 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1077, _1078, _1079), _1918);
        _2000 = _1988.x * cbModelParam._m0[1u].y;
        _2002 = _1988.y * cbModelParam._m0[1u].y;
        _2004 = _1988.z * cbModelParam._m0[1u].y;
    }
    float _2008 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _895);
    float _2009 = isnan(_2008) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2008 : min(cbModelParam._m0[25u].w, _2008));
    float _2099;
    float _2101;
    float _2103;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2063 = fma(_1141, cbModelParam._m0[21u].z, fma(_1137, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1133)) + cbModelParam._m0[21u].w;
        float _2067 = fma(_1141, cbModelParam._m0[22u].z, fma(_1137, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1133)) + cbModelParam._m0[22u].w;
        float _2071 = fma(_1141, cbModelParam._m0[23u].z, fma(_1137, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1133)) + cbModelParam._m0[23u].w;
        float _2074 = fma(_1079, cbModelParam._m0[21u].z, fma(_1078, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077));
        float _2077 = fma(_1079, cbModelParam._m0[22u].z, fma(_1078, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077));
        float _2080 = fma(_1079, cbModelParam._m0[23u].z, fma(_1078, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077));
        float _2189;
        if (_2074 > 0.0)
        {
            _2189 = abs((1.0 - _2063) / _2074);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2063 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2189 = frontier_phi_28_24_ladder;
        }
        float _2506;
        if (_2077 > 0.0)
        {
            _2506 = abs((1.0 - _2067) / _2077);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2067 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2506 = frontier_phi_40_35_ladder;
        }
        float _2844;
        if (_2080 > 0.0)
        {
            _2844 = abs((1.0 - _2071) / _2080);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2071 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2844 = frontier_phi_50_47_ladder;
        }
        float _2846 = isnan(_2506) ? _2189 : (isnan(_2189) ? _2506 : min(_2189, _2506));
        float _2847 = isnan(_2844) ? _2846 : (isnan(_2846) ? _2844 : min(_2846, _2844));
        float _2851 = (_2847 * _2074) + _2063;
        float _2852 = (_2847 * _2077) + _2067;
        float _2853 = (_2847 * _2080) + _2071;
        float _2854 = _2847 * 9.9999997473787516355514526367188e-05;
        float _2855 = (-1.0) - _2854;
        float _2857 = _2854 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2853 > _2857) || ((_2853 < _2855) || ((_2852 > _2857) || ((_2852 < _2855) || ((_2851 < _2855) || (_2851 > _2857))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2975 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2853, cbModelParam._m0[17u].z, fma(_2852, cbModelParam._m0[17u].y, _2851 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2853, cbModelParam._m0[18u].z, fma(_2852, cbModelParam._m0[18u].y, _2851 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2853, cbModelParam._m0[19u].z, fma(_2852, cbModelParam._m0[19u].y, _2851 * cbModelParam._m0[19u].x))), _2009);
            frontier_phi_25_50_ladder = _2975.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2975.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2975.x * cbModelParam._m0[1u].z;
        }
        _2099 = frontier_phi_25_50_ladder_2;
        _2101 = frontier_phi_25_50_ladder_1;
        _2103 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2083 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1077, _1078, _1079), _2009);
        _2099 = _2083.x * cbModelParam._m0[1u].z;
        _2101 = _2083.y * cbModelParam._m0[1u].z;
        _2103 = _2083.z * cbModelParam._m0[1u].z;
    }
    float _2116 = (((_1104 * _1053) + _1105) * _1069) * ((cbModelParam._m0[1u].w * (_2099 - _2000)) + _2000);
    float _2118 = (((_1104 * _1055) + _1105) * _1069) * ((cbModelParam._m0[1u].w * (_2101 - _2002)) + _2002);
    float _2120 = (((_1104 * _1056) + _1105) * _1069) * ((cbModelParam._m0[1u].w * (_2103 - _2004)) + _2004);
    float _2123 = fma(_2120, cbSceneParam._m0[89u].z, fma(_2118, cbSceneParam._m0[89u].y, _2116 * cbSceneParam._m0[89u].x));
    float _2126 = fma(_2120, cbSceneParam._m0[90u].z, fma(_2118, cbSceneParam._m0[90u].y, _2116 * cbSceneParam._m0[90u].x));
    float _2129 = fma(_2120, cbSceneParam._m0[91u].z, fma(_2118, cbSceneParam._m0[91u].y, _2116 * cbSceneParam._m0[91u].x));
    float _2163 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2167 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2171 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2175 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2176 = _2163 / _2175;
    float _2177 = _2167 / _2175;
    float _2178 = _2171 / _2175;
    float _2325;
    float _2326;
    float _2327;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2205 = ((uint(_2178 > cbSceneParam._m0[59u].y) + uint(_2178 > cbSceneParam._m0[59u].x)) + uint(_2178 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2206 = _2205 + 43u;
        uint _2214 = _2205 + 44u;
        uint _2222 = _2205 + 45u;
        uint _2230 = _2205 + 46u;
        float _2241 = fma(_2175, cbSceneParam._m0[_2206].w, fma(_2171, cbSceneParam._m0[_2206].z, fma(_2167, cbSceneParam._m0[_2206].y, _2163 * cbSceneParam._m0[_2206].x)));
        float _2245 = fma(_2175, cbSceneParam._m0[_2214].w, fma(_2171, cbSceneParam._m0[_2214].z, fma(_2167, cbSceneParam._m0[_2214].y, _2163 * cbSceneParam._m0[_2214].x)));
        float _2253 = fma(_2175, cbSceneParam._m0[_2230].w, fma(_2171, cbSceneParam._m0[_2230].z, fma(_2167, cbSceneParam._m0[_2230].y, _2163 * cbSceneParam._m0[_2230].x)));
        float _2258 = cbSceneParam._m0[33u].z * _2253;
        float _2260 = cbSceneParam._m0[33u].w * _2253;
        float _2263 = fma(_2175, cbSceneParam._m0[_2222].w, fma(_2171, cbSceneParam._m0[_2222].z, fma(_2167, cbSceneParam._m0[_2222].y, _2163 * cbSceneParam._m0[_2222].x))) / _2253;
        float _2311 = (cbSceneParam._m0[33u].x - sqrt(((_2177 * _2177) + (_2176 * _2176)) + (_2178 * _2178))) * cbSceneParam._m0[33u].y;
        float _4725 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2318 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2258 + _2241) / _2253, (_2260 + _2245) / _2253), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2260 + _2241) / _2253, (_2245 - _2258) / _2253), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2241 - _2258) / _2253, (_2245 - _2260) / _2253), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2241 - _2260) / _2253, (_2258 + _2245) / _2253), _2263), 0.0)).x), vec4(0.25)));
        _2325 = 1.0 - (_2318 * cbSceneParam._m0[34u].x);
        _2326 = 1.0 - (_2318 * cbSceneParam._m0[34u].y);
        _2327 = 1.0 - (_2318 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2325 = 1.0;
        _2326 = 1.0;
        _2327 = 1.0;
    }
    float _2391;
    float _2393;
    float _2395;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2379 = fma(_2175, cbSceneParam._m0[63u].w, fma(_2171, cbSceneParam._m0[63u].z, fma(_2167, cbSceneParam._m0[63u].y, _2163 * cbSceneParam._m0[63u].x)));
        float _2380 = fma(_2175, cbSceneParam._m0[60u].w, fma(_2171, cbSceneParam._m0[60u].z, fma(_2167, cbSceneParam._m0[60u].y, _2163 * cbSceneParam._m0[60u].x))) / _2379;
        float _2381 = fma(_2175, cbSceneParam._m0[61u].w, fma(_2171, cbSceneParam._m0[61u].z, fma(_2167, cbSceneParam._m0[61u].y, _2163 * cbSceneParam._m0[61u].x))) / _2379;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2380 >= cbSceneParam._m0[64u].x) && (_2381 >= cbSceneParam._m0[64u].y)) && (_2380 <= cbSceneParam._m0[64u].z)) && (_2381 <= cbSceneParam._m0[64u].w))
        {
            float _2519 = fma(_2175, cbSceneParam._m0[62u].w, fma(_2171, cbSceneParam._m0[62u].z, fma(_2167, cbSceneParam._m0[62u].y, _2163 * cbSceneParam._m0[62u].x))) / _2379;
            float _2523 = isnan(cbSceneParam._m0[41u].w) ? _2519 : (isnan(_2519) ? cbSceneParam._m0[41u].w : max(_2519, cbSceneParam._m0[41u].w));
            float _2566 = (cbSceneParam._m0[33u].x - sqrt(((_2177 * _2177) + (_2176 * _2176)) + (_2178 * _2178))) * cbSceneParam._m0[33u].y;
            float _4741 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
            float _2573 = (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2380, cbSceneParam._m0[33u].w + _2381), _2523), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2380, _2381 - cbSceneParam._m0[33u].z), _2523), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2380 - cbSceneParam._m0[33u].z, _2381 - cbSceneParam._m0[33u].w), _2523), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2380 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2381), _2523), 0.0)).x), vec4(0.25)));
            float _2577 = 1.0 - (_2573 * cbSceneParam._m0[34u].x);
            float _2578 = 1.0 - (_2573 * cbSceneParam._m0[34u].y);
            float _2579 = 1.0 - (_2573 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2579) ? _2327 : (isnan(_2327) ? _2579 : min(_2327, _2579));
            frontier_phi_37_36_ladder_1 = isnan(_2578) ? _2326 : (isnan(_2326) ? _2578 : min(_2326, _2578));
            frontier_phi_37_36_ladder_2 = isnan(_2577) ? _2325 : (isnan(_2325) ? _2577 : min(_2325, _2577));
        }
        else
        {
            frontier_phi_37_36_ladder = _2327;
            frontier_phi_37_36_ladder_1 = _2326;
            frontier_phi_37_36_ladder_2 = _2325;
        }
        _2391 = frontier_phi_37_36_ladder_2;
        _2393 = frontier_phi_37_36_ladder_1;
        _2395 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2391 = _2325;
        _2393 = _2326;
        _2395 = _2327;
    }
    uvec4 _2400 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2402 = _2400.x * 14u;
    uint _2403 = _2402 + 13u;
    float _2410 = _1069 + (-1.0);
    float _2415 = (cbLight._m0[_2403].x * _2410) + 1.0;
    float _2416 = (cbLight._m0[_2403].y * _2410) + 1.0;
    float _2417 = (cbLight._m0[_2403].z * _2410) + 1.0;
    float _2418 = (cbLight._m0[_2403].w * _2410) + 1.0;
    uint _2419 = _2402 + 5u;
    float _2425 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
    uint _2429 = _2402 + 4u;
    float _2438 = isnan(1.0) ? _2415 : (isnan(_2415) ? 1.0 : min(_2415, 1.0));
    uint _2442 = _2402 | 1u;
    float _2453 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_892, _893, _894));
    float _2456 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_892, _893, _894));
    float _4777 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _4788 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2461 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * 0.3183098733425140380859375;
    float _2463 = (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * 0.3183098733425140380859375;
    float _2470 = ((cbLight._m0[_2419].x * _2425) * _2463) + (((cbLight._m0[_2429].x * _2391) * _2438) * _2461);
    float _2471 = ((_2425 * cbLight._m0[_2419].y) * _2463) + (((cbLight._m0[_2429].y * _2393) * _2438) * _2461);
    float _2472 = ((_2425 * cbLight._m0[_2419].z) * _2463) + (((cbLight._m0[_2429].z * _2395) * _2438) * _2461);
    uvec4 _2476 = floatBitsToUint(cbLight._m0[_2402 + 12u]);
    bool _2478 = _2476.x == 0u;
    float _2580;
    float _2582;
    float _2584;
    if (_2478)
    {
        _2580 = _2470;
        _2582 = _2471;
        _2584 = _2472;
    }
    else
    {
        uint _2588 = _2402 + 6u;
        float _2604 = (dot(vec3(cbLight._m0[_2402 + 2u].xyz), vec3(_892, _893, _894)) * 0.5) + 0.5;
        float _2605 = _2604 * _2604;
        float _4799 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2606 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _2607 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
        _2580 = (((cbLight._m0[_2588].x * 0.3183098733425140380859375) * _2606) * _2607) + _2470;
        _2582 = (((cbLight._m0[_2588].y * 0.3183098733425140380859375) * _2606) * _2607) + _2471;
        _2584 = (((cbLight._m0[_2588].z * 0.3183098733425140380859375) * _2606) * _2607) + _2472;
    }
    bool _2587 = _2476.y == 0u;
    float _2642;
    float _2644;
    float _2646;
    if (_2587)
    {
        _2642 = _2580;
        _2644 = _2582;
        _2646 = _2584;
    }
    else
    {
        uint _2815 = _2402 + 7u;
        float _2831 = (dot(vec3(cbLight._m0[_2402 + 3u].xyz), vec3(_892, _893, _894)) * 0.5) + 0.5;
        float _2832 = _2831 * _2831;
        float _4815 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2833 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2834 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
        _2642 = (((cbLight._m0[_2815].x * 0.3183098733425140380859375) * _2833) * _2834) + _2580;
        _2644 = (((cbLight._m0[_2815].y * 0.3183098733425140380859375) * _2833) * _2834) + _2582;
        _2646 = (((cbLight._m0[_2815].z * 0.3183098733425140380859375) * _2833) * _2834) + _2584;
    }
    uint _2649 = _2402 + 8u;
    float _2662 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _895) * 0.949999988079071044921875);
    float _2663 = _2662 * _2662;
    float _2664 = cbLight._m0[_2402].x + _971;
    float _2665 = cbLight._m0[_2402].y + _972;
    float _2666 = cbLight._m0[_2402].z + _973;
    float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
    float _2671 = _2670 * _2664;
    float _2672 = _2670 * _2665;
    float _2673 = _2670 * _2666;
    float _2674 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2402].xyz));
    float _4831 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2677 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
    float _4842 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _2678 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
    float _2679 = dot(vec3(_892, _893, _894), vec3(_2671, _2672, _2673));
    float _4853 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2682 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
    float _2683 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2671, _2672, _2673));
    float _4864 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2687 = _2663 * _2663;
    float _2691 = ((_2682 * _2682) * (_2687 + (-1.0))) + 1.0;
    float _2699 = exp2(log2(1.0 - (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0)))) * 5.0);
    float _2700 = 0.959999978542327880859375 - _1050;
    float _2702 = 0.959999978542327880859375 - _1051;
    float _2703 = 0.959999978542327880859375 - _1052;
    float _2710 = 1.0 - _2663;
    float _2721 = (0.5 / (((_2678 * ((_2677 * _2710) + _2663)) + 9.9999999392252902907785028219223e-09) + (((_2678 * _2710) + _2663) * _2677))) * _2677;
    float _4875 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2723 = (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2687 / ((_2691 * _2691) * 3.141590118408203125));
    uint _2737 = _2402 + 9u;
    float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _895) * 0.949999988079071044921875);
    float _2749 = _2748 * _2748;
    float _2750 = cbLight._m0[_2442].x + _971;
    float _2751 = cbLight._m0[_2442].y + _972;
    float _2752 = cbLight._m0[_2442].z + _973;
    float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
    float _2757 = _2756 * _2750;
    float _2758 = _2756 * _2751;
    float _2759 = _2756 * _2752;
    float _2760 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2442].xyz));
    float _4886 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2763 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
    float _2764 = dot(vec3(_892, _893, _894), vec3(_2757, _2758, _2759));
    float _4897 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2767 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
    float _2768 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2757, _2758, _2759));
    float _4908 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2772 = _2749 * _2749;
    float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
    float _2783 = exp2(log2(1.0 - (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0)))) * 5.0);
    float _2790 = 1.0 - _2749;
    float _2800 = (0.5 / (((_2678 * ((_2763 * _2790) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2678 * _2790) + _2749) * _2763))) * _2763;
    float _4919 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
    float _2802 = (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
    float _2812 = (((((_2783 * _2700) + _1053) * cbLight._m0[_2737].x) * _2802) * _2425) + ((((cbLight._m0[_2649].x * _2391) * ((_2699 * _2700) + _1053)) * _2723) * _2438);
    float _2813 = (((((_2783 * _2702) + _1055) * cbLight._m0[_2737].y) * _2802) * _2425) + ((((cbLight._m0[_2649].y * _2393) * ((_2699 * _2702) + _1055)) * _2723) * _2438);
    float _2814 = (((((_2783 * _2703) + _1056) * cbLight._m0[_2737].z) * _2802) * _2425) + ((((cbLight._m0[_2649].z * _2395) * ((_2699 * _2703) + _1056)) * _2723) * _2438);
    float _2870;
    float _2872;
    float _2874;
    if (_2478)
    {
        _2870 = _2812;
        _2872 = _2813;
        _2874 = _2814;
    }
    else
    {
        uint _2876 = _2402 + 2u;
        uint _2880 = _2402 + 10u;
        float _2894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2876].w)) * _895) * 0.949999988079071044921875);
        float _2895 = _2894 * _2894;
        float _2896 = cbLight._m0[_2876].x + _971;
        float _2897 = cbLight._m0[_2876].y + _972;
        float _2898 = cbLight._m0[_2876].z + _973;
        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
        float _2903 = _2902 * _2896;
        float _2904 = _2902 * _2897;
        float _2905 = _2902 * _2898;
        float _2906 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2876].xyz));
        float _4930 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
        float _2910 = dot(vec3(_892, _893, _894), vec3(_2903, _2904, _2905));
        float _4941 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
        float _2914 = dot(vec3(cbLight._m0[_2876].xyz), vec3(_2903, _2904, _2905));
        float _4952 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2918 = _2895 * _2895;
        float _2922 = ((_2913 * _2913) * (_2918 + (-1.0))) + 1.0;
        float _2929 = exp2(log2(1.0 - (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0)))) * 5.0);
        float _2936 = 1.0 - _2895;
        float _2946 = (0.5 / (((_2678 * ((_2909 * _2936) + _2895)) + 9.9999999392252902907785028219223e-09) + (((_2678 * _2936) + _2895) * _2909))) * _2909;
        float _4963 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2948 = (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0))) * (_2918 / ((_2922 * _2922) * 3.141590118408203125));
        float _2949 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
        _2870 = (((((_2929 * _2700) + _1053) * cbLight._m0[_2880].x) * _2948) * _2949) + _2812;
        _2872 = (((((_2929 * _2702) + _1055) * cbLight._m0[_2880].y) * _2948) * _2949) + _2813;
        _2874 = (((((_2929 * _2703) + _1056) * cbLight._m0[_2880].z) * _2948) * _2949) + _2814;
    }
    float _2980;
    float _2982;
    float _2984;
    if (_2587)
    {
        _2980 = _2870;
        _2982 = _2872;
        _2984 = _2874;
    }
    else
    {
        uint _2991 = _2402 + 3u;
        uint _2995 = _2402 + 11u;
        float _3009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2991].w)) * _895) * 0.949999988079071044921875);
        float _3010 = _3009 * _3009;
        float _3011 = cbLight._m0[_2991].x + _971;
        float _3012 = cbLight._m0[_2991].y + _972;
        float _3013 = cbLight._m0[_2991].z + _973;
        float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
        float _3018 = _3017 * _3011;
        float _3019 = _3017 * _3012;
        float _3020 = _3017 * _3013;
        float _3021 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2991].xyz));
        float _4979 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3024 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
        float _3025 = dot(vec3(_892, _893, _894), vec3(_3018, _3019, _3020));
        float _4990 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
        float _3028 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
        float _3029 = dot(vec3(cbLight._m0[_2991].xyz), vec3(_3018, _3019, _3020));
        float _5001 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3033 = _3010 * _3010;
        float _3037 = ((_3028 * _3028) * (_3033 + (-1.0))) + 1.0;
        float _3044 = exp2(log2(1.0 - (isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0)))) * 5.0);
        float _3051 = 1.0 - _3010;
        float _3061 = (0.5 / (((_2678 * ((_3024 * _3051) + _3010)) + 9.9999999392252902907785028219223e-09) + (((_2678 * _3051) + _3010) * _3024))) * _3024;
        float _5012 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3063 = (isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0))) * (_3033 / ((_3037 * _3037) * 3.141590118408203125));
        float _3064 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
        _2980 = (((((_3044 * _2700) + _1053) * cbLight._m0[_2995].x) * _3063) * _3064) + _2870;
        _2982 = (((((_3044 * _2702) + _1055) * cbLight._m0[_2995].y) * _3063) * _3064) + _2872;
        _2984 = (((((_3044 * _2703) + _1056) * cbLight._m0[_2995].z) * _3063) * _3064) + _2874;
    }
    float _3130;
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    float _3140;
    if (_2400.y == 0u)
    {
        uvec4 _3085 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3086 = _3085.x;
        uint _3097 = uint((float(_3085.y) * floor(float(uint(cbSceneParam._m0[85u].y * _992) / _3086))) + floor(float(uint(cbSceneParam._m0[85u].x * _991) / _3086)));
        float _3107 = (log2(_2178 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3108 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
        uint _3111 = uint(isnan(14.0) ? _3108 : (isnan(_3108) ? 14.0 : min(_3108, 14.0)));
        uvec4 _3116 = texelFetch(g_lightClusterGridBuffer, int(((_3111 << 2u) + (_3097 << 6u)) >> 2u));
        uint _3117 = _3116.x;
        uint _3118 = _3085.z;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        if (((((1u << ((_3118 >> 4u) & 15u)) + 4294967295u) & _3117) == 0u) || ((_3118 & 240u) == 0u))
        {
            _3197 = 0.0;
            _3199 = 0.0;
            _3201 = 0.0;
            _3203 = 0.0;
            _3205 = 0.0;
            _3207 = 0.0;
        }
        else
        {
            float _3198;
            float _3200;
            float _3202;
            float _3204;
            float _3206;
            float _3208;
            float _3350 = 0.0;
            float _3351 = 0.0;
            float _3352 = 0.0;
            float _3353 = 0.0;
            float _3354 = 0.0;
            float _3355 = 0.0;
            uint _3356 = 0u;
            uint _3365;
            bool _3366;
            for (;;)
            {
                _3365 = texelFetch(g_lightClassification, int((((_3111 << 5u) + (_3097 << 9u)) + (_3356 << 2u)) >> 2u)).x;
                _3366 = _3365 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3366)
                {
                    frontier_phi_71_pred = _3355;
                    frontier_phi_71_pred_1 = _3354;
                    frontier_phi_71_pred_2 = _3353;
                    frontier_phi_71_pred_3 = _3352;
                    frontier_phi_71_pred_4 = _3351;
                    frontier_phi_71_pred_5 = _3350;
                }
                else
                {
                    float _3495;
                    float _3496;
                    float _3497;
                    float _3498;
                    float _3499;
                    float _3500;
                    uint _3501;
                    _3495 = _3350;
                    _3496 = _3351;
                    _3497 = _3352;
                    _3498 = _3353;
                    _3499 = _3354;
                    _3500 = _3355;
                    _3501 = _3365;
                    float _3422;
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    float _3427;
                    for (;;)
                    {
                        uint _3505 = uint(findLSB(_3501)) + (_3356 << 5u);
                        uint _3502 = (_3501 + 4294967295u) & _3501;
                        uint _3507 = _3505 * 48u;
                        vec4 _3521 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3507)).x, texelFetch(g_PointLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3507 + 3u)).x));
                        uint _3527 = (_3505 * 48u) + 4u;
                        vec4 _3540 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3527)).x, texelFetch(g_PointLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3527 + 3u)).x));
                        uint _3546 = (_3505 * 48u) + 8u;
                        vec3 _3557 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3546)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 2u)).x));
                        float _3561 = _3521.x - _2176;
                        float _3562 = _3521.y - _2177;
                        float _3563 = _3521.z - _2178;
                        float _3564 = dot(vec3(_3561, _3562, _3563), vec3(_3561, _3562, _3563));
                        float _3567 = inversesqrt(_3564);
                        float _3568 = _3567 * _3561;
                        float _3569 = _3567 * _3562;
                        float _3570 = _3567 * _3563;
                        float _3571 = dot(vec3(_1010, _1013, _1016), vec3(_3568, _3569, _3570));
                        float _3576 = 1.0 - (_3564 * _3521.w);
                        float _5038 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                        float _3577 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                        float _3578 = sqrt(_3564) * _3540.w;
                        float _3581 = 1.39999997615814208984375 / (_3578 + 1.39999997615814208984375);
                        float _3582 = _3581 * _3581;
                        float _3585 = ((1.0 - _3582) * _3571) + _3582;
                        float _3588 = _3578 * _3578;
                        float _3592 = ((isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0))) * _3577) / ((_3588 * 0.699999988079071044921875) + 1.0);
                        float _3596 = (-0.0) - _2176;
                        float _3597 = (-0.0) - _2177;
                        float _3598 = (-0.0) - _2178;
                        float _3602 = inversesqrt(dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598)));
                        float _3603 = _3602 * _3596;
                        float _3604 = _3602 * _3597;
                        float _3605 = _3602 * _3598;
                        float _3612 = exp2(log2(1.0 / ((_3588 * 3.5) + 5.0)) * 0.25);
                        float _3613 = 1.0 - _1085;
                        float _3620 = sqrt(1.0 - ((1.0 - (_3613 * _3613)) * (1.0 - (_3612 * _3612))));
                        float _3621 = _3620 * _3620;
                        float _3622 = _3621 * _3621;
                        float _3623 = _3603 + _3568;
                        float _3624 = _3604 + _3569;
                        float _3625 = _3605 + _3570;
                        float _3629 = inversesqrt(dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625)));
                        float _3633 = dot(vec3(_1010, _1013, _1016), vec3(_3603, _3604, _3605));
                        float _5054 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                        float _3636 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
                        float _3637 = dot(vec3(_1010, _1013, _1016), vec3(_3629 * _3623, _3629 * _3624, _3629 * _3625));
                        float _5065 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                        float _3640 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
                        float _3644 = ((_3640 * _3640) * (_3622 + (-1.0))) + 1.0;
                        float _3645 = _3581 * _3621;
                        float _3646 = _3645 * _3645;
                        float _3649 = ((1.0 - _3646) * _3571) + _3646;
                        float _5076 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                        float _3650 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
                        float _3651 = 1.0 - _3621;
                        float _3661 = (0.5 / (((_3650 * ((_3636 * _3651) + _3621)) + 9.9999999392252902907785028219223e-09) + (((_3650 * _3651) + _3621) * _3636))) * _3650;
                        float _5087 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                        float _3672 = (((_3622 * 3.1415927410125732421875) * (isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0)))) / ((_3644 * _3644) * ((_3588 * 2.1991131305694580078125) + 3.141590118408203125))) * _3577;
                        _3425 = (_3592 * _3540.x) + _3498;
                        _3426 = (_3592 * _3540.y) + _3499;
                        _3427 = (_3592 * _3540.z) + _3500;
                        _3422 = (_3672 * _3557.x) + _3495;
                        _3423 = (_3672 * _3557.y) + _3496;
                        _3424 = (_3672 * _3557.z) + _3497;
                        if (_3502 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3495 = _3422;
                            _3496 = _3423;
                            _3497 = _3424;
                            _3498 = _3425;
                            _3499 = _3426;
                            _3500 = _3427;
                            _3501 = _3502;
                        }
                    }
                    frontier_phi_71_pred = _3427;
                    frontier_phi_71_pred_1 = _3426;
                    frontier_phi_71_pred_2 = _3425;
                    frontier_phi_71_pred_3 = _3424;
                    frontier_phi_71_pred_4 = _3423;
                    frontier_phi_71_pred_5 = _3422;
                }
                _3208 = frontier_phi_71_pred;
                _3206 = frontier_phi_71_pred_1;
                _3204 = frontier_phi_71_pred_2;
                _3202 = frontier_phi_71_pred_3;
                _3200 = frontier_phi_71_pred_4;
                _3198 = frontier_phi_71_pred_5;
                uint _3357 = _3356 + 1u;
                if (_3357 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3350 = _3198;
                    _3351 = _3200;
                    _3352 = _3202;
                    _3353 = _3204;
                    _3354 = _3206;
                    _3355 = _3208;
                    _3356 = _3357;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3197 = _3198;
            _3199 = _3200;
            _3201 = _3202;
            _3203 = _3204;
            _3205 = _3206;
            _3207 = _3208;
        }
        uvec4 _3211 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3212 = _3211.z;
        uint _3214 = (_3212 >> 8u) & 15u;
        float _3318;
        float _3320;
        float _3322;
        float _3324;
        float _3326;
        float _3328;
        if (((4294967295u << _3214) & _3117) == 0u)
        {
            _3318 = _3197;
            _3320 = _3199;
            _3322 = _3201;
            _3324 = _3203;
            _3326 = _3205;
            _3328 = _3207;
        }
        else
        {
            float _3343 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
            float _3344 = _3343 * _2176;
            float _3345 = _3343 * _2177;
            float _3346 = _3343 * _2178;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3214 < ((_3212 >> 12u) & 15u))
            {
                float _3319;
                float _3321;
                float _3323;
                float _3325;
                float _3327;
                float _3329;
                float _3478 = _3197;
                float _3479 = _3199;
                float _3480 = _3201;
                float _3481 = _3203;
                float _3482 = _3205;
                float _3483 = _3207;
                uint _3484 = _3214;
                uint _3493;
                bool _3494;
                for (;;)
                {
                    _3493 = texelFetch(g_lightClassification, int((((_3111 << 5u) + (_3097 << 9u)) + (_3484 << 2u)) >> 2u)).x;
                    _3494 = _3493 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3494)
                    {
                        frontier_phi_82_pred = _3483;
                        frontier_phi_82_pred_1 = _3482;
                        frontier_phi_82_pred_2 = _3481;
                        frontier_phi_82_pred_3 = _3480;
                        frontier_phi_82_pred_4 = _3479;
                        frontier_phi_82_pred_5 = _3478;
                    }
                    else
                    {
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3979;
                        float _3980;
                        float _3981;
                        float _3982;
                        float _3983;
                        float _3984;
                        float _3699 = _3478;
                        float _3700 = _3479;
                        float _3701 = _3480;
                        float _3702 = _3481;
                        float _3703 = _3482;
                        float _3704 = _3483;
                        uint _3705 = _3493;
                        uint _3706;
                        vec4 _3731;
                        float _3732;
                        vec4 _3747;
                        vec3 _3759;
                        vec4 _3774;
                        vec4 _3789;
                        float _3835;
                        bool _3836;
                        for (;;)
                        {
                            uint _3716 = ((_3484 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3705));
                            _3706 = (_3705 + 4294967295u) & _3705;
                            uint _3718 = _3716 * 40u;
                            _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            _3732 = _3731.w;
                            uint _3734 = (_3716 * 40u) + 4u;
                            _3747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 3u)).x));
                            uint _3749 = (_3716 * 40u) + 8u;
                            _3759 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x));
                            uint _3761 = (_3716 * 40u) + 16u;
                            _3774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 3u)).x));
                            uint _3776 = (_3716 * 40u) + 20u;
                            _3789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 3u)).x));
                            uint _3791 = (_3716 * 40u) + 24u;
                            vec4 _3804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 3u)).x));
                            uint _3810 = (_3716 * 40u) + 28u;
                            vec4 _3823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 3u)).x));
                            _3835 = fma(_2178, _3823.z, fma(_2177, _3823.y, _3823.x * _2176)) + _3823.w;
                            _3836 = !((fma(_2178, _3804.z, fma(_2177, _3804.y, _3804.x * _2176)) + _3804.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3836)
                            {
                                float _3863 = _3731.x - _2176;
                                float _3864 = _3731.y - _2177;
                                float _3865 = _3731.z - _2178;
                                float _3866 = dot(vec3(_3863, _3864, _3865), vec3(_3863, _3864, _3865));
                                float _3869 = inversesqrt(_3866);
                                float _3870 = _3869 * _3863;
                                float _3871 = _3869 * _3864;
                                float _3872 = _3869 * _3865;
                                float _3876 = 1.0 - (_3866 / (_3732 * _3732));
                                float _5098 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3877 = isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0));
                                float _3881 = sqrt(_3866) * _3747.w;
                                float _3883 = 1.39999997615814208984375 / (_3881 + 1.39999997615814208984375);
                                float _3884 = _3883 * _3883;
                                float _3887 = ((1.0 - _3884) * dot(vec3(_3870, _3871, _3872), vec3(_1010, _1013, _1016))) + _3884;
                                float _3890 = _3881 * _3881;
                                float _3894 = (fma(_2178, _3774.z, fma(_2177, _3774.y, _3774.x * _2176)) + _3774.w) / _3835;
                                float _3895 = (fma(_2178, _3789.z, fma(_2177, _3789.y, _3789.x * _2176)) + _3789.w) / _3835;
                                float _3899 = 1.0 - dot(vec2(_3894, _3895), vec2(_3894, _3895));
                                float _5114 = isnan(0.0) ? _3899 : (isnan(_3899) ? 0.0 : max(_3899, 0.0));
                                float _3900 = isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0));
                                float _3901 = _3900 * (((isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0))) * _3877) / ((_3890 * 0.699999988079071044921875) + 1.0));
                                float _3913 = exp2(log2(1.0 / ((_3890 * 3.5) + 5.0)) * 0.25);
                                float _3914 = 1.0 - _1085;
                                float _3921 = sqrt(1.0 - ((1.0 - (_3914 * _3914)) * (1.0 - (_3913 * _3913))));
                                float _3922 = _3921 * _3921;
                                float _3923 = _3922 * _3922;
                                float _3924 = _3870 - _3344;
                                float _3925 = _3871 - _3345;
                                float _3926 = _3872 - _3346;
                                float _3930 = inversesqrt(dot(vec3(_3924, _3925, _3926), vec3(_3924, _3925, _3926)));
                                float _3934 = dot(vec3(_1010, _1013, _1016), vec3((-0.0) - _3344, (-0.0) - _3345, (-0.0) - _3346));
                                float _5125 = isnan(0.0) ? _3934 : (isnan(_3934) ? 0.0 : max(_3934, 0.0));
                                float _3937 = isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0));
                                float _3938 = dot(vec3(_1010, _1013, _1016), vec3(_3930 * _3924, _3930 * _3925, _3930 * _3926));
                                float _5136 = isnan(0.0) ? _3938 : (isnan(_3938) ? 0.0 : max(_3938, 0.0));
                                float _3941 = isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0));
                                float _3945 = ((_3941 * _3941) * (_3923 + (-1.0))) + 1.0;
                                float _3946 = _3883 * _3922;
                                float _3947 = _3946 * _3946;
                                float _3953 = ((1.0 - _3947) * dot(vec3(_1010, _1013, _1016), vec3(_3870, _3871, _3872))) + _3947;
                                float _5147 = isnan(0.0) ? _3953 : (isnan(_3953) ? 0.0 : max(_3953, 0.0));
                                float _3954 = isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0));
                                float _3955 = 1.0 - _3922;
                                float _3965 = (0.5 / (((_3954 * ((_3937 * _3955) + _3922)) + 9.9999999392252902907785028219223e-09) + (((_3954 * _3955) + _3922) * _3937))) * _3954;
                                float _5158 = isnan(0.0) ? _3965 : (isnan(_3965) ? 0.0 : max(_3965, 0.0));
                                float _3975 = (_3900 * _3877) * (((_3923 * 3.1415927410125732421875) * (isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0)))) / ((_3945 * _3945) * ((_3890 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3901 * _3747.z;
                                frontier_phi_88_pred_1 = _3901 * _3747.y;
                                frontier_phi_88_pred_2 = _3901 * _3747.x;
                                frontier_phi_88_pred_3 = _3975 * _3759.z;
                                frontier_phi_88_pred_4 = _3975 * _3759.y;
                                frontier_phi_88_pred_5 = _3975 * _3759.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3984 = frontier_phi_88_pred;
                            _3983 = frontier_phi_88_pred_1;
                            _3982 = frontier_phi_88_pred_2;
                            _3981 = frontier_phi_88_pred_3;
                            _3980 = frontier_phi_88_pred_4;
                            _3979 = frontier_phi_88_pred_5;
                            _3689 = _3982 + _3702;
                            _3690 = _3983 + _3703;
                            _3691 = _3984 + _3704;
                            _3686 = _3979 + _3699;
                            _3687 = _3980 + _3700;
                            _3688 = _3981 + _3701;
                            if (_3706 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3699 = _3686;
                                _3700 = _3687;
                                _3701 = _3688;
                                _3702 = _3689;
                                _3703 = _3690;
                                _3704 = _3691;
                                _3705 = _3706;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3691;
                        frontier_phi_82_pred_1 = _3690;
                        frontier_phi_82_pred_2 = _3689;
                        frontier_phi_82_pred_3 = _3688;
                        frontier_phi_82_pred_4 = _3687;
                        frontier_phi_82_pred_5 = _3686;
                    }
                    _3329 = frontier_phi_82_pred;
                    _3327 = frontier_phi_82_pred_1;
                    _3325 = frontier_phi_82_pred_2;
                    _3323 = frontier_phi_82_pred_3;
                    _3321 = frontier_phi_82_pred_4;
                    _3319 = frontier_phi_82_pred_5;
                    uint _3485 = _3484 + 1u;
                    if (_3485 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3478 = _3319;
                        _3479 = _3321;
                        _3480 = _3323;
                        _3481 = _3325;
                        _3482 = _3327;
                        _3483 = _3329;
                        _3484 = _3485;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3325;
                frontier_phi_63_64_ladder_1 = _3329;
                frontier_phi_63_64_ladder_2 = _3327;
                frontier_phi_63_64_ladder_3 = _3323;
                frontier_phi_63_64_ladder_4 = _3321;
                frontier_phi_63_64_ladder_5 = _3319;
            }
            else
            {
                frontier_phi_63_64_ladder = _3203;
                frontier_phi_63_64_ladder_1 = _3207;
                frontier_phi_63_64_ladder_2 = _3205;
                frontier_phi_63_64_ladder_3 = _3201;
                frontier_phi_63_64_ladder_4 = _3199;
                frontier_phi_63_64_ladder_5 = _3197;
            }
            _3318 = frontier_phi_63_64_ladder_5;
            _3320 = frontier_phi_63_64_ladder_4;
            _3322 = frontier_phi_63_64_ladder_3;
            _3324 = frontier_phi_63_64_ladder;
            _3326 = frontier_phi_63_64_ladder_2;
            _3328 = frontier_phi_63_64_ladder_1;
        }
        float _3333 = isnan(1.0) ? _1069 : (isnan(_1069) ? 1.0 : min(_1069, 1.0));
        _3130 = (_3333 * _3324) + _2642;
        _3132 = (_3333 * _3326) + _2644;
        _3134 = (_3333 * _3328) + _2646;
        _3136 = ((_3318 * _1053) * _3333) + _2980;
        _3138 = ((_3320 * _1055) * _3333) + _2982;
        _3140 = ((_3322 * _1056) * _3333) + _2984;
    }
    else
    {
        _3130 = _2642;
        _3132 = _2644;
        _3134 = _2646;
        _3136 = _2980;
        _3138 = _2982;
        _3140 = _2984;
    }
    float _5174 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _5185 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _5196 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _3157 = ((isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0))) * (_3130 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1069))) + ((_3136 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1907)) * cbPerFrame._m0[3u].x);
    float _3158 = ((isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0))) * (_3132 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1069))) + ((_3138 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1907)) * cbPerFrame._m0[3u].x);
    float _3159 = ((isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0))) * (_3134 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1069))) + ((_3140 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1907)) * cbPerFrame._m0[3u].x);
    uint _3160 = _291 + 6u;
    float _3168 = _991 / cbSceneParam._m0[86u].x;
    float _3169 = _992 / cbSceneParam._m0[86u].y;
    vec4 _3183 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3168, _3169, (log2((isnan(cbSceneParam._m0[77u].w) ? _914 : (isnan(_914) ? cbSceneParam._m0[77u].w : min(_914, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3185 = _3183.x;
    float _3186 = _3183.y;
    float _3187 = _3183.z;
    float _3188 = _3183.w;
    float _3260;
    float _3262;
    float _3264;
    float _3266;
    if (_914 > cbSceneParam._m0[78u].w)
    {
        float _3222 = isnan(_914) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _914 : min(cbSceneParam._m0[80u].w, _914));
        float _3223 = _3222 / _914;
        float _3234 = _3223 * _964;
        float _3235 = _965 * _3223;
        float _3236 = (-0.0) - _3235;
        float _3238 = _3223 * _966;
        float _3240 = (cbSceneParam._m0[77u].w * _3236) / _3222;
        float _3241 = _3240 + cbSceneParam._m0[79u].w;
        float _3242 = cbSceneParam._m0[79u].w - _3235;
        float _3248 = sqrt(((_3234 * _3234) + (_3235 * _3235)) + (_3238 * _3238));
        float _3251 = (1.0 - (cbSceneParam._m0[77u].w / _3222)) * _3248;
        float _3256 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3258 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3435;
        if (abs((_3236 - _3240) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3435 = ((((_3241 > 0.0) ? exp2(_3256 * _3241) : (2.0 - exp2(_3258 * _3241))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3251;
        }
        else
        {
            float _3379 = 1.0 / cbSceneParam._m0[80u].x;
            float _3380 = isnan(_3242) ? _3241 : (isnan(_3241) ? _3242 : max(_3241, _3242));
            float _3381 = isnan(_3242) ? _3241 : (isnan(_3241) ? _3242 : min(_3241, _3242));
            float _3390 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : min(_3380, 0.0));
            float _3391 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : min(_3381, 0.0));
            _3435 = ((abs(_3248 / _3236) * cbSceneParam._m0[80u].y) * ((((_3390 - _3391) * 2.0) - ((exp2(_3256 * (isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0)))) - exp2(_3256 * (isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))))) * _3379)) - ((exp2(_3258 * _3390) - exp2(_3258 * _3391)) * _3379))) + (_3251 * cbSceneParam._m0[80u].z);
        }
        vec4 _3437 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3168, _3169, 1.0), 0.0);
        float _3446 = exp2((_3435 * (-1.44269502162933349609375)) * (1.0 - _3437.w));
        float _3447 = log2(_3446);
        float _3463 = log2(_3188);
        _3260 = (exp2(_3463 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3447 * cbSceneParam._m0[78u].x)) * _3437.x) / cbSceneParam._m0[78u].x)) + _3185;
        _3262 = (exp2(_3463 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3447 * cbSceneParam._m0[78u].y)) * _3437.y) / cbSceneParam._m0[78u].y)) + _3186;
        _3264 = (exp2(_3463 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3447 * cbSceneParam._m0[78u].z)) * _3437.z) / cbSceneParam._m0[78u].z)) + _3187;
        _3266 = _3446 * _3188;
    }
    else
    {
        _3260 = _3185;
        _3262 = _3186;
        _3264 = _3187;
        _3266 = _3188;
    }
    bool _3473;
    vec4 _3276;
    vec4 _3298;
    float _3300;
    float _3304;
    float _3305;
    float _3306;
    float _3307;
    bool _3317;
    for (;;)
    {
        _3276 = cbMatDynParam._m0[0u];
        float _3278 = roundEven(_3276.y);
        bool _3279 = _3278 == 3.0;
        float _3280 = log2(_3266);
        float _3287 = exp2(_3280 * cbSceneParam._m0[78u].x) * _3157;
        float _3288 = exp2(_3280 * cbSceneParam._m0[78u].y) * _3158;
        float _3289 = exp2(_3280 * cbSceneParam._m0[78u].z) * _3159;
        float _3296 = _980 + (-0.5);
        _3298 = cbMtdParam._m0[1u];
        _3300 = _3298.y * _3296;
        float _3303 = (_3278 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3304 = _3303 * (_3279 ? _3287 : (_3287 + (cbSceneParam._m0[72u].w * _3260)));
        _3305 = _3303 * (_3279 ? _3288 : (_3288 + (cbSceneParam._m0[72u].w * _3262)));
        _3306 = _3303 * (_3279 ? _3289 : (_3289 + (cbSceneParam._m0[72u].w * _3264)));
        _3307 = _3296 * 0.999000012874603271484375;
        _3317 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3317)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3307) < 0.5)
            {
                _3473 = true;
                break;
            }
        }
        uint _3414 = _1029 + uint(_3276.w);
        if ((cbInstanceData._m0[_3414].w < 1.0) && ((cbInstanceData._m0[_3414].w + _3307) < 0.5))
        {
            _3473 = true;
            break;
        }
        if ((_3300 + 1.0) < _3298.x)
        {
            _3473 = true;
            break;
        }
        _3473 = false;
        break;
    }
    float _3677;
    if (_3473)
    {
        discard_state = true;
        _3677 = 0.0;
    }
    else
    {
        _3677 = cbInstanceData._m0[_3160].w;
    }
    SV_Target.x = _3304;
    SV_Target.y = _3305;
    SV_Target.z = _3306;
    SV_Target.w = _3677;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3160].w;
    discard_exit();
}


