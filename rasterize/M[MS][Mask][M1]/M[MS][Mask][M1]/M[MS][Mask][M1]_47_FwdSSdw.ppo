#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1389;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[23u].w) + _410) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3738 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _441 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_428 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323);
    float _444 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_428 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324);
    float _447 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_428 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325);
    vec4 _466 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _486 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _505 = _503.x;
    float _506 = _503.y;
    float _507 = _503.z;
    float _516 = ((_486.z - _507) * _428) + _507;
    float _519 = ((((_486.x - _505) * _428) + _505) * 2.0) + (-1.0);
    float _521 = ((((_486.y - _506) * _428) + _506) * 2.0) + (-1.0);
    float _522 = dot(vec2(_519, _521), vec2(_519, _521));
    float _3749 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _527 = sqrt(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _555 = (((_543.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _519;
    float _556 = (((_543.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _521;
    float _559 = fma(_527, _243, fma(_556, _250, _555 * _236));
    float _562 = fma(_527, _244, fma(_556, _251, _555 * _237));
    float _565 = fma(_527, _245, fma(_556, _252, _555 * _238));
    float _569 = inversesqrt(dot(vec3(_559, _562, _565), vec3(_559, _562, _565)));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _598 = _596.x;
    float _599 = 1.0 - _598;
    float _608 = (cbMtdParam._m0[19u].x + dot(vec4(_569 * _559, _569 * _562, _569 * _565, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_598 - _599) * cbMtdParam._m0[24u].z) + _599) * cbMtdParam._m0[21u].z);
    float _3760 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _611 = (-0.0) - cbMtdParam._m0[24u].x;
    float _613 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _613 : (isnan(_613) ? 1.0 : min(_613, 1.0));
    float _621 = _609 - ((_609 * TEXCOORD_8.x) * _614);
    float _622 = _609 - ((_609 * TEXCOORD_8.y) * _614);
    float _623 = _609 - ((_609 * TEXCOORD_8.z) * _614);
    float _630 = (_621 * ((_466.x * cbMtdParam._m0[18u].x) - _441)) + _441;
    float _631 = (_622 * ((_466.y * cbMtdParam._m0[18u].y) - _444)) + _444;
    float _632 = (_623 * ((_466.z * cbMtdParam._m0[18u].z) - _447)) + _447;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _646 = _644.x;
    float _647 = 1.0 - _646;
    float _673 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_646 - _647) * cbMtdParam._m0[24u].w) + _647) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3781 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _682 = ((((cbMtdParam._m0[10u].x - _630) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _674) + _630;
    float _683 = ((((cbMtdParam._m0[10u].y - _631) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _674) + _631;
    float _684 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _632)) * _674) + _632;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _712 = _710.x;
    float _729 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _712) * _428) + _712;
    float _733 = ((_696.x - _729) * cbMtdParam._m0[19u].z) + _729;
    float _735 = _733 - (_733 * _621);
    float _737 = _735 - (_735 * _674);
    float _741 = (cbMtdParam._m0[19u].w * (_543.z - _516)) + _516;
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _762 = (_755.x * 2.0) + (-1.0);
    float _763 = (_755.y * 2.0) + (-1.0);
    float _764 = dot(vec2(_762, _763), vec2(_762, _763));
    float _3792 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _772 = ((_755.z - _741) * _621) + _741;
    float _775 = ((cbMtdParam._m0[23u].x - _772) * _674) + _772;
    vec4 _794 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _800 = (_794.x * 2.0) + (-1.0);
    float _801 = (_794.y * 2.0) + (-1.0);
    float _802 = dot(vec2(_800, _801), vec2(_800, _801));
    float _3803 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _817 = ((sqrt(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) - _527) * _623) + _527;
    float _820 = (((_762 - _555) * _621) + _555) + (cbMtdParam._m0[21u].x * _555);
    float _821 = (((_763 - _556) * _622) + _556) + (cbMtdParam._m0[21u].x * _556);
    float _832 = (((_800 - _820) + (_820 * cbMtdParam._m0[22u].z)) * _674) + _820;
    float _833 = (((_801 - _821) + (_821 * cbMtdParam._m0[22u].z)) * _674) + _821;
    float _834 = (_674 * (sqrt(1.0 - (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) - _817)) + _817;
    float _836 = cbMtdParam._m0[22u].x + _543.w;
    float _839 = fma(_834, _243, fma(_833, _250, _832 * _236));
    float _842 = fma(_834, _244, fma(_833, _251, _832 * _237));
    float _845 = fma(_834, _245, fma(_833, _252, _832 * _238));
    float _849 = inversesqrt(dot(vec3(_839, _842, _845), vec3(_839, _842, _845)));
    float _850 = _849 * _839;
    float _851 = _849 * _842;
    float _852 = _849 * _845;
    float _3814 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _853 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _3836 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _3847 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _3858 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3869 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _858 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _872 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _922 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _912);
    float _923 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _912);
    float _924 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _912);
    float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
    float _929 = _922 * _928;
    float _930 = _923 * _928;
    float _931 = _924 * _928;
    float _937 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _938 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _956 = fma(_852, cbSceneParam._m0[5u].z, fma(_851, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _850));
    float _959 = fma(_852, cbSceneParam._m0[6u].z, fma(_851, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _850));
    float _962 = fma(_852, cbSceneParam._m0[7u].z, fma(_851, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _850));
    uint _976 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _982 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_976].x;
    float _983 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_976].y;
    float _984 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * cbInstanceData._m0[_976].z;
    float _3880 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _987 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _988 = 1.0 - _858;
    float _989 = _985 * _988;
    float _990 = _986 * _988;
    float _991 = _987 * _988;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _858;
    float _997 = (_986 + (-0.039999999105930328369140625)) * _858;
    float _998 = (_987 + (-0.039999999105930328369140625)) * _858;
    float _999 = _996 + 0.039999999105930328369140625;
    float _1001 = _997 + 0.039999999105930328369140625;
    float _1002 = _998 + 0.039999999105930328369140625;
    vec4 _1011 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _937, cbSceneParam._m0[86u].y * _938));
    float _1015 = ((isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * TEXCOORD_5.w) * _1011.x;
    float _1016 = dot(vec3(_850, _851, _852), vec3(_929, _930, _931));
    float _1019 = _1016 * 2.0;
    float _1023 = (_1019 * _850) - _929;
    float _1024 = (_1019 * _851) - _930;
    float _1025 = (_1019 * _852) - _931;
    float _1029 = abs(dot(vec3(_929, _930, _931), vec3(_850, _851, _852)));
    float _3913 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1031 = sqrt(_853);
    float _1044 = exp2((_1031 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1031 * 3.0));
    float _1050 = (1.0 - _1044) * ((_1031 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1051 = _1044 * _1031;
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1388;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1113 = fma(_1087, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1079));
        float _1117 = fma(_1087, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1079));
        float _1121 = fma(_1087, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1079));
        float _1146 = _1079 + _850;
        float _1147 = _1083 + _851;
        float _1148 = _1087 + _852;
        float _1158 = fma(_1148, cbModelParam._m0[26u].z, fma(_1147, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1146)) - _1113;
        float _1159 = fma(_1148, cbModelParam._m0[27u].z, fma(_1147, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1146)) - _1117;
        float _1160 = fma(_1148, cbModelParam._m0[28u].z, fma(_1147, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1146)) - _1121;
        float _1164 = inversesqrt(dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160)));
        float _1177 = ((_1164 * _1158) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1113 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1164 * _1159) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1117 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1164 * _1160) / cbModelParam._m0[34u].z) + ((((((_1121 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        float _1216 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1182.x + (-0.5));
        float _1218 = _1216 * (_1182.y + (-0.5));
        float _1219 = _1216 * (_1182.z + (-0.5));
        float _1226 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1189.x + (-0.5));
        float _1228 = _1226 * (_1189.y + (-0.5));
        float _1229 = _1226 * (_1189.z + (-0.5));
        float _1236 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1196.x + (-0.5));
        float _1238 = _1236 * (_1196.y + (-0.5));
        float _1239 = _1236 * (_1196.z + (-0.5));
        float _1246 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1203.x + (-0.5));
        float _1248 = _1246 * (_1203.y + (-0.5));
        float _1249 = _1246 * (_1203.z + (-0.5));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = _1217 * 0.5;
        float _1254 = _1227 * 0.5;
        float _1255 = _1237 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1270 = (dot(vec3(_850, _851, _852), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1280 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3961 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1282 + 1.0))) + _1287) * _1250;
        float _1297 = _1218 * 0.5;
        float _1298 = _1228 * 0.5;
        float _1299 = _1238 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_850, _851, _852), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3994 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1324 + 1.0))) + _1329) * _1251;
        float _1339 = _1219 * 0.5;
        float _1340 = _1229 * 0.5;
        float _1341 = _1239 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_850, _851, _852), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4027 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1366 + 1.0))) + _1371) * _1252;
        _1388 = _1219;
        _1390 = _1218;
        _1391 = _1217;
        _1392 = _1229;
        _1393 = _1228;
        _1394 = _1227;
        _1395 = _1239;
        _1396 = _1238;
        _1397 = _1237;
        _1398 = _1252;
        _1399 = _1251;
        _1400 = _1250;
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1402 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
    }
    else
    {
        _1388 = _1389;
        _1390 = _1389;
        _1391 = _1389;
        _1392 = _1389;
        _1393 = _1389;
        _1394 = _1389;
        _1395 = _1389;
        _1396 = _1389;
        _1397 = _1389;
        _1398 = _1389;
        _1399 = _1389;
        _1400 = _1389;
        _1401 = 0.0;
        _1402 = 0.0;
        _1403 = 0.0;
    }
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1428 = fma(_1087, cbModelParam._m0[30u].z, fma(_1083, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1079));
        float _1432 = fma(_1087, cbModelParam._m0[31u].z, fma(_1083, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1079));
        float _1436 = fma(_1087, cbModelParam._m0[32u].z, fma(_1083, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1079));
        float _1459 = _1079 + _850;
        float _1460 = _1083 + _851;
        float _1461 = _1087 + _852;
        float _1471 = fma(_1461, cbModelParam._m0[30u].z, fma(_1460, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1459)) - _1428;
        float _1472 = fma(_1461, cbModelParam._m0[31u].z, fma(_1460, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1459)) - _1432;
        float _1473 = fma(_1461, cbModelParam._m0[32u].z, fma(_1460, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1459)) - _1436;
        float _1477 = inversesqrt(dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473)));
        float _1490 = ((_1477 * _1471) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1428 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1491 = ((_1477 * _1472) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1432 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1492 = ((_1477 * _1473) / cbModelParam._m0[35u].z) + ((((((_1436 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        float _1527 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1494.x + (-0.5));
        float _1529 = _1527 * (_1494.y + (-0.5));
        float _1530 = _1527 * (_1494.z + (-0.5));
        float _1537 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1501.x + (-0.5));
        float _1539 = _1537 * (_1501.y + (-0.5));
        float _1540 = _1537 * (_1501.z + (-0.5));
        float _1547 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1508.x + (-0.5));
        float _1549 = _1547 * (_1508.y + (-0.5));
        float _1550 = _1547 * (_1508.z + (-0.5));
        float _1557 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1515.x + (-0.5));
        float _1559 = _1557 * (_1515.y + (-0.5));
        float _1560 = _1557 * (_1515.z + (-0.5));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = _1528 * 0.5;
        float _1565 = _1538 * 0.5;
        float _1566 = _1548 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_850, _851, _852), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4090 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1591 + 1.0))) + _1596) * _1561;
        float _1606 = _1529 * 0.5;
        float _1607 = _1539 * 0.5;
        float _1608 = _1549 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_850, _851, _852), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4123 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1633 + 1.0))) + _1638) * _1562;
        float _1648 = _1530 * 0.5;
        float _1649 = _1540 * 0.5;
        float _1650 = _1550 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_850, _851, _852), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4156 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1675 + 1.0))) + _1680) * _1563;
        _1697 = _1530;
        _1698 = _1529;
        _1699 = _1528;
        _1700 = _1540;
        _1701 = _1539;
        _1702 = _1538;
        _1703 = _1550;
        _1704 = _1549;
        _1705 = _1548;
        _1706 = _1563;
        _1707 = _1562;
        _1708 = _1561;
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
    }
    else
    {
        _1697 = _1389;
        _1698 = _1389;
        _1699 = _1389;
        _1700 = _1389;
        _1701 = _1389;
        _1702 = _1389;
        _1703 = _1389;
        _1704 = _1389;
        _1705 = _1389;
        _1706 = _1389;
        _1707 = _1389;
        _1708 = _1389;
        _1709 = 0.0;
        _1710 = 0.0;
        _1711 = 0.0;
    }
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1401)) + _1401;
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1402)) + _1402;
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1403)) + _1403;
    float _1744 = fma(_1723, cbSceneParam._m0[89u].z, fma(_1722, cbSceneParam._m0[89u].y, _1721 * cbSceneParam._m0[89u].x));
    float _1747 = fma(_1723, cbSceneParam._m0[90u].z, fma(_1722, cbSceneParam._m0[90u].y, _1721 * cbSceneParam._m0[90u].x));
    float _1750 = fma(_1723, cbSceneParam._m0[91u].z, fma(_1722, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1721));
    float _1765 = _1023 * 0.5;
    float _1766 = _1024 * 0.5;
    float _1767 = _1025 * 0.5;
    float _1768 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1771 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1774 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1808;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1781 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1388, _1392, _1395, _1398));
        float _1785 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1390, _1393, _1396, _1399));
        float _1789 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1391, _1394, _1397, _1400));
        float _1796 = dot(vec4(cbModelParam._m0[39u]), vec4(_1765, _1766, _1767, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1819;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1810 = dot(vec4(cbModelParam._m0[40u]), vec4(_1765, _1766, _1767, 1.0));
        _1819 = dot(vec3(isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1810) ? 0.0 : (isnan(0.0) ? _1810 : max(0.0, _1810))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1819 = 1.0;
    }
    float _1823 = (_1819 * cbModelParam._m0[1u].x) + (_1808 * (1.0 - cbModelParam._m0[1u].x));
    float _1833 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _853);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1833 : min(cbModelParam._m0[25u].z, _1833));
    float _1914;
    float _1916;
    float _1918;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1881 = fma(_1087, cbModelParam._m0[13u].z, fma(_1083, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1079)) + cbModelParam._m0[13u].w;
        float _1885 = fma(_1087, cbModelParam._m0[14u].z, fma(_1083, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1079)) + cbModelParam._m0[14u].w;
        float _1889 = fma(_1087, cbModelParam._m0[15u].z, fma(_1083, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1079)) + cbModelParam._m0[15u].w;
        float _1892 = fma(_1025, cbModelParam._m0[13u].z, fma(_1024, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1023));
        float _1895 = fma(_1025, cbModelParam._m0[14u].z, fma(_1024, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1023));
        float _1898 = fma(_1025, cbModelParam._m0[15u].z, fma(_1024, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1023));
        float _1926;
        if (_1892 > 0.0)
        {
            _1926 = abs((1.0 - _1881) / _1892);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1881 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1926 = frontier_phi_14_12_ladder;
        }
        float _2149;
        if (_1895 > 0.0)
        {
            _2149 = abs((1.0 - _1885) / _1895);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1885 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2149 = frontier_phi_23_19_ladder;
        }
        float _2406;
        if (_1898 > 0.0)
        {
            _2406 = abs((1.0 - _1889) / _1898);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1889 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2406 = frontier_phi_35_30_ladder;
        }
        float _2408 = isnan(_2149) ? _1926 : (isnan(_1926) ? _2149 : min(_1926, _2149));
        float _2409 = isnan(_2406) ? _2408 : (isnan(_2408) ? _2406 : min(_2408, _2406));
        float _2413 = (_2409 * _1892) + _1881;
        float _2414 = (_2409 * _1895) + _1885;
        float _2415 = (_2409 * _1898) + _1889;
        float _2416 = _2409 * 9.9999997473787516355514526367188e-05;
        float _2418 = (-1.0) - _2416;
        float _2420 = _2416 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2415 > _2420) || ((_2415 < _2418) || ((_2414 > _2420) || ((_2414 < _2418) || ((_2413 < _2418) || (_2413 > _2420))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2415, cbModelParam._m0[9u].z, fma(_2414, cbModelParam._m0[9u].y, _2413 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2415, cbModelParam._m0[10u].z, fma(_2414, cbModelParam._m0[10u].y, _2413 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2415, cbModelParam._m0[11u].z, fma(_2414, cbModelParam._m0[11u].y, _2413 * cbModelParam._m0[11u].x))), _1834);
            frontier_phi_13_35_ladder = _2543.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2543.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2543.x * cbModelParam._m0[1u].y;
        }
        _1914 = frontier_phi_13_35_ladder_2;
        _1916 = frontier_phi_13_35_ladder_1;
        _1918 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1023, _1024, _1025), _1834);
        _1914 = _1902.x * cbModelParam._m0[1u].y;
        _1916 = _1902.y * cbModelParam._m0[1u].y;
        _1918 = _1902.z * cbModelParam._m0[1u].y;
    }
    float _1922 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _853);
    float _1923 = isnan(_1922) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1922 : min(cbModelParam._m0[25u].w, _1922));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1976 = fma(_1087, cbModelParam._m0[21u].z, fma(_1083, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1079)) + cbModelParam._m0[21u].w;
        float _1980 = fma(_1087, cbModelParam._m0[22u].z, fma(_1083, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1079)) + cbModelParam._m0[22u].w;
        float _1984 = fma(_1087, cbModelParam._m0[23u].z, fma(_1083, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1079)) + cbModelParam._m0[23u].w;
        float _1987 = fma(_1025, cbModelParam._m0[21u].z, fma(_1024, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1023));
        float _1990 = fma(_1025, cbModelParam._m0[22u].z, fma(_1024, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1023));
        float _1993 = fma(_1025, cbModelParam._m0[23u].z, fma(_1024, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1023));
        float _2154;
        if (_1987 > 0.0)
        {
            _2154 = abs((1.0 - _1976) / _1987);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1976 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2154 = frontier_phi_25_21_ladder;
        }
        float _2433;
        if (_1990 > 0.0)
        {
            _2433 = abs((1.0 - _1980) / _1990);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1980 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2433 = frontier_phi_37_32_ladder;
        }
        float _2646;
        if (_1993 > 0.0)
        {
            _2646 = abs((1.0 - _1984) / _1993);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1984 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2646 = frontier_phi_46_43_ladder;
        }
        float _2648 = isnan(_2433) ? _2154 : (isnan(_2154) ? _2433 : min(_2154, _2433));
        float _2649 = isnan(_2646) ? _2648 : (isnan(_2648) ? _2646 : min(_2648, _2646));
        float _2653 = (_2649 * _1987) + _1976;
        float _2654 = (_2649 * _1990) + _1980;
        float _2655 = (_2649 * _1993) + _1984;
        float _2656 = _2649 * 9.9999997473787516355514526367188e-05;
        float _2657 = (-1.0) - _2656;
        float _2659 = _2656 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2655 > _2659) || ((_2655 < _2657) || ((_2654 > _2659) || ((_2654 < _2657) || ((_2653 < _2657) || (_2653 > _2659))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2655, cbModelParam._m0[17u].z, fma(_2654, cbModelParam._m0[17u].y, _2653 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2655, cbModelParam._m0[18u].z, fma(_2654, cbModelParam._m0[18u].y, _2653 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2655, cbModelParam._m0[19u].z, fma(_2654, cbModelParam._m0[19u].y, _2653 * cbModelParam._m0[19u].x))), _1923);
            frontier_phi_22_46_ladder = _2854.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2854.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2854.x * cbModelParam._m0[1u].z;
        }
        _2012 = frontier_phi_22_46_ladder_2;
        _2014 = frontier_phi_22_46_ladder_1;
        _2016 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1023, _1024, _1025), _1923);
        _2012 = _1996.x * cbModelParam._m0[1u].z;
        _2014 = _1996.y * cbModelParam._m0[1u].z;
        _2016 = _1996.z * cbModelParam._m0[1u].z;
    }
    float _2029 = (((_1050 * _999) + _1051) * _1015) * ((cbModelParam._m0[1u].w * (_2012 - _1914)) + _1914);
    float _2031 = (((_1050 * _1001) + _1051) * _1015) * ((cbModelParam._m0[1u].w * (_2014 - _1916)) + _1916);
    float _2033 = (((_1050 * _1002) + _1051) * _1015) * ((cbModelParam._m0[1u].w * (_2016 - _1918)) + _1918);
    float _2036 = fma(_2033, cbSceneParam._m0[89u].z, fma(_2031, cbSceneParam._m0[89u].y, _2029 * cbSceneParam._m0[89u].x));
    float _2039 = fma(_2033, cbSceneParam._m0[90u].z, fma(_2031, cbSceneParam._m0[90u].y, _2029 * cbSceneParam._m0[90u].x));
    float _2042 = fma(_2033, cbSceneParam._m0[91u].z, fma(_2031, cbSceneParam._m0[91u].y, _2029 * cbSceneParam._m0[91u].x));
    vec4 _2050 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_937, _938));
    float _2052 = _2050.w;
    float _2064 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2052);
    float _2065 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2052);
    float _2066 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2052);
    uvec4 _2070 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2072 = _2070.x * 14u;
    uint _2073 = _2072 + 13u;
    float _2080 = _1015 + (-1.0);
    float _2085 = (cbLight._m0[_2073].x * _2080) + 1.0;
    float _2086 = (cbLight._m0[_2073].y * _2080) + 1.0;
    float _2087 = (cbLight._m0[_2073].z * _2080) + 1.0;
    float _2088 = (cbLight._m0[_2073].w * _2080) + 1.0;
    uint _2089 = _2072 + 5u;
    float _2095 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
    uint _2099 = _2072 + 4u;
    float _2108 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
    uint _2112 = _2072 | 1u;
    float _2123 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_850, _851, _852));
    float _2126 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_850, _851, _852));
    float _4292 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _4303 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2131 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * 0.3183098733425140380859375;
    float _2133 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * 0.3183098733425140380859375;
    float _2140 = ((cbLight._m0[_2089].x * _2095) * _2133) + (((cbLight._m0[_2099].x * _2064) * _2108) * _2131);
    float _2141 = ((_2095 * cbLight._m0[_2089].y) * _2133) + (((cbLight._m0[_2099].y * _2065) * _2108) * _2131);
    float _2142 = ((_2095 * cbLight._m0[_2089].z) * _2133) + (((cbLight._m0[_2099].z * _2066) * _2108) * _2131);
    uvec4 _2146 = floatBitsToUint(cbLight._m0[_2072 + 12u]);
    bool _2148 = _2146.x == 0u;
    float _2159;
    float _2161;
    float _2163;
    if (_2148)
    {
        _2159 = _2140;
        _2161 = _2141;
        _2163 = _2142;
    }
    else
    {
        uint _2167 = _2072 + 6u;
        float _2183 = (dot(vec3(cbLight._m0[_2072 + 2u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2184 = _2183 * _2183;
        float _4314 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2185 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2186 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2159 = (((cbLight._m0[_2167].x * 0.3183098733425140380859375) * _2185) * _2186) + _2140;
        _2161 = (((cbLight._m0[_2167].y * 0.3183098733425140380859375) * _2185) * _2186) + _2141;
        _2163 = (((cbLight._m0[_2167].z * 0.3183098733425140380859375) * _2185) * _2186) + _2142;
    }
    bool _2166 = _2146.y == 0u;
    float _2204;
    float _2206;
    float _2208;
    if (_2166)
    {
        _2204 = _2159;
        _2206 = _2161;
        _2208 = _2163;
    }
    else
    {
        uint _2377 = _2072 + 7u;
        float _2393 = (dot(vec3(cbLight._m0[_2072 + 3u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2394 = _2393 * _2393;
        float _4330 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2395 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2396 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2204 = (((cbLight._m0[_2377].x * 0.3183098733425140380859375) * _2395) * _2396) + _2159;
        _2206 = (((cbLight._m0[_2377].y * 0.3183098733425140380859375) * _2395) * _2396) + _2161;
        _2208 = (((cbLight._m0[_2377].z * 0.3183098733425140380859375) * _2395) * _2396) + _2163;
    }
    uint _2211 = _2072 + 8u;
    float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _853) * 0.949999988079071044921875);
    float _2225 = _2224 * _2224;
    float _2226 = cbLight._m0[_2072].x + _929;
    float _2227 = cbLight._m0[_2072].y + _930;
    float _2228 = cbLight._m0[_2072].z + _931;
    float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
    float _2233 = _2232 * _2226;
    float _2234 = _2232 * _2227;
    float _2235 = _2232 * _2228;
    float _2236 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2072].xyz));
    float _4346 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _4357 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _2240 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2241 = dot(vec3(_850, _851, _852), vec3(_2233, _2234, _2235));
    float _4368 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _2245 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2233, _2234, _2235));
    float _4379 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2249 = _2225 * _2225;
    float _2253 = ((_2244 * _2244) * (_2249 + (-1.0))) + 1.0;
    float _2261 = exp2(log2(1.0 - (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) * 5.0);
    float _2262 = 0.959999978542327880859375 - _996;
    float _2264 = 0.959999978542327880859375 - _997;
    float _2265 = 0.959999978542327880859375 - _998;
    float _2272 = 1.0 - _2225;
    float _2283 = (0.5 / (((_2240 * ((_2239 * _2272) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2272) + _2225) * _2239))) * _2239;
    float _4390 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2285 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2249 / ((_2253 * _2253) * 3.141590118408203125));
    uint _2299 = _2072 + 9u;
    float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _853) * 0.949999988079071044921875);
    float _2311 = _2310 * _2310;
    float _2312 = cbLight._m0[_2112].x + _929;
    float _2313 = cbLight._m0[_2112].y + _930;
    float _2314 = cbLight._m0[_2112].z + _931;
    float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
    float _2319 = _2318 * _2312;
    float _2320 = _2318 * _2313;
    float _2321 = _2318 * _2314;
    float _2322 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2112].xyz));
    float _4401 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _2326 = dot(vec3(_850, _851, _852), vec3(_2319, _2320, _2321));
    float _4412 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2330 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2319, _2320, _2321));
    float _4423 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2334 = _2311 * _2311;
    float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
    float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) * 5.0);
    float _2352 = 1.0 - _2311;
    float _2362 = (0.5 / (((_2240 * ((_2325 * _2352) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2352) + _2311) * _2325))) * _2325;
    float _4434 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
    float _2374 = (((((_2345 * _2262) + _999) * cbLight._m0[_2299].x) * _2364) * _2095) + ((((cbLight._m0[_2211].x * _2064) * ((_2261 * _2262) + _999)) * _2285) * _2108);
    float _2375 = (((((_2345 * _2264) + _1001) * cbLight._m0[_2299].y) * _2364) * _2095) + ((((cbLight._m0[_2211].y * _2065) * ((_2261 * _2264) + _1001)) * _2285) * _2108);
    float _2376 = (((((_2345 * _2265) + _1002) * cbLight._m0[_2299].z) * _2364) * _2095) + ((((cbLight._m0[_2211].z * _2066) * ((_2261 * _2265) + _1002)) * _2285) * _2108);
    float _2438;
    float _2440;
    float _2442;
    if (_2148)
    {
        _2438 = _2374;
        _2440 = _2375;
        _2442 = _2376;
    }
    else
    {
        uint _2444 = _2072 + 2u;
        uint _2448 = _2072 + 10u;
        float _2462 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2444].w)) * _853) * 0.949999988079071044921875);
        float _2463 = _2462 * _2462;
        float _2464 = cbLight._m0[_2444].x + _929;
        float _2465 = cbLight._m0[_2444].y + _930;
        float _2466 = cbLight._m0[_2444].z + _931;
        float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
        float _2471 = _2470 * _2464;
        float _2472 = _2470 * _2465;
        float _2473 = _2470 * _2466;
        float _2474 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2444].xyz));
        float _4445 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2478 = dot(vec3(_850, _851, _852), vec3(_2471, _2472, _2473));
        float _4456 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2482 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_2471, _2472, _2473));
        float _4467 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2486 = _2463 * _2463;
        float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
        float _2497 = exp2(log2(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * 5.0);
        float _2504 = 1.0 - _2463;
        float _2514 = (0.5 / (((_2240 * ((_2477 * _2504) + _2463)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2504) + _2463) * _2477))) * _2477;
        float _4478 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2516 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
        float _2517 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2438 = (((((_2497 * _2262) + _999) * cbLight._m0[_2448].x) * _2516) * _2517) + _2374;
        _2440 = (((((_2497 * _2264) + _1001) * cbLight._m0[_2448].y) * _2516) * _2517) + _2375;
        _2442 = (((((_2497 * _2265) + _1002) * cbLight._m0[_2448].z) * _2516) * _2517) + _2376;
    }
    float _2552;
    float _2554;
    float _2556;
    if (_2166)
    {
        _2552 = _2438;
        _2554 = _2440;
        _2556 = _2442;
    }
    else
    {
        uint _2563 = _2072 + 3u;
        uint _2567 = _2072 + 11u;
        float _2581 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2563].w)) * _853) * 0.949999988079071044921875);
        float _2582 = _2581 * _2581;
        float _2583 = cbLight._m0[_2563].x + _929;
        float _2584 = cbLight._m0[_2563].y + _930;
        float _2585 = cbLight._m0[_2563].z + _931;
        float _2589 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
        float _2590 = _2589 * _2583;
        float _2591 = _2589 * _2584;
        float _2592 = _2589 * _2585;
        float _2593 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2563].xyz));
        float _4494 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2597 = dot(vec3(_850, _851, _852), vec3(_2590, _2591, _2592));
        float _4505 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2600 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2601 = dot(vec3(cbLight._m0[_2563].xyz), vec3(_2590, _2591, _2592));
        float _4516 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2605 = _2582 * _2582;
        float _2609 = ((_2600 * _2600) * (_2605 + (-1.0))) + 1.0;
        float _2616 = exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0);
        float _2623 = 1.0 - _2582;
        float _2633 = (0.5 / (((_2240 * ((_2596 * _2623) + _2582)) + 9.9999999392252902907785028219223e-09) + (((_2240 * _2623) + _2582) * _2596))) * _2596;
        float _4527 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2635 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2605 / ((_2609 * _2609) * 3.141590118408203125));
        float _2636 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2552 = (((((_2616 * _2262) + _999) * cbLight._m0[_2567].x) * _2635) * _2636) + _2438;
        _2554 = (((((_2616 * _2264) + _1001) * cbLight._m0[_2567].y) * _2635) * _2636) + _2440;
        _2556 = (((((_2616 * _2265) + _1002) * cbLight._m0[_2567].z) * _2635) * _2636) + _2442;
    }
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    if (_2070.y == 0u)
    {
        float _2711 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2711;
        float _2713 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2711;
        float _2714 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2711;
        uvec4 _2726 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2727 = _2726.x;
        uint _2738 = uint((float(_2726.y) * floor(float(uint(cbSceneParam._m0[85u].y * _938) / _2727))) + floor(float(uint(cbSceneParam._m0[85u].x * _937) / _2727)));
        float _2748 = (log2(_2714 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2749 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        uint _2752 = uint(isnan(14.0) ? _2749 : (isnan(_2749) ? 14.0 : min(_2749, 14.0)));
        uvec4 _2757 = texelFetch(g_lightClusterGridBuffer, int(((_2752 << 2u) + (_2738 << 6u)) >> 2u));
        uint _2758 = _2757.x;
        uint _2759 = _2726.z;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        if (((((1u << ((_2759 >> 4u) & 15u)) + 4294967295u) & _2758) == 0u) || ((_2759 & 240u) == 0u))
        {
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
        }
        else
        {
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            uint _3009 = 0u;
            uint _3018;
            bool _3019;
            for (;;)
            {
                _3018 = texelFetch(g_lightClassification, int((((_2752 << 5u) + (_2738 << 9u)) + (_3009 << 2u)) >> 2u)).x;
                _3019 = _3018 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3019)
                {
                    frontier_phi_61_pred = _3003;
                    frontier_phi_61_pred_1 = _3008;
                    frontier_phi_61_pred_2 = _3007;
                    frontier_phi_61_pred_3 = _3006;
                    frontier_phi_61_pred_4 = _3005;
                    frontier_phi_61_pred_5 = _3004;
                }
                else
                {
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    uint _3133;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3018;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    for (;;)
                    {
                        uint _3137 = uint(findLSB(_3133)) + (_3009 << 5u);
                        uint _3134 = (_3133 + 4294967295u) & _3133;
                        uint _3139 = _3137 * 48u;
                        vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 3u)).x));
                        uint _3159 = (_3137 * 48u) + 4u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3178 = (_3137 * 48u) + 8u;
                        vec3 _3189 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x));
                        float _3193 = _3153.x - _2712;
                        float _3194 = _3153.y - _2713;
                        float _3195 = _3153.z - _2714;
                        float _3196 = dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195));
                        float _3199 = inversesqrt(_3196);
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3203 = dot(vec3(_956, _959, _962), vec3(_3200, _3201, _3202));
                        float _3208 = 1.0 - (_3196 * _3153.w);
                        float _4553 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                        float _3210 = sqrt(_3196) * _3172.w;
                        float _3213 = 1.39999997615814208984375 / (_3210 + 1.39999997615814208984375);
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3203) + _3214;
                        float _3220 = _3210 * _3210;
                        float _3224 = ((isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))) * _3209) / ((_3220 * 0.699999988079071044921875) + 1.0);
                        float _3228 = (-0.0) - _2712;
                        float _3229 = (-0.0) - _2713;
                        float _3230 = (-0.0) - _2714;
                        float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                        float _3235 = _3234 * _3228;
                        float _3236 = _3234 * _3229;
                        float _3237 = _3234 * _3230;
                        float _3245 = exp2(log2(1.0 / ((_3220 * 3.5) + 5.0)) * 0.25);
                        float _3246 = 1.0 - _1031;
                        float _3253 = sqrt(1.0 - ((1.0 - (_3246 * _3246)) * (1.0 - (_3245 * _3245))));
                        float _3254 = _3253 * _3253;
                        float _3255 = _3254 * _3254;
                        float _3256 = _3235 + _3200;
                        float _3257 = _3236 + _3201;
                        float _3258 = _3237 + _3202;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3266 = dot(vec3(_956, _959, _962), vec3(_3235, _3236, _3237));
                        float _4569 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3269 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3270 = dot(vec3(_956, _959, _962), vec3(_3262 * _3256, _3262 * _3257, _3262 * _3258));
                        float _4580 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3273 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3277 = ((_3273 * _3273) * (_3255 + (-1.0))) + 1.0;
                        float _3278 = _3213 * _3254;
                        float _3279 = _3278 * _3278;
                        float _3282 = ((1.0 - _3279) * _3203) + _3279;
                        float _4591 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                        float _3284 = 1.0 - _3254;
                        float _3294 = (0.5 / (((_3283 * ((_3269 * _3284) + _3254)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3254) * _3269))) * _3283;
                        float _4602 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3305 = (((_3255 * 3.1415927410125732421875) * (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) / ((_3277 * _3277) * ((_3220 * 2.1991131305694580078125) + 3.141590118408203125))) * _3209;
                        _3062 = (_3224 * _3172.x) + _3130;
                        _3063 = (_3224 * _3172.y) + _3131;
                        _3064 = (_3224 * _3172.z) + _3132;
                        _3059 = (_3305 * _3189.x) + _3127;
                        _3060 = (_3305 * _3189.y) + _3128;
                        _3061 = (_3305 * _3189.z) + _3129;
                        if (_3134 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3134;
                        }
                    }
                    frontier_phi_61_pred = _3059;
                    frontier_phi_61_pred_1 = _3064;
                    frontier_phi_61_pred_2 = _3063;
                    frontier_phi_61_pred_3 = _3062;
                    frontier_phi_61_pred_4 = _3061;
                    frontier_phi_61_pred_5 = _3060;
                }
                _2860 = frontier_phi_61_pred;
                _2870 = frontier_phi_61_pred_1;
                _2868 = frontier_phi_61_pred_2;
                _2866 = frontier_phi_61_pred_3;
                _2864 = frontier_phi_61_pred_4;
                _2862 = frontier_phi_61_pred_5;
                uint _3010 = _3009 + 1u;
                if (_3010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3003 = _2860;
                    _3004 = _2862;
                    _3005 = _2864;
                    _3006 = _2866;
                    _3007 = _2868;
                    _3008 = _2870;
                    _3009 = _3010;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
        }
        uvec4 _2873 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2874 = _2873.z;
        uint _2876 = (_2874 >> 8u) & 15u;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        if (((4294967295u << _2876) & _2758) == 0u)
        {
            _2971 = _2859;
            _2973 = _2861;
            _2975 = _2863;
            _2977 = _2865;
            _2979 = _2867;
            _2981 = _2869;
        }
        else
        {
            float _2996 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
            float _2997 = _2996 * _2712;
            float _2998 = _2996 * _2713;
            float _2999 = _2996 * _2714;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2876 < ((_2874 >> 12u) & 15u))
            {
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _3110 = _2859;
                float _3111 = _2861;
                float _3112 = _2863;
                float _3113 = _2865;
                float _3114 = _2867;
                float _3115 = _2869;
                uint _3116 = _2876;
                uint _3125;
                bool _3126;
                for (;;)
                {
                    _3125 = texelFetch(g_lightClassification, int((((_2752 << 5u) + (_2738 << 9u)) + (_3116 << 2u)) >> 2u)).x;
                    _3126 = _3125 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3126)
                    {
                        frontier_phi_67_pred = _3113;
                        frontier_phi_67_pred_1 = _3114;
                        frontier_phi_67_pred_2 = _3115;
                        frontier_phi_67_pred_3 = _3112;
                        frontier_phi_67_pred_4 = _3111;
                        frontier_phi_67_pred_5 = _3110;
                    }
                    else
                    {
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3323 = _3110;
                        float _3324 = _3111;
                        float _3325 = _3112;
                        float _3326 = _3113;
                        float _3327 = _3114;
                        float _3328 = _3115;
                        uint _3329 = _3125;
                        uint _3330;
                        vec4 _3355;
                        float _3356;
                        vec4 _3371;
                        vec3 _3383;
                        vec4 _3398;
                        vec4 _3414;
                        float _3460;
                        bool _3461;
                        for (;;)
                        {
                            uint _3340 = ((_3116 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3329));
                            _3330 = (_3329 + 4294967295u) & _3329;
                            uint _3342 = _3340 * 40u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            _3356 = _3355.w;
                            uint _3358 = (_3340 * 40u) + 4u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3340 * 40u) + 8u;
                            _3383 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x));
                            uint _3385 = (_3340 * 40u) + 16u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3401 = (_3340 * 40u) + 20u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3340 * 40u) + 24u;
                            vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3435 = (_3340 * 40u) + 28u;
                            vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            _3460 = fma(_2714, _3448.z, fma(_2713, _3448.y, _3448.x * _2712)) + _3448.w;
                            _3461 = !((fma(_2714, _3429.z, fma(_2713, _3429.y, _3429.x * _2712)) + _3429.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3461)
                            {
                                float _3488 = _3355.x - _2712;
                                float _3489 = _3355.y - _2713;
                                float _3490 = _3355.z - _2714;
                                float _3491 = dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490));
                                float _3494 = inversesqrt(_3491);
                                float _3495 = _3494 * _3488;
                                float _3496 = _3494 * _3489;
                                float _3497 = _3494 * _3490;
                                float _3501 = 1.0 - (_3491 / (_3356 * _3356));
                                float _4613 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3506 = sqrt(_3491) * _3371.w;
                                float _3508 = 1.39999997615814208984375 / (_3506 + 1.39999997615814208984375);
                                float _3509 = _3508 * _3508;
                                float _3512 = ((1.0 - _3509) * dot(vec3(_3495, _3496, _3497), vec3(_956, _959, _962))) + _3509;
                                float _3515 = _3506 * _3506;
                                float _3519 = (fma(_2714, _3398.z, fma(_2713, _3398.y, _3398.x * _2712)) + _3398.w) / _3460;
                                float _3520 = (fma(_2714, _3414.z, fma(_2713, _3414.y, _3414.x * _2712)) + _3414.w) / _3460;
                                float _3524 = 1.0 - dot(vec2(_3519, _3520), vec2(_3519, _3520));
                                float _4629 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3526 = _3525 * (((isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0))) * _3502) / ((_3515 * 0.699999988079071044921875) + 1.0));
                                float _3538 = exp2(log2(1.0 / ((_3515 * 3.5) + 5.0)) * 0.25);
                                float _3539 = 1.0 - _1031;
                                float _3546 = sqrt(1.0 - ((1.0 - (_3539 * _3539)) * (1.0 - (_3538 * _3538))));
                                float _3547 = _3546 * _3546;
                                float _3548 = _3547 * _3547;
                                float _3549 = _3495 - _2997;
                                float _3550 = _3496 - _2998;
                                float _3551 = _3497 - _2999;
                                float _3555 = inversesqrt(dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551)));
                                float _3559 = dot(vec3(_956, _959, _962), vec3((-0.0) - _2997, (-0.0) - _2998, (-0.0) - _2999));
                                float _4640 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3562 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3563 = dot(vec3(_956, _959, _962), vec3(_3555 * _3549, _3555 * _3550, _3555 * _3551));
                                float _4651 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3566 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3570 = ((_3566 * _3566) * (_3548 + (-1.0))) + 1.0;
                                float _3571 = _3508 * _3547;
                                float _3572 = _3571 * _3571;
                                float _3578 = ((1.0 - _3572) * dot(vec3(_956, _959, _962), vec3(_3495, _3496, _3497))) + _3572;
                                float _4662 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3580 = 1.0 - _3547;
                                float _3590 = (0.5 / (((_3579 * ((_3562 * _3580) + _3547)) + 9.9999999392252902907785028219223e-09) + (((_3579 * _3580) + _3547) * _3562))) * _3579;
                                float _4673 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3600 = (_3525 * _3502) * (((_3548 * 3.1415927410125732421875) * (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) / ((_3570 * _3570) * ((_3515 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3600 * _3383.x;
                                frontier_phi_73_pred_1 = _3600 * _3383.y;
                                frontier_phi_73_pred_2 = _3526 * _3371.z;
                                frontier_phi_73_pred_3 = _3526 * _3371.y;
                                frontier_phi_73_pred_4 = _3526 * _3371.x;
                                frontier_phi_73_pred_5 = _3600 * _3383.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3604 = frontier_phi_73_pred;
                            _3605 = frontier_phi_73_pred_1;
                            _3609 = frontier_phi_73_pred_2;
                            _3608 = frontier_phi_73_pred_3;
                            _3607 = frontier_phi_73_pred_4;
                            _3606 = frontier_phi_73_pred_5;
                            _3313 = _3607 + _3326;
                            _3314 = _3608 + _3327;
                            _3315 = _3609 + _3328;
                            _3310 = _3604 + _3323;
                            _3311 = _3605 + _3324;
                            _3312 = _3606 + _3325;
                            if (_3330 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3330;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3313;
                        frontier_phi_67_pred_1 = _3314;
                        frontier_phi_67_pred_2 = _3315;
                        frontier_phi_67_pred_3 = _3312;
                        frontier_phi_67_pred_4 = _3311;
                        frontier_phi_67_pred_5 = _3310;
                    }
                    _2978 = frontier_phi_67_pred;
                    _2980 = frontier_phi_67_pred_1;
                    _2982 = frontier_phi_67_pred_2;
                    _2976 = frontier_phi_67_pred_3;
                    _2974 = frontier_phi_67_pred_4;
                    _2972 = frontier_phi_67_pred_5;
                    uint _3117 = _3116 + 1u;
                    if (_3117 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3110 = _2972;
                        _3111 = _2974;
                        _3112 = _2976;
                        _3113 = _2978;
                        _3114 = _2980;
                        _3115 = _2982;
                        _3116 = _3117;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2980;
                frontier_phi_55_56_ladder_1 = _2982;
                frontier_phi_55_56_ladder_2 = _2978;
                frontier_phi_55_56_ladder_3 = _2976;
                frontier_phi_55_56_ladder_4 = _2974;
                frontier_phi_55_56_ladder_5 = _2972;
            }
            else
            {
                frontier_phi_55_56_ladder = _2867;
                frontier_phi_55_56_ladder_1 = _2869;
                frontier_phi_55_56_ladder_2 = _2865;
                frontier_phi_55_56_ladder_3 = _2863;
                frontier_phi_55_56_ladder_4 = _2861;
                frontier_phi_55_56_ladder_5 = _2859;
            }
            _2971 = frontier_phi_55_56_ladder_5;
            _2973 = frontier_phi_55_56_ladder_4;
            _2975 = frontier_phi_55_56_ladder_3;
            _2977 = frontier_phi_55_56_ladder_2;
            _2979 = frontier_phi_55_56_ladder;
            _2981 = frontier_phi_55_56_ladder_1;
        }
        float _2986 = isnan(1.0) ? _1015 : (isnan(_1015) ? 1.0 : min(_1015, 1.0));
        _2771 = (_2986 * _2977) + _2204;
        _2773 = (_2986 * _2979) + _2206;
        _2775 = (_2986 * _2981) + _2208;
        _2777 = ((_2971 * _999) * _2986) + _2552;
        _2779 = ((_2973 * _1001) * _2986) + _2554;
        _2781 = ((_2975 * _1002) * _2986) + _2556;
    }
    else
    {
        _2771 = _2204;
        _2773 = _2206;
        _2775 = _2208;
        _2777 = _2552;
        _2779 = _2554;
        _2781 = _2556;
    }
    float _4689 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _4700 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _4711 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    uint _2801 = _255 + 6u;
    float _2809 = _937 / cbSceneParam._m0[86u].x;
    float _2810 = _938 / cbSceneParam._m0[86u].y;
    vec4 _2824 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, (log2((isnan(cbSceneParam._m0[77u].w) ? _872 : (isnan(_872) ? cbSceneParam._m0[77u].w : min(_872, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2826 = _2824.x;
    float _2827 = _2824.y;
    float _2828 = _2824.z;
    float _2829 = _2824.w;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_872 > cbSceneParam._m0[78u].w)
    {
        float _2884 = isnan(_872) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _872 : min(cbSceneParam._m0[80u].w, _872));
        float _2885 = _2884 / _872;
        float _2896 = _2885 * _922;
        float _2897 = _923 * _2885;
        float _2898 = (-0.0) - _2897;
        float _2899 = _2885 * _924;
        float _2901 = (cbSceneParam._m0[77u].w * _2898) / _2884;
        float _2902 = _2901 + cbSceneParam._m0[79u].w;
        float _2903 = cbSceneParam._m0[79u].w - _2897;
        float _2909 = sqrt(((_2896 * _2896) + (_2897 * _2897)) + (_2899 * _2899));
        float _2912 = (1.0 - (cbSceneParam._m0[77u].w / _2884)) * _2909;
        float _2917 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2919 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3072;
        if (abs((_2898 - _2901) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3072 = ((((_2902 > 0.0) ? exp2(_2917 * _2902) : (2.0 - exp2(_2919 * _2902))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2912;
        }
        else
        {
            float _3032 = 1.0 / cbSceneParam._m0[80u].x;
            float _3033 = isnan(_2903) ? _2902 : (isnan(_2902) ? _2903 : max(_2902, _2903));
            float _3034 = isnan(_2903) ? _2902 : (isnan(_2902) ? _2903 : min(_2902, _2903));
            float _3043 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : min(_3033, 0.0));
            float _3044 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : min(_3034, 0.0));
            _3072 = ((abs(_2909 / _2898) * cbSceneParam._m0[80u].y) * ((((_3043 - _3044) * 2.0) - ((exp2(_2917 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0)))) - exp2(_2917 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))))) * _3032)) - ((exp2(_2919 * _3043) - exp2(_2919 * _3044)) * _3032))) + (_2912 * cbSceneParam._m0[80u].z);
        }
        vec4 _3074 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, 1.0), 0.0);
        float _3083 = exp2((_3072 * (-1.44269502162933349609375)) * (1.0 - _3074.w));
        float _3084 = log2(_3083);
        float _3100 = log2(_2829);
        _2921 = (exp2(_3100 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].x)) * _3074.x) / cbSceneParam._m0[78u].x)) + _2826;
        _2923 = (exp2(_3100 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].y)) * _3074.y) / cbSceneParam._m0[78u].y)) + _2827;
        _2925 = (exp2(_3100 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].z)) * _3074.z) / cbSceneParam._m0[78u].z)) + _2828;
        _2927 = _3083 * _2829;
    }
    else
    {
        _2921 = _2826;
        _2923 = _2827;
        _2925 = _2828;
        _2927 = _2829;
    }
    float _2939 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2940 = _2939 == 3.0;
    float _2941 = log2(_2927);
    float _2948 = exp2(_2941 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2771 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1015))) + ((_2777 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1823)) * cbPerFrame._m0[3u].x));
    float _2949 = exp2(_2941 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2773 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1015))) + ((_2779 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1823)) * cbPerFrame._m0[3u].x));
    float _2950 = exp2(_2941 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2775 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1015))) + ((_2781 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1823)) * cbPerFrame._m0[3u].x));
    float _2959 = (_2939 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2959 * (_2940 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2921)));
    SV_Target.y = _2959 * (_2940 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2923)));
    SV_Target.z = _2959 * (_2940 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2925)));
    SV_Target.w = cbInstanceData._m0[_2801].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2801].w;
}


