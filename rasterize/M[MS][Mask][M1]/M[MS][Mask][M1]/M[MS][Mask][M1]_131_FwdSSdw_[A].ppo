#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1501;
float _3902;
float _3903;
float _3904;
float _3905;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _260 + 1u;
    uint _270 = _260 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _348.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[23u].w) + _401) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3914 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _426 = (_419 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _427 = (_419 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _428 = (_419 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _477 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _491 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _348.y) * 2.0) - ((((_467 - _477) * cbMtdParam._m0[23u].w) + _477) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3925 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _499 = (_492 * ((_445.x * cbMtdParam._m0[13u].x) - _426)) + _426;
    float _500 = (_492 * ((_445.y * cbMtdParam._m0[13u].y) - _427)) + _427;
    float _501 = (_492 * ((_445.z * cbMtdParam._m0[13u].z) - _428)) + _428;
    vec4 _520 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _539 = _537.x;
    float _549 = dot(vec4(_539, _537.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _561 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _348.z) * 2.0) - ((((_539 - _549) * cbMtdParam._m0[23u].w) + _549) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3936 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _569 = (_562 * ((_520.x * cbMtdParam._m0[14u].x) - _499)) + _499;
    float _570 = (_562 * ((_520.y * cbMtdParam._m0[14u].y) - _500)) + _500;
    float _571 = (_562 * ((_520.z * cbMtdParam._m0[14u].z) - _501)) + _501;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _628 = _626.x;
    float _629 = _626.y;
    float _630 = _626.z;
    float _637 = ((_609.x - _628) * _419) + _628;
    float _638 = ((_609.y - _629) * _419) + _629;
    float _639 = ((_609.z - _630) * _419) + _630;
    vec4 _651 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _662 = ((_651.x - _637) * _492) + _637;
    float _663 = ((_651.y - _638) * _492) + _638;
    float _664 = ((_651.z - _639) * _492) + _639;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _689 = ((_676.z - _664) * _562) + _664;
    float _692 = ((((_676.x - _662) * _562) + _662) * 2.0) + (-1.0);
    float _694 = ((((_676.y - _663) * _562) + _663) * 2.0) + (-1.0);
    float _695 = dot(vec2(_692, _694), vec2(_692, _694));
    float _3947 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _700 = sqrt(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _741 = _739.x;
    float _742 = 1.0 - _741;
    float _757 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_741 - _742) * cbMtdParam._m0[24u].z) + _742) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3958 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _758 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _765 = (_758 * ((_589.x * cbMtdParam._m0[18u].x) - _569)) + _569;
    float _766 = (_758 * ((_589.y * cbMtdParam._m0[18u].y) - _570)) + _570;
    float _767 = (_758 * ((_589.z * cbMtdParam._m0[18u].z) - _571)) + _571;
    vec4 _793 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _795 = _793.x;
    float _813 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _795) * _419) + _795;
    float _830 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _813) * _492) + _813;
    float _848 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _280) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _281) + cbTextureTilingScale._m0[10u].w)).x - _830) * _562) + _830;
    float _852 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _848) * cbMtdParam._m0[19u].z) + _848;
    float _854 = _852 - (_852 * _758);
    float _858 = (cbMtdParam._m0[19u].w * (_714.z - _689)) + _689;
    vec4 _871 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _878 = (_871.x * 2.0) + (-1.0);
    float _879 = (_871.y * 2.0) + (-1.0);
    float _880 = dot(vec2(_878, _879), vec2(_878, _879));
    float _3969 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _888 = (_758 * (_871.z - _858)) + _858;
    float _891 = (((_714.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _692;
    float _892 = (((_714.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _694;
    float _904 = (((_878 - _891) + (cbMtdParam._m0[21u].x * _891)) * _758) + _891;
    float _905 = (((_879 - _892) + (cbMtdParam._m0[21u].x * _892)) * _758) + _892;
    float _906 = (_758 * (sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) - _700)) + _700;
    float _908 = cbMtdParam._m0[22u].x + _714.w;
    float _911 = fma(_906, _247 * NORMAL.x, fma(_905, _254 * TANGENT.x, (_240 * _232) * _904));
    float _914 = fma(_906, _247 * NORMAL.y, fma(_905, _254 * TANGENT.y, (_240 * _233) * _904));
    float _917 = fma(_906, _247 * NORMAL.z, fma(_905, _254 * TANGENT.z, (_240 * _234) * _904));
    float _921 = inversesqrt(dot(vec3(_911, _914, _917), vec3(_911, _914, _917)));
    float _922 = _921 * _911;
    float _923 = _921 * _914;
    float _924 = _921 * _917;
    float _3980 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _925 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4002 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4013 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4024 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4035 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _930 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _944 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _994 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _984);
    float _995 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _984);
    float _996 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _984);
    float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
    float _1001 = _994 * _1000;
    float _1002 = _995 * _1000;
    float _1003 = _996 * _1000;
    vec4 _1008 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1010 = _1008.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1182 = sqrt(((_994 * _994) + (_995 * _995)) + (_996 * _996));
        float _1188 = (cbMatDynParam._m0[5u].x * _1182) + cbMatDynParam._m0[5u].y;
        float _4046 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1193 = (cbMatDynParam._m0[5u].z * _1182) + cbMatDynParam._m0[5u].w;
        float _4057 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) - _1189)) + _1189) < ((_1010 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1021 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1022 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1040 = fma(_924, cbSceneParam._m0[5u].z, fma(_923, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _922));
    float _1043 = fma(_924, cbSceneParam._m0[6u].z, fma(_923, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _922));
    float _1046 = fma(_924, cbSceneParam._m0[7u].z, fma(_923, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _922));
    uint _1059 = _260 + 9u;
    uint _1060 = _1059 + uint(cbMatDynParam._m0[0u].w);
    float _1066 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_1060].x;
    float _1067 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_1060].y;
    float _1068 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_1060].z;
    float _4068 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _4079 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _1072 = 1.0 - _930;
    float _1073 = _1069 * _1072;
    float _1074 = _1070 * _1072;
    float _1075 = _1071 * _1072;
    float _1080 = (_1069 + (-0.039999999105930328369140625)) * _930;
    float _1081 = (_1070 + (-0.039999999105930328369140625)) * _930;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _930;
    float _1083 = _1080 + 0.039999999105930328369140625;
    float _1085 = _1081 + 0.039999999105930328369140625;
    float _1086 = _1082 + 0.039999999105930328369140625;
    vec4 _1095 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1021, cbSceneParam._m0[86u].y * _1022));
    float _1099 = ((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * TEXCOORD_5.w) * _1095.x;
    float _1100 = dot(vec3(_922, _923, _924), vec3(_1001, _1002, _1003));
    float _1103 = _1100 * 2.0;
    float _1107 = (_1103 * _922) - _1001;
    float _1108 = (_1103 * _923) - _1002;
    float _1109 = (_1103 * _924) - _1003;
    float _1113 = abs(dot(vec3(_1001, _1002, _1003), vec3(_922, _923, _924)));
    float _4101 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1115 = sqrt(_925);
    float _1128 = exp2((_1115 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1115 * 3.0));
    float _1134 = (1.0 - _1128) * ((_1115 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1135 = _1128 * _1115;
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1500;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1225 = fma(_1171, cbModelParam._m0[26u].z, fma(_1167, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163));
        float _1229 = fma(_1171, cbModelParam._m0[27u].z, fma(_1167, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163));
        float _1233 = fma(_1171, cbModelParam._m0[28u].z, fma(_1167, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163));
        float _1258 = _1163 + _922;
        float _1259 = _1167 + _923;
        float _1260 = _1171 + _924;
        float _1270 = fma(_1260, cbModelParam._m0[26u].z, fma(_1259, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1258)) - _1225;
        float _1271 = fma(_1260, cbModelParam._m0[27u].z, fma(_1259, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1258)) - _1229;
        float _1272 = fma(_1260, cbModelParam._m0[28u].z, fma(_1259, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1258)) - _1233;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1225 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1229 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[34u].z) + ((((((_1233 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1328 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1294.x + (-0.5));
        float _1330 = _1328 * (_1294.y + (-0.5));
        float _1331 = _1328 * (_1294.z + (-0.5));
        float _1338 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1301.x + (-0.5));
        float _1340 = _1338 * (_1301.y + (-0.5));
        float _1341 = _1338 * (_1301.z + (-0.5));
        float _1348 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1308.x + (-0.5));
        float _1350 = _1348 * (_1308.y + (-0.5));
        float _1351 = _1348 * (_1308.z + (-0.5));
        float _1358 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1315.x + (-0.5));
        float _1360 = _1358 * (_1315.y + (-0.5));
        float _1361 = _1358 * (_1315.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1382 = (dot(vec3(_922, _923, _924), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1392 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4149 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1394 + 1.0))) + _1399) * _1362;
        float _1409 = _1330 * 0.5;
        float _1410 = _1340 * 0.5;
        float _1411 = _1350 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_922, _923, _924), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4182 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1436 + 1.0))) + _1441) * _1363;
        float _1451 = _1331 * 0.5;
        float _1452 = _1341 * 0.5;
        float _1453 = _1351 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_922, _923, _924), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4215 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1478 + 1.0))) + _1483) * _1364;
        _1500 = _1331;
        _1502 = _1330;
        _1503 = _1329;
        _1504 = _1341;
        _1505 = _1340;
        _1506 = _1339;
        _1507 = _1351;
        _1508 = _1350;
        _1509 = _1349;
        _1510 = _1364;
        _1511 = _1363;
        _1512 = _1362;
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1514 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
    }
    else
    {
        _1500 = _1501;
        _1502 = _1501;
        _1503 = _1501;
        _1504 = _1501;
        _1505 = _1501;
        _1506 = _1501;
        _1507 = _1501;
        _1508 = _1501;
        _1509 = _1501;
        _1510 = _1501;
        _1511 = _1501;
        _1512 = _1501;
        _1513 = 0.0;
        _1514 = 0.0;
        _1515 = 0.0;
    }
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1541 = fma(_1171, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163));
        float _1545 = fma(_1171, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163));
        float _1549 = fma(_1171, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163));
        float _1572 = _1163 + _922;
        float _1573 = _1167 + _923;
        float _1574 = _1171 + _924;
        float _1584 = fma(_1574, cbModelParam._m0[30u].z, fma(_1573, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1572)) - _1541;
        float _1585 = fma(_1574, cbModelParam._m0[31u].z, fma(_1573, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1572)) - _1545;
        float _1586 = fma(_1574, cbModelParam._m0[32u].z, fma(_1573, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1572)) - _1549;
        float _1590 = inversesqrt(dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586)));
        float _1603 = ((_1590 * _1584) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1541 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1604 = ((_1590 * _1585) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1545 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1605 = ((_1590 * _1586) / cbModelParam._m0[35u].z) + ((((((_1549 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1603, _1604, _1605), 0.0);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1603, _1604, _1605), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1603, _1604, _1605), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1603, _1604, _1605), 0.0);
        float _1640 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1607.x + (-0.5));
        float _1642 = _1640 * (_1607.y + (-0.5));
        float _1643 = _1640 * (_1607.z + (-0.5));
        float _1650 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1651 = _1650 * (_1614.x + (-0.5));
        float _1652 = _1650 * (_1614.y + (-0.5));
        float _1653 = _1650 * (_1614.z + (-0.5));
        float _1660 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1661 = _1660 * (_1621.x + (-0.5));
        float _1662 = _1660 * (_1621.y + (-0.5));
        float _1663 = _1660 * (_1621.z + (-0.5));
        float _1670 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1628.x + (-0.5));
        float _1672 = _1670 * (_1628.y + (-0.5));
        float _1673 = _1670 * (_1628.z + (-0.5));
        float _1674 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = _1641 * 0.5;
        float _1678 = _1651 * 0.5;
        float _1679 = _1661 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_922, _923, _924), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1674 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4278 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1704 + 1.0))) + _1709) * _1674;
        float _1719 = _1642 * 0.5;
        float _1720 = _1652 * 0.5;
        float _1721 = _1662 * 0.5;
        float _1722 = dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721));
        float _1727 = (_1722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1722);
        float _1735 = (dot(vec3(_922, _923, _924), vec3(_1727 * _1719, _1727 * _1720, _1727 * _1721)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1744 = sqrt(((_1720 * _1720) + (_1719 * _1719)) + (_1721 * _1721)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1746 = _1745 * 2.0;
        float _1750 = (1.0 - _1745) / (_1745 + 1.0);
        float _4311 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1760 = ((((1.0 - _1751) * (_1746 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1746 + 1.0))) + _1751) * _1675;
        float _1761 = _1643 * 0.5;
        float _1762 = _1653 * 0.5;
        float _1763 = _1663 * 0.5;
        float _1764 = dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763));
        float _1769 = (_1764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1764);
        float _1777 = (dot(vec3(_922, _923, _924), vec3(_1769 * _1761, _1769 * _1762, _1769 * _1763)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1786 = sqrt(((_1762 * _1762) + (_1761 * _1761)) + (_1763 * _1763)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1788 = _1787 * 2.0;
        float _1792 = (1.0 - _1787) / (_1787 + 1.0);
        float _4344 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1802 = ((((1.0 - _1793) * (_1788 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1788 + 1.0))) + _1793) * _1676;
        _1810 = _1643;
        _1811 = _1642;
        _1812 = _1641;
        _1813 = _1653;
        _1814 = _1652;
        _1815 = _1651;
        _1816 = _1663;
        _1817 = _1662;
        _1818 = _1661;
        _1819 = _1676;
        _1820 = _1675;
        _1821 = _1674;
        _1822 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)));
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)));
    }
    else
    {
        _1810 = _1501;
        _1811 = _1501;
        _1812 = _1501;
        _1813 = _1501;
        _1814 = _1501;
        _1815 = _1501;
        _1816 = _1501;
        _1817 = _1501;
        _1818 = _1501;
        _1819 = _1501;
        _1820 = _1501;
        _1821 = _1501;
        _1822 = 0.0;
        _1823 = 0.0;
        _1824 = 0.0;
    }
    float _1834 = (cbModelParam._m0[1u].x * (_1822 - _1513)) + _1513;
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1514)) + _1514;
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1515)) + _1515;
    float _1857 = fma(_1836, cbSceneParam._m0[89u].z, fma(_1835, cbSceneParam._m0[89u].y, _1834 * cbSceneParam._m0[89u].x));
    float _1860 = fma(_1836, cbSceneParam._m0[90u].z, fma(_1835, cbSceneParam._m0[90u].y, _1834 * cbSceneParam._m0[90u].x));
    float _1863 = fma(_1836, cbSceneParam._m0[91u].z, fma(_1835, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1834));
    float _1878 = _1107 * 0.5;
    float _1879 = _1108 * 0.5;
    float _1880 = _1109 * 0.5;
    float _1881 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1884 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1887 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1810, _1813, _1816, _1819));
    float _1921;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1894 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1500, _1504, _1507, _1510));
        float _1898 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1502, _1505, _1508, _1511));
        float _1902 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1503, _1506, _1509, _1512));
        float _1909 = dot(vec4(cbModelParam._m0[39u]), vec4(_1878, _1879, _1880, 1.0));
        _1921 = dot(vec3(isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1909) ? 0.0 : (isnan(0.0) ? _1909 : max(0.0, _1909))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1921 = 1.0;
    }
    float _1932;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1923 = dot(vec4(cbModelParam._m0[40u]), vec4(_1878, _1879, _1880, 1.0));
        _1932 = dot(vec3(isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1923) ? 0.0 : (isnan(0.0) ? _1923 : max(0.0, _1923))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1932 = 1.0;
    }
    float _1936 = (_1932 * cbModelParam._m0[1u].x) + (_1921 * (1.0 - cbModelParam._m0[1u].x));
    float _1946 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _925);
    float _1947 = isnan(_1946) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1946 : min(cbModelParam._m0[25u].z, _1946));
    float _2027;
    float _2029;
    float _2031;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1994 = fma(_1171, cbModelParam._m0[13u].z, fma(_1167, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1163)) + cbModelParam._m0[13u].w;
        float _1998 = fma(_1171, cbModelParam._m0[14u].z, fma(_1167, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1163)) + cbModelParam._m0[14u].w;
        float _2002 = fma(_1171, cbModelParam._m0[15u].z, fma(_1167, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1163)) + cbModelParam._m0[15u].w;
        float _2005 = fma(_1109, cbModelParam._m0[13u].z, fma(_1108, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1107));
        float _2008 = fma(_1109, cbModelParam._m0[14u].z, fma(_1108, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1107));
        float _2011 = fma(_1109, cbModelParam._m0[15u].z, fma(_1108, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1107));
        float _2039;
        if (_2005 > 0.0)
        {
            _2039 = abs((1.0 - _1994) / _2005);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1994 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2039 = frontier_phi_17_15_ladder;
        }
        float _2262;
        if (_2008 > 0.0)
        {
            _2262 = abs((1.0 - _1998) / _2008);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1998 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2262 = frontier_phi_26_22_ladder;
        }
        float _2519;
        if (_2011 > 0.0)
        {
            _2519 = abs((1.0 - _2002) / _2011);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2002 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2519 = frontier_phi_38_33_ladder;
        }
        float _2521 = isnan(_2262) ? _2039 : (isnan(_2039) ? _2262 : min(_2039, _2262));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _2005) + _1994;
        float _2527 = (_2522 * _2008) + _1998;
        float _2528 = (_2522 * _2011) + _2002;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2531 = (-1.0) - _2529;
        float _2533 = _2529 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2528 > _2533) || ((_2528 < _2531) || ((_2527 > _2533) || ((_2527 < _2531) || ((_2526 < _2531) || (_2526 > _2533))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2528, cbModelParam._m0[9u].z, fma(_2527, cbModelParam._m0[9u].y, _2526 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2528, cbModelParam._m0[10u].z, fma(_2527, cbModelParam._m0[10u].y, _2526 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2528, cbModelParam._m0[11u].z, fma(_2527, cbModelParam._m0[11u].y, _2526 * cbModelParam._m0[11u].x))), _1947);
            frontier_phi_16_38_ladder = _2656.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2656.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2656.x * cbModelParam._m0[1u].y;
        }
        _2027 = frontier_phi_16_38_ladder_2;
        _2029 = frontier_phi_16_38_ladder_1;
        _2031 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2015 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1107, _1108, _1109), _1947);
        _2027 = _2015.x * cbModelParam._m0[1u].y;
        _2029 = _2015.y * cbModelParam._m0[1u].y;
        _2031 = _2015.z * cbModelParam._m0[1u].y;
    }
    float _2035 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _925);
    float _2036 = isnan(_2035) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2035 : min(cbModelParam._m0[25u].w, _2035));
    float _2125;
    float _2127;
    float _2129;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2089 = fma(_1171, cbModelParam._m0[21u].z, fma(_1167, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1163)) + cbModelParam._m0[21u].w;
        float _2093 = fma(_1171, cbModelParam._m0[22u].z, fma(_1167, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1163)) + cbModelParam._m0[22u].w;
        float _2097 = fma(_1171, cbModelParam._m0[23u].z, fma(_1167, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1163)) + cbModelParam._m0[23u].w;
        float _2100 = fma(_1109, cbModelParam._m0[21u].z, fma(_1108, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1107));
        float _2103 = fma(_1109, cbModelParam._m0[22u].z, fma(_1108, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1107));
        float _2106 = fma(_1109, cbModelParam._m0[23u].z, fma(_1108, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1107));
        float _2267;
        if (_2100 > 0.0)
        {
            _2267 = abs((1.0 - _2089) / _2100);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2089 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2267 = frontier_phi_28_24_ladder;
        }
        float _2546;
        if (_2103 > 0.0)
        {
            _2546 = abs((1.0 - _2093) / _2103);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2093 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2546 = frontier_phi_40_35_ladder;
        }
        float _2759;
        if (_2106 > 0.0)
        {
            _2759 = abs((1.0 - _2097) / _2106);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2097 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2759 = frontier_phi_49_46_ladder;
        }
        float _2761 = isnan(_2546) ? _2267 : (isnan(_2267) ? _2546 : min(_2267, _2546));
        float _2762 = isnan(_2759) ? _2761 : (isnan(_2761) ? _2759 : min(_2761, _2759));
        float _2766 = (_2762 * _2100) + _2089;
        float _2767 = (_2762 * _2103) + _2093;
        float _2768 = (_2762 * _2106) + _2097;
        float _2769 = _2762 * 9.9999997473787516355514526367188e-05;
        float _2770 = (-1.0) - _2769;
        float _2772 = _2769 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2768 > _2772) || ((_2768 < _2770) || ((_2767 > _2772) || ((_2767 < _2770) || ((_2766 < _2770) || (_2766 > _2772))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2768, cbModelParam._m0[17u].z, fma(_2767, cbModelParam._m0[17u].y, _2766 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2768, cbModelParam._m0[18u].z, fma(_2767, cbModelParam._m0[18u].y, _2766 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2768, cbModelParam._m0[19u].z, fma(_2767, cbModelParam._m0[19u].y, _2766 * cbModelParam._m0[19u].x))), _2036);
            frontier_phi_25_49_ladder = _2967.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2967.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2967.x * cbModelParam._m0[1u].z;
        }
        _2125 = frontier_phi_25_49_ladder_2;
        _2127 = frontier_phi_25_49_ladder_1;
        _2129 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2109 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1107, _1108, _1109), _2036);
        _2125 = _2109.x * cbModelParam._m0[1u].z;
        _2127 = _2109.y * cbModelParam._m0[1u].z;
        _2129 = _2109.z * cbModelParam._m0[1u].z;
    }
    float _2142 = (((_1134 * _1083) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2125 - _2027)) + _2027);
    float _2144 = (((_1134 * _1085) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2127 - _2029)) + _2029);
    float _2146 = (((_1134 * _1086) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2129 - _2031)) + _2031);
    float _2149 = fma(_2146, cbSceneParam._m0[89u].z, fma(_2144, cbSceneParam._m0[89u].y, _2142 * cbSceneParam._m0[89u].x));
    float _2152 = fma(_2146, cbSceneParam._m0[90u].z, fma(_2144, cbSceneParam._m0[90u].y, _2142 * cbSceneParam._m0[90u].x));
    float _2155 = fma(_2146, cbSceneParam._m0[91u].z, fma(_2144, cbSceneParam._m0[91u].y, _2142 * cbSceneParam._m0[91u].x));
    vec4 _2163 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1021, _1022));
    float _2165 = _2163.w;
    float _2177 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2165);
    float _2178 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2165);
    float _2179 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2165);
    uvec4 _2183 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _2185 = _2183.x * 14u;
    uint _2186 = _2185 + 13u;
    float _2193 = _1099 + (-1.0);
    float _2198 = (cbLight._m0[_2186].x * _2193) + 1.0;
    float _2199 = (cbLight._m0[_2186].y * _2193) + 1.0;
    float _2200 = (cbLight._m0[_2186].z * _2193) + 1.0;
    float _2201 = (cbLight._m0[_2186].w * _2193) + 1.0;
    uint _2202 = _2185 + 5u;
    float _2208 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
    uint _2212 = _2185 + 4u;
    float _2221 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
    uint _2225 = _2185 | 1u;
    float _2236 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_922, _923, _924));
    float _2239 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_922, _923, _924));
    float _4480 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _4491 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2244 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * 0.3183098733425140380859375;
    float _2246 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * 0.3183098733425140380859375;
    float _2253 = ((cbLight._m0[_2202].x * _2208) * _2246) + (((cbLight._m0[_2212].x * _2177) * _2221) * _2244);
    float _2254 = ((_2208 * cbLight._m0[_2202].y) * _2246) + (((cbLight._m0[_2212].y * _2178) * _2221) * _2244);
    float _2255 = ((_2208 * cbLight._m0[_2202].z) * _2246) + (((cbLight._m0[_2212].z * _2179) * _2221) * _2244);
    uvec4 _2259 = floatBitsToUint(cbLight._m0[_2185 + 12u]);
    bool _2261 = _2259.x == 0u;
    float _2272;
    float _2274;
    float _2276;
    if (_2261)
    {
        _2272 = _2253;
        _2274 = _2254;
        _2276 = _2255;
    }
    else
    {
        uint _2280 = _2185 + 6u;
        float _2296 = (dot(vec3(cbLight._m0[_2185 + 2u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2297 = _2296 * _2296;
        float _4502 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2298 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2299 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2272 = (((cbLight._m0[_2280].x * 0.3183098733425140380859375) * _2298) * _2299) + _2253;
        _2274 = (((cbLight._m0[_2280].y * 0.3183098733425140380859375) * _2298) * _2299) + _2254;
        _2276 = (((cbLight._m0[_2280].z * 0.3183098733425140380859375) * _2298) * _2299) + _2255;
    }
    bool _2279 = _2259.y == 0u;
    float _2317;
    float _2319;
    float _2321;
    if (_2279)
    {
        _2317 = _2272;
        _2319 = _2274;
        _2321 = _2276;
    }
    else
    {
        uint _2490 = _2185 + 7u;
        float _2506 = (dot(vec3(cbLight._m0[_2185 + 3u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2507 = _2506 * _2506;
        float _4518 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2508 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2509 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2317 = (((cbLight._m0[_2490].x * 0.3183098733425140380859375) * _2508) * _2509) + _2272;
        _2319 = (((cbLight._m0[_2490].y * 0.3183098733425140380859375) * _2508) * _2509) + _2274;
        _2321 = (((cbLight._m0[_2490].z * 0.3183098733425140380859375) * _2508) * _2509) + _2276;
    }
    uint _2324 = _2185 + 8u;
    float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _925) * 0.949999988079071044921875);
    float _2338 = _2337 * _2337;
    float _2339 = cbLight._m0[_2185].x + _1001;
    float _2340 = cbLight._m0[_2185].y + _1002;
    float _2341 = cbLight._m0[_2185].z + _1003;
    float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
    float _2346 = _2345 * _2339;
    float _2347 = _2345 * _2340;
    float _2348 = _2345 * _2341;
    float _2349 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2185].xyz));
    float _4534 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _4545 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _2353 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _2354 = dot(vec3(_922, _923, _924), vec3(_2346, _2347, _2348));
    float _4556 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2358 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2346, _2347, _2348));
    float _4567 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2362 = _2338 * _2338;
    float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
    float _2374 = exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0);
    float _2375 = 0.959999978542327880859375 - _1080;
    float _2377 = 0.959999978542327880859375 - _1081;
    float _2378 = 0.959999978542327880859375 - _1082;
    float _2385 = 1.0 - _2338;
    float _2396 = (0.5 / (((_2353 * ((_2352 * _2385) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2353 * _2385) + _2338) * _2352))) * _2352;
    float _4578 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
    uint _2412 = _2185 + 9u;
    float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _925) * 0.949999988079071044921875);
    float _2424 = _2423 * _2423;
    float _2425 = cbLight._m0[_2225].x + _1001;
    float _2426 = cbLight._m0[_2225].y + _1002;
    float _2427 = cbLight._m0[_2225].z + _1003;
    float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
    float _2432 = _2431 * _2425;
    float _2433 = _2431 * _2426;
    float _2434 = _2431 * _2427;
    float _2435 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2225].xyz));
    float _4589 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2439 = dot(vec3(_922, _923, _924), vec3(_2432, _2433, _2434));
    float _4600 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2443 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2432, _2433, _2434));
    float _4611 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2447 = _2424 * _2424;
    float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
    float _2458 = exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0);
    float _2465 = 1.0 - _2424;
    float _2475 = (0.5 / (((_2353 * ((_2438 * _2465) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2353 * _2465) + _2424) * _2438))) * _2438;
    float _4622 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2477 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
    float _2487 = (((((_2458 * _2375) + _1083) * cbLight._m0[_2412].x) * _2477) * _2208) + ((((cbLight._m0[_2324].x * _2177) * ((_2374 * _2375) + _1083)) * _2398) * _2221);
    float _2488 = (((((_2458 * _2377) + _1085) * cbLight._m0[_2412].y) * _2477) * _2208) + ((((cbLight._m0[_2324].y * _2178) * ((_2374 * _2377) + _1085)) * _2398) * _2221);
    float _2489 = (((((_2458 * _2378) + _1086) * cbLight._m0[_2412].z) * _2477) * _2208) + ((((cbLight._m0[_2324].z * _2179) * ((_2374 * _2378) + _1086)) * _2398) * _2221);
    float _2551;
    float _2553;
    float _2555;
    if (_2261)
    {
        _2551 = _2487;
        _2553 = _2488;
        _2555 = _2489;
    }
    else
    {
        uint _2557 = _2185 + 2u;
        uint _2561 = _2185 + 10u;
        float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2557].w)) * _925) * 0.949999988079071044921875);
        float _2576 = _2575 * _2575;
        float _2577 = cbLight._m0[_2557].x + _1001;
        float _2578 = cbLight._m0[_2557].y + _1002;
        float _2579 = cbLight._m0[_2557].z + _1003;
        float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
        float _2584 = _2583 * _2577;
        float _2585 = _2583 * _2578;
        float _2586 = _2583 * _2579;
        float _2587 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2557].xyz));
        float _4633 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2591 = dot(vec3(_922, _923, _924), vec3(_2584, _2585, _2586));
        float _4644 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2595 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_2584, _2585, _2586));
        float _4655 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2599 = _2576 * _2576;
        float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
        float _2610 = exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0);
        float _2617 = 1.0 - _2576;
        float _2627 = (0.5 / (((_2353 * ((_2590 * _2617) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2353 * _2617) + _2576) * _2590))) * _2590;
        float _4666 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2629 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
        float _2630 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2551 = (((((_2610 * _2375) + _1083) * cbLight._m0[_2561].x) * _2629) * _2630) + _2487;
        _2553 = (((((_2610 * _2377) + _1085) * cbLight._m0[_2561].y) * _2629) * _2630) + _2488;
        _2555 = (((((_2610 * _2378) + _1086) * cbLight._m0[_2561].z) * _2629) * _2630) + _2489;
    }
    float _2665;
    float _2667;
    float _2669;
    if (_2279)
    {
        _2665 = _2551;
        _2667 = _2553;
        _2669 = _2555;
    }
    else
    {
        uint _2676 = _2185 + 3u;
        uint _2680 = _2185 + 11u;
        float _2694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2676].w)) * _925) * 0.949999988079071044921875);
        float _2695 = _2694 * _2694;
        float _2696 = cbLight._m0[_2676].x + _1001;
        float _2697 = cbLight._m0[_2676].y + _1002;
        float _2698 = cbLight._m0[_2676].z + _1003;
        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
        float _2703 = _2702 * _2696;
        float _2704 = _2702 * _2697;
        float _2705 = _2702 * _2698;
        float _2706 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2676].xyz));
        float _4682 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2710 = dot(vec3(_922, _923, _924), vec3(_2703, _2704, _2705));
        float _4693 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2714 = dot(vec3(cbLight._m0[_2676].xyz), vec3(_2703, _2704, _2705));
        float _4704 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2718 = _2695 * _2695;
        float _2722 = ((_2713 * _2713) * (_2718 + (-1.0))) + 1.0;
        float _2729 = exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0);
        float _2736 = 1.0 - _2695;
        float _2746 = (0.5 / (((_2353 * ((_2709 * _2736) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2353 * _2736) + _2695) * _2709))) * _2709;
        float _4715 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2748 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2718 / ((_2722 * _2722) * 3.141590118408203125));
        float _2749 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2665 = (((((_2729 * _2375) + _1083) * cbLight._m0[_2680].x) * _2748) * _2749) + _2551;
        _2667 = (((((_2729 * _2377) + _1085) * cbLight._m0[_2680].y) * _2748) * _2749) + _2553;
        _2669 = (((((_2729 * _2378) + _1086) * cbLight._m0[_2680].z) * _2748) * _2749) + _2555;
    }
    float _2884;
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    if (_2183.y == 0u)
    {
        float _2824 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2825 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2824;
        float _2826 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2824;
        float _2827 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2824;
        uvec4 _2839 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2840 = _2839.x;
        uint _2851 = uint((float(_2839.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1022) / _2840))) + floor(float(uint(cbSceneParam._m0[85u].x * _1021) / _2840)));
        float _2861 = (log2(_2827 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2862 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        uint _2865 = uint(isnan(14.0) ? _2862 : (isnan(_2862) ? 14.0 : min(_2862, 14.0)));
        uvec4 _2870 = texelFetch(g_lightClusterGridBuffer, int(((_2865 << 2u) + (_2851 << 6u)) >> 2u));
        uint _2871 = _2870.x;
        uint _2872 = _2839.z;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        if (((((1u << ((_2872 >> 4u) & 15u)) + 4294967295u) & _2871) == 0u) || ((_2872 & 240u) == 0u))
        {
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
        }
        else
        {
            float _2973;
            float _2975;
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            uint _3131 = 0u;
            uint _3140;
            bool _3141;
            for (;;)
            {
                _3140 = texelFetch(g_lightClassification, int((((_2865 << 5u) + (_2851 << 9u)) + (_3131 << 2u)) >> 2u)).x;
                _3141 = _3140 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3141)
                {
                    frontier_phi_66_pred = _3125;
                    frontier_phi_66_pred_1 = _3130;
                    frontier_phi_66_pred_2 = _3129;
                    frontier_phi_66_pred_3 = _3128;
                    frontier_phi_66_pred_4 = _3127;
                    frontier_phi_66_pred_5 = _3126;
                }
                else
                {
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    uint _3276;
                    _3270 = _3125;
                    _3271 = _3126;
                    _3272 = _3127;
                    _3273 = _3128;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3140;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    for (;;)
                    {
                        uint _3280 = uint(findLSB(_3276)) + (_3131 << 5u);
                        uint _3277 = (_3276 + 4294967295u) & _3276;
                        uint _3282 = _3280 * 48u;
                        vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 3u)).x));
                        uint _3302 = (_3280 * 48u) + 4u;
                        vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3302)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3302 + 3u)).x));
                        uint _3321 = (_3280 * 48u) + 8u;
                        vec3 _3332 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3321)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 2u)).x));
                        float _3336 = _3296.x - _2825;
                        float _3337 = _3296.y - _2826;
                        float _3338 = _3296.z - _2827;
                        float _3339 = dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338));
                        float _3342 = inversesqrt(_3339);
                        float _3343 = _3342 * _3336;
                        float _3344 = _3342 * _3337;
                        float _3345 = _3342 * _3338;
                        float _3346 = dot(vec3(_1040, _1043, _1046), vec3(_3343, _3344, _3345));
                        float _3351 = 1.0 - (_3339 * _3296.w);
                        float _4741 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3352 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3353 = sqrt(_3339) * _3315.w;
                        float _3356 = 1.39999997615814208984375 / (_3353 + 1.39999997615814208984375);
                        float _3357 = _3356 * _3356;
                        float _3360 = ((1.0 - _3357) * _3346) + _3357;
                        float _3363 = _3353 * _3353;
                        float _3367 = ((isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0))) * _3352) / ((_3363 * 0.699999988079071044921875) + 1.0);
                        float _3371 = (-0.0) - _2825;
                        float _3372 = (-0.0) - _2826;
                        float _3373 = (-0.0) - _2827;
                        float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                        float _3378 = _3377 * _3371;
                        float _3379 = _3377 * _3372;
                        float _3380 = _3377 * _3373;
                        float _3388 = exp2(log2(1.0 / ((_3363 * 3.5) + 5.0)) * 0.25);
                        float _3389 = 1.0 - _1115;
                        float _3396 = sqrt(1.0 - ((1.0 - (_3389 * _3389)) * (1.0 - (_3388 * _3388))));
                        float _3397 = _3396 * _3396;
                        float _3398 = _3397 * _3397;
                        float _3399 = _3378 + _3343;
                        float _3400 = _3379 + _3344;
                        float _3401 = _3380 + _3345;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3409 = dot(vec3(_1040, _1043, _1046), vec3(_3378, _3379, _3380));
                        float _4757 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3412 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3413 = dot(vec3(_1040, _1043, _1046), vec3(_3405 * _3399, _3405 * _3400, _3405 * _3401));
                        float _4768 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3416 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3420 = ((_3416 * _3416) * (_3398 + (-1.0))) + 1.0;
                        float _3421 = _3356 * _3397;
                        float _3422 = _3421 * _3421;
                        float _3425 = ((1.0 - _3422) * _3346) + _3422;
                        float _4779 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3426 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3427 = 1.0 - _3397;
                        float _3437 = (0.5 / (((_3426 * ((_3412 * _3427) + _3397)) + 9.9999999392252902907785028219223e-09) + (((_3426 * _3427) + _3397) * _3412))) * _3426;
                        float _4790 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3448 = (((_3398 * 3.1415927410125732421875) * (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0)))) / ((_3420 * _3420) * ((_3363 * 2.1991131305694580078125) + 3.141590118408203125))) * _3352;
                        _3200 = (_3367 * _3315.x) + _3273;
                        _3201 = (_3367 * _3315.y) + _3274;
                        _3202 = (_3367 * _3315.z) + _3275;
                        _3197 = (_3448 * _3332.x) + _3270;
                        _3198 = (_3448 * _3332.y) + _3271;
                        _3199 = (_3448 * _3332.z) + _3272;
                        if (_3277 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3270 = _3197;
                            _3271 = _3198;
                            _3272 = _3199;
                            _3273 = _3200;
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3277;
                        }
                    }
                    frontier_phi_66_pred = _3197;
                    frontier_phi_66_pred_1 = _3202;
                    frontier_phi_66_pred_2 = _3201;
                    frontier_phi_66_pred_3 = _3200;
                    frontier_phi_66_pred_4 = _3199;
                    frontier_phi_66_pred_5 = _3198;
                }
                _2973 = frontier_phi_66_pred;
                _2983 = frontier_phi_66_pred_1;
                _2981 = frontier_phi_66_pred_2;
                _2979 = frontier_phi_66_pred_3;
                _2977 = frontier_phi_66_pred_4;
                _2975 = frontier_phi_66_pred_5;
                uint _3132 = _3131 + 1u;
                if (_3132 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3125 = _2973;
                    _3126 = _2975;
                    _3127 = _2977;
                    _3128 = _2979;
                    _3129 = _2981;
                    _3130 = _2983;
                    _3131 = _3132;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
        }
        uvec4 _2986 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2987 = _2986.z;
        uint _2989 = (_2987 >> 8u) & 15u;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        if (((4294967295u << _2989) & _2871) == 0u)
        {
            _3093 = _2972;
            _3095 = _2974;
            _3097 = _2976;
            _3099 = _2978;
            _3101 = _2980;
            _3103 = _2982;
        }
        else
        {
            float _3118 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
            float _3119 = _3118 * _2825;
            float _3120 = _3118 * _2826;
            float _3121 = _3118 * _2827;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2989 < ((_2987 >> 12u) & 15u))
            {
                float _3094;
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3253 = _2972;
                float _3254 = _2974;
                float _3255 = _2976;
                float _3256 = _2978;
                float _3257 = _2980;
                float _3258 = _2982;
                uint _3259 = _2989;
                uint _3268;
                bool _3269;
                for (;;)
                {
                    _3268 = texelFetch(g_lightClassification, int((((_2865 << 5u) + (_2851 << 9u)) + (_3259 << 2u)) >> 2u)).x;
                    _3269 = _3268 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3269)
                    {
                        frontier_phi_77_pred = _3258;
                        frontier_phi_77_pred_1 = _3257;
                        frontier_phi_77_pred_2 = _3256;
                        frontier_phi_77_pred_3 = _3255;
                        frontier_phi_77_pred_4 = _3254;
                        frontier_phi_77_pred_5 = _3253;
                    }
                    else
                    {
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3475 = _3253;
                        float _3476 = _3254;
                        float _3477 = _3255;
                        float _3478 = _3256;
                        float _3479 = _3257;
                        float _3480 = _3258;
                        uint _3481 = _3268;
                        uint _3482;
                        vec4 _3507;
                        float _3508;
                        vec4 _3523;
                        vec3 _3535;
                        vec4 _3550;
                        vec4 _3565;
                        float _3611;
                        bool _3612;
                        for (;;)
                        {
                            uint _3492 = ((_3259 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3481));
                            _3482 = (_3481 + 4294967295u) & _3481;
                            uint _3494 = _3492 * 40u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3508 = _3507.w;
                            uint _3510 = (_3492 * 40u) + 4u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3492 * 40u) + 8u;
                            _3535 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x));
                            uint _3537 = (_3492 * 40u) + 16u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3492 * 40u) + 20u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3567 = (_3492 * 40u) + 24u;
                            vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3586 = (_3492 * 40u) + 28u;
                            vec4 _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            _3611 = fma(_2827, _3599.z, fma(_2826, _3599.y, _3599.x * _2825)) + _3599.w;
                            _3612 = !((fma(_2827, _3580.z, fma(_2826, _3580.y, _3580.x * _2825)) + _3580.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3612)
                            {
                                float _3639 = _3507.x - _2825;
                                float _3640 = _3507.y - _2826;
                                float _3641 = _3507.z - _2827;
                                float _3642 = dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641));
                                float _3645 = inversesqrt(_3642);
                                float _3646 = _3645 * _3639;
                                float _3647 = _3645 * _3640;
                                float _3648 = _3645 * _3641;
                                float _3652 = 1.0 - (_3642 / (_3508 * _3508));
                                float _4801 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3657 = sqrt(_3642) * _3523.w;
                                float _3659 = 1.39999997615814208984375 / (_3657 + 1.39999997615814208984375);
                                float _3660 = _3659 * _3659;
                                float _3663 = ((1.0 - _3660) * dot(vec3(_3646, _3647, _3648), vec3(_1040, _1043, _1046))) + _3660;
                                float _3666 = _3657 * _3657;
                                float _3670 = (fma(_2827, _3550.z, fma(_2826, _3550.y, _3550.x * _2825)) + _3550.w) / _3611;
                                float _3671 = (fma(_2827, _3565.z, fma(_2826, _3565.y, _3565.x * _2825)) + _3565.w) / _3611;
                                float _3675 = 1.0 - dot(vec2(_3670, _3671), vec2(_3670, _3671));
                                float _4817 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3676 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3677 = _3676 * (((isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0))) * _3653) / ((_3666 * 0.699999988079071044921875) + 1.0));
                                float _3689 = exp2(log2(1.0 / ((_3666 * 3.5) + 5.0)) * 0.25);
                                float _3690 = 1.0 - _1115;
                                float _3697 = sqrt(1.0 - ((1.0 - (_3690 * _3690)) * (1.0 - (_3689 * _3689))));
                                float _3698 = _3697 * _3697;
                                float _3699 = _3698 * _3698;
                                float _3700 = _3646 - _3119;
                                float _3701 = _3647 - _3120;
                                float _3702 = _3648 - _3121;
                                float _3706 = inversesqrt(dot(vec3(_3700, _3701, _3702), vec3(_3700, _3701, _3702)));
                                float _3710 = dot(vec3(_1040, _1043, _1046), vec3((-0.0) - _3119, (-0.0) - _3120, (-0.0) - _3121));
                                float _4828 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3713 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3714 = dot(vec3(_1040, _1043, _1046), vec3(_3706 * _3700, _3706 * _3701, _3706 * _3702));
                                float _4839 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3717 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3721 = ((_3717 * _3717) * (_3699 + (-1.0))) + 1.0;
                                float _3722 = _3659 * _3698;
                                float _3723 = _3722 * _3722;
                                float _3729 = ((1.0 - _3723) * dot(vec3(_1040, _1043, _1046), vec3(_3646, _3647, _3648))) + _3723;
                                float _4850 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3730 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3731 = 1.0 - _3698;
                                float _3741 = (0.5 / (((_3730 * ((_3713 * _3731) + _3698)) + 9.9999999392252902907785028219223e-09) + (((_3730 * _3731) + _3698) * _3713))) * _3730;
                                float _4861 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3751 = (_3676 * _3653) * (((_3699 * 3.1415927410125732421875) * (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) / ((_3721 * _3721) * ((_3666 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3677 * _3523.y;
                                frontier_phi_83_pred_1 = _3677 * _3523.x;
                                frontier_phi_83_pred_2 = _3751 * _3535.z;
                                frontier_phi_83_pred_3 = _3751 * _3535.y;
                                frontier_phi_83_pred_4 = _3751 * _3535.x;
                                frontier_phi_83_pred_5 = _3677 * _3523.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3759 = frontier_phi_83_pred;
                            _3758 = frontier_phi_83_pred_1;
                            _3757 = frontier_phi_83_pred_2;
                            _3756 = frontier_phi_83_pred_3;
                            _3755 = frontier_phi_83_pred_4;
                            _3760 = frontier_phi_83_pred_5;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            _3464 = _3757 + _3477;
                            if (_3482 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3482;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3467;
                        frontier_phi_77_pred_1 = _3466;
                        frontier_phi_77_pred_2 = _3465;
                        frontier_phi_77_pred_3 = _3464;
                        frontier_phi_77_pred_4 = _3463;
                        frontier_phi_77_pred_5 = _3462;
                    }
                    _3104 = frontier_phi_77_pred;
                    _3102 = frontier_phi_77_pred_1;
                    _3100 = frontier_phi_77_pred_2;
                    _3098 = frontier_phi_77_pred_3;
                    _3096 = frontier_phi_77_pred_4;
                    _3094 = frontier_phi_77_pred_5;
                    uint _3260 = _3259 + 1u;
                    if (_3260 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3253 = _3094;
                        _3254 = _3096;
                        _3255 = _3098;
                        _3256 = _3100;
                        _3257 = _3102;
                        _3258 = _3104;
                        _3259 = _3260;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3098;
                frontier_phi_58_59_ladder_1 = _3104;
                frontier_phi_58_59_ladder_2 = _3102;
                frontier_phi_58_59_ladder_3 = _3100;
                frontier_phi_58_59_ladder_4 = _3096;
                frontier_phi_58_59_ladder_5 = _3094;
            }
            else
            {
                frontier_phi_58_59_ladder = _2976;
                frontier_phi_58_59_ladder_1 = _2982;
                frontier_phi_58_59_ladder_2 = _2980;
                frontier_phi_58_59_ladder_3 = _2978;
                frontier_phi_58_59_ladder_4 = _2974;
                frontier_phi_58_59_ladder_5 = _2972;
            }
            _3093 = frontier_phi_58_59_ladder_5;
            _3095 = frontier_phi_58_59_ladder_4;
            _3097 = frontier_phi_58_59_ladder;
            _3099 = frontier_phi_58_59_ladder_3;
            _3101 = frontier_phi_58_59_ladder_2;
            _3103 = frontier_phi_58_59_ladder_1;
        }
        float _3108 = isnan(1.0) ? _1099 : (isnan(_1099) ? 1.0 : min(_1099, 1.0));
        _2884 = (_3108 * _3099) + _2317;
        _2886 = (_3108 * _3101) + _2319;
        _2888 = (_3108 * _3103) + _2321;
        _2890 = ((_3093 * _1083) * _3108) + _2665;
        _2892 = ((_3095 * _1085) * _3108) + _2667;
        _2894 = ((_3097 * _1086) * _3108) + _2669;
    }
    else
    {
        _2884 = _2317;
        _2886 = _2319;
        _2888 = _2321;
        _2890 = _2665;
        _2892 = _2667;
        _2894 = _2669;
    }
    float _4877 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _4888 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _4899 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _2911 = ((isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2884 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1099))) + ((_2890 + ((isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))) * _1936)) * cbPerFrame._m0[3u].x);
    float _2912 = ((isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2886 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1099))) + ((_2892 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1936)) * cbPerFrame._m0[3u].x);
    float _2913 = ((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2888 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1099))) + ((_2894 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1936)) * cbPerFrame._m0[3u].x);
    uint _2914 = _260 + 6u;
    float _2922 = _1021 / cbSceneParam._m0[86u].x;
    float _2923 = _1022 / cbSceneParam._m0[86u].y;
    vec4 _2937 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2922, _2923, (log2((isnan(cbSceneParam._m0[77u].w) ? _944 : (isnan(_944) ? cbSceneParam._m0[77u].w : min(_944, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2939 = _2937.x;
    float _2940 = _2937.y;
    float _2941 = _2937.z;
    float _2942 = _2937.w;
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    if (_944 > cbSceneParam._m0[78u].w)
    {
        float _2997 = isnan(_944) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _944 : min(cbSceneParam._m0[80u].w, _944));
        float _2998 = _2997 / _944;
        float _3009 = _2998 * _994;
        float _3010 = _995 * _2998;
        float _3011 = (-0.0) - _3010;
        float _3013 = _2998 * _996;
        float _3015 = (cbSceneParam._m0[77u].w * _3011) / _2997;
        float _3016 = _3015 + cbSceneParam._m0[79u].w;
        float _3017 = cbSceneParam._m0[79u].w - _3010;
        float _3023 = sqrt(((_3009 * _3009) + (_3010 * _3010)) + (_3013 * _3013));
        float _3026 = (1.0 - (cbSceneParam._m0[77u].w / _2997)) * _3023;
        float _3031 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3033 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3210;
        if (abs((_3011 - _3015) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3210 = ((((_3016 > 0.0) ? exp2(_3031 * _3016) : (2.0 - exp2(_3033 * _3016))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3026;
        }
        else
        {
            float _3154 = 1.0 / cbSceneParam._m0[80u].x;
            float _3155 = isnan(_3017) ? _3016 : (isnan(_3016) ? _3017 : max(_3016, _3017));
            float _3156 = isnan(_3017) ? _3016 : (isnan(_3016) ? _3017 : min(_3016, _3017));
            float _3165 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : min(_3155, 0.0));
            float _3166 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : min(_3156, 0.0));
            _3210 = ((abs(_3023 / _3011) * cbSceneParam._m0[80u].y) * ((((_3165 - _3166) * 2.0) - ((exp2(_3031 * (isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0)))) - exp2(_3031 * (isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))))) * _3154)) - ((exp2(_3033 * _3165) - exp2(_3033 * _3166)) * _3154))) + (_3026 * cbSceneParam._m0[80u].z);
        }
        vec4 _3212 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2922, _2923, 1.0), 0.0);
        float _3221 = exp2((_3210 * (-1.44269502162933349609375)) * (1.0 - _3212.w));
        float _3222 = log2(_3221);
        float _3238 = log2(_2942);
        _3035 = (exp2(_3238 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3222 * cbSceneParam._m0[78u].x)) * _3212.x) / cbSceneParam._m0[78u].x)) + _2939;
        _3037 = (exp2(_3238 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3222 * cbSceneParam._m0[78u].y)) * _3212.y) / cbSceneParam._m0[78u].y)) + _2940;
        _3039 = (exp2(_3238 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3222 * cbSceneParam._m0[78u].z)) * _3212.z) / cbSceneParam._m0[78u].z)) + _2941;
        _3041 = _3221 * _2942;
    }
    else
    {
        _3035 = _2939;
        _3037 = _2940;
        _3039 = _2941;
        _3041 = _2942;
    }
    bool _3248;
    vec4 _3051;
    vec4 _3073;
    float _3075;
    float _3079;
    float _3080;
    float _3081;
    float _3082;
    bool _3092;
    for (;;)
    {
        _3051 = cbMatDynParam._m0[0u];
        float _3053 = roundEven(_3051.y);
        bool _3054 = _3053 == 3.0;
        float _3055 = log2(_3041);
        float _3062 = exp2(_3055 * cbSceneParam._m0[78u].x) * _2911;
        float _3063 = exp2(_3055 * cbSceneParam._m0[78u].y) * _2912;
        float _3064 = exp2(_3055 * cbSceneParam._m0[78u].z) * _2913;
        float _3071 = _1010 + (-0.5);
        _3073 = cbMtdParam._m0[1u];
        _3075 = _3073.y * _3071;
        float _3078 = (_3053 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3079 = _3078 * (_3054 ? _3062 : (_3062 + (cbSceneParam._m0[72u].w * _3035)));
        _3080 = _3078 * (_3054 ? _3063 : (_3063 + (cbSceneParam._m0[72u].w * _3037)));
        _3081 = _3078 * (_3054 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3039)));
        _3082 = _3071 * 0.999000012874603271484375;
        _3092 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3092)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _3082) < 0.5)
            {
                _3248 = true;
                break;
            }
        }
        uint _3189 = _1059 + uint(_3051.w);
        if ((cbInstanceData._m0[_3189].w < 1.0) && ((cbInstanceData._m0[_3189].w + _3082) < 0.5))
        {
            _3248 = true;
            break;
        }
        if ((_3075 + 1.0) < _3073.x)
        {
            _3248 = true;
            break;
        }
        _3248 = false;
        break;
    }
    float _3453;
    if (_3248)
    {
        discard_state = true;
        _3453 = 0.0;
    }
    else
    {
        _3453 = cbInstanceData._m0[_2914].w;
    }
    SV_Target.x = _3079;
    SV_Target.y = _3080;
    SV_Target.z = _3081;
    SV_Target.w = _3453;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2914].w;
    discard_exit();
}


