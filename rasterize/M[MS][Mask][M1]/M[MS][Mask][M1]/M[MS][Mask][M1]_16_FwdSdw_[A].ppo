#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1354;
float _4019;
float _4020;
float _4021;
float _4022;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[23u].w) + _392) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4031 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _417 = (_410 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _418 = (_410 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _419 = (_410 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    float _467 = ((_437.z - _458) * _410) + _458;
    float _470 = ((((_437.x - _456) * _410) + _456) * 2.0) + (-1.0);
    float _472 = ((((_437.y - _457) * _410) + _457) * 2.0) + (-1.0);
    float _473 = dot(vec2(_470, _472), vec2(_470, _472));
    float _4042 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _478 = sqrt(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _521 = _519.x;
    float _522 = 1.0 - _521;
    float _531 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _534 = ((isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : min(_531, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _543 = (_534 - ((((((_521 - _522) * cbMtdParam._m0[24u].z) + _522) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _534))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4063 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _551 = (_544 * (cbMtdParam._m0[17u].x - _417)) + _417;
    float _552 = (_544 * (cbMtdParam._m0[17u].y - _418)) + _418;
    float _553 = (_544 * (cbMtdParam._m0[17u].z - _419)) + _419;
    vec4 _565 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _567 = _565.x;
    float _568 = 1.0 - _567;
    float _593 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_567 - _568) * cbMtdParam._m0[24u].w) + _568) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4074 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _602 = ((((cbMtdParam._m0[10u].x - _551) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _594) + _551;
    float _603 = ((((cbMtdParam._m0[10u].y - _552) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _594) + _552;
    float _604 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _553)) * _594) + _553;
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _632 = _630.x;
    float _650 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _632) * _410) + _632;
    float _654 = ((_616.x - _650) * cbMtdParam._m0[19u].z) + _650;
    float _656 = _654 - (_654 * _544);
    float _658 = _656 - (_656 * _594);
    float _662 = (cbMtdParam._m0[19u].w * (_494.z - _467)) + _467;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _683 = (_676.x * 2.0) + (-1.0);
    float _684 = (_676.y * 2.0) + (-1.0);
    float _685 = dot(vec2(_683, _684), vec2(_683, _684));
    float _4085 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _693 = (_544 * (_676.z - _662)) + _662;
    float _696 = ((cbMtdParam._m0[23u].x - _693) * _594) + _693;
    vec4 _715 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _721 = (_715.x * 2.0) + (-1.0);
    float _722 = (_715.y * 2.0) + (-1.0);
    float _723 = dot(vec2(_721, _722), vec2(_721, _722));
    float _4096 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _731 = (((_494.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _470;
    float _732 = (((_494.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _472;
    float _744 = (((_683 - _731) + (cbMtdParam._m0[21u].x * _731)) * _544) + _731;
    float _745 = (((_684 - _732) + (cbMtdParam._m0[21u].x * _732)) * _544) + _732;
    float _746 = (_544 * (sqrt(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) - _478)) + _478;
    float _757 = (((_721 - _744) + (_744 * cbMtdParam._m0[22u].z)) * _594) + _744;
    float _758 = (((_722 - _745) + (_745 * cbMtdParam._m0[22u].z)) * _594) + _745;
    float _759 = ((sqrt(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) - _746) * _594) + _746;
    float _761 = cbMtdParam._m0[22u].x + _494.w;
    float _764 = fma(_759, _246 * NORMAL.x, fma(_758, _253 * TANGENT.x, (_239 * _231) * _757));
    float _767 = fma(_759, _246 * NORMAL.y, fma(_758, _253 * TANGENT.y, (_239 * _232) * _757));
    float _770 = fma(_759, _246 * NORMAL.z, fma(_758, _253 * TANGENT.z, (_239 * _233) * _757));
    float _774 = inversesqrt(dot(vec3(_764, _767, _770), vec3(_764, _767, _770)));
    float _775 = _774 * _764;
    float _776 = _774 * _767;
    float _777 = _774 * _770;
    float _4107 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _778 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4129 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4140 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4151 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4162 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _783 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _797 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _847 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _837);
    float _848 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _837);
    float _849 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _837);
    float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
    float _854 = _847 * _853;
    float _855 = _848 * _853;
    float _856 = _849 * _853;
    vec4 _861 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _863 = _861.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1035 = sqrt(((_847 * _847) + (_848 * _848)) + (_849 * _849));
        float _1041 = (cbMatDynParam._m0[5u].x * _1035) + cbMatDynParam._m0[5u].y;
        float _4173 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1046 = (cbMatDynParam._m0[5u].z * _1035) + cbMatDynParam._m0[5u].w;
        float _4184 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) - _1042)) + _1042) < ((_863 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _874 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _875 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _893 = fma(_777, cbSceneParam._m0[5u].z, fma(_776, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _775));
    float _896 = fma(_777, cbSceneParam._m0[6u].z, fma(_776, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _775));
    float _899 = fma(_777, cbSceneParam._m0[7u].z, fma(_776, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _775));
    uint _912 = _259 + 9u;
    uint _913 = _912 + uint(cbMatDynParam._m0[0u].w);
    float _919 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbInstanceData._m0[_913].x;
    float _920 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * cbInstanceData._m0[_913].y;
    float _921 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * cbInstanceData._m0[_913].z;
    float _4195 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _4206 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _4217 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _925 = 1.0 - _783;
    float _926 = _922 * _925;
    float _927 = _923 * _925;
    float _928 = _924 * _925;
    float _933 = (_922 + (-0.039999999105930328369140625)) * _783;
    float _934 = (_923 + (-0.039999999105930328369140625)) * _783;
    float _935 = (_924 + (-0.039999999105930328369140625)) * _783;
    float _936 = _933 + 0.039999999105930328369140625;
    float _938 = _934 + 0.039999999105930328369140625;
    float _939 = _935 + 0.039999999105930328369140625;
    vec4 _948 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _874, cbSceneParam._m0[86u].y * _875));
    float _952 = ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * TEXCOORD_5.w) * _948.x;
    float _953 = dot(vec3(_775, _776, _777), vec3(_854, _855, _856));
    float _956 = _953 * 2.0;
    float _960 = (_956 * _775) - _854;
    float _961 = (_956 * _776) - _855;
    float _962 = (_956 * _777) - _856;
    float _966 = abs(dot(vec3(_854, _855, _856), vec3(_775, _776, _777)));
    float _4228 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _968 = sqrt(_778);
    float _981 = exp2((_968 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_968 * 3.0));
    float _987 = (1.0 - _981) * ((_968 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _988 = _981 * _968;
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1353;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1078 = fma(_1024, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016));
        float _1082 = fma(_1024, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016));
        float _1086 = fma(_1024, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016));
        float _1111 = _1016 + _775;
        float _1112 = _1020 + _776;
        float _1113 = _1024 + _777;
        float _1123 = fma(_1113, cbModelParam._m0[26u].z, fma(_1112, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1111)) - _1078;
        float _1124 = fma(_1113, cbModelParam._m0[27u].z, fma(_1112, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1111)) - _1082;
        float _1125 = fma(_1113, cbModelParam._m0[28u].z, fma(_1112, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1111)) - _1086;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1078 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1082 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[34u].z) + ((((((_1086 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1181 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1147.x + (-0.5));
        float _1183 = _1181 * (_1147.y + (-0.5));
        float _1184 = _1181 * (_1147.z + (-0.5));
        float _1191 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1154.x + (-0.5));
        float _1193 = _1191 * (_1154.y + (-0.5));
        float _1194 = _1191 * (_1154.z + (-0.5));
        float _1201 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1161.x + (-0.5));
        float _1203 = _1201 * (_1161.y + (-0.5));
        float _1204 = _1201 * (_1161.z + (-0.5));
        float _1211 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1168.x + (-0.5));
        float _1213 = _1211 * (_1168.y + (-0.5));
        float _1214 = _1211 * (_1168.z + (-0.5));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = _1182 * 0.5;
        float _1219 = _1192 * 0.5;
        float _1220 = _1202 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1235 = (dot(vec3(_775, _776, _777), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1245 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _4276 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1247 + 1.0))) + _1252) * _1215;
        float _1262 = _1183 * 0.5;
        float _1263 = _1193 * 0.5;
        float _1264 = _1203 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_775, _776, _777), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4309 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1289 + 1.0))) + _1294) * _1216;
        float _1304 = _1184 * 0.5;
        float _1305 = _1194 * 0.5;
        float _1306 = _1204 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_775, _776, _777), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4342 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1331 + 1.0))) + _1336) * _1217;
        _1353 = _1184;
        _1355 = _1183;
        _1356 = _1182;
        _1357 = _1194;
        _1358 = _1193;
        _1359 = _1192;
        _1360 = _1204;
        _1361 = _1203;
        _1362 = _1202;
        _1363 = _1217;
        _1364 = _1216;
        _1365 = _1215;
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
    }
    else
    {
        _1353 = _1354;
        _1355 = _1354;
        _1356 = _1354;
        _1357 = _1354;
        _1358 = _1354;
        _1359 = _1354;
        _1360 = _1354;
        _1361 = _1354;
        _1362 = _1354;
        _1363 = _1354;
        _1364 = _1354;
        _1365 = _1354;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1396 = fma(_1024, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1016));
        float _1400 = fma(_1024, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1016));
        float _1404 = fma(_1024, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1016));
        float _1427 = _1016 + _775;
        float _1428 = _1020 + _776;
        float _1429 = _1024 + _777;
        float _1439 = fma(_1429, cbModelParam._m0[30u].z, fma(_1428, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1427)) - _1396;
        float _1440 = fma(_1429, cbModelParam._m0[31u].z, fma(_1428, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1427)) - _1400;
        float _1441 = fma(_1429, cbModelParam._m0[32u].z, fma(_1428, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1427)) - _1404;
        float _1445 = inversesqrt(dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441)));
        float _1458 = ((_1445 * _1439) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1396 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1445 * _1440) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1400 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1445 * _1441) / cbModelParam._m0[35u].z) + ((((((_1404 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        float _1495 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1462.x + (-0.5));
        float _1497 = _1495 * (_1462.y + (-0.5));
        float _1498 = _1495 * (_1462.z + (-0.5));
        float _1505 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1469.x + (-0.5));
        float _1507 = _1505 * (_1469.y + (-0.5));
        float _1508 = _1505 * (_1469.z + (-0.5));
        float _1515 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1476.x + (-0.5));
        float _1517 = _1515 * (_1476.y + (-0.5));
        float _1518 = _1515 * (_1476.z + (-0.5));
        float _1525 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1483.x + (-0.5));
        float _1527 = _1525 * (_1483.y + (-0.5));
        float _1528 = _1525 * (_1483.z + (-0.5));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = _1496 * 0.5;
        float _1533 = _1506 * 0.5;
        float _1534 = _1516 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_775, _776, _777), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4405 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1559 + 1.0))) + _1564) * _1529;
        float _1574 = _1497 * 0.5;
        float _1575 = _1507 * 0.5;
        float _1576 = _1517 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_775, _776, _777), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4438 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1601 + 1.0))) + _1606) * _1530;
        float _1616 = _1498 * 0.5;
        float _1617 = _1508 * 0.5;
        float _1618 = _1518 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_775, _776, _777), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4471 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1643 + 1.0))) + _1648) * _1531;
        _1665 = _1498;
        _1666 = _1497;
        _1667 = _1496;
        _1668 = _1508;
        _1669 = _1507;
        _1670 = _1506;
        _1671 = _1518;
        _1672 = _1517;
        _1673 = _1516;
        _1674 = _1531;
        _1675 = _1530;
        _1676 = _1529;
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
    }
    else
    {
        _1665 = _1354;
        _1666 = _1354;
        _1667 = _1354;
        _1668 = _1354;
        _1669 = _1354;
        _1670 = _1354;
        _1671 = _1354;
        _1672 = _1354;
        _1673 = _1354;
        _1674 = _1354;
        _1675 = _1354;
        _1676 = _1354;
        _1677 = 0.0;
        _1678 = 0.0;
        _1679 = 0.0;
    }
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1366)) + _1366;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1367)) + _1367;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1368)) + _1368;
    float _1712 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1689));
    float _1733 = _960 * 0.5;
    float _1734 = _961 * 0.5;
    float _1735 = _962 * 0.5;
    float _1736 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1739 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1742 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1776;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1749 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1353, _1357, _1360, _1363));
        float _1753 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1355, _1358, _1361, _1364));
        float _1757 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1356, _1359, _1362, _1365));
        float _1764 = dot(vec4(cbModelParam._m0[39u]), vec4(_1733, _1734, _1735, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1764) ? 0.0 : (isnan(0.0) ? _1764 : max(0.0, _1764))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1787;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1778 = dot(vec4(cbModelParam._m0[40u]), vec4(_1733, _1734, _1735, 1.0));
        _1787 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1787 = 1.0;
    }
    float _1791 = (_1787 * cbModelParam._m0[1u].x) + (_1776 * (1.0 - cbModelParam._m0[1u].x));
    float _1801 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _778);
    float _1802 = isnan(_1801) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1801 : min(cbModelParam._m0[25u].z, _1801));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1850 = fma(_1024, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016)) + cbModelParam._m0[13u].w;
        float _1854 = fma(_1024, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016)) + cbModelParam._m0[14u].w;
        float _1858 = fma(_1024, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016)) + cbModelParam._m0[15u].w;
        float _1861 = fma(_962, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960));
        float _1864 = fma(_962, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960));
        float _1867 = fma(_962, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960));
        float _1895;
        if (_1861 > 0.0)
        {
            _1895 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1895 = frontier_phi_17_15_ladder;
        }
        float _2067;
        if (_1864 > 0.0)
        {
            _2067 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2067 = frontier_phi_26_22_ladder;
        }
        float _2362;
        if (_1867 > 0.0)
        {
            _2362 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2362 = frontier_phi_38_33_ladder;
        }
        float _2364 = isnan(_2067) ? _1895 : (isnan(_1895) ? _2067 : min(_1895, _2067));
        float _2365 = isnan(_2362) ? _2364 : (isnan(_2364) ? _2362 : min(_2364, _2362));
        float _2369 = (_2365 * _1861) + _1850;
        float _2370 = (_2365 * _1864) + _1854;
        float _2371 = (_2365 * _1867) + _1858;
        float _2372 = _2365 * 9.9999997473787516355514526367188e-05;
        float _2374 = (-1.0) - _2372;
        float _2376 = _2372 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2371 > _2376) || ((_2371 < _2374) || ((_2370 > _2376) || ((_2370 < _2374) || ((_2369 < _2374) || (_2369 > _2376))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2516 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2371, cbModelParam._m0[9u].z, fma(_2370, cbModelParam._m0[9u].y, _2369 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2371, cbModelParam._m0[10u].z, fma(_2370, cbModelParam._m0[10u].y, _2369 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2371, cbModelParam._m0[11u].z, fma(_2370, cbModelParam._m0[11u].y, _2369 * cbModelParam._m0[11u].x))), _1802);
            frontier_phi_16_38_ladder = _2516.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2516.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2516.x * cbModelParam._m0[1u].y;
        }
        _1883 = frontier_phi_16_38_ladder_2;
        _1885 = frontier_phi_16_38_ladder_1;
        _1887 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_960, _961, _962), _1802);
        _1883 = _1871.x * cbModelParam._m0[1u].y;
        _1885 = _1871.y * cbModelParam._m0[1u].y;
        _1887 = _1871.z * cbModelParam._m0[1u].y;
    }
    float _1891 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _778);
    float _1892 = isnan(_1891) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1891 : min(cbModelParam._m0[25u].w, _1891));
    float _1982;
    float _1984;
    float _1986;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1946 = fma(_1024, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016)) + cbModelParam._m0[21u].w;
        float _1950 = fma(_1024, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016)) + cbModelParam._m0[22u].w;
        float _1954 = fma(_1024, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016)) + cbModelParam._m0[23u].w;
        float _1957 = fma(_962, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960));
        float _1960 = fma(_962, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960));
        float _1963 = fma(_962, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960));
        float _2072;
        if (_1957 > 0.0)
        {
            _2072 = abs((1.0 - _1946) / _1957);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1946 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2072 = frontier_phi_28_24_ladder;
        }
        float _2389;
        if (_1960 > 0.0)
        {
            _2389 = abs((1.0 - _1950) / _1960);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1950 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2389 = frontier_phi_40_35_ladder;
        }
        float _2727;
        if (_1963 > 0.0)
        {
            _2727 = abs((1.0 - _1954) / _1963);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1954 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2727 = frontier_phi_50_47_ladder;
        }
        float _2729 = isnan(_2389) ? _2072 : (isnan(_2072) ? _2389 : min(_2072, _2389));
        float _2730 = isnan(_2727) ? _2729 : (isnan(_2729) ? _2727 : min(_2729, _2727));
        float _2734 = (_2730 * _1957) + _1946;
        float _2735 = (_2730 * _1960) + _1950;
        float _2736 = (_2730 * _1963) + _1954;
        float _2737 = _2730 * 9.9999997473787516355514526367188e-05;
        float _2738 = (-1.0) - _2737;
        float _2740 = _2737 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2736 > _2740) || ((_2736 < _2738) || ((_2735 > _2740) || ((_2735 < _2738) || ((_2734 < _2738) || (_2734 > _2740))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2858 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2736, cbModelParam._m0[17u].z, fma(_2735, cbModelParam._m0[17u].y, _2734 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2736, cbModelParam._m0[18u].z, fma(_2735, cbModelParam._m0[18u].y, _2734 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2736, cbModelParam._m0[19u].z, fma(_2735, cbModelParam._m0[19u].y, _2734 * cbModelParam._m0[19u].x))), _1892);
            frontier_phi_25_50_ladder = _2858.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2858.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2858.x * cbModelParam._m0[1u].z;
        }
        _1982 = frontier_phi_25_50_ladder_2;
        _1984 = frontier_phi_25_50_ladder_1;
        _1986 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1966 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_960, _961, _962), _1892);
        _1982 = _1966.x * cbModelParam._m0[1u].z;
        _1984 = _1966.y * cbModelParam._m0[1u].z;
        _1986 = _1966.z * cbModelParam._m0[1u].z;
    }
    float _1999 = (((_987 * _936) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1982 - _1883)) + _1883);
    float _2001 = (((_987 * _938) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1984 - _1885)) + _1885);
    float _2003 = (((_987 * _939) + _988) * _952) * ((cbModelParam._m0[1u].w * (_1986 - _1887)) + _1887);
    float _2006 = fma(_2003, cbSceneParam._m0[89u].z, fma(_2001, cbSceneParam._m0[89u].y, _1999 * cbSceneParam._m0[89u].x));
    float _2009 = fma(_2003, cbSceneParam._m0[90u].z, fma(_2001, cbSceneParam._m0[90u].y, _1999 * cbSceneParam._m0[90u].x));
    float _2012 = fma(_2003, cbSceneParam._m0[91u].z, fma(_2001, cbSceneParam._m0[91u].y, _1999 * cbSceneParam._m0[91u].x));
    float _2046 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2050 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2059 = _2046 / _2058;
    float _2060 = _2050 / _2058;
    float _2061 = _2054 / _2058;
    float _2208;
    float _2209;
    float _2210;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2088 = ((uint(_2061 > cbSceneParam._m0[59u].y) + uint(_2061 > cbSceneParam._m0[59u].x)) + uint(_2061 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2089 = _2088 + 43u;
        uint _2097 = _2088 + 44u;
        uint _2105 = _2088 + 45u;
        uint _2113 = _2088 + 46u;
        float _2124 = fma(_2058, cbSceneParam._m0[_2089].w, fma(_2054, cbSceneParam._m0[_2089].z, fma(_2050, cbSceneParam._m0[_2089].y, _2046 * cbSceneParam._m0[_2089].x)));
        float _2128 = fma(_2058, cbSceneParam._m0[_2097].w, fma(_2054, cbSceneParam._m0[_2097].z, fma(_2050, cbSceneParam._m0[_2097].y, _2046 * cbSceneParam._m0[_2097].x)));
        float _2136 = fma(_2058, cbSceneParam._m0[_2113].w, fma(_2054, cbSceneParam._m0[_2113].z, fma(_2050, cbSceneParam._m0[_2113].y, _2046 * cbSceneParam._m0[_2113].x)));
        float _2141 = cbSceneParam._m0[33u].z * _2136;
        float _2143 = cbSceneParam._m0[33u].w * _2136;
        float _2146 = fma(_2058, cbSceneParam._m0[_2105].w, fma(_2054, cbSceneParam._m0[_2105].z, fma(_2050, cbSceneParam._m0[_2105].y, _2046 * cbSceneParam._m0[_2105].x))) / _2136;
        float _2194 = (cbSceneParam._m0[33u].x - sqrt(((_2060 * _2060) + (_2059 * _2059)) + (_2061 * _2061))) * cbSceneParam._m0[33u].y;
        float _4597 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2201 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 + _2124) / _2136, (_2143 + _2128) / _2136), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2143 + _2124) / _2136, (_2128 - _2141) / _2136), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 - _2141) / _2136, (_2128 - _2143) / _2136), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 - _2143) / _2136, (_2141 + _2128) / _2136), _2146), 0.0)).x), vec4(0.25)));
        _2208 = 1.0 - (_2201 * cbSceneParam._m0[34u].x);
        _2209 = 1.0 - (_2201 * cbSceneParam._m0[34u].y);
        _2210 = 1.0 - (_2201 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2208 = 1.0;
        _2209 = 1.0;
        _2210 = 1.0;
    }
    float _2274;
    float _2276;
    float _2278;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2262 = fma(_2058, cbSceneParam._m0[63u].w, fma(_2054, cbSceneParam._m0[63u].z, fma(_2050, cbSceneParam._m0[63u].y, _2046 * cbSceneParam._m0[63u].x)));
        float _2263 = fma(_2058, cbSceneParam._m0[60u].w, fma(_2054, cbSceneParam._m0[60u].z, fma(_2050, cbSceneParam._m0[60u].y, _2046 * cbSceneParam._m0[60u].x))) / _2262;
        float _2264 = fma(_2058, cbSceneParam._m0[61u].w, fma(_2054, cbSceneParam._m0[61u].z, fma(_2050, cbSceneParam._m0[61u].y, _2046 * cbSceneParam._m0[61u].x))) / _2262;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2263 >= cbSceneParam._m0[64u].x) && (_2264 >= cbSceneParam._m0[64u].y)) && (_2263 <= cbSceneParam._m0[64u].z)) && (_2264 <= cbSceneParam._m0[64u].w))
        {
            float _2402 = fma(_2058, cbSceneParam._m0[62u].w, fma(_2054, cbSceneParam._m0[62u].z, fma(_2050, cbSceneParam._m0[62u].y, _2046 * cbSceneParam._m0[62u].x))) / _2262;
            float _2406 = isnan(cbSceneParam._m0[41u].w) ? _2402 : (isnan(_2402) ? cbSceneParam._m0[41u].w : max(_2402, cbSceneParam._m0[41u].w));
            float _2449 = (cbSceneParam._m0[33u].x - sqrt(((_2060 * _2060) + (_2059 * _2059)) + (_2061 * _2061))) * cbSceneParam._m0[33u].y;
            float _4613 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
            float _2456 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2263, cbSceneParam._m0[33u].w + _2264), _2406), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2263, _2264 - cbSceneParam._m0[33u].z), _2406), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2263 - cbSceneParam._m0[33u].z, _2264 - cbSceneParam._m0[33u].w), _2406), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2263 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2264), _2406), 0.0)).x), vec4(0.25)));
            float _2460 = 1.0 - (_2456 * cbSceneParam._m0[34u].x);
            float _2461 = 1.0 - (_2456 * cbSceneParam._m0[34u].y);
            float _2462 = 1.0 - (_2456 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2462) ? _2210 : (isnan(_2210) ? _2462 : min(_2210, _2462));
            frontier_phi_37_36_ladder_1 = isnan(_2461) ? _2209 : (isnan(_2209) ? _2461 : min(_2209, _2461));
            frontier_phi_37_36_ladder_2 = isnan(_2460) ? _2208 : (isnan(_2208) ? _2460 : min(_2208, _2460));
        }
        else
        {
            frontier_phi_37_36_ladder = _2210;
            frontier_phi_37_36_ladder_1 = _2209;
            frontier_phi_37_36_ladder_2 = _2208;
        }
        _2274 = frontier_phi_37_36_ladder_2;
        _2276 = frontier_phi_37_36_ladder_1;
        _2278 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2274 = _2208;
        _2276 = _2209;
        _2278 = _2210;
    }
    uvec4 _2283 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2285 = _2283.x * 14u;
    uint _2286 = _2285 + 13u;
    float _2293 = _952 + (-1.0);
    float _2298 = (cbLight._m0[_2286].x * _2293) + 1.0;
    float _2299 = (cbLight._m0[_2286].y * _2293) + 1.0;
    float _2300 = (cbLight._m0[_2286].z * _2293) + 1.0;
    float _2301 = (cbLight._m0[_2286].w * _2293) + 1.0;
    uint _2302 = _2285 + 5u;
    float _2308 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
    uint _2312 = _2285 + 4u;
    float _2321 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
    uint _2325 = _2285 | 1u;
    float _2336 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_775, _776, _777));
    float _2339 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_775, _776, _777));
    float _4649 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _4660 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2344 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * 0.3183098733425140380859375;
    float _2346 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * 0.3183098733425140380859375;
    float _2353 = ((cbLight._m0[_2302].x * _2308) * _2346) + (((cbLight._m0[_2312].x * _2274) * _2321) * _2344);
    float _2354 = ((_2308 * cbLight._m0[_2302].y) * _2346) + (((cbLight._m0[_2312].y * _2276) * _2321) * _2344);
    float _2355 = ((_2308 * cbLight._m0[_2302].z) * _2346) + (((cbLight._m0[_2312].z * _2278) * _2321) * _2344);
    uvec4 _2359 = floatBitsToUint(cbLight._m0[_2285 + 12u]);
    bool _2361 = _2359.x == 0u;
    float _2463;
    float _2465;
    float _2467;
    if (_2361)
    {
        _2463 = _2353;
        _2465 = _2354;
        _2467 = _2355;
    }
    else
    {
        uint _2471 = _2285 + 6u;
        float _2487 = (dot(vec3(cbLight._m0[_2285 + 2u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2488 = _2487 * _2487;
        float _4671 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2489 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2490 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2463 = (((cbLight._m0[_2471].x * 0.3183098733425140380859375) * _2489) * _2490) + _2353;
        _2465 = (((cbLight._m0[_2471].y * 0.3183098733425140380859375) * _2489) * _2490) + _2354;
        _2467 = (((cbLight._m0[_2471].z * 0.3183098733425140380859375) * _2489) * _2490) + _2355;
    }
    bool _2470 = _2359.y == 0u;
    float _2525;
    float _2527;
    float _2529;
    if (_2470)
    {
        _2525 = _2463;
        _2527 = _2465;
        _2529 = _2467;
    }
    else
    {
        uint _2698 = _2285 + 7u;
        float _2714 = (dot(vec3(cbLight._m0[_2285 + 3u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2715 = _2714 * _2714;
        float _4687 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2716 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2717 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2525 = (((cbLight._m0[_2698].x * 0.3183098733425140380859375) * _2716) * _2717) + _2463;
        _2527 = (((cbLight._m0[_2698].y * 0.3183098733425140380859375) * _2716) * _2717) + _2465;
        _2529 = (((cbLight._m0[_2698].z * 0.3183098733425140380859375) * _2716) * _2717) + _2467;
    }
    uint _2532 = _2285 + 8u;
    float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _778) * 0.949999988079071044921875);
    float _2546 = _2545 * _2545;
    float _2547 = cbLight._m0[_2285].x + _854;
    float _2548 = cbLight._m0[_2285].y + _855;
    float _2549 = cbLight._m0[_2285].z + _856;
    float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
    float _2554 = _2553 * _2547;
    float _2555 = _2553 * _2548;
    float _2556 = _2553 * _2549;
    float _2557 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2285].xyz));
    float _4703 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
    float _4714 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _2561 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _2562 = dot(vec3(_775, _776, _777), vec3(_2554, _2555, _2556));
    float _4725 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2566 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2554, _2555, _2556));
    float _4736 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2570 = _2546 * _2546;
    float _2574 = ((_2565 * _2565) * (_2570 + (-1.0))) + 1.0;
    float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0);
    float _2583 = 0.959999978542327880859375 - _933;
    float _2585 = 0.959999978542327880859375 - _934;
    float _2586 = 0.959999978542327880859375 - _935;
    float _2593 = 1.0 - _2546;
    float _2604 = (0.5 / (((_2561 * ((_2560 * _2593) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2561 * _2593) + _2546) * _2560))) * _2560;
    float _4747 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2606 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2570 / ((_2574 * _2574) * 3.141590118408203125));
    uint _2620 = _2285 + 9u;
    float _2631 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _778) * 0.949999988079071044921875);
    float _2632 = _2631 * _2631;
    float _2633 = cbLight._m0[_2325].x + _854;
    float _2634 = cbLight._m0[_2325].y + _855;
    float _2635 = cbLight._m0[_2325].z + _856;
    float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
    float _2640 = _2639 * _2633;
    float _2641 = _2639 * _2634;
    float _2642 = _2639 * _2635;
    float _2643 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2325].xyz));
    float _4758 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2646 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _2647 = dot(vec3(_775, _776, _777), vec3(_2640, _2641, _2642));
    float _4769 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2650 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _2651 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2640, _2641, _2642));
    float _4780 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2655 = _2632 * _2632;
    float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
    float _2666 = exp2(log2(1.0 - (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) * 5.0);
    float _2673 = 1.0 - _2632;
    float _2683 = (0.5 / (((_2561 * ((_2646 * _2673) + _2632)) + 9.9999999392252902907785028219223e-09) + (((_2561 * _2673) + _2632) * _2646))) * _2646;
    float _4791 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2685 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
    float _2695 = (((((_2666 * _2583) + _936) * cbLight._m0[_2620].x) * _2685) * _2308) + ((((cbLight._m0[_2532].x * _2274) * ((_2582 * _2583) + _936)) * _2606) * _2321);
    float _2696 = (((((_2666 * _2585) + _938) * cbLight._m0[_2620].y) * _2685) * _2308) + ((((cbLight._m0[_2532].y * _2276) * ((_2582 * _2585) + _938)) * _2606) * _2321);
    float _2697 = (((((_2666 * _2586) + _939) * cbLight._m0[_2620].z) * _2685) * _2308) + ((((cbLight._m0[_2532].z * _2278) * ((_2582 * _2586) + _939)) * _2606) * _2321);
    float _2753;
    float _2755;
    float _2757;
    if (_2361)
    {
        _2753 = _2695;
        _2755 = _2696;
        _2757 = _2697;
    }
    else
    {
        uint _2759 = _2285 + 2u;
        uint _2763 = _2285 + 10u;
        float _2777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2759].w)) * _778) * 0.949999988079071044921875);
        float _2778 = _2777 * _2777;
        float _2779 = cbLight._m0[_2759].x + _854;
        float _2780 = cbLight._m0[_2759].y + _855;
        float _2781 = cbLight._m0[_2759].z + _856;
        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
        float _2786 = _2785 * _2779;
        float _2787 = _2785 * _2780;
        float _2788 = _2785 * _2781;
        float _2789 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2759].xyz));
        float _4802 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _2793 = dot(vec3(_775, _776, _777), vec3(_2786, _2787, _2788));
        float _4813 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2797 = dot(vec3(cbLight._m0[_2759].xyz), vec3(_2786, _2787, _2788));
        float _4824 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2801 = _2778 * _2778;
        float _2805 = ((_2796 * _2796) * (_2801 + (-1.0))) + 1.0;
        float _2812 = exp2(log2(1.0 - (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) * 5.0);
        float _2819 = 1.0 - _2778;
        float _2829 = (0.5 / (((_2561 * ((_2792 * _2819) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2561 * _2819) + _2778) * _2792))) * _2792;
        float _4835 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2831 = (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2801 / ((_2805 * _2805) * 3.141590118408203125));
        float _2832 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2753 = (((((_2812 * _2583) + _936) * cbLight._m0[_2763].x) * _2831) * _2832) + _2695;
        _2755 = (((((_2812 * _2585) + _938) * cbLight._m0[_2763].y) * _2831) * _2832) + _2696;
        _2757 = (((((_2812 * _2586) + _939) * cbLight._m0[_2763].z) * _2831) * _2832) + _2697;
    }
    float _2863;
    float _2865;
    float _2867;
    if (_2470)
    {
        _2863 = _2753;
        _2865 = _2755;
        _2867 = _2757;
    }
    else
    {
        uint _2874 = _2285 + 3u;
        uint _2878 = _2285 + 11u;
        float _2892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2874].w)) * _778) * 0.949999988079071044921875);
        float _2893 = _2892 * _2892;
        float _2894 = cbLight._m0[_2874].x + _854;
        float _2895 = cbLight._m0[_2874].y + _855;
        float _2896 = cbLight._m0[_2874].z + _856;
        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
        float _2901 = _2900 * _2894;
        float _2902 = _2900 * _2895;
        float _2903 = _2900 * _2896;
        float _2904 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2874].xyz));
        float _4851 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2907 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
        float _2908 = dot(vec3(_775, _776, _777), vec3(_2901, _2902, _2903));
        float _4862 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2911 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2912 = dot(vec3(cbLight._m0[_2874].xyz), vec3(_2901, _2902, _2903));
        float _4873 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2916 = _2893 * _2893;
        float _2920 = ((_2911 * _2911) * (_2916 + (-1.0))) + 1.0;
        float _2927 = exp2(log2(1.0 - (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) * 5.0);
        float _2934 = 1.0 - _2893;
        float _2944 = (0.5 / (((_2561 * ((_2907 * _2934) + _2893)) + 9.9999999392252902907785028219223e-09) + (((_2561 * _2934) + _2893) * _2907))) * _2907;
        float _4884 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2946 = (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2916 / ((_2920 * _2920) * 3.141590118408203125));
        float _2947 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2863 = (((((_2927 * _2583) + _936) * cbLight._m0[_2878].x) * _2946) * _2947) + _2753;
        _2865 = (((((_2927 * _2585) + _938) * cbLight._m0[_2878].y) * _2946) * _2947) + _2755;
        _2867 = (((((_2927 * _2586) + _939) * cbLight._m0[_2878].z) * _2946) * _2947) + _2757;
    }
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    float _3023;
    if (_2283.y == 0u)
    {
        uvec4 _2968 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2969 = _2968.x;
        uint _2980 = uint((float(_2968.y) * floor(float(uint(cbSceneParam._m0[85u].y * _875) / _2969))) + floor(float(uint(cbSceneParam._m0[85u].x * _874) / _2969)));
        float _2990 = (log2(_2061 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2991 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        uint _2994 = uint(isnan(14.0) ? _2991 : (isnan(_2991) ? 14.0 : min(_2991, 14.0)));
        uvec4 _2999 = texelFetch(g_lightClusterGridBuffer, int(((_2994 << 2u) + (_2980 << 6u)) >> 2u));
        uint _3000 = _2999.x;
        uint _3001 = _2968.z;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        if (((((1u << ((_3001 >> 4u) & 15u)) + 4294967295u) & _3000) == 0u) || ((_3001 & 240u) == 0u))
        {
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
            _3088 = 0.0;
            _3090 = 0.0;
        }
        else
        {
            float _3081;
            float _3083;
            float _3085;
            float _3087;
            float _3089;
            float _3091;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            uint _3239 = 0u;
            uint _3248;
            bool _3249;
            for (;;)
            {
                _3248 = texelFetch(g_lightClassification, int((((_2994 << 5u) + (_2980 << 9u)) + (_3239 << 2u)) >> 2u)).x;
                _3249 = _3248 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3249)
                {
                    frontier_phi_71_pred = _3238;
                    frontier_phi_71_pred_1 = _3237;
                    frontier_phi_71_pred_2 = _3236;
                    frontier_phi_71_pred_3 = _3235;
                    frontier_phi_71_pred_4 = _3234;
                    frontier_phi_71_pred_5 = _3233;
                }
                else
                {
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    uint _3384;
                    _3378 = _3233;
                    _3379 = _3234;
                    _3380 = _3235;
                    _3381 = _3236;
                    _3382 = _3237;
                    _3383 = _3238;
                    _3384 = _3248;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    for (;;)
                    {
                        uint _3388 = uint(findLSB(_3384)) + (_3239 << 5u);
                        uint _3385 = (_3384 + 4294967295u) & _3384;
                        uint _3390 = _3388 * 48u;
                        vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3390)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 3u)).x));
                        uint _3410 = (_3388 * 48u) + 4u;
                        vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3410)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 3u)).x));
                        uint _3429 = (_3388 * 48u) + 8u;
                        vec3 _3440 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3429)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 2u)).x));
                        float _3444 = _3404.x - _2059;
                        float _3445 = _3404.y - _2060;
                        float _3446 = _3404.z - _2061;
                        float _3447 = dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446));
                        float _3450 = inversesqrt(_3447);
                        float _3451 = _3450 * _3444;
                        float _3452 = _3450 * _3445;
                        float _3453 = _3450 * _3446;
                        float _3454 = dot(vec3(_893, _896, _899), vec3(_3451, _3452, _3453));
                        float _3459 = 1.0 - (_3447 * _3404.w);
                        float _4910 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3460 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3461 = sqrt(_3447) * _3423.w;
                        float _3464 = 1.39999997615814208984375 / (_3461 + 1.39999997615814208984375);
                        float _3465 = _3464 * _3464;
                        float _3468 = ((1.0 - _3465) * _3454) + _3465;
                        float _3471 = _3461 * _3461;
                        float _3475 = ((isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0))) * _3460) / ((_3471 * 0.699999988079071044921875) + 1.0);
                        float _3479 = (-0.0) - _2059;
                        float _3480 = (-0.0) - _2060;
                        float _3481 = (-0.0) - _2061;
                        float _3485 = inversesqrt(dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481)));
                        float _3486 = _3485 * _3479;
                        float _3487 = _3485 * _3480;
                        float _3488 = _3485 * _3481;
                        float _3495 = exp2(log2(1.0 / ((_3471 * 3.5) + 5.0)) * 0.25);
                        float _3496 = 1.0 - _968;
                        float _3503 = sqrt(1.0 - ((1.0 - (_3496 * _3496)) * (1.0 - (_3495 * _3495))));
                        float _3504 = _3503 * _3503;
                        float _3505 = _3504 * _3504;
                        float _3506 = _3486 + _3451;
                        float _3507 = _3487 + _3452;
                        float _3508 = _3488 + _3453;
                        float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                        float _3516 = dot(vec3(_893, _896, _899), vec3(_3486, _3487, _3488));
                        float _4926 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3519 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3520 = dot(vec3(_893, _896, _899), vec3(_3512 * _3506, _3512 * _3507, _3512 * _3508));
                        float _4937 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3523 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                        float _3527 = ((_3523 * _3523) * (_3505 + (-1.0))) + 1.0;
                        float _3528 = _3464 * _3504;
                        float _3529 = _3528 * _3528;
                        float _3532 = ((1.0 - _3529) * _3454) + _3529;
                        float _4948 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3533 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3534 = 1.0 - _3504;
                        float _3544 = (0.5 / (((_3533 * ((_3519 * _3534) + _3504)) + 9.9999999392252902907785028219223e-09) + (((_3533 * _3534) + _3504) * _3519))) * _3533;
                        float _4959 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3555 = (((_3505 * 3.1415927410125732421875) * (isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0)))) / ((_3527 * _3527) * ((_3471 * 2.1991131305694580078125) + 3.141590118408203125))) * _3460;
                        _3308 = (_3475 * _3423.x) + _3381;
                        _3309 = (_3475 * _3423.y) + _3382;
                        _3310 = (_3475 * _3423.z) + _3383;
                        _3305 = (_3555 * _3440.x) + _3378;
                        _3306 = (_3555 * _3440.y) + _3379;
                        _3307 = (_3555 * _3440.z) + _3380;
                        if (_3385 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3378 = _3305;
                            _3379 = _3306;
                            _3380 = _3307;
                            _3381 = _3308;
                            _3382 = _3309;
                            _3383 = _3310;
                            _3384 = _3385;
                        }
                    }
                    frontier_phi_71_pred = _3310;
                    frontier_phi_71_pred_1 = _3309;
                    frontier_phi_71_pred_2 = _3308;
                    frontier_phi_71_pred_3 = _3307;
                    frontier_phi_71_pred_4 = _3306;
                    frontier_phi_71_pred_5 = _3305;
                }
                _3091 = frontier_phi_71_pred;
                _3089 = frontier_phi_71_pred_1;
                _3087 = frontier_phi_71_pred_2;
                _3085 = frontier_phi_71_pred_3;
                _3083 = frontier_phi_71_pred_4;
                _3081 = frontier_phi_71_pred_5;
                uint _3240 = _3239 + 1u;
                if (_3240 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3233 = _3081;
                    _3234 = _3083;
                    _3235 = _3085;
                    _3236 = _3087;
                    _3237 = _3089;
                    _3238 = _3091;
                    _3239 = _3240;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
            _3088 = _3089;
            _3090 = _3091;
        }
        uvec4 _3094 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3095 = _3094.z;
        uint _3097 = (_3095 >> 8u) & 15u;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        if (((4294967295u << _3097) & _3000) == 0u)
        {
            _3201 = _3080;
            _3203 = _3082;
            _3205 = _3084;
            _3207 = _3086;
            _3209 = _3088;
            _3211 = _3090;
        }
        else
        {
            float _3226 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
            float _3227 = _3226 * _2059;
            float _3228 = _3226 * _2060;
            float _3229 = _3226 * _2061;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3097 < ((_3095 >> 12u) & 15u))
            {
                float _3202;
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3212;
                float _3361 = _3080;
                float _3362 = _3082;
                float _3363 = _3084;
                float _3364 = _3086;
                float _3365 = _3088;
                float _3366 = _3090;
                uint _3367 = _3097;
                uint _3376;
                bool _3377;
                for (;;)
                {
                    _3376 = texelFetch(g_lightClassification, int((((_2994 << 5u) + (_2980 << 9u)) + (_3367 << 2u)) >> 2u)).x;
                    _3377 = _3376 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3377)
                    {
                        frontier_phi_82_pred = _3366;
                        frontier_phi_82_pred_1 = _3365;
                        frontier_phi_82_pred_2 = _3364;
                        frontier_phi_82_pred_3 = _3363;
                        frontier_phi_82_pred_4 = _3362;
                        frontier_phi_82_pred_5 = _3361;
                    }
                    else
                    {
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3582 = _3361;
                        float _3583 = _3362;
                        float _3584 = _3363;
                        float _3585 = _3364;
                        float _3586 = _3365;
                        float _3587 = _3366;
                        uint _3588 = _3376;
                        uint _3589;
                        vec4 _3614;
                        float _3615;
                        vec4 _3630;
                        vec3 _3642;
                        vec4 _3657;
                        vec4 _3673;
                        float _3719;
                        bool _3720;
                        for (;;)
                        {
                            uint _3599 = ((_3367 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3588));
                            _3589 = (_3588 + 4294967295u) & _3588;
                            uint _3601 = _3599 * 40u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            _3615 = _3614.w;
                            uint _3617 = (_3599 * 40u) + 4u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3599 * 40u) + 8u;
                            _3642 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x));
                            uint _3644 = (_3599 * 40u) + 16u;
                            _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3660 = (_3599 * 40u) + 20u;
                            _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            uint _3675 = (_3599 * 40u) + 24u;
                            vec4 _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3694 = (_3599 * 40u) + 28u;
                            vec4 _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            _3719 = fma(_2061, _3707.z, fma(_2060, _3707.y, _3707.x * _2059)) + _3707.w;
                            _3720 = !((fma(_2061, _3688.z, fma(_2060, _3688.y, _3688.x * _2059)) + _3688.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3720)
                            {
                                float _3747 = _3614.x - _2059;
                                float _3748 = _3614.y - _2060;
                                float _3749 = _3614.z - _2061;
                                float _3750 = dot(vec3(_3747, _3748, _3749), vec3(_3747, _3748, _3749));
                                float _3753 = inversesqrt(_3750);
                                float _3754 = _3753 * _3747;
                                float _3755 = _3753 * _3748;
                                float _3756 = _3753 * _3749;
                                float _3760 = 1.0 - (_3750 / (_3615 * _3615));
                                float _4970 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3761 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3765 = sqrt(_3750) * _3630.w;
                                float _3767 = 1.39999997615814208984375 / (_3765 + 1.39999997615814208984375);
                                float _3768 = _3767 * _3767;
                                float _3771 = ((1.0 - _3768) * dot(vec3(_3754, _3755, _3756), vec3(_893, _896, _899))) + _3768;
                                float _3774 = _3765 * _3765;
                                float _3778 = (fma(_2061, _3657.z, fma(_2060, _3657.y, _3657.x * _2059)) + _3657.w) / _3719;
                                float _3779 = (fma(_2061, _3673.z, fma(_2060, _3673.y, _3673.x * _2059)) + _3673.w) / _3719;
                                float _3783 = 1.0 - dot(vec2(_3778, _3779), vec2(_3778, _3779));
                                float _4986 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3784 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3785 = _3784 * (((isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0))) * _3761) / ((_3774 * 0.699999988079071044921875) + 1.0));
                                float _3797 = exp2(log2(1.0 / ((_3774 * 3.5) + 5.0)) * 0.25);
                                float _3798 = 1.0 - _968;
                                float _3805 = sqrt(1.0 - ((1.0 - (_3798 * _3798)) * (1.0 - (_3797 * _3797))));
                                float _3806 = _3805 * _3805;
                                float _3807 = _3806 * _3806;
                                float _3808 = _3754 - _3227;
                                float _3809 = _3755 - _3228;
                                float _3810 = _3756 - _3229;
                                float _3814 = inversesqrt(dot(vec3(_3808, _3809, _3810), vec3(_3808, _3809, _3810)));
                                float _3818 = dot(vec3(_893, _896, _899), vec3((-0.0) - _3227, (-0.0) - _3228, (-0.0) - _3229));
                                float _4997 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3821 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3822 = dot(vec3(_893, _896, _899), vec3(_3814 * _3808, _3814 * _3809, _3814 * _3810));
                                float _5008 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3825 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3829 = ((_3825 * _3825) * (_3807 + (-1.0))) + 1.0;
                                float _3830 = _3767 * _3806;
                                float _3831 = _3830 * _3830;
                                float _3837 = ((1.0 - _3831) * dot(vec3(_893, _896, _899), vec3(_3754, _3755, _3756))) + _3831;
                                float _5019 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3838 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3839 = 1.0 - _3806;
                                float _3849 = (0.5 / (((_3838 * ((_3821 * _3839) + _3806)) + 9.9999999392252902907785028219223e-09) + (((_3838 * _3839) + _3806) * _3821))) * _3838;
                                float _5030 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3859 = (_3784 * _3761) * (((_3807 * 3.1415927410125732421875) * (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0)))) / ((_3829 * _3829) * ((_3774 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3785 * _3630.z;
                                frontier_phi_88_pred_1 = _3785 * _3630.y;
                                frontier_phi_88_pred_2 = _3785 * _3630.x;
                                frontier_phi_88_pred_3 = _3859 * _3642.z;
                                frontier_phi_88_pred_4 = _3859 * _3642.y;
                                frontier_phi_88_pred_5 = _3859 * _3642.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3868 = frontier_phi_88_pred;
                            _3867 = frontier_phi_88_pred_1;
                            _3866 = frontier_phi_88_pred_2;
                            _3865 = frontier_phi_88_pred_3;
                            _3864 = frontier_phi_88_pred_4;
                            _3863 = frontier_phi_88_pred_5;
                            _3572 = _3866 + _3585;
                            _3573 = _3867 + _3586;
                            _3574 = _3868 + _3587;
                            _3569 = _3863 + _3582;
                            _3570 = _3864 + _3583;
                            _3571 = _3865 + _3584;
                            if (_3589 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3589;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3574;
                        frontier_phi_82_pred_1 = _3573;
                        frontier_phi_82_pred_2 = _3572;
                        frontier_phi_82_pred_3 = _3571;
                        frontier_phi_82_pred_4 = _3570;
                        frontier_phi_82_pred_5 = _3569;
                    }
                    _3212 = frontier_phi_82_pred;
                    _3210 = frontier_phi_82_pred_1;
                    _3208 = frontier_phi_82_pred_2;
                    _3206 = frontier_phi_82_pred_3;
                    _3204 = frontier_phi_82_pred_4;
                    _3202 = frontier_phi_82_pred_5;
                    uint _3368 = _3367 + 1u;
                    if (_3368 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3361 = _3202;
                        _3362 = _3204;
                        _3363 = _3206;
                        _3364 = _3208;
                        _3365 = _3210;
                        _3366 = _3212;
                        _3367 = _3368;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3208;
                frontier_phi_63_64_ladder_1 = _3212;
                frontier_phi_63_64_ladder_2 = _3210;
                frontier_phi_63_64_ladder_3 = _3206;
                frontier_phi_63_64_ladder_4 = _3204;
                frontier_phi_63_64_ladder_5 = _3202;
            }
            else
            {
                frontier_phi_63_64_ladder = _3086;
                frontier_phi_63_64_ladder_1 = _3090;
                frontier_phi_63_64_ladder_2 = _3088;
                frontier_phi_63_64_ladder_3 = _3084;
                frontier_phi_63_64_ladder_4 = _3082;
                frontier_phi_63_64_ladder_5 = _3080;
            }
            _3201 = frontier_phi_63_64_ladder_5;
            _3203 = frontier_phi_63_64_ladder_4;
            _3205 = frontier_phi_63_64_ladder_3;
            _3207 = frontier_phi_63_64_ladder;
            _3209 = frontier_phi_63_64_ladder_2;
            _3211 = frontier_phi_63_64_ladder_1;
        }
        float _3216 = isnan(1.0) ? _952 : (isnan(_952) ? 1.0 : min(_952, 1.0));
        _3013 = (_3216 * _3207) + _2525;
        _3015 = (_3216 * _3209) + _2527;
        _3017 = (_3216 * _3211) + _2529;
        _3019 = ((_3201 * _936) * _3216) + _2863;
        _3021 = ((_3203 * _938) * _3216) + _2865;
        _3023 = ((_3205 * _939) * _3216) + _2867;
    }
    else
    {
        _3013 = _2525;
        _3015 = _2527;
        _3017 = _2529;
        _3019 = _2863;
        _3021 = _2865;
        _3023 = _2867;
    }
    float _5046 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _5057 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _5068 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _3040 = ((isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3013 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _952))) + ((_3019 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1791)) * cbPerFrame._m0[3u].x);
    float _3041 = ((isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0))) * (_3015 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _952))) + ((_3021 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1791)) * cbPerFrame._m0[3u].x);
    float _3042 = ((isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3017 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _952))) + ((_3023 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1791)) * cbPerFrame._m0[3u].x);
    uint _3043 = _259 + 6u;
    float _3051 = _874 / cbSceneParam._m0[86u].x;
    float _3052 = _875 / cbSceneParam._m0[86u].y;
    vec4 _3066 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3051, _3052, (log2((isnan(cbSceneParam._m0[77u].w) ? _797 : (isnan(_797) ? cbSceneParam._m0[77u].w : min(_797, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3068 = _3066.x;
    float _3069 = _3066.y;
    float _3070 = _3066.z;
    float _3071 = _3066.w;
    float _3143;
    float _3145;
    float _3147;
    float _3149;
    if (_797 > cbSceneParam._m0[78u].w)
    {
        float _3105 = isnan(_797) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _797 : min(cbSceneParam._m0[80u].w, _797));
        float _3106 = _3105 / _797;
        float _3117 = _3106 * _847;
        float _3118 = _848 * _3106;
        float _3119 = (-0.0) - _3118;
        float _3121 = _3106 * _849;
        float _3123 = (cbSceneParam._m0[77u].w * _3119) / _3105;
        float _3124 = _3123 + cbSceneParam._m0[79u].w;
        float _3125 = cbSceneParam._m0[79u].w - _3118;
        float _3131 = sqrt(((_3117 * _3117) + (_3118 * _3118)) + (_3121 * _3121));
        float _3134 = (1.0 - (cbSceneParam._m0[77u].w / _3105)) * _3131;
        float _3139 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3141 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3318;
        if (abs((_3119 - _3123) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3318 = ((((_3124 > 0.0) ? exp2(_3139 * _3124) : (2.0 - exp2(_3141 * _3124))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3134;
        }
        else
        {
            float _3262 = 1.0 / cbSceneParam._m0[80u].x;
            float _3263 = isnan(_3125) ? _3124 : (isnan(_3124) ? _3125 : max(_3124, _3125));
            float _3264 = isnan(_3125) ? _3124 : (isnan(_3124) ? _3125 : min(_3124, _3125));
            float _3273 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : min(_3263, 0.0));
            float _3274 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : min(_3264, 0.0));
            _3318 = ((abs(_3131 / _3119) * cbSceneParam._m0[80u].y) * ((((_3273 - _3274) * 2.0) - ((exp2(_3139 * (isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0)))) - exp2(_3139 * (isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0))))) * _3262)) - ((exp2(_3141 * _3273) - exp2(_3141 * _3274)) * _3262))) + (_3134 * cbSceneParam._m0[80u].z);
        }
        vec4 _3320 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3051, _3052, 1.0), 0.0);
        float _3329 = exp2((_3318 * (-1.44269502162933349609375)) * (1.0 - _3320.w));
        float _3330 = log2(_3329);
        float _3346 = log2(_3071);
        _3143 = (exp2(_3346 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3330 * cbSceneParam._m0[78u].x)) * _3320.x) / cbSceneParam._m0[78u].x)) + _3068;
        _3145 = (exp2(_3346 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3330 * cbSceneParam._m0[78u].y)) * _3320.y) / cbSceneParam._m0[78u].y)) + _3069;
        _3147 = (exp2(_3346 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3330 * cbSceneParam._m0[78u].z)) * _3320.z) / cbSceneParam._m0[78u].z)) + _3070;
        _3149 = _3329 * _3071;
    }
    else
    {
        _3143 = _3068;
        _3145 = _3069;
        _3147 = _3070;
        _3149 = _3071;
    }
    bool _3356;
    vec4 _3159;
    vec4 _3181;
    float _3183;
    float _3187;
    float _3188;
    float _3189;
    float _3190;
    bool _3200;
    for (;;)
    {
        _3159 = cbMatDynParam._m0[0u];
        float _3161 = roundEven(_3159.y);
        bool _3162 = _3161 == 3.0;
        float _3163 = log2(_3149);
        float _3170 = exp2(_3163 * cbSceneParam._m0[78u].x) * _3040;
        float _3171 = exp2(_3163 * cbSceneParam._m0[78u].y) * _3041;
        float _3172 = exp2(_3163 * cbSceneParam._m0[78u].z) * _3042;
        float _3179 = _863 + (-0.5);
        _3181 = cbMtdParam._m0[1u];
        _3183 = _3181.y * _3179;
        float _3186 = (_3161 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3187 = _3186 * (_3162 ? _3170 : (_3170 + (cbSceneParam._m0[72u].w * _3143)));
        _3188 = _3186 * (_3162 ? _3171 : (_3171 + (cbSceneParam._m0[72u].w * _3145)));
        _3189 = _3186 * (_3162 ? _3172 : (_3172 + (cbSceneParam._m0[72u].w * _3147)));
        _3190 = _3179 * 0.999000012874603271484375;
        _3200 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3200)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3190) < 0.5)
            {
                _3356 = true;
                break;
            }
        }
        uint _3297 = _912 + uint(_3159.w);
        if ((cbInstanceData._m0[_3297].w < 1.0) && ((cbInstanceData._m0[_3297].w + _3190) < 0.5))
        {
            _3356 = true;
            break;
        }
        if ((_3183 + 1.0) < _3181.x)
        {
            _3356 = true;
            break;
        }
        _3356 = false;
        break;
    }
    float _3560;
    if (_3356)
    {
        discard_state = true;
        _3560 = 0.0;
    }
    else
    {
        _3560 = cbInstanceData._m0[_3043].w;
    }
    SV_Target.x = _3187;
    SV_Target.y = _3188;
    SV_Target.z = _3189;
    SV_Target.w = _3560;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3043].w;
    discard_exit();
}


