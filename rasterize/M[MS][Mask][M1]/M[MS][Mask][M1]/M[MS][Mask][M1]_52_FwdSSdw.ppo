#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1245;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _306.x * cbMtdParam._m0[11u].x;
    float _312 = _306.y * cbMtdParam._m0[11u].y;
    float _313 = _306.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _390 = _388.x;
    float _402 = dot(vec4(_390, _388.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _419 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _352.x) * 2.0) - ((((_390 - _402) * cbMtdParam._m0[23u].w) + _402) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3597 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _427 = (_420 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _428 = (_420 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _429 = (_420 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _446 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _466 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _468 = _466.x;
    float _478 = dot(vec4(_468, _466.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _492 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _352.y) * 2.0) - ((((_468 - _478) * cbMtdParam._m0[23u].w) + _478) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3608 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _493 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _506 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _282.x) * ((_493 * ((_446.x * cbMtdParam._m0[13u].x) - _427)) + _427);
    float _509 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _282.y) * ((_493 * ((_446.y * cbMtdParam._m0[13u].y) - _428)) + _428);
    float _512 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _282.z) * ((_493 * ((_446.z * cbMtdParam._m0[13u].z) - _429)) + _429);
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _544 = _542.x;
    float _545 = _542.y;
    float _546 = _542.z;
    float _553 = ((_525.x - _544) * _420) + _544;
    float _554 = ((_525.y - _545) * _420) + _545;
    float _555 = ((_525.z - _546) * _420) + _546;
    vec4 _567 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _580 = ((_567.z - _555) * _493) + _555;
    float _583 = ((((_567.x - _553) * _493) + _553) * 2.0) + (-1.0);
    float _585 = ((((_567.y - _554) * _493) + _554) * 2.0) + (-1.0);
    float _586 = dot(vec2(_583, _585), vec2(_583, _585));
    float _3619 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _591 = sqrt(1.0 - (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _617 = (((_605.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _583;
    float _618 = (((_605.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _585;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _646 = _644.x;
    float _663 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _262) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w)).x - _646) * _420) + _646;
    float _681 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _262) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _263) + cbTextureTilingScale._m0[21u].w)).x - _663) * _493) + _663;
    float _685 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _681) * cbMtdParam._m0[19u].z) + _681;
    float _689 = (cbMtdParam._m0[19u].w * (_605.z - _580)) + _580;
    float _691 = cbMtdParam._m0[22u].x + _605.w;
    float _694 = fma(_591, _229 * NORMAL.x, fma(_618, _236 * TANGENT.x, (_222 * _214) * _617));
    float _697 = fma(_591, _229 * NORMAL.y, fma(_618, _236 * TANGENT.y, (_222 * _215) * _617));
    float _700 = fma(_591, _229 * NORMAL.z, fma(_618, _236 * TANGENT.z, (_222 * _216) * _617));
    float _704 = inversesqrt(dot(vec3(_694, _697, _700), vec3(_694, _697, _700)));
    float _705 = _704 * _694;
    float _706 = _704 * _697;
    float _707 = _704 * _700;
    float _3630 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _708 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3652 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3663 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3674 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3685 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _713 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _727 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _778 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _768);
    float _779 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _768);
    float _780 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _768);
    float _784 = inversesqrt(dot(vec3(_778, _779, _780), vec3(_778, _779, _780)));
    float _785 = _778 * _784;
    float _786 = _779 * _784;
    float _787 = _780 * _784;
    float _793 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _794 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _812 = fma(_707, cbSceneParam._m0[5u].z, fma(_706, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _705));
    float _815 = fma(_707, cbSceneParam._m0[6u].z, fma(_706, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _705));
    float _818 = fma(_707, cbSceneParam._m0[7u].z, fma(_706, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _705));
    uint _832 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _838 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_832].x;
    float _839 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * cbInstanceData._m0[_832].y;
    float _840 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * cbInstanceData._m0[_832].z;
    float _3696 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _844 = 1.0 - _713;
    float _845 = _841 * _844;
    float _846 = _842 * _844;
    float _847 = _843 * _844;
    float _852 = (_841 + (-0.039999999105930328369140625)) * _713;
    float _853 = (_842 + (-0.039999999105930328369140625)) * _713;
    float _854 = (_843 + (-0.039999999105930328369140625)) * _713;
    float _855 = _852 + 0.039999999105930328369140625;
    float _857 = _853 + 0.039999999105930328369140625;
    float _858 = _854 + 0.039999999105930328369140625;
    vec4 _867 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _793, cbSceneParam._m0[86u].y * _794));
    float _871 = ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * TEXCOORD_5.w) * _867.x;
    float _872 = dot(vec3(_705, _706, _707), vec3(_785, _786, _787));
    float _875 = _872 * 2.0;
    float _879 = (_875 * _705) - _785;
    float _880 = (_875 * _706) - _786;
    float _881 = (_875 * _707) - _787;
    float _885 = abs(dot(vec3(_785, _786, _787), vec3(_705, _706, _707)));
    float _3729 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _887 = sqrt(_708);
    float _900 = exp2((_887 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_887 * 3.0));
    float _906 = (1.0 - _900) * ((_887 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _907 = _900 * _887;
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1244;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _969 = fma(_943, cbModelParam._m0[26u].z, fma(_939, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _935));
        float _973 = fma(_943, cbModelParam._m0[27u].z, fma(_939, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _935));
        float _977 = fma(_943, cbModelParam._m0[28u].z, fma(_939, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _935));
        float _1002 = _935 + _705;
        float _1003 = _939 + _706;
        float _1004 = _943 + _707;
        float _1014 = fma(_1004, cbModelParam._m0[26u].z, fma(_1003, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1002)) - _969;
        float _1015 = fma(_1004, cbModelParam._m0[27u].z, fma(_1003, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1002)) - _973;
        float _1016 = fma(_1004, cbModelParam._m0[28u].z, fma(_1003, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1002)) - _977;
        float _1020 = inversesqrt(dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016)));
        float _1033 = ((_1020 * _1014) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_969 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1020 * _1015) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_973 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1020 * _1016) / cbModelParam._m0[34u].z) + ((((((_977 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        float _1072 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1038.x + (-0.5));
        float _1074 = _1072 * (_1038.y + (-0.5));
        float _1075 = _1072 * (_1038.z + (-0.5));
        float _1082 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1045.x + (-0.5));
        float _1084 = _1082 * (_1045.y + (-0.5));
        float _1085 = _1082 * (_1045.z + (-0.5));
        float _1092 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1052.x + (-0.5));
        float _1094 = _1092 * (_1052.y + (-0.5));
        float _1095 = _1092 * (_1052.z + (-0.5));
        float _1102 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1059.x + (-0.5));
        float _1104 = _1102 * (_1059.y + (-0.5));
        float _1105 = _1102 * (_1059.z + (-0.5));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = _1073 * 0.5;
        float _1110 = _1083 * 0.5;
        float _1111 = _1093 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1126 = (dot(vec3(_705, _706, _707), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1136 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3777 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1138 + 1.0))) + _1143) * _1106;
        float _1153 = _1074 * 0.5;
        float _1154 = _1084 * 0.5;
        float _1155 = _1094 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_705, _706, _707), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3810 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1180 + 1.0))) + _1185) * _1107;
        float _1195 = _1075 * 0.5;
        float _1196 = _1085 * 0.5;
        float _1197 = _1095 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_705, _706, _707), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3843 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1222 + 1.0))) + _1227) * _1108;
        _1244 = _1075;
        _1246 = _1074;
        _1247 = _1073;
        _1248 = _1085;
        _1249 = _1084;
        _1250 = _1083;
        _1251 = _1095;
        _1252 = _1094;
        _1253 = _1093;
        _1254 = _1108;
        _1255 = _1107;
        _1256 = _1106;
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
    }
    else
    {
        _1244 = _1245;
        _1246 = _1245;
        _1247 = _1245;
        _1248 = _1245;
        _1249 = _1245;
        _1250 = _1245;
        _1251 = _1245;
        _1252 = _1245;
        _1253 = _1245;
        _1254 = _1245;
        _1255 = _1245;
        _1256 = _1245;
        _1257 = 0.0;
        _1258 = 0.0;
        _1259 = 0.0;
    }
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1283 = fma(_943, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _935));
        float _1287 = fma(_943, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _935));
        float _1291 = fma(_943, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _935));
        float _1314 = _935 + _705;
        float _1315 = _939 + _706;
        float _1316 = _943 + _707;
        float _1326 = fma(_1316, cbModelParam._m0[30u].z, fma(_1315, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1314)) - _1283;
        float _1327 = fma(_1316, cbModelParam._m0[31u].z, fma(_1315, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1314)) - _1287;
        float _1328 = fma(_1316, cbModelParam._m0[32u].z, fma(_1315, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1314)) - _1291;
        float _1332 = inversesqrt(dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328)));
        float _1345 = ((_1332 * _1326) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1283 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1332 * _1327) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1287 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1332 * _1328) / cbModelParam._m0[35u].z) + ((((((_1291 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        float _1382 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1349.x + (-0.5));
        float _1384 = _1382 * (_1349.y + (-0.5));
        float _1385 = _1382 * (_1349.z + (-0.5));
        float _1392 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1356.x + (-0.5));
        float _1394 = _1392 * (_1356.y + (-0.5));
        float _1395 = _1392 * (_1356.z + (-0.5));
        float _1402 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1363.x + (-0.5));
        float _1404 = _1402 * (_1363.y + (-0.5));
        float _1405 = _1402 * (_1363.z + (-0.5));
        float _1412 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1370.x + (-0.5));
        float _1414 = _1412 * (_1370.y + (-0.5));
        float _1415 = _1412 * (_1370.z + (-0.5));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = _1383 * 0.5;
        float _1420 = _1393 * 0.5;
        float _1421 = _1403 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_705, _706, _707), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _3906 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1446 + 1.0))) + _1451) * _1416;
        float _1461 = _1384 * 0.5;
        float _1462 = _1394 * 0.5;
        float _1463 = _1404 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_705, _706, _707), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _3939 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1488 + 1.0))) + _1493) * _1417;
        float _1503 = _1385 * 0.5;
        float _1504 = _1395 * 0.5;
        float _1505 = _1405 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_705, _706, _707), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _3972 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1530 + 1.0))) + _1535) * _1418;
        _1552 = _1385;
        _1553 = _1384;
        _1554 = _1383;
        _1555 = _1395;
        _1556 = _1394;
        _1557 = _1393;
        _1558 = _1405;
        _1559 = _1404;
        _1560 = _1403;
        _1561 = _1418;
        _1562 = _1417;
        _1563 = _1416;
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
    }
    else
    {
        _1552 = _1245;
        _1553 = _1245;
        _1554 = _1245;
        _1555 = _1245;
        _1556 = _1245;
        _1557 = _1245;
        _1558 = _1245;
        _1559 = _1245;
        _1560 = _1245;
        _1561 = _1245;
        _1562 = _1245;
        _1563 = _1245;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1257)) + _1257;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1258)) + _1258;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1259)) + _1259;
    float _1599 = fma(_1578, cbSceneParam._m0[89u].z, fma(_1577, cbSceneParam._m0[89u].y, _1576 * cbSceneParam._m0[89u].x));
    float _1602 = fma(_1578, cbSceneParam._m0[90u].z, fma(_1577, cbSceneParam._m0[90u].y, _1576 * cbSceneParam._m0[90u].x));
    float _1605 = fma(_1578, cbSceneParam._m0[91u].z, fma(_1577, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1576));
    float _1620 = _879 * 0.5;
    float _1621 = _880 * 0.5;
    float _1622 = _881 * 0.5;
    float _1623 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1626 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1629 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1663;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1636 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1244, _1248, _1251, _1254));
        float _1640 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1246, _1249, _1252, _1255));
        float _1644 = dot(vec4(_1620, _1621, _1622, 1.0), vec4(_1247, _1250, _1253, _1256));
        float _1651 = dot(vec4(cbModelParam._m0[39u]), vec4(_1620, _1621, _1622, 1.0));
        _1663 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1651) ? 0.0 : (isnan(0.0) ? _1651 : max(0.0, _1651))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1663 = 1.0;
    }
    float _1674;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1665 = dot(vec4(cbModelParam._m0[40u]), vec4(_1620, _1621, _1622, 1.0));
        _1674 = dot(vec3(isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1674 = 1.0;
    }
    float _1678 = (_1674 * cbModelParam._m0[1u].x) + (_1663 * (1.0 - cbModelParam._m0[1u].x));
    float _1688 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _708);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1688 : min(cbModelParam._m0[25u].z, _1688));
    float _1771;
    float _1773;
    float _1775;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1738 = fma(_943, cbModelParam._m0[13u].z, fma(_939, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _935)) + cbModelParam._m0[13u].w;
        float _1742 = fma(_943, cbModelParam._m0[14u].z, fma(_939, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _935)) + cbModelParam._m0[14u].w;
        float _1746 = fma(_943, cbModelParam._m0[15u].z, fma(_939, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _935)) + cbModelParam._m0[15u].w;
        float _1749 = fma(_881, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879));
        float _1752 = fma(_881, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879));
        float _1755 = fma(_881, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879));
        float _1783;
        if (_1749 > 0.0)
        {
            _1783 = abs((1.0 - _1738) / _1749);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1738 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1783 = frontier_phi_14_12_ladder;
        }
        float _2007;
        if (_1752 > 0.0)
        {
            _2007 = abs((1.0 - _1742) / _1752);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1742 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2007 = frontier_phi_23_19_ladder;
        }
        float _2264;
        if (_1755 > 0.0)
        {
            _2264 = abs((1.0 - _1746) / _1755);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1746 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2264 = frontier_phi_35_30_ladder;
        }
        float _2266 = isnan(_2007) ? _1783 : (isnan(_1783) ? _2007 : min(_1783, _2007));
        float _2267 = isnan(_2264) ? _2266 : (isnan(_2266) ? _2264 : min(_2266, _2264));
        float _2271 = (_2267 * _1749) + _1738;
        float _2272 = (_2267 * _1752) + _1742;
        float _2273 = (_2267 * _1755) + _1746;
        float _2274 = _2267 * 9.9999997473787516355514526367188e-05;
        float _2276 = (-1.0) - _2274;
        float _2278 = _2274 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2273 > _2278) || ((_2273 < _2276) || ((_2272 > _2278) || ((_2272 < _2276) || ((_2271 < _2276) || (_2271 > _2278))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2273, cbModelParam._m0[9u].z, fma(_2272, cbModelParam._m0[9u].y, _2271 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2273, cbModelParam._m0[10u].z, fma(_2272, cbModelParam._m0[10u].y, _2271 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2273, cbModelParam._m0[11u].z, fma(_2272, cbModelParam._m0[11u].y, _2271 * cbModelParam._m0[11u].x))), _1689);
            frontier_phi_13_35_ladder = _2401.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2401.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2401.x * cbModelParam._m0[1u].y;
        }
        _1771 = frontier_phi_13_35_ladder_2;
        _1773 = frontier_phi_13_35_ladder_1;
        _1775 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1759 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_879, _880, _881), _1689);
        _1771 = _1759.x * cbModelParam._m0[1u].y;
        _1773 = _1759.y * cbModelParam._m0[1u].y;
        _1775 = _1759.z * cbModelParam._m0[1u].y;
    }
    float _1779 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _708);
    float _1780 = isnan(_1779) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1779 : min(cbModelParam._m0[25u].w, _1779));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_943, cbModelParam._m0[21u].z, fma(_939, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _935)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_943, cbModelParam._m0[22u].z, fma(_939, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _935)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_943, cbModelParam._m0[23u].z, fma(_939, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _935)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_881, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879));
        float _1848 = fma(_881, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879));
        float _1851 = fma(_881, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879));
        float _2012;
        if (_1845 > 0.0)
        {
            _2012 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2012 = frontier_phi_25_21_ladder;
        }
        float _2291;
        if (_1848 > 0.0)
        {
            _2291 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2291 = frontier_phi_37_32_ladder;
        }
        float _2504;
        if (_1851 > 0.0)
        {
            _2504 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2504 = frontier_phi_46_43_ladder;
        }
        float _2506 = isnan(_2291) ? _2012 : (isnan(_2012) ? _2291 : min(_2012, _2291));
        float _2507 = isnan(_2504) ? _2506 : (isnan(_2506) ? _2504 : min(_2506, _2504));
        float _2511 = (_2507 * _1845) + _1834;
        float _2512 = (_2507 * _1848) + _1838;
        float _2513 = (_2507 * _1851) + _1842;
        float _2514 = _2507 * 9.9999997473787516355514526367188e-05;
        float _2515 = (-1.0) - _2514;
        float _2517 = _2514 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2513 > _2517) || ((_2513 < _2515) || ((_2512 > _2517) || ((_2512 < _2515) || ((_2511 < _2515) || (_2511 > _2517))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2513, cbModelParam._m0[17u].z, fma(_2512, cbModelParam._m0[17u].y, _2511 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2513, cbModelParam._m0[18u].z, fma(_2512, cbModelParam._m0[18u].y, _2511 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2513, cbModelParam._m0[19u].z, fma(_2512, cbModelParam._m0[19u].y, _2511 * cbModelParam._m0[19u].x))), _1780);
            frontier_phi_22_46_ladder = _2712.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2712.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2712.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_22_46_ladder_2;
        _1872 = frontier_phi_22_46_ladder_1;
        _1874 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_879, _880, _881), _1780);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1887 = (((_906 * _855) + _907) * _871) * ((cbModelParam._m0[1u].w * (_1870 - _1771)) + _1771);
    float _1889 = (((_906 * _857) + _907) * _871) * ((cbModelParam._m0[1u].w * (_1872 - _1773)) + _1773);
    float _1891 = (((_906 * _858) + _907) * _871) * ((cbModelParam._m0[1u].w * (_1874 - _1775)) + _1775);
    float _1894 = fma(_1891, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1897 = fma(_1891, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1900 = fma(_1891, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    vec4 _1908 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_793, _794));
    float _1910 = _1908.w;
    float _1922 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1910);
    float _1923 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1910);
    float _1924 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1910);
    uvec4 _1928 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1930 = _1928.x * 14u;
    uint _1931 = _1930 + 13u;
    float _1938 = _871 + (-1.0);
    float _1943 = (cbLight._m0[_1931].x * _1938) + 1.0;
    float _1944 = (cbLight._m0[_1931].y * _1938) + 1.0;
    float _1945 = (cbLight._m0[_1931].z * _1938) + 1.0;
    float _1946 = (cbLight._m0[_1931].w * _1938) + 1.0;
    uint _1947 = _1930 + 5u;
    float _1953 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1957 = _1930 + 4u;
    float _1966 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1970 = _1930 | 1u;
    float _1981 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_705, _706, _707));
    float _1984 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_705, _706, _707));
    float _4108 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _4119 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1989 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 0.3183098733425140380859375;
    float _1991 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.3183098733425140380859375;
    float _1998 = ((cbLight._m0[_1947].x * _1953) * _1991) + (((cbLight._m0[_1957].x * _1922) * _1966) * _1989);
    float _1999 = ((_1953 * cbLight._m0[_1947].y) * _1991) + (((cbLight._m0[_1957].y * _1923) * _1966) * _1989);
    float _2000 = ((_1953 * cbLight._m0[_1947].z) * _1991) + (((cbLight._m0[_1957].z * _1924) * _1966) * _1989);
    uvec4 _2004 = floatBitsToUint(cbLight._m0[_1930 + 12u]);
    bool _2006 = _2004.x == 0u;
    float _2017;
    float _2019;
    float _2021;
    if (_2006)
    {
        _2017 = _1998;
        _2019 = _1999;
        _2021 = _2000;
    }
    else
    {
        uint _2025 = _1930 + 6u;
        float _2041 = (dot(vec3(cbLight._m0[_1930 + 2u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2042 = _2041 * _2041;
        float _4130 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2043 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2044 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2017 = (((cbLight._m0[_2025].x * 0.3183098733425140380859375) * _2043) * _2044) + _1998;
        _2019 = (((cbLight._m0[_2025].y * 0.3183098733425140380859375) * _2043) * _2044) + _1999;
        _2021 = (((cbLight._m0[_2025].z * 0.3183098733425140380859375) * _2043) * _2044) + _2000;
    }
    bool _2024 = _2004.y == 0u;
    float _2062;
    float _2064;
    float _2066;
    if (_2024)
    {
        _2062 = _2017;
        _2064 = _2019;
        _2066 = _2021;
    }
    else
    {
        uint _2235 = _1930 + 7u;
        float _2251 = (dot(vec3(cbLight._m0[_1930 + 3u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2252 = _2251 * _2251;
        float _4146 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2253 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2254 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2062 = (((cbLight._m0[_2235].x * 0.3183098733425140380859375) * _2253) * _2254) + _2017;
        _2064 = (((cbLight._m0[_2235].y * 0.3183098733425140380859375) * _2253) * _2254) + _2019;
        _2066 = (((cbLight._m0[_2235].z * 0.3183098733425140380859375) * _2253) * _2254) + _2021;
    }
    uint _2069 = _1930 + 8u;
    float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _708) * 0.949999988079071044921875);
    float _2083 = _2082 * _2082;
    float _2084 = cbLight._m0[_1930].x + _785;
    float _2085 = cbLight._m0[_1930].y + _786;
    float _2086 = cbLight._m0[_1930].z + _787;
    float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
    float _2091 = _2090 * _2084;
    float _2092 = _2090 * _2085;
    float _2093 = _2090 * _2086;
    float _2094 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_1930].xyz));
    float _4162 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _4173 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _2098 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2099 = dot(vec3(_705, _706, _707), vec3(_2091, _2092, _2093));
    float _4184 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2103 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2091, _2092, _2093));
    float _4195 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2107 = _2083 * _2083;
    float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
    float _2119 = exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0);
    float _2120 = 0.959999978542327880859375 - _852;
    float _2122 = 0.959999978542327880859375 - _853;
    float _2123 = 0.959999978542327880859375 - _854;
    float _2130 = 1.0 - _2083;
    float _2141 = (0.5 / (((_2098 * ((_2097 * _2130) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2130) + _2083) * _2097))) * _2097;
    float _4206 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2143 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
    uint _2157 = _1930 + 9u;
    float _2168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _708) * 0.949999988079071044921875);
    float _2169 = _2168 * _2168;
    float _2170 = cbLight._m0[_1970].x + _785;
    float _2171 = cbLight._m0[_1970].y + _786;
    float _2172 = cbLight._m0[_1970].z + _787;
    float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
    float _2177 = _2176 * _2170;
    float _2178 = _2176 * _2171;
    float _2179 = _2176 * _2172;
    float _2180 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_1970].xyz));
    float _4217 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2184 = dot(vec3(_705, _706, _707), vec3(_2177, _2178, _2179));
    float _4228 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _2188 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2177, _2178, _2179));
    float _4239 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2192 = _2169 * _2169;
    float _2196 = ((_2187 * _2187) * (_2192 + (-1.0))) + 1.0;
    float _2203 = exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0);
    float _2210 = 1.0 - _2169;
    float _2220 = (0.5 / (((_2098 * ((_2183 * _2210) + _2169)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2210) + _2169) * _2183))) * _2183;
    float _4250 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2222 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2192 / ((_2196 * _2196) * 3.141590118408203125));
    float _2232 = (((((_2203 * _2120) + _855) * cbLight._m0[_2157].x) * _2222) * _1953) + ((((cbLight._m0[_2069].x * _1922) * ((_2119 * _2120) + _855)) * _2143) * _1966);
    float _2233 = (((((_2203 * _2122) + _857) * cbLight._m0[_2157].y) * _2222) * _1953) + ((((cbLight._m0[_2069].y * _1923) * ((_2119 * _2122) + _857)) * _2143) * _1966);
    float _2234 = (((((_2203 * _2123) + _858) * cbLight._m0[_2157].z) * _2222) * _1953) + ((((cbLight._m0[_2069].z * _1924) * ((_2119 * _2123) + _858)) * _2143) * _1966);
    float _2296;
    float _2298;
    float _2300;
    if (_2006)
    {
        _2296 = _2232;
        _2298 = _2233;
        _2300 = _2234;
    }
    else
    {
        uint _2302 = _1930 + 2u;
        uint _2306 = _1930 + 10u;
        float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _708) * 0.949999988079071044921875);
        float _2321 = _2320 * _2320;
        float _2322 = cbLight._m0[_2302].x + _785;
        float _2323 = cbLight._m0[_2302].y + _786;
        float _2324 = cbLight._m0[_2302].z + _787;
        float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
        float _2329 = _2328 * _2322;
        float _2330 = _2328 * _2323;
        float _2331 = _2328 * _2324;
        float _2332 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2302].xyz));
        float _4261 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2336 = dot(vec3(_705, _706, _707), vec3(_2329, _2330, _2331));
        float _4272 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2340 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2329, _2330, _2331));
        float _4283 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2344 = _2321 * _2321;
        float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
        float _2355 = exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0);
        float _2362 = 1.0 - _2321;
        float _2372 = (0.5 / (((_2098 * ((_2335 * _2362) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2362) + _2321) * _2335))) * _2335;
        float _4294 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2374 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
        float _2375 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2296 = (((((_2355 * _2120) + _855) * cbLight._m0[_2306].x) * _2374) * _2375) + _2232;
        _2298 = (((((_2355 * _2122) + _857) * cbLight._m0[_2306].y) * _2374) * _2375) + _2233;
        _2300 = (((((_2355 * _2123) + _858) * cbLight._m0[_2306].z) * _2374) * _2375) + _2234;
    }
    float _2410;
    float _2412;
    float _2414;
    if (_2024)
    {
        _2410 = _2296;
        _2412 = _2298;
        _2414 = _2300;
    }
    else
    {
        uint _2421 = _1930 + 3u;
        uint _2425 = _1930 + 11u;
        float _2439 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2421].w)) * _708) * 0.949999988079071044921875);
        float _2440 = _2439 * _2439;
        float _2441 = cbLight._m0[_2421].x + _785;
        float _2442 = cbLight._m0[_2421].y + _786;
        float _2443 = cbLight._m0[_2421].z + _787;
        float _2447 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
        float _2448 = _2447 * _2441;
        float _2449 = _2447 * _2442;
        float _2450 = _2447 * _2443;
        float _2451 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2421].xyz));
        float _4310 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2455 = dot(vec3(_705, _706, _707), vec3(_2448, _2449, _2450));
        float _4321 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2458 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2459 = dot(vec3(cbLight._m0[_2421].xyz), vec3(_2448, _2449, _2450));
        float _4332 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2463 = _2440 * _2440;
        float _2467 = ((_2458 * _2458) * (_2463 + (-1.0))) + 1.0;
        float _2474 = exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0);
        float _2481 = 1.0 - _2440;
        float _2491 = (0.5 / (((_2098 * ((_2454 * _2481) + _2440)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2481) + _2440) * _2454))) * _2454;
        float _4343 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2493 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2463 / ((_2467 * _2467) * 3.141590118408203125));
        float _2494 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2410 = (((((_2474 * _2120) + _855) * cbLight._m0[_2425].x) * _2493) * _2494) + _2296;
        _2412 = (((((_2474 * _2122) + _857) * cbLight._m0[_2425].y) * _2493) * _2494) + _2298;
        _2414 = (((((_2474 * _2123) + _858) * cbLight._m0[_2425].z) * _2493) * _2494) + _2300;
    }
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    if (_1928.y == 0u)
    {
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2569;
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2569;
        float _2572 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2569;
        uvec4 _2584 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2585 = _2584.x;
        uint _2596 = uint((float(_2584.y) * floor(float(uint(cbSceneParam._m0[85u].y * _794) / _2585))) + floor(float(uint(cbSceneParam._m0[85u].x * _793) / _2585)));
        float _2606 = (log2(_2572 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2607 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        uint _2610 = uint(isnan(14.0) ? _2607 : (isnan(_2607) ? 14.0 : min(_2607, 14.0)));
        uvec4 _2615 = texelFetch(g_lightClusterGridBuffer, int(((_2610 << 2u) + (_2596 << 6u)) >> 2u));
        uint _2616 = _2615.x;
        uint _2617 = _2584.z;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        if (((((1u << ((_2617 >> 4u) & 15u)) + 4294967295u) & _2616) == 0u) || ((_2617 & 240u) == 0u))
        {
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
        }
        else
        {
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2726;
            float _2728;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            uint _2868 = 0u;
            uint _2877;
            bool _2878;
            for (;;)
            {
                _2877 = texelFetch(g_lightClassification, int((((_2610 << 5u) + (_2596 << 9u)) + (_2868 << 2u)) >> 2u)).x;
                _2878 = _2877 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2878)
                {
                    frontier_phi_61_pred = _2862;
                    frontier_phi_61_pred_1 = _2867;
                    frontier_phi_61_pred_2 = _2866;
                    frontier_phi_61_pred_3 = _2865;
                    frontier_phi_61_pred_4 = _2864;
                    frontier_phi_61_pred_5 = _2863;
                }
                else
                {
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    uint _2992;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2865;
                    _2990 = _2866;
                    _2991 = _2867;
                    _2992 = _2877;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    for (;;)
                    {
                        uint _2996 = uint(findLSB(_2992)) + (_2868 << 5u);
                        uint _2993 = (_2992 + 4294967295u) & _2992;
                        uint _2998 = _2996 * 48u;
                        vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 3u)).x));
                        uint _3018 = (_2996 * 48u) + 4u;
                        vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 3u)).x));
                        uint _3037 = (_2996 * 48u) + 8u;
                        vec3 _3048 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x));
                        float _3052 = _3012.x - _2570;
                        float _3053 = _3012.y - _2571;
                        float _3054 = _3012.z - _2572;
                        float _3055 = dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054));
                        float _3058 = inversesqrt(_3055);
                        float _3059 = _3058 * _3052;
                        float _3060 = _3058 * _3053;
                        float _3061 = _3058 * _3054;
                        float _3062 = dot(vec3(_812, _815, _818), vec3(_3059, _3060, _3061));
                        float _3067 = 1.0 - (_3055 * _3012.w);
                        float _4369 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3068 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3069 = sqrt(_3055) * _3031.w;
                        float _3072 = 1.39999997615814208984375 / (_3069 + 1.39999997615814208984375);
                        float _3073 = _3072 * _3072;
                        float _3076 = ((1.0 - _3073) * _3062) + _3073;
                        float _3079 = _3069 * _3069;
                        float _3083 = ((isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))) * _3068) / ((_3079 * 0.699999988079071044921875) + 1.0);
                        float _3087 = (-0.0) - _2570;
                        float _3088 = (-0.0) - _2571;
                        float _3089 = (-0.0) - _2572;
                        float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                        float _3094 = _3093 * _3087;
                        float _3095 = _3093 * _3088;
                        float _3096 = _3093 * _3089;
                        float _3104 = exp2(log2(1.0 / ((_3079 * 3.5) + 5.0)) * 0.25);
                        float _3105 = 1.0 - _887;
                        float _3112 = sqrt(1.0 - ((1.0 - (_3105 * _3105)) * (1.0 - (_3104 * _3104))));
                        float _3113 = _3112 * _3112;
                        float _3114 = _3113 * _3113;
                        float _3115 = _3094 + _3059;
                        float _3116 = _3095 + _3060;
                        float _3117 = _3096 + _3061;
                        float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                        float _3125 = dot(vec3(_812, _815, _818), vec3(_3094, _3095, _3096));
                        float _4385 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3129 = dot(vec3(_812, _815, _818), vec3(_3121 * _3115, _3121 * _3116, _3121 * _3117));
                        float _4396 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3132 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3136 = ((_3132 * _3132) * (_3114 + (-1.0))) + 1.0;
                        float _3137 = _3072 * _3113;
                        float _3138 = _3137 * _3137;
                        float _3141 = ((1.0 - _3138) * _3062) + _3138;
                        float _4407 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3142 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3143 = 1.0 - _3113;
                        float _3153 = (0.5 / (((_3142 * ((_3128 * _3143) + _3113)) + 9.9999999392252902907785028219223e-09) + (((_3142 * _3143) + _3113) * _3128))) * _3142;
                        float _4418 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3164 = (((_3114 * 3.1415927410125732421875) * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) / ((_3136 * _3136) * ((_3079 * 2.1991131305694580078125) + 3.141590118408203125))) * _3068;
                        _2921 = (_3083 * _3031.x) + _2989;
                        _2922 = (_3083 * _3031.y) + _2990;
                        _2923 = (_3083 * _3031.z) + _2991;
                        _2918 = (_3164 * _3048.x) + _2986;
                        _2919 = (_3164 * _3048.y) + _2987;
                        _2920 = (_3164 * _3048.z) + _2988;
                        if (_2993 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2923;
                            _2992 = _2993;
                        }
                    }
                    frontier_phi_61_pred = _2918;
                    frontier_phi_61_pred_1 = _2923;
                    frontier_phi_61_pred_2 = _2922;
                    frontier_phi_61_pred_3 = _2921;
                    frontier_phi_61_pred_4 = _2920;
                    frontier_phi_61_pred_5 = _2919;
                }
                _2718 = frontier_phi_61_pred;
                _2728 = frontier_phi_61_pred_1;
                _2726 = frontier_phi_61_pred_2;
                _2724 = frontier_phi_61_pred_3;
                _2722 = frontier_phi_61_pred_4;
                _2720 = frontier_phi_61_pred_5;
                uint _2869 = _2868 + 1u;
                if (_2869 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2862 = _2718;
                    _2863 = _2720;
                    _2864 = _2722;
                    _2865 = _2724;
                    _2866 = _2726;
                    _2867 = _2728;
                    _2868 = _2869;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
        }
        uvec4 _2731 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2732 = _2731.z;
        uint _2734 = (_2732 >> 8u) & 15u;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        if (((4294967295u << _2734) & _2616) == 0u)
        {
            _2830 = _2717;
            _2832 = _2719;
            _2834 = _2721;
            _2836 = _2723;
            _2838 = _2725;
            _2840 = _2727;
        }
        else
        {
            float _2855 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
            float _2856 = _2855 * _2570;
            float _2857 = _2855 * _2571;
            float _2858 = _2855 * _2572;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2734 < ((_2732 >> 12u) & 15u))
            {
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2969 = _2717;
                float _2970 = _2719;
                float _2971 = _2721;
                float _2972 = _2723;
                float _2973 = _2725;
                float _2974 = _2727;
                uint _2975 = _2734;
                uint _2984;
                bool _2985;
                for (;;)
                {
                    _2984 = texelFetch(g_lightClassification, int((((_2610 << 5u) + (_2596 << 9u)) + (_2975 << 2u)) >> 2u)).x;
                    _2985 = _2984 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2985)
                    {
                        frontier_phi_67_pred = _2972;
                        frontier_phi_67_pred_1 = _2973;
                        frontier_phi_67_pred_2 = _2974;
                        frontier_phi_67_pred_3 = _2971;
                        frontier_phi_67_pred_4 = _2970;
                        frontier_phi_67_pred_5 = _2969;
                    }
                    else
                    {
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3182 = _2969;
                        float _3183 = _2970;
                        float _3184 = _2971;
                        float _3185 = _2972;
                        float _3186 = _2973;
                        float _3187 = _2974;
                        uint _3188 = _2984;
                        uint _3189;
                        vec4 _3214;
                        float _3215;
                        vec4 _3230;
                        vec3 _3242;
                        vec4 _3257;
                        vec4 _3272;
                        float _3319;
                        bool _3320;
                        for (;;)
                        {
                            uint _3199 = ((_2975 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3188));
                            _3189 = (_3188 + 4294967295u) & _3188;
                            uint _3201 = _3199 * 40u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            _3215 = _3214.w;
                            uint _3217 = (_3199 * 40u) + 4u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3232 = (_3199 * 40u) + 8u;
                            _3242 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x));
                            uint _3244 = (_3199 * 40u) + 16u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3259 = (_3199 * 40u) + 20u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3275 = (_3199 * 40u) + 24u;
                            vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            uint _3294 = (_3199 * 40u) + 28u;
                            vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            _3319 = fma(_2572, _3307.z, fma(_2571, _3307.y, _3307.x * _2570)) + _3307.w;
                            _3320 = !((fma(_2572, _3288.z, fma(_2571, _3288.y, _3288.x * _2570)) + _3288.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3320)
                            {
                                float _3347 = _3214.x - _2570;
                                float _3348 = _3214.y - _2571;
                                float _3349 = _3214.z - _2572;
                                float _3350 = dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349));
                                float _3353 = inversesqrt(_3350);
                                float _3354 = _3353 * _3347;
                                float _3355 = _3353 * _3348;
                                float _3356 = _3353 * _3349;
                                float _3360 = 1.0 - (_3350 / (_3215 * _3215));
                                float _4429 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3365 = sqrt(_3350) * _3230.w;
                                float _3367 = 1.39999997615814208984375 / (_3365 + 1.39999997615814208984375);
                                float _3368 = _3367 * _3367;
                                float _3371 = ((1.0 - _3368) * dot(vec3(_3354, _3355, _3356), vec3(_812, _815, _818))) + _3368;
                                float _3374 = _3365 * _3365;
                                float _3378 = (fma(_2572, _3257.z, fma(_2571, _3257.y, _3257.x * _2570)) + _3257.w) / _3319;
                                float _3379 = (fma(_2572, _3272.z, fma(_2571, _3272.y, _3272.x * _2570)) + _3272.w) / _3319;
                                float _3383 = 1.0 - dot(vec2(_3378, _3379), vec2(_3378, _3379));
                                float _4445 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3385 = _3384 * (((isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0))) * _3361) / ((_3374 * 0.699999988079071044921875) + 1.0));
                                float _3397 = exp2(log2(1.0 / ((_3374 * 3.5) + 5.0)) * 0.25);
                                float _3398 = 1.0 - _887;
                                float _3405 = sqrt(1.0 - ((1.0 - (_3398 * _3398)) * (1.0 - (_3397 * _3397))));
                                float _3406 = _3405 * _3405;
                                float _3407 = _3406 * _3406;
                                float _3408 = _3354 - _2856;
                                float _3409 = _3355 - _2857;
                                float _3410 = _3356 - _2858;
                                float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                                float _3418 = dot(vec3(_812, _815, _818), vec3((-0.0) - _2856, (-0.0) - _2857, (-0.0) - _2858));
                                float _4456 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3421 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3422 = dot(vec3(_812, _815, _818), vec3(_3414 * _3408, _3414 * _3409, _3414 * _3410));
                                float _4467 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3425 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3429 = ((_3425 * _3425) * (_3407 + (-1.0))) + 1.0;
                                float _3430 = _3367 * _3406;
                                float _3431 = _3430 * _3430;
                                float _3437 = ((1.0 - _3431) * dot(vec3(_812, _815, _818), vec3(_3354, _3355, _3356))) + _3431;
                                float _4478 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3439 = 1.0 - _3406;
                                float _3449 = (0.5 / (((_3438 * ((_3421 * _3439) + _3406)) + 9.9999999392252902907785028219223e-09) + (((_3438 * _3439) + _3406) * _3421))) * _3438;
                                float _4489 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3459 = (_3384 * _3361) * (((_3407 * 3.1415927410125732421875) * (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) / ((_3429 * _3429) * ((_3374 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3459 * _3242.x;
                                frontier_phi_73_pred_1 = _3459 * _3242.y;
                                frontier_phi_73_pred_2 = _3385 * _3230.z;
                                frontier_phi_73_pred_3 = _3385 * _3230.y;
                                frontier_phi_73_pred_4 = _3385 * _3230.x;
                                frontier_phi_73_pred_5 = _3459 * _3242.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3463 = frontier_phi_73_pred;
                            _3464 = frontier_phi_73_pred_1;
                            _3468 = frontier_phi_73_pred_2;
                            _3467 = frontier_phi_73_pred_3;
                            _3466 = frontier_phi_73_pred_4;
                            _3465 = frontier_phi_73_pred_5;
                            _3172 = _3466 + _3185;
                            _3173 = _3467 + _3186;
                            _3174 = _3468 + _3187;
                            _3169 = _3463 + _3182;
                            _3170 = _3464 + _3183;
                            _3171 = _3465 + _3184;
                            if (_3189 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3189;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3172;
                        frontier_phi_67_pred_1 = _3173;
                        frontier_phi_67_pred_2 = _3174;
                        frontier_phi_67_pred_3 = _3171;
                        frontier_phi_67_pred_4 = _3170;
                        frontier_phi_67_pred_5 = _3169;
                    }
                    _2837 = frontier_phi_67_pred;
                    _2839 = frontier_phi_67_pred_1;
                    _2841 = frontier_phi_67_pred_2;
                    _2835 = frontier_phi_67_pred_3;
                    _2833 = frontier_phi_67_pred_4;
                    _2831 = frontier_phi_67_pred_5;
                    uint _2976 = _2975 + 1u;
                    if (_2976 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2969 = _2831;
                        _2970 = _2833;
                        _2971 = _2835;
                        _2972 = _2837;
                        _2973 = _2839;
                        _2974 = _2841;
                        _2975 = _2976;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2839;
                frontier_phi_55_56_ladder_1 = _2841;
                frontier_phi_55_56_ladder_2 = _2837;
                frontier_phi_55_56_ladder_3 = _2835;
                frontier_phi_55_56_ladder_4 = _2833;
                frontier_phi_55_56_ladder_5 = _2831;
            }
            else
            {
                frontier_phi_55_56_ladder = _2725;
                frontier_phi_55_56_ladder_1 = _2727;
                frontier_phi_55_56_ladder_2 = _2723;
                frontier_phi_55_56_ladder_3 = _2721;
                frontier_phi_55_56_ladder_4 = _2719;
                frontier_phi_55_56_ladder_5 = _2717;
            }
            _2830 = frontier_phi_55_56_ladder_5;
            _2832 = frontier_phi_55_56_ladder_4;
            _2834 = frontier_phi_55_56_ladder_3;
            _2836 = frontier_phi_55_56_ladder_2;
            _2838 = frontier_phi_55_56_ladder;
            _2840 = frontier_phi_55_56_ladder_1;
        }
        float _2845 = isnan(1.0) ? _871 : (isnan(_871) ? 1.0 : min(_871, 1.0));
        _2629 = (_2845 * _2836) + _2062;
        _2631 = (_2845 * _2838) + _2064;
        _2633 = (_2845 * _2840) + _2066;
        _2635 = ((_2830 * _855) * _2845) + _2410;
        _2637 = ((_2832 * _857) * _2845) + _2412;
        _2639 = ((_2834 * _858) * _2845) + _2414;
    }
    else
    {
        _2629 = _2062;
        _2631 = _2064;
        _2633 = _2066;
        _2635 = _2410;
        _2637 = _2412;
        _2639 = _2414;
    }
    float _4505 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4516 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4527 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    uint _2659 = _242 + 6u;
    float _2667 = _793 / cbSceneParam._m0[86u].x;
    float _2668 = _794 / cbSceneParam._m0[86u].y;
    vec4 _2682 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2667, _2668, (log2((isnan(cbSceneParam._m0[77u].w) ? _727 : (isnan(_727) ? cbSceneParam._m0[77u].w : min(_727, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2684 = _2682.x;
    float _2685 = _2682.y;
    float _2686 = _2682.z;
    float _2687 = _2682.w;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    if (_727 > cbSceneParam._m0[78u].w)
    {
        float _2742 = isnan(_727) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _727 : min(cbSceneParam._m0[80u].w, _727));
        float _2743 = _2742 / _727;
        float _2754 = _2743 * _778;
        float _2755 = _779 * _2743;
        float _2756 = (-0.0) - _2755;
        float _2758 = _2743 * _780;
        float _2760 = (cbSceneParam._m0[77u].w * _2756) / _2742;
        float _2761 = _2760 + cbSceneParam._m0[79u].w;
        float _2762 = cbSceneParam._m0[79u].w - _2755;
        float _2768 = sqrt(((_2754 * _2754) + (_2755 * _2755)) + (_2758 * _2758));
        float _2771 = (1.0 - (cbSceneParam._m0[77u].w / _2742)) * _2768;
        float _2776 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2778 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2931;
        if (abs((_2756 - _2760) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2931 = ((((_2761 > 0.0) ? exp2(_2776 * _2761) : (2.0 - exp2(_2778 * _2761))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2771;
        }
        else
        {
            float _2891 = 1.0 / cbSceneParam._m0[80u].x;
            float _2892 = isnan(_2762) ? _2761 : (isnan(_2761) ? _2762 : max(_2761, _2762));
            float _2893 = isnan(_2762) ? _2761 : (isnan(_2761) ? _2762 : min(_2761, _2762));
            float _2902 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : min(_2892, 0.0));
            float _2903 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : min(_2893, 0.0));
            _2931 = ((abs(_2768 / _2756) * cbSceneParam._m0[80u].y) * ((((_2902 - _2903) * 2.0) - ((exp2(_2776 * (isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0)))) - exp2(_2776 * (isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0))))) * _2891)) - ((exp2(_2778 * _2902) - exp2(_2778 * _2903)) * _2891))) + (_2771 * cbSceneParam._m0[80u].z);
        }
        vec4 _2933 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2667, _2668, 1.0), 0.0);
        float _2942 = exp2((_2931 * (-1.44269502162933349609375)) * (1.0 - _2933.w));
        float _2943 = log2(_2942);
        float _2959 = log2(_2687);
        _2780 = (exp2(_2959 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].x)) * _2933.x) / cbSceneParam._m0[78u].x)) + _2684;
        _2782 = (exp2(_2959 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].y)) * _2933.y) / cbSceneParam._m0[78u].y)) + _2685;
        _2784 = (exp2(_2959 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2943 * cbSceneParam._m0[78u].z)) * _2933.z) / cbSceneParam._m0[78u].z)) + _2686;
        _2786 = _2942 * _2687;
    }
    else
    {
        _2780 = _2684;
        _2782 = _2685;
        _2784 = _2686;
        _2786 = _2687;
    }
    float _2798 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2799 = _2798 == 3.0;
    float _2800 = log2(_2786);
    float _2807 = exp2(_2800 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2629 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _871))) + ((_2635 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1678)) * cbPerFrame._m0[3u].x));
    float _2808 = exp2(_2800 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2631 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _871))) + ((_2637 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1678)) * cbPerFrame._m0[3u].x));
    float _2809 = exp2(_2800 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2633 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _871))) + ((_2639 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1678)) * cbPerFrame._m0[3u].x));
    float _2818 = (_2798 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2818 * (_2799 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2780)));
    SV_Target.y = _2818 * (_2799 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2782)));
    SV_Target.z = _2818 * (_2799 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2784)));
    SV_Target.w = cbInstanceData._m0[_2659].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2659].w;
}


