#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1613;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _379.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[23u].w) + _432) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3936 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _457 = (_450 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _458 = (_450 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _459 = (_450 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _379.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[23u].w) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3947 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _290) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _291) + cbTextureTilingScale._m0[24u].w));
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _570 = _568.x;
    float _580 = dot(vec4(_570, _568.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _592 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _379.z) * 2.0) - ((((_570 - _580) * cbMtdParam._m0[23u].w) + _580) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3958 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _606 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _310.x) * ((_593 * ((_551.x * cbMtdParam._m0[14u].x) - _530)) + _530);
    float _609 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _310.y) * ((_593 * ((_551.y * cbMtdParam._m0[14u].y) - _531)) + _531);
    float _612 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _310.z) * ((_593 * ((_551.z * cbMtdParam._m0[14u].z) - _532)) + _532);
    vec4 _630 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _290) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _291) + cbTextureTilingScale._m0[14u].w));
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _667 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _669 = _667.x;
    float _670 = _667.y;
    float _671 = _667.z;
    float _678 = ((_650.x - _669) * _450) + _669;
    float _679 = ((_650.y - _670) * _450) + _670;
    float _680 = ((_650.z - _671) * _450) + _671;
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _703 = ((_692.x - _678) * _523) + _678;
    float _704 = ((_692.y - _679) * _523) + _679;
    float _705 = ((_692.z - _680) * _523) + _680;
    vec4 _717 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _290) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _291) + cbTextureTilingScale._m0[23u].w));
    float _730 = ((_717.z - _705) * _593) + _705;
    float _733 = ((((_717.x - _703) * _593) + _703) * 2.0) + (-1.0);
    float _735 = ((((_717.y - _704) * _593) + _704) * 2.0) + (-1.0);
    float _736 = dot(vec2(_733, _735), vec2(_733, _735));
    float _3969 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _741 = sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))));
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _780 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _782 = _780.x;
    float _783 = 1.0 - _782;
    float _791 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _794 = ((isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : min(_791, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _803 = (_794 - ((((((_782 - _783) * cbMtdParam._m0[24u].z) + _783) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _794))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3990 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _804 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _811 = (_804 * ((_630.x * cbMtdParam._m0[18u].x) - _606)) + _606;
    float _812 = (_804 * ((_630.y * cbMtdParam._m0[18u].y) - _609)) + _609;
    float _813 = (_804 * ((_630.z * cbMtdParam._m0[18u].z) - _612)) + _612;
    vec4 _825 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _827 = _825.x;
    float _828 = 1.0 - _827;
    float _853 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_827 - _828) * cbMtdParam._m0[24u].w) + _828) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4001 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _854 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _862 = ((((cbMtdParam._m0[10u].x - _811) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _854) + _811;
    float _863 = ((((cbMtdParam._m0[10u].y - _812) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _854) + _812;
    float _864 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _813)) * _854) + _813;
    vec4 _890 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _892 = _890.x;
    float _909 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _892) * _450) + _892;
    float _926 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _909) * _523) + _909;
    float _943 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _290) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _291) + cbTextureTilingScale._m0[10u].w)).x - _926) * _593) + _926;
    float _947 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _943) * cbMtdParam._m0[19u].z) + _943;
    float _949 = _947 - (_947 * _804);
    float _951 = _949 - (_949 * _854);
    float _955 = (cbMtdParam._m0[19u].w * (_755.z - _730)) + _730;
    vec4 _971 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _978 = (_971.x * 2.0) + (-1.0);
    float _979 = (_971.y * 2.0) + (-1.0);
    float _980 = dot(vec2(_978, _979), vec2(_978, _979));
    float _4012 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _988 = (_804 * (_971.z - _955)) + _955;
    float _991 = ((cbMtdParam._m0[23u].x - _988) * _854) + _988;
    vec4 _1014 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1020 = (_1014.x * 2.0) + (-1.0);
    float _1021 = (_1014.y * 2.0) + (-1.0);
    float _1022 = dot(vec2(_1020, _1021), vec2(_1020, _1021));
    float _4023 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1030 = (((_755.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _733;
    float _1031 = (((_755.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _735;
    float _1043 = (((_978 - _1030) + (cbMtdParam._m0[21u].x * _1030)) * _804) + _1030;
    float _1044 = (((_979 - _1031) + (cbMtdParam._m0[21u].x * _1031)) * _804) + _1031;
    float _1045 = (_804 * (sqrt(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) - _741)) + _741;
    float _1056 = (((_1020 - _1043) + (_1043 * cbMtdParam._m0[22u].z)) * _854) + _1043;
    float _1057 = (((_1021 - _1044) + (_1044 * cbMtdParam._m0[22u].z)) * _854) + _1044;
    float _1058 = ((sqrt(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) - _1045) * _854) + _1045;
    float _1060 = cbMtdParam._m0[22u].x + _755.w;
    float _1063 = fma(_1058, _258 * NORMAL.x, fma(_1057, _265 * TANGENT.x, (_251 * _243) * _1056));
    float _1066 = fma(_1058, _258 * NORMAL.y, fma(_1057, _265 * TANGENT.y, (_251 * _244) * _1056));
    float _1069 = fma(_1058, _258 * NORMAL.z, fma(_1057, _265 * TANGENT.z, (_251 * _245) * _1056));
    float _1073 = inversesqrt(dot(vec3(_1063, _1066, _1069), vec3(_1063, _1066, _1069)));
    float _1074 = _1073 * _1063;
    float _1075 = _1073 * _1066;
    float _1076 = _1073 * _1069;
    float _4034 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _1077 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _4056 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4067 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4078 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4089 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _1082 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _1096 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1146 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1136);
    float _1147 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1136);
    float _1148 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1136);
    float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
    float _1153 = _1146 * _1152;
    float _1154 = _1147 * _1152;
    float _1155 = _1148 * _1152;
    float _1161 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1162 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1180 = fma(_1076, cbSceneParam._m0[5u].z, fma(_1075, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1074));
    float _1183 = fma(_1076, cbSceneParam._m0[6u].z, fma(_1075, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1074));
    float _1186 = fma(_1076, cbSceneParam._m0[7u].z, fma(_1075, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1074));
    uint _1200 = (_271 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1206 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_1200].x;
    float _1207 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * cbInstanceData._m0[_1200].y;
    float _1208 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * cbInstanceData._m0[_1200].z;
    float _4100 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _1209 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _1210 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _1211 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _1212 = 1.0 - _1082;
    float _1213 = _1209 * _1212;
    float _1214 = _1210 * _1212;
    float _1215 = _1211 * _1212;
    float _1220 = (_1209 + (-0.039999999105930328369140625)) * _1082;
    float _1221 = (_1210 + (-0.039999999105930328369140625)) * _1082;
    float _1222 = (_1211 + (-0.039999999105930328369140625)) * _1082;
    float _1223 = _1220 + 0.039999999105930328369140625;
    float _1225 = _1221 + 0.039999999105930328369140625;
    float _1226 = _1222 + 0.039999999105930328369140625;
    vec4 _1235 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1161, cbSceneParam._m0[86u].y * _1162));
    float _1239 = ((isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * TEXCOORD_5.w) * _1235.x;
    float _1240 = dot(vec3(_1074, _1075, _1076), vec3(_1153, _1154, _1155));
    float _1243 = _1240 * 2.0;
    float _1247 = (_1243 * _1074) - _1153;
    float _1248 = (_1243 * _1075) - _1154;
    float _1249 = (_1243 * _1076) - _1155;
    float _1253 = abs(dot(vec3(_1153, _1154, _1155), vec3(_1074, _1075, _1076)));
    float _4133 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
    float _1255 = sqrt(_1077);
    float _1268 = exp2((_1255 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1255 * 3.0));
    float _1274 = (1.0 - _1268) * ((_1255 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1275 = _1268 * _1255;
    float _1303 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1307 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1311 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1612;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1337 = fma(_1311, cbModelParam._m0[26u].z, fma(_1307, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1303));
        float _1341 = fma(_1311, cbModelParam._m0[27u].z, fma(_1307, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1303));
        float _1345 = fma(_1311, cbModelParam._m0[28u].z, fma(_1307, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1303));
        float _1370 = _1303 + _1074;
        float _1371 = _1307 + _1075;
        float _1372 = _1311 + _1076;
        float _1382 = fma(_1372, cbModelParam._m0[26u].z, fma(_1371, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1370)) - _1337;
        float _1383 = fma(_1372, cbModelParam._m0[27u].z, fma(_1371, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1370)) - _1341;
        float _1384 = fma(_1372, cbModelParam._m0[28u].z, fma(_1371, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1370)) - _1345;
        float _1388 = inversesqrt(dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384)));
        float _1401 = ((_1388 * _1382) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1337 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1388 * _1383) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1341 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1388 * _1384) / cbModelParam._m0[34u].z) + ((((((_1345 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        float _1440 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1406.x + (-0.5));
        float _1442 = _1440 * (_1406.y + (-0.5));
        float _1443 = _1440 * (_1406.z + (-0.5));
        float _1450 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1413.x + (-0.5));
        float _1452 = _1450 * (_1413.y + (-0.5));
        float _1453 = _1450 * (_1413.z + (-0.5));
        float _1460 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1420.x + (-0.5));
        float _1462 = _1460 * (_1420.y + (-0.5));
        float _1463 = _1460 * (_1420.z + (-0.5));
        float _1470 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1427.x + (-0.5));
        float _1472 = _1470 * (_1427.y + (-0.5));
        float _1473 = _1470 * (_1427.z + (-0.5));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = _1441 * 0.5;
        float _1478 = _1451 * 0.5;
        float _1479 = _1461 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1494 = (dot(vec3(_1074, _1075, _1076), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1504 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4181 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1506 + 1.0))) + _1511) * _1474;
        float _1521 = _1442 * 0.5;
        float _1522 = _1452 * 0.5;
        float _1523 = _1462 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_1074, _1075, _1076), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4214 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1548 + 1.0))) + _1553) * _1475;
        float _1563 = _1443 * 0.5;
        float _1564 = _1453 * 0.5;
        float _1565 = _1463 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_1074, _1075, _1076), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4247 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1590 + 1.0))) + _1595) * _1476;
        _1612 = _1443;
        _1614 = _1442;
        _1615 = _1441;
        _1616 = _1453;
        _1617 = _1452;
        _1618 = _1451;
        _1619 = _1463;
        _1620 = _1462;
        _1621 = _1461;
        _1622 = _1476;
        _1623 = _1475;
        _1624 = _1474;
        _1625 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1626 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1627 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
    }
    else
    {
        _1612 = _1613;
        _1614 = _1613;
        _1615 = _1613;
        _1616 = _1613;
        _1617 = _1613;
        _1618 = _1613;
        _1619 = _1613;
        _1620 = _1613;
        _1621 = _1613;
        _1622 = _1613;
        _1623 = _1613;
        _1624 = _1613;
        _1625 = 0.0;
        _1626 = 0.0;
        _1627 = 0.0;
    }
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1650 = fma(_1311, cbModelParam._m0[30u].z, fma(_1307, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1303));
        float _1654 = fma(_1311, cbModelParam._m0[31u].z, fma(_1307, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1303));
        float _1658 = fma(_1311, cbModelParam._m0[32u].z, fma(_1307, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1303));
        float _1681 = _1303 + _1074;
        float _1682 = _1307 + _1075;
        float _1683 = _1311 + _1076;
        float _1693 = fma(_1683, cbModelParam._m0[30u].z, fma(_1682, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1681)) - _1650;
        float _1694 = fma(_1683, cbModelParam._m0[31u].z, fma(_1682, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1681)) - _1654;
        float _1695 = fma(_1683, cbModelParam._m0[32u].z, fma(_1682, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1681)) - _1658;
        float _1699 = inversesqrt(dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695)));
        float _1712 = ((_1699 * _1693) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1650 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1713 = ((_1699 * _1694) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1654 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1714 = ((_1699 * _1695) / cbModelParam._m0[35u].z) + ((((((_1658 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1716 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1712, _1713, _1714), 0.0);
        vec4 _1723 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1712, _1713, _1714), 0.0);
        vec4 _1730 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1712, _1713, _1714), 0.0);
        vec4 _1737 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1712, _1713, _1714), 0.0);
        float _1749 = exp2((_1716.w + (-0.5)) * 20.0) * 2.0;
        float _1750 = _1749 * (_1716.x + (-0.5));
        float _1751 = _1749 * (_1716.y + (-0.5));
        float _1752 = _1749 * (_1716.z + (-0.5));
        float _1759 = exp2((_1723.w + (-0.5)) * 20.0) * 2.0;
        float _1760 = _1759 * (_1723.x + (-0.5));
        float _1761 = _1759 * (_1723.y + (-0.5));
        float _1762 = _1759 * (_1723.z + (-0.5));
        float _1769 = exp2((_1730.w + (-0.5)) * 20.0) * 2.0;
        float _1770 = _1769 * (_1730.x + (-0.5));
        float _1771 = _1769 * (_1730.y + (-0.5));
        float _1772 = _1769 * (_1730.z + (-0.5));
        float _1779 = exp2((_1737.w + (-0.5)) * 20.0) * 2.0;
        float _1780 = _1779 * (_1737.x + (-0.5));
        float _1781 = _1779 * (_1737.y + (-0.5));
        float _1782 = _1779 * (_1737.z + (-0.5));
        float _1783 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1784 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1785 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1786 = _1750 * 0.5;
        float _1787 = _1760 * 0.5;
        float _1788 = _1770 * 0.5;
        float _1789 = dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788));
        float _1794 = (_1789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1789);
        float _1802 = (dot(vec3(_1074, _1075, _1076), vec3(_1794 * _1786, _1794 * _1787, _1794 * _1788)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1811 = sqrt(((_1787 * _1787) + (_1786 * _1786)) + (_1788 * _1788)) / (_1783 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1813 = _1812 * 2.0;
        float _1817 = (1.0 - _1812) / (_1812 + 1.0);
        float _4310 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1827 = ((((1.0 - _1818) * (_1813 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1813 + 1.0))) + _1818) * _1783;
        float _1828 = _1751 * 0.5;
        float _1829 = _1761 * 0.5;
        float _1830 = _1771 * 0.5;
        float _1831 = dot(vec3(_1828, _1829, _1830), vec3(_1828, _1829, _1830));
        float _1836 = (_1831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1831);
        float _1844 = (dot(vec3(_1074, _1075, _1076), vec3(_1836 * _1828, _1836 * _1829, _1836 * _1830)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1853 = sqrt(((_1829 * _1829) + (_1828 * _1828)) + (_1830 * _1830)) / (_1784 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1855 = _1854 * 2.0;
        float _1859 = (1.0 - _1854) / (_1854 + 1.0);
        float _4343 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1869 = ((((1.0 - _1860) * (_1855 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1855 + 1.0))) + _1860) * _1784;
        float _1870 = _1752 * 0.5;
        float _1871 = _1762 * 0.5;
        float _1872 = _1772 * 0.5;
        float _1873 = dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872));
        float _1878 = (_1873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1873);
        float _1886 = (dot(vec3(_1074, _1075, _1076), vec3(_1878 * _1870, _1878 * _1871, _1878 * _1872)) + 1.0) * 0.5;
        float _4354 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1895 = sqrt(((_1871 * _1871) + (_1870 * _1870)) + (_1872 * _1872)) / (_1785 + 9.9999997473787516355514526367188e-06);
        float _4365 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1897 = _1896 * 2.0;
        float _1901 = (1.0 - _1896) / (_1896 + 1.0);
        float _4376 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1902 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1911 = ((((1.0 - _1902) * (_1897 + 2.0)) * exp2(log2(isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_1897 + 1.0))) + _1902) * _1785;
        _1919 = _1752;
        _1920 = _1751;
        _1921 = _1750;
        _1922 = _1762;
        _1923 = _1761;
        _1924 = _1760;
        _1925 = _1772;
        _1926 = _1771;
        _1927 = _1770;
        _1928 = _1785;
        _1929 = _1784;
        _1930 = _1783;
        _1931 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)));
        _1932 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)));
        _1933 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)));
    }
    else
    {
        _1919 = _1613;
        _1920 = _1613;
        _1921 = _1613;
        _1922 = _1613;
        _1923 = _1613;
        _1924 = _1613;
        _1925 = _1613;
        _1926 = _1613;
        _1927 = _1613;
        _1928 = _1613;
        _1929 = _1613;
        _1930 = _1613;
        _1931 = 0.0;
        _1932 = 0.0;
        _1933 = 0.0;
    }
    float _1943 = (cbModelParam._m0[1u].x * (_1931 - _1625)) + _1625;
    float _1944 = (cbModelParam._m0[1u].x * (_1932 - _1626)) + _1626;
    float _1945 = (cbModelParam._m0[1u].x * (_1933 - _1627)) + _1627;
    float _1966 = fma(_1945, cbSceneParam._m0[89u].z, fma(_1944, cbSceneParam._m0[89u].y, _1943 * cbSceneParam._m0[89u].x));
    float _1969 = fma(_1945, cbSceneParam._m0[90u].z, fma(_1944, cbSceneParam._m0[90u].y, _1943 * cbSceneParam._m0[90u].x));
    float _1972 = fma(_1945, cbSceneParam._m0[91u].z, fma(_1944, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1943));
    float _1987 = _1247 * 0.5;
    float _1988 = _1248 * 0.5;
    float _1989 = _1249 * 0.5;
    float _1990 = dot(vec4(_1987, _1988, _1989, 1.0), vec4(_1921, _1924, _1927, _1930));
    float _1993 = dot(vec4(_1987, _1988, _1989, 1.0), vec4(_1920, _1923, _1926, _1929));
    float _1996 = dot(vec4(_1987, _1988, _1989, 1.0), vec4(_1919, _1922, _1925, _1928));
    float _2030;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2003 = dot(vec4(_1987, _1988, _1989, 1.0), vec4(_1612, _1616, _1619, _1622));
        float _2007 = dot(vec4(_1987, _1988, _1989, 1.0), vec4(_1614, _1617, _1620, _1623));
        float _2011 = dot(vec4(_1987, _1988, _1989, 1.0), vec4(_1615, _1618, _1621, _1624));
        float _2018 = dot(vec4(cbModelParam._m0[39u]), vec4(_1987, _1988, _1989, 1.0));
        _2030 = dot(vec3(isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0)), isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)), isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2018) ? 0.0 : (isnan(0.0) ? _2018 : max(0.0, _2018))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2030 = 1.0;
    }
    float _2041;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2032 = dot(vec4(cbModelParam._m0[40u]), vec4(_1987, _1988, _1989, 1.0));
        _2041 = dot(vec3(isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0)), isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0)), isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2032) ? 0.0 : (isnan(0.0) ? _2032 : max(0.0, _2032))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2041 = 1.0;
    }
    float _2045 = (_2041 * cbModelParam._m0[1u].x) + (_2030 * (1.0 - cbModelParam._m0[1u].x));
    float _2055 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1077);
    float _2056 = isnan(_2055) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2055 : min(cbModelParam._m0[25u].z, _2055));
    float _2136;
    float _2138;
    float _2140;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2103 = fma(_1311, cbModelParam._m0[13u].z, fma(_1307, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1303)) + cbModelParam._m0[13u].w;
        float _2107 = fma(_1311, cbModelParam._m0[14u].z, fma(_1307, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1303)) + cbModelParam._m0[14u].w;
        float _2111 = fma(_1311, cbModelParam._m0[15u].z, fma(_1307, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1303)) + cbModelParam._m0[15u].w;
        float _2114 = fma(_1249, cbModelParam._m0[13u].z, fma(_1248, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1247));
        float _2117 = fma(_1249, cbModelParam._m0[14u].z, fma(_1248, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1247));
        float _2120 = fma(_1249, cbModelParam._m0[15u].z, fma(_1248, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1247));
        float _2148;
        if (_2114 > 0.0)
        {
            _2148 = abs((1.0 - _2103) / _2114);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2103 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2148 = frontier_phi_14_12_ladder;
        }
        float _2350;
        if (_2117 > 0.0)
        {
            _2350 = abs((1.0 - _2107) / _2117);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2107 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2350 = frontier_phi_23_19_ladder;
        }
        float _2604;
        if (_2120 > 0.0)
        {
            _2604 = abs((1.0 - _2111) / _2120);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2120 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2111 + 1.0) / _2120);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2604 = frontier_phi_35_30_ladder;
        }
        float _2606 = isnan(_2350) ? _2148 : (isnan(_2148) ? _2350 : min(_2148, _2350));
        float _2607 = isnan(_2604) ? _2606 : (isnan(_2606) ? _2604 : min(_2606, _2604));
        float _2611 = (_2607 * _2114) + _2103;
        float _2612 = (_2607 * _2117) + _2107;
        float _2613 = (_2607 * _2120) + _2111;
        float _2614 = _2607 * 9.9999997473787516355514526367188e-05;
        float _2616 = (-1.0) - _2614;
        float _2618 = _2614 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2613 > _2618) || ((_2613 < _2616) || ((_2612 > _2618) || ((_2612 < _2616) || ((_2611 < _2616) || (_2611 > _2618))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2741 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2613, cbModelParam._m0[9u].z, fma(_2612, cbModelParam._m0[9u].y, _2611 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2613, cbModelParam._m0[10u].z, fma(_2612, cbModelParam._m0[10u].y, _2611 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2613, cbModelParam._m0[11u].z, fma(_2612, cbModelParam._m0[11u].y, _2611 * cbModelParam._m0[11u].x))), _2056);
            frontier_phi_13_35_ladder = _2741.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2741.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2741.x * cbModelParam._m0[1u].y;
        }
        _2136 = frontier_phi_13_35_ladder_2;
        _2138 = frontier_phi_13_35_ladder_1;
        _2140 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2124 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1247, _1248, _1249), _2056);
        _2136 = _2124.x * cbModelParam._m0[1u].y;
        _2138 = _2124.y * cbModelParam._m0[1u].y;
        _2140 = _2124.z * cbModelParam._m0[1u].y;
    }
    float _2144 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1077);
    float _2145 = isnan(_2144) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2144 : min(cbModelParam._m0[25u].w, _2144));
    float _2234;
    float _2236;
    float _2238;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2198 = fma(_1311, cbModelParam._m0[21u].z, fma(_1307, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1303)) + cbModelParam._m0[21u].w;
        float _2202 = fma(_1311, cbModelParam._m0[22u].z, fma(_1307, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1303)) + cbModelParam._m0[22u].w;
        float _2206 = fma(_1311, cbModelParam._m0[23u].z, fma(_1307, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1303)) + cbModelParam._m0[23u].w;
        float _2209 = fma(_1249, cbModelParam._m0[21u].z, fma(_1248, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1247));
        float _2212 = fma(_1249, cbModelParam._m0[22u].z, fma(_1248, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1247));
        float _2215 = fma(_1249, cbModelParam._m0[23u].z, fma(_1248, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1247));
        float _2355;
        if (_2209 > 0.0)
        {
            _2355 = abs((1.0 - _2198) / _2209);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2209 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2198 + 1.0) / _2209);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2355 = frontier_phi_25_21_ladder;
        }
        float _2631;
        if (_2212 > 0.0)
        {
            _2631 = abs((1.0 - _2202) / _2212);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2212 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2202 + 1.0) / _2212);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2631 = frontier_phi_37_32_ladder;
        }
        float _2844;
        if (_2215 > 0.0)
        {
            _2844 = abs((1.0 - _2206) / _2215);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2215 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2206 + 1.0) / _2215);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2844 = frontier_phi_46_43_ladder;
        }
        float _2846 = isnan(_2631) ? _2355 : (isnan(_2355) ? _2631 : min(_2355, _2631));
        float _2847 = isnan(_2844) ? _2846 : (isnan(_2846) ? _2844 : min(_2846, _2844));
        float _2851 = (_2847 * _2209) + _2198;
        float _2852 = (_2847 * _2212) + _2202;
        float _2853 = (_2847 * _2215) + _2206;
        float _2854 = _2847 * 9.9999997473787516355514526367188e-05;
        float _2855 = (-1.0) - _2854;
        float _2857 = _2854 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2853 > _2857) || ((_2853 < _2855) || ((_2852 > _2857) || ((_2852 < _2855) || ((_2851 < _2855) || (_2851 > _2857))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3052 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2853, cbModelParam._m0[17u].z, fma(_2852, cbModelParam._m0[17u].y, _2851 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2853, cbModelParam._m0[18u].z, fma(_2852, cbModelParam._m0[18u].y, _2851 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2853, cbModelParam._m0[19u].z, fma(_2852, cbModelParam._m0[19u].y, _2851 * cbModelParam._m0[19u].x))), _2145);
            frontier_phi_22_46_ladder = _3052.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3052.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3052.x * cbModelParam._m0[1u].z;
        }
        _2234 = frontier_phi_22_46_ladder_2;
        _2236 = frontier_phi_22_46_ladder_1;
        _2238 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2218 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1247, _1248, _1249), _2145);
        _2234 = _2218.x * cbModelParam._m0[1u].z;
        _2236 = _2218.y * cbModelParam._m0[1u].z;
        _2238 = _2218.z * cbModelParam._m0[1u].z;
    }
    float _2251 = (((_1274 * _1223) + _1275) * _1239) * ((cbModelParam._m0[1u].w * (_2234 - _2136)) + _2136);
    float _2253 = (((_1274 * _1225) + _1275) * _1239) * ((cbModelParam._m0[1u].w * (_2236 - _2138)) + _2138);
    float _2255 = (((_1274 * _1226) + _1275) * _1239) * ((cbModelParam._m0[1u].w * (_2238 - _2140)) + _2140);
    float _2258 = fma(_2255, cbSceneParam._m0[89u].z, fma(_2253, cbSceneParam._m0[89u].y, _2251 * cbSceneParam._m0[89u].x));
    float _2261 = fma(_2255, cbSceneParam._m0[90u].z, fma(_2253, cbSceneParam._m0[90u].y, _2251 * cbSceneParam._m0[90u].x));
    float _2264 = fma(_2255, cbSceneParam._m0[91u].z, fma(_2253, cbSceneParam._m0[91u].y, _2251 * cbSceneParam._m0[91u].x));
    uvec4 _2274 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2276 = _2274.x * 14u;
    uint _2277 = _2276 + 13u;
    float _2284 = _1239 + (-1.0);
    float _2289 = (cbLight._m0[_2277].x * _2284) + 1.0;
    float _2290 = (cbLight._m0[_2277].y * _2284) + 1.0;
    float _2291 = (cbLight._m0[_2277].z * _2284) + 1.0;
    float _2292 = (cbLight._m0[_2277].w * _2284) + 1.0;
    uint _2293 = _2276 + 5u;
    float _2299 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
    uint _2303 = _2276 + 4u;
    float _2309 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
    uint _2313 = _2276 | 1u;
    float _2324 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_1074, _1075, _1076));
    float _2327 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_1074, _1075, _1076));
    float _4512 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _4523 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2332 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * 0.3183098733425140380859375;
    float _2334 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * 0.3183098733425140380859375;
    float _2341 = ((cbLight._m0[_2293].x * _2299) * _2334) + ((cbLight._m0[_2303].x * _2309) * _2332);
    float _2342 = ((_2299 * cbLight._m0[_2293].y) * _2334) + ((_2309 * cbLight._m0[_2303].y) * _2332);
    float _2343 = ((_2299 * cbLight._m0[_2293].z) * _2334) + ((_2309 * cbLight._m0[_2303].z) * _2332);
    uvec4 _2347 = floatBitsToUint(cbLight._m0[_2276 + 12u]);
    bool _2349 = _2347.x == 0u;
    float _2360;
    float _2362;
    float _2364;
    if (_2349)
    {
        _2360 = _2341;
        _2362 = _2342;
        _2364 = _2343;
    }
    else
    {
        uint _2368 = _2276 + 6u;
        float _2384 = (dot(vec3(cbLight._m0[_2276 + 2u].xyz), vec3(_1074, _1075, _1076)) * 0.5) + 0.5;
        float _2385 = _2384 * _2384;
        float _4534 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2386 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2387 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2360 = (((cbLight._m0[_2368].x * 0.3183098733425140380859375) * _2386) * _2387) + _2341;
        _2362 = (((cbLight._m0[_2368].y * 0.3183098733425140380859375) * _2386) * _2387) + _2342;
        _2364 = (((cbLight._m0[_2368].z * 0.3183098733425140380859375) * _2386) * _2387) + _2343;
    }
    bool _2367 = _2347.y == 0u;
    float _2405;
    float _2407;
    float _2409;
    if (_2367)
    {
        _2405 = _2360;
        _2407 = _2362;
        _2409 = _2364;
    }
    else
    {
        uint _2575 = _2276 + 7u;
        float _2591 = (dot(vec3(cbLight._m0[_2276 + 3u].xyz), vec3(_1074, _1075, _1076)) * 0.5) + 0.5;
        float _2592 = _2591 * _2591;
        float _4550 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2593 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2594 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2405 = (((cbLight._m0[_2575].x * 0.3183098733425140380859375) * _2593) * _2594) + _2360;
        _2407 = (((cbLight._m0[_2575].y * 0.3183098733425140380859375) * _2593) * _2594) + _2362;
        _2409 = (((cbLight._m0[_2575].z * 0.3183098733425140380859375) * _2593) * _2594) + _2364;
    }
    uint _2412 = _2276 + 8u;
    float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _1077) * 0.949999988079071044921875);
    float _2426 = _2425 * _2425;
    float _2427 = cbLight._m0[_2276].x + _1153;
    float _2428 = cbLight._m0[_2276].y + _1154;
    float _2429 = cbLight._m0[_2276].z + _1155;
    float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
    float _2434 = _2433 * _2427;
    float _2435 = _2433 * _2428;
    float _2436 = _2433 * _2429;
    float _2437 = dot(vec3(_1074, _1075, _1076), vec3(cbLight._m0[_2276].xyz));
    float _4566 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _4577 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _2441 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2442 = dot(vec3(_1074, _1075, _1076), vec3(_2434, _2435, _2436));
    float _4588 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2446 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2434, _2435, _2436));
    float _4599 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2450 = _2426 * _2426;
    float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
    float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0);
    float _2463 = 0.959999978542327880859375 - _1220;
    float _2465 = 0.959999978542327880859375 - _1221;
    float _2466 = 0.959999978542327880859375 - _1222;
    float _2473 = 1.0 - _2426;
    float _2484 = (0.5 / (((_2441 * ((_2440 * _2473) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2473) + _2426) * _2440))) * _2440;
    float _4610 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2486 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
    uint _2497 = _2276 + 9u;
    float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _1077) * 0.949999988079071044921875);
    float _2509 = _2508 * _2508;
    float _2510 = cbLight._m0[_2313].x + _1153;
    float _2511 = cbLight._m0[_2313].y + _1154;
    float _2512 = cbLight._m0[_2313].z + _1155;
    float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
    float _2517 = _2516 * _2510;
    float _2518 = _2516 * _2511;
    float _2519 = _2516 * _2512;
    float _2520 = dot(vec3(_1074, _1075, _1076), vec3(cbLight._m0[_2313].xyz));
    float _4621 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _2524 = dot(vec3(_1074, _1075, _1076), vec3(_2517, _2518, _2519));
    float _4632 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2527 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2528 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2517, _2518, _2519));
    float _4643 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2532 = _2509 * _2509;
    float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
    float _2543 = exp2(log2(1.0 - (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) * 5.0);
    float _2550 = 1.0 - _2509;
    float _2560 = (0.5 / (((_2441 * ((_2523 * _2550) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2550) + _2509) * _2523))) * _2523;
    float _4654 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2562 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
    float _2572 = (((((_2543 * _2463) + _1223) * cbLight._m0[_2497].x) * _2562) * _2299) + (((((_2462 * _2463) + _1223) * cbLight._m0[_2412].x) * _2486) * _2309);
    float _2573 = (((((_2543 * _2465) + _1225) * cbLight._m0[_2497].y) * _2562) * _2299) + (((((_2462 * _2465) + _1225) * cbLight._m0[_2412].y) * _2486) * _2309);
    float _2574 = (((((_2543 * _2466) + _1226) * cbLight._m0[_2497].z) * _2562) * _2299) + (((((_2462 * _2466) + _1226) * cbLight._m0[_2412].z) * _2486) * _2309);
    float _2636;
    float _2638;
    float _2640;
    if (_2349)
    {
        _2636 = _2572;
        _2638 = _2573;
        _2640 = _2574;
    }
    else
    {
        uint _2642 = _2276 + 2u;
        uint _2646 = _2276 + 10u;
        float _2660 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2642].w)) * _1077) * 0.949999988079071044921875);
        float _2661 = _2660 * _2660;
        float _2662 = cbLight._m0[_2642].x + _1153;
        float _2663 = cbLight._m0[_2642].y + _1154;
        float _2664 = cbLight._m0[_2642].z + _1155;
        float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
        float _2669 = _2668 * _2662;
        float _2670 = _2668 * _2663;
        float _2671 = _2668 * _2664;
        float _2672 = dot(vec3(_1074, _1075, _1076), vec3(cbLight._m0[_2642].xyz));
        float _4665 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2675 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2676 = dot(vec3(_1074, _1075, _1076), vec3(_2669, _2670, _2671));
        float _4676 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2679 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2680 = dot(vec3(cbLight._m0[_2642].xyz), vec3(_2669, _2670, _2671));
        float _4687 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2684 = _2661 * _2661;
        float _2688 = ((_2679 * _2679) * (_2684 + (-1.0))) + 1.0;
        float _2695 = exp2(log2(1.0 - (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) * 5.0);
        float _2702 = 1.0 - _2661;
        float _2712 = (0.5 / (((_2441 * ((_2675 * _2702) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2702) + _2661) * _2675))) * _2675;
        float _4698 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2714 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2684 / ((_2688 * _2688) * 3.141590118408203125));
        float _2715 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2636 = (((((_2695 * _2463) + _1223) * cbLight._m0[_2646].x) * _2714) * _2715) + _2572;
        _2638 = (((((_2695 * _2465) + _1225) * cbLight._m0[_2646].y) * _2714) * _2715) + _2573;
        _2640 = (((((_2695 * _2466) + _1226) * cbLight._m0[_2646].z) * _2714) * _2715) + _2574;
    }
    float _2750;
    float _2752;
    float _2754;
    if (_2367)
    {
        _2750 = _2636;
        _2752 = _2638;
        _2754 = _2640;
    }
    else
    {
        uint _2761 = _2276 + 3u;
        uint _2765 = _2276 + 11u;
        float _2779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2761].w)) * _1077) * 0.949999988079071044921875);
        float _2780 = _2779 * _2779;
        float _2781 = cbLight._m0[_2761].x + _1153;
        float _2782 = cbLight._m0[_2761].y + _1154;
        float _2783 = cbLight._m0[_2761].z + _1155;
        float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
        float _2788 = _2787 * _2781;
        float _2789 = _2787 * _2782;
        float _2790 = _2787 * _2783;
        float _2791 = dot(vec3(_1074, _1075, _1076), vec3(cbLight._m0[_2761].xyz));
        float _4714 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2795 = dot(vec3(_1074, _1075, _1076), vec3(_2788, _2789, _2790));
        float _4725 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2798 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2799 = dot(vec3(cbLight._m0[_2761].xyz), vec3(_2788, _2789, _2790));
        float _4736 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2803 = _2780 * _2780;
        float _2807 = ((_2798 * _2798) * (_2803 + (-1.0))) + 1.0;
        float _2814 = exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0);
        float _2821 = 1.0 - _2780;
        float _2831 = (0.5 / (((_2441 * ((_2794 * _2821) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2821) + _2780) * _2794))) * _2794;
        float _4747 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2833 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2803 / ((_2807 * _2807) * 3.141590118408203125));
        float _2834 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2750 = (((((_2814 * _2463) + _1223) * cbLight._m0[_2765].x) * _2833) * _2834) + _2636;
        _2752 = (((((_2814 * _2465) + _1225) * cbLight._m0[_2765].y) * _2833) * _2834) + _2638;
        _2754 = (((((_2814 * _2466) + _1226) * cbLight._m0[_2765].z) * _2833) * _2834) + _2640;
    }
    float _2969;
    float _2971;
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    if (_2274.y == 0u)
    {
        float _2909 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2910 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2909;
        float _2911 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2909;
        float _2912 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2909;
        uvec4 _2924 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2925 = _2924.x;
        uint _2936 = uint((float(_2924.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1162) / _2925))) + floor(float(uint(cbSceneParam._m0[85u].x * _1161) / _2925)));
        float _2946 = (log2(_2912 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2947 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        uint _2950 = uint(isnan(14.0) ? _2947 : (isnan(_2947) ? 14.0 : min(_2947, 14.0)));
        uvec4 _2955 = texelFetch(g_lightClusterGridBuffer, int(((_2950 << 2u) + (_2936 << 6u)) >> 2u));
        uint _2956 = _2955.x;
        uint _2957 = _2924.z;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        if (((((1u << ((_2957 >> 4u) & 15u)) + 4294967295u) & _2956) == 0u) || ((_2957 & 240u) == 0u))
        {
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
        }
        else
        {
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3068;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            uint _3208 = 0u;
            uint _3217;
            bool _3218;
            for (;;)
            {
                _3217 = texelFetch(g_lightClassification, int((((_2950 << 5u) + (_2936 << 9u)) + (_3208 << 2u)) >> 2u)).x;
                _3218 = _3217 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3218)
                {
                    frontier_phi_61_pred = _3202;
                    frontier_phi_61_pred_1 = _3207;
                    frontier_phi_61_pred_2 = _3206;
                    frontier_phi_61_pred_3 = _3205;
                    frontier_phi_61_pred_4 = _3204;
                    frontier_phi_61_pred_5 = _3203;
                }
                else
                {
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    uint _3332;
                    _3326 = _3202;
                    _3327 = _3203;
                    _3328 = _3204;
                    _3329 = _3205;
                    _3330 = _3206;
                    _3331 = _3207;
                    _3332 = _3217;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    for (;;)
                    {
                        uint _3336 = uint(findLSB(_3332)) + (_3208 << 5u);
                        uint _3333 = (_3332 + 4294967295u) & _3332;
                        uint _3338 = _3336 * 48u;
                        vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 3u)).x));
                        uint _3358 = (_3336 * 48u) + 4u;
                        vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 3u)).x));
                        uint _3377 = (_3336 * 48u) + 8u;
                        vec3 _3388 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3377)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3377 + 2u)).x));
                        float _3392 = _3352.x - _2910;
                        float _3393 = _3352.y - _2911;
                        float _3394 = _3352.z - _2912;
                        float _3395 = dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394));
                        float _3398 = inversesqrt(_3395);
                        float _3399 = _3398 * _3392;
                        float _3400 = _3398 * _3393;
                        float _3401 = _3398 * _3394;
                        float _3402 = dot(vec3(_1180, _1183, _1186), vec3(_3399, _3400, _3401));
                        float _3407 = 1.0 - (_3395 * _3352.w);
                        float _4773 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3409 = sqrt(_3395) * _3371.w;
                        float _3412 = 1.39999997615814208984375 / (_3409 + 1.39999997615814208984375);
                        float _3413 = _3412 * _3412;
                        float _3416 = ((1.0 - _3413) * _3402) + _3413;
                        float _3419 = _3409 * _3409;
                        float _3423 = ((isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0))) * _3408) / ((_3419 * 0.699999988079071044921875) + 1.0);
                        float _3427 = (-0.0) - _2910;
                        float _3428 = (-0.0) - _2911;
                        float _3429 = (-0.0) - _2912;
                        float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                        float _3434 = _3433 * _3427;
                        float _3435 = _3433 * _3428;
                        float _3436 = _3433 * _3429;
                        float _3444 = exp2(log2(1.0 / ((_3419 * 3.5) + 5.0)) * 0.25);
                        float _3445 = 1.0 - _1255;
                        float _3452 = sqrt(1.0 - ((1.0 - (_3445 * _3445)) * (1.0 - (_3444 * _3444))));
                        float _3453 = _3452 * _3452;
                        float _3454 = _3453 * _3453;
                        float _3455 = _3434 + _3399;
                        float _3456 = _3435 + _3400;
                        float _3457 = _3436 + _3401;
                        float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                        float _3465 = dot(vec3(_1180, _1183, _1186), vec3(_3434, _3435, _3436));
                        float _4789 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3468 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3469 = dot(vec3(_1180, _1183, _1186), vec3(_3461 * _3455, _3461 * _3456, _3461 * _3457));
                        float _4800 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3472 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3476 = ((_3472 * _3472) * (_3454 + (-1.0))) + 1.0;
                        float _3477 = _3412 * _3453;
                        float _3478 = _3477 * _3477;
                        float _3481 = ((1.0 - _3478) * _3402) + _3478;
                        float _4811 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3482 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3483 = 1.0 - _3453;
                        float _3493 = (0.5 / (((_3482 * ((_3468 * _3483) + _3453)) + 9.9999999392252902907785028219223e-09) + (((_3482 * _3483) + _3453) * _3468))) * _3482;
                        float _4822 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3504 = (((_3454 * 3.1415927410125732421875) * (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) / ((_3476 * _3476) * ((_3419 * 2.1991131305694580078125) + 3.141590118408203125))) * _3408;
                        _3261 = (_3423 * _3371.x) + _3329;
                        _3262 = (_3423 * _3371.y) + _3330;
                        _3263 = (_3423 * _3371.z) + _3331;
                        _3258 = (_3504 * _3388.x) + _3326;
                        _3259 = (_3504 * _3388.y) + _3327;
                        _3260 = (_3504 * _3388.z) + _3328;
                        if (_3333 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3326 = _3258;
                            _3327 = _3259;
                            _3328 = _3260;
                            _3329 = _3261;
                            _3330 = _3262;
                            _3331 = _3263;
                            _3332 = _3333;
                        }
                    }
                    frontier_phi_61_pred = _3258;
                    frontier_phi_61_pred_1 = _3263;
                    frontier_phi_61_pred_2 = _3262;
                    frontier_phi_61_pred_3 = _3261;
                    frontier_phi_61_pred_4 = _3260;
                    frontier_phi_61_pred_5 = _3259;
                }
                _3058 = frontier_phi_61_pred;
                _3068 = frontier_phi_61_pred_1;
                _3066 = frontier_phi_61_pred_2;
                _3064 = frontier_phi_61_pred_3;
                _3062 = frontier_phi_61_pred_4;
                _3060 = frontier_phi_61_pred_5;
                uint _3209 = _3208 + 1u;
                if (_3209 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3202 = _3058;
                    _3203 = _3060;
                    _3204 = _3062;
                    _3205 = _3064;
                    _3206 = _3066;
                    _3207 = _3068;
                    _3208 = _3209;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
        }
        uvec4 _3071 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3072 = _3071.z;
        uint _3074 = (_3072 >> 8u) & 15u;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        if (((4294967295u << _3074) & _2956) == 0u)
        {
            _3170 = _3057;
            _3172 = _3059;
            _3174 = _3061;
            _3176 = _3063;
            _3178 = _3065;
            _3180 = _3067;
        }
        else
        {
            float _3195 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
            float _3196 = _3195 * _2910;
            float _3197 = _3195 * _2911;
            float _3198 = _3195 * _2912;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3074 < ((_3072 >> 12u) & 15u))
            {
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3181;
                float _3309 = _3057;
                float _3310 = _3059;
                float _3311 = _3061;
                float _3312 = _3063;
                float _3313 = _3065;
                float _3314 = _3067;
                uint _3315 = _3074;
                uint _3324;
                bool _3325;
                for (;;)
                {
                    _3324 = texelFetch(g_lightClassification, int((((_2950 << 5u) + (_2936 << 9u)) + (_3315 << 2u)) >> 2u)).x;
                    _3325 = _3324 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3325)
                    {
                        frontier_phi_67_pred = _3312;
                        frontier_phi_67_pred_1 = _3313;
                        frontier_phi_67_pred_2 = _3314;
                        frontier_phi_67_pred_3 = _3311;
                        frontier_phi_67_pred_4 = _3310;
                        frontier_phi_67_pred_5 = _3309;
                    }
                    else
                    {
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3522 = _3309;
                        float _3523 = _3310;
                        float _3524 = _3311;
                        float _3525 = _3312;
                        float _3526 = _3313;
                        float _3527 = _3314;
                        uint _3528 = _3324;
                        uint _3529;
                        vec4 _3554;
                        float _3555;
                        vec4 _3570;
                        vec3 _3582;
                        vec4 _3597;
                        vec4 _3612;
                        float _3658;
                        bool _3659;
                        for (;;)
                        {
                            uint _3539 = ((_3315 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3528));
                            _3529 = (_3528 + 4294967295u) & _3528;
                            uint _3541 = _3539 * 40u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3555 = _3554.w;
                            uint _3557 = (_3539 * 40u) + 4u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3572 = (_3539 * 40u) + 8u;
                            _3582 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x));
                            uint _3584 = (_3539 * 40u) + 16u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3539 * 40u) + 20u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3614 = (_3539 * 40u) + 24u;
                            vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3633 = (_3539 * 40u) + 28u;
                            vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            _3658 = fma(_2912, _3646.z, fma(_2911, _3646.y, _3646.x * _2910)) + _3646.w;
                            _3659 = !((fma(_2912, _3627.z, fma(_2911, _3627.y, _3627.x * _2910)) + _3627.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3659)
                            {
                                float _3686 = _3554.x - _2910;
                                float _3687 = _3554.y - _2911;
                                float _3688 = _3554.z - _2912;
                                float _3689 = dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688));
                                float _3692 = inversesqrt(_3689);
                                float _3693 = _3692 * _3686;
                                float _3694 = _3692 * _3687;
                                float _3695 = _3692 * _3688;
                                float _3699 = 1.0 - (_3689 / (_3555 * _3555));
                                float _4833 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3704 = sqrt(_3689) * _3570.w;
                                float _3706 = 1.39999997615814208984375 / (_3704 + 1.39999997615814208984375);
                                float _3707 = _3706 * _3706;
                                float _3710 = ((1.0 - _3707) * dot(vec3(_3693, _3694, _3695), vec3(_1180, _1183, _1186))) + _3707;
                                float _3713 = _3704 * _3704;
                                float _3717 = (fma(_2912, _3597.z, fma(_2911, _3597.y, _3597.x * _2910)) + _3597.w) / _3658;
                                float _3718 = (fma(_2912, _3612.z, fma(_2911, _3612.y, _3612.x * _2910)) + _3612.w) / _3658;
                                float _3722 = 1.0 - dot(vec2(_3717, _3718), vec2(_3717, _3718));
                                float _4849 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3724 = _3723 * (((isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0))) * _3700) / ((_3713 * 0.699999988079071044921875) + 1.0));
                                float _3736 = exp2(log2(1.0 / ((_3713 * 3.5) + 5.0)) * 0.25);
                                float _3737 = 1.0 - _1255;
                                float _3744 = sqrt(1.0 - ((1.0 - (_3737 * _3737)) * (1.0 - (_3736 * _3736))));
                                float _3745 = _3744 * _3744;
                                float _3746 = _3745 * _3745;
                                float _3747 = _3693 - _3196;
                                float _3748 = _3694 - _3197;
                                float _3749 = _3695 - _3198;
                                float _3753 = inversesqrt(dot(vec3(_3747, _3748, _3749), vec3(_3747, _3748, _3749)));
                                float _3757 = dot(vec3(_1180, _1183, _1186), vec3((-0.0) - _3196, (-0.0) - _3197, (-0.0) - _3198));
                                float _4860 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3760 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3761 = dot(vec3(_1180, _1183, _1186), vec3(_3753 * _3747, _3753 * _3748, _3753 * _3749));
                                float _4871 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3764 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3768 = ((_3764 * _3764) * (_3746 + (-1.0))) + 1.0;
                                float _3769 = _3706 * _3745;
                                float _3770 = _3769 * _3769;
                                float _3776 = ((1.0 - _3770) * dot(vec3(_1180, _1183, _1186), vec3(_3693, _3694, _3695))) + _3770;
                                float _4882 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3777 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3778 = 1.0 - _3745;
                                float _3788 = (0.5 / (((_3777 * ((_3760 * _3778) + _3745)) + 9.9999999392252902907785028219223e-09) + (((_3777 * _3778) + _3745) * _3760))) * _3777;
                                float _4893 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3798 = (_3723 * _3700) * (((_3746 * 3.1415927410125732421875) * (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0)))) / ((_3768 * _3768) * ((_3713 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3798 * _3582.x;
                                frontier_phi_73_pred_1 = _3798 * _3582.y;
                                frontier_phi_73_pred_2 = _3724 * _3570.z;
                                frontier_phi_73_pred_3 = _3724 * _3570.y;
                                frontier_phi_73_pred_4 = _3724 * _3570.x;
                                frontier_phi_73_pred_5 = _3798 * _3582.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3802 = frontier_phi_73_pred;
                            _3803 = frontier_phi_73_pred_1;
                            _3807 = frontier_phi_73_pred_2;
                            _3806 = frontier_phi_73_pred_3;
                            _3805 = frontier_phi_73_pred_4;
                            _3804 = frontier_phi_73_pred_5;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            if (_3529 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3529;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3512;
                        frontier_phi_67_pred_1 = _3513;
                        frontier_phi_67_pred_2 = _3514;
                        frontier_phi_67_pred_3 = _3511;
                        frontier_phi_67_pred_4 = _3510;
                        frontier_phi_67_pred_5 = _3509;
                    }
                    _3177 = frontier_phi_67_pred;
                    _3179 = frontier_phi_67_pred_1;
                    _3181 = frontier_phi_67_pred_2;
                    _3175 = frontier_phi_67_pred_3;
                    _3173 = frontier_phi_67_pred_4;
                    _3171 = frontier_phi_67_pred_5;
                    uint _3316 = _3315 + 1u;
                    if (_3316 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3309 = _3171;
                        _3310 = _3173;
                        _3311 = _3175;
                        _3312 = _3177;
                        _3313 = _3179;
                        _3314 = _3181;
                        _3315 = _3316;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3179;
                frontier_phi_55_56_ladder_1 = _3181;
                frontier_phi_55_56_ladder_2 = _3177;
                frontier_phi_55_56_ladder_3 = _3175;
                frontier_phi_55_56_ladder_4 = _3173;
                frontier_phi_55_56_ladder_5 = _3171;
            }
            else
            {
                frontier_phi_55_56_ladder = _3065;
                frontier_phi_55_56_ladder_1 = _3067;
                frontier_phi_55_56_ladder_2 = _3063;
                frontier_phi_55_56_ladder_3 = _3061;
                frontier_phi_55_56_ladder_4 = _3059;
                frontier_phi_55_56_ladder_5 = _3057;
            }
            _3170 = frontier_phi_55_56_ladder_5;
            _3172 = frontier_phi_55_56_ladder_4;
            _3174 = frontier_phi_55_56_ladder_3;
            _3176 = frontier_phi_55_56_ladder_2;
            _3178 = frontier_phi_55_56_ladder;
            _3180 = frontier_phi_55_56_ladder_1;
        }
        float _3185 = isnan(1.0) ? _1239 : (isnan(_1239) ? 1.0 : min(_1239, 1.0));
        _2969 = (_3185 * _3176) + _2405;
        _2971 = (_3185 * _3178) + _2407;
        _2973 = (_3185 * _3180) + _2409;
        _2975 = ((_3170 * _1223) * _3185) + _2750;
        _2977 = ((_3172 * _1225) * _3185) + _2752;
        _2979 = ((_3174 * _1226) * _3185) + _2754;
    }
    else
    {
        _2969 = _2405;
        _2971 = _2407;
        _2973 = _2409;
        _2975 = _2750;
        _2977 = _2752;
        _2979 = _2754;
    }
    float _4909 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _4920 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _4931 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    uint _2999 = _271 + 6u;
    float _3007 = _1161 / cbSceneParam._m0[86u].x;
    float _3008 = _1162 / cbSceneParam._m0[86u].y;
    vec4 _3022 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3007, _3008, (log2((isnan(cbSceneParam._m0[77u].w) ? _1096 : (isnan(_1096) ? cbSceneParam._m0[77u].w : min(_1096, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3024 = _3022.x;
    float _3025 = _3022.y;
    float _3026 = _3022.z;
    float _3027 = _3022.w;
    float _3120;
    float _3122;
    float _3124;
    float _3126;
    if (_1096 > cbSceneParam._m0[78u].w)
    {
        float _3082 = isnan(_1096) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1096 : min(cbSceneParam._m0[80u].w, _1096));
        float _3083 = _3082 / _1096;
        float _3094 = _3083 * _1146;
        float _3095 = _1147 * _3083;
        float _3096 = (-0.0) - _3095;
        float _3098 = _3083 * _1148;
        float _3100 = (cbSceneParam._m0[77u].w * _3096) / _3082;
        float _3101 = _3100 + cbSceneParam._m0[79u].w;
        float _3102 = cbSceneParam._m0[79u].w - _3095;
        float _3108 = sqrt(((_3094 * _3094) + (_3095 * _3095)) + (_3098 * _3098));
        float _3111 = (1.0 - (cbSceneParam._m0[77u].w / _3082)) * _3108;
        float _3116 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3118 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3271;
        if (abs((_3096 - _3100) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3271 = ((((_3101 > 0.0) ? exp2(_3116 * _3101) : (2.0 - exp2(_3118 * _3101))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3111;
        }
        else
        {
            float _3231 = 1.0 / cbSceneParam._m0[80u].x;
            float _3232 = isnan(_3102) ? _3101 : (isnan(_3101) ? _3102 : max(_3101, _3102));
            float _3233 = isnan(_3102) ? _3101 : (isnan(_3101) ? _3102 : min(_3101, _3102));
            float _3242 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : min(_3232, 0.0));
            float _3243 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : min(_3233, 0.0));
            _3271 = ((abs(_3108 / _3096) * cbSceneParam._m0[80u].y) * ((((_3242 - _3243) * 2.0) - ((exp2(_3116 * (isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0)))) - exp2(_3116 * (isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))))) * _3231)) - ((exp2(_3118 * _3242) - exp2(_3118 * _3243)) * _3231))) + (_3111 * cbSceneParam._m0[80u].z);
        }
        vec4 _3273 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3007, _3008, 1.0), 0.0);
        float _3282 = exp2((_3271 * (-1.44269502162933349609375)) * (1.0 - _3273.w));
        float _3283 = log2(_3282);
        float _3299 = log2(_3027);
        _3120 = (exp2(_3299 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].x)) * _3273.x) / cbSceneParam._m0[78u].x)) + _3024;
        _3122 = (exp2(_3299 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].y)) * _3273.y) / cbSceneParam._m0[78u].y)) + _3025;
        _3124 = (exp2(_3299 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].z)) * _3273.z) / cbSceneParam._m0[78u].z)) + _3026;
        _3126 = _3282 * _3027;
    }
    else
    {
        _3120 = _3024;
        _3122 = _3025;
        _3124 = _3026;
        _3126 = _3027;
    }
    float _3138 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3139 = _3138 == 3.0;
    float _3140 = log2(_3126);
    float _3147 = exp2(_3140 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2969 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1239))) + ((_2975 + ((isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0))) * _2045)) * cbPerFrame._m0[3u].x));
    float _3148 = exp2(_3140 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2971 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1239))) + ((_2977 + ((isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0))) * _2045)) * cbPerFrame._m0[3u].x));
    float _3149 = exp2(_3140 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2973 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1239))) + ((_2979 + ((isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0))) * _2045)) * cbPerFrame._m0[3u].x));
    float _3158 = (_3138 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3158 * (_3139 ? _3147 : (_3147 + (cbSceneParam._m0[72u].w * _3120)));
    SV_Target.y = _3158 * (_3139 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3122)));
    SV_Target.z = _3158 * (_3139 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3124)));
    SV_Target.w = cbInstanceData._m0[_2999].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2999].w;
}


