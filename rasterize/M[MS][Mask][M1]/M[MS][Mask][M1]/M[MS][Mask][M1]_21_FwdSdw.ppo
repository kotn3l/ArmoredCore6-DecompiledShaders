#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1206;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _373 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_361 - _373) * cbMtdParam._m0[23u].w) + _373) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3817 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _398 = (_391 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _399 = (_391 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _400 = (_391 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _435 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    float _439 = _435.z;
    float _448 = ((_418.z - _439) * _391) + _439;
    float _451 = ((((_418.x - _437) * _391) + _437) * 2.0) + (-1.0);
    float _453 = ((((_418.y - _438) * _391) + _438) * 2.0) + (-1.0);
    float _454 = dot(vec2(_451, _453), vec2(_451, _453));
    float _3828 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))));
    vec4 _475 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _487 = (((_475.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _451;
    float _488 = (((_475.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _453;
    float _491 = fma(_459, _226, fma(_488, _233, _487 * _219));
    float _494 = fma(_459, _227, fma(_488, _234, _487 * _220));
    float _497 = fma(_459, _228, fma(_488, _235, _487 * _221));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _530 = _528.x;
    float _531 = 1.0 - _530;
    float _540 = (cbMtdParam._m0[19u].x + dot(vec4(_501 * _491, _501 * _494, _501 * _497, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_530 - _531) * cbMtdParam._m0[24u].z) + _531) * cbMtdParam._m0[21u].z);
    float _3839 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _548 = (_541 * (cbMtdParam._m0[17u].x - _398)) + _398;
    float _549 = (_541 * (cbMtdParam._m0[17u].y - _399)) + _399;
    float _550 = (_541 * (cbMtdParam._m0[17u].z - _400)) + _400;
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _578 = _576.x;
    float _596 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _578) * _391) + _578;
    float _600 = ((_562.x - _596) * cbMtdParam._m0[19u].z) + _596;
    float _602 = _600 - (_600 * _541);
    float _606 = (cbMtdParam._m0[19u].w * (_475.z - _448)) + _448;
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _626 = (_619.x * 2.0) + (-1.0);
    float _627 = (_619.y * 2.0) + (-1.0);
    float _628 = dot(vec2(_626, _627), vec2(_626, _627));
    float _3850 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _636 = ((_619.z - _606) * _541) + _606;
    float _646 = ((sqrt(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) - _459) * _541) + _459;
    float _649 = (((_626 - _487) * _541) + _487) + (cbMtdParam._m0[21u].x * _487);
    float _650 = (((_627 - _488) * _541) + _488) + (cbMtdParam._m0[21u].x * _488);
    float _652 = cbMtdParam._m0[22u].x + _475.w;
    float _655 = fma(_646, _226, fma(_650, _233, _649 * _219));
    float _658 = fma(_646, _227, fma(_650, _234, _649 * _220));
    float _661 = fma(_646, _228, fma(_650, _235, _649 * _221));
    float _665 = inversesqrt(dot(vec3(_655, _658, _661), vec3(_655, _658, _661)));
    float _666 = _665 * _655;
    float _667 = _665 * _658;
    float _668 = _665 * _661;
    float _3861 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _669 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _3883 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3894 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _3905 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3916 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _674 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _688 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _739 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _729);
    float _740 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _729);
    float _741 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _729);
    float _745 = inversesqrt(dot(vec3(_739, _740, _741), vec3(_739, _740, _741)));
    float _746 = _739 * _745;
    float _747 = _740 * _745;
    float _748 = _741 * _745;
    float _754 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _755 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _773 = fma(_668, cbSceneParam._m0[5u].z, fma(_667, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _666));
    float _776 = fma(_668, cbSceneParam._m0[6u].z, fma(_667, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _666));
    float _779 = fma(_668, cbSceneParam._m0[7u].z, fma(_667, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _666));
    uint _793 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _799 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_793].x;
    float _800 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_793].y;
    float _801 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_793].z;
    float _3927 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _805 = 1.0 - _674;
    float _806 = _802 * _805;
    float _807 = _803 * _805;
    float _808 = _804 * _805;
    float _813 = (_802 + (-0.039999999105930328369140625)) * _674;
    float _814 = (_803 + (-0.039999999105930328369140625)) * _674;
    float _815 = (_804 + (-0.039999999105930328369140625)) * _674;
    float _816 = _813 + 0.039999999105930328369140625;
    float _818 = _814 + 0.039999999105930328369140625;
    float _819 = _815 + 0.039999999105930328369140625;
    vec4 _828 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _754, cbSceneParam._m0[86u].y * _755));
    float _832 = ((isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * TEXCOORD_5.w) * _828.x;
    float _833 = dot(vec3(_666, _667, _668), vec3(_746, _747, _748));
    float _836 = _833 * 2.0;
    float _840 = (_836 * _666) - _746;
    float _841 = (_836 * _667) - _747;
    float _842 = (_836 * _668) - _748;
    float _846 = abs(dot(vec3(_746, _747, _748), vec3(_666, _667, _668)));
    float _3960 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _848 = sqrt(_669);
    float _861 = exp2((_848 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_848 * 3.0));
    float _867 = (1.0 - _861) * ((_848 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _868 = _861 * _848;
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1205;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _930 = fma(_904, cbModelParam._m0[26u].z, fma(_900, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _896));
        float _934 = fma(_904, cbModelParam._m0[27u].z, fma(_900, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _896));
        float _938 = fma(_904, cbModelParam._m0[28u].z, fma(_900, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _896));
        float _963 = _896 + _666;
        float _964 = _900 + _667;
        float _965 = _904 + _668;
        float _975 = fma(_965, cbModelParam._m0[26u].z, fma(_964, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963)) - _930;
        float _976 = fma(_965, cbModelParam._m0[27u].z, fma(_964, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963)) - _934;
        float _977 = fma(_965, cbModelParam._m0[28u].z, fma(_964, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963)) - _938;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_930 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_934 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[34u].z) + ((((((_938 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1033 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_999.x + (-0.5));
        float _1035 = _1033 * (_999.y + (-0.5));
        float _1036 = _1033 * (_999.z + (-0.5));
        float _1043 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1006.x + (-0.5));
        float _1045 = _1043 * (_1006.y + (-0.5));
        float _1046 = _1043 * (_1006.z + (-0.5));
        float _1053 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1013.x + (-0.5));
        float _1055 = _1053 * (_1013.y + (-0.5));
        float _1056 = _1053 * (_1013.z + (-0.5));
        float _1063 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1020.x + (-0.5));
        float _1065 = _1063 * (_1020.y + (-0.5));
        float _1066 = _1063 * (_1020.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1087 = (dot(vec3(_666, _667, _668), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1097 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _4008 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1099 + 1.0))) + _1104) * _1067;
        float _1114 = _1035 * 0.5;
        float _1115 = _1045 * 0.5;
        float _1116 = _1055 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_666, _667, _668), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _4041 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1141 + 1.0))) + _1146) * _1068;
        float _1156 = _1036 * 0.5;
        float _1157 = _1046 * 0.5;
        float _1158 = _1056 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_666, _667, _668), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _4074 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1183 + 1.0))) + _1188) * _1069;
        _1205 = _1036;
        _1207 = _1035;
        _1208 = _1034;
        _1209 = _1046;
        _1210 = _1045;
        _1211 = _1044;
        _1212 = _1056;
        _1213 = _1055;
        _1214 = _1054;
        _1215 = _1069;
        _1216 = _1068;
        _1217 = _1067;
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _1206;
        _1207 = _1206;
        _1208 = _1206;
        _1209 = _1206;
        _1210 = _1206;
        _1211 = _1206;
        _1212 = _1206;
        _1213 = _1206;
        _1214 = _1206;
        _1215 = _1206;
        _1216 = _1206;
        _1217 = _1206;
        _1218 = 0.0;
        _1219 = 0.0;
        _1220 = 0.0;
    }
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1245 = fma(_904, cbModelParam._m0[30u].z, fma(_900, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _896));
        float _1249 = fma(_904, cbModelParam._m0[31u].z, fma(_900, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _896));
        float _1253 = fma(_904, cbModelParam._m0[32u].z, fma(_900, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _896));
        float _1276 = _896 + _666;
        float _1277 = _900 + _667;
        float _1278 = _904 + _668;
        float _1288 = fma(_1278, cbModelParam._m0[30u].z, fma(_1277, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1276)) - _1245;
        float _1289 = fma(_1278, cbModelParam._m0[31u].z, fma(_1277, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1276)) - _1249;
        float _1290 = fma(_1278, cbModelParam._m0[32u].z, fma(_1277, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1276)) - _1253;
        float _1294 = inversesqrt(dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290)));
        float _1307 = ((_1294 * _1288) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1245 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1294 * _1289) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1249 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1294 * _1290) / cbModelParam._m0[35u].z) + ((((((_1253 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1307, _1308, _1309), 0.0);
        float _1344 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1311.x + (-0.5));
        float _1346 = _1344 * (_1311.y + (-0.5));
        float _1347 = _1344 * (_1311.z + (-0.5));
        float _1354 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1318.x + (-0.5));
        float _1356 = _1354 * (_1318.y + (-0.5));
        float _1357 = _1354 * (_1318.z + (-0.5));
        float _1364 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1325.x + (-0.5));
        float _1366 = _1364 * (_1325.y + (-0.5));
        float _1367 = _1364 * (_1325.z + (-0.5));
        float _1374 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1332.x + (-0.5));
        float _1376 = _1374 * (_1332.y + (-0.5));
        float _1377 = _1374 * (_1332.z + (-0.5));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = _1345 * 0.5;
        float _1382 = _1355 * 0.5;
        float _1383 = _1365 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_666, _667, _668), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4137 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1408 + 1.0))) + _1413) * _1378;
        float _1423 = _1346 * 0.5;
        float _1424 = _1356 * 0.5;
        float _1425 = _1366 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_666, _667, _668), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4170 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1450 + 1.0))) + _1455) * _1379;
        float _1465 = _1347 * 0.5;
        float _1466 = _1357 * 0.5;
        float _1467 = _1367 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_666, _667, _668), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4203 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1492 + 1.0))) + _1497) * _1380;
        _1514 = _1347;
        _1515 = _1346;
        _1516 = _1345;
        _1517 = _1357;
        _1518 = _1356;
        _1519 = _1355;
        _1520 = _1367;
        _1521 = _1366;
        _1522 = _1365;
        _1523 = _1380;
        _1524 = _1379;
        _1525 = _1378;
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
    }
    else
    {
        _1514 = _1206;
        _1515 = _1206;
        _1516 = _1206;
        _1517 = _1206;
        _1518 = _1206;
        _1519 = _1206;
        _1520 = _1206;
        _1521 = _1206;
        _1522 = _1206;
        _1523 = _1206;
        _1524 = _1206;
        _1525 = _1206;
        _1526 = 0.0;
        _1527 = 0.0;
        _1528 = 0.0;
    }
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1218)) + _1218;
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1219)) + _1219;
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1220)) + _1220;
    float _1561 = fma(_1540, cbSceneParam._m0[89u].z, fma(_1539, cbSceneParam._m0[89u].y, _1538 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1540, cbSceneParam._m0[90u].z, fma(_1539, cbSceneParam._m0[90u].y, _1538 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1540, cbSceneParam._m0[91u].z, fma(_1539, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1538));
    float _1582 = _840 * 0.5;
    float _1583 = _841 * 0.5;
    float _1584 = _842 * 0.5;
    float _1585 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1588 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1591 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1625;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1598 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1205, _1209, _1212, _1215));
        float _1602 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1207, _1210, _1213, _1216));
        float _1606 = dot(vec4(_1582, _1583, _1584, 1.0), vec4(_1208, _1211, _1214, _1217));
        float _1613 = dot(vec4(cbModelParam._m0[39u]), vec4(_1582, _1583, _1584, 1.0));
        _1625 = dot(vec3(isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1613) ? 0.0 : (isnan(0.0) ? _1613 : max(0.0, _1613))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1625 = 1.0;
    }
    float _1636;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1627 = dot(vec4(cbModelParam._m0[40u]), vec4(_1582, _1583, _1584, 1.0));
        _1636 = dot(vec3(isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1627) ? 0.0 : (isnan(0.0) ? _1627 : max(0.0, _1627))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1636 = 1.0;
    }
    float _1640 = (_1636 * cbModelParam._m0[1u].x) + (_1625 * (1.0 - cbModelParam._m0[1u].x));
    float _1650 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _669);
    float _1651 = isnan(_1650) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1650 : min(cbModelParam._m0[25u].z, _1650));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1699 = fma(_904, cbModelParam._m0[13u].z, fma(_900, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896)) + cbModelParam._m0[13u].w;
        float _1703 = fma(_904, cbModelParam._m0[14u].z, fma(_900, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896)) + cbModelParam._m0[14u].w;
        float _1707 = fma(_904, cbModelParam._m0[15u].z, fma(_900, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896)) + cbModelParam._m0[15u].w;
        float _1710 = fma(_842, cbModelParam._m0[13u].z, fma(_841, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _840));
        float _1713 = fma(_842, cbModelParam._m0[14u].z, fma(_841, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _840));
        float _1716 = fma(_842, cbModelParam._m0[15u].z, fma(_841, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _840));
        float _1744;
        if (_1710 > 0.0)
        {
            _1744 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1744 = frontier_phi_14_12_ladder;
        }
        float _1916;
        if (_1713 > 0.0)
        {
            _1916 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1916 = frontier_phi_23_19_ladder;
        }
        float _2211;
        if (_1716 > 0.0)
        {
            _2211 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2211 = frontier_phi_35_30_ladder;
        }
        float _2213 = isnan(_1916) ? _1744 : (isnan(_1744) ? _1916 : min(_1744, _1916));
        float _2214 = isnan(_2211) ? _2213 : (isnan(_2213) ? _2211 : min(_2213, _2211));
        float _2218 = (_2214 * _1710) + _1699;
        float _2219 = (_2214 * _1713) + _1703;
        float _2220 = (_2214 * _1716) + _1707;
        float _2221 = _2214 * 9.9999997473787516355514526367188e-05;
        float _2223 = (-1.0) - _2221;
        float _2225 = _2221 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2220 > _2225) || ((_2220 < _2223) || ((_2219 > _2225) || ((_2219 < _2223) || ((_2218 < _2223) || (_2218 > _2225))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2220, cbModelParam._m0[9u].z, fma(_2219, cbModelParam._m0[9u].y, _2218 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2220, cbModelParam._m0[10u].z, fma(_2219, cbModelParam._m0[10u].y, _2218 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2220, cbModelParam._m0[11u].z, fma(_2219, cbModelParam._m0[11u].y, _2218 * cbModelParam._m0[11u].x))), _1651);
            frontier_phi_13_35_ladder = _2365.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2365.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2365.x * cbModelParam._m0[1u].y;
        }
        _1732 = frontier_phi_13_35_ladder_2;
        _1734 = frontier_phi_13_35_ladder_1;
        _1736 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_840, _841, _842), _1651);
        _1732 = _1720.x * cbModelParam._m0[1u].y;
        _1734 = _1720.y * cbModelParam._m0[1u].y;
        _1736 = _1720.z * cbModelParam._m0[1u].y;
    }
    float _1740 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _669);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1740 : min(cbModelParam._m0[25u].w, _1740));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1795 = fma(_904, cbModelParam._m0[21u].z, fma(_900, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896)) + cbModelParam._m0[21u].w;
        float _1799 = fma(_904, cbModelParam._m0[22u].z, fma(_900, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896)) + cbModelParam._m0[22u].w;
        float _1803 = fma(_904, cbModelParam._m0[23u].z, fma(_900, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896)) + cbModelParam._m0[23u].w;
        float _1806 = fma(_842, cbModelParam._m0[21u].z, fma(_841, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _840));
        float _1809 = fma(_842, cbModelParam._m0[22u].z, fma(_841, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _840));
        float _1812 = fma(_842, cbModelParam._m0[23u].z, fma(_841, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _840));
        float _1921;
        if (_1806 > 0.0)
        {
            _1921 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1921 = frontier_phi_25_21_ladder;
        }
        float _2238;
        if (_1809 > 0.0)
        {
            _2238 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2238 = frontier_phi_37_32_ladder;
        }
        float _2576;
        if (_1812 > 0.0)
        {
            _2576 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2576 = frontier_phi_47_44_ladder;
        }
        float _2578 = isnan(_2238) ? _1921 : (isnan(_1921) ? _2238 : min(_1921, _2238));
        float _2579 = isnan(_2576) ? _2578 : (isnan(_2578) ? _2576 : min(_2578, _2576));
        float _2583 = (_2579 * _1806) + _1795;
        float _2584 = (_2579 * _1809) + _1799;
        float _2585 = (_2579 * _1812) + _1803;
        float _2586 = _2579 * 9.9999997473787516355514526367188e-05;
        float _2587 = (-1.0) - _2586;
        float _2589 = _2586 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2585 > _2589) || ((_2585 < _2587) || ((_2584 > _2589) || ((_2584 < _2587) || ((_2583 < _2587) || (_2583 > _2589))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2585, cbModelParam._m0[17u].z, fma(_2584, cbModelParam._m0[17u].y, _2583 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2585, cbModelParam._m0[18u].z, fma(_2584, cbModelParam._m0[18u].y, _2583 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2585, cbModelParam._m0[19u].z, fma(_2584, cbModelParam._m0[19u].y, _2583 * cbModelParam._m0[19u].x))), _1741);
            frontier_phi_22_47_ladder = _2707.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2707.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2707.x * cbModelParam._m0[1u].z;
        }
        _1831 = frontier_phi_22_47_ladder_2;
        _1833 = frontier_phi_22_47_ladder_1;
        _1835 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_840, _841, _842), _1741);
        _1831 = _1815.x * cbModelParam._m0[1u].z;
        _1833 = _1815.y * cbModelParam._m0[1u].z;
        _1835 = _1815.z * cbModelParam._m0[1u].z;
    }
    float _1848 = (((_867 * _816) + _868) * _832) * ((cbModelParam._m0[1u].w * (_1831 - _1732)) + _1732);
    float _1850 = (((_867 * _818) + _868) * _832) * ((cbModelParam._m0[1u].w * (_1833 - _1734)) + _1734);
    float _1852 = (((_867 * _819) + _868) * _832) * ((cbModelParam._m0[1u].w * (_1835 - _1736)) + _1736);
    float _1855 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1850, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1858 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1850, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1861 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1850, cbSceneParam._m0[91u].y, _1848 * cbSceneParam._m0[91u].x));
    float _1895 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1899 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1903 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1907 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1908 = _1895 / _1907;
    float _1909 = _1899 / _1907;
    float _1910 = _1903 / _1907;
    float _2057;
    float _2058;
    float _2059;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1937 = ((uint(_1910 > cbSceneParam._m0[59u].y) + uint(_1910 > cbSceneParam._m0[59u].x)) + uint(_1910 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1938 = _1937 + 43u;
        uint _1946 = _1937 + 44u;
        uint _1954 = _1937 + 45u;
        uint _1962 = _1937 + 46u;
        float _1973 = fma(_1907, cbSceneParam._m0[_1938].w, fma(_1903, cbSceneParam._m0[_1938].z, fma(_1899, cbSceneParam._m0[_1938].y, _1895 * cbSceneParam._m0[_1938].x)));
        float _1977 = fma(_1907, cbSceneParam._m0[_1946].w, fma(_1903, cbSceneParam._m0[_1946].z, fma(_1899, cbSceneParam._m0[_1946].y, _1895 * cbSceneParam._m0[_1946].x)));
        float _1985 = fma(_1907, cbSceneParam._m0[_1962].w, fma(_1903, cbSceneParam._m0[_1962].z, fma(_1899, cbSceneParam._m0[_1962].y, _1895 * cbSceneParam._m0[_1962].x)));
        float _1990 = cbSceneParam._m0[33u].z * _1985;
        float _1992 = cbSceneParam._m0[33u].w * _1985;
        float _1995 = fma(_1907, cbSceneParam._m0[_1954].w, fma(_1903, cbSceneParam._m0[_1954].z, fma(_1899, cbSceneParam._m0[_1954].y, _1895 * cbSceneParam._m0[_1954].x))) / _1985;
        float _2043 = (cbSceneParam._m0[33u].x - sqrt(((_1909 * _1909) + (_1908 * _1908)) + (_1910 * _1910))) * cbSceneParam._m0[33u].y;
        float _4329 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2050 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1990 + _1973) / _1985, (_1992 + _1977) / _1985), _1995), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1992 + _1973) / _1985, (_1977 - _1990) / _1985), _1995), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1973 - _1990) / _1985, (_1977 - _1992) / _1985), _1995), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1973 - _1992) / _1985, (_1990 + _1977) / _1985), _1995), 0.0)).x), vec4(0.25)));
        _2057 = 1.0 - (_2050 * cbSceneParam._m0[34u].x);
        _2058 = 1.0 - (_2050 * cbSceneParam._m0[34u].y);
        _2059 = 1.0 - (_2050 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2057 = 1.0;
        _2058 = 1.0;
        _2059 = 1.0;
    }
    float _2123;
    float _2125;
    float _2127;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2111 = fma(_1907, cbSceneParam._m0[63u].w, fma(_1903, cbSceneParam._m0[63u].z, fma(_1899, cbSceneParam._m0[63u].y, _1895 * cbSceneParam._m0[63u].x)));
        float _2112 = fma(_1907, cbSceneParam._m0[60u].w, fma(_1903, cbSceneParam._m0[60u].z, fma(_1899, cbSceneParam._m0[60u].y, _1895 * cbSceneParam._m0[60u].x))) / _2111;
        float _2113 = fma(_1907, cbSceneParam._m0[61u].w, fma(_1903, cbSceneParam._m0[61u].z, fma(_1899, cbSceneParam._m0[61u].y, _1895 * cbSceneParam._m0[61u].x))) / _2111;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2112 >= cbSceneParam._m0[64u].x) && (_2113 >= cbSceneParam._m0[64u].y)) && (_2112 <= cbSceneParam._m0[64u].z)) && (_2113 <= cbSceneParam._m0[64u].w))
        {
            float _2251 = fma(_1907, cbSceneParam._m0[62u].w, fma(_1903, cbSceneParam._m0[62u].z, fma(_1899, cbSceneParam._m0[62u].y, _1895 * cbSceneParam._m0[62u].x))) / _2111;
            float _2255 = isnan(cbSceneParam._m0[41u].w) ? _2251 : (isnan(_2251) ? cbSceneParam._m0[41u].w : max(_2251, cbSceneParam._m0[41u].w));
            float _2298 = (cbSceneParam._m0[33u].x - sqrt(((_1909 * _1909) + (_1908 * _1908)) + (_1910 * _1910))) * cbSceneParam._m0[33u].y;
            float _4345 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
            float _2305 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2112, cbSceneParam._m0[33u].w + _2113), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2112, _2113 - cbSceneParam._m0[33u].z), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2112 - cbSceneParam._m0[33u].z, _2113 - cbSceneParam._m0[33u].w), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2112 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2113), _2255), 0.0)).x), vec4(0.25)));
            float _2309 = 1.0 - (_2305 * cbSceneParam._m0[34u].x);
            float _2310 = 1.0 - (_2305 * cbSceneParam._m0[34u].y);
            float _2311 = 1.0 - (_2305 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2311) ? _2059 : (isnan(_2059) ? _2311 : min(_2059, _2311));
            frontier_phi_34_33_ladder_1 = isnan(_2310) ? _2058 : (isnan(_2058) ? _2310 : min(_2058, _2310));
            frontier_phi_34_33_ladder_2 = isnan(_2309) ? _2057 : (isnan(_2057) ? _2309 : min(_2057, _2309));
        }
        else
        {
            frontier_phi_34_33_ladder = _2059;
            frontier_phi_34_33_ladder_1 = _2058;
            frontier_phi_34_33_ladder_2 = _2057;
        }
        _2123 = frontier_phi_34_33_ladder_2;
        _2125 = frontier_phi_34_33_ladder_1;
        _2127 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2123 = _2057;
        _2125 = _2058;
        _2127 = _2059;
    }
    uvec4 _2132 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2134 = _2132.x * 14u;
    uint _2135 = _2134 + 13u;
    float _2142 = _832 + (-1.0);
    float _2147 = (cbLight._m0[_2135].x * _2142) + 1.0;
    float _2148 = (cbLight._m0[_2135].y * _2142) + 1.0;
    float _2149 = (cbLight._m0[_2135].z * _2142) + 1.0;
    float _2150 = (cbLight._m0[_2135].w * _2142) + 1.0;
    uint _2151 = _2134 + 5u;
    float _2157 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
    uint _2161 = _2134 + 4u;
    float _2170 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
    uint _2174 = _2134 | 1u;
    float _2185 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_666, _667, _668));
    float _2188 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_666, _667, _668));
    float _4381 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _4392 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2193 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2195 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.3183098733425140380859375;
    float _2202 = ((cbLight._m0[_2151].x * _2157) * _2195) + (((cbLight._m0[_2161].x * _2123) * _2170) * _2193);
    float _2203 = ((_2157 * cbLight._m0[_2151].y) * _2195) + (((cbLight._m0[_2161].y * _2125) * _2170) * _2193);
    float _2204 = ((_2157 * cbLight._m0[_2151].z) * _2195) + (((cbLight._m0[_2161].z * _2127) * _2170) * _2193);
    uvec4 _2208 = floatBitsToUint(cbLight._m0[_2134 + 12u]);
    bool _2210 = _2208.x == 0u;
    float _2312;
    float _2314;
    float _2316;
    if (_2210)
    {
        _2312 = _2202;
        _2314 = _2203;
        _2316 = _2204;
    }
    else
    {
        uint _2320 = _2134 + 6u;
        float _2336 = (dot(vec3(cbLight._m0[_2134 + 2u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _2337 = _2336 * _2336;
        float _4403 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2338 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2339 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2312 = (((cbLight._m0[_2320].x * 0.3183098733425140380859375) * _2338) * _2339) + _2202;
        _2314 = (((cbLight._m0[_2320].y * 0.3183098733425140380859375) * _2338) * _2339) + _2203;
        _2316 = (((cbLight._m0[_2320].z * 0.3183098733425140380859375) * _2338) * _2339) + _2204;
    }
    bool _2319 = _2208.y == 0u;
    float _2374;
    float _2376;
    float _2378;
    if (_2319)
    {
        _2374 = _2312;
        _2376 = _2314;
        _2378 = _2316;
    }
    else
    {
        uint _2547 = _2134 + 7u;
        float _2563 = (dot(vec3(cbLight._m0[_2134 + 3u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _2564 = _2563 * _2563;
        float _4419 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2565 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2566 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2374 = (((cbLight._m0[_2547].x * 0.3183098733425140380859375) * _2565) * _2566) + _2312;
        _2376 = (((cbLight._m0[_2547].y * 0.3183098733425140380859375) * _2565) * _2566) + _2314;
        _2378 = (((cbLight._m0[_2547].z * 0.3183098733425140380859375) * _2565) * _2566) + _2316;
    }
    uint _2381 = _2134 + 8u;
    float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _669) * 0.949999988079071044921875);
    float _2395 = _2394 * _2394;
    float _2396 = cbLight._m0[_2134].x + _746;
    float _2397 = cbLight._m0[_2134].y + _747;
    float _2398 = cbLight._m0[_2134].z + _748;
    float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
    float _2403 = _2402 * _2396;
    float _2404 = _2402 * _2397;
    float _2405 = _2402 * _2398;
    float _2406 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2134].xyz));
    float _4435 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _4446 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _2410 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2411 = dot(vec3(_666, _667, _668), vec3(_2403, _2404, _2405));
    float _4457 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2403, _2404, _2405));
    float _4468 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2395 * _2395;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0);
    float _2432 = 0.959999978542327880859375 - _813;
    float _2434 = 0.959999978542327880859375 - _814;
    float _2435 = 0.959999978542327880859375 - _815;
    float _2442 = 1.0 - _2395;
    float _2453 = (0.5 / (((_2410 * ((_2409 * _2442) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2442) + _2395) * _2409))) * _2409;
    float _4479 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    uint _2469 = _2134 + 9u;
    float _2480 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _669) * 0.949999988079071044921875);
    float _2481 = _2480 * _2480;
    float _2482 = cbLight._m0[_2174].x + _746;
    float _2483 = cbLight._m0[_2174].y + _747;
    float _2484 = cbLight._m0[_2174].z + _748;
    float _2488 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
    float _2489 = _2488 * _2482;
    float _2490 = _2488 * _2483;
    float _2491 = _2488 * _2484;
    float _2492 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2174].xyz));
    float _4490 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2495 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2496 = dot(vec3(_666, _667, _668), vec3(_2489, _2490, _2491));
    float _4501 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2499 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2500 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2489, _2490, _2491));
    float _4512 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2504 = _2481 * _2481;
    float _2508 = ((_2499 * _2499) * (_2504 + (-1.0))) + 1.0;
    float _2515 = exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0);
    float _2522 = 1.0 - _2481;
    float _2532 = (0.5 / (((_2410 * ((_2495 * _2522) + _2481)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2522) + _2481) * _2495))) * _2495;
    float _4523 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2534 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2504 / ((_2508 * _2508) * 3.141590118408203125));
    float _2544 = (((((_2515 * _2432) + _816) * cbLight._m0[_2469].x) * _2534) * _2157) + ((((cbLight._m0[_2381].x * _2123) * ((_2431 * _2432) + _816)) * _2455) * _2170);
    float _2545 = (((((_2515 * _2434) + _818) * cbLight._m0[_2469].y) * _2534) * _2157) + ((((cbLight._m0[_2381].y * _2125) * ((_2431 * _2434) + _818)) * _2455) * _2170);
    float _2546 = (((((_2515 * _2435) + _819) * cbLight._m0[_2469].z) * _2534) * _2157) + ((((cbLight._m0[_2381].z * _2127) * ((_2431 * _2435) + _819)) * _2455) * _2170);
    float _2602;
    float _2604;
    float _2606;
    if (_2210)
    {
        _2602 = _2544;
        _2604 = _2545;
        _2606 = _2546;
    }
    else
    {
        uint _2608 = _2134 + 2u;
        uint _2612 = _2134 + 10u;
        float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2608].w)) * _669) * 0.949999988079071044921875);
        float _2627 = _2626 * _2626;
        float _2628 = cbLight._m0[_2608].x + _746;
        float _2629 = cbLight._m0[_2608].y + _747;
        float _2630 = cbLight._m0[_2608].z + _748;
        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
        float _2635 = _2634 * _2628;
        float _2636 = _2634 * _2629;
        float _2637 = _2634 * _2630;
        float _2638 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2608].xyz));
        float _4534 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2642 = dot(vec3(_666, _667, _668), vec3(_2635, _2636, _2637));
        float _4545 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2646 = dot(vec3(cbLight._m0[_2608].xyz), vec3(_2635, _2636, _2637));
        float _4556 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2650 = _2627 * _2627;
        float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
        float _2661 = exp2(log2(1.0 - (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) * 5.0);
        float _2668 = 1.0 - _2627;
        float _2678 = (0.5 / (((_2410 * ((_2641 * _2668) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2668) + _2627) * _2641))) * _2641;
        float _4567 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2680 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
        float _2681 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2602 = (((((_2661 * _2432) + _816) * cbLight._m0[_2612].x) * _2680) * _2681) + _2544;
        _2604 = (((((_2661 * _2434) + _818) * cbLight._m0[_2612].y) * _2680) * _2681) + _2545;
        _2606 = (((((_2661 * _2435) + _819) * cbLight._m0[_2612].z) * _2680) * _2681) + _2546;
    }
    float _2712;
    float _2714;
    float _2716;
    if (_2319)
    {
        _2712 = _2602;
        _2714 = _2604;
        _2716 = _2606;
    }
    else
    {
        uint _2723 = _2134 + 3u;
        uint _2727 = _2134 + 11u;
        float _2741 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2723].w)) * _669) * 0.949999988079071044921875);
        float _2742 = _2741 * _2741;
        float _2743 = cbLight._m0[_2723].x + _746;
        float _2744 = cbLight._m0[_2723].y + _747;
        float _2745 = cbLight._m0[_2723].z + _748;
        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
        float _2750 = _2749 * _2743;
        float _2751 = _2749 * _2744;
        float _2752 = _2749 * _2745;
        float _2753 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2723].xyz));
        float _4583 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2757 = dot(vec3(_666, _667, _668), vec3(_2750, _2751, _2752));
        float _4594 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2761 = dot(vec3(cbLight._m0[_2723].xyz), vec3(_2750, _2751, _2752));
        float _4605 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2765 = _2742 * _2742;
        float _2769 = ((_2760 * _2760) * (_2765 + (-1.0))) + 1.0;
        float _2776 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
        float _2783 = 1.0 - _2742;
        float _2793 = (0.5 / (((_2410 * ((_2756 * _2783) + _2742)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2783) + _2742) * _2756))) * _2756;
        float _4616 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2795 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2765 / ((_2769 * _2769) * 3.141590118408203125));
        float _2796 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2712 = (((((_2776 * _2432) + _816) * cbLight._m0[_2727].x) * _2795) * _2796) + _2602;
        _2714 = (((((_2776 * _2434) + _818) * cbLight._m0[_2727].y) * _2795) * _2796) + _2604;
        _2716 = (((((_2776 * _2435) + _819) * cbLight._m0[_2727].z) * _2795) * _2796) + _2606;
    }
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    if (_2132.y == 0u)
    {
        uvec4 _2817 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2818 = _2817.x;
        uint _2829 = uint((float(_2817.y) * floor(float(uint(cbSceneParam._m0[85u].y * _755) / _2818))) + floor(float(uint(cbSceneParam._m0[85u].x * _754) / _2818)));
        float _2839 = (log2(_1910 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2840 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        uint _2843 = uint(isnan(14.0) ? _2840 : (isnan(_2840) ? 14.0 : min(_2840, 14.0)));
        uvec4 _2848 = texelFetch(g_lightClusterGridBuffer, int(((_2843 << 2u) + (_2829 << 6u)) >> 2u));
        uint _2849 = _2848.x;
        uint _2850 = _2817.z;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        if (((((1u << ((_2850 >> 4u) & 15u)) + 4294967295u) & _2849) == 0u) || ((_2850 & 240u) == 0u))
        {
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
        }
        else
        {
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            uint _3080 = 0u;
            uint _3089;
            bool _3090;
            for (;;)
            {
                _3089 = texelFetch(g_lightClassification, int((((_2843 << 5u) + (_2829 << 9u)) + (_3080 << 2u)) >> 2u)).x;
                _3090 = _3089 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3090)
                {
                    frontier_phi_66_pred = _3079;
                    frontier_phi_66_pred_1 = _3078;
                    frontier_phi_66_pred_2 = _3077;
                    frontier_phi_66_pred_3 = _3076;
                    frontier_phi_66_pred_4 = _3075;
                    frontier_phi_66_pred_5 = _3074;
                }
                else
                {
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    uint _3204;
                    _3198 = _3074;
                    _3199 = _3075;
                    _3200 = _3076;
                    _3201 = _3077;
                    _3202 = _3078;
                    _3203 = _3079;
                    _3204 = _3089;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    for (;;)
                    {
                        uint _3208 = uint(findLSB(_3204)) + (_3080 << 5u);
                        uint _3205 = (_3204 + 4294967295u) & _3204;
                        uint _3210 = _3208 * 48u;
                        vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3210)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 3u)).x));
                        uint _3230 = (_3208 * 48u) + 4u;
                        vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3230)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 3u)).x));
                        uint _3249 = (_3208 * 48u) + 8u;
                        vec3 _3260 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3249)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 2u)).x));
                        float _3264 = _3224.x - _1908;
                        float _3265 = _3224.y - _1909;
                        float _3266 = _3224.z - _1910;
                        float _3267 = dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266));
                        float _3270 = inversesqrt(_3267);
                        float _3271 = _3270 * _3264;
                        float _3272 = _3270 * _3265;
                        float _3273 = _3270 * _3266;
                        float _3274 = dot(vec3(_773, _776, _779), vec3(_3271, _3272, _3273));
                        float _3279 = 1.0 - (_3267 * _3224.w);
                        float _4642 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3280 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3281 = sqrt(_3267) * _3243.w;
                        float _3284 = 1.39999997615814208984375 / (_3281 + 1.39999997615814208984375);
                        float _3285 = _3284 * _3284;
                        float _3288 = ((1.0 - _3285) * _3274) + _3285;
                        float _3291 = _3281 * _3281;
                        float _3295 = ((isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0))) * _3280) / ((_3291 * 0.699999988079071044921875) + 1.0);
                        float _3299 = (-0.0) - _1908;
                        float _3300 = (-0.0) - _1909;
                        float _3301 = (-0.0) - _1910;
                        float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                        float _3306 = _3305 * _3299;
                        float _3307 = _3305 * _3300;
                        float _3308 = _3305 * _3301;
                        float _3315 = exp2(log2(1.0 / ((_3291 * 3.5) + 5.0)) * 0.25);
                        float _3316 = 1.0 - _848;
                        float _3323 = sqrt(1.0 - ((1.0 - (_3316 * _3316)) * (1.0 - (_3315 * _3315))));
                        float _3324 = _3323 * _3323;
                        float _3325 = _3324 * _3324;
                        float _3326 = _3306 + _3271;
                        float _3327 = _3307 + _3272;
                        float _3328 = _3308 + _3273;
                        float _3332 = inversesqrt(dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328)));
                        float _3336 = dot(vec3(_773, _776, _779), vec3(_3306, _3307, _3308));
                        float _4658 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3339 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3340 = dot(vec3(_773, _776, _779), vec3(_3332 * _3326, _3332 * _3327, _3332 * _3328));
                        float _4669 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3343 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3347 = ((_3343 * _3343) * (_3325 + (-1.0))) + 1.0;
                        float _3348 = _3284 * _3324;
                        float _3349 = _3348 * _3348;
                        float _3352 = ((1.0 - _3349) * _3274) + _3349;
                        float _4680 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3353 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3354 = 1.0 - _3324;
                        float _3364 = (0.5 / (((_3353 * ((_3339 * _3354) + _3324)) + 9.9999999392252902907785028219223e-09) + (((_3353 * _3354) + _3324) * _3339))) * _3353;
                        float _4691 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3375 = (((_3325 * 3.1415927410125732421875) * (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) / ((_3347 * _3347) * ((_3291 * 2.1991131305694580078125) + 3.141590118408203125))) * _3280;
                        _3133 = (_3295 * _3243.x) + _3201;
                        _3134 = (_3295 * _3243.y) + _3202;
                        _3135 = (_3295 * _3243.z) + _3203;
                        _3130 = (_3375 * _3260.x) + _3198;
                        _3131 = (_3375 * _3260.y) + _3199;
                        _3132 = (_3375 * _3260.z) + _3200;
                        if (_3205 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3198 = _3130;
                            _3199 = _3131;
                            _3200 = _3132;
                            _3201 = _3133;
                            _3202 = _3134;
                            _3203 = _3135;
                            _3204 = _3205;
                        }
                    }
                    frontier_phi_66_pred = _3135;
                    frontier_phi_66_pred_1 = _3134;
                    frontier_phi_66_pred_2 = _3133;
                    frontier_phi_66_pred_3 = _3132;
                    frontier_phi_66_pred_4 = _3131;
                    frontier_phi_66_pred_5 = _3130;
                }
                _2940 = frontier_phi_66_pred;
                _2938 = frontier_phi_66_pred_1;
                _2936 = frontier_phi_66_pred_2;
                _2934 = frontier_phi_66_pred_3;
                _2932 = frontier_phi_66_pred_4;
                _2930 = frontier_phi_66_pred_5;
                uint _3081 = _3080 + 1u;
                if (_3081 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3074 = _2930;
                    _3075 = _2932;
                    _3076 = _2934;
                    _3077 = _2936;
                    _3078 = _2938;
                    _3079 = _2940;
                    _3080 = _3081;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
        }
        uvec4 _2943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2944 = _2943.z;
        uint _2946 = (_2944 >> 8u) & 15u;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        if (((4294967295u << _2946) & _2849) == 0u)
        {
            _3042 = _2929;
            _3044 = _2931;
            _3046 = _2933;
            _3048 = _2935;
            _3050 = _2937;
            _3052 = _2939;
        }
        else
        {
            float _3067 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
            float _3068 = _3067 * _1908;
            float _3069 = _3067 * _1909;
            float _3070 = _3067 * _1910;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2946 < ((_2944 >> 12u) & 15u))
            {
                float _3043;
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3181 = _2929;
                float _3182 = _2931;
                float _3183 = _2933;
                float _3184 = _2935;
                float _3185 = _2937;
                float _3186 = _2939;
                uint _3187 = _2946;
                uint _3196;
                bool _3197;
                for (;;)
                {
                    _3196 = texelFetch(g_lightClassification, int((((_2843 << 5u) + (_2829 << 9u)) + (_3187 << 2u)) >> 2u)).x;
                    _3197 = _3196 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3197)
                    {
                        frontier_phi_72_pred = _3186;
                        frontier_phi_72_pred_1 = _3185;
                        frontier_phi_72_pred_2 = _3184;
                        frontier_phi_72_pred_3 = _3183;
                        frontier_phi_72_pred_4 = _3182;
                        frontier_phi_72_pred_5 = _3181;
                    }
                    else
                    {
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3393 = _3181;
                        float _3394 = _3182;
                        float _3395 = _3183;
                        float _3396 = _3184;
                        float _3397 = _3185;
                        float _3398 = _3186;
                        uint _3399 = _3196;
                        uint _3400;
                        vec4 _3425;
                        float _3426;
                        vec4 _3441;
                        vec3 _3453;
                        vec4 _3468;
                        vec4 _3484;
                        float _3530;
                        bool _3531;
                        for (;;)
                        {
                            uint _3410 = ((_3187 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3399));
                            _3400 = (_3399 + 4294967295u) & _3399;
                            uint _3412 = _3410 * 40u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            _3426 = _3425.w;
                            uint _3428 = (_3410 * 40u) + 4u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3410 * 40u) + 8u;
                            _3453 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x));
                            uint _3455 = (_3410 * 40u) + 16u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3471 = (_3410 * 40u) + 20u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3486 = (_3410 * 40u) + 24u;
                            vec4 _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3505 = (_3410 * 40u) + 28u;
                            vec4 _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            _3530 = fma(_1910, _3518.z, fma(_1909, _3518.y, _3518.x * _1908)) + _3518.w;
                            _3531 = !((fma(_1910, _3499.z, fma(_1909, _3499.y, _3499.x * _1908)) + _3499.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3531)
                            {
                                float _3558 = _3425.x - _1908;
                                float _3559 = _3425.y - _1909;
                                float _3560 = _3425.z - _1910;
                                float _3561 = dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560));
                                float _3564 = inversesqrt(_3561);
                                float _3565 = _3564 * _3558;
                                float _3566 = _3564 * _3559;
                                float _3567 = _3564 * _3560;
                                float _3571 = 1.0 - (_3561 / (_3426 * _3426));
                                float _4702 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3576 = sqrt(_3561) * _3441.w;
                                float _3578 = 1.39999997615814208984375 / (_3576 + 1.39999997615814208984375);
                                float _3579 = _3578 * _3578;
                                float _3582 = ((1.0 - _3579) * dot(vec3(_3565, _3566, _3567), vec3(_773, _776, _779))) + _3579;
                                float _3585 = _3576 * _3576;
                                float _3589 = (fma(_1910, _3468.z, fma(_1909, _3468.y, _3468.x * _1908)) + _3468.w) / _3530;
                                float _3590 = (fma(_1910, _3484.z, fma(_1909, _3484.y, _3484.x * _1908)) + _3484.w) / _3530;
                                float _3594 = 1.0 - dot(vec2(_3589, _3590), vec2(_3589, _3590));
                                float _4718 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3595 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3596 = _3595 * (((isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0))) * _3572) / ((_3585 * 0.699999988079071044921875) + 1.0));
                                float _3608 = exp2(log2(1.0 / ((_3585 * 3.5) + 5.0)) * 0.25);
                                float _3609 = 1.0 - _848;
                                float _3616 = sqrt(1.0 - ((1.0 - (_3609 * _3609)) * (1.0 - (_3608 * _3608))));
                                float _3617 = _3616 * _3616;
                                float _3618 = _3617 * _3617;
                                float _3619 = _3565 - _3068;
                                float _3620 = _3566 - _3069;
                                float _3621 = _3567 - _3070;
                                float _3625 = inversesqrt(dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621)));
                                float _3629 = dot(vec3(_773, _776, _779), vec3((-0.0) - _3068, (-0.0) - _3069, (-0.0) - _3070));
                                float _4729 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3632 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3633 = dot(vec3(_773, _776, _779), vec3(_3625 * _3619, _3625 * _3620, _3625 * _3621));
                                float _4740 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3636 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3640 = ((_3636 * _3636) * (_3618 + (-1.0))) + 1.0;
                                float _3641 = _3578 * _3617;
                                float _3642 = _3641 * _3641;
                                float _3648 = ((1.0 - _3642) * dot(vec3(_773, _776, _779), vec3(_3565, _3566, _3567))) + _3642;
                                float _4751 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3650 = 1.0 - _3617;
                                float _3660 = (0.5 / (((_3649 * ((_3632 * _3650) + _3617)) + 9.9999999392252902907785028219223e-09) + (((_3649 * _3650) + _3617) * _3632))) * _3649;
                                float _4762 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3670 = (_3595 * _3572) * (((_3618 * 3.1415927410125732421875) * (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) / ((_3640 * _3640) * ((_3585 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3596 * _3441.y;
                                frontier_phi_78_pred_1 = _3596 * _3441.x;
                                frontier_phi_78_pred_2 = _3670 * _3453.z;
                                frontier_phi_78_pred_3 = _3670 * _3453.y;
                                frontier_phi_78_pred_4 = _3670 * _3453.x;
                                frontier_phi_78_pred_5 = _3596 * _3441.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3678 = frontier_phi_78_pred;
                            _3677 = frontier_phi_78_pred_1;
                            _3676 = frontier_phi_78_pred_2;
                            _3675 = frontier_phi_78_pred_3;
                            _3674 = frontier_phi_78_pred_4;
                            _3679 = frontier_phi_78_pred_5;
                            _3383 = _3677 + _3396;
                            _3384 = _3678 + _3397;
                            _3385 = _3679 + _3398;
                            _3380 = _3674 + _3393;
                            _3381 = _3675 + _3394;
                            _3382 = _3676 + _3395;
                            if (_3400 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3400;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3385;
                        frontier_phi_72_pred_1 = _3384;
                        frontier_phi_72_pred_2 = _3383;
                        frontier_phi_72_pred_3 = _3382;
                        frontier_phi_72_pred_4 = _3381;
                        frontier_phi_72_pred_5 = _3380;
                    }
                    _3053 = frontier_phi_72_pred;
                    _3051 = frontier_phi_72_pred_1;
                    _3049 = frontier_phi_72_pred_2;
                    _3047 = frontier_phi_72_pred_3;
                    _3045 = frontier_phi_72_pred_4;
                    _3043 = frontier_phi_72_pred_5;
                    uint _3188 = _3187 + 1u;
                    if (_3188 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3181 = _3043;
                        _3182 = _3045;
                        _3183 = _3047;
                        _3184 = _3049;
                        _3185 = _3051;
                        _3186 = _3053;
                        _3187 = _3188;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3053;
                frontier_phi_60_61_ladder_1 = _3051;
                frontier_phi_60_61_ladder_2 = _3047;
                frontier_phi_60_61_ladder_3 = _3045;
                frontier_phi_60_61_ladder_4 = _3043;
                frontier_phi_60_61_ladder_5 = _3049;
            }
            else
            {
                frontier_phi_60_61_ladder = _2939;
                frontier_phi_60_61_ladder_1 = _2937;
                frontier_phi_60_61_ladder_2 = _2933;
                frontier_phi_60_61_ladder_3 = _2931;
                frontier_phi_60_61_ladder_4 = _2929;
                frontier_phi_60_61_ladder_5 = _2935;
            }
            _3042 = frontier_phi_60_61_ladder_4;
            _3044 = frontier_phi_60_61_ladder_3;
            _3046 = frontier_phi_60_61_ladder_2;
            _3048 = frontier_phi_60_61_ladder_5;
            _3050 = frontier_phi_60_61_ladder_1;
            _3052 = frontier_phi_60_61_ladder;
        }
        float _3057 = isnan(1.0) ? _832 : (isnan(_832) ? 1.0 : min(_832, 1.0));
        _2862 = (_3057 * _3048) + _2374;
        _2864 = (_3057 * _3050) + _2376;
        _2866 = (_3057 * _3052) + _2378;
        _2868 = ((_3042 * _816) * _3057) + _2712;
        _2870 = ((_3044 * _818) * _3057) + _2714;
        _2872 = ((_3046 * _819) * _3057) + _2716;
    }
    else
    {
        _2862 = _2374;
        _2864 = _2376;
        _2866 = _2378;
        _2868 = _2712;
        _2870 = _2714;
        _2872 = _2716;
    }
    float _4778 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4789 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4800 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    uint _2892 = _238 + 6u;
    float _2900 = _754 / cbSceneParam._m0[86u].x;
    float _2901 = _755 / cbSceneParam._m0[86u].y;
    vec4 _2915 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2900, _2901, (log2((isnan(cbSceneParam._m0[77u].w) ? _688 : (isnan(_688) ? cbSceneParam._m0[77u].w : min(_688, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2917 = _2915.x;
    float _2918 = _2915.y;
    float _2919 = _2915.z;
    float _2920 = _2915.w;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_688 > cbSceneParam._m0[78u].w)
    {
        float _2954 = isnan(_688) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _688 : min(cbSceneParam._m0[80u].w, _688));
        float _2955 = _2954 / _688;
        float _2966 = _2955 * _739;
        float _2967 = _740 * _2955;
        float _2968 = (-0.0) - _2967;
        float _2970 = _2955 * _741;
        float _2972 = (cbSceneParam._m0[77u].w * _2968) / _2954;
        float _2973 = _2972 + cbSceneParam._m0[79u].w;
        float _2974 = cbSceneParam._m0[79u].w - _2967;
        float _2980 = sqrt(((_2966 * _2966) + (_2967 * _2967)) + (_2970 * _2970));
        float _2983 = (1.0 - (cbSceneParam._m0[77u].w / _2954)) * _2980;
        float _2988 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2990 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3143;
        if (abs((_2968 - _2972) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3143 = ((((_2973 > 0.0) ? exp2(_2988 * _2973) : (2.0 - exp2(_2990 * _2973))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2983;
        }
        else
        {
            float _3103 = 1.0 / cbSceneParam._m0[80u].x;
            float _3104 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : max(_2973, _2974));
            float _3105 = isnan(_2974) ? _2973 : (isnan(_2973) ? _2974 : min(_2973, _2974));
            float _3114 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : min(_3104, 0.0));
            float _3115 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : min(_3105, 0.0));
            _3143 = ((abs(_2980 / _2968) * cbSceneParam._m0[80u].y) * ((((_3114 - _3115) * 2.0) - ((exp2(_2988 * (isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0)))) - exp2(_2988 * (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))))) * _3103)) - ((exp2(_2990 * _3114) - exp2(_2990 * _3115)) * _3103))) + (_2983 * cbSceneParam._m0[80u].z);
        }
        vec4 _3145 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2900, _2901, 1.0), 0.0);
        float _3154 = exp2((_3143 * (-1.44269502162933349609375)) * (1.0 - _3145.w));
        float _3155 = log2(_3154);
        float _3171 = log2(_2920);
        _2992 = (exp2(_3171 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3155 * cbSceneParam._m0[78u].x)) * _3145.x) / cbSceneParam._m0[78u].x)) + _2917;
        _2994 = (exp2(_3171 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3155 * cbSceneParam._m0[78u].y)) * _3145.y) / cbSceneParam._m0[78u].y)) + _2918;
        _2996 = (exp2(_3171 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3155 * cbSceneParam._m0[78u].z)) * _3145.z) / cbSceneParam._m0[78u].z)) + _2919;
        _2998 = _3154 * _2920;
    }
    else
    {
        _2992 = _2917;
        _2994 = _2918;
        _2996 = _2919;
        _2998 = _2920;
    }
    float _3010 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3011 = _3010 == 3.0;
    float _3012 = log2(_2998);
    float _3019 = exp2(_3012 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2862 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _832))) + ((_2868 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1640)) * cbPerFrame._m0[3u].x));
    float _3020 = exp2(_3012 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2864 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _832))) + ((_2870 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1640)) * cbPerFrame._m0[3u].x));
    float _3021 = exp2(_3012 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2866 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _832))) + ((_2872 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1640)) * cbPerFrame._m0[3u].x));
    float _3030 = (_3010 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3030 * (_3011 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2992)));
    SV_Target.y = _3030 * (_3011 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2994)));
    SV_Target.z = _3030 * (_3011 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2996)));
    SV_Target.w = cbInstanceData._m0[_2892].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2892].w;
}


