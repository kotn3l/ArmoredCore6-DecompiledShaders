#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1352;
float _4017;
float _4018;
float _4019;
float _4020;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4029 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4040 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4051 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = _335.x * cbMtdParam._m0[11u].x;
    float _341 = _335.y * cbMtdParam._m0[11u].y;
    float _342 = _335.z * cbMtdParam._m0[11u].z;
    vec4 _361 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _414 = _412.x;
    float _426 = dot(vec4(_414, _412.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _443 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _380.x) * 2.0) - ((((_414 - _426) * cbMtdParam._m0[23u].w) + _426) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4062 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _451 = (_444 * ((_361.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _452 = (_444 * ((_361.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _453 = (_444 * ((_361.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _492 = _490.x;
    float _502 = dot(vec4(_492, _490.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _516 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _380.y) * 2.0) - ((((_492 - _502) * cbMtdParam._m0[23u].w) + _502) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4073 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _524 = (_517 * ((_470.x * cbMtdParam._m0[13u].x) - _451)) + _451;
    float _525 = (_517 * ((_470.y * cbMtdParam._m0[13u].y) - _452)) + _452;
    float _526 = (_517 * ((_470.z * cbMtdParam._m0[13u].z) - _453)) + _453;
    float _530 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _524;
    float _533 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _525;
    float _536 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _526;
    float _543 = ((_524 - _530) * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) + _530;
    float _544 = ((_525 - _533) * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) + _533;
    float _545 = ((_526 - _536) * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) + _536;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _597 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _599 = _597.x;
    float _600 = _597.y;
    float _601 = _597.z;
    float _608 = ((_580.x - _599) * _444) + _599;
    float _609 = ((_580.y - _600) * _444) + _600;
    float _610 = ((_580.z - _601) * _444) + _601;
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _635 = ((_622.z - _610) * _517) + _610;
    float _638 = ((((_622.x - _608) * _517) + _608) * 2.0) + (-1.0);
    float _639 = ((((_622.y - _609) * _517) + _609) * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _4084 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _645 = sqrt(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))));
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _677 = (_638 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_557.x * 2.0) + (-1.0)))) + (((_665.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _678 = (_639 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_557.y * 2.0) + (-1.0)))) + (((_665.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _704 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _706 = _704.x;
    float _724 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _706) * _444) + _706;
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _297) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _298) + cbTextureTilingScale._m0[21u].w));
    float _742 = ((_737.x - _724) * _517) + _724;
    float _746 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _742) * cbMtdParam._m0[19u].z) + _742;
    float _751 = (((_557.z - _635) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _635;
    float _755 = ((_665.z - _751) * cbMtdParam._m0[19u].w) + _751;
    float _757 = cbMtdParam._m0[22u].x + _665.w;
    float _760 = fma(_645, _244 * NORMAL.x, fma(_678, _251 * TANGENT.x, (_237 * _229) * _677));
    float _763 = fma(_645, _244 * NORMAL.y, fma(_678, _251 * TANGENT.y, (_237 * _230) * _677));
    float _766 = fma(_645, _244 * NORMAL.z, fma(_678, _251 * TANGENT.z, (_237 * _231) * _677));
    float _770 = inversesqrt(dot(vec3(_760, _763, _766), vec3(_760, _763, _766)));
    float _771 = _770 * _760;
    float _772 = _770 * _763;
    float _773 = _770 * _766;
    float _4095 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _774 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4117 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4128 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4139 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4150 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _779 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _793 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _844 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _834);
    float _845 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _834);
    float _846 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _834);
    float _850 = inversesqrt(dot(vec3(_844, _845, _846), vec3(_844, _845, _846)));
    float _851 = _844 * _850;
    float _852 = _845 * _850;
    float _853 = _846 * _850;
    vec4 _858 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _860 = _858.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1032 = sqrt(((_844 * _844) + (_845 * _845)) + (_846 * _846));
        float _1038 = (cbMatDynParam._m0[5u].x * _1032) + cbMatDynParam._m0[5u].y;
        float _4161 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1043 = (cbMatDynParam._m0[5u].z * _1032) + cbMatDynParam._m0[5u].w;
        float _4172 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) - _1039)) + _1039) < ((_860 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _871 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _872 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _890 = fma(_773, cbSceneParam._m0[5u].z, fma(_772, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _771));
    float _893 = fma(_773, cbSceneParam._m0[6u].z, fma(_772, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _771));
    float _896 = fma(_773, cbSceneParam._m0[7u].z, fma(_772, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _771));
    uint _909 = _278 + 9u;
    uint _910 = _909 + uint(cbMatDynParam._m0[0u].w);
    float _916 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * cbInstanceData._m0[_910].x;
    float _917 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * cbInstanceData._m0[_910].y;
    float _918 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * cbInstanceData._m0[_910].z;
    float _4183 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _922 = 1.0 - _779;
    float _923 = _919 * _922;
    float _924 = _920 * _922;
    float _925 = _921 * _922;
    float _930 = (_919 + (-0.039999999105930328369140625)) * _779;
    float _931 = (_920 + (-0.039999999105930328369140625)) * _779;
    float _932 = (_921 + (-0.039999999105930328369140625)) * _779;
    float _933 = _930 + 0.039999999105930328369140625;
    float _935 = _931 + 0.039999999105930328369140625;
    float _936 = _932 + 0.039999999105930328369140625;
    vec4 _945 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _871, cbSceneParam._m0[86u].y * _872));
    float _949 = ((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * TEXCOORD_5.w) * _945.x;
    float _950 = dot(vec3(_771, _772, _773), vec3(_851, _852, _853));
    float _953 = _950 * 2.0;
    float _957 = (_953 * _771) - _851;
    float _958 = (_953 * _772) - _852;
    float _959 = (_953 * _773) - _853;
    float _963 = abs(dot(vec3(_851, _852, _853), vec3(_771, _772, _773)));
    float _4216 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _965 = sqrt(_774);
    float _978 = exp2((_965 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_965 * 3.0));
    float _984 = (1.0 - _978) * ((_965 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _985 = _978 * _965;
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1351;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1076 = fma(_1021, cbModelParam._m0[26u].z, fma(_1017, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013));
        float _1080 = fma(_1021, cbModelParam._m0[27u].z, fma(_1017, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013));
        float _1084 = fma(_1021, cbModelParam._m0[28u].z, fma(_1017, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013));
        float _1109 = _1013 + _771;
        float _1110 = _1017 + _772;
        float _1111 = _1021 + _773;
        float _1121 = fma(_1111, cbModelParam._m0[26u].z, fma(_1110, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1109)) - _1076;
        float _1122 = fma(_1111, cbModelParam._m0[27u].z, fma(_1110, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1109)) - _1080;
        float _1123 = fma(_1111, cbModelParam._m0[28u].z, fma(_1110, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1109)) - _1084;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1076 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1080 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[34u].z) + ((((((_1084 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1179 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1145.x + (-0.5));
        float _1181 = _1179 * (_1145.y + (-0.5));
        float _1182 = _1179 * (_1145.z + (-0.5));
        float _1189 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1152.x + (-0.5));
        float _1191 = _1189 * (_1152.y + (-0.5));
        float _1192 = _1189 * (_1152.z + (-0.5));
        float _1199 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1159.x + (-0.5));
        float _1201 = _1199 * (_1159.y + (-0.5));
        float _1202 = _1199 * (_1159.z + (-0.5));
        float _1209 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1166.x + (-0.5));
        float _1211 = _1209 * (_1166.y + (-0.5));
        float _1212 = _1209 * (_1166.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1233 = (dot(vec3(_771, _772, _773), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1243 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4264 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1245 + 1.0))) + _1250) * _1213;
        float _1260 = _1181 * 0.5;
        float _1261 = _1191 * 0.5;
        float _1262 = _1201 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_771, _772, _773), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4297 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1287 + 1.0))) + _1292) * _1214;
        float _1302 = _1182 * 0.5;
        float _1303 = _1192 * 0.5;
        float _1304 = _1202 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_771, _772, _773), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4330 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1329 + 1.0))) + _1334) * _1215;
        _1351 = _1182;
        _1353 = _1181;
        _1354 = _1180;
        _1355 = _1192;
        _1356 = _1191;
        _1357 = _1190;
        _1358 = _1202;
        _1359 = _1201;
        _1360 = _1200;
        _1361 = _1215;
        _1362 = _1214;
        _1363 = _1213;
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1352;
        _1353 = _1352;
        _1354 = _1352;
        _1355 = _1352;
        _1356 = _1352;
        _1357 = _1352;
        _1358 = _1352;
        _1359 = _1352;
        _1360 = _1352;
        _1361 = _1352;
        _1362 = _1352;
        _1363 = _1352;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1393 = fma(_1021, cbModelParam._m0[30u].z, fma(_1017, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1013));
        float _1397 = fma(_1021, cbModelParam._m0[31u].z, fma(_1017, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1013));
        float _1401 = fma(_1021, cbModelParam._m0[32u].z, fma(_1017, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1013));
        float _1424 = _1013 + _771;
        float _1425 = _1017 + _772;
        float _1426 = _1021 + _773;
        float _1436 = fma(_1426, cbModelParam._m0[30u].z, fma(_1425, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1424)) - _1393;
        float _1437 = fma(_1426, cbModelParam._m0[31u].z, fma(_1425, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1424)) - _1397;
        float _1438 = fma(_1426, cbModelParam._m0[32u].z, fma(_1425, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1424)) - _1401;
        float _1442 = inversesqrt(dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438)));
        float _1455 = ((_1442 * _1436) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1393 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1442 * _1437) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1397 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1442 * _1438) / cbModelParam._m0[35u].z) + ((((((_1401 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        float _1492 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1459.x + (-0.5));
        float _1494 = _1492 * (_1459.y + (-0.5));
        float _1495 = _1492 * (_1459.z + (-0.5));
        float _1502 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1466.x + (-0.5));
        float _1504 = _1502 * (_1466.y + (-0.5));
        float _1505 = _1502 * (_1466.z + (-0.5));
        float _1512 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1473.x + (-0.5));
        float _1514 = _1512 * (_1473.y + (-0.5));
        float _1515 = _1512 * (_1473.z + (-0.5));
        float _1522 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1480.x + (-0.5));
        float _1524 = _1522 * (_1480.y + (-0.5));
        float _1525 = _1522 * (_1480.z + (-0.5));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = _1493 * 0.5;
        float _1530 = _1503 * 0.5;
        float _1531 = _1513 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_771, _772, _773), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4393 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1556 + 1.0))) + _1561) * _1526;
        float _1571 = _1494 * 0.5;
        float _1572 = _1504 * 0.5;
        float _1573 = _1514 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_771, _772, _773), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4426 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1598 + 1.0))) + _1603) * _1527;
        float _1613 = _1495 * 0.5;
        float _1614 = _1505 * 0.5;
        float _1615 = _1515 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_771, _772, _773), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4459 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1640 + 1.0))) + _1645) * _1528;
        _1662 = _1495;
        _1663 = _1494;
        _1664 = _1493;
        _1665 = _1505;
        _1666 = _1504;
        _1667 = _1503;
        _1668 = _1515;
        _1669 = _1514;
        _1670 = _1513;
        _1671 = _1528;
        _1672 = _1527;
        _1673 = _1526;
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
    }
    else
    {
        _1662 = _1352;
        _1663 = _1352;
        _1664 = _1352;
        _1665 = _1352;
        _1666 = _1352;
        _1667 = _1352;
        _1668 = _1352;
        _1669 = _1352;
        _1670 = _1352;
        _1671 = _1352;
        _1672 = _1352;
        _1673 = _1352;
        _1674 = 0.0;
        _1675 = 0.0;
        _1676 = 0.0;
    }
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1364)) + _1364;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1365)) + _1365;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1366)) + _1366;
    float _1709 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1686));
    float _1730 = _957 * 0.5;
    float _1731 = _958 * 0.5;
    float _1732 = _959 * 0.5;
    float _1733 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1736 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1739 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1773;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1746 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1351, _1355, _1358, _1361));
        float _1750 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1754 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1761 = dot(vec4(cbModelParam._m0[39u]), vec4(_1730, _1731, _1732, 1.0));
        _1773 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1773 = 1.0;
    }
    float _1784;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1775 = dot(vec4(cbModelParam._m0[40u]), vec4(_1730, _1731, _1732, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1788 = (_1784 * cbModelParam._m0[1u].x) + (_1773 * (1.0 - cbModelParam._m0[1u].x));
    float _1798 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _774);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1798 : min(cbModelParam._m0[25u].z, _1798));
    float _1881;
    float _1883;
    float _1885;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1848 = fma(_1021, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1013)) + cbModelParam._m0[13u].w;
        float _1852 = fma(_1021, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1013)) + cbModelParam._m0[14u].w;
        float _1856 = fma(_1021, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1013)) + cbModelParam._m0[15u].w;
        float _1859 = fma(_959, cbModelParam._m0[13u].z, fma(_958, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _957));
        float _1862 = fma(_959, cbModelParam._m0[14u].z, fma(_958, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _957));
        float _1865 = fma(_959, cbModelParam._m0[15u].z, fma(_958, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _957));
        float _1893;
        if (_1859 > 0.0)
        {
            _1893 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1893 = frontier_phi_17_15_ladder;
        }
        float _2065;
        if (_1862 > 0.0)
        {
            _2065 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2065 = frontier_phi_26_22_ladder;
        }
        float _2360;
        if (_1865 > 0.0)
        {
            _2360 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2360 = frontier_phi_38_33_ladder;
        }
        float _2362 = isnan(_2065) ? _1893 : (isnan(_1893) ? _2065 : min(_1893, _2065));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1859) + _1848;
        float _2368 = (_2363 * _1862) + _1852;
        float _2369 = (_2363 * _1865) + _1856;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2370;
        float _2374 = _2370 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 > _2374) || ((_2368 < _2372) || ((_2367 < _2372) || (_2367 > _2374))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2369, cbModelParam._m0[9u].z, fma(_2368, cbModelParam._m0[9u].y, _2367 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2369, cbModelParam._m0[10u].z, fma(_2368, cbModelParam._m0[10u].y, _2367 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2369, cbModelParam._m0[11u].z, fma(_2368, cbModelParam._m0[11u].y, _2367 * cbModelParam._m0[11u].x))), _1799);
            frontier_phi_16_38_ladder = _2514.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2514.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2514.x * cbModelParam._m0[1u].y;
        }
        _1881 = frontier_phi_16_38_ladder_2;
        _1883 = frontier_phi_16_38_ladder_1;
        _1885 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1869 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_957, _958, _959), _1799);
        _1881 = _1869.x * cbModelParam._m0[1u].y;
        _1883 = _1869.y * cbModelParam._m0[1u].y;
        _1885 = _1869.z * cbModelParam._m0[1u].y;
    }
    float _1889 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _774);
    float _1890 = isnan(_1889) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1889 : min(cbModelParam._m0[25u].w, _1889));
    float _1980;
    float _1982;
    float _1984;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1944 = fma(_1021, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1013)) + cbModelParam._m0[21u].w;
        float _1948 = fma(_1021, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1013)) + cbModelParam._m0[22u].w;
        float _1952 = fma(_1021, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1013)) + cbModelParam._m0[23u].w;
        float _1955 = fma(_959, cbModelParam._m0[21u].z, fma(_958, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _957));
        float _1958 = fma(_959, cbModelParam._m0[22u].z, fma(_958, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _957));
        float _1961 = fma(_959, cbModelParam._m0[23u].z, fma(_958, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _957));
        float _2070;
        if (_1955 > 0.0)
        {
            _2070 = abs((1.0 - _1944) / _1955);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1944 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2070 = frontier_phi_28_24_ladder;
        }
        float _2387;
        if (_1958 > 0.0)
        {
            _2387 = abs((1.0 - _1948) / _1958);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1948 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2387 = frontier_phi_40_35_ladder;
        }
        float _2725;
        if (_1961 > 0.0)
        {
            _2725 = abs((1.0 - _1952) / _1961);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1952 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2725 = frontier_phi_50_47_ladder;
        }
        float _2727 = isnan(_2387) ? _2070 : (isnan(_2070) ? _2387 : min(_2070, _2387));
        float _2728 = isnan(_2725) ? _2727 : (isnan(_2727) ? _2725 : min(_2727, _2725));
        float _2732 = (_2728 * _1955) + _1944;
        float _2733 = (_2728 * _1958) + _1948;
        float _2734 = (_2728 * _1961) + _1952;
        float _2735 = _2728 * 9.9999997473787516355514526367188e-05;
        float _2736 = (-1.0) - _2735;
        float _2738 = _2735 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2734 > _2738) || ((_2734 < _2736) || ((_2733 > _2738) || ((_2733 < _2736) || ((_2732 < _2736) || (_2732 > _2738))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2856 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2734, cbModelParam._m0[17u].z, fma(_2733, cbModelParam._m0[17u].y, _2732 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2734, cbModelParam._m0[18u].z, fma(_2733, cbModelParam._m0[18u].y, _2732 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2734, cbModelParam._m0[19u].z, fma(_2733, cbModelParam._m0[19u].y, _2732 * cbModelParam._m0[19u].x))), _1890);
            frontier_phi_25_50_ladder = _2856.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2856.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2856.x * cbModelParam._m0[1u].z;
        }
        _1980 = frontier_phi_25_50_ladder_2;
        _1982 = frontier_phi_25_50_ladder_1;
        _1984 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_957, _958, _959), _1890);
        _1980 = _1964.x * cbModelParam._m0[1u].z;
        _1982 = _1964.y * cbModelParam._m0[1u].z;
        _1984 = _1964.z * cbModelParam._m0[1u].z;
    }
    float _1997 = (((_984 * _933) + _985) * _949) * ((cbModelParam._m0[1u].w * (_1980 - _1881)) + _1881);
    float _1999 = (((_984 * _935) + _985) * _949) * ((cbModelParam._m0[1u].w * (_1982 - _1883)) + _1883);
    float _2001 = (((_984 * _936) + _985) * _949) * ((cbModelParam._m0[1u].w * (_1984 - _1885)) + _1885);
    float _2004 = fma(_2001, cbSceneParam._m0[89u].z, fma(_1999, cbSceneParam._m0[89u].y, _1997 * cbSceneParam._m0[89u].x));
    float _2007 = fma(_2001, cbSceneParam._m0[90u].z, fma(_1999, cbSceneParam._m0[90u].y, _1997 * cbSceneParam._m0[90u].x));
    float _2010 = fma(_2001, cbSceneParam._m0[91u].z, fma(_1999, cbSceneParam._m0[91u].y, _1997 * cbSceneParam._m0[91u].x));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2052 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2056 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2057 = _2044 / _2056;
    float _2058 = _2048 / _2056;
    float _2059 = _2052 / _2056;
    float _2206;
    float _2207;
    float _2208;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2086 = ((uint(_2059 > cbSceneParam._m0[59u].y) + uint(_2059 > cbSceneParam._m0[59u].x)) + uint(_2059 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2087 = _2086 + 43u;
        uint _2095 = _2086 + 44u;
        uint _2103 = _2086 + 45u;
        uint _2111 = _2086 + 46u;
        float _2122 = fma(_2056, cbSceneParam._m0[_2087].w, fma(_2052, cbSceneParam._m0[_2087].z, fma(_2048, cbSceneParam._m0[_2087].y, _2044 * cbSceneParam._m0[_2087].x)));
        float _2126 = fma(_2056, cbSceneParam._m0[_2095].w, fma(_2052, cbSceneParam._m0[_2095].z, fma(_2048, cbSceneParam._m0[_2095].y, _2044 * cbSceneParam._m0[_2095].x)));
        float _2134 = fma(_2056, cbSceneParam._m0[_2111].w, fma(_2052, cbSceneParam._m0[_2111].z, fma(_2048, cbSceneParam._m0[_2111].y, _2044 * cbSceneParam._m0[_2111].x)));
        float _2139 = cbSceneParam._m0[33u].z * _2134;
        float _2141 = cbSceneParam._m0[33u].w * _2134;
        float _2144 = fma(_2056, cbSceneParam._m0[_2103].w, fma(_2052, cbSceneParam._m0[_2103].z, fma(_2048, cbSceneParam._m0[_2103].y, _2044 * cbSceneParam._m0[_2103].x))) / _2134;
        float _2192 = (cbSceneParam._m0[33u].x - sqrt(((_2058 * _2058) + (_2057 * _2057)) + (_2059 * _2059))) * cbSceneParam._m0[33u].y;
        float _4585 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2199 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2139 + _2122) / _2134, (_2141 + _2126) / _2134), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 + _2122) / _2134, (_2126 - _2139) / _2134), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 - _2139) / _2134, (_2126 - _2141) / _2134), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 - _2141) / _2134, (_2139 + _2126) / _2134), _2144), 0.0)).x), vec4(0.25)));
        _2206 = 1.0 - (_2199 * cbSceneParam._m0[34u].x);
        _2207 = 1.0 - (_2199 * cbSceneParam._m0[34u].y);
        _2208 = 1.0 - (_2199 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2206 = 1.0;
        _2207 = 1.0;
        _2208 = 1.0;
    }
    float _2272;
    float _2274;
    float _2276;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2260 = fma(_2056, cbSceneParam._m0[63u].w, fma(_2052, cbSceneParam._m0[63u].z, fma(_2048, cbSceneParam._m0[63u].y, _2044 * cbSceneParam._m0[63u].x)));
        float _2261 = fma(_2056, cbSceneParam._m0[60u].w, fma(_2052, cbSceneParam._m0[60u].z, fma(_2048, cbSceneParam._m0[60u].y, _2044 * cbSceneParam._m0[60u].x))) / _2260;
        float _2262 = fma(_2056, cbSceneParam._m0[61u].w, fma(_2052, cbSceneParam._m0[61u].z, fma(_2048, cbSceneParam._m0[61u].y, _2044 * cbSceneParam._m0[61u].x))) / _2260;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2261 >= cbSceneParam._m0[64u].x) && (_2262 >= cbSceneParam._m0[64u].y)) && (_2261 <= cbSceneParam._m0[64u].z)) && (_2262 <= cbSceneParam._m0[64u].w))
        {
            float _2400 = fma(_2056, cbSceneParam._m0[62u].w, fma(_2052, cbSceneParam._m0[62u].z, fma(_2048, cbSceneParam._m0[62u].y, _2044 * cbSceneParam._m0[62u].x))) / _2260;
            float _2404 = isnan(cbSceneParam._m0[41u].w) ? _2400 : (isnan(_2400) ? cbSceneParam._m0[41u].w : max(_2400, cbSceneParam._m0[41u].w));
            float _2447 = (cbSceneParam._m0[33u].x - sqrt(((_2058 * _2058) + (_2057 * _2057)) + (_2059 * _2059))) * cbSceneParam._m0[33u].y;
            float _4601 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
            float _2454 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2261, cbSceneParam._m0[33u].w + _2262), _2404), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2261, _2262 - cbSceneParam._m0[33u].z), _2404), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2261 - cbSceneParam._m0[33u].z, _2262 - cbSceneParam._m0[33u].w), _2404), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2261 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2262), _2404), 0.0)).x), vec4(0.25)));
            float _2458 = 1.0 - (_2454 * cbSceneParam._m0[34u].x);
            float _2459 = 1.0 - (_2454 * cbSceneParam._m0[34u].y);
            float _2460 = 1.0 - (_2454 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2460) ? _2208 : (isnan(_2208) ? _2460 : min(_2208, _2460));
            frontier_phi_37_36_ladder_1 = isnan(_2459) ? _2207 : (isnan(_2207) ? _2459 : min(_2207, _2459));
            frontier_phi_37_36_ladder_2 = isnan(_2458) ? _2206 : (isnan(_2206) ? _2458 : min(_2206, _2458));
        }
        else
        {
            frontier_phi_37_36_ladder = _2208;
            frontier_phi_37_36_ladder_1 = _2207;
            frontier_phi_37_36_ladder_2 = _2206;
        }
        _2272 = frontier_phi_37_36_ladder_2;
        _2274 = frontier_phi_37_36_ladder_1;
        _2276 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2272 = _2206;
        _2274 = _2207;
        _2276 = _2208;
    }
    uvec4 _2281 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2283 = _2281.x * 14u;
    uint _2284 = _2283 + 13u;
    float _2291 = _949 + (-1.0);
    float _2296 = (cbLight._m0[_2284].x * _2291) + 1.0;
    float _2297 = (cbLight._m0[_2284].y * _2291) + 1.0;
    float _2298 = (cbLight._m0[_2284].z * _2291) + 1.0;
    float _2299 = (cbLight._m0[_2284].w * _2291) + 1.0;
    uint _2300 = _2283 + 5u;
    float _2306 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
    uint _2310 = _2283 + 4u;
    float _2319 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
    uint _2323 = _2283 | 1u;
    float _2334 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_771, _772, _773));
    float _2337 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_771, _772, _773));
    float _4637 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _4648 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2342 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * 0.3183098733425140380859375;
    float _2344 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * 0.3183098733425140380859375;
    float _2351 = ((cbLight._m0[_2300].x * _2306) * _2344) + (((cbLight._m0[_2310].x * _2272) * _2319) * _2342);
    float _2352 = ((_2306 * cbLight._m0[_2300].y) * _2344) + (((cbLight._m0[_2310].y * _2274) * _2319) * _2342);
    float _2353 = ((_2306 * cbLight._m0[_2300].z) * _2344) + (((cbLight._m0[_2310].z * _2276) * _2319) * _2342);
    uvec4 _2357 = floatBitsToUint(cbLight._m0[_2283 + 12u]);
    bool _2359 = _2357.x == 0u;
    float _2461;
    float _2463;
    float _2465;
    if (_2359)
    {
        _2461 = _2351;
        _2463 = _2352;
        _2465 = _2353;
    }
    else
    {
        uint _2469 = _2283 + 6u;
        float _2485 = (dot(vec3(cbLight._m0[_2283 + 2u].xyz), vec3(_771, _772, _773)) * 0.5) + 0.5;
        float _2486 = _2485 * _2485;
        float _4659 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2487 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2488 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2461 = (((cbLight._m0[_2469].x * 0.3183098733425140380859375) * _2487) * _2488) + _2351;
        _2463 = (((cbLight._m0[_2469].y * 0.3183098733425140380859375) * _2487) * _2488) + _2352;
        _2465 = (((cbLight._m0[_2469].z * 0.3183098733425140380859375) * _2487) * _2488) + _2353;
    }
    bool _2468 = _2357.y == 0u;
    float _2523;
    float _2525;
    float _2527;
    if (_2468)
    {
        _2523 = _2461;
        _2525 = _2463;
        _2527 = _2465;
    }
    else
    {
        uint _2696 = _2283 + 7u;
        float _2712 = (dot(vec3(cbLight._m0[_2283 + 3u].xyz), vec3(_771, _772, _773)) * 0.5) + 0.5;
        float _2713 = _2712 * _2712;
        float _4675 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2714 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2715 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2523 = (((cbLight._m0[_2696].x * 0.3183098733425140380859375) * _2714) * _2715) + _2461;
        _2525 = (((cbLight._m0[_2696].y * 0.3183098733425140380859375) * _2714) * _2715) + _2463;
        _2527 = (((cbLight._m0[_2696].z * 0.3183098733425140380859375) * _2714) * _2715) + _2465;
    }
    uint _2530 = _2283 + 8u;
    float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _774) * 0.949999988079071044921875);
    float _2544 = _2543 * _2543;
    float _2545 = cbLight._m0[_2283].x + _851;
    float _2546 = cbLight._m0[_2283].y + _852;
    float _2547 = cbLight._m0[_2283].z + _853;
    float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
    float _2552 = _2551 * _2545;
    float _2553 = _2551 * _2546;
    float _2554 = _2551 * _2547;
    float _2555 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2283].xyz));
    float _4691 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2558 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _4702 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _2559 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2560 = dot(vec3(_771, _772, _773), vec3(_2552, _2553, _2554));
    float _4713 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2564 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2552, _2553, _2554));
    float _4724 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2568 = _2544 * _2544;
    float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
    float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
    float _2581 = 0.959999978542327880859375 - _930;
    float _2583 = 0.959999978542327880859375 - _931;
    float _2584 = 0.959999978542327880859375 - _932;
    float _2591 = 1.0 - _2544;
    float _2602 = (0.5 / (((_2559 * ((_2558 * _2591) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2591) + _2544) * _2558))) * _2558;
    float _4735 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2604 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
    uint _2618 = _2283 + 9u;
    float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _774) * 0.949999988079071044921875);
    float _2630 = _2629 * _2629;
    float _2631 = cbLight._m0[_2323].x + _851;
    float _2632 = cbLight._m0[_2323].y + _852;
    float _2633 = cbLight._m0[_2323].z + _853;
    float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
    float _2638 = _2637 * _2631;
    float _2639 = _2637 * _2632;
    float _2640 = _2637 * _2633;
    float _2641 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2323].xyz));
    float _4746 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2644 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2645 = dot(vec3(_771, _772, _773), vec3(_2638, _2639, _2640));
    float _4757 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2648 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2649 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2638, _2639, _2640));
    float _4768 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2653 = _2630 * _2630;
    float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
    float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0);
    float _2671 = 1.0 - _2630;
    float _2681 = (0.5 / (((_2559 * ((_2644 * _2671) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2671) + _2630) * _2644))) * _2644;
    float _4779 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2683 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
    float _2693 = (((((_2664 * _2581) + _933) * cbLight._m0[_2618].x) * _2683) * _2306) + ((((cbLight._m0[_2530].x * _2272) * ((_2580 * _2581) + _933)) * _2604) * _2319);
    float _2694 = (((((_2664 * _2583) + _935) * cbLight._m0[_2618].y) * _2683) * _2306) + ((((cbLight._m0[_2530].y * _2274) * ((_2580 * _2583) + _935)) * _2604) * _2319);
    float _2695 = (((((_2664 * _2584) + _936) * cbLight._m0[_2618].z) * _2683) * _2306) + ((((cbLight._m0[_2530].z * _2276) * ((_2580 * _2584) + _936)) * _2604) * _2319);
    float _2751;
    float _2753;
    float _2755;
    if (_2359)
    {
        _2751 = _2693;
        _2753 = _2694;
        _2755 = _2695;
    }
    else
    {
        uint _2757 = _2283 + 2u;
        uint _2761 = _2283 + 10u;
        float _2775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2757].w)) * _774) * 0.949999988079071044921875);
        float _2776 = _2775 * _2775;
        float _2777 = cbLight._m0[_2757].x + _851;
        float _2778 = cbLight._m0[_2757].y + _852;
        float _2779 = cbLight._m0[_2757].z + _853;
        float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
        float _2784 = _2783 * _2777;
        float _2785 = _2783 * _2778;
        float _2786 = _2783 * _2779;
        float _2787 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2757].xyz));
        float _4790 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2791 = dot(vec3(_771, _772, _773), vec3(_2784, _2785, _2786));
        float _4801 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2795 = dot(vec3(cbLight._m0[_2757].xyz), vec3(_2784, _2785, _2786));
        float _4812 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2799 = _2776 * _2776;
        float _2803 = ((_2794 * _2794) * (_2799 + (-1.0))) + 1.0;
        float _2810 = exp2(log2(1.0 - (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) * 5.0);
        float _2817 = 1.0 - _2776;
        float _2827 = (0.5 / (((_2559 * ((_2790 * _2817) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2817) + _2776) * _2790))) * _2790;
        float _4823 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2829 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2799 / ((_2803 * _2803) * 3.141590118408203125));
        float _2830 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2751 = (((((_2810 * _2581) + _933) * cbLight._m0[_2761].x) * _2829) * _2830) + _2693;
        _2753 = (((((_2810 * _2583) + _935) * cbLight._m0[_2761].y) * _2829) * _2830) + _2694;
        _2755 = (((((_2810 * _2584) + _936) * cbLight._m0[_2761].z) * _2829) * _2830) + _2695;
    }
    float _2861;
    float _2863;
    float _2865;
    if (_2468)
    {
        _2861 = _2751;
        _2863 = _2753;
        _2865 = _2755;
    }
    else
    {
        uint _2872 = _2283 + 3u;
        uint _2876 = _2283 + 11u;
        float _2890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2872].w)) * _774) * 0.949999988079071044921875);
        float _2891 = _2890 * _2890;
        float _2892 = cbLight._m0[_2872].x + _851;
        float _2893 = cbLight._m0[_2872].y + _852;
        float _2894 = cbLight._m0[_2872].z + _853;
        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
        float _2899 = _2898 * _2892;
        float _2900 = _2898 * _2893;
        float _2901 = _2898 * _2894;
        float _2902 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_2872].xyz));
        float _4839 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2906 = dot(vec3(_771, _772, _773), vec3(_2899, _2900, _2901));
        float _4850 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2910 = dot(vec3(cbLight._m0[_2872].xyz), vec3(_2899, _2900, _2901));
        float _4861 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2914 = _2891 * _2891;
        float _2918 = ((_2909 * _2909) * (_2914 + (-1.0))) + 1.0;
        float _2925 = exp2(log2(1.0 - (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) * 5.0);
        float _2932 = 1.0 - _2891;
        float _2942 = (0.5 / (((_2559 * ((_2905 * _2932) + _2891)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2932) + _2891) * _2905))) * _2905;
        float _4872 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2944 = (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2914 / ((_2918 * _2918) * 3.141590118408203125));
        float _2945 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2861 = (((((_2925 * _2581) + _933) * cbLight._m0[_2876].x) * _2944) * _2945) + _2751;
        _2863 = (((((_2925 * _2583) + _935) * cbLight._m0[_2876].y) * _2944) * _2945) + _2753;
        _2865 = (((((_2925 * _2584) + _936) * cbLight._m0[_2876].z) * _2944) * _2945) + _2755;
    }
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    if (_2281.y == 0u)
    {
        uvec4 _2966 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2967 = _2966.x;
        uint _2978 = uint((float(_2966.y) * floor(float(uint(cbSceneParam._m0[85u].y * _872) / _2967))) + floor(float(uint(cbSceneParam._m0[85u].x * _871) / _2967)));
        float _2988 = (log2(_2059 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2989 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        uint _2992 = uint(isnan(14.0) ? _2989 : (isnan(_2989) ? 14.0 : min(_2989, 14.0)));
        uvec4 _2997 = texelFetch(g_lightClusterGridBuffer, int(((_2992 << 2u) + (_2978 << 6u)) >> 2u));
        uint _2998 = _2997.x;
        uint _2999 = _2966.z;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        if (((((1u << ((_2999 >> 4u) & 15u)) + 4294967295u) & _2998) == 0u) || ((_2999 & 240u) == 0u))
        {
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
            _3088 = 0.0;
        }
        else
        {
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3087;
            float _3089;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            uint _3237 = 0u;
            uint _3246;
            bool _3247;
            for (;;)
            {
                _3246 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3237 << 2u)) >> 2u)).x;
                _3247 = _3246 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3247)
                {
                    frontier_phi_71_pred = _3236;
                    frontier_phi_71_pred_1 = _3235;
                    frontier_phi_71_pred_2 = _3234;
                    frontier_phi_71_pred_3 = _3233;
                    frontier_phi_71_pred_4 = _3232;
                    frontier_phi_71_pred_5 = _3231;
                }
                else
                {
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    uint _3382;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3234;
                    _3380 = _3235;
                    _3381 = _3236;
                    _3382 = _3246;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    for (;;)
                    {
                        uint _3386 = uint(findLSB(_3382)) + (_3237 << 5u);
                        uint _3383 = (_3382 + 4294967295u) & _3382;
                        uint _3388 = _3386 * 48u;
                        vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 3u)).x));
                        uint _3408 = (_3386 * 48u) + 4u;
                        vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 3u)).x));
                        uint _3427 = (_3386 * 48u) + 8u;
                        vec3 _3438 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3427)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 2u)).x));
                        float _3442 = _3402.x - _2057;
                        float _3443 = _3402.y - _2058;
                        float _3444 = _3402.z - _2059;
                        float _3445 = dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444));
                        float _3448 = inversesqrt(_3445);
                        float _3449 = _3448 * _3442;
                        float _3450 = _3448 * _3443;
                        float _3451 = _3448 * _3444;
                        float _3452 = dot(vec3(_890, _893, _896), vec3(_3449, _3450, _3451));
                        float _3457 = 1.0 - (_3445 * _3402.w);
                        float _4898 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3458 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3459 = sqrt(_3445) * _3421.w;
                        float _3462 = 1.39999997615814208984375 / (_3459 + 1.39999997615814208984375);
                        float _3463 = _3462 * _3462;
                        float _3466 = ((1.0 - _3463) * _3452) + _3463;
                        float _3469 = _3459 * _3459;
                        float _3473 = ((isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0))) * _3458) / ((_3469 * 0.699999988079071044921875) + 1.0);
                        float _3477 = (-0.0) - _2057;
                        float _3478 = (-0.0) - _2058;
                        float _3479 = (-0.0) - _2059;
                        float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                        float _3484 = _3483 * _3477;
                        float _3485 = _3483 * _3478;
                        float _3486 = _3483 * _3479;
                        float _3493 = exp2(log2(1.0 / ((_3469 * 3.5) + 5.0)) * 0.25);
                        float _3494 = 1.0 - _965;
                        float _3501 = sqrt(1.0 - ((1.0 - (_3494 * _3494)) * (1.0 - (_3493 * _3493))));
                        float _3502 = _3501 * _3501;
                        float _3503 = _3502 * _3502;
                        float _3504 = _3484 + _3449;
                        float _3505 = _3485 + _3450;
                        float _3506 = _3486 + _3451;
                        float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                        float _3514 = dot(vec3(_890, _893, _896), vec3(_3484, _3485, _3486));
                        float _4914 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3517 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3518 = dot(vec3(_890, _893, _896), vec3(_3510 * _3504, _3510 * _3505, _3510 * _3506));
                        float _4925 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3521 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3525 = ((_3521 * _3521) * (_3503 + (-1.0))) + 1.0;
                        float _3526 = _3462 * _3502;
                        float _3527 = _3526 * _3526;
                        float _3530 = ((1.0 - _3527) * _3452) + _3527;
                        float _4936 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3531 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3532 = 1.0 - _3502;
                        float _3542 = (0.5 / (((_3531 * ((_3517 * _3532) + _3502)) + 9.9999999392252902907785028219223e-09) + (((_3531 * _3532) + _3502) * _3517))) * _3531;
                        float _4947 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3553 = (((_3503 * 3.1415927410125732421875) * (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0)))) / ((_3525 * _3525) * ((_3469 * 2.1991131305694580078125) + 3.141590118408203125))) * _3458;
                        _3306 = (_3473 * _3421.x) + _3379;
                        _3307 = (_3473 * _3421.y) + _3380;
                        _3308 = (_3473 * _3421.z) + _3381;
                        _3303 = (_3553 * _3438.x) + _3376;
                        _3304 = (_3553 * _3438.y) + _3377;
                        _3305 = (_3553 * _3438.z) + _3378;
                        if (_3383 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3306;
                            _3380 = _3307;
                            _3381 = _3308;
                            _3382 = _3383;
                        }
                    }
                    frontier_phi_71_pred = _3308;
                    frontier_phi_71_pred_1 = _3307;
                    frontier_phi_71_pred_2 = _3306;
                    frontier_phi_71_pred_3 = _3305;
                    frontier_phi_71_pred_4 = _3304;
                    frontier_phi_71_pred_5 = _3303;
                }
                _3089 = frontier_phi_71_pred;
                _3087 = frontier_phi_71_pred_1;
                _3085 = frontier_phi_71_pred_2;
                _3083 = frontier_phi_71_pred_3;
                _3081 = frontier_phi_71_pred_4;
                _3079 = frontier_phi_71_pred_5;
                uint _3238 = _3237 + 1u;
                if (_3238 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3231 = _3079;
                    _3232 = _3081;
                    _3233 = _3083;
                    _3234 = _3085;
                    _3235 = _3087;
                    _3236 = _3089;
                    _3237 = _3238;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
            _3088 = _3089;
        }
        uvec4 _3092 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3093 = _3092.z;
        uint _3095 = (_3093 >> 8u) & 15u;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        if (((4294967295u << _3095) & _2998) == 0u)
        {
            _3199 = _3078;
            _3201 = _3080;
            _3203 = _3082;
            _3205 = _3084;
            _3207 = _3086;
            _3209 = _3088;
        }
        else
        {
            float _3224 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
            float _3225 = _3224 * _2057;
            float _3226 = _3224 * _2058;
            float _3227 = _3224 * _2059;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3095 < ((_3093 >> 12u) & 15u))
            {
                float _3200;
                float _3202;
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3359 = _3078;
                float _3360 = _3080;
                float _3361 = _3082;
                float _3362 = _3084;
                float _3363 = _3086;
                float _3364 = _3088;
                uint _3365 = _3095;
                uint _3374;
                bool _3375;
                for (;;)
                {
                    _3374 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3365 << 2u)) >> 2u)).x;
                    _3375 = _3374 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3375)
                    {
                        frontier_phi_82_pred = _3364;
                        frontier_phi_82_pred_1 = _3363;
                        frontier_phi_82_pred_2 = _3362;
                        frontier_phi_82_pred_3 = _3361;
                        frontier_phi_82_pred_4 = _3360;
                        frontier_phi_82_pred_5 = _3359;
                    }
                    else
                    {
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3580 = _3359;
                        float _3581 = _3360;
                        float _3582 = _3361;
                        float _3583 = _3362;
                        float _3584 = _3363;
                        float _3585 = _3364;
                        uint _3586 = _3374;
                        uint _3587;
                        vec4 _3612;
                        float _3613;
                        vec4 _3628;
                        vec3 _3640;
                        vec4 _3655;
                        vec4 _3670;
                        float _3717;
                        bool _3718;
                        for (;;)
                        {
                            uint _3597 = ((_3365 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3586));
                            _3587 = (_3586 + 4294967295u) & _3586;
                            uint _3599 = _3597 * 40u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            _3613 = _3612.w;
                            uint _3615 = (_3597 * 40u) + 4u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3630 = (_3597 * 40u) + 8u;
                            _3640 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x));
                            uint _3642 = (_3597 * 40u) + 16u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3597 * 40u) + 20u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3673 = (_3597 * 40u) + 24u;
                            vec4 _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3692 = (_3597 * 40u) + 28u;
                            vec4 _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            _3717 = fma(_2059, _3705.z, fma(_2058, _3705.y, _3705.x * _2057)) + _3705.w;
                            _3718 = !((fma(_2059, _3686.z, fma(_2058, _3686.y, _3686.x * _2057)) + _3686.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3718)
                            {
                                float _3745 = _3612.x - _2057;
                                float _3746 = _3612.y - _2058;
                                float _3747 = _3612.z - _2059;
                                float _3748 = dot(vec3(_3745, _3746, _3747), vec3(_3745, _3746, _3747));
                                float _3751 = inversesqrt(_3748);
                                float _3752 = _3751 * _3745;
                                float _3753 = _3751 * _3746;
                                float _3754 = _3751 * _3747;
                                float _3758 = 1.0 - (_3748 / (_3613 * _3613));
                                float _4958 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3763 = sqrt(_3748) * _3628.w;
                                float _3765 = 1.39999997615814208984375 / (_3763 + 1.39999997615814208984375);
                                float _3766 = _3765 * _3765;
                                float _3769 = ((1.0 - _3766) * dot(vec3(_3752, _3753, _3754), vec3(_890, _893, _896))) + _3766;
                                float _3772 = _3763 * _3763;
                                float _3776 = (fma(_2059, _3655.z, fma(_2058, _3655.y, _3655.x * _2057)) + _3655.w) / _3717;
                                float _3777 = (fma(_2059, _3670.z, fma(_2058, _3670.y, _3670.x * _2057)) + _3670.w) / _3717;
                                float _3781 = 1.0 - dot(vec2(_3776, _3777), vec2(_3776, _3777));
                                float _4974 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3783 = _3782 * (((isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0))) * _3759) / ((_3772 * 0.699999988079071044921875) + 1.0));
                                float _3795 = exp2(log2(1.0 / ((_3772 * 3.5) + 5.0)) * 0.25);
                                float _3796 = 1.0 - _965;
                                float _3803 = sqrt(1.0 - ((1.0 - (_3796 * _3796)) * (1.0 - (_3795 * _3795))));
                                float _3804 = _3803 * _3803;
                                float _3805 = _3804 * _3804;
                                float _3806 = _3752 - _3225;
                                float _3807 = _3753 - _3226;
                                float _3808 = _3754 - _3227;
                                float _3812 = inversesqrt(dot(vec3(_3806, _3807, _3808), vec3(_3806, _3807, _3808)));
                                float _3816 = dot(vec3(_890, _893, _896), vec3((-0.0) - _3225, (-0.0) - _3226, (-0.0) - _3227));
                                float _4985 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3820 = dot(vec3(_890, _893, _896), vec3(_3812 * _3806, _3812 * _3807, _3812 * _3808));
                                float _4996 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3823 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3827 = ((_3823 * _3823) * (_3805 + (-1.0))) + 1.0;
                                float _3828 = _3765 * _3804;
                                float _3829 = _3828 * _3828;
                                float _3835 = ((1.0 - _3829) * dot(vec3(_890, _893, _896), vec3(_3752, _3753, _3754))) + _3829;
                                float _5007 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3836 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3837 = 1.0 - _3804;
                                float _3847 = (0.5 / (((_3836 * ((_3819 * _3837) + _3804)) + 9.9999999392252902907785028219223e-09) + (((_3836 * _3837) + _3804) * _3819))) * _3836;
                                float _5018 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3857 = (_3782 * _3759) * (((_3805 * 3.1415927410125732421875) * (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0)))) / ((_3827 * _3827) * ((_3772 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3783 * _3628.z;
                                frontier_phi_88_pred_1 = _3783 * _3628.y;
                                frontier_phi_88_pred_2 = _3783 * _3628.x;
                                frontier_phi_88_pred_3 = _3857 * _3640.z;
                                frontier_phi_88_pred_4 = _3857 * _3640.y;
                                frontier_phi_88_pred_5 = _3857 * _3640.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3866 = frontier_phi_88_pred;
                            _3865 = frontier_phi_88_pred_1;
                            _3864 = frontier_phi_88_pred_2;
                            _3863 = frontier_phi_88_pred_3;
                            _3862 = frontier_phi_88_pred_4;
                            _3861 = frontier_phi_88_pred_5;
                            _3570 = _3864 + _3583;
                            _3571 = _3865 + _3584;
                            _3572 = _3866 + _3585;
                            _3567 = _3861 + _3580;
                            _3568 = _3862 + _3581;
                            _3569 = _3863 + _3582;
                            if (_3587 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3587;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3572;
                        frontier_phi_82_pred_1 = _3571;
                        frontier_phi_82_pred_2 = _3570;
                        frontier_phi_82_pred_3 = _3569;
                        frontier_phi_82_pred_4 = _3568;
                        frontier_phi_82_pred_5 = _3567;
                    }
                    _3210 = frontier_phi_82_pred;
                    _3208 = frontier_phi_82_pred_1;
                    _3206 = frontier_phi_82_pred_2;
                    _3204 = frontier_phi_82_pred_3;
                    _3202 = frontier_phi_82_pred_4;
                    _3200 = frontier_phi_82_pred_5;
                    uint _3366 = _3365 + 1u;
                    if (_3366 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3359 = _3200;
                        _3360 = _3202;
                        _3361 = _3204;
                        _3362 = _3206;
                        _3363 = _3208;
                        _3364 = _3210;
                        _3365 = _3366;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3206;
                frontier_phi_63_64_ladder_1 = _3210;
                frontier_phi_63_64_ladder_2 = _3208;
                frontier_phi_63_64_ladder_3 = _3204;
                frontier_phi_63_64_ladder_4 = _3202;
                frontier_phi_63_64_ladder_5 = _3200;
            }
            else
            {
                frontier_phi_63_64_ladder = _3084;
                frontier_phi_63_64_ladder_1 = _3088;
                frontier_phi_63_64_ladder_2 = _3086;
                frontier_phi_63_64_ladder_3 = _3082;
                frontier_phi_63_64_ladder_4 = _3080;
                frontier_phi_63_64_ladder_5 = _3078;
            }
            _3199 = frontier_phi_63_64_ladder_5;
            _3201 = frontier_phi_63_64_ladder_4;
            _3203 = frontier_phi_63_64_ladder_3;
            _3205 = frontier_phi_63_64_ladder;
            _3207 = frontier_phi_63_64_ladder_2;
            _3209 = frontier_phi_63_64_ladder_1;
        }
        float _3214 = isnan(1.0) ? _949 : (isnan(_949) ? 1.0 : min(_949, 1.0));
        _3011 = (_3214 * _3205) + _2523;
        _3013 = (_3214 * _3207) + _2525;
        _3015 = (_3214 * _3209) + _2527;
        _3017 = ((_3199 * _933) * _3214) + _2861;
        _3019 = ((_3201 * _935) * _3214) + _2863;
        _3021 = ((_3203 * _936) * _3214) + _2865;
    }
    else
    {
        _3011 = _2523;
        _3013 = _2525;
        _3015 = _2527;
        _3017 = _2861;
        _3019 = _2863;
        _3021 = _2865;
    }
    float _5034 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _5045 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _5056 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _3038 = ((isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0))) * (_3011 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _949))) + ((_3017 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1788)) * cbPerFrame._m0[3u].x);
    float _3039 = ((isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_3013 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _949))) + ((_3019 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1788)) * cbPerFrame._m0[3u].x);
    float _3040 = ((isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * (_3015 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _949))) + ((_3021 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1788)) * cbPerFrame._m0[3u].x);
    uint _3041 = _278 + 6u;
    float _3049 = _871 / cbSceneParam._m0[86u].x;
    float _3050 = _872 / cbSceneParam._m0[86u].y;
    vec4 _3064 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3049, _3050, (log2((isnan(cbSceneParam._m0[77u].w) ? _793 : (isnan(_793) ? cbSceneParam._m0[77u].w : min(_793, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3066 = _3064.x;
    float _3067 = _3064.y;
    float _3068 = _3064.z;
    float _3069 = _3064.w;
    float _3141;
    float _3143;
    float _3145;
    float _3147;
    if (_793 > cbSceneParam._m0[78u].w)
    {
        float _3103 = isnan(_793) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _793 : min(cbSceneParam._m0[80u].w, _793));
        float _3104 = _3103 / _793;
        float _3115 = _3104 * _844;
        float _3116 = _845 * _3104;
        float _3117 = (-0.0) - _3116;
        float _3119 = _3104 * _846;
        float _3121 = (cbSceneParam._m0[77u].w * _3117) / _3103;
        float _3122 = _3121 + cbSceneParam._m0[79u].w;
        float _3123 = cbSceneParam._m0[79u].w - _3116;
        float _3129 = sqrt(((_3115 * _3115) + (_3116 * _3116)) + (_3119 * _3119));
        float _3132 = (1.0 - (cbSceneParam._m0[77u].w / _3103)) * _3129;
        float _3137 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3139 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3316;
        if (abs((_3117 - _3121) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3316 = ((((_3122 > 0.0) ? exp2(_3137 * _3122) : (2.0 - exp2(_3139 * _3122))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3132;
        }
        else
        {
            float _3260 = 1.0 / cbSceneParam._m0[80u].x;
            float _3261 = isnan(_3123) ? _3122 : (isnan(_3122) ? _3123 : max(_3122, _3123));
            float _3262 = isnan(_3123) ? _3122 : (isnan(_3122) ? _3123 : min(_3122, _3123));
            float _3271 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : min(_3261, 0.0));
            float _3272 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : min(_3262, 0.0));
            _3316 = ((abs(_3129 / _3117) * cbSceneParam._m0[80u].y) * ((((_3271 - _3272) * 2.0) - ((exp2(_3137 * (isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0)))) - exp2(_3137 * (isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))))) * _3260)) - ((exp2(_3139 * _3271) - exp2(_3139 * _3272)) * _3260))) + (_3132 * cbSceneParam._m0[80u].z);
        }
        vec4 _3318 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3049, _3050, 1.0), 0.0);
        float _3327 = exp2((_3316 * (-1.44269502162933349609375)) * (1.0 - _3318.w));
        float _3328 = log2(_3327);
        float _3344 = log2(_3069);
        _3141 = (exp2(_3344 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].x)) * _3318.x) / cbSceneParam._m0[78u].x)) + _3066;
        _3143 = (exp2(_3344 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].y)) * _3318.y) / cbSceneParam._m0[78u].y)) + _3067;
        _3145 = (exp2(_3344 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].z)) * _3318.z) / cbSceneParam._m0[78u].z)) + _3068;
        _3147 = _3327 * _3069;
    }
    else
    {
        _3141 = _3066;
        _3143 = _3067;
        _3145 = _3068;
        _3147 = _3069;
    }
    bool _3354;
    vec4 _3157;
    vec4 _3179;
    float _3181;
    float _3185;
    float _3186;
    float _3187;
    float _3188;
    bool _3198;
    for (;;)
    {
        _3157 = cbMatDynParam._m0[0u];
        float _3159 = roundEven(_3157.y);
        bool _3160 = _3159 == 3.0;
        float _3161 = log2(_3147);
        float _3168 = exp2(_3161 * cbSceneParam._m0[78u].x) * _3038;
        float _3169 = exp2(_3161 * cbSceneParam._m0[78u].y) * _3039;
        float _3170 = exp2(_3161 * cbSceneParam._m0[78u].z) * _3040;
        float _3177 = _860 + (-0.5);
        _3179 = cbMtdParam._m0[1u];
        _3181 = _3179.y * _3177;
        float _3184 = (_3159 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3185 = _3184 * (_3160 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3141)));
        _3186 = _3184 * (_3160 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3143)));
        _3187 = _3184 * (_3160 ? _3170 : (_3170 + (cbSceneParam._m0[72u].w * _3145)));
        _3188 = _3177 * 0.999000012874603271484375;
        _3198 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3198)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _3188) < 0.5)
            {
                _3354 = true;
                break;
            }
        }
        uint _3295 = _909 + uint(_3157.w);
        if ((cbInstanceData._m0[_3295].w < 1.0) && ((cbInstanceData._m0[_3295].w + _3188) < 0.5))
        {
            _3354 = true;
            break;
        }
        if ((_3181 + 1.0) < _3179.x)
        {
            _3354 = true;
            break;
        }
        _3354 = false;
        break;
    }
    float _3558;
    if (_3354)
    {
        discard_state = true;
        _3558 = 0.0;
    }
    else
    {
        _3558 = cbInstanceData._m0[_3041].w;
    }
    SV_Target.x = _3185;
    SV_Target.y = _3186;
    SV_Target.z = _3187;
    SV_Target.w = _3558;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3041].w;
    discard_exit();
}


