#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1202;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _369 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_357 - _369) * cbMtdParam._m0[23u].w) + _369) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3530 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _394 = (_387 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _395 = (_387 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _396 = (_387 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _433 = _431.x;
    float _434 = _431.y;
    float _435 = _431.z;
    float _444 = ((_414.z - _435) * _387) + _435;
    float _447 = ((((_414.x - _433) * _387) + _433) * 2.0) + (-1.0);
    float _449 = ((((_414.y - _434) * _387) + _434) * 2.0) + (-1.0);
    float _450 = dot(vec2(_447, _449), vec2(_447, _449));
    float _3541 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _455 = sqrt(1.0 - (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))));
    vec4 _471 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _483 = (((_471.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _447;
    float _484 = (((_471.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _449;
    float _487 = fma(_455, _222, fma(_484, _229, _483 * _215));
    float _490 = fma(_455, _223, fma(_484, _230, _483 * _216));
    float _493 = fma(_455, _224, fma(_484, _231, _483 * _217));
    float _497 = inversesqrt(dot(vec3(_487, _490, _493), vec3(_487, _490, _493)));
    vec4 _524 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _526 = _524.x;
    float _527 = 1.0 - _526;
    float _536 = (cbMtdParam._m0[19u].x + dot(vec4(_497 * _487, _497 * _490, _497 * _493, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_526 - _527) * cbMtdParam._m0[24u].z) + _527) * cbMtdParam._m0[21u].z);
    float _3552 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _544 = (_537 * (cbMtdParam._m0[17u].x - _394)) + _394;
    float _545 = (_537 * (cbMtdParam._m0[17u].y - _395)) + _395;
    float _546 = (_537 * (cbMtdParam._m0[17u].z - _396)) + _396;
    vec4 _558 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _574 = _572.x;
    float _592 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _254) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _255) + cbTextureTilingScale._m0[9u].w)).x - _574) * _387) + _574;
    float _596 = ((_558.x - _592) * cbMtdParam._m0[19u].z) + _592;
    float _598 = _596 - (_596 * _537);
    float _602 = (cbMtdParam._m0[19u].w * (_471.z - _444)) + _444;
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _622 = (_615.x * 2.0) + (-1.0);
    float _623 = (_615.y * 2.0) + (-1.0);
    float _624 = dot(vec2(_622, _623), vec2(_622, _623));
    float _3563 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _632 = ((_615.z - _602) * _537) + _602;
    float _642 = ((sqrt(1.0 - (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) - _455) * _537) + _455;
    float _645 = (((_622 - _483) * _537) + _483) + (cbMtdParam._m0[21u].x * _483);
    float _646 = (((_623 - _484) * _537) + _484) + (cbMtdParam._m0[21u].x * _484);
    float _648 = cbMtdParam._m0[22u].x + _471.w;
    float _651 = fma(_642, _222, fma(_646, _229, _645 * _215));
    float _654 = fma(_642, _223, fma(_646, _230, _645 * _216));
    float _657 = fma(_642, _224, fma(_646, _231, _645 * _217));
    float _661 = inversesqrt(dot(vec3(_651, _654, _657), vec3(_651, _654, _657)));
    float _662 = _661 * _651;
    float _663 = _661 * _654;
    float _664 = _661 * _657;
    float _3574 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _665 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3596 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3607 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3618 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3629 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _670 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _684 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _735 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _725);
    float _736 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _725);
    float _737 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _725);
    float _741 = inversesqrt(dot(vec3(_735, _736, _737), vec3(_735, _736, _737)));
    float _742 = _735 * _741;
    float _743 = _736 * _741;
    float _744 = _737 * _741;
    float _750 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _751 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _769 = fma(_664, cbSceneParam._m0[5u].z, fma(_663, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _662));
    float _772 = fma(_664, cbSceneParam._m0[6u].z, fma(_663, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _662));
    float _775 = fma(_664, cbSceneParam._m0[7u].z, fma(_663, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _662));
    uint _789 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _795 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_789].x;
    float _796 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_789].y;
    float _797 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_789].z;
    float _3640 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _801 = 1.0 - _670;
    float _802 = _798 * _801;
    float _803 = _799 * _801;
    float _804 = _800 * _801;
    float _809 = (_798 + (-0.039999999105930328369140625)) * _670;
    float _810 = (_799 + (-0.039999999105930328369140625)) * _670;
    float _811 = (_800 + (-0.039999999105930328369140625)) * _670;
    float _812 = _809 + 0.039999999105930328369140625;
    float _814 = _810 + 0.039999999105930328369140625;
    float _815 = _811 + 0.039999999105930328369140625;
    vec4 _824 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _750, cbSceneParam._m0[86u].y * _751));
    float _828 = ((isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * TEXCOORD_5.w) * _824.x;
    float _829 = dot(vec3(_662, _663, _664), vec3(_742, _743, _744));
    float _832 = _829 * 2.0;
    float _836 = (_832 * _662) - _742;
    float _837 = (_832 * _663) - _743;
    float _838 = (_832 * _664) - _744;
    float _842 = abs(dot(vec3(_742, _743, _744), vec3(_662, _663, _664)));
    float _3673 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _844 = sqrt(_665);
    float _857 = exp2((_844 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_844 * 3.0));
    float _863 = (1.0 - _857) * ((_844 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _864 = _857 * _844;
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1201;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _926 = fma(_900, cbModelParam._m0[26u].z, fma(_896, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _892));
        float _930 = fma(_900, cbModelParam._m0[27u].z, fma(_896, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _892));
        float _934 = fma(_900, cbModelParam._m0[28u].z, fma(_896, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _892));
        float _959 = _892 + _662;
        float _960 = _896 + _663;
        float _961 = _900 + _664;
        float _971 = fma(_961, cbModelParam._m0[26u].z, fma(_960, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _959)) - _926;
        float _972 = fma(_961, cbModelParam._m0[27u].z, fma(_960, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _959)) - _930;
        float _973 = fma(_961, cbModelParam._m0[28u].z, fma(_960, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _959)) - _934;
        float _977 = inversesqrt(dot(vec3(_971, _972, _973), vec3(_971, _972, _973)));
        float _990 = ((_977 * _971) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_926 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_977 * _972) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_930 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_977 * _973) / cbModelParam._m0[34u].z) + ((((((_934 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        float _1029 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_995.x + (-0.5));
        float _1031 = _1029 * (_995.y + (-0.5));
        float _1032 = _1029 * (_995.z + (-0.5));
        float _1039 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1002.x + (-0.5));
        float _1041 = _1039 * (_1002.y + (-0.5));
        float _1042 = _1039 * (_1002.z + (-0.5));
        float _1049 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1009.x + (-0.5));
        float _1051 = _1049 * (_1009.y + (-0.5));
        float _1052 = _1049 * (_1009.z + (-0.5));
        float _1059 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1016.x + (-0.5));
        float _1061 = _1059 * (_1016.y + (-0.5));
        float _1062 = _1059 * (_1016.z + (-0.5));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = _1030 * 0.5;
        float _1067 = _1040 * 0.5;
        float _1068 = _1050 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1083 = (dot(vec3(_662, _663, _664), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1093 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3721 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1095 + 1.0))) + _1100) * _1063;
        float _1110 = _1031 * 0.5;
        float _1111 = _1041 * 0.5;
        float _1112 = _1051 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_662, _663, _664), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3754 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1137 + 1.0))) + _1142) * _1064;
        float _1152 = _1032 * 0.5;
        float _1153 = _1042 * 0.5;
        float _1154 = _1052 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_662, _663, _664), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3787 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1179 + 1.0))) + _1184) * _1065;
        _1201 = _1032;
        _1203 = _1031;
        _1204 = _1030;
        _1205 = _1042;
        _1206 = _1041;
        _1207 = _1040;
        _1208 = _1052;
        _1209 = _1051;
        _1210 = _1050;
        _1211 = _1065;
        _1212 = _1064;
        _1213 = _1063;
        _1214 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1215 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1216 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
    }
    else
    {
        _1201 = _1202;
        _1203 = _1202;
        _1204 = _1202;
        _1205 = _1202;
        _1206 = _1202;
        _1207 = _1202;
        _1208 = _1202;
        _1209 = _1202;
        _1210 = _1202;
        _1211 = _1202;
        _1212 = _1202;
        _1213 = _1202;
        _1214 = 0.0;
        _1215 = 0.0;
        _1216 = 0.0;
    }
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1241 = fma(_900, cbModelParam._m0[30u].z, fma(_896, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _892));
        float _1245 = fma(_900, cbModelParam._m0[31u].z, fma(_896, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _892));
        float _1249 = fma(_900, cbModelParam._m0[32u].z, fma(_896, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _892));
        float _1272 = _892 + _662;
        float _1273 = _896 + _663;
        float _1274 = _900 + _664;
        float _1284 = fma(_1274, cbModelParam._m0[30u].z, fma(_1273, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1272)) - _1241;
        float _1285 = fma(_1274, cbModelParam._m0[31u].z, fma(_1273, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1272)) - _1245;
        float _1286 = fma(_1274, cbModelParam._m0[32u].z, fma(_1273, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1272)) - _1249;
        float _1290 = inversesqrt(dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286)));
        float _1303 = ((_1290 * _1284) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1241 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1290 * _1285) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1245 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1290 * _1286) / cbModelParam._m0[35u].z) + ((((((_1249 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        float _1340 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1307.x + (-0.5));
        float _1342 = _1340 * (_1307.y + (-0.5));
        float _1343 = _1340 * (_1307.z + (-0.5));
        float _1350 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1314.x + (-0.5));
        float _1352 = _1350 * (_1314.y + (-0.5));
        float _1353 = _1350 * (_1314.z + (-0.5));
        float _1360 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1321.x + (-0.5));
        float _1362 = _1360 * (_1321.y + (-0.5));
        float _1363 = _1360 * (_1321.z + (-0.5));
        float _1370 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1328.x + (-0.5));
        float _1372 = _1370 * (_1328.y + (-0.5));
        float _1373 = _1370 * (_1328.z + (-0.5));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = _1341 * 0.5;
        float _1378 = _1351 * 0.5;
        float _1379 = _1361 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_662, _663, _664), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3850 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1404 + 1.0))) + _1409) * _1374;
        float _1419 = _1342 * 0.5;
        float _1420 = _1352 * 0.5;
        float _1421 = _1362 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_662, _663, _664), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _3883 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1446 + 1.0))) + _1451) * _1375;
        float _1461 = _1343 * 0.5;
        float _1462 = _1353 * 0.5;
        float _1463 = _1363 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_662, _663, _664), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _3916 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1488 + 1.0))) + _1493) * _1376;
        _1510 = _1343;
        _1511 = _1342;
        _1512 = _1341;
        _1513 = _1353;
        _1514 = _1352;
        _1515 = _1351;
        _1516 = _1363;
        _1517 = _1362;
        _1518 = _1361;
        _1519 = _1376;
        _1520 = _1375;
        _1521 = _1374;
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
    }
    else
    {
        _1510 = _1202;
        _1511 = _1202;
        _1512 = _1202;
        _1513 = _1202;
        _1514 = _1202;
        _1515 = _1202;
        _1516 = _1202;
        _1517 = _1202;
        _1518 = _1202;
        _1519 = _1202;
        _1520 = _1202;
        _1521 = _1202;
        _1522 = 0.0;
        _1523 = 0.0;
        _1524 = 0.0;
    }
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1214)) + _1214;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1215)) + _1215;
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1216)) + _1216;
    float _1557 = fma(_1536, cbSceneParam._m0[89u].z, fma(_1535, cbSceneParam._m0[89u].y, _1534 * cbSceneParam._m0[89u].x));
    float _1560 = fma(_1536, cbSceneParam._m0[90u].z, fma(_1535, cbSceneParam._m0[90u].y, _1534 * cbSceneParam._m0[90u].x));
    float _1563 = fma(_1536, cbSceneParam._m0[91u].z, fma(_1535, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1534));
    float _1578 = _836 * 0.5;
    float _1579 = _837 * 0.5;
    float _1580 = _838 * 0.5;
    float _1581 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1584 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1587 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1621;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1594 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1201, _1205, _1208, _1211));
        float _1598 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1203, _1206, _1209, _1212));
        float _1602 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1204, _1207, _1210, _1213));
        float _1609 = dot(vec4(cbModelParam._m0[39u]), vec4(_1578, _1579, _1580, 1.0));
        _1621 = dot(vec3(isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1621 = 1.0;
    }
    float _1632;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1623 = dot(vec4(cbModelParam._m0[40u]), vec4(_1578, _1579, _1580, 1.0));
        _1632 = dot(vec3(isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1623) ? 0.0 : (isnan(0.0) ? _1623 : max(0.0, _1623))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1632 = 1.0;
    }
    float _1636 = (_1632 * cbModelParam._m0[1u].x) + (_1621 * (1.0 - cbModelParam._m0[1u].x));
    float _1646 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _665);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1646 : min(cbModelParam._m0[25u].z, _1646));
    float _1728;
    float _1730;
    float _1732;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1695 = fma(_900, cbModelParam._m0[13u].z, fma(_896, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _892)) + cbModelParam._m0[13u].w;
        float _1699 = fma(_900, cbModelParam._m0[14u].z, fma(_896, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _892)) + cbModelParam._m0[14u].w;
        float _1703 = fma(_900, cbModelParam._m0[15u].z, fma(_896, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _892)) + cbModelParam._m0[15u].w;
        float _1706 = fma(_838, cbModelParam._m0[13u].z, fma(_837, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _836));
        float _1709 = fma(_838, cbModelParam._m0[14u].z, fma(_837, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _836));
        float _1712 = fma(_838, cbModelParam._m0[15u].z, fma(_837, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _836));
        float _1740;
        if (_1706 > 0.0)
        {
            _1740 = abs((1.0 - _1695) / _1706);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1695 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1740 = frontier_phi_14_12_ladder;
        }
        float _1943;
        if (_1709 > 0.0)
        {
            _1943 = abs((1.0 - _1699) / _1709);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1699 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1943 = frontier_phi_23_19_ladder;
        }
        float _2197;
        if (_1712 > 0.0)
        {
            _2197 = abs((1.0 - _1703) / _1712);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1703 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2197 = frontier_phi_35_30_ladder;
        }
        float _2199 = isnan(_1943) ? _1740 : (isnan(_1740) ? _1943 : min(_1740, _1943));
        float _2200 = isnan(_2197) ? _2199 : (isnan(_2199) ? _2197 : min(_2199, _2197));
        float _2204 = (_2200 * _1706) + _1695;
        float _2205 = (_2200 * _1709) + _1699;
        float _2206 = (_2200 * _1712) + _1703;
        float _2207 = _2200 * 9.9999997473787516355514526367188e-05;
        float _2209 = (-1.0) - _2207;
        float _2211 = _2207 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2206 > _2211) || ((_2206 < _2209) || ((_2205 > _2211) || ((_2205 < _2209) || ((_2204 < _2209) || (_2204 > _2211))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2334 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2206, cbModelParam._m0[9u].z, fma(_2205, cbModelParam._m0[9u].y, _2204 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2206, cbModelParam._m0[10u].z, fma(_2205, cbModelParam._m0[10u].y, _2204 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2206, cbModelParam._m0[11u].z, fma(_2205, cbModelParam._m0[11u].y, _2204 * cbModelParam._m0[11u].x))), _1647);
            frontier_phi_13_35_ladder = _2334.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2334.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2334.x * cbModelParam._m0[1u].y;
        }
        _1728 = frontier_phi_13_35_ladder_2;
        _1730 = frontier_phi_13_35_ladder_1;
        _1732 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1716 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_836, _837, _838), _1647);
        _1728 = _1716.x * cbModelParam._m0[1u].y;
        _1730 = _1716.y * cbModelParam._m0[1u].y;
        _1732 = _1716.z * cbModelParam._m0[1u].y;
    }
    float _1736 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _665);
    float _1737 = isnan(_1736) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1736 : min(cbModelParam._m0[25u].w, _1736));
    float _1827;
    float _1829;
    float _1831;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1791 = fma(_900, cbModelParam._m0[21u].z, fma(_896, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _892)) + cbModelParam._m0[21u].w;
        float _1795 = fma(_900, cbModelParam._m0[22u].z, fma(_896, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _892)) + cbModelParam._m0[22u].w;
        float _1799 = fma(_900, cbModelParam._m0[23u].z, fma(_896, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _892)) + cbModelParam._m0[23u].w;
        float _1802 = fma(_838, cbModelParam._m0[21u].z, fma(_837, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _836));
        float _1805 = fma(_838, cbModelParam._m0[22u].z, fma(_837, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _836));
        float _1808 = fma(_838, cbModelParam._m0[23u].z, fma(_837, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _836));
        float _1948;
        if (_1802 > 0.0)
        {
            _1948 = abs((1.0 - _1791) / _1802);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1791 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1948 = frontier_phi_25_21_ladder;
        }
        float _2224;
        if (_1805 > 0.0)
        {
            _2224 = abs((1.0 - _1795) / _1805);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1795 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2224 = frontier_phi_37_32_ladder;
        }
        float _2437;
        if (_1808 > 0.0)
        {
            _2437 = abs((1.0 - _1799) / _1808);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1799 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2437 = frontier_phi_46_43_ladder;
        }
        float _2439 = isnan(_2224) ? _1948 : (isnan(_1948) ? _2224 : min(_1948, _2224));
        float _2440 = isnan(_2437) ? _2439 : (isnan(_2439) ? _2437 : min(_2439, _2437));
        float _2444 = (_2440 * _1802) + _1791;
        float _2445 = (_2440 * _1805) + _1795;
        float _2446 = (_2440 * _1808) + _1799;
        float _2447 = _2440 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2447;
        float _2450 = _2447 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2446 > _2450) || ((_2446 < _2448) || ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 < _2448) || (_2444 > _2450))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2645 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2446, cbModelParam._m0[17u].z, fma(_2445, cbModelParam._m0[17u].y, _2444 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2446, cbModelParam._m0[18u].z, fma(_2445, cbModelParam._m0[18u].y, _2444 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2446, cbModelParam._m0[19u].z, fma(_2445, cbModelParam._m0[19u].y, _2444 * cbModelParam._m0[19u].x))), _1737);
            frontier_phi_22_46_ladder = _2645.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2645.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2645.x * cbModelParam._m0[1u].z;
        }
        _1827 = frontier_phi_22_46_ladder_2;
        _1829 = frontier_phi_22_46_ladder_1;
        _1831 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_836, _837, _838), _1737);
        _1827 = _1811.x * cbModelParam._m0[1u].z;
        _1829 = _1811.y * cbModelParam._m0[1u].z;
        _1831 = _1811.z * cbModelParam._m0[1u].z;
    }
    float _1844 = (((_863 * _812) + _864) * _828) * ((cbModelParam._m0[1u].w * (_1827 - _1728)) + _1728);
    float _1846 = (((_863 * _814) + _864) * _828) * ((cbModelParam._m0[1u].w * (_1829 - _1730)) + _1730);
    float _1848 = (((_863 * _815) + _864) * _828) * ((cbModelParam._m0[1u].w * (_1831 - _1732)) + _1732);
    float _1851 = fma(_1848, cbSceneParam._m0[89u].z, fma(_1846, cbSceneParam._m0[89u].y, _1844 * cbSceneParam._m0[89u].x));
    float _1854 = fma(_1848, cbSceneParam._m0[90u].z, fma(_1846, cbSceneParam._m0[90u].y, _1844 * cbSceneParam._m0[90u].x));
    float _1857 = fma(_1848, cbSceneParam._m0[91u].z, fma(_1846, cbSceneParam._m0[91u].y, _1844 * cbSceneParam._m0[91u].x));
    uvec4 _1867 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1869 = _1867.x * 14u;
    uint _1870 = _1869 + 13u;
    float _1877 = _828 + (-1.0);
    float _1882 = (cbLight._m0[_1870].x * _1877) + 1.0;
    float _1883 = (cbLight._m0[_1870].y * _1877) + 1.0;
    float _1884 = (cbLight._m0[_1870].z * _1877) + 1.0;
    float _1885 = (cbLight._m0[_1870].w * _1877) + 1.0;
    uint _1886 = _1869 + 5u;
    float _1892 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
    uint _1896 = _1869 + 4u;
    float _1902 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
    uint _1906 = _1869 | 1u;
    float _1917 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_662, _663, _664));
    float _1920 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_662, _663, _664));
    float _4052 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _4063 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1925 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.3183098733425140380859375;
    float _1927 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.3183098733425140380859375;
    float _1934 = ((cbLight._m0[_1886].x * _1892) * _1927) + ((cbLight._m0[_1896].x * _1902) * _1925);
    float _1935 = ((_1892 * cbLight._m0[_1886].y) * _1927) + ((_1902 * cbLight._m0[_1896].y) * _1925);
    float _1936 = ((_1892 * cbLight._m0[_1886].z) * _1927) + ((_1902 * cbLight._m0[_1896].z) * _1925);
    uvec4 _1940 = floatBitsToUint(cbLight._m0[_1869 + 12u]);
    bool _1942 = _1940.x == 0u;
    float _1953;
    float _1955;
    float _1957;
    if (_1942)
    {
        _1953 = _1934;
        _1955 = _1935;
        _1957 = _1936;
    }
    else
    {
        uint _1961 = _1869 + 6u;
        float _1977 = (dot(vec3(cbLight._m0[_1869 + 2u].xyz), vec3(_662, _663, _664)) * 0.5) + 0.5;
        float _1978 = _1977 * _1977;
        float _4074 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1979 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1980 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _1953 = (((cbLight._m0[_1961].x * 0.3183098733425140380859375) * _1979) * _1980) + _1934;
        _1955 = (((cbLight._m0[_1961].y * 0.3183098733425140380859375) * _1979) * _1980) + _1935;
        _1957 = (((cbLight._m0[_1961].z * 0.3183098733425140380859375) * _1979) * _1980) + _1936;
    }
    bool _1960 = _1940.y == 0u;
    float _1998;
    float _2000;
    float _2002;
    if (_1960)
    {
        _1998 = _1953;
        _2000 = _1955;
        _2002 = _1957;
    }
    else
    {
        uint _2168 = _1869 + 7u;
        float _2184 = (dot(vec3(cbLight._m0[_1869 + 3u].xyz), vec3(_662, _663, _664)) * 0.5) + 0.5;
        float _2185 = _2184 * _2184;
        float _4090 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2186 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2187 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _1998 = (((cbLight._m0[_2168].x * 0.3183098733425140380859375) * _2186) * _2187) + _1953;
        _2000 = (((cbLight._m0[_2168].y * 0.3183098733425140380859375) * _2186) * _2187) + _1955;
        _2002 = (((cbLight._m0[_2168].z * 0.3183098733425140380859375) * _2186) * _2187) + _1957;
    }
    uint _2005 = _1869 + 8u;
    float _2018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1869].w)) * _665) * 0.949999988079071044921875);
    float _2019 = _2018 * _2018;
    float _2020 = cbLight._m0[_1869].x + _742;
    float _2021 = cbLight._m0[_1869].y + _743;
    float _2022 = cbLight._m0[_1869].z + _744;
    float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
    float _2027 = _2026 * _2020;
    float _2028 = _2026 * _2021;
    float _2029 = _2026 * _2022;
    float _2030 = dot(vec3(_662, _663, _664), vec3(cbLight._m0[_1869].xyz));
    float _4106 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _2034 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2035 = dot(vec3(_662, _663, _664), vec3(_2027, _2028, _2029));
    float _4128 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _2039 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_2027, _2028, _2029));
    float _4139 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2043 = _2019 * _2019;
    float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
    float _2055 = exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0);
    float _2056 = 0.959999978542327880859375 - _809;
    float _2058 = 0.959999978542327880859375 - _810;
    float _2059 = 0.959999978542327880859375 - _811;
    float _2066 = 1.0 - _2019;
    float _2077 = (0.5 / (((_2034 * ((_2033 * _2066) + _2019)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2066) + _2019) * _2033))) * _2033;
    float _4150 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2079 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
    uint _2090 = _1869 + 9u;
    float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1906].w)) * _665) * 0.949999988079071044921875);
    float _2102 = _2101 * _2101;
    float _2103 = cbLight._m0[_1906].x + _742;
    float _2104 = cbLight._m0[_1906].y + _743;
    float _2105 = cbLight._m0[_1906].z + _744;
    float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
    float _2110 = _2109 * _2103;
    float _2111 = _2109 * _2104;
    float _2112 = _2109 * _2105;
    float _2113 = dot(vec3(_662, _663, _664), vec3(cbLight._m0[_1906].xyz));
    float _4161 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2117 = dot(vec3(_662, _663, _664), vec3(_2110, _2111, _2112));
    float _4172 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2121 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_2110, _2111, _2112));
    float _4183 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2125 = _2102 * _2102;
    float _2129 = ((_2120 * _2120) * (_2125 + (-1.0))) + 1.0;
    float _2136 = exp2(log2(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * 5.0);
    float _2143 = 1.0 - _2102;
    float _2153 = (0.5 / (((_2034 * ((_2116 * _2143) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2143) + _2102) * _2116))) * _2116;
    float _4194 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2155 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2125 / ((_2129 * _2129) * 3.141590118408203125));
    float _2165 = (((((_2136 * _2056) + _812) * cbLight._m0[_2090].x) * _2155) * _1892) + (((((_2055 * _2056) + _812) * cbLight._m0[_2005].x) * _2079) * _1902);
    float _2166 = (((((_2136 * _2058) + _814) * cbLight._m0[_2090].y) * _2155) * _1892) + (((((_2055 * _2058) + _814) * cbLight._m0[_2005].y) * _2079) * _1902);
    float _2167 = (((((_2136 * _2059) + _815) * cbLight._m0[_2090].z) * _2155) * _1892) + (((((_2055 * _2059) + _815) * cbLight._m0[_2005].z) * _2079) * _1902);
    float _2229;
    float _2231;
    float _2233;
    if (_1942)
    {
        _2229 = _2165;
        _2231 = _2166;
        _2233 = _2167;
    }
    else
    {
        uint _2235 = _1869 + 2u;
        uint _2239 = _1869 + 10u;
        float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _665) * 0.949999988079071044921875);
        float _2254 = _2253 * _2253;
        float _2255 = cbLight._m0[_2235].x + _742;
        float _2256 = cbLight._m0[_2235].y + _743;
        float _2257 = cbLight._m0[_2235].z + _744;
        float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
        float _2262 = _2261 * _2255;
        float _2263 = _2261 * _2256;
        float _2264 = _2261 * _2257;
        float _2265 = dot(vec3(_662, _663, _664), vec3(cbLight._m0[_2235].xyz));
        float _4205 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2269 = dot(vec3(_662, _663, _664), vec3(_2262, _2263, _2264));
        float _4216 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2273 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2262, _2263, _2264));
        float _4227 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2277 = _2254 * _2254;
        float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
        float _2288 = exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0);
        float _2295 = 1.0 - _2254;
        float _2305 = (0.5 / (((_2034 * ((_2268 * _2295) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2295) + _2254) * _2268))) * _2268;
        float _4238 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2307 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
        float _2308 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _2229 = (((((_2288 * _2056) + _812) * cbLight._m0[_2239].x) * _2307) * _2308) + _2165;
        _2231 = (((((_2288 * _2058) + _814) * cbLight._m0[_2239].y) * _2307) * _2308) + _2166;
        _2233 = (((((_2288 * _2059) + _815) * cbLight._m0[_2239].z) * _2307) * _2308) + _2167;
    }
    float _2343;
    float _2345;
    float _2347;
    if (_1960)
    {
        _2343 = _2229;
        _2345 = _2231;
        _2347 = _2233;
    }
    else
    {
        uint _2354 = _1869 + 3u;
        uint _2358 = _1869 + 11u;
        float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _665) * 0.949999988079071044921875);
        float _2373 = _2372 * _2372;
        float _2374 = cbLight._m0[_2354].x + _742;
        float _2375 = cbLight._m0[_2354].y + _743;
        float _2376 = cbLight._m0[_2354].z + _744;
        float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
        float _2381 = _2380 * _2374;
        float _2382 = _2380 * _2375;
        float _2383 = _2380 * _2376;
        float _2384 = dot(vec3(_662, _663, _664), vec3(cbLight._m0[_2354].xyz));
        float _4254 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2388 = dot(vec3(_662, _663, _664), vec3(_2381, _2382, _2383));
        float _4265 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2392 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2381, _2382, _2383));
        float _4276 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2396 = _2373 * _2373;
        float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
        float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * 5.0);
        float _2414 = 1.0 - _2373;
        float _2424 = (0.5 / (((_2034 * ((_2387 * _2414) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2414) + _2373) * _2387))) * _2387;
        float _4287 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2426 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
        float _2427 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2343 = (((((_2407 * _2056) + _812) * cbLight._m0[_2358].x) * _2426) * _2427) + _2229;
        _2345 = (((((_2407 * _2058) + _814) * cbLight._m0[_2358].y) * _2426) * _2427) + _2231;
        _2347 = (((((_2407 * _2059) + _815) * cbLight._m0[_2358].z) * _2426) * _2427) + _2233;
    }
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    if (_1867.y == 0u)
    {
        float _2502 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2503 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2502;
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2502;
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2502;
        uvec4 _2517 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2518 = _2517.x;
        uint _2529 = uint((float(_2517.y) * floor(float(uint(cbSceneParam._m0[85u].y * _751) / _2518))) + floor(float(uint(cbSceneParam._m0[85u].x * _750) / _2518)));
        float _2539 = (log2(_2505 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2540 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        uint _2543 = uint(isnan(14.0) ? _2540 : (isnan(_2540) ? 14.0 : min(_2540, 14.0)));
        uvec4 _2548 = texelFetch(g_lightClusterGridBuffer, int(((_2543 << 2u) + (_2529 << 6u)) >> 2u));
        uint _2549 = _2548.x;
        uint _2550 = _2517.z;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        if (((((1u << ((_2550 >> 4u) & 15u)) + 4294967295u) & _2549) == 0u) || ((_2550 & 240u) == 0u))
        {
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
        }
        else
        {
            float _2651;
            float _2653;
            float _2655;
            float _2657;
            float _2659;
            float _2661;
            float _2795 = 0.0;
            float _2796 = 0.0;
            float _2797 = 0.0;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            uint _2801 = 0u;
            uint _2810;
            bool _2811;
            for (;;)
            {
                _2810 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_2801 << 2u)) >> 2u)).x;
                _2811 = _2810 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2811)
                {
                    frontier_phi_61_pred = _2795;
                    frontier_phi_61_pred_1 = _2800;
                    frontier_phi_61_pred_2 = _2799;
                    frontier_phi_61_pred_3 = _2798;
                    frontier_phi_61_pred_4 = _2797;
                    frontier_phi_61_pred_5 = _2796;
                }
                else
                {
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    uint _2925;
                    _2919 = _2795;
                    _2920 = _2796;
                    _2921 = _2797;
                    _2922 = _2798;
                    _2923 = _2799;
                    _2924 = _2800;
                    _2925 = _2810;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    for (;;)
                    {
                        uint _2929 = uint(findLSB(_2925)) + (_2801 << 5u);
                        uint _2926 = (_2925 + 4294967295u) & _2925;
                        uint _2931 = _2929 * 48u;
                        vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2931)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 3u)).x));
                        uint _2951 = (_2929 * 48u) + 4u;
                        vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 3u)).x));
                        uint _2970 = (_2929 * 48u) + 8u;
                        vec3 _2981 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2970)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 2u)).x));
                        float _2985 = _2945.x - _2503;
                        float _2986 = _2945.y - _2504;
                        float _2987 = _2945.z - _2505;
                        float _2988 = dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987));
                        float _2991 = inversesqrt(_2988);
                        float _2992 = _2991 * _2985;
                        float _2993 = _2991 * _2986;
                        float _2994 = _2991 * _2987;
                        float _2995 = dot(vec3(_769, _772, _775), vec3(_2992, _2993, _2994));
                        float _3000 = 1.0 - (_2988 * _2945.w);
                        float _4313 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3001 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                        float _3002 = sqrt(_2988) * _2964.w;
                        float _3005 = 1.39999997615814208984375 / (_3002 + 1.39999997615814208984375);
                        float _3006 = _3005 * _3005;
                        float _3009 = ((1.0 - _3006) * _2995) + _3006;
                        float _3012 = _3002 * _3002;
                        float _3016 = ((isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0))) * _3001) / ((_3012 * 0.699999988079071044921875) + 1.0);
                        float _3020 = (-0.0) - _2503;
                        float _3021 = (-0.0) - _2504;
                        float _3022 = (-0.0) - _2505;
                        float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                        float _3027 = _3026 * _3020;
                        float _3028 = _3026 * _3021;
                        float _3029 = _3026 * _3022;
                        float _3037 = exp2(log2(1.0 / ((_3012 * 3.5) + 5.0)) * 0.25);
                        float _3038 = 1.0 - _844;
                        float _3045 = sqrt(1.0 - ((1.0 - (_3038 * _3038)) * (1.0 - (_3037 * _3037))));
                        float _3046 = _3045 * _3045;
                        float _3047 = _3046 * _3046;
                        float _3048 = _3027 + _2992;
                        float _3049 = _3028 + _2993;
                        float _3050 = _3029 + _2994;
                        float _3054 = inversesqrt(dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050)));
                        float _3058 = dot(vec3(_769, _772, _775), vec3(_3027, _3028, _3029));
                        float _4329 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3061 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3062 = dot(vec3(_769, _772, _775), vec3(_3054 * _3048, _3054 * _3049, _3054 * _3050));
                        float _4340 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3065 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3069 = ((_3065 * _3065) * (_3047 + (-1.0))) + 1.0;
                        float _3070 = _3005 * _3046;
                        float _3071 = _3070 * _3070;
                        float _3074 = ((1.0 - _3071) * _2995) + _3071;
                        float _4351 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3075 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _3076 = 1.0 - _3046;
                        float _3086 = (0.5 / (((_3075 * ((_3061 * _3076) + _3046)) + 9.9999999392252902907785028219223e-09) + (((_3075 * _3076) + _3046) * _3061))) * _3075;
                        float _4362 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3097 = (((_3047 * 3.1415927410125732421875) * (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) / ((_3069 * _3069) * ((_3012 * 2.1991131305694580078125) + 3.141590118408203125))) * _3001;
                        _2854 = (_3016 * _2964.x) + _2922;
                        _2855 = (_3016 * _2964.y) + _2923;
                        _2856 = (_3016 * _2964.z) + _2924;
                        _2851 = (_3097 * _2981.x) + _2919;
                        _2852 = (_3097 * _2981.y) + _2920;
                        _2853 = (_3097 * _2981.z) + _2921;
                        if (_2926 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2919 = _2851;
                            _2920 = _2852;
                            _2921 = _2853;
                            _2922 = _2854;
                            _2923 = _2855;
                            _2924 = _2856;
                            _2925 = _2926;
                        }
                    }
                    frontier_phi_61_pred = _2851;
                    frontier_phi_61_pred_1 = _2856;
                    frontier_phi_61_pred_2 = _2855;
                    frontier_phi_61_pred_3 = _2854;
                    frontier_phi_61_pred_4 = _2853;
                    frontier_phi_61_pred_5 = _2852;
                }
                _2651 = frontier_phi_61_pred;
                _2661 = frontier_phi_61_pred_1;
                _2659 = frontier_phi_61_pred_2;
                _2657 = frontier_phi_61_pred_3;
                _2655 = frontier_phi_61_pred_4;
                _2653 = frontier_phi_61_pred_5;
                uint _2802 = _2801 + 1u;
                if (_2802 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2795 = _2651;
                    _2796 = _2653;
                    _2797 = _2655;
                    _2798 = _2657;
                    _2799 = _2659;
                    _2800 = _2661;
                    _2801 = _2802;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
        }
        uvec4 _2664 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2665 = _2664.z;
        uint _2667 = (_2665 >> 8u) & 15u;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        if (((4294967295u << _2667) & _2549) == 0u)
        {
            _2763 = _2650;
            _2765 = _2652;
            _2767 = _2654;
            _2769 = _2656;
            _2771 = _2658;
            _2773 = _2660;
        }
        else
        {
            float _2788 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
            float _2789 = _2788 * _2503;
            float _2790 = _2788 * _2504;
            float _2791 = _2788 * _2505;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2667 < ((_2665 >> 12u) & 15u))
            {
                float _2764;
                float _2766;
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2902 = _2650;
                float _2903 = _2652;
                float _2904 = _2654;
                float _2905 = _2656;
                float _2906 = _2658;
                float _2907 = _2660;
                uint _2908 = _2667;
                uint _2917;
                bool _2918;
                for (;;)
                {
                    _2917 = texelFetch(g_lightClassification, int((((_2543 << 5u) + (_2529 << 9u)) + (_2908 << 2u)) >> 2u)).x;
                    _2918 = _2917 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2918)
                    {
                        frontier_phi_67_pred = _2905;
                        frontier_phi_67_pred_1 = _2906;
                        frontier_phi_67_pred_2 = _2907;
                        frontier_phi_67_pred_3 = _2904;
                        frontier_phi_67_pred_4 = _2903;
                        frontier_phi_67_pred_5 = _2902;
                    }
                    else
                    {
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3115 = _2902;
                        float _3116 = _2903;
                        float _3117 = _2904;
                        float _3118 = _2905;
                        float _3119 = _2906;
                        float _3120 = _2907;
                        uint _3121 = _2917;
                        uint _3122;
                        vec4 _3147;
                        float _3148;
                        vec4 _3163;
                        vec3 _3175;
                        vec4 _3190;
                        vec4 _3206;
                        float _3252;
                        bool _3253;
                        for (;;)
                        {
                            uint _3132 = ((_2908 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3121));
                            _3122 = (_3121 + 4294967295u) & _3121;
                            uint _3134 = _3132 * 40u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3148 = _3147.w;
                            uint _3150 = (_3132 * 40u) + 4u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3165 = (_3132 * 40u) + 8u;
                            _3175 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x));
                            uint _3177 = (_3132 * 40u) + 16u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3193 = (_3132 * 40u) + 20u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3208 = (_3132 * 40u) + 24u;
                            vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3227 = (_3132 * 40u) + 28u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            _3252 = fma(_2505, _3240.z, fma(_2504, _3240.y, _3240.x * _2503)) + _3240.w;
                            _3253 = !((fma(_2505, _3221.z, fma(_2504, _3221.y, _3221.x * _2503)) + _3221.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3253)
                            {
                                float _3280 = _3147.x - _2503;
                                float _3281 = _3147.y - _2504;
                                float _3282 = _3147.z - _2505;
                                float _3283 = dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282));
                                float _3286 = inversesqrt(_3283);
                                float _3287 = _3286 * _3280;
                                float _3288 = _3286 * _3281;
                                float _3289 = _3286 * _3282;
                                float _3293 = 1.0 - (_3283 / (_3148 * _3148));
                                float _4373 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3298 = sqrt(_3283) * _3163.w;
                                float _3300 = 1.39999997615814208984375 / (_3298 + 1.39999997615814208984375);
                                float _3301 = _3300 * _3300;
                                float _3304 = ((1.0 - _3301) * dot(vec3(_3287, _3288, _3289), vec3(_769, _772, _775))) + _3301;
                                float _3307 = _3298 * _3298;
                                float _3311 = (fma(_2505, _3190.z, fma(_2504, _3190.y, _3190.x * _2503)) + _3190.w) / _3252;
                                float _3312 = (fma(_2505, _3206.z, fma(_2504, _3206.y, _3206.x * _2503)) + _3206.w) / _3252;
                                float _3316 = 1.0 - dot(vec2(_3311, _3312), vec2(_3311, _3312));
                                float _4389 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3318 = _3317 * (((isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))) * _3294) / ((_3307 * 0.699999988079071044921875) + 1.0));
                                float _3330 = exp2(log2(1.0 / ((_3307 * 3.5) + 5.0)) * 0.25);
                                float _3331 = 1.0 - _844;
                                float _3338 = sqrt(1.0 - ((1.0 - (_3331 * _3331)) * (1.0 - (_3330 * _3330))));
                                float _3339 = _3338 * _3338;
                                float _3340 = _3339 * _3339;
                                float _3341 = _3287 - _2789;
                                float _3342 = _3288 - _2790;
                                float _3343 = _3289 - _2791;
                                float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                                float _3351 = dot(vec3(_769, _772, _775), vec3((-0.0) - _2789, (-0.0) - _2790, (-0.0) - _2791));
                                float _4400 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3354 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3355 = dot(vec3(_769, _772, _775), vec3(_3347 * _3341, _3347 * _3342, _3347 * _3343));
                                float _4411 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3358 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3362 = ((_3358 * _3358) * (_3340 + (-1.0))) + 1.0;
                                float _3363 = _3300 * _3339;
                                float _3364 = _3363 * _3363;
                                float _3370 = ((1.0 - _3364) * dot(vec3(_769, _772, _775), vec3(_3287, _3288, _3289))) + _3364;
                                float _4422 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3372 = 1.0 - _3339;
                                float _3382 = (0.5 / (((_3371 * ((_3354 * _3372) + _3339)) + 9.9999999392252902907785028219223e-09) + (((_3371 * _3372) + _3339) * _3354))) * _3371;
                                float _4433 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3392 = (_3317 * _3294) * (((_3340 * 3.1415927410125732421875) * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) / ((_3362 * _3362) * ((_3307 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3392 * _3175.x;
                                frontier_phi_73_pred_1 = _3392 * _3175.y;
                                frontier_phi_73_pred_2 = _3318 * _3163.z;
                                frontier_phi_73_pred_3 = _3318 * _3163.y;
                                frontier_phi_73_pred_4 = _3318 * _3163.x;
                                frontier_phi_73_pred_5 = _3392 * _3175.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3396 = frontier_phi_73_pred;
                            _3397 = frontier_phi_73_pred_1;
                            _3401 = frontier_phi_73_pred_2;
                            _3400 = frontier_phi_73_pred_3;
                            _3399 = frontier_phi_73_pred_4;
                            _3398 = frontier_phi_73_pred_5;
                            _3105 = _3399 + _3118;
                            _3106 = _3400 + _3119;
                            _3107 = _3401 + _3120;
                            _3102 = _3396 + _3115;
                            _3103 = _3397 + _3116;
                            _3104 = _3398 + _3117;
                            if (_3122 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3122;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3105;
                        frontier_phi_67_pred_1 = _3106;
                        frontier_phi_67_pred_2 = _3107;
                        frontier_phi_67_pred_3 = _3104;
                        frontier_phi_67_pred_4 = _3103;
                        frontier_phi_67_pred_5 = _3102;
                    }
                    _2770 = frontier_phi_67_pred;
                    _2772 = frontier_phi_67_pred_1;
                    _2774 = frontier_phi_67_pred_2;
                    _2768 = frontier_phi_67_pred_3;
                    _2766 = frontier_phi_67_pred_4;
                    _2764 = frontier_phi_67_pred_5;
                    uint _2909 = _2908 + 1u;
                    if (_2909 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2902 = _2764;
                        _2903 = _2766;
                        _2904 = _2768;
                        _2905 = _2770;
                        _2906 = _2772;
                        _2907 = _2774;
                        _2908 = _2909;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2772;
                frontier_phi_55_56_ladder_1 = _2774;
                frontier_phi_55_56_ladder_2 = _2770;
                frontier_phi_55_56_ladder_3 = _2768;
                frontier_phi_55_56_ladder_4 = _2766;
                frontier_phi_55_56_ladder_5 = _2764;
            }
            else
            {
                frontier_phi_55_56_ladder = _2658;
                frontier_phi_55_56_ladder_1 = _2660;
                frontier_phi_55_56_ladder_2 = _2656;
                frontier_phi_55_56_ladder_3 = _2654;
                frontier_phi_55_56_ladder_4 = _2652;
                frontier_phi_55_56_ladder_5 = _2650;
            }
            _2763 = frontier_phi_55_56_ladder_5;
            _2765 = frontier_phi_55_56_ladder_4;
            _2767 = frontier_phi_55_56_ladder_3;
            _2769 = frontier_phi_55_56_ladder_2;
            _2771 = frontier_phi_55_56_ladder;
            _2773 = frontier_phi_55_56_ladder_1;
        }
        float _2778 = isnan(1.0) ? _828 : (isnan(_828) ? 1.0 : min(_828, 1.0));
        _2562 = (_2778 * _2769) + _1998;
        _2564 = (_2778 * _2771) + _2000;
        _2566 = (_2778 * _2773) + _2002;
        _2568 = ((_2763 * _812) * _2778) + _2343;
        _2570 = ((_2765 * _814) * _2778) + _2345;
        _2572 = ((_2767 * _815) * _2778) + _2347;
    }
    else
    {
        _2562 = _1998;
        _2564 = _2000;
        _2566 = _2002;
        _2568 = _2343;
        _2570 = _2345;
        _2572 = _2347;
    }
    float _4449 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4460 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4471 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    uint _2592 = _234 + 6u;
    float _2600 = _750 / cbSceneParam._m0[86u].x;
    float _2601 = _751 / cbSceneParam._m0[86u].y;
    vec4 _2615 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2600, _2601, (log2((isnan(cbSceneParam._m0[77u].w) ? _684 : (isnan(_684) ? cbSceneParam._m0[77u].w : min(_684, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2617 = _2615.x;
    float _2618 = _2615.y;
    float _2619 = _2615.z;
    float _2620 = _2615.w;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    if (_684 > cbSceneParam._m0[78u].w)
    {
        float _2675 = isnan(_684) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _684 : min(cbSceneParam._m0[80u].w, _684));
        float _2676 = _2675 / _684;
        float _2687 = _2676 * _735;
        float _2688 = _736 * _2676;
        float _2689 = (-0.0) - _2688;
        float _2691 = _2676 * _737;
        float _2693 = (cbSceneParam._m0[77u].w * _2689) / _2675;
        float _2694 = _2693 + cbSceneParam._m0[79u].w;
        float _2695 = cbSceneParam._m0[79u].w - _2688;
        float _2701 = sqrt(((_2687 * _2687) + (_2688 * _2688)) + (_2691 * _2691));
        float _2704 = (1.0 - (cbSceneParam._m0[77u].w / _2675)) * _2701;
        float _2709 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2711 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2864;
        if (abs((_2689 - _2693) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2864 = ((((_2694 > 0.0) ? exp2(_2709 * _2694) : (2.0 - exp2(_2711 * _2694))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2704;
        }
        else
        {
            float _2824 = 1.0 / cbSceneParam._m0[80u].x;
            float _2825 = isnan(_2695) ? _2694 : (isnan(_2694) ? _2695 : max(_2694, _2695));
            float _2826 = isnan(_2695) ? _2694 : (isnan(_2694) ? _2695 : min(_2694, _2695));
            float _2835 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : min(_2825, 0.0));
            float _2836 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : min(_2826, 0.0));
            _2864 = ((abs(_2701 / _2689) * cbSceneParam._m0[80u].y) * ((((_2835 - _2836) * 2.0) - ((exp2(_2709 * (isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0)))) - exp2(_2709 * (isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0))))) * _2824)) - ((exp2(_2711 * _2835) - exp2(_2711 * _2836)) * _2824))) + (_2704 * cbSceneParam._m0[80u].z);
        }
        vec4 _2866 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2600, _2601, 1.0), 0.0);
        float _2875 = exp2((_2864 * (-1.44269502162933349609375)) * (1.0 - _2866.w));
        float _2876 = log2(_2875);
        float _2892 = log2(_2620);
        _2713 = (exp2(_2892 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].x)) * _2866.x) / cbSceneParam._m0[78u].x)) + _2617;
        _2715 = (exp2(_2892 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].y)) * _2866.y) / cbSceneParam._m0[78u].y)) + _2618;
        _2717 = (exp2(_2892 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].z)) * _2866.z) / cbSceneParam._m0[78u].z)) + _2619;
        _2719 = _2875 * _2620;
    }
    else
    {
        _2713 = _2617;
        _2715 = _2618;
        _2717 = _2619;
        _2719 = _2620;
    }
    float _2731 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2732 = _2731 == 3.0;
    float _2733 = log2(_2719);
    float _2740 = exp2(_2733 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2562 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _828))) + ((_2568 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1636)) * cbPerFrame._m0[3u].x));
    float _2741 = exp2(_2733 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2564 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _828))) + ((_2570 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1636)) * cbPerFrame._m0[3u].x));
    float _2742 = exp2(_2733 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2566 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _828))) + ((_2572 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1636)) * cbPerFrame._m0[3u].x));
    float _2751 = (_2731 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2751 * (_2732 ? _2740 : (_2740 + (cbSceneParam._m0[72u].w * _2713)));
    SV_Target.y = _2751 * (_2732 ? _2741 : (_2741 + (cbSceneParam._m0[72u].w * _2715)));
    SV_Target.z = _2751 * (_2732 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2717)));
    SV_Target.w = cbInstanceData._m0[_2592].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2592].w;
}


