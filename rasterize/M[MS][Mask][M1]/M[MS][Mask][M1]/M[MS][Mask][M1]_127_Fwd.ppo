#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1616;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _375.x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3939 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _453 = (_446 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _454 = (_446 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _455 = (_446 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _494 = _492.x;
    float _504 = dot(vec4(_494, _492.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _518 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _375.y) * 2.0) - ((((_494 - _504) * cbMtdParam._m0[23u].w) + _504) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3950 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _526 = (_519 * ((_472.x * cbMtdParam._m0[13u].x) - _453)) + _453;
    float _527 = (_519 * ((_472.y * cbMtdParam._m0[13u].y) - _454)) + _454;
    float _528 = (_519 * ((_472.z * cbMtdParam._m0[13u].z) - _455)) + _455;
    vec4 _547 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _286) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _287) + cbTextureTilingScale._m0[24u].w));
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _566 = _564.x;
    float _576 = dot(vec4(_566, _564.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _588 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _375.z) * 2.0) - ((((_566 - _576) * cbMtdParam._m0[23u].w) + _576) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3961 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _602 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _306.x) * ((_589 * ((_547.x * cbMtdParam._m0[14u].x) - _526)) + _526);
    float _605 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _306.y) * ((_589 * ((_547.y * cbMtdParam._m0[14u].y) - _527)) + _527);
    float _608 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _306.z) * ((_589 * ((_547.z * cbMtdParam._m0[14u].z) - _528)) + _528);
    vec4 _626 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _645 = _643.x;
    float _646 = _643.y;
    float _647 = _643.z;
    float _654 = ((_626.x - _645) * _446) + _645;
    float _655 = ((_626.y - _646) * _446) + _646;
    float _656 = ((_626.z - _647) * _446) + _647;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _679 = ((_668.x - _654) * _519) + _654;
    float _680 = ((_668.y - _655) * _519) + _655;
    float _681 = ((_668.z - _656) * _519) + _656;
    vec4 _693 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _286) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _287) + cbTextureTilingScale._m0[23u].w));
    float _706 = ((_693.z - _681) * _589) + _681;
    float _709 = ((((_693.x - _679) * _589) + _679) * 2.0) + (-1.0);
    float _711 = ((((_693.y - _680) * _589) + _680) * 2.0) + (-1.0);
    float _712 = dot(vec2(_709, _711), vec2(_709, _711));
    float _3972 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _717 = sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))));
    vec4 _731 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _743 = (((_731.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _709;
    float _744 = (((_731.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _711;
    float _747 = fma(_717, _255, fma(_744, _262, _743 * _248));
    float _750 = fma(_717, _256, fma(_744, _263, _743 * _249));
    float _753 = fma(_717, _257, fma(_744, _264, _743 * _250));
    float _757 = inversesqrt(dot(vec3(_747, _750, _753), vec3(_747, _750, _753)));
    vec4 _784 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _786 = _784.x;
    float _787 = 1.0 - _786;
    float _795 = (cbMtdParam._m0[19u].x + dot(vec4(_757 * _747, _757 * _750, _757 * _753, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_786 - _787) * cbMtdParam._m0[24u].z) + _787) * cbMtdParam._m0[21u].z);
    float _3983 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _796 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _798 = (-0.0) - cbMtdParam._m0[24u].x;
    float _800 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _800 : (isnan(_800) ? 1.0 : min(_800, 1.0));
    float _808 = _796 - ((_796 * TEXCOORD_8.x) * _801);
    float _809 = _796 - ((_796 * TEXCOORD_8.y) * _801);
    float _810 = _796 - ((_796 * TEXCOORD_8.z) * _801);
    float _817 = (_808 * (cbMtdParam._m0[17u].x - _602)) + _602;
    float _818 = (_809 * (cbMtdParam._m0[17u].y - _605)) + _605;
    float _819 = (_810 * (cbMtdParam._m0[17u].z - _608)) + _608;
    vec4 _831 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _833 = _831.x;
    float _834 = 1.0 - _833;
    float _860 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_833 - _834) * cbMtdParam._m0[24u].w) + _834) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4004 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _861 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _869 = ((((cbMtdParam._m0[10u].x - _817) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _861) + _817;
    float _870 = ((((cbMtdParam._m0[10u].y - _818) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _861) + _818;
    float _871 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _819)) * _861) + _819;
    vec4 _897 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _899 = _897.x;
    float _916 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _899) * _446) + _899;
    float _933 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _916) * _519) + _916;
    float _950 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _286) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _287) + cbTextureTilingScale._m0[10u].w)).x - _933) * _589) + _933;
    float _954 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _950) * cbMtdParam._m0[19u].z) + _950;
    float _956 = _954 - (_954 * _808);
    float _958 = _956 - (_956 * _861);
    float _962 = (cbMtdParam._m0[19u].w * (_731.z - _706)) + _706;
    vec4 _978 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _985 = (_978.x * 2.0) + (-1.0);
    float _986 = (_978.y * 2.0) + (-1.0);
    float _987 = dot(vec2(_985, _986), vec2(_985, _986));
    float _4015 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _995 = ((_978.z - _962) * _808) + _962;
    float _998 = ((cbMtdParam._m0[23u].x - _995) * _861) + _995;
    vec4 _1021 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1027 = (_1021.x * 2.0) + (-1.0);
    float _1028 = (_1021.y * 2.0) + (-1.0);
    float _1029 = dot(vec2(_1027, _1028), vec2(_1027, _1028));
    float _4026 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1044 = ((sqrt(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) - _717) * _810) + _717;
    float _1047 = (((_985 - _743) * _808) + _743) + (cbMtdParam._m0[21u].x * _743);
    float _1048 = (((_986 - _744) * _809) + _744) + (cbMtdParam._m0[21u].x * _744);
    float _1059 = (((_1027 - _1047) + (_1047 * cbMtdParam._m0[22u].z)) * _861) + _1047;
    float _1060 = (((_1028 - _1048) + (_1048 * cbMtdParam._m0[22u].z)) * _861) + _1048;
    float _1061 = (_861 * (sqrt(1.0 - (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) - _1044)) + _1044;
    float _1063 = cbMtdParam._m0[22u].x + _731.w;
    float _1066 = fma(_1061, _255, fma(_1060, _262, _1059 * _248));
    float _1069 = fma(_1061, _256, fma(_1060, _263, _1059 * _249));
    float _1072 = fma(_1061, _257, fma(_1060, _264, _1059 * _250));
    float _1076 = inversesqrt(dot(vec3(_1066, _1069, _1072), vec3(_1066, _1069, _1072)));
    float _1077 = _1076 * _1066;
    float _1078 = _1076 * _1069;
    float _1079 = _1076 * _1072;
    float _4037 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1080 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _4059 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4070 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4081 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4092 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _1085 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _1099 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1149 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1139);
    float _1150 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1139);
    float _1151 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1139);
    float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
    float _1156 = _1149 * _1155;
    float _1157 = _1150 * _1155;
    float _1158 = _1151 * _1155;
    float _1164 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1165 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1183 = fma(_1079, cbSceneParam._m0[5u].z, fma(_1078, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1077));
    float _1186 = fma(_1079, cbSceneParam._m0[6u].z, fma(_1078, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1077));
    float _1189 = fma(_1079, cbSceneParam._m0[7u].z, fma(_1078, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1077));
    uint _1203 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1209 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_1203].x;
    float _1210 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbInstanceData._m0[_1203].y;
    float _1211 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * cbInstanceData._m0[_1203].z;
    float _4103 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _1212 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1213 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1214 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _1215 = 1.0 - _1085;
    float _1216 = _1212 * _1215;
    float _1217 = _1213 * _1215;
    float _1218 = _1214 * _1215;
    float _1223 = (_1212 + (-0.039999999105930328369140625)) * _1085;
    float _1224 = (_1213 + (-0.039999999105930328369140625)) * _1085;
    float _1225 = (_1214 + (-0.039999999105930328369140625)) * _1085;
    float _1226 = _1223 + 0.039999999105930328369140625;
    float _1228 = _1224 + 0.039999999105930328369140625;
    float _1229 = _1225 + 0.039999999105930328369140625;
    vec4 _1238 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1164, cbSceneParam._m0[86u].y * _1165));
    float _1242 = ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * TEXCOORD_5.w) * _1238.x;
    float _1243 = dot(vec3(_1077, _1078, _1079), vec3(_1156, _1157, _1158));
    float _1246 = _1243 * 2.0;
    float _1250 = (_1246 * _1077) - _1156;
    float _1251 = (_1246 * _1078) - _1157;
    float _1252 = (_1246 * _1079) - _1158;
    float _1256 = abs(dot(vec3(_1156, _1157, _1158), vec3(_1077, _1078, _1079)));
    float _4136 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
    float _1258 = sqrt(_1080);
    float _1271 = exp2((_1258 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1258 * 3.0));
    float _1277 = (1.0 - _1271) * ((_1258 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1278 = _1271 * _1258;
    float _1306 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1310 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1314 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1615;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1340 = fma(_1314, cbModelParam._m0[26u].z, fma(_1310, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1306));
        float _1344 = fma(_1314, cbModelParam._m0[27u].z, fma(_1310, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1306));
        float _1348 = fma(_1314, cbModelParam._m0[28u].z, fma(_1310, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1306));
        float _1373 = _1306 + _1077;
        float _1374 = _1310 + _1078;
        float _1375 = _1314 + _1079;
        float _1385 = fma(_1375, cbModelParam._m0[26u].z, fma(_1374, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1373)) - _1340;
        float _1386 = fma(_1375, cbModelParam._m0[27u].z, fma(_1374, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1373)) - _1344;
        float _1387 = fma(_1375, cbModelParam._m0[28u].z, fma(_1374, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1373)) - _1348;
        float _1391 = inversesqrt(dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387)));
        float _1404 = ((_1391 * _1385) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1340 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1391 * _1386) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1344 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1391 * _1387) / cbModelParam._m0[34u].z) + ((((((_1348 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        float _1443 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1409.x + (-0.5));
        float _1445 = _1443 * (_1409.y + (-0.5));
        float _1446 = _1443 * (_1409.z + (-0.5));
        float _1453 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1416.x + (-0.5));
        float _1455 = _1453 * (_1416.y + (-0.5));
        float _1456 = _1453 * (_1416.z + (-0.5));
        float _1463 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1423.x + (-0.5));
        float _1465 = _1463 * (_1423.y + (-0.5));
        float _1466 = _1463 * (_1423.z + (-0.5));
        float _1473 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1430.x + (-0.5));
        float _1475 = _1473 * (_1430.y + (-0.5));
        float _1476 = _1473 * (_1430.z + (-0.5));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = _1444 * 0.5;
        float _1481 = _1454 * 0.5;
        float _1482 = _1464 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1497 = (dot(vec3(_1077, _1078, _1079), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1507 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4184 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1509 + 1.0))) + _1514) * _1477;
        float _1524 = _1445 * 0.5;
        float _1525 = _1455 * 0.5;
        float _1526 = _1465 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_1077, _1078, _1079), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4217 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1551 + 1.0))) + _1556) * _1478;
        float _1566 = _1446 * 0.5;
        float _1567 = _1456 * 0.5;
        float _1568 = _1466 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_1077, _1078, _1079), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4250 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1593 + 1.0))) + _1598) * _1479;
        _1615 = _1446;
        _1617 = _1445;
        _1618 = _1444;
        _1619 = _1456;
        _1620 = _1455;
        _1621 = _1454;
        _1622 = _1466;
        _1623 = _1465;
        _1624 = _1464;
        _1625 = _1479;
        _1626 = _1478;
        _1627 = _1477;
        _1628 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1629 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
        _1630 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
    }
    else
    {
        _1615 = _1616;
        _1617 = _1616;
        _1618 = _1616;
        _1619 = _1616;
        _1620 = _1616;
        _1621 = _1616;
        _1622 = _1616;
        _1623 = _1616;
        _1624 = _1616;
        _1625 = _1616;
        _1626 = _1616;
        _1627 = _1616;
        _1628 = 0.0;
        _1629 = 0.0;
        _1630 = 0.0;
    }
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1653 = fma(_1314, cbModelParam._m0[30u].z, fma(_1310, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1306));
        float _1657 = fma(_1314, cbModelParam._m0[31u].z, fma(_1310, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1306));
        float _1661 = fma(_1314, cbModelParam._m0[32u].z, fma(_1310, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1306));
        float _1684 = _1306 + _1077;
        float _1685 = _1310 + _1078;
        float _1686 = _1314 + _1079;
        float _1696 = fma(_1686, cbModelParam._m0[30u].z, fma(_1685, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1684)) - _1653;
        float _1697 = fma(_1686, cbModelParam._m0[31u].z, fma(_1685, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1684)) - _1657;
        float _1698 = fma(_1686, cbModelParam._m0[32u].z, fma(_1685, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1684)) - _1661;
        float _1702 = inversesqrt(dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698)));
        float _1715 = ((_1702 * _1696) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1653 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1716 = ((_1702 * _1697) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1657 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1717 = ((_1702 * _1698) / cbModelParam._m0[35u].z) + ((((((_1661 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1719 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1715, _1716, _1717), 0.0);
        vec4 _1726 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1715, _1716, _1717), 0.0);
        vec4 _1733 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1715, _1716, _1717), 0.0);
        vec4 _1740 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1715, _1716, _1717), 0.0);
        float _1752 = exp2((_1719.w + (-0.5)) * 20.0) * 2.0;
        float _1753 = _1752 * (_1719.x + (-0.5));
        float _1754 = _1752 * (_1719.y + (-0.5));
        float _1755 = _1752 * (_1719.z + (-0.5));
        float _1762 = exp2((_1726.w + (-0.5)) * 20.0) * 2.0;
        float _1763 = _1762 * (_1726.x + (-0.5));
        float _1764 = _1762 * (_1726.y + (-0.5));
        float _1765 = _1762 * (_1726.z + (-0.5));
        float _1772 = exp2((_1733.w + (-0.5)) * 20.0) * 2.0;
        float _1773 = _1772 * (_1733.x + (-0.5));
        float _1774 = _1772 * (_1733.y + (-0.5));
        float _1775 = _1772 * (_1733.z + (-0.5));
        float _1782 = exp2((_1740.w + (-0.5)) * 20.0) * 2.0;
        float _1783 = _1782 * (_1740.x + (-0.5));
        float _1784 = _1782 * (_1740.y + (-0.5));
        float _1785 = _1782 * (_1740.z + (-0.5));
        float _1786 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1787 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1788 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1789 = _1753 * 0.5;
        float _1790 = _1763 * 0.5;
        float _1791 = _1773 * 0.5;
        float _1792 = dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791));
        float _1797 = (_1792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1792);
        float _1805 = (dot(vec3(_1077, _1078, _1079), vec3(_1797 * _1789, _1797 * _1790, _1797 * _1791)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1814 = sqrt(((_1790 * _1790) + (_1789 * _1789)) + (_1791 * _1791)) / (_1786 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1816 = _1815 * 2.0;
        float _1820 = (1.0 - _1815) / (_1815 + 1.0);
        float _4313 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1830 = ((((1.0 - _1821) * (_1816 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1816 + 1.0))) + _1821) * _1786;
        float _1831 = _1754 * 0.5;
        float _1832 = _1764 * 0.5;
        float _1833 = _1774 * 0.5;
        float _1834 = dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833));
        float _1839 = (_1834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1834);
        float _1847 = (dot(vec3(_1077, _1078, _1079), vec3(_1839 * _1831, _1839 * _1832, _1839 * _1833)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1856 = sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833)) / (_1787 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1858 = _1857 * 2.0;
        float _1862 = (1.0 - _1857) / (_1857 + 1.0);
        float _4346 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1872 = ((((1.0 - _1863) * (_1858 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1858 + 1.0))) + _1863) * _1787;
        float _1873 = _1755 * 0.5;
        float _1874 = _1765 * 0.5;
        float _1875 = _1775 * 0.5;
        float _1876 = dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875));
        float _1881 = (_1876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1876);
        float _1889 = (dot(vec3(_1077, _1078, _1079), vec3(_1881 * _1873, _1881 * _1874, _1881 * _1875)) + 1.0) * 0.5;
        float _4357 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1898 = sqrt(((_1874 * _1874) + (_1873 * _1873)) + (_1875 * _1875)) / (_1788 + 9.9999997473787516355514526367188e-06);
        float _4368 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1900 = _1899 * 2.0;
        float _1904 = (1.0 - _1899) / (_1899 + 1.0);
        float _4379 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1914 = ((((1.0 - _1905) * (_1900 + 2.0)) * exp2(log2(isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_1900 + 1.0))) + _1905) * _1788;
        _1922 = _1755;
        _1923 = _1754;
        _1924 = _1753;
        _1925 = _1765;
        _1926 = _1764;
        _1927 = _1763;
        _1928 = _1775;
        _1929 = _1774;
        _1930 = _1773;
        _1931 = _1788;
        _1932 = _1787;
        _1933 = _1786;
        _1934 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)));
        _1935 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)));
        _1936 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)));
    }
    else
    {
        _1922 = _1616;
        _1923 = _1616;
        _1924 = _1616;
        _1925 = _1616;
        _1926 = _1616;
        _1927 = _1616;
        _1928 = _1616;
        _1929 = _1616;
        _1930 = _1616;
        _1931 = _1616;
        _1932 = _1616;
        _1933 = _1616;
        _1934 = 0.0;
        _1935 = 0.0;
        _1936 = 0.0;
    }
    float _1946 = (cbModelParam._m0[1u].x * (_1934 - _1628)) + _1628;
    float _1947 = (cbModelParam._m0[1u].x * (_1935 - _1629)) + _1629;
    float _1948 = (cbModelParam._m0[1u].x * (_1936 - _1630)) + _1630;
    float _1969 = fma(_1948, cbSceneParam._m0[89u].z, fma(_1947, cbSceneParam._m0[89u].y, _1946 * cbSceneParam._m0[89u].x));
    float _1972 = fma(_1948, cbSceneParam._m0[90u].z, fma(_1947, cbSceneParam._m0[90u].y, _1946 * cbSceneParam._m0[90u].x));
    float _1975 = fma(_1948, cbSceneParam._m0[91u].z, fma(_1947, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1946));
    float _1990 = _1250 * 0.5;
    float _1991 = _1251 * 0.5;
    float _1992 = _1252 * 0.5;
    float _1993 = dot(vec4(_1990, _1991, _1992, 1.0), vec4(_1924, _1927, _1930, _1933));
    float _1996 = dot(vec4(_1990, _1991, _1992, 1.0), vec4(_1923, _1926, _1929, _1932));
    float _1999 = dot(vec4(_1990, _1991, _1992, 1.0), vec4(_1922, _1925, _1928, _1931));
    float _2033;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2006 = dot(vec4(_1990, _1991, _1992, 1.0), vec4(_1615, _1619, _1622, _1625));
        float _2010 = dot(vec4(_1990, _1991, _1992, 1.0), vec4(_1617, _1620, _1623, _1626));
        float _2014 = dot(vec4(_1990, _1991, _1992, 1.0), vec4(_1618, _1621, _1624, _1627));
        float _2021 = dot(vec4(cbModelParam._m0[39u]), vec4(_1990, _1991, _1992, 1.0));
        _2033 = dot(vec3(isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0)), isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0)), isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2021) ? 0.0 : (isnan(0.0) ? _2021 : max(0.0, _2021))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2033 = 1.0;
    }
    float _2044;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2035 = dot(vec4(cbModelParam._m0[40u]), vec4(_1990, _1991, _1992, 1.0));
        _2044 = dot(vec3(isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0)), isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0)), isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2035) ? 0.0 : (isnan(0.0) ? _2035 : max(0.0, _2035))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2044 = 1.0;
    }
    float _2048 = (_2044 * cbModelParam._m0[1u].x) + (_2033 * (1.0 - cbModelParam._m0[1u].x));
    float _2058 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1080);
    float _2059 = isnan(_2058) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2058 : min(cbModelParam._m0[25u].z, _2058));
    float _2139;
    float _2141;
    float _2143;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2106 = fma(_1314, cbModelParam._m0[13u].z, fma(_1310, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1306)) + cbModelParam._m0[13u].w;
        float _2110 = fma(_1314, cbModelParam._m0[14u].z, fma(_1310, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1306)) + cbModelParam._m0[14u].w;
        float _2114 = fma(_1314, cbModelParam._m0[15u].z, fma(_1310, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1306)) + cbModelParam._m0[15u].w;
        float _2117 = fma(_1252, cbModelParam._m0[13u].z, fma(_1251, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1250));
        float _2120 = fma(_1252, cbModelParam._m0[14u].z, fma(_1251, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1250));
        float _2123 = fma(_1252, cbModelParam._m0[15u].z, fma(_1251, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1250));
        float _2151;
        if (_2117 > 0.0)
        {
            _2151 = abs((1.0 - _2106) / _2117);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2106 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2151 = frontier_phi_14_12_ladder;
        }
        float _2354;
        if (_2120 > 0.0)
        {
            _2354 = abs((1.0 - _2110) / _2120);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2120 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2110 + 1.0) / _2120);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2354 = frontier_phi_23_19_ladder;
        }
        float _2608;
        if (_2123 > 0.0)
        {
            _2608 = abs((1.0 - _2114) / _2123);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2123 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2114 + 1.0) / _2123);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2608 = frontier_phi_35_30_ladder;
        }
        float _2610 = isnan(_2354) ? _2151 : (isnan(_2151) ? _2354 : min(_2151, _2354));
        float _2611 = isnan(_2608) ? _2610 : (isnan(_2610) ? _2608 : min(_2610, _2608));
        float _2615 = (_2611 * _2117) + _2106;
        float _2616 = (_2611 * _2120) + _2110;
        float _2617 = (_2611 * _2123) + _2114;
        float _2618 = _2611 * 9.9999997473787516355514526367188e-05;
        float _2620 = (-1.0) - _2618;
        float _2622 = _2618 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2617 > _2622) || ((_2617 < _2620) || ((_2616 > _2622) || ((_2616 < _2620) || ((_2615 < _2620) || (_2615 > _2622))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2745 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2617, cbModelParam._m0[9u].z, fma(_2616, cbModelParam._m0[9u].y, _2615 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2617, cbModelParam._m0[10u].z, fma(_2616, cbModelParam._m0[10u].y, _2615 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2617, cbModelParam._m0[11u].z, fma(_2616, cbModelParam._m0[11u].y, _2615 * cbModelParam._m0[11u].x))), _2059);
            frontier_phi_13_35_ladder = _2745.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2745.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2745.x * cbModelParam._m0[1u].y;
        }
        _2139 = frontier_phi_13_35_ladder_2;
        _2141 = frontier_phi_13_35_ladder_1;
        _2143 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2127 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1250, _1251, _1252), _2059);
        _2139 = _2127.x * cbModelParam._m0[1u].y;
        _2141 = _2127.y * cbModelParam._m0[1u].y;
        _2143 = _2127.z * cbModelParam._m0[1u].y;
    }
    float _2147 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1080);
    float _2148 = isnan(_2147) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2147 : min(cbModelParam._m0[25u].w, _2147));
    float _2238;
    float _2240;
    float _2242;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2202 = fma(_1314, cbModelParam._m0[21u].z, fma(_1310, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1306)) + cbModelParam._m0[21u].w;
        float _2206 = fma(_1314, cbModelParam._m0[22u].z, fma(_1310, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1306)) + cbModelParam._m0[22u].w;
        float _2210 = fma(_1314, cbModelParam._m0[23u].z, fma(_1310, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1306)) + cbModelParam._m0[23u].w;
        float _2213 = fma(_1252, cbModelParam._m0[21u].z, fma(_1251, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1250));
        float _2216 = fma(_1252, cbModelParam._m0[22u].z, fma(_1251, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1250));
        float _2219 = fma(_1252, cbModelParam._m0[23u].z, fma(_1251, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1250));
        float _2359;
        if (_2213 > 0.0)
        {
            _2359 = abs((1.0 - _2202) / _2213);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2213 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2202 + 1.0) / _2213);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2359 = frontier_phi_25_21_ladder;
        }
        float _2635;
        if (_2216 > 0.0)
        {
            _2635 = abs((1.0 - _2206) / _2216);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2216 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2206 + 1.0) / _2216);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2635 = frontier_phi_37_32_ladder;
        }
        float _2848;
        if (_2219 > 0.0)
        {
            _2848 = abs((1.0 - _2210) / _2219);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2219 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2210 + 1.0) / _2219);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2848 = frontier_phi_46_43_ladder;
        }
        float _2850 = isnan(_2635) ? _2359 : (isnan(_2359) ? _2635 : min(_2359, _2635));
        float _2851 = isnan(_2848) ? _2850 : (isnan(_2850) ? _2848 : min(_2850, _2848));
        float _2855 = (_2851 * _2213) + _2202;
        float _2856 = (_2851 * _2216) + _2206;
        float _2857 = (_2851 * _2219) + _2210;
        float _2858 = _2851 * 9.9999997473787516355514526367188e-05;
        float _2859 = (-1.0) - _2858;
        float _2861 = _2858 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2857 > _2861) || ((_2857 < _2859) || ((_2856 > _2861) || ((_2856 < _2859) || ((_2855 < _2859) || (_2855 > _2861))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3056 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2857, cbModelParam._m0[17u].z, fma(_2856, cbModelParam._m0[17u].y, _2855 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2857, cbModelParam._m0[18u].z, fma(_2856, cbModelParam._m0[18u].y, _2855 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2857, cbModelParam._m0[19u].z, fma(_2856, cbModelParam._m0[19u].y, _2855 * cbModelParam._m0[19u].x))), _2148);
            frontier_phi_22_46_ladder = _3056.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3056.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3056.x * cbModelParam._m0[1u].z;
        }
        _2238 = frontier_phi_22_46_ladder_2;
        _2240 = frontier_phi_22_46_ladder_1;
        _2242 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2222 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1250, _1251, _1252), _2148);
        _2238 = _2222.x * cbModelParam._m0[1u].z;
        _2240 = _2222.y * cbModelParam._m0[1u].z;
        _2242 = _2222.z * cbModelParam._m0[1u].z;
    }
    float _2255 = (((_1277 * _1226) + _1278) * _1242) * ((cbModelParam._m0[1u].w * (_2238 - _2139)) + _2139);
    float _2257 = (((_1277 * _1228) + _1278) * _1242) * ((cbModelParam._m0[1u].w * (_2240 - _2141)) + _2141);
    float _2259 = (((_1277 * _1229) + _1278) * _1242) * ((cbModelParam._m0[1u].w * (_2242 - _2143)) + _2143);
    float _2262 = fma(_2259, cbSceneParam._m0[89u].z, fma(_2257, cbSceneParam._m0[89u].y, _2255 * cbSceneParam._m0[89u].x));
    float _2265 = fma(_2259, cbSceneParam._m0[90u].z, fma(_2257, cbSceneParam._m0[90u].y, _2255 * cbSceneParam._m0[90u].x));
    float _2268 = fma(_2259, cbSceneParam._m0[91u].z, fma(_2257, cbSceneParam._m0[91u].y, _2255 * cbSceneParam._m0[91u].x));
    uvec4 _2278 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2280 = _2278.x * 14u;
    uint _2281 = _2280 + 13u;
    float _2288 = _1242 + (-1.0);
    float _2293 = (cbLight._m0[_2281].x * _2288) + 1.0;
    float _2294 = (cbLight._m0[_2281].y * _2288) + 1.0;
    float _2295 = (cbLight._m0[_2281].z * _2288) + 1.0;
    float _2296 = (cbLight._m0[_2281].w * _2288) + 1.0;
    uint _2297 = _2280 + 5u;
    float _2303 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
    uint _2307 = _2280 + 4u;
    float _2313 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
    uint _2317 = _2280 | 1u;
    float _2328 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_1077, _1078, _1079));
    float _2331 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_1077, _1078, _1079));
    float _4515 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _4526 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2336 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * 0.3183098733425140380859375;
    float _2338 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * 0.3183098733425140380859375;
    float _2345 = ((cbLight._m0[_2297].x * _2303) * _2338) + ((cbLight._m0[_2307].x * _2313) * _2336);
    float _2346 = ((_2303 * cbLight._m0[_2297].y) * _2338) + ((_2313 * cbLight._m0[_2307].y) * _2336);
    float _2347 = ((_2303 * cbLight._m0[_2297].z) * _2338) + ((_2313 * cbLight._m0[_2307].z) * _2336);
    uvec4 _2351 = floatBitsToUint(cbLight._m0[_2280 + 12u]);
    bool _2353 = _2351.x == 0u;
    float _2364;
    float _2366;
    float _2368;
    if (_2353)
    {
        _2364 = _2345;
        _2366 = _2346;
        _2368 = _2347;
    }
    else
    {
        uint _2372 = _2280 + 6u;
        float _2388 = (dot(vec3(cbLight._m0[_2280 + 2u].xyz), vec3(_1077, _1078, _1079)) * 0.5) + 0.5;
        float _2389 = _2388 * _2388;
        float _4537 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2390 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2391 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2364 = (((cbLight._m0[_2372].x * 0.3183098733425140380859375) * _2390) * _2391) + _2345;
        _2366 = (((cbLight._m0[_2372].y * 0.3183098733425140380859375) * _2390) * _2391) + _2346;
        _2368 = (((cbLight._m0[_2372].z * 0.3183098733425140380859375) * _2390) * _2391) + _2347;
    }
    bool _2371 = _2351.y == 0u;
    float _2409;
    float _2411;
    float _2413;
    if (_2371)
    {
        _2409 = _2364;
        _2411 = _2366;
        _2413 = _2368;
    }
    else
    {
        uint _2579 = _2280 + 7u;
        float _2595 = (dot(vec3(cbLight._m0[_2280 + 3u].xyz), vec3(_1077, _1078, _1079)) * 0.5) + 0.5;
        float _2596 = _2595 * _2595;
        float _4553 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2597 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2598 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2409 = (((cbLight._m0[_2579].x * 0.3183098733425140380859375) * _2597) * _2598) + _2364;
        _2411 = (((cbLight._m0[_2579].y * 0.3183098733425140380859375) * _2597) * _2598) + _2366;
        _2413 = (((cbLight._m0[_2579].z * 0.3183098733425140380859375) * _2597) * _2598) + _2368;
    }
    uint _2416 = _2280 + 8u;
    float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2280].w)) * _1080) * 0.949999988079071044921875);
    float _2430 = _2429 * _2429;
    float _2431 = cbLight._m0[_2280].x + _1156;
    float _2432 = cbLight._m0[_2280].y + _1157;
    float _2433 = cbLight._m0[_2280].z + _1158;
    float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
    float _2438 = _2437 * _2431;
    float _2439 = _2437 * _2432;
    float _2440 = _2437 * _2433;
    float _2441 = dot(vec3(_1077, _1078, _1079), vec3(cbLight._m0[_2280].xyz));
    float _4569 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _4580 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
    float _2445 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2446 = dot(vec3(_1077, _1078, _1079), vec3(_2438, _2439, _2440));
    float _4591 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_2438, _2439, _2440));
    float _4602 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2430 * _2430;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
    float _2467 = 0.959999978542327880859375 - _1223;
    float _2469 = 0.959999978542327880859375 - _1224;
    float _2470 = 0.959999978542327880859375 - _1225;
    float _2477 = 1.0 - _2430;
    float _2488 = (0.5 / (((_2445 * ((_2444 * _2477) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2477) + _2430) * _2444))) * _2444;
    float _4613 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2490 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    uint _2501 = _2280 + 9u;
    float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2317].w)) * _1080) * 0.949999988079071044921875);
    float _2513 = _2512 * _2512;
    float _2514 = cbLight._m0[_2317].x + _1156;
    float _2515 = cbLight._m0[_2317].y + _1157;
    float _2516 = cbLight._m0[_2317].z + _1158;
    float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
    float _2521 = _2520 * _2514;
    float _2522 = _2520 * _2515;
    float _2523 = _2520 * _2516;
    float _2524 = dot(vec3(_1077, _1078, _1079), vec3(cbLight._m0[_2317].xyz));
    float _4624 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2527 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2528 = dot(vec3(_1077, _1078, _1079), vec3(_2521, _2522, _2523));
    float _4635 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2532 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_2521, _2522, _2523));
    float _4646 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2536 = _2513 * _2513;
    float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
    float _2547 = exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0);
    float _2554 = 1.0 - _2513;
    float _2564 = (0.5 / (((_2445 * ((_2527 * _2554) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2554) + _2513) * _2527))) * _2527;
    float _4657 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2566 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
    float _2576 = (((((_2547 * _2467) + _1226) * cbLight._m0[_2501].x) * _2566) * _2303) + (((((_2466 * _2467) + _1226) * cbLight._m0[_2416].x) * _2490) * _2313);
    float _2577 = (((((_2547 * _2469) + _1228) * cbLight._m0[_2501].y) * _2566) * _2303) + (((((_2466 * _2469) + _1228) * cbLight._m0[_2416].y) * _2490) * _2313);
    float _2578 = (((((_2547 * _2470) + _1229) * cbLight._m0[_2501].z) * _2566) * _2303) + (((((_2466 * _2470) + _1229) * cbLight._m0[_2416].z) * _2490) * _2313);
    float _2640;
    float _2642;
    float _2644;
    if (_2353)
    {
        _2640 = _2576;
        _2642 = _2577;
        _2644 = _2578;
    }
    else
    {
        uint _2646 = _2280 + 2u;
        uint _2650 = _2280 + 10u;
        float _2664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2646].w)) * _1080) * 0.949999988079071044921875);
        float _2665 = _2664 * _2664;
        float _2666 = cbLight._m0[_2646].x + _1156;
        float _2667 = cbLight._m0[_2646].y + _1157;
        float _2668 = cbLight._m0[_2646].z + _1158;
        float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
        float _2673 = _2672 * _2666;
        float _2674 = _2672 * _2667;
        float _2675 = _2672 * _2668;
        float _2676 = dot(vec3(_1077, _1078, _1079), vec3(cbLight._m0[_2646].xyz));
        float _4668 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2679 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2680 = dot(vec3(_1077, _1078, _1079), vec3(_2673, _2674, _2675));
        float _4679 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2683 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2684 = dot(vec3(cbLight._m0[_2646].xyz), vec3(_2673, _2674, _2675));
        float _4690 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2688 = _2665 * _2665;
        float _2692 = ((_2683 * _2683) * (_2688 + (-1.0))) + 1.0;
        float _2699 = exp2(log2(1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) * 5.0);
        float _2706 = 1.0 - _2665;
        float _2716 = (0.5 / (((_2445 * ((_2679 * _2706) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2706) + _2665) * _2679))) * _2679;
        float _4701 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2718 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2688 / ((_2692 * _2692) * 3.141590118408203125));
        float _2719 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2640 = (((((_2699 * _2467) + _1226) * cbLight._m0[_2650].x) * _2718) * _2719) + _2576;
        _2642 = (((((_2699 * _2469) + _1228) * cbLight._m0[_2650].y) * _2718) * _2719) + _2577;
        _2644 = (((((_2699 * _2470) + _1229) * cbLight._m0[_2650].z) * _2718) * _2719) + _2578;
    }
    float _2754;
    float _2756;
    float _2758;
    if (_2371)
    {
        _2754 = _2640;
        _2756 = _2642;
        _2758 = _2644;
    }
    else
    {
        uint _2765 = _2280 + 3u;
        uint _2769 = _2280 + 11u;
        float _2783 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2765].w)) * _1080) * 0.949999988079071044921875);
        float _2784 = _2783 * _2783;
        float _2785 = cbLight._m0[_2765].x + _1156;
        float _2786 = cbLight._m0[_2765].y + _1157;
        float _2787 = cbLight._m0[_2765].z + _1158;
        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
        float _2792 = _2791 * _2785;
        float _2793 = _2791 * _2786;
        float _2794 = _2791 * _2787;
        float _2795 = dot(vec3(_1077, _1078, _1079), vec3(cbLight._m0[_2765].xyz));
        float _4717 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2798 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2799 = dot(vec3(_1077, _1078, _1079), vec3(_2792, _2793, _2794));
        float _4728 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2802 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2803 = dot(vec3(cbLight._m0[_2765].xyz), vec3(_2792, _2793, _2794));
        float _4739 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2807 = _2784 * _2784;
        float _2811 = ((_2802 * _2802) * (_2807 + (-1.0))) + 1.0;
        float _2818 = exp2(log2(1.0 - (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) * 5.0);
        float _2825 = 1.0 - _2784;
        float _2835 = (0.5 / (((_2445 * ((_2798 * _2825) + _2784)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2825) + _2784) * _2798))) * _2798;
        float _4750 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2837 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2807 / ((_2811 * _2811) * 3.141590118408203125));
        float _2838 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2754 = (((((_2818 * _2467) + _1226) * cbLight._m0[_2769].x) * _2837) * _2838) + _2640;
        _2756 = (((((_2818 * _2469) + _1228) * cbLight._m0[_2769].y) * _2837) * _2838) + _2642;
        _2758 = (((((_2818 * _2470) + _1229) * cbLight._m0[_2769].z) * _2837) * _2838) + _2644;
    }
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    if (_2278.y == 0u)
    {
        float _2913 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2914 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2913;
        float _2915 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2913;
        float _2916 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2913;
        uvec4 _2928 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2929 = _2928.x;
        uint _2940 = uint((float(_2928.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1165) / _2929))) + floor(float(uint(cbSceneParam._m0[85u].x * _1164) / _2929)));
        float _2950 = (log2(_2916 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2951 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        uint _2954 = uint(isnan(14.0) ? _2951 : (isnan(_2951) ? 14.0 : min(_2951, 14.0)));
        uvec4 _2959 = texelFetch(g_lightClusterGridBuffer, int(((_2954 << 2u) + (_2940 << 6u)) >> 2u));
        uint _2960 = _2959.x;
        uint _2961 = _2928.z;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        if (((((1u << ((_2961 >> 4u) & 15u)) + 4294967295u) & _2960) == 0u) || ((_2961 & 240u) == 0u))
        {
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
        }
        else
        {
            float _3062;
            float _3064;
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            uint _3211 = 0u;
            uint _3220;
            bool _3221;
            for (;;)
            {
                _3220 = texelFetch(g_lightClassification, int((((_2954 << 5u) + (_2940 << 9u)) + (_3211 << 2u)) >> 2u)).x;
                _3221 = _3220 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3221)
                {
                    frontier_phi_61_pred = _3205;
                    frontier_phi_61_pred_1 = _3210;
                    frontier_phi_61_pred_2 = _3209;
                    frontier_phi_61_pred_3 = _3208;
                    frontier_phi_61_pred_4 = _3207;
                    frontier_phi_61_pred_5 = _3206;
                }
                else
                {
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    uint _3335;
                    _3329 = _3205;
                    _3330 = _3206;
                    _3331 = _3207;
                    _3332 = _3208;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3220;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    for (;;)
                    {
                        uint _3339 = uint(findLSB(_3335)) + (_3211 << 5u);
                        uint _3336 = (_3335 + 4294967295u) & _3335;
                        uint _3341 = _3339 * 48u;
                        vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3341)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 3u)).x));
                        uint _3361 = (_3339 * 48u) + 4u;
                        vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 3u)).x));
                        uint _3380 = (_3339 * 48u) + 8u;
                        vec3 _3391 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3380)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 2u)).x));
                        float _3395 = _3355.x - _2914;
                        float _3396 = _3355.y - _2915;
                        float _3397 = _3355.z - _2916;
                        float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                        float _3401 = inversesqrt(_3398);
                        float _3402 = _3401 * _3395;
                        float _3403 = _3401 * _3396;
                        float _3404 = _3401 * _3397;
                        float _3405 = dot(vec3(_1183, _1186, _1189), vec3(_3402, _3403, _3404));
                        float _3410 = 1.0 - (_3398 * _3355.w);
                        float _4776 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3411 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3412 = sqrt(_3398) * _3374.w;
                        float _3415 = 1.39999997615814208984375 / (_3412 + 1.39999997615814208984375);
                        float _3416 = _3415 * _3415;
                        float _3419 = ((1.0 - _3416) * _3405) + _3416;
                        float _3422 = _3412 * _3412;
                        float _3426 = ((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3411) / ((_3422 * 0.699999988079071044921875) + 1.0);
                        float _3430 = (-0.0) - _2914;
                        float _3431 = (-0.0) - _2915;
                        float _3432 = (-0.0) - _2916;
                        float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                        float _3437 = _3436 * _3430;
                        float _3438 = _3436 * _3431;
                        float _3439 = _3436 * _3432;
                        float _3447 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                        float _3448 = 1.0 - _1258;
                        float _3455 = sqrt(1.0 - ((1.0 - (_3448 * _3448)) * (1.0 - (_3447 * _3447))));
                        float _3456 = _3455 * _3455;
                        float _3457 = _3456 * _3456;
                        float _3458 = _3437 + _3402;
                        float _3459 = _3438 + _3403;
                        float _3460 = _3439 + _3404;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3468 = dot(vec3(_1183, _1186, _1189), vec3(_3437, _3438, _3439));
                        float _4792 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3471 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3472 = dot(vec3(_1183, _1186, _1189), vec3(_3464 * _3458, _3464 * _3459, _3464 * _3460));
                        float _4803 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3475 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3479 = ((_3475 * _3475) * (_3457 + (-1.0))) + 1.0;
                        float _3480 = _3415 * _3456;
                        float _3481 = _3480 * _3480;
                        float _3484 = ((1.0 - _3481) * _3405) + _3481;
                        float _4814 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3485 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3486 = 1.0 - _3456;
                        float _3496 = (0.5 / (((_3485 * ((_3471 * _3486) + _3456)) + 9.9999999392252902907785028219223e-09) + (((_3485 * _3486) + _3456) * _3471))) * _3485;
                        float _4825 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3507 = (((_3457 * 3.1415927410125732421875) * (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) / ((_3479 * _3479) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125))) * _3411;
                        _3264 = (_3426 * _3374.x) + _3332;
                        _3265 = (_3426 * _3374.y) + _3333;
                        _3266 = (_3426 * _3374.z) + _3334;
                        _3261 = (_3507 * _3391.x) + _3329;
                        _3262 = (_3507 * _3391.y) + _3330;
                        _3263 = (_3507 * _3391.z) + _3331;
                        if (_3336 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3329 = _3261;
                            _3330 = _3262;
                            _3331 = _3263;
                            _3332 = _3264;
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3336;
                        }
                    }
                    frontier_phi_61_pred = _3261;
                    frontier_phi_61_pred_1 = _3266;
                    frontier_phi_61_pred_2 = _3265;
                    frontier_phi_61_pred_3 = _3264;
                    frontier_phi_61_pred_4 = _3263;
                    frontier_phi_61_pred_5 = _3262;
                }
                _3062 = frontier_phi_61_pred;
                _3072 = frontier_phi_61_pred_1;
                _3070 = frontier_phi_61_pred_2;
                _3068 = frontier_phi_61_pred_3;
                _3066 = frontier_phi_61_pred_4;
                _3064 = frontier_phi_61_pred_5;
                uint _3212 = _3211 + 1u;
                if (_3212 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3205 = _3062;
                    _3206 = _3064;
                    _3207 = _3066;
                    _3208 = _3068;
                    _3209 = _3070;
                    _3210 = _3072;
                    _3211 = _3212;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
        }
        uvec4 _3075 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3076 = _3075.z;
        uint _3078 = (_3076 >> 8u) & 15u;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        if (((4294967295u << _3078) & _2960) == 0u)
        {
            _3173 = _3061;
            _3175 = _3063;
            _3177 = _3065;
            _3179 = _3067;
            _3181 = _3069;
            _3183 = _3071;
        }
        else
        {
            float _3198 = inversesqrt(dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916)));
            float _3199 = _3198 * _2914;
            float _3200 = _3198 * _2915;
            float _3201 = _3198 * _2916;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3078 < ((_3076 >> 12u) & 15u))
            {
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3312 = _3061;
                float _3313 = _3063;
                float _3314 = _3065;
                float _3315 = _3067;
                float _3316 = _3069;
                float _3317 = _3071;
                uint _3318 = _3078;
                uint _3327;
                bool _3328;
                for (;;)
                {
                    _3327 = texelFetch(g_lightClassification, int((((_2954 << 5u) + (_2940 << 9u)) + (_3318 << 2u)) >> 2u)).x;
                    _3328 = _3327 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3328)
                    {
                        frontier_phi_67_pred = _3315;
                        frontier_phi_67_pred_1 = _3316;
                        frontier_phi_67_pred_2 = _3317;
                        frontier_phi_67_pred_3 = _3314;
                        frontier_phi_67_pred_4 = _3313;
                        frontier_phi_67_pred_5 = _3312;
                    }
                    else
                    {
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3525 = _3312;
                        float _3526 = _3313;
                        float _3527 = _3314;
                        float _3528 = _3315;
                        float _3529 = _3316;
                        float _3530 = _3317;
                        uint _3531 = _3327;
                        uint _3532;
                        vec4 _3557;
                        float _3558;
                        vec4 _3573;
                        vec3 _3585;
                        vec4 _3600;
                        vec4 _3615;
                        float _3661;
                        bool _3662;
                        for (;;)
                        {
                            uint _3542 = ((_3318 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3531));
                            _3532 = (_3531 + 4294967295u) & _3531;
                            uint _3544 = _3542 * 40u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            _3558 = _3557.w;
                            uint _3560 = (_3542 * 40u) + 4u;
                            _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            uint _3575 = (_3542 * 40u) + 8u;
                            _3585 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x));
                            uint _3587 = (_3542 * 40u) + 16u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3542 * 40u) + 20u;
                            _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3617 = (_3542 * 40u) + 24u;
                            vec4 _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3636 = (_3542 * 40u) + 28u;
                            vec4 _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            _3661 = fma(_2916, _3649.z, fma(_2915, _3649.y, _3649.x * _2914)) + _3649.w;
                            _3662 = !((fma(_2916, _3630.z, fma(_2915, _3630.y, _3630.x * _2914)) + _3630.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3662)
                            {
                                float _3689 = _3557.x - _2914;
                                float _3690 = _3557.y - _2915;
                                float _3691 = _3557.z - _2916;
                                float _3692 = dot(vec3(_3689, _3690, _3691), vec3(_3689, _3690, _3691));
                                float _3695 = inversesqrt(_3692);
                                float _3696 = _3695 * _3689;
                                float _3697 = _3695 * _3690;
                                float _3698 = _3695 * _3691;
                                float _3702 = 1.0 - (_3692 / (_3558 * _3558));
                                float _4836 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3707 = sqrt(_3692) * _3573.w;
                                float _3709 = 1.39999997615814208984375 / (_3707 + 1.39999997615814208984375);
                                float _3710 = _3709 * _3709;
                                float _3713 = ((1.0 - _3710) * dot(vec3(_3696, _3697, _3698), vec3(_1183, _1186, _1189))) + _3710;
                                float _3716 = _3707 * _3707;
                                float _3720 = (fma(_2916, _3600.z, fma(_2915, _3600.y, _3600.x * _2914)) + _3600.w) / _3661;
                                float _3721 = (fma(_2916, _3615.z, fma(_2915, _3615.y, _3615.x * _2914)) + _3615.w) / _3661;
                                float _3725 = 1.0 - dot(vec2(_3720, _3721), vec2(_3720, _3721));
                                float _4852 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3727 = _3726 * (((isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0))) * _3703) / ((_3716 * 0.699999988079071044921875) + 1.0));
                                float _3739 = exp2(log2(1.0 / ((_3716 * 3.5) + 5.0)) * 0.25);
                                float _3740 = 1.0 - _1258;
                                float _3747 = sqrt(1.0 - ((1.0 - (_3740 * _3740)) * (1.0 - (_3739 * _3739))));
                                float _3748 = _3747 * _3747;
                                float _3749 = _3748 * _3748;
                                float _3750 = _3696 - _3199;
                                float _3751 = _3697 - _3200;
                                float _3752 = _3698 - _3201;
                                float _3756 = inversesqrt(dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752)));
                                float _3760 = dot(vec3(_1183, _1186, _1189), vec3((-0.0) - _3199, (-0.0) - _3200, (-0.0) - _3201));
                                float _4863 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3763 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3764 = dot(vec3(_1183, _1186, _1189), vec3(_3756 * _3750, _3756 * _3751, _3756 * _3752));
                                float _4874 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3767 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3771 = ((_3767 * _3767) * (_3749 + (-1.0))) + 1.0;
                                float _3772 = _3709 * _3748;
                                float _3773 = _3772 * _3772;
                                float _3779 = ((1.0 - _3773) * dot(vec3(_1183, _1186, _1189), vec3(_3696, _3697, _3698))) + _3773;
                                float _4885 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3780 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3781 = 1.0 - _3748;
                                float _3791 = (0.5 / (((_3780 * ((_3763 * _3781) + _3748)) + 9.9999999392252902907785028219223e-09) + (((_3780 * _3781) + _3748) * _3763))) * _3780;
                                float _4896 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3801 = (_3726 * _3703) * (((_3749 * 3.1415927410125732421875) * (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) / ((_3771 * _3771) * ((_3716 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3801 * _3585.x;
                                frontier_phi_73_pred_1 = _3801 * _3585.y;
                                frontier_phi_73_pred_2 = _3727 * _3573.z;
                                frontier_phi_73_pred_3 = _3727 * _3573.y;
                                frontier_phi_73_pred_4 = _3727 * _3573.x;
                                frontier_phi_73_pred_5 = _3801 * _3585.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3805 = frontier_phi_73_pred;
                            _3806 = frontier_phi_73_pred_1;
                            _3810 = frontier_phi_73_pred_2;
                            _3809 = frontier_phi_73_pred_3;
                            _3808 = frontier_phi_73_pred_4;
                            _3807 = frontier_phi_73_pred_5;
                            _3515 = _3808 + _3528;
                            _3516 = _3809 + _3529;
                            _3517 = _3810 + _3530;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            if (_3532 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3532;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3515;
                        frontier_phi_67_pred_1 = _3516;
                        frontier_phi_67_pred_2 = _3517;
                        frontier_phi_67_pred_3 = _3514;
                        frontier_phi_67_pred_4 = _3513;
                        frontier_phi_67_pred_5 = _3512;
                    }
                    _3180 = frontier_phi_67_pred;
                    _3182 = frontier_phi_67_pred_1;
                    _3184 = frontier_phi_67_pred_2;
                    _3178 = frontier_phi_67_pred_3;
                    _3176 = frontier_phi_67_pred_4;
                    _3174 = frontier_phi_67_pred_5;
                    uint _3319 = _3318 + 1u;
                    if (_3319 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3312 = _3174;
                        _3313 = _3176;
                        _3314 = _3178;
                        _3315 = _3180;
                        _3316 = _3182;
                        _3317 = _3184;
                        _3318 = _3319;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3182;
                frontier_phi_55_56_ladder_1 = _3184;
                frontier_phi_55_56_ladder_2 = _3180;
                frontier_phi_55_56_ladder_3 = _3178;
                frontier_phi_55_56_ladder_4 = _3176;
                frontier_phi_55_56_ladder_5 = _3174;
            }
            else
            {
                frontier_phi_55_56_ladder = _3069;
                frontier_phi_55_56_ladder_1 = _3071;
                frontier_phi_55_56_ladder_2 = _3067;
                frontier_phi_55_56_ladder_3 = _3065;
                frontier_phi_55_56_ladder_4 = _3063;
                frontier_phi_55_56_ladder_5 = _3061;
            }
            _3173 = frontier_phi_55_56_ladder_5;
            _3175 = frontier_phi_55_56_ladder_4;
            _3177 = frontier_phi_55_56_ladder_3;
            _3179 = frontier_phi_55_56_ladder_2;
            _3181 = frontier_phi_55_56_ladder;
            _3183 = frontier_phi_55_56_ladder_1;
        }
        float _3188 = isnan(1.0) ? _1242 : (isnan(_1242) ? 1.0 : min(_1242, 1.0));
        _2973 = (_3188 * _3179) + _2409;
        _2975 = (_3188 * _3181) + _2411;
        _2977 = (_3188 * _3183) + _2413;
        _2979 = ((_3173 * _1226) * _3188) + _2754;
        _2981 = ((_3175 * _1228) * _3188) + _2756;
        _2983 = ((_3177 * _1229) * _3188) + _2758;
    }
    else
    {
        _2973 = _2409;
        _2975 = _2411;
        _2977 = _2413;
        _2979 = _2754;
        _2981 = _2756;
        _2983 = _2758;
    }
    float _4912 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _4923 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _4934 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    uint _3003 = _267 + 6u;
    float _3011 = _1164 / cbSceneParam._m0[86u].x;
    float _3012 = _1165 / cbSceneParam._m0[86u].y;
    vec4 _3026 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3011, _3012, (log2((isnan(cbSceneParam._m0[77u].w) ? _1099 : (isnan(_1099) ? cbSceneParam._m0[77u].w : min(_1099, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3028 = _3026.x;
    float _3029 = _3026.y;
    float _3030 = _3026.z;
    float _3031 = _3026.w;
    float _3123;
    float _3125;
    float _3127;
    float _3129;
    if (_1099 > cbSceneParam._m0[78u].w)
    {
        float _3086 = isnan(_1099) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1099 : min(cbSceneParam._m0[80u].w, _1099));
        float _3087 = _3086 / _1099;
        float _3098 = _3087 * _1149;
        float _3099 = _1150 * _3087;
        float _3100 = (-0.0) - _3099;
        float _3101 = _3087 * _1151;
        float _3103 = (cbSceneParam._m0[77u].w * _3100) / _3086;
        float _3104 = _3103 + cbSceneParam._m0[79u].w;
        float _3105 = cbSceneParam._m0[79u].w - _3099;
        float _3111 = sqrt(((_3098 * _3098) + (_3099 * _3099)) + (_3101 * _3101));
        float _3114 = (1.0 - (cbSceneParam._m0[77u].w / _3086)) * _3111;
        float _3119 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3121 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3274;
        if (abs((_3100 - _3103) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3274 = ((((_3104 > 0.0) ? exp2(_3119 * _3104) : (2.0 - exp2(_3121 * _3104))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3114;
        }
        else
        {
            float _3234 = 1.0 / cbSceneParam._m0[80u].x;
            float _3235 = isnan(_3105) ? _3104 : (isnan(_3104) ? _3105 : max(_3104, _3105));
            float _3236 = isnan(_3105) ? _3104 : (isnan(_3104) ? _3105 : min(_3104, _3105));
            float _3245 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : min(_3235, 0.0));
            float _3246 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : min(_3236, 0.0));
            _3274 = ((abs(_3111 / _3100) * cbSceneParam._m0[80u].y) * ((((_3245 - _3246) * 2.0) - ((exp2(_3119 * (isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0)))) - exp2(_3119 * (isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))))) * _3234)) - ((exp2(_3121 * _3245) - exp2(_3121 * _3246)) * _3234))) + (_3114 * cbSceneParam._m0[80u].z);
        }
        vec4 _3276 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3011, _3012, 1.0), 0.0);
        float _3285 = exp2((_3274 * (-1.44269502162933349609375)) * (1.0 - _3276.w));
        float _3286 = log2(_3285);
        float _3302 = log2(_3031);
        _3123 = (exp2(_3302 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3286 * cbSceneParam._m0[78u].x)) * _3276.x) / cbSceneParam._m0[78u].x)) + _3028;
        _3125 = (exp2(_3302 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3286 * cbSceneParam._m0[78u].y)) * _3276.y) / cbSceneParam._m0[78u].y)) + _3029;
        _3127 = (exp2(_3302 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3286 * cbSceneParam._m0[78u].z)) * _3276.z) / cbSceneParam._m0[78u].z)) + _3030;
        _3129 = _3285 * _3031;
    }
    else
    {
        _3123 = _3028;
        _3125 = _3029;
        _3127 = _3030;
        _3129 = _3031;
    }
    float _3141 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3142 = _3141 == 3.0;
    float _3143 = log2(_3129);
    float _3150 = exp2(_3143 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2973 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1242))) + ((_2979 + ((isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0))) * _2048)) * cbPerFrame._m0[3u].x));
    float _3151 = exp2(_3143 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2975 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1242))) + ((_2981 + ((isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0))) * _2048)) * cbPerFrame._m0[3u].x));
    float _3152 = exp2(_3143 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2977 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1242))) + ((_2983 + ((isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0))) * _2048)) * cbPerFrame._m0[3u].x));
    float _3161 = (_3141 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3161 * (_3142 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3123)));
    SV_Target.y = _3161 * (_3142 ? _3151 : (_3151 + (cbSceneParam._m0[72u].w * _3125)));
    SV_Target.z = _3161 * (_3142 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3127)));
    SV_Target.w = cbInstanceData._m0[_3003].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3003].w;
}


