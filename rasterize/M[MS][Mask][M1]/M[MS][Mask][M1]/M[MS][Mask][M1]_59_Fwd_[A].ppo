#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1499;
float _3880;
float _3881;
float _3882;
float _3883;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3892 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3903 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3914 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = _371.x * cbMtdParam._m0[11u].x;
    float _377 = _371.y * cbMtdParam._m0[11u].y;
    float _378 = _371.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _450 = _448.x;
    float _462 = dot(vec4(_450, _448.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _479 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _416.x) * 2.0) - ((((_450 - _462) * cbMtdParam._m0[23u].w) + _462) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3925 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _487 = (_480 * ((_397.x * cbMtdParam._m0[12u].x) - _376)) + _376;
    float _488 = (_480 * ((_397.y * cbMtdParam._m0[12u].y) - _377)) + _377;
    float _489 = (_480 * ((_397.z * cbMtdParam._m0[12u].z) - _378)) + _378;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _526 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _528 = _526.x;
    float _538 = dot(vec4(_528, _526.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _552 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _416.y) * 2.0) - ((((_528 - _538) * cbMtdParam._m0[23u].w) + _538) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3936 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _563 = (_345.x * cbMtdParam._m0[9u].x) * ((_553 * ((_506.x * cbMtdParam._m0[13u].x) - _487)) + _487);
    float _564 = (_345.y * cbMtdParam._m0[9u].y) * ((_553 * ((_506.y * cbMtdParam._m0[13u].y) - _488)) + _488);
    float _565 = (_345.z * cbMtdParam._m0[9u].z) * ((_553 * ((_506.z * cbMtdParam._m0[13u].z) - _489)) + _489);
    float _569 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _563;
    float _572 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _564;
    float _575 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _565;
    float _583 = (((_563 - _569) * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) + _569) * 4.55000019073486328125;
    float _585 = (((_564 - _572) * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) + _572) * 4.55000019073486328125;
    float _587 = (((_565 - _575) * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) + _575) * 4.55000019073486328125;
    vec4 _599 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _641 = _639.x;
    float _642 = _639.y;
    float _643 = _639.z;
    float _650 = ((_622.x - _641) * _480) + _641;
    float _651 = ((_622.y - _642) * _480) + _642;
    float _652 = ((_622.z - _643) * _480) + _643;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _677 = ((_664.z - _652) * _553) + _652;
    float _680 = ((((_664.x - _650) * _553) + _650) * 2.0) + (-1.0);
    float _681 = ((((_664.y - _651) * _553) + _651) * 2.0) + (-1.0);
    float _682 = dot(vec2(_680, _681), vec2(_680, _681));
    float _3947 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _687 = sqrt(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _719 = (_680 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_599.x * 2.0) + (-1.0)))) + (((_707.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _720 = (_681 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_599.y * 2.0) + (-1.0)))) + (((_707.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _734 = _732.x;
    float _735 = 1.0 - _734;
    float _764 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_734 - _735) * cbMtdParam._m0[24u].w) + _735) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3958 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _765 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _773 = ((((cbMtdParam._m0[10u].x - _583) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _765) + _583;
    float _774 = ((((cbMtdParam._m0[10u].y - _585) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _765) + _585;
    float _775 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _587)) * _765) + _587;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _803 = _801.x;
    float _820 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _803) * _480) + _803;
    float _838 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _308) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _309) + cbTextureTilingScale._m0[21u].w)).x - _820) * _553) + _820;
    float _842 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _838) * cbMtdParam._m0[19u].z) + _838;
    float _844 = _842 - (_842 * _765);
    float _849 = (((_599.z - _677) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _677;
    float _853 = ((_707.z - _849) * cbMtdParam._m0[19u].w) + _849;
    float _857 = ((cbMtdParam._m0[23u].x - _853) * _765) + _853;
    vec4 _878 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _884 = (_878.x * 2.0) + (-1.0);
    float _885 = (_878.y * 2.0) + (-1.0);
    float _886 = dot(vec2(_884, _885), vec2(_884, _885));
    float _3969 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _902 = (_765 * (((cbMtdParam._m0[22u].z * _719) - _719) + _884)) + _719;
    float _903 = (_765 * (((cbMtdParam._m0[22u].z * _720) - _720) + _885)) + _720;
    float _904 = (_765 * (sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) - _687)) + _687;
    float _906 = cbMtdParam._m0[22u].x + _707.w;
    float _909 = fma(_904, _257 * NORMAL.x, fma(_903, _264 * TANGENT.x, (_250 * _242) * _902));
    float _912 = fma(_904, _257 * NORMAL.y, fma(_903, _264 * TANGENT.y, (_250 * _243) * _902));
    float _915 = fma(_904, _257 * NORMAL.z, fma(_903, _264 * TANGENT.z, (_250 * _244) * _902));
    float _919 = inversesqrt(dot(vec3(_909, _912, _915), vec3(_909, _912, _915)));
    float _920 = _919 * _909;
    float _921 = _919 * _912;
    float _922 = _919 * _915;
    float _3980 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _923 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4002 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4013 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4024 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4035 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _928 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _942 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _992 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _982);
    float _993 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _982);
    float _994 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _982);
    float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
    float _999 = _992 * _998;
    float _1000 = _993 * _998;
    float _1001 = _994 * _998;
    vec4 _1006 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1008 = _1006.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1180 = sqrt(((_992 * _992) + (_993 * _993)) + (_994 * _994));
        float _1186 = (cbMatDynParam._m0[5u].x * _1180) + cbMatDynParam._m0[5u].y;
        float _4046 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1191 = (cbMatDynParam._m0[5u].z * _1180) + cbMatDynParam._m0[5u].w;
        float _4057 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) - _1187)) + _1187) < ((_1008 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1019 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1020 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1038 = fma(_922, cbSceneParam._m0[5u].z, fma(_921, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _920));
    float _1041 = fma(_922, cbSceneParam._m0[6u].z, fma(_921, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _920));
    float _1044 = fma(_922, cbSceneParam._m0[7u].z, fma(_921, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _920));
    uint _1057 = _289 + 9u;
    uint _1058 = _1057 + uint(cbMatDynParam._m0[0u].w);
    float _1064 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_1058].x;
    float _1065 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_1058].y;
    float _1066 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_1058].z;
    float _4068 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _4079 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _1070 = 1.0 - _928;
    float _1071 = _1067 * _1070;
    float _1072 = _1068 * _1070;
    float _1073 = _1069 * _1070;
    float _1078 = (_1067 + (-0.039999999105930328369140625)) * _928;
    float _1079 = (_1068 + (-0.039999999105930328369140625)) * _928;
    float _1080 = (_1069 + (-0.039999999105930328369140625)) * _928;
    float _1081 = _1078 + 0.039999999105930328369140625;
    float _1083 = _1079 + 0.039999999105930328369140625;
    float _1084 = _1080 + 0.039999999105930328369140625;
    vec4 _1093 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1019, cbSceneParam._m0[86u].y * _1020));
    float _1097 = ((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * TEXCOORD_5.w) * _1093.x;
    float _1098 = dot(vec3(_920, _921, _922), vec3(_999, _1000, _1001));
    float _1101 = _1098 * 2.0;
    float _1105 = (_1101 * _920) - _999;
    float _1106 = (_1101 * _921) - _1000;
    float _1107 = (_1101 * _922) - _1001;
    float _1111 = abs(dot(vec3(_999, _1000, _1001), vec3(_920, _921, _922)));
    float _4101 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1113 = sqrt(_923);
    float _1126 = exp2((_1113 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1113 * 3.0));
    float _1132 = (1.0 - _1126) * ((_1113 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1133 = _1126 * _1113;
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1498;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1223 = fma(_1169, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1161));
        float _1227 = fma(_1169, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1161));
        float _1231 = fma(_1169, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1161));
        float _1256 = _1161 + _920;
        float _1257 = _1165 + _921;
        float _1258 = _1169 + _922;
        float _1268 = fma(_1258, cbModelParam._m0[26u].z, fma(_1257, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1256)) - _1223;
        float _1269 = fma(_1258, cbModelParam._m0[27u].z, fma(_1257, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1256)) - _1227;
        float _1270 = fma(_1258, cbModelParam._m0[28u].z, fma(_1257, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1256)) - _1231;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1223 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1227 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[34u].z) + ((((((_1231 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1326 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1292.x + (-0.5));
        float _1328 = _1326 * (_1292.y + (-0.5));
        float _1329 = _1326 * (_1292.z + (-0.5));
        float _1336 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1299.x + (-0.5));
        float _1338 = _1336 * (_1299.y + (-0.5));
        float _1339 = _1336 * (_1299.z + (-0.5));
        float _1346 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1306.x + (-0.5));
        float _1348 = _1346 * (_1306.y + (-0.5));
        float _1349 = _1346 * (_1306.z + (-0.5));
        float _1356 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1313.x + (-0.5));
        float _1358 = _1356 * (_1313.y + (-0.5));
        float _1359 = _1356 * (_1313.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1380 = (dot(vec3(_920, _921, _922), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1390 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4149 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1392 + 1.0))) + _1397) * _1360;
        float _1407 = _1328 * 0.5;
        float _1408 = _1338 * 0.5;
        float _1409 = _1348 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_920, _921, _922), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4182 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1434 + 1.0))) + _1439) * _1361;
        float _1449 = _1329 * 0.5;
        float _1450 = _1339 * 0.5;
        float _1451 = _1349 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_920, _921, _922), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4215 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1476 + 1.0))) + _1481) * _1362;
        _1498 = _1329;
        _1500 = _1328;
        _1501 = _1327;
        _1502 = _1339;
        _1503 = _1338;
        _1504 = _1337;
        _1505 = _1349;
        _1506 = _1348;
        _1507 = _1347;
        _1508 = _1362;
        _1509 = _1361;
        _1510 = _1360;
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1512 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1499;
        _1500 = _1499;
        _1501 = _1499;
        _1502 = _1499;
        _1503 = _1499;
        _1504 = _1499;
        _1505 = _1499;
        _1506 = _1499;
        _1507 = _1499;
        _1508 = _1499;
        _1509 = _1499;
        _1510 = _1499;
        _1511 = 0.0;
        _1512 = 0.0;
        _1513 = 0.0;
    }
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1540 = fma(_1169, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1161));
        float _1544 = fma(_1169, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1161));
        float _1548 = fma(_1169, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1161));
        float _1571 = _1161 + _920;
        float _1572 = _1165 + _921;
        float _1573 = _1169 + _922;
        float _1583 = fma(_1573, cbModelParam._m0[30u].z, fma(_1572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1571)) - _1540;
        float _1584 = fma(_1573, cbModelParam._m0[31u].z, fma(_1572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1571)) - _1544;
        float _1585 = fma(_1573, cbModelParam._m0[32u].z, fma(_1572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1571)) - _1548;
        float _1589 = inversesqrt(dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585)));
        float _1602 = ((_1589 * _1583) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1540 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1603 = ((_1589 * _1584) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1544 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1604 = ((_1589 * _1585) / cbModelParam._m0[35u].z) + ((((((_1548 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1602, _1603, _1604), 0.0);
        float _1639 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1606.x + (-0.5));
        float _1641 = _1639 * (_1606.y + (-0.5));
        float _1642 = _1639 * (_1606.z + (-0.5));
        float _1649 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1613.x + (-0.5));
        float _1651 = _1649 * (_1613.y + (-0.5));
        float _1652 = _1649 * (_1613.z + (-0.5));
        float _1659 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1660 = _1659 * (_1620.x + (-0.5));
        float _1661 = _1659 * (_1620.y + (-0.5));
        float _1662 = _1659 * (_1620.z + (-0.5));
        float _1669 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1627.x + (-0.5));
        float _1671 = _1669 * (_1627.y + (-0.5));
        float _1672 = _1669 * (_1627.z + (-0.5));
        float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1674 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = _1640 * 0.5;
        float _1677 = _1650 * 0.5;
        float _1678 = _1660 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_920, _921, _922), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1673 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4278 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1703 + 1.0))) + _1708) * _1673;
        float _1718 = _1641 * 0.5;
        float _1719 = _1651 * 0.5;
        float _1720 = _1661 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_920, _921, _922), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1674 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4311 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1745 + 1.0))) + _1750) * _1674;
        float _1760 = _1642 * 0.5;
        float _1761 = _1652 * 0.5;
        float _1762 = _1662 * 0.5;
        float _1763 = dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762));
        float _1768 = (_1763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1763);
        float _1776 = (dot(vec3(_920, _921, _922), vec3(_1768 * _1760, _1768 * _1761, _1768 * _1762)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1787 = _1786 * 2.0;
        float _1791 = (1.0 - _1786) / (_1786 + 1.0);
        float _4344 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1801 = ((((1.0 - _1792) * (_1787 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1787 + 1.0))) + _1792) * _1675;
        _1809 = _1642;
        _1810 = _1641;
        _1811 = _1640;
        _1812 = _1652;
        _1813 = _1651;
        _1814 = _1650;
        _1815 = _1662;
        _1816 = _1661;
        _1817 = _1660;
        _1818 = _1675;
        _1819 = _1674;
        _1820 = _1673;
        _1821 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
        _1822 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)));
    }
    else
    {
        _1809 = _1499;
        _1810 = _1499;
        _1811 = _1499;
        _1812 = _1499;
        _1813 = _1499;
        _1814 = _1499;
        _1815 = _1499;
        _1816 = _1499;
        _1817 = _1499;
        _1818 = _1499;
        _1819 = _1499;
        _1820 = _1499;
        _1821 = 0.0;
        _1822 = 0.0;
        _1823 = 0.0;
    }
    float _1833 = (cbModelParam._m0[1u].x * (_1821 - _1511)) + _1511;
    float _1834 = (cbModelParam._m0[1u].x * (_1822 - _1512)) + _1512;
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1513)) + _1513;
    float _1856 = fma(_1835, cbSceneParam._m0[89u].z, fma(_1834, cbSceneParam._m0[89u].y, _1833 * cbSceneParam._m0[89u].x));
    float _1859 = fma(_1835, cbSceneParam._m0[90u].z, fma(_1834, cbSceneParam._m0[90u].y, _1833 * cbSceneParam._m0[90u].x));
    float _1862 = fma(_1835, cbSceneParam._m0[91u].z, fma(_1834, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1833));
    float _1877 = _1105 * 0.5;
    float _1878 = _1106 * 0.5;
    float _1879 = _1107 * 0.5;
    float _1880 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1883 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1810, _1813, _1816, _1819));
    float _1886 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1809, _1812, _1815, _1818));
    float _1920;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1893 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1498, _1502, _1505, _1508));
        float _1897 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1500, _1503, _1506, _1509));
        float _1901 = dot(vec4(_1877, _1878, _1879, 1.0), vec4(_1501, _1504, _1507, _1510));
        float _1908 = dot(vec4(cbModelParam._m0[39u]), vec4(_1877, _1878, _1879, 1.0));
        _1920 = dot(vec3(isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1908) ? 0.0 : (isnan(0.0) ? _1908 : max(0.0, _1908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1920 = 1.0;
    }
    float _1931;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1922 = dot(vec4(cbModelParam._m0[40u]), vec4(_1877, _1878, _1879, 1.0));
        _1931 = dot(vec3(isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1922) ? 0.0 : (isnan(0.0) ? _1922 : max(0.0, _1922))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1931 = 1.0;
    }
    float _1935 = (_1931 * cbModelParam._m0[1u].x) + (_1920 * (1.0 - cbModelParam._m0[1u].x));
    float _1945 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _923);
    float _1946 = isnan(_1945) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1945 : min(cbModelParam._m0[25u].z, _1945));
    float _2028;
    float _2030;
    float _2032;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1995 = fma(_1169, cbModelParam._m0[13u].z, fma(_1165, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1161)) + cbModelParam._m0[13u].w;
        float _1999 = fma(_1169, cbModelParam._m0[14u].z, fma(_1165, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1161)) + cbModelParam._m0[14u].w;
        float _2003 = fma(_1169, cbModelParam._m0[15u].z, fma(_1165, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1161)) + cbModelParam._m0[15u].w;
        float _2006 = fma(_1107, cbModelParam._m0[13u].z, fma(_1106, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1105));
        float _2009 = fma(_1107, cbModelParam._m0[14u].z, fma(_1106, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1105));
        float _2012 = fma(_1107, cbModelParam._m0[15u].z, fma(_1106, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1105));
        float _2040;
        if (_2006 > 0.0)
        {
            _2040 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2040 = frontier_phi_17_15_ladder;
        }
        float _2243;
        if (_2009 > 0.0)
        {
            _2243 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2243 = frontier_phi_26_22_ladder;
        }
        float _2497;
        if (_2012 > 0.0)
        {
            _2497 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2497 = frontier_phi_38_33_ladder;
        }
        float _2499 = isnan(_2243) ? _2040 : (isnan(_2040) ? _2243 : min(_2040, _2243));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _2006) + _1995;
        float _2505 = (_2500 * _2009) + _1999;
        float _2506 = (_2500 * _2012) + _2003;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2509 = (-1.0) - _2507;
        float _2511 = _2507 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2506 > _2511) || ((_2506 < _2509) || ((_2505 > _2511) || ((_2505 < _2509) || ((_2504 < _2509) || (_2504 > _2511))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2634 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2506, cbModelParam._m0[9u].z, fma(_2505, cbModelParam._m0[9u].y, _2504 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2506, cbModelParam._m0[10u].z, fma(_2505, cbModelParam._m0[10u].y, _2504 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2506, cbModelParam._m0[11u].z, fma(_2505, cbModelParam._m0[11u].y, _2504 * cbModelParam._m0[11u].x))), _1946);
            frontier_phi_16_38_ladder = _2634.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2634.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2634.x * cbModelParam._m0[1u].y;
        }
        _2028 = frontier_phi_16_38_ladder_2;
        _2030 = frontier_phi_16_38_ladder_1;
        _2032 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1105, _1106, _1107), _1946);
        _2028 = _2016.x * cbModelParam._m0[1u].y;
        _2030 = _2016.y * cbModelParam._m0[1u].y;
        _2032 = _2016.z * cbModelParam._m0[1u].y;
    }
    float _2036 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _923);
    float _2037 = isnan(_2036) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2036 : min(cbModelParam._m0[25u].w, _2036));
    float _2127;
    float _2129;
    float _2131;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2091 = fma(_1169, cbModelParam._m0[21u].z, fma(_1165, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1161)) + cbModelParam._m0[21u].w;
        float _2095 = fma(_1169, cbModelParam._m0[22u].z, fma(_1165, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1161)) + cbModelParam._m0[22u].w;
        float _2099 = fma(_1169, cbModelParam._m0[23u].z, fma(_1165, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1161)) + cbModelParam._m0[23u].w;
        float _2102 = fma(_1107, cbModelParam._m0[21u].z, fma(_1106, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1105));
        float _2105 = fma(_1107, cbModelParam._m0[22u].z, fma(_1106, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1105));
        float _2108 = fma(_1107, cbModelParam._m0[23u].z, fma(_1106, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1105));
        float _2248;
        if (_2102 > 0.0)
        {
            _2248 = abs((1.0 - _2091) / _2102);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2091 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2248 = frontier_phi_28_24_ladder;
        }
        float _2524;
        if (_2105 > 0.0)
        {
            _2524 = abs((1.0 - _2095) / _2105);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2095 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2524 = frontier_phi_40_35_ladder;
        }
        float _2737;
        if (_2108 > 0.0)
        {
            _2737 = abs((1.0 - _2099) / _2108);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2099 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2737 = frontier_phi_49_46_ladder;
        }
        float _2739 = isnan(_2524) ? _2248 : (isnan(_2248) ? _2524 : min(_2248, _2524));
        float _2740 = isnan(_2737) ? _2739 : (isnan(_2739) ? _2737 : min(_2739, _2737));
        float _2744 = (_2740 * _2102) + _2091;
        float _2745 = (_2740 * _2105) + _2095;
        float _2746 = (_2740 * _2108) + _2099;
        float _2747 = _2740 * 9.9999997473787516355514526367188e-05;
        float _2748 = (-1.0) - _2747;
        float _2750 = _2747 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2746 > _2750) || ((_2746 < _2748) || ((_2745 > _2750) || ((_2745 < _2748) || ((_2744 < _2748) || (_2744 > _2750))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2945 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2746, cbModelParam._m0[17u].z, fma(_2745, cbModelParam._m0[17u].y, _2744 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2746, cbModelParam._m0[18u].z, fma(_2745, cbModelParam._m0[18u].y, _2744 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2746, cbModelParam._m0[19u].z, fma(_2745, cbModelParam._m0[19u].y, _2744 * cbModelParam._m0[19u].x))), _2037);
            frontier_phi_25_49_ladder = _2945.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2945.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2945.x * cbModelParam._m0[1u].z;
        }
        _2127 = frontier_phi_25_49_ladder_2;
        _2129 = frontier_phi_25_49_ladder_1;
        _2131 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2111 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1105, _1106, _1107), _2037);
        _2127 = _2111.x * cbModelParam._m0[1u].z;
        _2129 = _2111.y * cbModelParam._m0[1u].z;
        _2131 = _2111.z * cbModelParam._m0[1u].z;
    }
    float _2144 = (((_1132 * _1081) + _1133) * _1097) * ((cbModelParam._m0[1u].w * (_2127 - _2028)) + _2028);
    float _2146 = (((_1132 * _1083) + _1133) * _1097) * ((cbModelParam._m0[1u].w * (_2129 - _2030)) + _2030);
    float _2148 = (((_1132 * _1084) + _1133) * _1097) * ((cbModelParam._m0[1u].w * (_2131 - _2032)) + _2032);
    float _2151 = fma(_2148, cbSceneParam._m0[89u].z, fma(_2146, cbSceneParam._m0[89u].y, _2144 * cbSceneParam._m0[89u].x));
    float _2154 = fma(_2148, cbSceneParam._m0[90u].z, fma(_2146, cbSceneParam._m0[90u].y, _2144 * cbSceneParam._m0[90u].x));
    float _2157 = fma(_2148, cbSceneParam._m0[91u].z, fma(_2146, cbSceneParam._m0[91u].y, _2144 * cbSceneParam._m0[91u].x));
    uvec4 _2167 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2169 = _2167.x * 14u;
    uint _2170 = _2169 + 13u;
    float _2177 = _1097 + (-1.0);
    float _2182 = (cbLight._m0[_2170].x * _2177) + 1.0;
    float _2183 = (cbLight._m0[_2170].y * _2177) + 1.0;
    float _2184 = (cbLight._m0[_2170].z * _2177) + 1.0;
    float _2185 = (cbLight._m0[_2170].w * _2177) + 1.0;
    uint _2186 = _2169 + 5u;
    float _2192 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2196 = _2169 + 4u;
    float _2202 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
    uint _2206 = _2169 | 1u;
    float _2217 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_920, _921, _922));
    float _2220 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_920, _921, _922));
    float _4480 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _4491 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2225 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * 0.3183098733425140380859375;
    float _2227 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * 0.3183098733425140380859375;
    float _2234 = ((cbLight._m0[_2186].x * _2192) * _2227) + ((cbLight._m0[_2196].x * _2202) * _2225);
    float _2235 = ((_2192 * cbLight._m0[_2186].y) * _2227) + ((_2202 * cbLight._m0[_2196].y) * _2225);
    float _2236 = ((_2192 * cbLight._m0[_2186].z) * _2227) + ((_2202 * cbLight._m0[_2196].z) * _2225);
    uvec4 _2240 = floatBitsToUint(cbLight._m0[_2169 + 12u]);
    bool _2242 = _2240.x == 0u;
    float _2253;
    float _2255;
    float _2257;
    if (_2242)
    {
        _2253 = _2234;
        _2255 = _2235;
        _2257 = _2236;
    }
    else
    {
        uint _2261 = _2169 + 6u;
        float _2277 = (dot(vec3(cbLight._m0[_2169 + 2u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2278 = _2277 * _2277;
        float _4502 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2279 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2280 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2253 = (((cbLight._m0[_2261].x * 0.3183098733425140380859375) * _2279) * _2280) + _2234;
        _2255 = (((cbLight._m0[_2261].y * 0.3183098733425140380859375) * _2279) * _2280) + _2235;
        _2257 = (((cbLight._m0[_2261].z * 0.3183098733425140380859375) * _2279) * _2280) + _2236;
    }
    bool _2260 = _2240.y == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2260)
    {
        _2298 = _2253;
        _2300 = _2255;
        _2302 = _2257;
    }
    else
    {
        uint _2468 = _2169 + 7u;
        float _2484 = (dot(vec3(cbLight._m0[_2169 + 3u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2485 = _2484 * _2484;
        float _4518 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2486 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2487 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2298 = (((cbLight._m0[_2468].x * 0.3183098733425140380859375) * _2486) * _2487) + _2253;
        _2300 = (((cbLight._m0[_2468].y * 0.3183098733425140380859375) * _2486) * _2487) + _2255;
        _2302 = (((cbLight._m0[_2468].z * 0.3183098733425140380859375) * _2486) * _2487) + _2257;
    }
    uint _2305 = _2169 + 8u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _923) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2169].x + _999;
    float _2321 = cbLight._m0[_2169].y + _1000;
    float _2322 = cbLight._m0[_2169].z + _1001;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2169].xyz));
    float _4534 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _4545 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _2334 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _2335 = dot(vec3(_920, _921, _922), vec3(_2327, _2328, _2329));
    float _4556 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2339 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2327, _2328, _2329));
    float _4567 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2343 = _2319 * _2319;
    float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
    float _2355 = exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0);
    float _2356 = 0.959999978542327880859375 - _1078;
    float _2358 = 0.959999978542327880859375 - _1079;
    float _2359 = 0.959999978542327880859375 - _1080;
    float _2366 = 1.0 - _2319;
    float _2377 = (0.5 / (((_2334 * ((_2333 * _2366) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2366) + _2319) * _2333))) * _2333;
    float _4578 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2379 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
    uint _2390 = _2169 + 9u;
    float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _923) * 0.949999988079071044921875);
    float _2402 = _2401 * _2401;
    float _2403 = cbLight._m0[_2206].x + _999;
    float _2404 = cbLight._m0[_2206].y + _1000;
    float _2405 = cbLight._m0[_2206].z + _1001;
    float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
    float _2410 = _2409 * _2403;
    float _2411 = _2409 * _2404;
    float _2412 = _2409 * _2405;
    float _2413 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2206].xyz));
    float _4589 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2417 = dot(vec3(_920, _921, _922), vec3(_2410, _2411, _2412));
    float _4600 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2421 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2410, _2411, _2412));
    float _4611 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2425 = _2402 * _2402;
    float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
    float _2436 = exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0);
    float _2443 = 1.0 - _2402;
    float _2453 = (0.5 / (((_2334 * ((_2416 * _2443) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2443) + _2402) * _2416))) * _2416;
    float _4622 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
    float _2465 = (((((_2436 * _2356) + _1081) * cbLight._m0[_2390].x) * _2455) * _2192) + (((((_2355 * _2356) + _1081) * cbLight._m0[_2305].x) * _2379) * _2202);
    float _2466 = (((((_2436 * _2358) + _1083) * cbLight._m0[_2390].y) * _2455) * _2192) + (((((_2355 * _2358) + _1083) * cbLight._m0[_2305].y) * _2379) * _2202);
    float _2467 = (((((_2436 * _2359) + _1084) * cbLight._m0[_2390].z) * _2455) * _2192) + (((((_2355 * _2359) + _1084) * cbLight._m0[_2305].z) * _2379) * _2202);
    float _2529;
    float _2531;
    float _2533;
    if (_2242)
    {
        _2529 = _2465;
        _2531 = _2466;
        _2533 = _2467;
    }
    else
    {
        uint _2535 = _2169 + 2u;
        uint _2539 = _2169 + 10u;
        float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2535].w)) * _923) * 0.949999988079071044921875);
        float _2554 = _2553 * _2553;
        float _2555 = cbLight._m0[_2535].x + _999;
        float _2556 = cbLight._m0[_2535].y + _1000;
        float _2557 = cbLight._m0[_2535].z + _1001;
        float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
        float _2562 = _2561 * _2555;
        float _2563 = _2561 * _2556;
        float _2564 = _2561 * _2557;
        float _2565 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2535].xyz));
        float _4633 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2569 = dot(vec3(_920, _921, _922), vec3(_2562, _2563, _2564));
        float _4644 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2573 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_2562, _2563, _2564));
        float _4655 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2577 = _2554 * _2554;
        float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
        float _2588 = exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0);
        float _2595 = 1.0 - _2554;
        float _2605 = (0.5 / (((_2334 * ((_2568 * _2595) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2595) + _2554) * _2568))) * _2568;
        float _4666 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2607 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
        float _2608 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2529 = (((((_2588 * _2356) + _1081) * cbLight._m0[_2539].x) * _2607) * _2608) + _2465;
        _2531 = (((((_2588 * _2358) + _1083) * cbLight._m0[_2539].y) * _2607) * _2608) + _2466;
        _2533 = (((((_2588 * _2359) + _1084) * cbLight._m0[_2539].z) * _2607) * _2608) + _2467;
    }
    float _2643;
    float _2645;
    float _2647;
    if (_2260)
    {
        _2643 = _2529;
        _2645 = _2531;
        _2647 = _2533;
    }
    else
    {
        uint _2654 = _2169 + 3u;
        uint _2658 = _2169 + 11u;
        float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2654].w)) * _923) * 0.949999988079071044921875);
        float _2673 = _2672 * _2672;
        float _2674 = cbLight._m0[_2654].x + _999;
        float _2675 = cbLight._m0[_2654].y + _1000;
        float _2676 = cbLight._m0[_2654].z + _1001;
        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
        float _2681 = _2680 * _2674;
        float _2682 = _2680 * _2675;
        float _2683 = _2680 * _2676;
        float _2684 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2654].xyz));
        float _4682 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2688 = dot(vec3(_920, _921, _922), vec3(_2681, _2682, _2683));
        float _4693 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2692 = dot(vec3(cbLight._m0[_2654].xyz), vec3(_2681, _2682, _2683));
        float _4704 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2696 = _2673 * _2673;
        float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
        float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0);
        float _2714 = 1.0 - _2673;
        float _2724 = (0.5 / (((_2334 * ((_2687 * _2714) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2714) + _2673) * _2687))) * _2687;
        float _4715 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2726 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
        float _2727 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2643 = (((((_2707 * _2356) + _1081) * cbLight._m0[_2658].x) * _2726) * _2727) + _2529;
        _2645 = (((((_2707 * _2358) + _1083) * cbLight._m0[_2658].y) * _2726) * _2727) + _2531;
        _2647 = (((((_2707 * _2359) + _1084) * cbLight._m0[_2658].z) * _2726) * _2727) + _2533;
    }
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    if (_2167.y == 0u)
    {
        float _2802 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2803 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2802;
        float _2804 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2802;
        float _2805 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2802;
        uvec4 _2817 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2818 = _2817.x;
        uint _2829 = uint((float(_2817.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1020) / _2818))) + floor(float(uint(cbSceneParam._m0[85u].x * _1019) / _2818)));
        float _2839 = (log2(_2805 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2840 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        uint _2843 = uint(isnan(14.0) ? _2840 : (isnan(_2840) ? 14.0 : min(_2840, 14.0)));
        uvec4 _2848 = texelFetch(g_lightClusterGridBuffer, int(((_2843 << 2u) + (_2829 << 6u)) >> 2u));
        uint _2849 = _2848.x;
        uint _2850 = _2817.z;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        if (((((1u << ((_2850 >> 4u) & 15u)) + 4294967295u) & _2849) == 0u) || ((_2850 & 240u) == 0u))
        {
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
        }
        else
        {
            float _2951;
            float _2953;
            float _2955;
            float _2957;
            float _2959;
            float _2961;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            uint _3109 = 0u;
            uint _3118;
            bool _3119;
            for (;;)
            {
                _3118 = texelFetch(g_lightClassification, int((((_2843 << 5u) + (_2829 << 9u)) + (_3109 << 2u)) >> 2u)).x;
                _3119 = _3118 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3119)
                {
                    frontier_phi_66_pred = _3103;
                    frontier_phi_66_pred_1 = _3108;
                    frontier_phi_66_pred_2 = _3107;
                    frontier_phi_66_pred_3 = _3106;
                    frontier_phi_66_pred_4 = _3105;
                    frontier_phi_66_pred_5 = _3104;
                }
                else
                {
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    uint _3254;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3118;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    for (;;)
                    {
                        uint _3258 = uint(findLSB(_3254)) + (_3109 << 5u);
                        uint _3255 = (_3254 + 4294967295u) & _3254;
                        uint _3260 = _3258 * 48u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 3u)).x));
                        uint _3280 = (_3258 * 48u) + 4u;
                        vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 3u)).x));
                        uint _3299 = (_3258 * 48u) + 8u;
                        vec3 _3310 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x));
                        float _3314 = _3274.x - _2803;
                        float _3315 = _3274.y - _2804;
                        float _3316 = _3274.z - _2805;
                        float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                        float _3320 = inversesqrt(_3317);
                        float _3321 = _3320 * _3314;
                        float _3322 = _3320 * _3315;
                        float _3323 = _3320 * _3316;
                        float _3324 = dot(vec3(_1038, _1041, _1044), vec3(_3321, _3322, _3323));
                        float _3329 = 1.0 - (_3317 * _3274.w);
                        float _4741 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3330 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3331 = sqrt(_3317) * _3293.w;
                        float _3334 = 1.39999997615814208984375 / (_3331 + 1.39999997615814208984375);
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3324) + _3335;
                        float _3341 = _3331 * _3331;
                        float _3345 = ((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3330) / ((_3341 * 0.699999988079071044921875) + 1.0);
                        float _3349 = (-0.0) - _2803;
                        float _3350 = (-0.0) - _2804;
                        float _3351 = (-0.0) - _2805;
                        float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3366 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                        float _3367 = 1.0 - _1113;
                        float _3374 = sqrt(1.0 - ((1.0 - (_3367 * _3367)) * (1.0 - (_3366 * _3366))));
                        float _3375 = _3374 * _3374;
                        float _3376 = _3375 * _3375;
                        float _3377 = _3356 + _3321;
                        float _3378 = _3357 + _3322;
                        float _3379 = _3358 + _3323;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3387 = dot(vec3(_1038, _1041, _1044), vec3(_3356, _3357, _3358));
                        float _4757 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3390 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3391 = dot(vec3(_1038, _1041, _1044), vec3(_3383 * _3377, _3383 * _3378, _3383 * _3379));
                        float _4768 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3398 = ((_3394 * _3394) * (_3376 + (-1.0))) + 1.0;
                        float _3399 = _3334 * _3375;
                        float _3400 = _3399 * _3399;
                        float _3403 = ((1.0 - _3400) * _3324) + _3400;
                        float _4779 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3404 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3405 = 1.0 - _3375;
                        float _3415 = (0.5 / (((_3404 * ((_3390 * _3405) + _3375)) + 9.9999999392252902907785028219223e-09) + (((_3404 * _3405) + _3375) * _3390))) * _3404;
                        float _4790 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3426 = (((_3376 * 3.1415927410125732421875) * (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0)))) / ((_3398 * _3398) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125))) * _3330;
                        _3178 = (_3345 * _3293.x) + _3251;
                        _3179 = (_3345 * _3293.y) + _3252;
                        _3180 = (_3345 * _3293.z) + _3253;
                        _3175 = (_3426 * _3310.x) + _3248;
                        _3176 = (_3426 * _3310.y) + _3249;
                        _3177 = (_3426 * _3310.z) + _3250;
                        if (_3255 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3255;
                        }
                    }
                    frontier_phi_66_pred = _3175;
                    frontier_phi_66_pred_1 = _3180;
                    frontier_phi_66_pred_2 = _3179;
                    frontier_phi_66_pred_3 = _3178;
                    frontier_phi_66_pred_4 = _3177;
                    frontier_phi_66_pred_5 = _3176;
                }
                _2951 = frontier_phi_66_pred;
                _2961 = frontier_phi_66_pred_1;
                _2959 = frontier_phi_66_pred_2;
                _2957 = frontier_phi_66_pred_3;
                _2955 = frontier_phi_66_pred_4;
                _2953 = frontier_phi_66_pred_5;
                uint _3110 = _3109 + 1u;
                if (_3110 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3103 = _2951;
                    _3104 = _2953;
                    _3105 = _2955;
                    _3106 = _2957;
                    _3107 = _2959;
                    _3108 = _2961;
                    _3109 = _3110;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
        }
        uvec4 _2964 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2965 = _2964.z;
        uint _2967 = (_2965 >> 8u) & 15u;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        if (((4294967295u << _2967) & _2849) == 0u)
        {
            _3071 = _2950;
            _3073 = _2952;
            _3075 = _2954;
            _3077 = _2956;
            _3079 = _2958;
            _3081 = _2960;
        }
        else
        {
            float _3096 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
            float _3097 = _3096 * _2803;
            float _3098 = _3096 * _2804;
            float _3099 = _3096 * _2805;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2967 < ((_2965 >> 12u) & 15u))
            {
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3231 = _2950;
                float _3232 = _2952;
                float _3233 = _2954;
                float _3234 = _2956;
                float _3235 = _2958;
                float _3236 = _2960;
                uint _3237 = _2967;
                uint _3246;
                bool _3247;
                for (;;)
                {
                    _3246 = texelFetch(g_lightClassification, int((((_2843 << 5u) + (_2829 << 9u)) + (_3237 << 2u)) >> 2u)).x;
                    _3247 = _3246 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3247)
                    {
                        frontier_phi_77_pred = _3236;
                        frontier_phi_77_pred_1 = _3235;
                        frontier_phi_77_pred_2 = _3234;
                        frontier_phi_77_pred_3 = _3233;
                        frontier_phi_77_pred_4 = _3232;
                        frontier_phi_77_pred_5 = _3231;
                    }
                    else
                    {
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3453 = _3231;
                        float _3454 = _3232;
                        float _3455 = _3233;
                        float _3456 = _3234;
                        float _3457 = _3235;
                        float _3458 = _3236;
                        uint _3459 = _3246;
                        uint _3460;
                        vec4 _3485;
                        float _3486;
                        vec4 _3501;
                        vec3 _3513;
                        vec4 _3528;
                        vec4 _3543;
                        float _3589;
                        bool _3590;
                        for (;;)
                        {
                            uint _3470 = ((_3237 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3459));
                            _3460 = (_3459 + 4294967295u) & _3459;
                            uint _3472 = _3470 * 40u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3486 = _3485.w;
                            uint _3488 = (_3470 * 40u) + 4u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3503 = (_3470 * 40u) + 8u;
                            _3513 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x));
                            uint _3515 = (_3470 * 40u) + 16u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3470 * 40u) + 20u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3545 = (_3470 * 40u) + 24u;
                            vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3564 = (_3470 * 40u) + 28u;
                            vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            _3589 = fma(_2805, _3577.z, fma(_2804, _3577.y, _3577.x * _2803)) + _3577.w;
                            _3590 = !((fma(_2805, _3558.z, fma(_2804, _3558.y, _3558.x * _2803)) + _3558.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3590)
                            {
                                float _3617 = _3485.x - _2803;
                                float _3618 = _3485.y - _2804;
                                float _3619 = _3485.z - _2805;
                                float _3620 = dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619));
                                float _3623 = inversesqrt(_3620);
                                float _3624 = _3623 * _3617;
                                float _3625 = _3623 * _3618;
                                float _3626 = _3623 * _3619;
                                float _3630 = 1.0 - (_3620 / (_3486 * _3486));
                                float _4801 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3635 = sqrt(_3620) * _3501.w;
                                float _3637 = 1.39999997615814208984375 / (_3635 + 1.39999997615814208984375);
                                float _3638 = _3637 * _3637;
                                float _3641 = ((1.0 - _3638) * dot(vec3(_3624, _3625, _3626), vec3(_1038, _1041, _1044))) + _3638;
                                float _3644 = _3635 * _3635;
                                float _3648 = (fma(_2805, _3528.z, fma(_2804, _3528.y, _3528.x * _2803)) + _3528.w) / _3589;
                                float _3649 = (fma(_2805, _3543.z, fma(_2804, _3543.y, _3543.x * _2803)) + _3543.w) / _3589;
                                float _3653 = 1.0 - dot(vec2(_3648, _3649), vec2(_3648, _3649));
                                float _4817 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3654 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3655 = _3654 * (((isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0))) * _3631) / ((_3644 * 0.699999988079071044921875) + 1.0));
                                float _3667 = exp2(log2(1.0 / ((_3644 * 3.5) + 5.0)) * 0.25);
                                float _3668 = 1.0 - _1113;
                                float _3675 = sqrt(1.0 - ((1.0 - (_3668 * _3668)) * (1.0 - (_3667 * _3667))));
                                float _3676 = _3675 * _3675;
                                float _3677 = _3676 * _3676;
                                float _3678 = _3624 - _3097;
                                float _3679 = _3625 - _3098;
                                float _3680 = _3626 - _3099;
                                float _3684 = inversesqrt(dot(vec3(_3678, _3679, _3680), vec3(_3678, _3679, _3680)));
                                float _3688 = dot(vec3(_1038, _1041, _1044), vec3((-0.0) - _3097, (-0.0) - _3098, (-0.0) - _3099));
                                float _4828 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3691 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3692 = dot(vec3(_1038, _1041, _1044), vec3(_3684 * _3678, _3684 * _3679, _3684 * _3680));
                                float _4839 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3695 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3699 = ((_3695 * _3695) * (_3677 + (-1.0))) + 1.0;
                                float _3700 = _3637 * _3676;
                                float _3701 = _3700 * _3700;
                                float _3707 = ((1.0 - _3701) * dot(vec3(_1038, _1041, _1044), vec3(_3624, _3625, _3626))) + _3701;
                                float _4850 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3709 = 1.0 - _3676;
                                float _3719 = (0.5 / (((_3708 * ((_3691 * _3709) + _3676)) + 9.9999999392252902907785028219223e-09) + (((_3708 * _3709) + _3676) * _3691))) * _3708;
                                float _4861 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3729 = (_3654 * _3631) * (((_3677 * 3.1415927410125732421875) * (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) / ((_3699 * _3699) * ((_3644 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3655 * _3501.y;
                                frontier_phi_83_pred_1 = _3655 * _3501.x;
                                frontier_phi_83_pred_2 = _3729 * _3513.z;
                                frontier_phi_83_pred_3 = _3729 * _3513.y;
                                frontier_phi_83_pred_4 = _3729 * _3513.x;
                                frontier_phi_83_pred_5 = _3655 * _3501.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3737 = frontier_phi_83_pred;
                            _3736 = frontier_phi_83_pred_1;
                            _3735 = frontier_phi_83_pred_2;
                            _3734 = frontier_phi_83_pred_3;
                            _3733 = frontier_phi_83_pred_4;
                            _3738 = frontier_phi_83_pred_5;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            _3440 = _3733 + _3453;
                            _3441 = _3734 + _3454;
                            _3442 = _3735 + _3455;
                            if (_3460 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3460;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3445;
                        frontier_phi_77_pred_1 = _3444;
                        frontier_phi_77_pred_2 = _3443;
                        frontier_phi_77_pred_3 = _3442;
                        frontier_phi_77_pred_4 = _3441;
                        frontier_phi_77_pred_5 = _3440;
                    }
                    _3082 = frontier_phi_77_pred;
                    _3080 = frontier_phi_77_pred_1;
                    _3078 = frontier_phi_77_pred_2;
                    _3076 = frontier_phi_77_pred_3;
                    _3074 = frontier_phi_77_pred_4;
                    _3072 = frontier_phi_77_pred_5;
                    uint _3238 = _3237 + 1u;
                    if (_3238 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3231 = _3072;
                        _3232 = _3074;
                        _3233 = _3076;
                        _3234 = _3078;
                        _3235 = _3080;
                        _3236 = _3082;
                        _3237 = _3238;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3076;
                frontier_phi_58_59_ladder_1 = _3082;
                frontier_phi_58_59_ladder_2 = _3080;
                frontier_phi_58_59_ladder_3 = _3078;
                frontier_phi_58_59_ladder_4 = _3074;
                frontier_phi_58_59_ladder_5 = _3072;
            }
            else
            {
                frontier_phi_58_59_ladder = _2954;
                frontier_phi_58_59_ladder_1 = _2960;
                frontier_phi_58_59_ladder_2 = _2958;
                frontier_phi_58_59_ladder_3 = _2956;
                frontier_phi_58_59_ladder_4 = _2952;
                frontier_phi_58_59_ladder_5 = _2950;
            }
            _3071 = frontier_phi_58_59_ladder_5;
            _3073 = frontier_phi_58_59_ladder_4;
            _3075 = frontier_phi_58_59_ladder;
            _3077 = frontier_phi_58_59_ladder_3;
            _3079 = frontier_phi_58_59_ladder_2;
            _3081 = frontier_phi_58_59_ladder_1;
        }
        float _3086 = isnan(1.0) ? _1097 : (isnan(_1097) ? 1.0 : min(_1097, 1.0));
        _2862 = (_3086 * _3077) + _2298;
        _2864 = (_3086 * _3079) + _2300;
        _2866 = (_3086 * _3081) + _2302;
        _2868 = ((_3071 * _1081) * _3086) + _2643;
        _2870 = ((_3073 * _1083) * _3086) + _2645;
        _2872 = ((_3075 * _1084) * _3086) + _2647;
    }
    else
    {
        _2862 = _2298;
        _2864 = _2300;
        _2866 = _2302;
        _2868 = _2643;
        _2870 = _2645;
        _2872 = _2647;
    }
    float _4877 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _4888 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _4899 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _2889 = ((isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2862 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1097))) + ((_2868 + ((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) * _1935)) * cbPerFrame._m0[3u].x);
    float _2890 = ((isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2864 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1097))) + ((_2870 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1935)) * cbPerFrame._m0[3u].x);
    float _2891 = ((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2866 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1097))) + ((_2872 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1935)) * cbPerFrame._m0[3u].x);
    uint _2892 = _289 + 6u;
    float _2900 = _1019 / cbSceneParam._m0[86u].x;
    float _2901 = _1020 / cbSceneParam._m0[86u].y;
    vec4 _2915 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2900, _2901, (log2((isnan(cbSceneParam._m0[77u].w) ? _942 : (isnan(_942) ? cbSceneParam._m0[77u].w : min(_942, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2917 = _2915.x;
    float _2918 = _2915.y;
    float _2919 = _2915.z;
    float _2920 = _2915.w;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    if (_942 > cbSceneParam._m0[78u].w)
    {
        float _2975 = isnan(_942) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _942 : min(cbSceneParam._m0[80u].w, _942));
        float _2976 = _2975 / _942;
        float _2987 = _2976 * _992;
        float _2988 = _993 * _2976;
        float _2989 = (-0.0) - _2988;
        float _2991 = _2976 * _994;
        float _2993 = (cbSceneParam._m0[77u].w * _2989) / _2975;
        float _2994 = _2993 + cbSceneParam._m0[79u].w;
        float _2995 = cbSceneParam._m0[79u].w - _2988;
        float _3001 = sqrt(((_2987 * _2987) + (_2988 * _2988)) + (_2991 * _2991));
        float _3004 = (1.0 - (cbSceneParam._m0[77u].w / _2975)) * _3001;
        float _3009 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3011 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3188;
        if (abs((_2989 - _2993) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3188 = ((((_2994 > 0.0) ? exp2(_3009 * _2994) : (2.0 - exp2(_3011 * _2994))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3004;
        }
        else
        {
            float _3132 = 1.0 / cbSceneParam._m0[80u].x;
            float _3133 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : max(_2994, _2995));
            float _3134 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : min(_2994, _2995));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            float _3144 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : min(_3134, 0.0));
            _3188 = ((abs(_3001 / _2989) * cbSceneParam._m0[80u].y) * ((((_3143 - _3144) * 2.0) - ((exp2(_3009 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0)))) - exp2(_3009 * (isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0))))) * _3132)) - ((exp2(_3011 * _3143) - exp2(_3011 * _3144)) * _3132))) + (_3004 * cbSceneParam._m0[80u].z);
        }
        vec4 _3190 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2900, _2901, 1.0), 0.0);
        float _3199 = exp2((_3188 * (-1.44269502162933349609375)) * (1.0 - _3190.w));
        float _3200 = log2(_3199);
        float _3216 = log2(_2920);
        _3013 = (exp2(_3216 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].x)) * _3190.x) / cbSceneParam._m0[78u].x)) + _2917;
        _3015 = (exp2(_3216 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].y)) * _3190.y) / cbSceneParam._m0[78u].y)) + _2918;
        _3017 = (exp2(_3216 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].z)) * _3190.z) / cbSceneParam._m0[78u].z)) + _2919;
        _3019 = _3199 * _2920;
    }
    else
    {
        _3013 = _2917;
        _3015 = _2918;
        _3017 = _2919;
        _3019 = _2920;
    }
    bool _3226;
    vec4 _3029;
    vec4 _3051;
    float _3053;
    float _3057;
    float _3058;
    float _3059;
    float _3060;
    bool _3070;
    for (;;)
    {
        _3029 = cbMatDynParam._m0[0u];
        float _3031 = roundEven(_3029.y);
        bool _3032 = _3031 == 3.0;
        float _3033 = log2(_3019);
        float _3040 = exp2(_3033 * cbSceneParam._m0[78u].x) * _2889;
        float _3041 = exp2(_3033 * cbSceneParam._m0[78u].y) * _2890;
        float _3042 = exp2(_3033 * cbSceneParam._m0[78u].z) * _2891;
        float _3049 = _1008 + (-0.5);
        _3051 = cbMtdParam._m0[1u];
        _3053 = _3051.y * _3049;
        float _3056 = (_3031 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3057 = _3056 * (_3032 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3013)));
        _3058 = _3056 * (_3032 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3015)));
        _3059 = _3056 * (_3032 ? _3042 : (_3042 + (cbSceneParam._m0[72u].w * _3017)));
        _3060 = _3049 * 0.999000012874603271484375;
        _3070 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3070)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3060) < 0.5)
            {
                _3226 = true;
                break;
            }
        }
        uint _3167 = _1057 + uint(_3029.w);
        if ((cbInstanceData._m0[_3167].w < 1.0) && ((cbInstanceData._m0[_3167].w + _3060) < 0.5))
        {
            _3226 = true;
            break;
        }
        if ((_3053 + 1.0) < _3051.x)
        {
            _3226 = true;
            break;
        }
        _3226 = false;
        break;
    }
    float _3431;
    if (_3226)
    {
        discard_state = true;
        _3431 = 0.0;
    }
    else
    {
        _3431 = cbInstanceData._m0[_2892].w;
    }
    SV_Target.x = _3057;
    SV_Target.y = _3058;
    SV_Target.z = _3059;
    SV_Target.w = _3431;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2892].w;
    discard_exit();
}


