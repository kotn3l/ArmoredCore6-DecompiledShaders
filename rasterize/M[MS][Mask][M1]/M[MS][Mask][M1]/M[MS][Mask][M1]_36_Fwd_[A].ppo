#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1373;
float _3753;
float _3754;
float _3755;
float _3756;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _378 = _376.x;
    float _390 = dot(vec4(_378, _376.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_378 - _390) * cbMtdParam._m0[23u].w) + _390) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3765 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _415 = (_408 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _416 = (_408 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _417 = (_408 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _436 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _473 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _475 = _473.x;
    float _476 = _473.y;
    float _477 = _473.z;
    float _486 = ((_456.z - _477) * _408) + _477;
    float _489 = ((((_456.x - _475) * _408) + _475) * 2.0) + (-1.0);
    float _491 = ((((_456.y - _476) * _408) + _476) * 2.0) + (-1.0);
    float _492 = dot(vec2(_489, _491), vec2(_489, _491));
    float _3776 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _497 = sqrt(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))));
    vec4 _513 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _540 = _538.x;
    float _541 = 1.0 - _540;
    float _550 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _553 = ((isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : min(_550, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _562 = (_553 - ((((((_540 - _541) * cbMtdParam._m0[24u].z) + _541) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _553))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3797 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _570 = (_563 * ((_436.x * cbMtdParam._m0[18u].x) - _415)) + _415;
    float _571 = (_563 * ((_436.y * cbMtdParam._m0[18u].y) - _416)) + _416;
    float _572 = (_563 * ((_436.z * cbMtdParam._m0[18u].z) - _417)) + _417;
    vec4 _584 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _586 = _584.x;
    float _587 = 1.0 - _586;
    float _612 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_586 - _587) * cbMtdParam._m0[24u].w) + _587) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3808 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _621 = ((((cbMtdParam._m0[10u].x - _570) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _613) + _570;
    float _622 = ((((cbMtdParam._m0[10u].y - _571) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _613) + _571;
    float _623 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _572)) * _613) + _572;
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _651 = _649.x;
    float _669 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _651) * _408) + _651;
    float _673 = ((_635.x - _669) * cbMtdParam._m0[19u].z) + _669;
    float _675 = _673 - (_673 * _563);
    float _677 = _675 - (_675 * _613);
    float _681 = (cbMtdParam._m0[19u].w * (_513.z - _486)) + _486;
    vec4 _695 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _702 = (_695.x * 2.0) + (-1.0);
    float _703 = (_695.y * 2.0) + (-1.0);
    float _704 = dot(vec2(_702, _703), vec2(_702, _703));
    float _3819 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _712 = (_563 * (_695.z - _681)) + _681;
    float _715 = ((cbMtdParam._m0[23u].x - _712) * _613) + _712;
    vec4 _734 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _740 = (_734.x * 2.0) + (-1.0);
    float _741 = (_734.y * 2.0) + (-1.0);
    float _742 = dot(vec2(_740, _741), vec2(_740, _741));
    float _3830 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _750 = (((_513.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _489;
    float _751 = (((_513.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _491;
    float _763 = (((_702 - _750) + (cbMtdParam._m0[21u].x * _750)) * _563) + _750;
    float _764 = (((_703 - _751) + (cbMtdParam._m0[21u].x * _751)) * _563) + _751;
    float _765 = (_563 * (sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) - _497)) + _497;
    float _776 = (((_740 - _763) + (_763 * cbMtdParam._m0[22u].z)) * _613) + _763;
    float _777 = (((_741 - _764) + (_764 * cbMtdParam._m0[22u].z)) * _613) + _764;
    float _778 = ((sqrt(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) - _765) * _613) + _765;
    float _780 = cbMtdParam._m0[22u].x + _513.w;
    float _783 = fma(_778, _244 * NORMAL.x, fma(_777, _251 * TANGENT.x, (_237 * _229) * _776));
    float _786 = fma(_778, _244 * NORMAL.y, fma(_777, _251 * TANGENT.y, (_237 * _230) * _776));
    float _789 = fma(_778, _244 * NORMAL.z, fma(_777, _251 * TANGENT.z, (_237 * _231) * _776));
    float _793 = inversesqrt(dot(vec3(_783, _786, _789), vec3(_783, _786, _789)));
    float _794 = _793 * _783;
    float _795 = _793 * _786;
    float _796 = _793 * _789;
    float _3841 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _797 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _3863 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3874 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3885 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3896 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _802 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _866 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _856);
    float _867 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _856);
    float _868 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _856);
    float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
    float _873 = _866 * _872;
    float _874 = _867 * _872;
    float _875 = _868 * _872;
    vec4 _880 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _882 = _880.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1054 = sqrt(((_866 * _866) + (_867 * _867)) + (_868 * _868));
        float _1060 = (cbMatDynParam._m0[5u].x * _1054) + cbMatDynParam._m0[5u].y;
        float _3907 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1065 = (cbMatDynParam._m0[5u].z * _1054) + cbMatDynParam._m0[5u].w;
        float _3918 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) - _1061)) + _1061) < ((_882 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _893 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _894 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _912 = fma(_796, cbSceneParam._m0[5u].z, fma(_795, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _794));
    float _915 = fma(_796, cbSceneParam._m0[6u].z, fma(_795, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _794));
    float _918 = fma(_796, cbSceneParam._m0[7u].z, fma(_795, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _794));
    uint _931 = _257 + 9u;
    uint _932 = _931 + uint(cbMatDynParam._m0[0u].w);
    float _938 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_932].x;
    float _939 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_932].y;
    float _940 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_932].z;
    float _3929 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _944 = 1.0 - _802;
    float _945 = _941 * _944;
    float _946 = _942 * _944;
    float _947 = _943 * _944;
    float _952 = (_941 + (-0.039999999105930328369140625)) * _802;
    float _953 = (_942 + (-0.039999999105930328369140625)) * _802;
    float _954 = (_943 + (-0.039999999105930328369140625)) * _802;
    float _955 = _952 + 0.039999999105930328369140625;
    float _957 = _953 + 0.039999999105930328369140625;
    float _958 = _954 + 0.039999999105930328369140625;
    vec4 _967 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _893, cbSceneParam._m0[86u].y * _894));
    float _971 = ((isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * TEXCOORD_5.w) * _967.x;
    float _972 = dot(vec3(_794, _795, _796), vec3(_873, _874, _875));
    float _975 = _972 * 2.0;
    float _979 = (_975 * _794) - _873;
    float _980 = (_975 * _795) - _874;
    float _981 = (_975 * _796) - _875;
    float _985 = abs(dot(vec3(_873, _874, _875), vec3(_794, _795, _796)));
    float _3962 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _987 = sqrt(_797);
    float _1000 = exp2((_987 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_987 * 3.0));
    float _1006 = (1.0 - _1000) * ((_987 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1007 = _1000 * _987;
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1372;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1097 = fma(_1043, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1035));
        float _1101 = fma(_1043, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1035));
        float _1105 = fma(_1043, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1035));
        float _1130 = _1035 + _794;
        float _1131 = _1039 + _795;
        float _1132 = _1043 + _796;
        float _1142 = fma(_1132, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1130)) - _1097;
        float _1143 = fma(_1132, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1130)) - _1101;
        float _1144 = fma(_1132, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1130)) - _1105;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1097 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1101 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[34u].z) + ((((((_1105 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1200 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1166.x + (-0.5));
        float _1202 = _1200 * (_1166.y + (-0.5));
        float _1203 = _1200 * (_1166.z + (-0.5));
        float _1210 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1173.x + (-0.5));
        float _1212 = _1210 * (_1173.y + (-0.5));
        float _1213 = _1210 * (_1173.z + (-0.5));
        float _1220 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1180.x + (-0.5));
        float _1222 = _1220 * (_1180.y + (-0.5));
        float _1223 = _1220 * (_1180.z + (-0.5));
        float _1230 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1187.x + (-0.5));
        float _1232 = _1230 * (_1187.y + (-0.5));
        float _1233 = _1230 * (_1187.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1254 = (dot(vec3(_794, _795, _796), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1264 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4010 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1266 + 1.0))) + _1271) * _1234;
        float _1281 = _1202 * 0.5;
        float _1282 = _1212 * 0.5;
        float _1283 = _1222 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_794, _795, _796), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4043 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1308 + 1.0))) + _1313) * _1235;
        float _1323 = _1203 * 0.5;
        float _1324 = _1213 * 0.5;
        float _1325 = _1223 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_794, _795, _796), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4076 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1350 + 1.0))) + _1355) * _1236;
        _1372 = _1203;
        _1374 = _1202;
        _1375 = _1201;
        _1376 = _1213;
        _1377 = _1212;
        _1378 = _1211;
        _1379 = _1223;
        _1380 = _1222;
        _1381 = _1221;
        _1382 = _1236;
        _1383 = _1235;
        _1384 = _1234;
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1373;
        _1374 = _1373;
        _1375 = _1373;
        _1376 = _1373;
        _1377 = _1373;
        _1378 = _1373;
        _1379 = _1373;
        _1380 = _1373;
        _1381 = _1373;
        _1382 = _1373;
        _1383 = _1373;
        _1384 = _1373;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1415 = fma(_1043, cbModelParam._m0[30u].z, fma(_1039, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1035));
        float _1419 = fma(_1043, cbModelParam._m0[31u].z, fma(_1039, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1035));
        float _1423 = fma(_1043, cbModelParam._m0[32u].z, fma(_1039, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1035));
        float _1446 = _1035 + _794;
        float _1447 = _1039 + _795;
        float _1448 = _1043 + _796;
        float _1458 = fma(_1448, cbModelParam._m0[30u].z, fma(_1447, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1446)) - _1415;
        float _1459 = fma(_1448, cbModelParam._m0[31u].z, fma(_1447, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1446)) - _1419;
        float _1460 = fma(_1448, cbModelParam._m0[32u].z, fma(_1447, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1446)) - _1423;
        float _1464 = inversesqrt(dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460)));
        float _1477 = ((_1464 * _1458) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1415 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1464 * _1459) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1419 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1464 * _1460) / cbModelParam._m0[35u].z) + ((((((_1423 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1477, _1478, _1479), 0.0);
        float _1514 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1481.x + (-0.5));
        float _1516 = _1514 * (_1481.y + (-0.5));
        float _1517 = _1514 * (_1481.z + (-0.5));
        float _1524 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1488.x + (-0.5));
        float _1526 = _1524 * (_1488.y + (-0.5));
        float _1527 = _1524 * (_1488.z + (-0.5));
        float _1534 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1495.x + (-0.5));
        float _1536 = _1534 * (_1495.y + (-0.5));
        float _1537 = _1534 * (_1495.z + (-0.5));
        float _1544 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1502.x + (-0.5));
        float _1546 = _1544 * (_1502.y + (-0.5));
        float _1547 = _1544 * (_1502.z + (-0.5));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = _1515 * 0.5;
        float _1552 = _1525 * 0.5;
        float _1553 = _1535 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_794, _795, _796), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4139 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1578 + 1.0))) + _1583) * _1548;
        float _1593 = _1516 * 0.5;
        float _1594 = _1526 * 0.5;
        float _1595 = _1536 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_794, _795, _796), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4172 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1620 + 1.0))) + _1625) * _1549;
        float _1635 = _1517 * 0.5;
        float _1636 = _1527 * 0.5;
        float _1637 = _1537 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_794, _795, _796), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4205 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1662 + 1.0))) + _1667) * _1550;
        _1684 = _1517;
        _1685 = _1516;
        _1686 = _1515;
        _1687 = _1527;
        _1688 = _1526;
        _1689 = _1525;
        _1690 = _1537;
        _1691 = _1536;
        _1692 = _1535;
        _1693 = _1550;
        _1694 = _1549;
        _1695 = _1548;
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
    }
    else
    {
        _1684 = _1373;
        _1685 = _1373;
        _1686 = _1373;
        _1687 = _1373;
        _1688 = _1373;
        _1689 = _1373;
        _1690 = _1373;
        _1691 = _1373;
        _1692 = _1373;
        _1693 = _1373;
        _1694 = _1373;
        _1695 = _1373;
        _1696 = 0.0;
        _1697 = 0.0;
        _1698 = 0.0;
    }
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1385)) + _1385;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1386)) + _1386;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1387)) + _1387;
    float _1731 = fma(_1710, cbSceneParam._m0[89u].z, fma(_1709, cbSceneParam._m0[89u].y, _1708 * cbSceneParam._m0[89u].x));
    float _1734 = fma(_1710, cbSceneParam._m0[90u].z, fma(_1709, cbSceneParam._m0[90u].y, _1708 * cbSceneParam._m0[90u].x));
    float _1737 = fma(_1710, cbSceneParam._m0[91u].z, fma(_1709, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1708));
    float _1752 = _979 * 0.5;
    float _1753 = _980 * 0.5;
    float _1754 = _981 * 0.5;
    float _1755 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1758 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1761 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1795;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1768 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1372, _1376, _1379, _1382));
        float _1772 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1776 = dot(vec4(_1752, _1753, _1754, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1783 = dot(vec4(cbModelParam._m0[39u]), vec4(_1752, _1753, _1754, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1783) ? 0.0 : (isnan(0.0) ? _1783 : max(0.0, _1783))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1806;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1797 = dot(vec4(cbModelParam._m0[40u]), vec4(_1752, _1753, _1754, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1797) ? 0.0 : (isnan(0.0) ? _1797 : max(0.0, _1797))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1810 = (_1806 * cbModelParam._m0[1u].x) + (_1795 * (1.0 - cbModelParam._m0[1u].x));
    float _1820 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _797);
    float _1821 = isnan(_1820) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1820 : min(cbModelParam._m0[25u].z, _1820));
    float _1901;
    float _1903;
    float _1905;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1868 = fma(_1043, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1035)) + cbModelParam._m0[13u].w;
        float _1872 = fma(_1043, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1035)) + cbModelParam._m0[14u].w;
        float _1876 = fma(_1043, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1035)) + cbModelParam._m0[15u].w;
        float _1879 = fma(_981, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979));
        float _1882 = fma(_981, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979));
        float _1885 = fma(_981, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979));
        float _1913;
        if (_1879 > 0.0)
        {
            _1913 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1913 = frontier_phi_17_15_ladder;
        }
        float _2115;
        if (_1882 > 0.0)
        {
            _2115 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2115 = frontier_phi_26_22_ladder;
        }
        float _2369;
        if (_1885 > 0.0)
        {
            _2369 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2369 = frontier_phi_38_33_ladder;
        }
        float _2371 = isnan(_2115) ? _1913 : (isnan(_1913) ? _2115 : min(_1913, _2115));
        float _2372 = isnan(_2369) ? _2371 : (isnan(_2371) ? _2369 : min(_2371, _2369));
        float _2376 = (_2372 * _1879) + _1868;
        float _2377 = (_2372 * _1882) + _1872;
        float _2378 = (_2372 * _1885) + _1876;
        float _2379 = _2372 * 9.9999997473787516355514526367188e-05;
        float _2381 = (-1.0) - _2379;
        float _2383 = _2379 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2378 > _2383) || ((_2378 < _2381) || ((_2377 > _2383) || ((_2377 < _2381) || ((_2376 < _2381) || (_2376 > _2383))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2378, cbModelParam._m0[9u].z, fma(_2377, cbModelParam._m0[9u].y, _2376 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2378, cbModelParam._m0[10u].z, fma(_2377, cbModelParam._m0[10u].y, _2376 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2378, cbModelParam._m0[11u].z, fma(_2377, cbModelParam._m0[11u].y, _2376 * cbModelParam._m0[11u].x))), _1821);
            frontier_phi_16_38_ladder = _2506.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2506.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2506.x * cbModelParam._m0[1u].y;
        }
        _1901 = frontier_phi_16_38_ladder_2;
        _1903 = frontier_phi_16_38_ladder_1;
        _1905 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1889 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_979, _980, _981), _1821);
        _1901 = _1889.x * cbModelParam._m0[1u].y;
        _1903 = _1889.y * cbModelParam._m0[1u].y;
        _1905 = _1889.z * cbModelParam._m0[1u].y;
    }
    float _1909 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _797);
    float _1910 = isnan(_1909) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1909 : min(cbModelParam._m0[25u].w, _1909));
    float _1999;
    float _2001;
    float _2003;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1963 = fma(_1043, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1035)) + cbModelParam._m0[21u].w;
        float _1967 = fma(_1043, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1035)) + cbModelParam._m0[22u].w;
        float _1971 = fma(_1043, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1035)) + cbModelParam._m0[23u].w;
        float _1974 = fma(_981, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979));
        float _1977 = fma(_981, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979));
        float _1980 = fma(_981, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979));
        float _2120;
        if (_1974 > 0.0)
        {
            _2120 = abs((1.0 - _1963) / _1974);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1963 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2120 = frontier_phi_28_24_ladder;
        }
        float _2396;
        if (_1977 > 0.0)
        {
            _2396 = abs((1.0 - _1967) / _1977);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1967 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2396 = frontier_phi_40_35_ladder;
        }
        float _2609;
        if (_1980 > 0.0)
        {
            _2609 = abs((1.0 - _1971) / _1980);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1971 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2609 = frontier_phi_49_46_ladder;
        }
        float _2611 = isnan(_2396) ? _2120 : (isnan(_2120) ? _2396 : min(_2120, _2396));
        float _2612 = isnan(_2609) ? _2611 : (isnan(_2611) ? _2609 : min(_2611, _2609));
        float _2616 = (_2612 * _1974) + _1963;
        float _2617 = (_2612 * _1977) + _1967;
        float _2618 = (_2612 * _1980) + _1971;
        float _2619 = _2612 * 9.9999997473787516355514526367188e-05;
        float _2620 = (-1.0) - _2619;
        float _2622 = _2619 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2618 > _2622) || ((_2618 < _2620) || ((_2617 > _2622) || ((_2617 < _2620) || ((_2616 < _2620) || (_2616 > _2622))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2618, cbModelParam._m0[17u].z, fma(_2617, cbModelParam._m0[17u].y, _2616 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2618, cbModelParam._m0[18u].z, fma(_2617, cbModelParam._m0[18u].y, _2616 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2618, cbModelParam._m0[19u].z, fma(_2617, cbModelParam._m0[19u].y, _2616 * cbModelParam._m0[19u].x))), _1910);
            frontier_phi_25_49_ladder = _2817.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2817.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2817.x * cbModelParam._m0[1u].z;
        }
        _1999 = frontier_phi_25_49_ladder_2;
        _2001 = frontier_phi_25_49_ladder_1;
        _2003 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1983 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_979, _980, _981), _1910);
        _1999 = _1983.x * cbModelParam._m0[1u].z;
        _2001 = _1983.y * cbModelParam._m0[1u].z;
        _2003 = _1983.z * cbModelParam._m0[1u].z;
    }
    float _2016 = (((_1006 * _955) + _1007) * _971) * ((cbModelParam._m0[1u].w * (_1999 - _1901)) + _1901);
    float _2018 = (((_1006 * _957) + _1007) * _971) * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2020 = (((_1006 * _958) + _1007) * _971) * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2023 = fma(_2020, cbSceneParam._m0[89u].z, fma(_2018, cbSceneParam._m0[89u].y, _2016 * cbSceneParam._m0[89u].x));
    float _2026 = fma(_2020, cbSceneParam._m0[90u].z, fma(_2018, cbSceneParam._m0[90u].y, _2016 * cbSceneParam._m0[90u].x));
    float _2029 = fma(_2020, cbSceneParam._m0[91u].z, fma(_2018, cbSceneParam._m0[91u].y, _2016 * cbSceneParam._m0[91u].x));
    uvec4 _2039 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2041 = _2039.x * 14u;
    uint _2042 = _2041 + 13u;
    float _2049 = _971 + (-1.0);
    float _2054 = (cbLight._m0[_2042].x * _2049) + 1.0;
    float _2055 = (cbLight._m0[_2042].y * _2049) + 1.0;
    float _2056 = (cbLight._m0[_2042].z * _2049) + 1.0;
    float _2057 = (cbLight._m0[_2042].w * _2049) + 1.0;
    uint _2058 = _2041 + 5u;
    float _2064 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2068 = _2041 + 4u;
    float _2074 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
    uint _2078 = _2041 | 1u;
    float _2089 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_794, _795, _796));
    float _2092 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_794, _795, _796));
    float _4341 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _4352 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2097 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * 0.3183098733425140380859375;
    float _2099 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * 0.3183098733425140380859375;
    float _2106 = ((cbLight._m0[_2058].x * _2064) * _2099) + ((cbLight._m0[_2068].x * _2074) * _2097);
    float _2107 = ((_2064 * cbLight._m0[_2058].y) * _2099) + ((_2074 * cbLight._m0[_2068].y) * _2097);
    float _2108 = ((_2064 * cbLight._m0[_2058].z) * _2099) + ((_2074 * cbLight._m0[_2068].z) * _2097);
    uvec4 _2112 = floatBitsToUint(cbLight._m0[_2041 + 12u]);
    bool _2114 = _2112.x == 0u;
    float _2125;
    float _2127;
    float _2129;
    if (_2114)
    {
        _2125 = _2106;
        _2127 = _2107;
        _2129 = _2108;
    }
    else
    {
        uint _2133 = _2041 + 6u;
        float _2149 = (dot(vec3(cbLight._m0[_2041 + 2u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2150 = _2149 * _2149;
        float _4363 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2151 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2152 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2125 = (((cbLight._m0[_2133].x * 0.3183098733425140380859375) * _2151) * _2152) + _2106;
        _2127 = (((cbLight._m0[_2133].y * 0.3183098733425140380859375) * _2151) * _2152) + _2107;
        _2129 = (((cbLight._m0[_2133].z * 0.3183098733425140380859375) * _2151) * _2152) + _2108;
    }
    bool _2132 = _2112.y == 0u;
    float _2170;
    float _2172;
    float _2174;
    if (_2132)
    {
        _2170 = _2125;
        _2172 = _2127;
        _2174 = _2129;
    }
    else
    {
        uint _2340 = _2041 + 7u;
        float _2356 = (dot(vec3(cbLight._m0[_2041 + 3u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2357 = _2356 * _2356;
        float _4379 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2358 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2359 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2170 = (((cbLight._m0[_2340].x * 0.3183098733425140380859375) * _2358) * _2359) + _2125;
        _2172 = (((cbLight._m0[_2340].y * 0.3183098733425140380859375) * _2358) * _2359) + _2127;
        _2174 = (((cbLight._m0[_2340].z * 0.3183098733425140380859375) * _2358) * _2359) + _2129;
    }
    uint _2177 = _2041 + 8u;
    float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _797) * 0.949999988079071044921875);
    float _2191 = _2190 * _2190;
    float _2192 = cbLight._m0[_2041].x + _873;
    float _2193 = cbLight._m0[_2041].y + _874;
    float _2194 = cbLight._m0[_2041].z + _875;
    float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
    float _2199 = _2198 * _2192;
    float _2200 = _2198 * _2193;
    float _2201 = _2198 * _2194;
    float _2202 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2041].xyz));
    float _4395 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _4406 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _2206 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2207 = dot(vec3(_794, _795, _796), vec3(_2199, _2200, _2201));
    float _4417 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2199, _2200, _2201));
    float _4428 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2191 * _2191;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2227 = exp2(log2(1.0 - (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * 5.0);
    float _2228 = 0.959999978542327880859375 - _952;
    float _2230 = 0.959999978542327880859375 - _953;
    float _2231 = 0.959999978542327880859375 - _954;
    float _2238 = 1.0 - _2191;
    float _2249 = (0.5 / (((_2206 * ((_2205 * _2238) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2238) + _2191) * _2205))) * _2205;
    float _4439 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2251 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    uint _2262 = _2041 + 9u;
    float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _797) * 0.949999988079071044921875);
    float _2274 = _2273 * _2273;
    float _2275 = cbLight._m0[_2078].x + _873;
    float _2276 = cbLight._m0[_2078].y + _874;
    float _2277 = cbLight._m0[_2078].z + _875;
    float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
    float _2282 = _2281 * _2275;
    float _2283 = _2281 * _2276;
    float _2284 = _2281 * _2277;
    float _2285 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2078].xyz));
    float _4450 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2289 = dot(vec3(_794, _795, _796), vec3(_2282, _2283, _2284));
    float _4461 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2293 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2282, _2283, _2284));
    float _4472 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2297 = _2274 * _2274;
    float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
    float _2308 = exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0);
    float _2315 = 1.0 - _2274;
    float _2325 = (0.5 / (((_2206 * ((_2288 * _2315) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2315) + _2274) * _2288))) * _2288;
    float _4483 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2327 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
    float _2337 = (((((_2308 * _2228) + _955) * cbLight._m0[_2262].x) * _2327) * _2064) + (((((_2227 * _2228) + _955) * cbLight._m0[_2177].x) * _2251) * _2074);
    float _2338 = (((((_2308 * _2230) + _957) * cbLight._m0[_2262].y) * _2327) * _2064) + (((((_2227 * _2230) + _957) * cbLight._m0[_2177].y) * _2251) * _2074);
    float _2339 = (((((_2308 * _2231) + _958) * cbLight._m0[_2262].z) * _2327) * _2064) + (((((_2227 * _2231) + _958) * cbLight._m0[_2177].z) * _2251) * _2074);
    float _2401;
    float _2403;
    float _2405;
    if (_2114)
    {
        _2401 = _2337;
        _2403 = _2338;
        _2405 = _2339;
    }
    else
    {
        uint _2407 = _2041 + 2u;
        uint _2411 = _2041 + 10u;
        float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _797) * 0.949999988079071044921875);
        float _2426 = _2425 * _2425;
        float _2427 = cbLight._m0[_2407].x + _873;
        float _2428 = cbLight._m0[_2407].y + _874;
        float _2429 = cbLight._m0[_2407].z + _875;
        float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
        float _2434 = _2433 * _2427;
        float _2435 = _2433 * _2428;
        float _2436 = _2433 * _2429;
        float _2437 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2407].xyz));
        float _4494 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2441 = dot(vec3(_794, _795, _796), vec3(_2434, _2435, _2436));
        float _4505 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2445 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2434, _2435, _2436));
        float _4516 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2449 = _2426 * _2426;
        float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
        float _2460 = exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0);
        float _2467 = 1.0 - _2426;
        float _2477 = (0.5 / (((_2206 * ((_2440 * _2467) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2467) + _2426) * _2440))) * _2440;
        float _4527 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2479 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
        float _2480 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2401 = (((((_2460 * _2228) + _955) * cbLight._m0[_2411].x) * _2479) * _2480) + _2337;
        _2403 = (((((_2460 * _2230) + _957) * cbLight._m0[_2411].y) * _2479) * _2480) + _2338;
        _2405 = (((((_2460 * _2231) + _958) * cbLight._m0[_2411].z) * _2479) * _2480) + _2339;
    }
    float _2515;
    float _2517;
    float _2519;
    if (_2132)
    {
        _2515 = _2401;
        _2517 = _2403;
        _2519 = _2405;
    }
    else
    {
        uint _2526 = _2041 + 3u;
        uint _2530 = _2041 + 11u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _797) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _873;
        float _2547 = cbLight._m0[_2526].y + _874;
        float _2548 = cbLight._m0[_2526].z + _875;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2526].xyz));
        float _4543 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2560 = dot(vec3(_794, _795, _796), vec3(_2553, _2554, _2555));
        float _4554 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4565 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2579 = exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0);
        float _2586 = 1.0 - _2545;
        float _2596 = (0.5 / (((_2206 * ((_2559 * _2586) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2586) + _2545) * _2559))) * _2559;
        float _4576 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2598 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2599 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2515 = (((((_2579 * _2228) + _955) * cbLight._m0[_2530].x) * _2598) * _2599) + _2401;
        _2517 = (((((_2579 * _2230) + _957) * cbLight._m0[_2530].y) * _2598) * _2599) + _2403;
        _2519 = (((((_2579 * _2231) + _958) * cbLight._m0[_2530].z) * _2598) * _2599) + _2405;
    }
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    if (_2039.y == 0u)
    {
        float _2674 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2675 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2674;
        float _2676 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2674;
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2674;
        uvec4 _2689 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2690 = _2689.x;
        uint _2701 = uint((float(_2689.y) * floor(float(uint(cbSceneParam._m0[85u].y * _894) / _2690))) + floor(float(uint(cbSceneParam._m0[85u].x * _893) / _2690)));
        float _2711 = (log2(_2677 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2712 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        uint _2715 = uint(isnan(14.0) ? _2712 : (isnan(_2712) ? 14.0 : min(_2712, 14.0)));
        uvec4 _2720 = texelFetch(g_lightClusterGridBuffer, int(((_2715 << 2u) + (_2701 << 6u)) >> 2u));
        uint _2721 = _2720.x;
        uint _2722 = _2689.z;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        if (((((1u << ((_2722 >> 4u) & 15u)) + 4294967295u) & _2721) == 0u) || ((_2722 & 240u) == 0u))
        {
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
            _2832 = 0.0;
        }
        else
        {
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2831;
            float _2833;
            float _2975 = 0.0;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            uint _2981 = 0u;
            uint _2990;
            bool _2991;
            for (;;)
            {
                _2990 = texelFetch(g_lightClassification, int((((_2715 << 5u) + (_2701 << 9u)) + (_2981 << 2u)) >> 2u)).x;
                _2991 = _2990 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2991)
                {
                    frontier_phi_66_pred = _2975;
                    frontier_phi_66_pred_1 = _2980;
                    frontier_phi_66_pred_2 = _2979;
                    frontier_phi_66_pred_3 = _2978;
                    frontier_phi_66_pred_4 = _2977;
                    frontier_phi_66_pred_5 = _2976;
                }
                else
                {
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    uint _3126;
                    _3120 = _2975;
                    _3121 = _2976;
                    _3122 = _2977;
                    _3123 = _2978;
                    _3124 = _2979;
                    _3125 = _2980;
                    _3126 = _2990;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    for (;;)
                    {
                        uint _3130 = uint(findLSB(_3126)) + (_2981 << 5u);
                        uint _3127 = (_3126 + 4294967295u) & _3126;
                        uint _3132 = _3130 * 48u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3132)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 3u)).x));
                        uint _3152 = (_3130 * 48u) + 4u;
                        vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 3u)).x));
                        uint _3171 = (_3130 * 48u) + 8u;
                        vec3 _3182 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3171)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 2u)).x));
                        float _3186 = _3146.x - _2675;
                        float _3187 = _3146.y - _2676;
                        float _3188 = _3146.z - _2677;
                        float _3189 = dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188));
                        float _3192 = inversesqrt(_3189);
                        float _3193 = _3192 * _3186;
                        float _3194 = _3192 * _3187;
                        float _3195 = _3192 * _3188;
                        float _3196 = dot(vec3(_912, _915, _918), vec3(_3193, _3194, _3195));
                        float _3201 = 1.0 - (_3189 * _3146.w);
                        float _4602 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3202 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3203 = sqrt(_3189) * _3165.w;
                        float _3206 = 1.39999997615814208984375 / (_3203 + 1.39999997615814208984375);
                        float _3207 = _3206 * _3206;
                        float _3210 = ((1.0 - _3207) * _3196) + _3207;
                        float _3213 = _3203 * _3203;
                        float _3217 = ((isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))) * _3202) / ((_3213 * 0.699999988079071044921875) + 1.0);
                        float _3221 = (-0.0) - _2675;
                        float _3222 = (-0.0) - _2676;
                        float _3223 = (-0.0) - _2677;
                        float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                        float _3228 = _3227 * _3221;
                        float _3229 = _3227 * _3222;
                        float _3230 = _3227 * _3223;
                        float _3238 = exp2(log2(1.0 / ((_3213 * 3.5) + 5.0)) * 0.25);
                        float _3239 = 1.0 - _987;
                        float _3246 = sqrt(1.0 - ((1.0 - (_3239 * _3239)) * (1.0 - (_3238 * _3238))));
                        float _3247 = _3246 * _3246;
                        float _3248 = _3247 * _3247;
                        float _3249 = _3228 + _3193;
                        float _3250 = _3229 + _3194;
                        float _3251 = _3230 + _3195;
                        float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                        float _3259 = dot(vec3(_912, _915, _918), vec3(_3228, _3229, _3230));
                        float _4618 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3262 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3263 = dot(vec3(_912, _915, _918), vec3(_3255 * _3249, _3255 * _3250, _3255 * _3251));
                        float _4629 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3266 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3270 = ((_3266 * _3266) * (_3248 + (-1.0))) + 1.0;
                        float _3271 = _3206 * _3247;
                        float _3272 = _3271 * _3271;
                        float _3275 = ((1.0 - _3272) * _3196) + _3272;
                        float _4640 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3276 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3277 = 1.0 - _3247;
                        float _3287 = (0.5 / (((_3276 * ((_3262 * _3277) + _3247)) + 9.9999999392252902907785028219223e-09) + (((_3276 * _3277) + _3247) * _3262))) * _3276;
                        float _4651 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3298 = (((_3248 * 3.1415927410125732421875) * (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) / ((_3270 * _3270) * ((_3213 * 2.1991131305694580078125) + 3.141590118408203125))) * _3202;
                        _3050 = (_3217 * _3165.x) + _3123;
                        _3051 = (_3217 * _3165.y) + _3124;
                        _3052 = (_3217 * _3165.z) + _3125;
                        _3047 = (_3298 * _3182.x) + _3120;
                        _3048 = (_3298 * _3182.y) + _3121;
                        _3049 = (_3298 * _3182.z) + _3122;
                        if (_3127 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3120 = _3047;
                            _3121 = _3048;
                            _3122 = _3049;
                            _3123 = _3050;
                            _3124 = _3051;
                            _3125 = _3052;
                            _3126 = _3127;
                        }
                    }
                    frontier_phi_66_pred = _3047;
                    frontier_phi_66_pred_1 = _3052;
                    frontier_phi_66_pred_2 = _3051;
                    frontier_phi_66_pred_3 = _3050;
                    frontier_phi_66_pred_4 = _3049;
                    frontier_phi_66_pred_5 = _3048;
                }
                _2823 = frontier_phi_66_pred;
                _2833 = frontier_phi_66_pred_1;
                _2831 = frontier_phi_66_pred_2;
                _2829 = frontier_phi_66_pred_3;
                _2827 = frontier_phi_66_pred_4;
                _2825 = frontier_phi_66_pred_5;
                uint _2982 = _2981 + 1u;
                if (_2982 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2975 = _2823;
                    _2976 = _2825;
                    _2977 = _2827;
                    _2978 = _2829;
                    _2979 = _2831;
                    _2980 = _2833;
                    _2981 = _2982;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
            _2832 = _2833;
        }
        uvec4 _2836 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2837 = _2836.z;
        uint _2839 = (_2837 >> 8u) & 15u;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        if (((4294967295u << _2839) & _2721) == 0u)
        {
            _2943 = _2822;
            _2945 = _2824;
            _2947 = _2826;
            _2949 = _2828;
            _2951 = _2830;
            _2953 = _2832;
        }
        else
        {
            float _2968 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
            float _2969 = _2968 * _2675;
            float _2970 = _2968 * _2676;
            float _2971 = _2968 * _2677;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2839 < ((_2837 >> 12u) & 15u))
            {
                float _2944;
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _3103 = _2822;
                float _3104 = _2824;
                float _3105 = _2826;
                float _3106 = _2828;
                float _3107 = _2830;
                float _3108 = _2832;
                uint _3109 = _2839;
                uint _3118;
                bool _3119;
                for (;;)
                {
                    _3118 = texelFetch(g_lightClassification, int((((_2715 << 5u) + (_2701 << 9u)) + (_3109 << 2u)) >> 2u)).x;
                    _3119 = _3118 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3119)
                    {
                        frontier_phi_77_pred = _3108;
                        frontier_phi_77_pred_1 = _3107;
                        frontier_phi_77_pred_2 = _3106;
                        frontier_phi_77_pred_3 = _3105;
                        frontier_phi_77_pred_4 = _3104;
                        frontier_phi_77_pred_5 = _3103;
                    }
                    else
                    {
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3325 = _3103;
                        float _3326 = _3104;
                        float _3327 = _3105;
                        float _3328 = _3106;
                        float _3329 = _3107;
                        float _3330 = _3108;
                        uint _3331 = _3118;
                        uint _3332;
                        vec4 _3357;
                        float _3358;
                        vec4 _3373;
                        vec3 _3385;
                        vec4 _3400;
                        vec4 _3416;
                        float _3462;
                        bool _3463;
                        for (;;)
                        {
                            uint _3342 = ((_3109 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3331));
                            _3332 = (_3331 + 4294967295u) & _3331;
                            uint _3344 = _3342 * 40u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            _3358 = _3357.w;
                            uint _3360 = (_3342 * 40u) + 4u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            uint _3375 = (_3342 * 40u) + 8u;
                            _3385 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x));
                            uint _3387 = (_3342 * 40u) + 16u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3403 = (_3342 * 40u) + 20u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3342 * 40u) + 24u;
                            vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3437 = (_3342 * 40u) + 28u;
                            vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            _3462 = fma(_2677, _3450.z, fma(_2676, _3450.y, _3450.x * _2675)) + _3450.w;
                            _3463 = !((fma(_2677, _3431.z, fma(_2676, _3431.y, _3431.x * _2675)) + _3431.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3463)
                            {
                                float _3490 = _3357.x - _2675;
                                float _3491 = _3357.y - _2676;
                                float _3492 = _3357.z - _2677;
                                float _3493 = dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492));
                                float _3496 = inversesqrt(_3493);
                                float _3497 = _3496 * _3490;
                                float _3498 = _3496 * _3491;
                                float _3499 = _3496 * _3492;
                                float _3503 = 1.0 - (_3493 / (_3358 * _3358));
                                float _4662 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3508 = sqrt(_3493) * _3373.w;
                                float _3510 = 1.39999997615814208984375 / (_3508 + 1.39999997615814208984375);
                                float _3511 = _3510 * _3510;
                                float _3514 = ((1.0 - _3511) * dot(vec3(_3497, _3498, _3499), vec3(_912, _915, _918))) + _3511;
                                float _3517 = _3508 * _3508;
                                float _3521 = (fma(_2677, _3400.z, fma(_2676, _3400.y, _3400.x * _2675)) + _3400.w) / _3462;
                                float _3522 = (fma(_2677, _3416.z, fma(_2676, _3416.y, _3416.x * _2675)) + _3416.w) / _3462;
                                float _3526 = 1.0 - dot(vec2(_3521, _3522), vec2(_3521, _3522));
                                float _4678 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3528 = _3527 * (((isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0))) * _3504) / ((_3517 * 0.699999988079071044921875) + 1.0));
                                float _3540 = exp2(log2(1.0 / ((_3517 * 3.5) + 5.0)) * 0.25);
                                float _3541 = 1.0 - _987;
                                float _3548 = sqrt(1.0 - ((1.0 - (_3541 * _3541)) * (1.0 - (_3540 * _3540))));
                                float _3549 = _3548 * _3548;
                                float _3550 = _3549 * _3549;
                                float _3551 = _3497 - _2969;
                                float _3552 = _3498 - _2970;
                                float _3553 = _3499 - _2971;
                                float _3557 = inversesqrt(dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553)));
                                float _3561 = dot(vec3(_912, _915, _918), vec3((-0.0) - _2969, (-0.0) - _2970, (-0.0) - _2971));
                                float _4689 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3564 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3565 = dot(vec3(_912, _915, _918), vec3(_3557 * _3551, _3557 * _3552, _3557 * _3553));
                                float _4700 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3568 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3572 = ((_3568 * _3568) * (_3550 + (-1.0))) + 1.0;
                                float _3573 = _3510 * _3549;
                                float _3574 = _3573 * _3573;
                                float _3580 = ((1.0 - _3574) * dot(vec3(_912, _915, _918), vec3(_3497, _3498, _3499))) + _3574;
                                float _4711 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3581 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3582 = 1.0 - _3549;
                                float _3592 = (0.5 / (((_3581 * ((_3564 * _3582) + _3549)) + 9.9999999392252902907785028219223e-09) + (((_3581 * _3582) + _3549) * _3564))) * _3581;
                                float _4722 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3602 = (_3527 * _3504) * (((_3550 * 3.1415927410125732421875) * (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) / ((_3572 * _3572) * ((_3517 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3528 * _3373.y;
                                frontier_phi_83_pred_1 = _3528 * _3373.x;
                                frontier_phi_83_pred_2 = _3602 * _3385.z;
                                frontier_phi_83_pred_3 = _3602 * _3385.y;
                                frontier_phi_83_pred_4 = _3602 * _3385.x;
                                frontier_phi_83_pred_5 = _3528 * _3373.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3610 = frontier_phi_83_pred;
                            _3609 = frontier_phi_83_pred_1;
                            _3608 = frontier_phi_83_pred_2;
                            _3607 = frontier_phi_83_pred_3;
                            _3606 = frontier_phi_83_pred_4;
                            _3611 = frontier_phi_83_pred_5;
                            _3315 = _3609 + _3328;
                            _3316 = _3610 + _3329;
                            _3317 = _3611 + _3330;
                            _3312 = _3606 + _3325;
                            _3313 = _3607 + _3326;
                            _3314 = _3608 + _3327;
                            if (_3332 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3332;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3317;
                        frontier_phi_77_pred_1 = _3316;
                        frontier_phi_77_pred_2 = _3315;
                        frontier_phi_77_pred_3 = _3314;
                        frontier_phi_77_pred_4 = _3313;
                        frontier_phi_77_pred_5 = _3312;
                    }
                    _2954 = frontier_phi_77_pred;
                    _2952 = frontier_phi_77_pred_1;
                    _2950 = frontier_phi_77_pred_2;
                    _2948 = frontier_phi_77_pred_3;
                    _2946 = frontier_phi_77_pred_4;
                    _2944 = frontier_phi_77_pred_5;
                    uint _3110 = _3109 + 1u;
                    if (_3110 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3103 = _2944;
                        _3104 = _2946;
                        _3105 = _2948;
                        _3106 = _2950;
                        _3107 = _2952;
                        _3108 = _2954;
                        _3109 = _3110;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2948;
                frontier_phi_58_59_ladder_1 = _2954;
                frontier_phi_58_59_ladder_2 = _2952;
                frontier_phi_58_59_ladder_3 = _2950;
                frontier_phi_58_59_ladder_4 = _2946;
                frontier_phi_58_59_ladder_5 = _2944;
            }
            else
            {
                frontier_phi_58_59_ladder = _2826;
                frontier_phi_58_59_ladder_1 = _2832;
                frontier_phi_58_59_ladder_2 = _2830;
                frontier_phi_58_59_ladder_3 = _2828;
                frontier_phi_58_59_ladder_4 = _2824;
                frontier_phi_58_59_ladder_5 = _2822;
            }
            _2943 = frontier_phi_58_59_ladder_5;
            _2945 = frontier_phi_58_59_ladder_4;
            _2947 = frontier_phi_58_59_ladder;
            _2949 = frontier_phi_58_59_ladder_3;
            _2951 = frontier_phi_58_59_ladder_2;
            _2953 = frontier_phi_58_59_ladder_1;
        }
        float _2958 = isnan(1.0) ? _971 : (isnan(_971) ? 1.0 : min(_971, 1.0));
        _2734 = (_2958 * _2949) + _2170;
        _2736 = (_2958 * _2951) + _2172;
        _2738 = (_2958 * _2953) + _2174;
        _2740 = ((_2943 * _955) * _2958) + _2515;
        _2742 = ((_2945 * _957) * _2958) + _2517;
        _2744 = ((_2947 * _958) * _2958) + _2519;
    }
    else
    {
        _2734 = _2170;
        _2736 = _2172;
        _2738 = _2174;
        _2740 = _2515;
        _2742 = _2517;
        _2744 = _2519;
    }
    float _4738 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _4749 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4760 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _2761 = ((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2734 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _971))) + ((_2740 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1810)) * cbPerFrame._m0[3u].x);
    float _2762 = ((isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2736 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _971))) + ((_2742 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1810)) * cbPerFrame._m0[3u].x);
    float _2763 = ((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2738 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _971))) + ((_2744 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1810)) * cbPerFrame._m0[3u].x);
    uint _2764 = _257 + 6u;
    float _2772 = _893 / cbSceneParam._m0[86u].x;
    float _2773 = _894 / cbSceneParam._m0[86u].y;
    vec4 _2787 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2772, _2773, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2789 = _2787.x;
    float _2790 = _2787.y;
    float _2791 = _2787.z;
    float _2792 = _2787.w;
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _2847 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _2848 = _2847 / _816;
        float _2859 = _2848 * _866;
        float _2860 = _867 * _2848;
        float _2861 = (-0.0) - _2860;
        float _2863 = _2848 * _868;
        float _2865 = (cbSceneParam._m0[77u].w * _2861) / _2847;
        float _2866 = _2865 + cbSceneParam._m0[79u].w;
        float _2867 = cbSceneParam._m0[79u].w - _2860;
        float _2873 = sqrt(((_2859 * _2859) + (_2860 * _2860)) + (_2863 * _2863));
        float _2876 = (1.0 - (cbSceneParam._m0[77u].w / _2847)) * _2873;
        float _2881 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2883 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3060;
        if (abs((_2861 - _2865) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3060 = ((((_2866 > 0.0) ? exp2(_2881 * _2866) : (2.0 - exp2(_2883 * _2866))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2876;
        }
        else
        {
            float _3004 = 1.0 / cbSceneParam._m0[80u].x;
            float _3005 = isnan(_2867) ? _2866 : (isnan(_2866) ? _2867 : max(_2866, _2867));
            float _3006 = isnan(_2867) ? _2866 : (isnan(_2866) ? _2867 : min(_2866, _2867));
            float _3015 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : min(_3005, 0.0));
            float _3016 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : min(_3006, 0.0));
            _3060 = ((abs(_2873 / _2861) * cbSceneParam._m0[80u].y) * ((((_3015 - _3016) * 2.0) - ((exp2(_2881 * (isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0)))) - exp2(_2881 * (isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))))) * _3004)) - ((exp2(_2883 * _3015) - exp2(_2883 * _3016)) * _3004))) + (_2876 * cbSceneParam._m0[80u].z);
        }
        vec4 _3062 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2772, _2773, 1.0), 0.0);
        float _3071 = exp2((_3060 * (-1.44269502162933349609375)) * (1.0 - _3062.w));
        float _3072 = log2(_3071);
        float _3088 = log2(_2792);
        _2885 = (exp2(_3088 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3072 * cbSceneParam._m0[78u].x)) * _3062.x) / cbSceneParam._m0[78u].x)) + _2789;
        _2887 = (exp2(_3088 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3072 * cbSceneParam._m0[78u].y)) * _3062.y) / cbSceneParam._m0[78u].y)) + _2790;
        _2889 = (exp2(_3088 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3072 * cbSceneParam._m0[78u].z)) * _3062.z) / cbSceneParam._m0[78u].z)) + _2791;
        _2891 = _3071 * _2792;
    }
    else
    {
        _2885 = _2789;
        _2887 = _2790;
        _2889 = _2791;
        _2891 = _2792;
    }
    bool _3098;
    vec4 _2901;
    vec4 _2923;
    float _2925;
    float _2929;
    float _2930;
    float _2931;
    float _2932;
    bool _2942;
    for (;;)
    {
        _2901 = cbMatDynParam._m0[0u];
        float _2903 = roundEven(_2901.y);
        bool _2904 = _2903 == 3.0;
        float _2905 = log2(_2891);
        float _2912 = exp2(_2905 * cbSceneParam._m0[78u].x) * _2761;
        float _2913 = exp2(_2905 * cbSceneParam._m0[78u].y) * _2762;
        float _2914 = exp2(_2905 * cbSceneParam._m0[78u].z) * _2763;
        float _2921 = _882 + (-0.5);
        _2923 = cbMtdParam._m0[1u];
        _2925 = _2923.y * _2921;
        float _2928 = (_2903 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2929 = _2928 * (_2904 ? _2912 : (_2912 + (cbSceneParam._m0[72u].w * _2885)));
        _2930 = _2928 * (_2904 ? _2913 : (_2913 + (cbSceneParam._m0[72u].w * _2887)));
        _2931 = _2928 * (_2904 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2889)));
        _2932 = _2921 * 0.999000012874603271484375;
        _2942 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2942)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2932) < 0.5)
            {
                _3098 = true;
                break;
            }
        }
        uint _3039 = _931 + uint(_2901.w);
        if ((cbInstanceData._m0[_3039].w < 1.0) && ((cbInstanceData._m0[_3039].w + _2932) < 0.5))
        {
            _3098 = true;
            break;
        }
        if ((_2925 + 1.0) < _2923.x)
        {
            _3098 = true;
            break;
        }
        _3098 = false;
        break;
    }
    float _3303;
    if (_3098)
    {
        discard_state = true;
        _3303 = 0.0;
    }
    else
    {
        _3303 = cbInstanceData._m0[_2764].w;
    }
    SV_Target.x = _2929;
    SV_Target.y = _2930;
    SV_Target.z = _2931;
    SV_Target.w = _3303;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2764].w;
    discard_exit();
}


