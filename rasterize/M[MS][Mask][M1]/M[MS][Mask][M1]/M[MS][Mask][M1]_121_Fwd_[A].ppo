#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1493;
float _3871;
float _3872;
float _3873;
float _3874;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _235 = _234 * _226;
    float _236 = _234 * _227;
    float _237 = _234 * _228;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _395 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _412 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _342.x) * 2.0) - ((((_383 - _395) * cbMtdParam._m0[23u].w) + _395) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3883 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _420 = (_413 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _421 = (_413 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _422 = (_413 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _461 = _459.x;
    float _471 = dot(vec4(_461, _459.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _485 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _342.y) * 2.0) - ((((_461 - _471) * cbMtdParam._m0[23u].w) + _471) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3894 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _493 = (_486 * ((_439.x * cbMtdParam._m0[13u].x) - _420)) + _420;
    float _494 = (_486 * ((_439.y * cbMtdParam._m0[13u].y) - _421)) + _421;
    float _495 = (_486 * ((_439.z * cbMtdParam._m0[13u].z) - _422)) + _422;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _274) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _275) + cbTextureTilingScale._m0[24u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _533 = _531.x;
    float _543 = dot(vec4(_533, _531.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _555 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _342.z) * 2.0) - ((((_533 - _543) * cbMtdParam._m0[23u].w) + _543) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3905 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _563 = (_556 * ((_514.x * cbMtdParam._m0[14u].x) - _493)) + _493;
    float _564 = (_556 * ((_514.y * cbMtdParam._m0[14u].y) - _494)) + _494;
    float _565 = (_556 * ((_514.z * cbMtdParam._m0[14u].z) - _495)) + _495;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _602 = _600.x;
    float _603 = _600.y;
    float _604 = _600.z;
    float _611 = ((_583.x - _602) * _413) + _602;
    float _612 = ((_583.y - _603) * _413) + _603;
    float _613 = ((_583.z - _604) * _413) + _604;
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _636 = ((_625.x - _611) * _486) + _611;
    float _637 = ((_625.y - _612) * _486) + _612;
    float _638 = ((_625.z - _613) * _486) + _613;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _274) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _275) + cbTextureTilingScale._m0[23u].w));
    float _663 = ((_650.z - _638) * _556) + _638;
    float _666 = ((((_650.x - _636) * _556) + _636) * 2.0) + (-1.0);
    float _668 = ((((_650.y - _637) * _556) + _637) * 2.0) + (-1.0);
    float _669 = dot(vec2(_666, _668), vec2(_666, _668));
    float _3916 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _674 = sqrt(1.0 - (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))));
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _700 = (((_688.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _666;
    float _701 = (((_688.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _668;
    float _704 = fma(_674, _242, fma(_701, _249, _700 * _235));
    float _707 = fma(_674, _243, fma(_701, _250, _700 * _236));
    float _710 = fma(_674, _244, fma(_701, _251, _700 * _237));
    float _714 = inversesqrt(dot(vec3(_704, _707, _710), vec3(_704, _707, _710)));
    vec4 _741 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _743 = _741.x;
    float _744 = 1.0 - _743;
    float _752 = (cbMtdParam._m0[19u].x + dot(vec4(_714 * _704, _714 * _707, _714 * _710, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_743 - _744) * cbMtdParam._m0[24u].z) + _744) * cbMtdParam._m0[21u].z);
    float _3927 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _753 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _760 = (_753 * (cbMtdParam._m0[17u].x - _563)) + _563;
    float _761 = (_753 * (cbMtdParam._m0[17u].y - _564)) + _564;
    float _762 = (_753 * (cbMtdParam._m0[17u].z - _565)) + _565;
    vec4 _788 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _790 = _788.x;
    float _808 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _790) * _413) + _790;
    float _825 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _808) * _486) + _808;
    float _843 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _274) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _275) + cbTextureTilingScale._m0[10u].w)).x - _825) * _556) + _825;
    float _847 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _843) * cbMtdParam._m0[19u].z) + _843;
    float _849 = _847 - (_847 * _753);
    float _853 = (cbMtdParam._m0[19u].w * (_688.z - _663)) + _663;
    vec4 _866 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _873 = (_866.x * 2.0) + (-1.0);
    float _874 = (_866.y * 2.0) + (-1.0);
    float _875 = dot(vec2(_873, _874), vec2(_873, _874));
    float _3938 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _883 = ((_866.z - _853) * _753) + _853;
    float _893 = ((sqrt(1.0 - (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) - _674) * _753) + _674;
    float _896 = (((_873 - _700) * _753) + _700) + (cbMtdParam._m0[21u].x * _700);
    float _897 = (((_874 - _701) * _753) + _701) + (cbMtdParam._m0[21u].x * _701);
    float _899 = cbMtdParam._m0[22u].x + _688.w;
    float _902 = fma(_893, _242, fma(_897, _249, _896 * _235));
    float _905 = fma(_893, _243, fma(_897, _250, _896 * _236));
    float _908 = fma(_893, _244, fma(_897, _251, _896 * _237));
    float _912 = inversesqrt(dot(vec3(_902, _905, _908), vec3(_902, _905, _908)));
    float _913 = _912 * _902;
    float _914 = _912 * _905;
    float _915 = _912 * _908;
    float _3949 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _916 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _3971 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _3982 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _3993 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4004 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _921 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _935 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _985 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _975);
    float _986 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _975);
    float _987 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _975);
    float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
    float _992 = _985 * _991;
    float _993 = _986 * _991;
    float _994 = _987 * _991;
    vec4 _999 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1001 = _999.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1173 = sqrt(((_985 * _985) + (_986 * _986)) + (_987 * _987));
        float _1179 = (cbMatDynParam._m0[5u].x * _1173) + cbMatDynParam._m0[5u].y;
        float _4015 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1184 = (cbMatDynParam._m0[5u].z * _1173) + cbMatDynParam._m0[5u].w;
        float _4026 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) - _1180)) + _1180) < ((_1001 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1012 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1013 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1031 = fma(_915, cbSceneParam._m0[5u].z, fma(_914, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _913));
    float _1034 = fma(_915, cbSceneParam._m0[6u].z, fma(_914, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _913));
    float _1037 = fma(_915, cbSceneParam._m0[7u].z, fma(_914, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _913));
    uint _1050 = _254 + 9u;
    uint _1051 = _1050 + uint(cbMatDynParam._m0[0u].w);
    float _1057 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * cbInstanceData._m0[_1051].x;
    float _1058 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) * cbInstanceData._m0[_1051].y;
    float _1059 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_1051].z;
    float _4037 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1060 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _1063 = 1.0 - _921;
    float _1064 = _1060 * _1063;
    float _1065 = _1061 * _1063;
    float _1066 = _1062 * _1063;
    float _1071 = (_1060 + (-0.039999999105930328369140625)) * _921;
    float _1072 = (_1061 + (-0.039999999105930328369140625)) * _921;
    float _1073 = (_1062 + (-0.039999999105930328369140625)) * _921;
    float _1074 = _1071 + 0.039999999105930328369140625;
    float _1076 = _1072 + 0.039999999105930328369140625;
    float _1077 = _1073 + 0.039999999105930328369140625;
    vec4 _1086 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1012, cbSceneParam._m0[86u].y * _1013));
    float _1090 = ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * TEXCOORD_5.w) * _1086.x;
    float _1091 = dot(vec3(_913, _914, _915), vec3(_992, _993, _994));
    float _1094 = _1091 * 2.0;
    float _1098 = (_1094 * _913) - _992;
    float _1099 = (_1094 * _914) - _993;
    float _1100 = (_1094 * _915) - _994;
    float _1104 = abs(dot(vec3(_992, _993, _994), vec3(_913, _914, _915)));
    float _4070 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1106 = sqrt(_916);
    float _1119 = exp2((_1106 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1106 * 3.0));
    float _1125 = (1.0 - _1119) * ((_1106 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1126 = _1119 * _1106;
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1158 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1162 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1492;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1217 = fma(_1162, cbModelParam._m0[26u].z, fma(_1158, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1154));
        float _1221 = fma(_1162, cbModelParam._m0[27u].z, fma(_1158, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1154));
        float _1225 = fma(_1162, cbModelParam._m0[28u].z, fma(_1158, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1154));
        float _1250 = _1154 + _913;
        float _1251 = _1158 + _914;
        float _1252 = _1162 + _915;
        float _1262 = fma(_1252, cbModelParam._m0[26u].z, fma(_1251, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1250)) - _1217;
        float _1263 = fma(_1252, cbModelParam._m0[27u].z, fma(_1251, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1250)) - _1221;
        float _1264 = fma(_1252, cbModelParam._m0[28u].z, fma(_1251, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1250)) - _1225;
        float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
        float _1281 = ((_1268 * _1262) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1217 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1268 * _1263) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1221 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1268 * _1264) / cbModelParam._m0[34u].z) + ((((((_1225 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        float _1320 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1286.x + (-0.5));
        float _1322 = _1320 * (_1286.y + (-0.5));
        float _1323 = _1320 * (_1286.z + (-0.5));
        float _1330 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1293.x + (-0.5));
        float _1332 = _1330 * (_1293.y + (-0.5));
        float _1333 = _1330 * (_1293.z + (-0.5));
        float _1340 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1300.x + (-0.5));
        float _1342 = _1340 * (_1300.y + (-0.5));
        float _1343 = _1340 * (_1300.z + (-0.5));
        float _1350 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1307.x + (-0.5));
        float _1352 = _1350 * (_1307.y + (-0.5));
        float _1353 = _1350 * (_1307.z + (-0.5));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = _1321 * 0.5;
        float _1358 = _1331 * 0.5;
        float _1359 = _1341 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1374 = (dot(vec3(_913, _914, _915), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1384 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4118 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1386 + 1.0))) + _1391) * _1354;
        float _1401 = _1322 * 0.5;
        float _1402 = _1332 * 0.5;
        float _1403 = _1342 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_913, _914, _915), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4151 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1428 + 1.0))) + _1433) * _1355;
        float _1443 = _1323 * 0.5;
        float _1444 = _1333 * 0.5;
        float _1445 = _1343 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_913, _914, _915), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4184 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1470 + 1.0))) + _1475) * _1356;
        _1492 = _1323;
        _1494 = _1322;
        _1495 = _1321;
        _1496 = _1333;
        _1497 = _1332;
        _1498 = _1331;
        _1499 = _1343;
        _1500 = _1342;
        _1501 = _1341;
        _1502 = _1356;
        _1503 = _1355;
        _1504 = _1354;
        _1505 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1506 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1493;
        _1494 = _1493;
        _1495 = _1493;
        _1496 = _1493;
        _1497 = _1493;
        _1498 = _1493;
        _1499 = _1493;
        _1500 = _1493;
        _1501 = _1493;
        _1502 = _1493;
        _1503 = _1493;
        _1504 = _1493;
        _1505 = 0.0;
        _1506 = 0.0;
        _1507 = 0.0;
    }
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1533 = fma(_1162, cbModelParam._m0[30u].z, fma(_1158, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154));
        float _1537 = fma(_1162, cbModelParam._m0[31u].z, fma(_1158, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154));
        float _1541 = fma(_1162, cbModelParam._m0[32u].z, fma(_1158, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154));
        float _1564 = _1154 + _913;
        float _1565 = _1158 + _914;
        float _1566 = _1162 + _915;
        float _1576 = fma(_1566, cbModelParam._m0[30u].z, fma(_1565, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1564)) - _1533;
        float _1577 = fma(_1566, cbModelParam._m0[31u].z, fma(_1565, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1564)) - _1537;
        float _1578 = fma(_1566, cbModelParam._m0[32u].z, fma(_1565, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1564)) - _1541;
        float _1582 = inversesqrt(dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578)));
        float _1595 = ((_1582 * _1576) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1533 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1596 = ((_1582 * _1577) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1537 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1597 = ((_1582 * _1578) / cbModelParam._m0[35u].z) + ((((((_1541 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1595, _1596, _1597), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1595, _1596, _1597), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1595, _1596, _1597), 0.0);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1595, _1596, _1597), 0.0);
        float _1632 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1599.x + (-0.5));
        float _1634 = _1632 * (_1599.y + (-0.5));
        float _1635 = _1632 * (_1599.z + (-0.5));
        float _1642 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1606.x + (-0.5));
        float _1644 = _1642 * (_1606.y + (-0.5));
        float _1645 = _1642 * (_1606.z + (-0.5));
        float _1652 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1653 = _1652 * (_1613.x + (-0.5));
        float _1654 = _1652 * (_1613.y + (-0.5));
        float _1655 = _1652 * (_1613.z + (-0.5));
        float _1662 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1663 = _1662 * (_1620.x + (-0.5));
        float _1664 = _1662 * (_1620.y + (-0.5));
        float _1665 = _1662 * (_1620.z + (-0.5));
        float _1666 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1667 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1668 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1669 = _1633 * 0.5;
        float _1670 = _1643 * 0.5;
        float _1671 = _1653 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_913, _914, _915), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1666 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4247 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1696 + 1.0))) + _1701) * _1666;
        float _1711 = _1634 * 0.5;
        float _1712 = _1644 * 0.5;
        float _1713 = _1654 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_913, _914, _915), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1667 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4280 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1738 + 1.0))) + _1743) * _1667;
        float _1753 = _1635 * 0.5;
        float _1754 = _1645 * 0.5;
        float _1755 = _1655 * 0.5;
        float _1756 = dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755));
        float _1761 = (_1756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1756);
        float _1769 = (dot(vec3(_913, _914, _915), vec3(_1761 * _1753, _1761 * _1754, _1761 * _1755)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1778 = sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755)) / (_1668 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1780 = _1779 * 2.0;
        float _1784 = (1.0 - _1779) / (_1779 + 1.0);
        float _4313 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1794 = ((((1.0 - _1785) * (_1780 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1780 + 1.0))) + _1785) * _1668;
        _1802 = _1635;
        _1803 = _1634;
        _1804 = _1633;
        _1805 = _1645;
        _1806 = _1644;
        _1807 = _1643;
        _1808 = _1655;
        _1809 = _1654;
        _1810 = _1653;
        _1811 = _1668;
        _1812 = _1667;
        _1813 = _1666;
        _1814 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
        _1815 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
        _1816 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)));
    }
    else
    {
        _1802 = _1493;
        _1803 = _1493;
        _1804 = _1493;
        _1805 = _1493;
        _1806 = _1493;
        _1807 = _1493;
        _1808 = _1493;
        _1809 = _1493;
        _1810 = _1493;
        _1811 = _1493;
        _1812 = _1493;
        _1813 = _1493;
        _1814 = 0.0;
        _1815 = 0.0;
        _1816 = 0.0;
    }
    float _1826 = (cbModelParam._m0[1u].x * (_1814 - _1505)) + _1505;
    float _1827 = (cbModelParam._m0[1u].x * (_1815 - _1506)) + _1506;
    float _1828 = (cbModelParam._m0[1u].x * (_1816 - _1507)) + _1507;
    float _1849 = fma(_1828, cbSceneParam._m0[89u].z, fma(_1827, cbSceneParam._m0[89u].y, _1826 * cbSceneParam._m0[89u].x));
    float _1852 = fma(_1828, cbSceneParam._m0[90u].z, fma(_1827, cbSceneParam._m0[90u].y, _1826 * cbSceneParam._m0[90u].x));
    float _1855 = fma(_1828, cbSceneParam._m0[91u].z, fma(_1827, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1826));
    float _1870 = _1098 * 0.5;
    float _1871 = _1099 * 0.5;
    float _1872 = _1100 * 0.5;
    float _1873 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1804, _1807, _1810, _1813));
    float _1876 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1803, _1806, _1809, _1812));
    float _1879 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1802, _1805, _1808, _1811));
    float _1913;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1886 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1492, _1496, _1499, _1502));
        float _1890 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1494, _1497, _1500, _1503));
        float _1894 = dot(vec4(_1870, _1871, _1872, 1.0), vec4(_1495, _1498, _1501, _1504));
        float _1901 = dot(vec4(cbModelParam._m0[39u]), vec4(_1870, _1871, _1872, 1.0));
        _1913 = dot(vec3(isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)), isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1901) ? 0.0 : (isnan(0.0) ? _1901 : max(0.0, _1901))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1913 = 1.0;
    }
    float _1924;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1915 = dot(vec4(cbModelParam._m0[40u]), vec4(_1870, _1871, _1872, 1.0));
        _1924 = dot(vec3(isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1915) ? 0.0 : (isnan(0.0) ? _1915 : max(0.0, _1915))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1924 = 1.0;
    }
    float _1928 = (_1924 * cbModelParam._m0[1u].x) + (_1913 * (1.0 - cbModelParam._m0[1u].x));
    float _1938 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _916);
    float _1939 = isnan(_1938) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1938 : min(cbModelParam._m0[25u].z, _1938));
    float _2019;
    float _2021;
    float _2023;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1986 = fma(_1162, cbModelParam._m0[13u].z, fma(_1158, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1154)) + cbModelParam._m0[13u].w;
        float _1990 = fma(_1162, cbModelParam._m0[14u].z, fma(_1158, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1154)) + cbModelParam._m0[14u].w;
        float _1994 = fma(_1162, cbModelParam._m0[15u].z, fma(_1158, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1154)) + cbModelParam._m0[15u].w;
        float _1997 = fma(_1100, cbModelParam._m0[13u].z, fma(_1099, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1098));
        float _2000 = fma(_1100, cbModelParam._m0[14u].z, fma(_1099, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1098));
        float _2003 = fma(_1100, cbModelParam._m0[15u].z, fma(_1099, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1098));
        float _2031;
        if (_1997 > 0.0)
        {
            _2031 = abs((1.0 - _1986) / _1997);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1986 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2031 = frontier_phi_17_15_ladder;
        }
        float _2234;
        if (_2000 > 0.0)
        {
            _2234 = abs((1.0 - _1990) / _2000);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1990 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2234 = frontier_phi_26_22_ladder;
        }
        float _2488;
        if (_2003 > 0.0)
        {
            _2488 = abs((1.0 - _1994) / _2003);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1994 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2488 = frontier_phi_38_33_ladder;
        }
        float _2490 = isnan(_2234) ? _2031 : (isnan(_2031) ? _2234 : min(_2031, _2234));
        float _2491 = isnan(_2488) ? _2490 : (isnan(_2490) ? _2488 : min(_2490, _2488));
        float _2495 = (_2491 * _1997) + _1986;
        float _2496 = (_2491 * _2000) + _1990;
        float _2497 = (_2491 * _2003) + _1994;
        float _2498 = _2491 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2498;
        float _2502 = _2498 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 > _2502) || ((_2496 < _2500) || ((_2495 < _2500) || (_2495 > _2502))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2625 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2497, cbModelParam._m0[9u].z, fma(_2496, cbModelParam._m0[9u].y, _2495 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2497, cbModelParam._m0[10u].z, fma(_2496, cbModelParam._m0[10u].y, _2495 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2497, cbModelParam._m0[11u].z, fma(_2496, cbModelParam._m0[11u].y, _2495 * cbModelParam._m0[11u].x))), _1939);
            frontier_phi_16_38_ladder = _2625.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2625.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2625.x * cbModelParam._m0[1u].y;
        }
        _2019 = frontier_phi_16_38_ladder_2;
        _2021 = frontier_phi_16_38_ladder_1;
        _2023 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2007 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1098, _1099, _1100), _1939);
        _2019 = _2007.x * cbModelParam._m0[1u].y;
        _2021 = _2007.y * cbModelParam._m0[1u].y;
        _2023 = _2007.z * cbModelParam._m0[1u].y;
    }
    float _2027 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _916);
    float _2028 = isnan(_2027) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2027 : min(cbModelParam._m0[25u].w, _2027));
    float _2118;
    float _2120;
    float _2122;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2082 = fma(_1162, cbModelParam._m0[21u].z, fma(_1158, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1154)) + cbModelParam._m0[21u].w;
        float _2086 = fma(_1162, cbModelParam._m0[22u].z, fma(_1158, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1154)) + cbModelParam._m0[22u].w;
        float _2090 = fma(_1162, cbModelParam._m0[23u].z, fma(_1158, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1154)) + cbModelParam._m0[23u].w;
        float _2093 = fma(_1100, cbModelParam._m0[21u].z, fma(_1099, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1098));
        float _2096 = fma(_1100, cbModelParam._m0[22u].z, fma(_1099, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1098));
        float _2099 = fma(_1100, cbModelParam._m0[23u].z, fma(_1099, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1098));
        float _2239;
        if (_2093 > 0.0)
        {
            _2239 = abs((1.0 - _2082) / _2093);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2082 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2239 = frontier_phi_28_24_ladder;
        }
        float _2515;
        if (_2096 > 0.0)
        {
            _2515 = abs((1.0 - _2086) / _2096);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2096 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2086 + 1.0) / _2096);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2515 = frontier_phi_40_35_ladder;
        }
        float _2728;
        if (_2099 > 0.0)
        {
            _2728 = abs((1.0 - _2090) / _2099);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2090 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2728 = frontier_phi_49_46_ladder;
        }
        float _2730 = isnan(_2515) ? _2239 : (isnan(_2239) ? _2515 : min(_2239, _2515));
        float _2731 = isnan(_2728) ? _2730 : (isnan(_2730) ? _2728 : min(_2730, _2728));
        float _2735 = (_2731 * _2093) + _2082;
        float _2736 = (_2731 * _2096) + _2086;
        float _2737 = (_2731 * _2099) + _2090;
        float _2738 = _2731 * 9.9999997473787516355514526367188e-05;
        float _2739 = (-1.0) - _2738;
        float _2741 = _2738 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2737 > _2741) || ((_2737 < _2739) || ((_2736 > _2741) || ((_2736 < _2739) || ((_2735 < _2739) || (_2735 > _2741))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2936 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2737, cbModelParam._m0[17u].z, fma(_2736, cbModelParam._m0[17u].y, _2735 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2737, cbModelParam._m0[18u].z, fma(_2736, cbModelParam._m0[18u].y, _2735 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2737, cbModelParam._m0[19u].z, fma(_2736, cbModelParam._m0[19u].y, _2735 * cbModelParam._m0[19u].x))), _2028);
            frontier_phi_25_49_ladder = _2936.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2936.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2936.x * cbModelParam._m0[1u].z;
        }
        _2118 = frontier_phi_25_49_ladder_2;
        _2120 = frontier_phi_25_49_ladder_1;
        _2122 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2102 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1098, _1099, _1100), _2028);
        _2118 = _2102.x * cbModelParam._m0[1u].z;
        _2120 = _2102.y * cbModelParam._m0[1u].z;
        _2122 = _2102.z * cbModelParam._m0[1u].z;
    }
    float _2135 = (((_1125 * _1074) + _1126) * _1090) * ((cbModelParam._m0[1u].w * (_2118 - _2019)) + _2019);
    float _2137 = (((_1125 * _1076) + _1126) * _1090) * ((cbModelParam._m0[1u].w * (_2120 - _2021)) + _2021);
    float _2139 = (((_1125 * _1077) + _1126) * _1090) * ((cbModelParam._m0[1u].w * (_2122 - _2023)) + _2023);
    float _2142 = fma(_2139, cbSceneParam._m0[89u].z, fma(_2137, cbSceneParam._m0[89u].y, _2135 * cbSceneParam._m0[89u].x));
    float _2145 = fma(_2139, cbSceneParam._m0[90u].z, fma(_2137, cbSceneParam._m0[90u].y, _2135 * cbSceneParam._m0[90u].x));
    float _2148 = fma(_2139, cbSceneParam._m0[91u].z, fma(_2137, cbSceneParam._m0[91u].y, _2135 * cbSceneParam._m0[91u].x));
    uvec4 _2158 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2160 = _2158.x * 14u;
    uint _2161 = _2160 + 13u;
    float _2168 = _1090 + (-1.0);
    float _2173 = (cbLight._m0[_2161].x * _2168) + 1.0;
    float _2174 = (cbLight._m0[_2161].y * _2168) + 1.0;
    float _2175 = (cbLight._m0[_2161].z * _2168) + 1.0;
    float _2176 = (cbLight._m0[_2161].w * _2168) + 1.0;
    uint _2177 = _2160 + 5u;
    float _2183 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
    uint _2187 = _2160 + 4u;
    float _2193 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
    uint _2197 = _2160 | 1u;
    float _2208 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_913, _914, _915));
    float _2211 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_913, _914, _915));
    float _4449 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _4460 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2216 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * 0.3183098733425140380859375;
    float _2218 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * 0.3183098733425140380859375;
    float _2225 = ((cbLight._m0[_2177].x * _2183) * _2218) + ((cbLight._m0[_2187].x * _2193) * _2216);
    float _2226 = ((_2183 * cbLight._m0[_2177].y) * _2218) + ((_2193 * cbLight._m0[_2187].y) * _2216);
    float _2227 = ((_2183 * cbLight._m0[_2177].z) * _2218) + ((_2193 * cbLight._m0[_2187].z) * _2216);
    uvec4 _2231 = floatBitsToUint(cbLight._m0[_2160 + 12u]);
    bool _2233 = _2231.x == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2233)
    {
        _2244 = _2225;
        _2246 = _2226;
        _2248 = _2227;
    }
    else
    {
        uint _2252 = _2160 + 6u;
        float _2268 = (dot(vec3(cbLight._m0[_2160 + 2u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2269 = _2268 * _2268;
        float _4471 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2270 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2271 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2244 = (((cbLight._m0[_2252].x * 0.3183098733425140380859375) * _2270) * _2271) + _2225;
        _2246 = (((cbLight._m0[_2252].y * 0.3183098733425140380859375) * _2270) * _2271) + _2226;
        _2248 = (((cbLight._m0[_2252].z * 0.3183098733425140380859375) * _2270) * _2271) + _2227;
    }
    bool _2251 = _2231.y == 0u;
    float _2289;
    float _2291;
    float _2293;
    if (_2251)
    {
        _2289 = _2244;
        _2291 = _2246;
        _2293 = _2248;
    }
    else
    {
        uint _2459 = _2160 + 7u;
        float _2475 = (dot(vec3(cbLight._m0[_2160 + 3u].xyz), vec3(_913, _914, _915)) * 0.5) + 0.5;
        float _2476 = _2475 * _2475;
        float _4487 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2477 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2478 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2289 = (((cbLight._m0[_2459].x * 0.3183098733425140380859375) * _2477) * _2478) + _2244;
        _2291 = (((cbLight._m0[_2459].y * 0.3183098733425140380859375) * _2477) * _2478) + _2246;
        _2293 = (((cbLight._m0[_2459].z * 0.3183098733425140380859375) * _2477) * _2478) + _2248;
    }
    uint _2296 = _2160 + 8u;
    float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _916) * 0.949999988079071044921875);
    float _2310 = _2309 * _2309;
    float _2311 = cbLight._m0[_2160].x + _992;
    float _2312 = cbLight._m0[_2160].y + _993;
    float _2313 = cbLight._m0[_2160].z + _994;
    float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
    float _2318 = _2317 * _2311;
    float _2319 = _2317 * _2312;
    float _2320 = _2317 * _2313;
    float _2321 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2160].xyz));
    float _4503 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _4514 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _2325 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2326 = dot(vec3(_913, _914, _915), vec3(_2318, _2319, _2320));
    float _4525 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2330 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2318, _2319, _2320));
    float _4536 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2334 = _2310 * _2310;
    float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
    float _2346 = exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0);
    float _2347 = 0.959999978542327880859375 - _1071;
    float _2349 = 0.959999978542327880859375 - _1072;
    float _2350 = 0.959999978542327880859375 - _1073;
    float _2357 = 1.0 - _2310;
    float _2368 = (0.5 / (((_2325 * ((_2324 * _2357) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2357) + _2310) * _2324))) * _2324;
    float _4547 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
    uint _2381 = _2160 + 9u;
    float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _916) * 0.949999988079071044921875);
    float _2393 = _2392 * _2392;
    float _2394 = cbLight._m0[_2197].x + _992;
    float _2395 = cbLight._m0[_2197].y + _993;
    float _2396 = cbLight._m0[_2197].z + _994;
    float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
    float _2401 = _2400 * _2394;
    float _2402 = _2400 * _2395;
    float _2403 = _2400 * _2396;
    float _2404 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2197].xyz));
    float _4558 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2407 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2408 = dot(vec3(_913, _914, _915), vec3(_2401, _2402, _2403));
    float _4569 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2412 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2401, _2402, _2403));
    float _4580 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2416 = _2393 * _2393;
    float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
    float _2427 = exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0);
    float _2434 = 1.0 - _2393;
    float _2444 = (0.5 / (((_2325 * ((_2407 * _2434) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2434) + _2393) * _2407))) * _2407;
    float _4591 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2446 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
    float _2456 = (((((_2427 * _2347) + _1074) * cbLight._m0[_2381].x) * _2446) * _2183) + (((((_2346 * _2347) + _1074) * cbLight._m0[_2296].x) * _2370) * _2193);
    float _2457 = (((((_2427 * _2349) + _1076) * cbLight._m0[_2381].y) * _2446) * _2183) + (((((_2346 * _2349) + _1076) * cbLight._m0[_2296].y) * _2370) * _2193);
    float _2458 = (((((_2427 * _2350) + _1077) * cbLight._m0[_2381].z) * _2446) * _2183) + (((((_2346 * _2350) + _1077) * cbLight._m0[_2296].z) * _2370) * _2193);
    float _2520;
    float _2522;
    float _2524;
    if (_2233)
    {
        _2520 = _2456;
        _2522 = _2457;
        _2524 = _2458;
    }
    else
    {
        uint _2526 = _2160 + 2u;
        uint _2530 = _2160 + 10u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _916) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _992;
        float _2547 = cbLight._m0[_2526].y + _993;
        float _2548 = cbLight._m0[_2526].z + _994;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2526].xyz));
        float _4602 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2560 = dot(vec3(_913, _914, _915), vec3(_2553, _2554, _2555));
        float _4613 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4624 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2579 = exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0);
        float _2586 = 1.0 - _2545;
        float _2596 = (0.5 / (((_2325 * ((_2559 * _2586) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2586) + _2545) * _2559))) * _2559;
        float _4635 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2598 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2599 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2520 = (((((_2579 * _2347) + _1074) * cbLight._m0[_2530].x) * _2598) * _2599) + _2456;
        _2522 = (((((_2579 * _2349) + _1076) * cbLight._m0[_2530].y) * _2598) * _2599) + _2457;
        _2524 = (((((_2579 * _2350) + _1077) * cbLight._m0[_2530].z) * _2598) * _2599) + _2458;
    }
    float _2634;
    float _2636;
    float _2638;
    if (_2251)
    {
        _2634 = _2520;
        _2636 = _2522;
        _2638 = _2524;
    }
    else
    {
        uint _2645 = _2160 + 3u;
        uint _2649 = _2160 + 11u;
        float _2663 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2645].w)) * _916) * 0.949999988079071044921875);
        float _2664 = _2663 * _2663;
        float _2665 = cbLight._m0[_2645].x + _992;
        float _2666 = cbLight._m0[_2645].y + _993;
        float _2667 = cbLight._m0[_2645].z + _994;
        float _2671 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
        float _2672 = _2671 * _2665;
        float _2673 = _2671 * _2666;
        float _2674 = _2671 * _2667;
        float _2675 = dot(vec3(_913, _914, _915), vec3(cbLight._m0[_2645].xyz));
        float _4651 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2679 = dot(vec3(_913, _914, _915), vec3(_2672, _2673, _2674));
        float _4662 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2683 = dot(vec3(cbLight._m0[_2645].xyz), vec3(_2672, _2673, _2674));
        float _4673 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2687 = _2664 * _2664;
        float _2691 = ((_2682 * _2682) * (_2687 + (-1.0))) + 1.0;
        float _2698 = exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0);
        float _2705 = 1.0 - _2664;
        float _2715 = (0.5 / (((_2325 * ((_2678 * _2705) + _2664)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2705) + _2664) * _2678))) * _2678;
        float _4684 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2717 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2687 / ((_2691 * _2691) * 3.141590118408203125));
        float _2718 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2634 = (((((_2698 * _2347) + _1074) * cbLight._m0[_2649].x) * _2717) * _2718) + _2520;
        _2636 = (((((_2698 * _2349) + _1076) * cbLight._m0[_2649].y) * _2717) * _2718) + _2522;
        _2638 = (((((_2698 * _2350) + _1077) * cbLight._m0[_2649].z) * _2717) * _2718) + _2524;
    }
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    if (_2158.y == 0u)
    {
        float _2793 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2794 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2793;
        float _2795 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2793;
        float _2796 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2793;
        uvec4 _2808 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2809 = _2808.x;
        uint _2820 = uint((float(_2808.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1013) / _2809))) + floor(float(uint(cbSceneParam._m0[85u].x * _1012) / _2809)));
        float _2830 = (log2(_2796 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2831 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        uint _2834 = uint(isnan(14.0) ? _2831 : (isnan(_2831) ? 14.0 : min(_2831, 14.0)));
        uvec4 _2839 = texelFetch(g_lightClusterGridBuffer, int(((_2834 << 2u) + (_2820 << 6u)) >> 2u));
        uint _2840 = _2839.x;
        uint _2841 = _2808.z;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        if (((((1u << ((_2841 >> 4u) & 15u)) + 4294967295u) & _2840) == 0u) || ((_2841 & 240u) == 0u))
        {
            _2941 = 0.0;
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
        }
        else
        {
            float _2942;
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            uint _3100 = 0u;
            uint _3109;
            bool _3110;
            for (;;)
            {
                _3109 = texelFetch(g_lightClassification, int((((_2834 << 5u) + (_2820 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                _3110 = _3109 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3110)
                {
                    frontier_phi_66_pred = _3094;
                    frontier_phi_66_pred_1 = _3099;
                    frontier_phi_66_pred_2 = _3098;
                    frontier_phi_66_pred_3 = _3097;
                    frontier_phi_66_pred_4 = _3096;
                    frontier_phi_66_pred_5 = _3095;
                }
                else
                {
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    uint _3245;
                    _3239 = _3094;
                    _3240 = _3095;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3109;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    for (;;)
                    {
                        uint _3249 = uint(findLSB(_3245)) + (_3100 << 5u);
                        uint _3246 = (_3245 + 4294967295u) & _3245;
                        uint _3251 = _3249 * 48u;
                        vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 3u)).x));
                        uint _3271 = (_3249 * 48u) + 4u;
                        vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 3u)).x));
                        uint _3290 = (_3249 * 48u) + 8u;
                        vec3 _3301 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3290)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 2u)).x));
                        float _3305 = _3265.x - _2794;
                        float _3306 = _3265.y - _2795;
                        float _3307 = _3265.z - _2796;
                        float _3308 = dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307));
                        float _3311 = inversesqrt(_3308);
                        float _3312 = _3311 * _3305;
                        float _3313 = _3311 * _3306;
                        float _3314 = _3311 * _3307;
                        float _3315 = dot(vec3(_1031, _1034, _1037), vec3(_3312, _3313, _3314));
                        float _3320 = 1.0 - (_3308 * _3265.w);
                        float _4710 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3321 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3322 = sqrt(_3308) * _3284.w;
                        float _3325 = 1.39999997615814208984375 / (_3322 + 1.39999997615814208984375);
                        float _3326 = _3325 * _3325;
                        float _3329 = ((1.0 - _3326) * _3315) + _3326;
                        float _3332 = _3322 * _3322;
                        float _3336 = ((isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))) * _3321) / ((_3332 * 0.699999988079071044921875) + 1.0);
                        float _3340 = (-0.0) - _2794;
                        float _3341 = (-0.0) - _2795;
                        float _3342 = (-0.0) - _2796;
                        float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                        float _3347 = _3346 * _3340;
                        float _3348 = _3346 * _3341;
                        float _3349 = _3346 * _3342;
                        float _3357 = exp2(log2(1.0 / ((_3332 * 3.5) + 5.0)) * 0.25);
                        float _3358 = 1.0 - _1106;
                        float _3365 = sqrt(1.0 - ((1.0 - (_3358 * _3358)) * (1.0 - (_3357 * _3357))));
                        float _3366 = _3365 * _3365;
                        float _3367 = _3366 * _3366;
                        float _3368 = _3347 + _3312;
                        float _3369 = _3348 + _3313;
                        float _3370 = _3349 + _3314;
                        float _3374 = inversesqrt(dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370)));
                        float _3378 = dot(vec3(_1031, _1034, _1037), vec3(_3347, _3348, _3349));
                        float _4726 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3381 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3382 = dot(vec3(_1031, _1034, _1037), vec3(_3374 * _3368, _3374 * _3369, _3374 * _3370));
                        float _4737 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3385 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                        float _3389 = ((_3385 * _3385) * (_3367 + (-1.0))) + 1.0;
                        float _3390 = _3325 * _3366;
                        float _3391 = _3390 * _3390;
                        float _3394 = ((1.0 - _3391) * _3315) + _3391;
                        float _4748 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3395 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3396 = 1.0 - _3366;
                        float _3406 = (0.5 / (((_3395 * ((_3381 * _3396) + _3366)) + 9.9999999392252902907785028219223e-09) + (((_3395 * _3396) + _3366) * _3381))) * _3395;
                        float _4759 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3417 = (((_3367 * 3.1415927410125732421875) * (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) / ((_3389 * _3389) * ((_3332 * 2.1991131305694580078125) + 3.141590118408203125))) * _3321;
                        _3169 = (_3336 * _3284.x) + _3242;
                        _3170 = (_3336 * _3284.y) + _3243;
                        _3171 = (_3336 * _3284.z) + _3244;
                        _3166 = (_3417 * _3301.x) + _3239;
                        _3167 = (_3417 * _3301.y) + _3240;
                        _3168 = (_3417 * _3301.z) + _3241;
                        if (_3246 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3239 = _3166;
                            _3240 = _3167;
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3246;
                        }
                    }
                    frontier_phi_66_pred = _3166;
                    frontier_phi_66_pred_1 = _3171;
                    frontier_phi_66_pred_2 = _3170;
                    frontier_phi_66_pred_3 = _3169;
                    frontier_phi_66_pred_4 = _3168;
                    frontier_phi_66_pred_5 = _3167;
                }
                _2942 = frontier_phi_66_pred;
                _2952 = frontier_phi_66_pred_1;
                _2950 = frontier_phi_66_pred_2;
                _2948 = frontier_phi_66_pred_3;
                _2946 = frontier_phi_66_pred_4;
                _2944 = frontier_phi_66_pred_5;
                uint _3101 = _3100 + 1u;
                if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3094 = _2942;
                    _3095 = _2944;
                    _3096 = _2946;
                    _3097 = _2948;
                    _3098 = _2950;
                    _3099 = _2952;
                    _3100 = _3101;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2941 = _2942;
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
        }
        uvec4 _2955 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2956 = _2955.z;
        uint _2958 = (_2956 >> 8u) & 15u;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        if (((4294967295u << _2958) & _2840) == 0u)
        {
            _3062 = _2941;
            _3064 = _2943;
            _3066 = _2945;
            _3068 = _2947;
            _3070 = _2949;
            _3072 = _2951;
        }
        else
        {
            float _3087 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
            float _3088 = _3087 * _2794;
            float _3089 = _3087 * _2795;
            float _3090 = _3087 * _2796;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2958 < ((_2956 >> 12u) & 15u))
            {
                float _3063;
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3222 = _2941;
                float _3223 = _2943;
                float _3224 = _2945;
                float _3225 = _2947;
                float _3226 = _2949;
                float _3227 = _2951;
                uint _3228 = _2958;
                uint _3237;
                bool _3238;
                for (;;)
                {
                    _3237 = texelFetch(g_lightClassification, int((((_2834 << 5u) + (_2820 << 9u)) + (_3228 << 2u)) >> 2u)).x;
                    _3238 = _3237 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3238)
                    {
                        frontier_phi_77_pred = _3227;
                        frontier_phi_77_pred_1 = _3226;
                        frontier_phi_77_pred_2 = _3225;
                        frontier_phi_77_pred_3 = _3224;
                        frontier_phi_77_pred_4 = _3223;
                        frontier_phi_77_pred_5 = _3222;
                    }
                    else
                    {
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3444 = _3222;
                        float _3445 = _3223;
                        float _3446 = _3224;
                        float _3447 = _3225;
                        float _3448 = _3226;
                        float _3449 = _3227;
                        uint _3450 = _3237;
                        uint _3451;
                        vec4 _3476;
                        float _3477;
                        vec4 _3492;
                        vec3 _3504;
                        vec4 _3519;
                        vec4 _3534;
                        float _3580;
                        bool _3581;
                        for (;;)
                        {
                            uint _3461 = ((_3228 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3450));
                            _3451 = (_3450 + 4294967295u) & _3450;
                            uint _3463 = _3461 * 40u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            _3477 = _3476.w;
                            uint _3479 = (_3461 * 40u) + 4u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3461 * 40u) + 8u;
                            _3504 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x));
                            uint _3506 = (_3461 * 40u) + 16u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3521 = (_3461 * 40u) + 20u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3461 * 40u) + 24u;
                            vec4 _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3555 = (_3461 * 40u) + 28u;
                            vec4 _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            _3580 = fma(_2796, _3568.z, fma(_2795, _3568.y, _3568.x * _2794)) + _3568.w;
                            _3581 = !((fma(_2796, _3549.z, fma(_2795, _3549.y, _3549.x * _2794)) + _3549.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3581)
                            {
                                float _3608 = _3476.x - _2794;
                                float _3609 = _3476.y - _2795;
                                float _3610 = _3476.z - _2796;
                                float _3611 = dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610));
                                float _3614 = inversesqrt(_3611);
                                float _3615 = _3614 * _3608;
                                float _3616 = _3614 * _3609;
                                float _3617 = _3614 * _3610;
                                float _3621 = 1.0 - (_3611 / (_3477 * _3477));
                                float _4770 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3622 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3626 = sqrt(_3611) * _3492.w;
                                float _3628 = 1.39999997615814208984375 / (_3626 + 1.39999997615814208984375);
                                float _3629 = _3628 * _3628;
                                float _3632 = ((1.0 - _3629) * dot(vec3(_3615, _3616, _3617), vec3(_1031, _1034, _1037))) + _3629;
                                float _3635 = _3626 * _3626;
                                float _3639 = (fma(_2796, _3519.z, fma(_2795, _3519.y, _3519.x * _2794)) + _3519.w) / _3580;
                                float _3640 = (fma(_2796, _3534.z, fma(_2795, _3534.y, _3534.x * _2794)) + _3534.w) / _3580;
                                float _3644 = 1.0 - dot(vec2(_3639, _3640), vec2(_3639, _3640));
                                float _4786 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3646 = _3645 * (((isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0))) * _3622) / ((_3635 * 0.699999988079071044921875) + 1.0));
                                float _3658 = exp2(log2(1.0 / ((_3635 * 3.5) + 5.0)) * 0.25);
                                float _3659 = 1.0 - _1106;
                                float _3666 = sqrt(1.0 - ((1.0 - (_3659 * _3659)) * (1.0 - (_3658 * _3658))));
                                float _3667 = _3666 * _3666;
                                float _3668 = _3667 * _3667;
                                float _3669 = _3615 - _3088;
                                float _3670 = _3616 - _3089;
                                float _3671 = _3617 - _3090;
                                float _3675 = inversesqrt(dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671)));
                                float _3679 = dot(vec3(_1031, _1034, _1037), vec3((-0.0) - _3088, (-0.0) - _3089, (-0.0) - _3090));
                                float _4797 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3682 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3683 = dot(vec3(_1031, _1034, _1037), vec3(_3675 * _3669, _3675 * _3670, _3675 * _3671));
                                float _4808 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3686 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3690 = ((_3686 * _3686) * (_3668 + (-1.0))) + 1.0;
                                float _3691 = _3628 * _3667;
                                float _3692 = _3691 * _3691;
                                float _3698 = ((1.0 - _3692) * dot(vec3(_1031, _1034, _1037), vec3(_3615, _3616, _3617))) + _3692;
                                float _4819 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3699 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3700 = 1.0 - _3667;
                                float _3710 = (0.5 / (((_3699 * ((_3682 * _3700) + _3667)) + 9.9999999392252902907785028219223e-09) + (((_3699 * _3700) + _3667) * _3682))) * _3699;
                                float _4830 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3720 = (_3645 * _3622) * (((_3668 * 3.1415927410125732421875) * (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) / ((_3690 * _3690) * ((_3635 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3646 * _3492.y;
                                frontier_phi_83_pred_1 = _3646 * _3492.x;
                                frontier_phi_83_pred_2 = _3720 * _3504.z;
                                frontier_phi_83_pred_3 = _3720 * _3504.y;
                                frontier_phi_83_pred_4 = _3720 * _3504.x;
                                frontier_phi_83_pred_5 = _3646 * _3492.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3728 = frontier_phi_83_pred;
                            _3727 = frontier_phi_83_pred_1;
                            _3726 = frontier_phi_83_pred_2;
                            _3725 = frontier_phi_83_pred_3;
                            _3724 = frontier_phi_83_pred_4;
                            _3729 = frontier_phi_83_pred_5;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            _3436 = _3729 + _3449;
                            _3431 = _3724 + _3444;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            if (_3451 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3444 = _3431;
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3451;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3436;
                        frontier_phi_77_pred_1 = _3435;
                        frontier_phi_77_pred_2 = _3434;
                        frontier_phi_77_pred_3 = _3433;
                        frontier_phi_77_pred_4 = _3432;
                        frontier_phi_77_pred_5 = _3431;
                    }
                    _3073 = frontier_phi_77_pred;
                    _3071 = frontier_phi_77_pred_1;
                    _3069 = frontier_phi_77_pred_2;
                    _3067 = frontier_phi_77_pred_3;
                    _3065 = frontier_phi_77_pred_4;
                    _3063 = frontier_phi_77_pred_5;
                    uint _3229 = _3228 + 1u;
                    if (_3229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3222 = _3063;
                        _3223 = _3065;
                        _3224 = _3067;
                        _3225 = _3069;
                        _3226 = _3071;
                        _3227 = _3073;
                        _3228 = _3229;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3067;
                frontier_phi_58_59_ladder_1 = _3073;
                frontier_phi_58_59_ladder_2 = _3071;
                frontier_phi_58_59_ladder_3 = _3069;
                frontier_phi_58_59_ladder_4 = _3065;
                frontier_phi_58_59_ladder_5 = _3063;
            }
            else
            {
                frontier_phi_58_59_ladder = _2945;
                frontier_phi_58_59_ladder_1 = _2951;
                frontier_phi_58_59_ladder_2 = _2949;
                frontier_phi_58_59_ladder_3 = _2947;
                frontier_phi_58_59_ladder_4 = _2943;
                frontier_phi_58_59_ladder_5 = _2941;
            }
            _3062 = frontier_phi_58_59_ladder_5;
            _3064 = frontier_phi_58_59_ladder_4;
            _3066 = frontier_phi_58_59_ladder;
            _3068 = frontier_phi_58_59_ladder_3;
            _3070 = frontier_phi_58_59_ladder_2;
            _3072 = frontier_phi_58_59_ladder_1;
        }
        float _3077 = isnan(1.0) ? _1090 : (isnan(_1090) ? 1.0 : min(_1090, 1.0));
        _2853 = (_3077 * _3068) + _2289;
        _2855 = (_3077 * _3070) + _2291;
        _2857 = (_3077 * _3072) + _2293;
        _2859 = ((_3062 * _1074) * _3077) + _2634;
        _2861 = ((_3064 * _1076) * _3077) + _2636;
        _2863 = ((_3066 * _1077) * _3077) + _2638;
    }
    else
    {
        _2853 = _2289;
        _2855 = _2291;
        _2857 = _2293;
        _2859 = _2634;
        _2861 = _2636;
        _2863 = _2638;
    }
    float _4846 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _4857 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _4868 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _2880 = ((isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2853 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1090))) + ((_2859 + ((isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0))) * _1928)) * cbPerFrame._m0[3u].x);
    float _2881 = ((isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2855 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1090))) + ((_2861 + ((isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0))) * _1928)) * cbPerFrame._m0[3u].x);
    float _2882 = ((isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2857 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1090))) + ((_2863 + ((isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0))) * _1928)) * cbPerFrame._m0[3u].x);
    uint _2883 = _254 + 6u;
    float _2891 = _1012 / cbSceneParam._m0[86u].x;
    float _2892 = _1013 / cbSceneParam._m0[86u].y;
    vec4 _2906 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2891, _2892, (log2((isnan(cbSceneParam._m0[77u].w) ? _935 : (isnan(_935) ? cbSceneParam._m0[77u].w : min(_935, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2908 = _2906.x;
    float _2909 = _2906.y;
    float _2910 = _2906.z;
    float _2911 = _2906.w;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    if (_935 > cbSceneParam._m0[78u].w)
    {
        float _2966 = isnan(_935) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _935 : min(cbSceneParam._m0[80u].w, _935));
        float _2967 = _2966 / _935;
        float _2978 = _2967 * _985;
        float _2979 = _986 * _2967;
        float _2980 = (-0.0) - _2979;
        float _2982 = _2967 * _987;
        float _2984 = (cbSceneParam._m0[77u].w * _2980) / _2966;
        float _2985 = _2984 + cbSceneParam._m0[79u].w;
        float _2986 = cbSceneParam._m0[79u].w - _2979;
        float _2992 = sqrt(((_2978 * _2978) + (_2979 * _2979)) + (_2982 * _2982));
        float _2995 = (1.0 - (cbSceneParam._m0[77u].w / _2966)) * _2992;
        float _3000 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3002 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3179;
        if (abs((_2980 - _2984) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3179 = ((((_2985 > 0.0) ? exp2(_3000 * _2985) : (2.0 - exp2(_3002 * _2985))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2995;
        }
        else
        {
            float _3123 = 1.0 / cbSceneParam._m0[80u].x;
            float _3124 = isnan(_2986) ? _2985 : (isnan(_2985) ? _2986 : max(_2985, _2986));
            float _3125 = isnan(_2986) ? _2985 : (isnan(_2985) ? _2986 : min(_2985, _2986));
            float _3134 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : min(_3124, 0.0));
            float _3135 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : min(_3125, 0.0));
            _3179 = ((abs(_2992 / _2980) * cbSceneParam._m0[80u].y) * ((((_3134 - _3135) * 2.0) - ((exp2(_3000 * (isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0)))) - exp2(_3000 * (isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))))) * _3123)) - ((exp2(_3002 * _3134) - exp2(_3002 * _3135)) * _3123))) + (_2995 * cbSceneParam._m0[80u].z);
        }
        vec4 _3181 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2891, _2892, 1.0), 0.0);
        float _3190 = exp2((_3179 * (-1.44269502162933349609375)) * (1.0 - _3181.w));
        float _3191 = log2(_3190);
        float _3207 = log2(_2911);
        _3004 = (exp2(_3207 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].x)) * _3181.x) / cbSceneParam._m0[78u].x)) + _2908;
        _3006 = (exp2(_3207 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].y)) * _3181.y) / cbSceneParam._m0[78u].y)) + _2909;
        _3008 = (exp2(_3207 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].z)) * _3181.z) / cbSceneParam._m0[78u].z)) + _2910;
        _3010 = _3190 * _2911;
    }
    else
    {
        _3004 = _2908;
        _3006 = _2909;
        _3008 = _2910;
        _3010 = _2911;
    }
    bool _3217;
    vec4 _3020;
    vec4 _3042;
    float _3044;
    float _3048;
    float _3049;
    float _3050;
    float _3051;
    bool _3061;
    for (;;)
    {
        _3020 = cbMatDynParam._m0[0u];
        float _3022 = roundEven(_3020.y);
        bool _3023 = _3022 == 3.0;
        float _3024 = log2(_3010);
        float _3031 = exp2(_3024 * cbSceneParam._m0[78u].x) * _2880;
        float _3032 = exp2(_3024 * cbSceneParam._m0[78u].y) * _2881;
        float _3033 = exp2(_3024 * cbSceneParam._m0[78u].z) * _2882;
        float _3040 = _1001 + (-0.5);
        _3042 = cbMtdParam._m0[1u];
        _3044 = _3042.y * _3040;
        float _3047 = (_3022 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3048 = _3047 * (_3023 ? _3031 : (_3031 + (cbSceneParam._m0[72u].w * _3004)));
        _3049 = _3047 * (_3023 ? _3032 : (_3032 + (cbSceneParam._m0[72u].w * _3006)));
        _3050 = _3047 * (_3023 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3008)));
        _3051 = _3040 * 0.999000012874603271484375;
        _3061 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3061)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _3051) < 0.5)
            {
                _3217 = true;
                break;
            }
        }
        uint _3158 = _1050 + uint(_3020.w);
        if ((cbInstanceData._m0[_3158].w < 1.0) && ((cbInstanceData._m0[_3158].w + _3051) < 0.5))
        {
            _3217 = true;
            break;
        }
        if ((_3044 + 1.0) < _3042.x)
        {
            _3217 = true;
            break;
        }
        _3217 = false;
        break;
    }
    float _3422;
    if (_3217)
    {
        discard_state = true;
        _3422 = 0.0;
    }
    else
    {
        _3422 = cbInstanceData._m0[_2883].w;
    }
    SV_Target.x = _3048;
    SV_Target.y = _3049;
    SV_Target.z = _3050;
    SV_Target.w = _3422;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2883].w;
    discard_exit();
}


