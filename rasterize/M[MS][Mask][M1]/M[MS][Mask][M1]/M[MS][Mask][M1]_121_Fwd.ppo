#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1448;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _379 = _377.x;
    float _391 = dot(vec4(_379, _377.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _408 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _338.x) * 2.0) - ((((_379 - _391) * cbMtdParam._m0[23u].w) + _391) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3772 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _416 = (_409 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _417 = (_409 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _418 = (_409 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _435 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _455 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _457 = _455.x;
    float _467 = dot(vec4(_457, _455.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _481 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _338.y) * 2.0) - ((((_457 - _467) * cbMtdParam._m0[23u].w) + _467) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3783 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _489 = (_482 * ((_435.x * cbMtdParam._m0[13u].x) - _416)) + _416;
    float _490 = (_482 * ((_435.y * cbMtdParam._m0[13u].y) - _417)) + _417;
    float _491 = (_482 * ((_435.z * cbMtdParam._m0[13u].z) - _418)) + _418;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _270) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _271) + cbTextureTilingScale._m0[24u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _529 = _527.x;
    float _539 = dot(vec4(_529, _527.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _551 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _338.z) * 2.0) - ((((_529 - _539) * cbMtdParam._m0[23u].w) + _539) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3794 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _559 = (_552 * ((_510.x * cbMtdParam._m0[14u].x) - _489)) + _489;
    float _560 = (_552 * ((_510.y * cbMtdParam._m0[14u].y) - _490)) + _490;
    float _561 = (_552 * ((_510.z * cbMtdParam._m0[14u].z) - _491)) + _491;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _598 = _596.x;
    float _599 = _596.y;
    float _600 = _596.z;
    float _607 = ((_579.x - _598) * _409) + _598;
    float _608 = ((_579.y - _599) * _409) + _599;
    float _609 = ((_579.z - _600) * _409) + _600;
    vec4 _621 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _632 = ((_621.x - _607) * _482) + _607;
    float _633 = ((_621.y - _608) * _482) + _608;
    float _634 = ((_621.z - _609) * _482) + _609;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _270) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _271) + cbTextureTilingScale._m0[23u].w));
    float _659 = ((_646.z - _634) * _552) + _634;
    float _662 = ((((_646.x - _632) * _552) + _632) * 2.0) + (-1.0);
    float _664 = ((((_646.y - _633) * _552) + _633) * 2.0) + (-1.0);
    float _665 = dot(vec2(_662, _664), vec2(_662, _664));
    float _3805 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _670 = sqrt(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))));
    vec4 _684 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _696 = (((_684.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _662;
    float _697 = (((_684.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _664;
    float _700 = fma(_670, _238, fma(_697, _245, _696 * _231));
    float _703 = fma(_670, _239, fma(_697, _246, _696 * _232));
    float _706 = fma(_670, _240, fma(_697, _247, _696 * _233));
    float _710 = inversesqrt(dot(vec3(_700, _703, _706), vec3(_700, _703, _706)));
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _739 = _737.x;
    float _740 = 1.0 - _739;
    float _748 = (cbMtdParam._m0[19u].x + dot(vec4(_710 * _700, _710 * _703, _710 * _706, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_739 - _740) * cbMtdParam._m0[24u].z) + _740) * cbMtdParam._m0[21u].z);
    float _3816 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _749 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _756 = (_749 * (cbMtdParam._m0[17u].x - _559)) + _559;
    float _757 = (_749 * (cbMtdParam._m0[17u].y - _560)) + _560;
    float _758 = (_749 * (cbMtdParam._m0[17u].z - _561)) + _561;
    vec4 _784 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _786 = _784.x;
    float _804 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _786) * _409) + _786;
    float _821 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _804) * _482) + _804;
    float _839 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _270) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _271) + cbTextureTilingScale._m0[10u].w)).x - _821) * _552) + _821;
    float _843 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _839) * cbMtdParam._m0[19u].z) + _839;
    float _845 = _843 - (_843 * _749);
    float _849 = (cbMtdParam._m0[19u].w * (_684.z - _659)) + _659;
    vec4 _862 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _869 = (_862.x * 2.0) + (-1.0);
    float _870 = (_862.y * 2.0) + (-1.0);
    float _871 = dot(vec2(_869, _870), vec2(_869, _870));
    float _3827 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _879 = ((_862.z - _849) * _749) + _849;
    float _889 = ((sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) - _670) * _749) + _670;
    float _892 = (((_869 - _696) * _749) + _696) + (cbMtdParam._m0[21u].x * _696);
    float _893 = (((_870 - _697) * _749) + _697) + (cbMtdParam._m0[21u].x * _697);
    float _895 = cbMtdParam._m0[22u].x + _684.w;
    float _898 = fma(_889, _238, fma(_893, _245, _892 * _231));
    float _901 = fma(_889, _239, fma(_893, _246, _892 * _232));
    float _904 = fma(_889, _240, fma(_893, _247, _892 * _233));
    float _908 = inversesqrt(dot(vec3(_898, _901, _904), vec3(_898, _901, _904)));
    float _909 = _908 * _898;
    float _910 = _908 * _901;
    float _911 = _908 * _904;
    float _3838 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _912 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _3860 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _3871 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _3882 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _3893 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _917 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _931 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _981 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _971);
    float _982 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _971);
    float _983 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _971);
    float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
    float _988 = _981 * _987;
    float _989 = _982 * _987;
    float _990 = _983 * _987;
    float _996 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _997 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1015 = fma(_911, cbSceneParam._m0[5u].z, fma(_910, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _909));
    float _1018 = fma(_911, cbSceneParam._m0[6u].z, fma(_910, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _909));
    float _1021 = fma(_911, cbSceneParam._m0[7u].z, fma(_910, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _909));
    uint _1035 = (_250 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1041 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_1035].x;
    float _1042 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_1035].y;
    float _1043 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_1035].z;
    float _3904 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _1047 = 1.0 - _917;
    float _1048 = _1044 * _1047;
    float _1049 = _1045 * _1047;
    float _1050 = _1046 * _1047;
    float _1055 = (_1044 + (-0.039999999105930328369140625)) * _917;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _917;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _917;
    float _1058 = _1055 + 0.039999999105930328369140625;
    float _1060 = _1056 + 0.039999999105930328369140625;
    float _1061 = _1057 + 0.039999999105930328369140625;
    vec4 _1070 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _996, cbSceneParam._m0[86u].y * _997));
    float _1074 = ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * TEXCOORD_5.w) * _1070.x;
    float _1075 = dot(vec3(_909, _910, _911), vec3(_988, _989, _990));
    float _1078 = _1075 * 2.0;
    float _1082 = (_1078 * _909) - _988;
    float _1083 = (_1078 * _910) - _989;
    float _1084 = (_1078 * _911) - _990;
    float _1088 = abs(dot(vec3(_988, _989, _990), vec3(_909, _910, _911)));
    float _3937 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1090 = sqrt(_912);
    float _1103 = exp2((_1090 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1090 * 3.0));
    float _1109 = (1.0 - _1103) * ((_1090 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1110 = _1103 * _1090;
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1447;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1172 = fma(_1146, cbModelParam._m0[26u].z, fma(_1142, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1138));
        float _1176 = fma(_1146, cbModelParam._m0[27u].z, fma(_1142, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1138));
        float _1180 = fma(_1146, cbModelParam._m0[28u].z, fma(_1142, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1138));
        float _1205 = _1138 + _909;
        float _1206 = _1142 + _910;
        float _1207 = _1146 + _911;
        float _1217 = fma(_1207, cbModelParam._m0[26u].z, fma(_1206, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1205)) - _1172;
        float _1218 = fma(_1207, cbModelParam._m0[27u].z, fma(_1206, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1205)) - _1176;
        float _1219 = fma(_1207, cbModelParam._m0[28u].z, fma(_1206, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1205)) - _1180;
        float _1223 = inversesqrt(dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219)));
        float _1236 = ((_1223 * _1217) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1172 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1223 * _1218) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1176 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1223 * _1219) / cbModelParam._m0[34u].z) + ((((((_1180 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        float _1275 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1241.x + (-0.5));
        float _1277 = _1275 * (_1241.y + (-0.5));
        float _1278 = _1275 * (_1241.z + (-0.5));
        float _1285 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1248.x + (-0.5));
        float _1287 = _1285 * (_1248.y + (-0.5));
        float _1288 = _1285 * (_1248.z + (-0.5));
        float _1295 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1255.x + (-0.5));
        float _1297 = _1295 * (_1255.y + (-0.5));
        float _1298 = _1295 * (_1255.z + (-0.5));
        float _1305 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1262.x + (-0.5));
        float _1307 = _1305 * (_1262.y + (-0.5));
        float _1308 = _1305 * (_1262.z + (-0.5));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = _1276 * 0.5;
        float _1313 = _1286 * 0.5;
        float _1314 = _1296 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1329 = (dot(vec3(_909, _910, _911), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1339 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3985 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1341 + 1.0))) + _1346) * _1309;
        float _1356 = _1277 * 0.5;
        float _1357 = _1287 * 0.5;
        float _1358 = _1297 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_909, _910, _911), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4018 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1383 + 1.0))) + _1388) * _1310;
        float _1398 = _1278 * 0.5;
        float _1399 = _1288 * 0.5;
        float _1400 = _1298 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_909, _910, _911), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4051 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1425 + 1.0))) + _1430) * _1311;
        _1447 = _1278;
        _1449 = _1277;
        _1450 = _1276;
        _1451 = _1288;
        _1452 = _1287;
        _1453 = _1286;
        _1454 = _1298;
        _1455 = _1297;
        _1456 = _1296;
        _1457 = _1311;
        _1458 = _1310;
        _1459 = _1309;
        _1460 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1461 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
    }
    else
    {
        _1447 = _1448;
        _1449 = _1448;
        _1450 = _1448;
        _1451 = _1448;
        _1452 = _1448;
        _1453 = _1448;
        _1454 = _1448;
        _1455 = _1448;
        _1456 = _1448;
        _1457 = _1448;
        _1458 = _1448;
        _1459 = _1448;
        _1460 = 0.0;
        _1461 = 0.0;
        _1462 = 0.0;
    }
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1485 = fma(_1146, cbModelParam._m0[30u].z, fma(_1142, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1138));
        float _1489 = fma(_1146, cbModelParam._m0[31u].z, fma(_1142, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1138));
        float _1493 = fma(_1146, cbModelParam._m0[32u].z, fma(_1142, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1138));
        float _1516 = _1138 + _909;
        float _1517 = _1142 + _910;
        float _1518 = _1146 + _911;
        float _1528 = fma(_1518, cbModelParam._m0[30u].z, fma(_1517, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1516)) - _1485;
        float _1529 = fma(_1518, cbModelParam._m0[31u].z, fma(_1517, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1516)) - _1489;
        float _1530 = fma(_1518, cbModelParam._m0[32u].z, fma(_1517, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1516)) - _1493;
        float _1534 = inversesqrt(dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530)));
        float _1547 = ((_1534 * _1528) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1485 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1548 = ((_1534 * _1529) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1489 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1549 = ((_1534 * _1530) / cbModelParam._m0[35u].z) + ((((((_1493 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        float _1584 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1551.x + (-0.5));
        float _1586 = _1584 * (_1551.y + (-0.5));
        float _1587 = _1584 * (_1551.z + (-0.5));
        float _1594 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1558.x + (-0.5));
        float _1596 = _1594 * (_1558.y + (-0.5));
        float _1597 = _1594 * (_1558.z + (-0.5));
        float _1604 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1565.x + (-0.5));
        float _1606 = _1604 * (_1565.y + (-0.5));
        float _1607 = _1604 * (_1565.z + (-0.5));
        float _1614 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1572.x + (-0.5));
        float _1616 = _1614 * (_1572.y + (-0.5));
        float _1617 = _1614 * (_1572.z + (-0.5));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1620 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1621 = _1585 * 0.5;
        float _1622 = _1595 * 0.5;
        float _1623 = _1605 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_909, _910, _911), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4114 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1648 + 1.0))) + _1653) * _1618;
        float _1663 = _1586 * 0.5;
        float _1664 = _1596 * 0.5;
        float _1665 = _1606 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_909, _910, _911), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1619 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4147 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1690 + 1.0))) + _1695) * _1619;
        float _1705 = _1587 * 0.5;
        float _1706 = _1597 * 0.5;
        float _1707 = _1607 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_909, _910, _911), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1620 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4180 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1732 + 1.0))) + _1737) * _1620;
        _1754 = _1587;
        _1755 = _1586;
        _1756 = _1585;
        _1757 = _1597;
        _1758 = _1596;
        _1759 = _1595;
        _1760 = _1607;
        _1761 = _1606;
        _1762 = _1605;
        _1763 = _1620;
        _1764 = _1619;
        _1765 = _1618;
        _1766 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
        _1767 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
        _1768 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
    }
    else
    {
        _1754 = _1448;
        _1755 = _1448;
        _1756 = _1448;
        _1757 = _1448;
        _1758 = _1448;
        _1759 = _1448;
        _1760 = _1448;
        _1761 = _1448;
        _1762 = _1448;
        _1763 = _1448;
        _1764 = _1448;
        _1765 = _1448;
        _1766 = 0.0;
        _1767 = 0.0;
        _1768 = 0.0;
    }
    float _1778 = (cbModelParam._m0[1u].x * (_1766 - _1460)) + _1460;
    float _1779 = (cbModelParam._m0[1u].x * (_1767 - _1461)) + _1461;
    float _1780 = (cbModelParam._m0[1u].x * (_1768 - _1462)) + _1462;
    float _1801 = fma(_1780, cbSceneParam._m0[89u].z, fma(_1779, cbSceneParam._m0[89u].y, _1778 * cbSceneParam._m0[89u].x));
    float _1804 = fma(_1780, cbSceneParam._m0[90u].z, fma(_1779, cbSceneParam._m0[90u].y, _1778 * cbSceneParam._m0[90u].x));
    float _1807 = fma(_1780, cbSceneParam._m0[91u].z, fma(_1779, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1778));
    float _1822 = _1082 * 0.5;
    float _1823 = _1083 * 0.5;
    float _1824 = _1084 * 0.5;
    float _1825 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1756, _1759, _1762, _1765));
    float _1828 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1755, _1758, _1761, _1764));
    float _1831 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1754, _1757, _1760, _1763));
    float _1865;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1838 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1447, _1451, _1454, _1457));
        float _1842 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1449, _1452, _1455, _1458));
        float _1846 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1450, _1453, _1456, _1459));
        float _1853 = dot(vec4(cbModelParam._m0[39u]), vec4(_1822, _1823, _1824, 1.0));
        _1865 = dot(vec3(isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1853) ? 0.0 : (isnan(0.0) ? _1853 : max(0.0, _1853))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1865 = 1.0;
    }
    float _1876;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1867 = dot(vec4(cbModelParam._m0[40u]), vec4(_1822, _1823, _1824, 1.0));
        _1876 = dot(vec3(isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1867) ? 0.0 : (isnan(0.0) ? _1867 : max(0.0, _1867))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1876 = 1.0;
    }
    float _1880 = (_1876 * cbModelParam._m0[1u].x) + (_1865 * (1.0 - cbModelParam._m0[1u].x));
    float _1890 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _912);
    float _1891 = isnan(_1890) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1890 : min(cbModelParam._m0[25u].z, _1890));
    float _1971;
    float _1973;
    float _1975;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1938 = fma(_1146, cbModelParam._m0[13u].z, fma(_1142, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138)) + cbModelParam._m0[13u].w;
        float _1942 = fma(_1146, cbModelParam._m0[14u].z, fma(_1142, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138)) + cbModelParam._m0[14u].w;
        float _1946 = fma(_1146, cbModelParam._m0[15u].z, fma(_1142, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138)) + cbModelParam._m0[15u].w;
        float _1949 = fma(_1084, cbModelParam._m0[13u].z, fma(_1083, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1082));
        float _1952 = fma(_1084, cbModelParam._m0[14u].z, fma(_1083, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1082));
        float _1955 = fma(_1084, cbModelParam._m0[15u].z, fma(_1083, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1082));
        float _1983;
        if (_1949 > 0.0)
        {
            _1983 = abs((1.0 - _1938) / _1949);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1938 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1983 = frontier_phi_14_12_ladder;
        }
        float _2186;
        if (_1952 > 0.0)
        {
            _2186 = abs((1.0 - _1942) / _1952);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1942 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2186 = frontier_phi_23_19_ladder;
        }
        float _2440;
        if (_1955 > 0.0)
        {
            _2440 = abs((1.0 - _1946) / _1955);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1946 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2440 = frontier_phi_35_30_ladder;
        }
        float _2442 = isnan(_2186) ? _1983 : (isnan(_1983) ? _2186 : min(_1983, _2186));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1949) + _1938;
        float _2448 = (_2443 * _1952) + _1942;
        float _2449 = (_2443 * _1955) + _1946;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2450;
        float _2454 = _2450 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 > _2454) || ((_2448 < _2452) || ((_2447 < _2452) || (_2447 > _2454))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2449, cbModelParam._m0[9u].z, fma(_2448, cbModelParam._m0[9u].y, _2447 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2449, cbModelParam._m0[10u].z, fma(_2448, cbModelParam._m0[10u].y, _2447 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2449, cbModelParam._m0[11u].z, fma(_2448, cbModelParam._m0[11u].y, _2447 * cbModelParam._m0[11u].x))), _1891);
            frontier_phi_13_35_ladder = _2577.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2577.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2577.x * cbModelParam._m0[1u].y;
        }
        _1971 = frontier_phi_13_35_ladder_2;
        _1973 = frontier_phi_13_35_ladder_1;
        _1975 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1959 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1082, _1083, _1084), _1891);
        _1971 = _1959.x * cbModelParam._m0[1u].y;
        _1973 = _1959.y * cbModelParam._m0[1u].y;
        _1975 = _1959.z * cbModelParam._m0[1u].y;
    }
    float _1979 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _912);
    float _1980 = isnan(_1979) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1979 : min(cbModelParam._m0[25u].w, _1979));
    float _2070;
    float _2072;
    float _2074;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2034 = fma(_1146, cbModelParam._m0[21u].z, fma(_1142, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138)) + cbModelParam._m0[21u].w;
        float _2038 = fma(_1146, cbModelParam._m0[22u].z, fma(_1142, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138)) + cbModelParam._m0[22u].w;
        float _2042 = fma(_1146, cbModelParam._m0[23u].z, fma(_1142, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138)) + cbModelParam._m0[23u].w;
        float _2045 = fma(_1084, cbModelParam._m0[21u].z, fma(_1083, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1082));
        float _2048 = fma(_1084, cbModelParam._m0[22u].z, fma(_1083, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1082));
        float _2051 = fma(_1084, cbModelParam._m0[23u].z, fma(_1083, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1082));
        float _2191;
        if (_2045 > 0.0)
        {
            _2191 = abs((1.0 - _2034) / _2045);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2034 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2191 = frontier_phi_25_21_ladder;
        }
        float _2467;
        if (_2048 > 0.0)
        {
            _2467 = abs((1.0 - _2038) / _2048);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2038 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2467 = frontier_phi_37_32_ladder;
        }
        float _2680;
        if (_2051 > 0.0)
        {
            _2680 = abs((1.0 - _2042) / _2051);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2042 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2680 = frontier_phi_46_43_ladder;
        }
        float _2682 = isnan(_2467) ? _2191 : (isnan(_2191) ? _2467 : min(_2191, _2467));
        float _2683 = isnan(_2680) ? _2682 : (isnan(_2682) ? _2680 : min(_2682, _2680));
        float _2687 = (_2683 * _2045) + _2034;
        float _2688 = (_2683 * _2048) + _2038;
        float _2689 = (_2683 * _2051) + _2042;
        float _2690 = _2683 * 9.9999997473787516355514526367188e-05;
        float _2691 = (-1.0) - _2690;
        float _2693 = _2690 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2689 > _2693) || ((_2689 < _2691) || ((_2688 > _2693) || ((_2688 < _2691) || ((_2687 < _2691) || (_2687 > _2693))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2689, cbModelParam._m0[17u].z, fma(_2688, cbModelParam._m0[17u].y, _2687 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2689, cbModelParam._m0[18u].z, fma(_2688, cbModelParam._m0[18u].y, _2687 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2689, cbModelParam._m0[19u].z, fma(_2688, cbModelParam._m0[19u].y, _2687 * cbModelParam._m0[19u].x))), _1980);
            frontier_phi_22_46_ladder = _2888.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2888.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2888.x * cbModelParam._m0[1u].z;
        }
        _2070 = frontier_phi_22_46_ladder_2;
        _2072 = frontier_phi_22_46_ladder_1;
        _2074 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2054 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1082, _1083, _1084), _1980);
        _2070 = _2054.x * cbModelParam._m0[1u].z;
        _2072 = _2054.y * cbModelParam._m0[1u].z;
        _2074 = _2054.z * cbModelParam._m0[1u].z;
    }
    float _2087 = (((_1109 * _1058) + _1110) * _1074) * ((cbModelParam._m0[1u].w * (_2070 - _1971)) + _1971);
    float _2089 = (((_1109 * _1060) + _1110) * _1074) * ((cbModelParam._m0[1u].w * (_2072 - _1973)) + _1973);
    float _2091 = (((_1109 * _1061) + _1110) * _1074) * ((cbModelParam._m0[1u].w * (_2074 - _1975)) + _1975);
    float _2094 = fma(_2091, cbSceneParam._m0[89u].z, fma(_2089, cbSceneParam._m0[89u].y, _2087 * cbSceneParam._m0[89u].x));
    float _2097 = fma(_2091, cbSceneParam._m0[90u].z, fma(_2089, cbSceneParam._m0[90u].y, _2087 * cbSceneParam._m0[90u].x));
    float _2100 = fma(_2091, cbSceneParam._m0[91u].z, fma(_2089, cbSceneParam._m0[91u].y, _2087 * cbSceneParam._m0[91u].x));
    uvec4 _2110 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2112 = _2110.x * 14u;
    uint _2113 = _2112 + 13u;
    float _2120 = _1074 + (-1.0);
    float _2125 = (cbLight._m0[_2113].x * _2120) + 1.0;
    float _2126 = (cbLight._m0[_2113].y * _2120) + 1.0;
    float _2127 = (cbLight._m0[_2113].z * _2120) + 1.0;
    float _2128 = (cbLight._m0[_2113].w * _2120) + 1.0;
    uint _2129 = _2112 + 5u;
    float _2135 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2139 = _2112 + 4u;
    float _2145 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
    uint _2149 = _2112 | 1u;
    float _2160 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_909, _910, _911));
    float _2163 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_909, _910, _911));
    float _4316 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _4327 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2168 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * 0.3183098733425140380859375;
    float _2170 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * 0.3183098733425140380859375;
    float _2177 = ((cbLight._m0[_2129].x * _2135) * _2170) + ((cbLight._m0[_2139].x * _2145) * _2168);
    float _2178 = ((_2135 * cbLight._m0[_2129].y) * _2170) + ((_2145 * cbLight._m0[_2139].y) * _2168);
    float _2179 = ((_2135 * cbLight._m0[_2129].z) * _2170) + ((_2145 * cbLight._m0[_2139].z) * _2168);
    uvec4 _2183 = floatBitsToUint(cbLight._m0[_2112 + 12u]);
    bool _2185 = _2183.x == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2185)
    {
        _2196 = _2177;
        _2198 = _2178;
        _2200 = _2179;
    }
    else
    {
        uint _2204 = _2112 + 6u;
        float _2220 = (dot(vec3(cbLight._m0[_2112 + 2u].xyz), vec3(_909, _910, _911)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4338 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2223 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2196 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _2177;
        _2198 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _2178;
        _2200 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _2179;
    }
    bool _2203 = _2183.y == 0u;
    float _2241;
    float _2243;
    float _2245;
    if (_2203)
    {
        _2241 = _2196;
        _2243 = _2198;
        _2245 = _2200;
    }
    else
    {
        uint _2411 = _2112 + 7u;
        float _2427 = (dot(vec3(cbLight._m0[_2112 + 3u].xyz), vec3(_909, _910, _911)) * 0.5) + 0.5;
        float _2428 = _2427 * _2427;
        float _4354 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2429 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _2430 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2241 = (((cbLight._m0[_2411].x * 0.3183098733425140380859375) * _2429) * _2430) + _2196;
        _2243 = (((cbLight._m0[_2411].y * 0.3183098733425140380859375) * _2429) * _2430) + _2198;
        _2245 = (((cbLight._m0[_2411].z * 0.3183098733425140380859375) * _2429) * _2430) + _2200;
    }
    uint _2248 = _2112 + 8u;
    float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _912) * 0.949999988079071044921875);
    float _2262 = _2261 * _2261;
    float _2263 = cbLight._m0[_2112].x + _988;
    float _2264 = cbLight._m0[_2112].y + _989;
    float _2265 = cbLight._m0[_2112].z + _990;
    float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
    float _2270 = _2269 * _2263;
    float _2271 = _2269 * _2264;
    float _2272 = _2269 * _2265;
    float _2273 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2112].xyz));
    float _4370 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _4381 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _2277 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2278 = dot(vec3(_909, _910, _911), vec3(_2270, _2271, _2272));
    float _4392 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2282 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2270, _2271, _2272));
    float _4403 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2286 = _2262 * _2262;
    float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
    float _2298 = exp2(log2(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) * 5.0);
    float _2299 = 0.959999978542327880859375 - _1055;
    float _2301 = 0.959999978542327880859375 - _1056;
    float _2302 = 0.959999978542327880859375 - _1057;
    float _2309 = 1.0 - _2262;
    float _2320 = (0.5 / (((_2277 * ((_2276 * _2309) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2309) + _2262) * _2276))) * _2276;
    float _4414 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2322 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
    uint _2333 = _2112 + 9u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _912) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2149].x + _988;
    float _2347 = cbLight._m0[_2149].y + _989;
    float _2348 = cbLight._m0[_2149].z + _990;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2149].xyz));
    float _4425 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2360 = dot(vec3(_909, _910, _911), vec3(_2353, _2354, _2355));
    float _4436 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2353, _2354, _2355));
    float _4447 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2345 * _2345;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0);
    float _2386 = 1.0 - _2345;
    float _2396 = (0.5 / (((_2277 * ((_2359 * _2386) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2386) + _2345) * _2359))) * _2359;
    float _4458 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    float _2408 = (((((_2379 * _2299) + _1058) * cbLight._m0[_2333].x) * _2398) * _2135) + (((((_2298 * _2299) + _1058) * cbLight._m0[_2248].x) * _2322) * _2145);
    float _2409 = (((((_2379 * _2301) + _1060) * cbLight._m0[_2333].y) * _2398) * _2135) + (((((_2298 * _2301) + _1060) * cbLight._m0[_2248].y) * _2322) * _2145);
    float _2410 = (((((_2379 * _2302) + _1061) * cbLight._m0[_2333].z) * _2398) * _2135) + (((((_2298 * _2302) + _1061) * cbLight._m0[_2248].z) * _2322) * _2145);
    float _2472;
    float _2474;
    float _2476;
    if (_2185)
    {
        _2472 = _2408;
        _2474 = _2409;
        _2476 = _2410;
    }
    else
    {
        uint _2478 = _2112 + 2u;
        uint _2482 = _2112 + 10u;
        float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2478].w)) * _912) * 0.949999988079071044921875);
        float _2497 = _2496 * _2496;
        float _2498 = cbLight._m0[_2478].x + _988;
        float _2499 = cbLight._m0[_2478].y + _989;
        float _2500 = cbLight._m0[_2478].z + _990;
        float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
        float _2505 = _2504 * _2498;
        float _2506 = _2504 * _2499;
        float _2507 = _2504 * _2500;
        float _2508 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2478].xyz));
        float _4469 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2512 = dot(vec3(_909, _910, _911), vec3(_2505, _2506, _2507));
        float _4480 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2516 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_2505, _2506, _2507));
        float _4491 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2520 = _2497 * _2497;
        float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
        float _2531 = exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0);
        float _2538 = 1.0 - _2497;
        float _2548 = (0.5 / (((_2277 * ((_2511 * _2538) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2538) + _2497) * _2511))) * _2511;
        float _4502 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2550 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
        float _2551 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2472 = (((((_2531 * _2299) + _1058) * cbLight._m0[_2482].x) * _2550) * _2551) + _2408;
        _2474 = (((((_2531 * _2301) + _1060) * cbLight._m0[_2482].y) * _2550) * _2551) + _2409;
        _2476 = (((((_2531 * _2302) + _1061) * cbLight._m0[_2482].z) * _2550) * _2551) + _2410;
    }
    float _2586;
    float _2588;
    float _2590;
    if (_2203)
    {
        _2586 = _2472;
        _2588 = _2474;
        _2590 = _2476;
    }
    else
    {
        uint _2597 = _2112 + 3u;
        uint _2601 = _2112 + 11u;
        float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2597].w)) * _912) * 0.949999988079071044921875);
        float _2616 = _2615 * _2615;
        float _2617 = cbLight._m0[_2597].x + _988;
        float _2618 = cbLight._m0[_2597].y + _989;
        float _2619 = cbLight._m0[_2597].z + _990;
        float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
        float _2624 = _2623 * _2617;
        float _2625 = _2623 * _2618;
        float _2626 = _2623 * _2619;
        float _2627 = dot(vec3(_909, _910, _911), vec3(cbLight._m0[_2597].xyz));
        float _4518 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2631 = dot(vec3(_909, _910, _911), vec3(_2624, _2625, _2626));
        float _4529 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2635 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_2624, _2625, _2626));
        float _4540 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2639 = _2616 * _2616;
        float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
        float _2650 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
        float _2657 = 1.0 - _2616;
        float _2667 = (0.5 / (((_2277 * ((_2630 * _2657) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2277 * _2657) + _2616) * _2630))) * _2630;
        float _4551 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2669 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
        float _2670 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2586 = (((((_2650 * _2299) + _1058) * cbLight._m0[_2601].x) * _2669) * _2670) + _2472;
        _2588 = (((((_2650 * _2301) + _1060) * cbLight._m0[_2601].y) * _2669) * _2670) + _2474;
        _2590 = (((((_2650 * _2302) + _1061) * cbLight._m0[_2601].z) * _2669) * _2670) + _2476;
    }
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    if (_2110.y == 0u)
    {
        float _2745 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2746 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2745;
        float _2747 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2745;
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2745;
        uvec4 _2760 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2761 = _2760.x;
        uint _2772 = uint((float(_2760.y) * floor(float(uint(cbSceneParam._m0[85u].y * _997) / _2761))) + floor(float(uint(cbSceneParam._m0[85u].x * _996) / _2761)));
        float _2782 = (log2(_2748 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2783 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        uint _2786 = uint(isnan(14.0) ? _2783 : (isnan(_2783) ? 14.0 : min(_2783, 14.0)));
        uvec4 _2791 = texelFetch(g_lightClusterGridBuffer, int(((_2786 << 2u) + (_2772 << 6u)) >> 2u));
        uint _2792 = _2791.x;
        uint _2793 = _2760.z;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        if (((((1u << ((_2793 >> 4u) & 15u)) + 4294967295u) & _2792) == 0u) || ((_2793 & 240u) == 0u))
        {
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
        }
        else
        {
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _2902;
            float _2904;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            uint _3044 = 0u;
            uint _3053;
            bool _3054;
            for (;;)
            {
                _3053 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3044 << 2u)) >> 2u)).x;
                _3054 = _3053 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3054)
                {
                    frontier_phi_61_pred = _3038;
                    frontier_phi_61_pred_1 = _3043;
                    frontier_phi_61_pred_2 = _3042;
                    frontier_phi_61_pred_3 = _3041;
                    frontier_phi_61_pred_4 = _3040;
                    frontier_phi_61_pred_5 = _3039;
                }
                else
                {
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    uint _3168;
                    _3162 = _3038;
                    _3163 = _3039;
                    _3164 = _3040;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3053;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    for (;;)
                    {
                        uint _3172 = uint(findLSB(_3168)) + (_3044 << 5u);
                        uint _3169 = (_3168 + 4294967295u) & _3168;
                        uint _3174 = _3172 * 48u;
                        vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 3u)).x));
                        uint _3194 = (_3172 * 48u) + 4u;
                        vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 3u)).x));
                        uint _3213 = (_3172 * 48u) + 8u;
                        vec3 _3224 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x));
                        float _3228 = _3188.x - _2746;
                        float _3229 = _3188.y - _2747;
                        float _3230 = _3188.z - _2748;
                        float _3231 = dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230));
                        float _3234 = inversesqrt(_3231);
                        float _3235 = _3234 * _3228;
                        float _3236 = _3234 * _3229;
                        float _3237 = _3234 * _3230;
                        float _3238 = dot(vec3(_1015, _1018, _1021), vec3(_3235, _3236, _3237));
                        float _3243 = 1.0 - (_3231 * _3188.w);
                        float _4577 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3244 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3245 = sqrt(_3231) * _3207.w;
                        float _3248 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                        float _3249 = _3248 * _3248;
                        float _3252 = ((1.0 - _3249) * _3238) + _3249;
                        float _3255 = _3245 * _3245;
                        float _3259 = ((isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0))) * _3244) / ((_3255 * 0.699999988079071044921875) + 1.0);
                        float _3263 = (-0.0) - _2746;
                        float _3264 = (-0.0) - _2747;
                        float _3265 = (-0.0) - _2748;
                        float _3269 = inversesqrt(dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265)));
                        float _3270 = _3269 * _3263;
                        float _3271 = _3269 * _3264;
                        float _3272 = _3269 * _3265;
                        float _3280 = exp2(log2(1.0 / ((_3255 * 3.5) + 5.0)) * 0.25);
                        float _3281 = 1.0 - _1090;
                        float _3288 = sqrt(1.0 - ((1.0 - (_3281 * _3281)) * (1.0 - (_3280 * _3280))));
                        float _3289 = _3288 * _3288;
                        float _3290 = _3289 * _3289;
                        float _3291 = _3270 + _3235;
                        float _3292 = _3271 + _3236;
                        float _3293 = _3272 + _3237;
                        float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                        float _3301 = dot(vec3(_1015, _1018, _1021), vec3(_3270, _3271, _3272));
                        float _4593 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3304 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                        float _3305 = dot(vec3(_1015, _1018, _1021), vec3(_3297 * _3291, _3297 * _3292, _3297 * _3293));
                        float _4604 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3312 = ((_3308 * _3308) * (_3290 + (-1.0))) + 1.0;
                        float _3313 = _3248 * _3289;
                        float _3314 = _3313 * _3313;
                        float _3317 = ((1.0 - _3314) * _3238) + _3314;
                        float _4615 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3318 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3319 = 1.0 - _3289;
                        float _3329 = (0.5 / (((_3318 * ((_3304 * _3319) + _3289)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3289) * _3304))) * _3318;
                        float _4626 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3340 = (((_3290 * 3.1415927410125732421875) * (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) / ((_3312 * _3312) * ((_3255 * 2.1991131305694580078125) + 3.141590118408203125))) * _3244;
                        _3097 = (_3259 * _3207.x) + _3165;
                        _3098 = (_3259 * _3207.y) + _3166;
                        _3099 = (_3259 * _3207.z) + _3167;
                        _3094 = (_3340 * _3224.x) + _3162;
                        _3095 = (_3340 * _3224.y) + _3163;
                        _3096 = (_3340 * _3224.z) + _3164;
                        if (_3169 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3162 = _3094;
                            _3163 = _3095;
                            _3164 = _3096;
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3169;
                        }
                    }
                    frontier_phi_61_pred = _3094;
                    frontier_phi_61_pred_1 = _3099;
                    frontier_phi_61_pred_2 = _3098;
                    frontier_phi_61_pred_3 = _3097;
                    frontier_phi_61_pred_4 = _3096;
                    frontier_phi_61_pred_5 = _3095;
                }
                _2894 = frontier_phi_61_pred;
                _2904 = frontier_phi_61_pred_1;
                _2902 = frontier_phi_61_pred_2;
                _2900 = frontier_phi_61_pred_3;
                _2898 = frontier_phi_61_pred_4;
                _2896 = frontier_phi_61_pred_5;
                uint _3045 = _3044 + 1u;
                if (_3045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3038 = _2894;
                    _3039 = _2896;
                    _3040 = _2898;
                    _3041 = _2900;
                    _3042 = _2902;
                    _3043 = _2904;
                    _3044 = _3045;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
        }
        uvec4 _2907 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2908 = _2907.z;
        uint _2910 = (_2908 >> 8u) & 15u;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        if (((4294967295u << _2910) & _2792) == 0u)
        {
            _3006 = _2893;
            _3008 = _2895;
            _3010 = _2897;
            _3012 = _2899;
            _3014 = _2901;
            _3016 = _2903;
        }
        else
        {
            float _3031 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
            float _3032 = _3031 * _2746;
            float _3033 = _3031 * _2747;
            float _3034 = _3031 * _2748;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2910 < ((_2908 >> 12u) & 15u))
            {
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3145 = _2893;
                float _3146 = _2895;
                float _3147 = _2897;
                float _3148 = _2899;
                float _3149 = _2901;
                float _3150 = _2903;
                uint _3151 = _2910;
                uint _3160;
                bool _3161;
                for (;;)
                {
                    _3160 = texelFetch(g_lightClassification, int((((_2786 << 5u) + (_2772 << 9u)) + (_3151 << 2u)) >> 2u)).x;
                    _3161 = _3160 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3161)
                    {
                        frontier_phi_67_pred = _3148;
                        frontier_phi_67_pred_1 = _3149;
                        frontier_phi_67_pred_2 = _3150;
                        frontier_phi_67_pred_3 = _3147;
                        frontier_phi_67_pred_4 = _3146;
                        frontier_phi_67_pred_5 = _3145;
                    }
                    else
                    {
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3358 = _3145;
                        float _3359 = _3146;
                        float _3360 = _3147;
                        float _3361 = _3148;
                        float _3362 = _3149;
                        float _3363 = _3150;
                        uint _3364 = _3160;
                        uint _3365;
                        vec4 _3390;
                        float _3391;
                        vec4 _3406;
                        vec3 _3418;
                        vec4 _3433;
                        vec4 _3448;
                        float _3494;
                        bool _3495;
                        for (;;)
                        {
                            uint _3375 = ((_3151 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3364));
                            _3365 = (_3364 + 4294967295u) & _3364;
                            uint _3377 = _3375 * 40u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            _3391 = _3390.w;
                            uint _3393 = (_3375 * 40u) + 4u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3408 = (_3375 * 40u) + 8u;
                            _3418 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x));
                            uint _3420 = (_3375 * 40u) + 16u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3375 * 40u) + 20u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3375 * 40u) + 24u;
                            vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3469 = (_3375 * 40u) + 28u;
                            vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            _3494 = fma(_2748, _3482.z, fma(_2747, _3482.y, _3482.x * _2746)) + _3482.w;
                            _3495 = !((fma(_2748, _3463.z, fma(_2747, _3463.y, _3463.x * _2746)) + _3463.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3495)
                            {
                                float _3522 = _3390.x - _2746;
                                float _3523 = _3390.y - _2747;
                                float _3524 = _3390.z - _2748;
                                float _3525 = dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524));
                                float _3528 = inversesqrt(_3525);
                                float _3529 = _3528 * _3522;
                                float _3530 = _3528 * _3523;
                                float _3531 = _3528 * _3524;
                                float _3535 = 1.0 - (_3525 / (_3391 * _3391));
                                float _4637 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3540 = sqrt(_3525) * _3406.w;
                                float _3542 = 1.39999997615814208984375 / (_3540 + 1.39999997615814208984375);
                                float _3543 = _3542 * _3542;
                                float _3546 = ((1.0 - _3543) * dot(vec3(_3529, _3530, _3531), vec3(_1015, _1018, _1021))) + _3543;
                                float _3549 = _3540 * _3540;
                                float _3553 = (fma(_2748, _3433.z, fma(_2747, _3433.y, _3433.x * _2746)) + _3433.w) / _3494;
                                float _3554 = (fma(_2748, _3448.z, fma(_2747, _3448.y, _3448.x * _2746)) + _3448.w) / _3494;
                                float _3558 = 1.0 - dot(vec2(_3553, _3554), vec2(_3553, _3554));
                                float _4653 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3559 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3560 = _3559 * (((isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0))) * _3536) / ((_3549 * 0.699999988079071044921875) + 1.0));
                                float _3572 = exp2(log2(1.0 / ((_3549 * 3.5) + 5.0)) * 0.25);
                                float _3573 = 1.0 - _1090;
                                float _3580 = sqrt(1.0 - ((1.0 - (_3573 * _3573)) * (1.0 - (_3572 * _3572))));
                                float _3581 = _3580 * _3580;
                                float _3582 = _3581 * _3581;
                                float _3583 = _3529 - _3032;
                                float _3584 = _3530 - _3033;
                                float _3585 = _3531 - _3034;
                                float _3589 = inversesqrt(dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585)));
                                float _3593 = dot(vec3(_1015, _1018, _1021), vec3((-0.0) - _3032, (-0.0) - _3033, (-0.0) - _3034));
                                float _4664 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3596 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3597 = dot(vec3(_1015, _1018, _1021), vec3(_3589 * _3583, _3589 * _3584, _3589 * _3585));
                                float _4675 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3600 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3604 = ((_3600 * _3600) * (_3582 + (-1.0))) + 1.0;
                                float _3605 = _3542 * _3581;
                                float _3606 = _3605 * _3605;
                                float _3612 = ((1.0 - _3606) * dot(vec3(_1015, _1018, _1021), vec3(_3529, _3530, _3531))) + _3606;
                                float _4686 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3614 = 1.0 - _3581;
                                float _3624 = (0.5 / (((_3613 * ((_3596 * _3614) + _3581)) + 9.9999999392252902907785028219223e-09) + (((_3613 * _3614) + _3581) * _3596))) * _3613;
                                float _4697 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3634 = (_3559 * _3536) * (((_3582 * 3.1415927410125732421875) * (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) / ((_3604 * _3604) * ((_3549 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3634 * _3418.x;
                                frontier_phi_73_pred_1 = _3634 * _3418.y;
                                frontier_phi_73_pred_2 = _3560 * _3406.z;
                                frontier_phi_73_pred_3 = _3560 * _3406.y;
                                frontier_phi_73_pred_4 = _3560 * _3406.x;
                                frontier_phi_73_pred_5 = _3634 * _3418.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3638 = frontier_phi_73_pred;
                            _3639 = frontier_phi_73_pred_1;
                            _3643 = frontier_phi_73_pred_2;
                            _3642 = frontier_phi_73_pred_3;
                            _3641 = frontier_phi_73_pred_4;
                            _3640 = frontier_phi_73_pred_5;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            if (_3365 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3365;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3348;
                        frontier_phi_67_pred_1 = _3349;
                        frontier_phi_67_pred_2 = _3350;
                        frontier_phi_67_pred_3 = _3347;
                        frontier_phi_67_pred_4 = _3346;
                        frontier_phi_67_pred_5 = _3345;
                    }
                    _3013 = frontier_phi_67_pred;
                    _3015 = frontier_phi_67_pred_1;
                    _3017 = frontier_phi_67_pred_2;
                    _3011 = frontier_phi_67_pred_3;
                    _3009 = frontier_phi_67_pred_4;
                    _3007 = frontier_phi_67_pred_5;
                    uint _3152 = _3151 + 1u;
                    if (_3152 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3145 = _3007;
                        _3146 = _3009;
                        _3147 = _3011;
                        _3148 = _3013;
                        _3149 = _3015;
                        _3150 = _3017;
                        _3151 = _3152;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3015;
                frontier_phi_55_56_ladder_1 = _3017;
                frontier_phi_55_56_ladder_2 = _3013;
                frontier_phi_55_56_ladder_3 = _3011;
                frontier_phi_55_56_ladder_4 = _3009;
                frontier_phi_55_56_ladder_5 = _3007;
            }
            else
            {
                frontier_phi_55_56_ladder = _2901;
                frontier_phi_55_56_ladder_1 = _2903;
                frontier_phi_55_56_ladder_2 = _2899;
                frontier_phi_55_56_ladder_3 = _2897;
                frontier_phi_55_56_ladder_4 = _2895;
                frontier_phi_55_56_ladder_5 = _2893;
            }
            _3006 = frontier_phi_55_56_ladder_5;
            _3008 = frontier_phi_55_56_ladder_4;
            _3010 = frontier_phi_55_56_ladder_3;
            _3012 = frontier_phi_55_56_ladder_2;
            _3014 = frontier_phi_55_56_ladder;
            _3016 = frontier_phi_55_56_ladder_1;
        }
        float _3021 = isnan(1.0) ? _1074 : (isnan(_1074) ? 1.0 : min(_1074, 1.0));
        _2805 = (_3021 * _3012) + _2241;
        _2807 = (_3021 * _3014) + _2243;
        _2809 = (_3021 * _3016) + _2245;
        _2811 = ((_3006 * _1058) * _3021) + _2586;
        _2813 = ((_3008 * _1060) * _3021) + _2588;
        _2815 = ((_3010 * _1061) * _3021) + _2590;
    }
    else
    {
        _2805 = _2241;
        _2807 = _2243;
        _2809 = _2245;
        _2811 = _2586;
        _2813 = _2588;
        _2815 = _2590;
    }
    float _4713 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _4724 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _4735 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    uint _2835 = _250 + 6u;
    float _2843 = _996 / cbSceneParam._m0[86u].x;
    float _2844 = _997 / cbSceneParam._m0[86u].y;
    vec4 _2858 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2843, _2844, (log2((isnan(cbSceneParam._m0[77u].w) ? _931 : (isnan(_931) ? cbSceneParam._m0[77u].w : min(_931, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2860 = _2858.x;
    float _2861 = _2858.y;
    float _2862 = _2858.z;
    float _2863 = _2858.w;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    if (_931 > cbSceneParam._m0[78u].w)
    {
        float _2918 = isnan(_931) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _931 : min(cbSceneParam._m0[80u].w, _931));
        float _2919 = _2918 / _931;
        float _2930 = _2919 * _981;
        float _2931 = _982 * _2919;
        float _2932 = (-0.0) - _2931;
        float _2934 = _2919 * _983;
        float _2936 = (cbSceneParam._m0[77u].w * _2932) / _2918;
        float _2937 = _2936 + cbSceneParam._m0[79u].w;
        float _2938 = cbSceneParam._m0[79u].w - _2931;
        float _2944 = sqrt(((_2930 * _2930) + (_2931 * _2931)) + (_2934 * _2934));
        float _2947 = (1.0 - (cbSceneParam._m0[77u].w / _2918)) * _2944;
        float _2952 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2954 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3107;
        if (abs((_2932 - _2936) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3107 = ((((_2937 > 0.0) ? exp2(_2952 * _2937) : (2.0 - exp2(_2954 * _2937))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2947;
        }
        else
        {
            float _3067 = 1.0 / cbSceneParam._m0[80u].x;
            float _3068 = isnan(_2938) ? _2937 : (isnan(_2937) ? _2938 : max(_2937, _2938));
            float _3069 = isnan(_2938) ? _2937 : (isnan(_2937) ? _2938 : min(_2937, _2938));
            float _3078 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : min(_3068, 0.0));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            _3107 = ((abs(_2944 / _2932) * cbSceneParam._m0[80u].y) * ((((_3078 - _3079) * 2.0) - ((exp2(_2952 * (isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0)))) - exp2(_2952 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))))) * _3067)) - ((exp2(_2954 * _3078) - exp2(_2954 * _3079)) * _3067))) + (_2947 * cbSceneParam._m0[80u].z);
        }
        vec4 _3109 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2843, _2844, 1.0), 0.0);
        float _3118 = exp2((_3107 * (-1.44269502162933349609375)) * (1.0 - _3109.w));
        float _3119 = log2(_3118);
        float _3135 = log2(_2863);
        _2956 = (exp2(_3135 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3119 * cbSceneParam._m0[78u].x)) * _3109.x) / cbSceneParam._m0[78u].x)) + _2860;
        _2958 = (exp2(_3135 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3119 * cbSceneParam._m0[78u].y)) * _3109.y) / cbSceneParam._m0[78u].y)) + _2861;
        _2960 = (exp2(_3135 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3119 * cbSceneParam._m0[78u].z)) * _3109.z) / cbSceneParam._m0[78u].z)) + _2862;
        _2962 = _3118 * _2863;
    }
    else
    {
        _2956 = _2860;
        _2958 = _2861;
        _2960 = _2862;
        _2962 = _2863;
    }
    float _2974 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2975 = _2974 == 3.0;
    float _2976 = log2(_2962);
    float _2983 = exp2(_2976 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2805 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1074))) + ((_2811 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1880)) * cbPerFrame._m0[3u].x));
    float _2984 = exp2(_2976 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2807 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1074))) + ((_2813 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1880)) * cbPerFrame._m0[3u].x));
    float _2985 = exp2(_2976 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2809 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1074))) + ((_2815 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1880)) * cbPerFrame._m0[3u].x));
    float _2994 = (_2974 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2994 * (_2975 ? _2983 : (_2983 + (cbSceneParam._m0[72u].w * _2956)));
    SV_Target.y = _2994 * (_2975 ? _2984 : (_2984 + (cbSceneParam._m0[72u].w * _2958)));
    SV_Target.z = _2994 * (_2975 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2960)));
    SV_Target.w = cbInstanceData._m0[_2835].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2835].w;
}


