#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1474;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _237 = _236 * _228;
    float _238 = _236 * _229;
    float _239 = _236 * _230;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _344.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[23u].w) + _397) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4080 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _422 = (_415 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _423 = (_415 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _424 = (_415 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _473 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _487 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _344.y) * 2.0) - ((((_463 - _473) * cbMtdParam._m0[23u].w) + _473) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4091 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _495 = (_488 * ((_441.x * cbMtdParam._m0[13u].x) - _422)) + _422;
    float _496 = (_488 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423;
    float _497 = (_488 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _533 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _535 = _533.x;
    float _545 = dot(vec4(_535, _533.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _557 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _344.z) * 2.0) - ((((_535 - _545) * cbMtdParam._m0[23u].w) + _545) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4102 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _565 = (_558 * ((_516.x * cbMtdParam._m0[14u].x) - _495)) + _495;
    float _566 = (_558 * ((_516.y * cbMtdParam._m0[14u].y) - _496)) + _496;
    float _567 = (_558 * ((_516.z * cbMtdParam._m0[14u].z) - _497)) + _497;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _624 = _622.x;
    float _625 = _622.y;
    float _626 = _622.z;
    float _633 = ((_605.x - _624) * _415) + _624;
    float _634 = ((_605.y - _625) * _415) + _625;
    float _635 = ((_605.z - _626) * _415) + _626;
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _658 = ((_647.x - _633) * _488) + _633;
    float _659 = ((_647.y - _634) * _488) + _634;
    float _660 = ((_647.z - _635) * _488) + _635;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _685 = ((_672.z - _660) * _558) + _660;
    float _688 = ((((_672.x - _658) * _558) + _658) * 2.0) + (-1.0);
    float _690 = ((((_672.y - _659) * _558) + _659) * 2.0) + (-1.0);
    float _691 = dot(vec2(_688, _690), vec2(_688, _690));
    float _4113 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _696 = sqrt(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _722 = (((_710.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _688;
    float _723 = (((_710.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _690;
    float _726 = fma(_696, _244, fma(_723, _251, _722 * _237));
    float _729 = fma(_696, _245, fma(_723, _252, _722 * _238));
    float _732 = fma(_696, _246, fma(_723, _253, _722 * _239));
    float _736 = inversesqrt(dot(vec3(_726, _729, _732), vec3(_726, _729, _732)));
    vec4 _763 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _765 = _763.x;
    float _766 = 1.0 - _765;
    float _774 = (cbMtdParam._m0[19u].x + dot(vec4(_736 * _726, _736 * _729, _736 * _732, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_765 - _766) * cbMtdParam._m0[24u].z) + _766) * cbMtdParam._m0[21u].z);
    float _4124 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _775 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _782 = (_775 * ((_585.x * cbMtdParam._m0[18u].x) - _565)) + _565;
    float _783 = (_775 * ((_585.y * cbMtdParam._m0[18u].y) - _566)) + _566;
    float _784 = (_775 * ((_585.z * cbMtdParam._m0[18u].z) - _567)) + _567;
    vec4 _810 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _812 = _810.x;
    float _830 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _812) * _415) + _812;
    float _847 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _830) * _488) + _830;
    float _865 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _276) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _277) + cbTextureTilingScale._m0[10u].w)).x - _847) * _558) + _847;
    float _869 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _865) * cbMtdParam._m0[19u].z) + _865;
    float _871 = _869 - (_869 * _775);
    float _875 = (cbMtdParam._m0[19u].w * (_710.z - _685)) + _685;
    vec4 _888 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _895 = (_888.x * 2.0) + (-1.0);
    float _896 = (_888.y * 2.0) + (-1.0);
    float _897 = dot(vec2(_895, _896), vec2(_895, _896));
    float _4135 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _905 = ((_888.z - _875) * _775) + _875;
    float _915 = ((sqrt(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) - _696) * _775) + _696;
    float _918 = (((_895 - _722) * _775) + _722) + (cbMtdParam._m0[21u].x * _722);
    float _919 = (((_896 - _723) * _775) + _723) + (cbMtdParam._m0[21u].x * _723);
    float _921 = cbMtdParam._m0[22u].x + _710.w;
    float _924 = fma(_915, _244, fma(_919, _251, _918 * _237));
    float _927 = fma(_915, _245, fma(_919, _252, _918 * _238));
    float _930 = fma(_915, _246, fma(_919, _253, _918 * _239));
    float _934 = inversesqrt(dot(vec3(_924, _927, _930), vec3(_924, _927, _930)));
    float _935 = _934 * _924;
    float _936 = _934 * _927;
    float _937 = _934 * _930;
    float _4146 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _938 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _4157 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _4168 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4179 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4190 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4201 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _943 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _957 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1007 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _997);
    float _1008 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _997);
    float _1009 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _997);
    float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
    float _1014 = _1007 * _1013;
    float _1015 = _1008 * _1013;
    float _1016 = _1009 * _1013;
    float _1022 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1023 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1041 = fma(_937, cbSceneParam._m0[5u].z, fma(_936, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _935));
    float _1044 = fma(_937, cbSceneParam._m0[6u].z, fma(_936, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _935));
    float _1047 = fma(_937, cbSceneParam._m0[7u].z, fma(_936, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _935));
    uint _1061 = (_256 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1067 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * cbInstanceData._m0[_1061].x;
    float _1068 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * cbInstanceData._m0[_1061].y;
    float _1069 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * cbInstanceData._m0[_1061].z;
    float _4212 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _1073 = 1.0 - _943;
    float _1074 = _1070 * _1073;
    float _1075 = _1071 * _1073;
    float _1076 = _1072 * _1073;
    float _1081 = (_1070 + (-0.039999999105930328369140625)) * _943;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _943;
    float _1083 = (_1072 + (-0.039999999105930328369140625)) * _943;
    float _1084 = _1081 + 0.039999999105930328369140625;
    float _1086 = _1082 + 0.039999999105930328369140625;
    float _1087 = _1083 + 0.039999999105930328369140625;
    vec4 _1096 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1022, cbSceneParam._m0[86u].y * _1023));
    float _1100 = ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * TEXCOORD_5.w) * _1096.x;
    float _1101 = dot(vec3(_935, _936, _937), vec3(_1014, _1015, _1016));
    float _1104 = _1101 * 2.0;
    float _1108 = (_1104 * _935) - _1014;
    float _1109 = (_1104 * _936) - _1015;
    float _1110 = (_1104 * _937) - _1016;
    float _1114 = abs(dot(vec3(_1014, _1015, _1016), vec3(_935, _936, _937)));
    float _4245 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1116 = sqrt(_938);
    float _1129 = exp2((_1116 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1116 * 3.0));
    float _1135 = (1.0 - _1129) * ((_1116 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1136 = _1129 * _1116;
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1473;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1198 = fma(_1172, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1164));
        float _1202 = fma(_1172, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1164));
        float _1206 = fma(_1172, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1164));
        float _1231 = _1164 + _935;
        float _1232 = _1168 + _936;
        float _1233 = _1172 + _937;
        float _1243 = fma(_1233, cbModelParam._m0[26u].z, fma(_1232, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1231)) - _1198;
        float _1244 = fma(_1233, cbModelParam._m0[27u].z, fma(_1232, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1231)) - _1202;
        float _1245 = fma(_1233, cbModelParam._m0[28u].z, fma(_1232, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1231)) - _1206;
        float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
        float _1262 = ((_1249 * _1243) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1198 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1249 * _1244) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1202 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1249 * _1245) / cbModelParam._m0[34u].z) + ((((((_1206 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        float _1301 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1267.x + (-0.5));
        float _1303 = _1301 * (_1267.y + (-0.5));
        float _1304 = _1301 * (_1267.z + (-0.5));
        float _1311 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1274.x + (-0.5));
        float _1313 = _1311 * (_1274.y + (-0.5));
        float _1314 = _1311 * (_1274.z + (-0.5));
        float _1321 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1281.x + (-0.5));
        float _1323 = _1321 * (_1281.y + (-0.5));
        float _1324 = _1321 * (_1281.z + (-0.5));
        float _1331 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1288.x + (-0.5));
        float _1333 = _1331 * (_1288.y + (-0.5));
        float _1334 = _1331 * (_1288.z + (-0.5));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = _1302 * 0.5;
        float _1339 = _1312 * 0.5;
        float _1340 = _1322 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1355 = (dot(vec3(_935, _936, _937), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1365 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4293 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1367 + 1.0))) + _1372) * _1335;
        float _1382 = _1303 * 0.5;
        float _1383 = _1313 * 0.5;
        float _1384 = _1323 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_935, _936, _937), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4326 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1409 + 1.0))) + _1414) * _1336;
        float _1424 = _1304 * 0.5;
        float _1425 = _1314 * 0.5;
        float _1426 = _1324 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_935, _936, _937), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _4359 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1451 + 1.0))) + _1456) * _1337;
        _1473 = _1304;
        _1475 = _1303;
        _1476 = _1302;
        _1477 = _1314;
        _1478 = _1313;
        _1479 = _1312;
        _1480 = _1324;
        _1481 = _1323;
        _1482 = _1322;
        _1483 = _1337;
        _1484 = _1336;
        _1485 = _1335;
        _1486 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
    }
    else
    {
        _1473 = _1474;
        _1475 = _1474;
        _1476 = _1474;
        _1477 = _1474;
        _1478 = _1474;
        _1479 = _1474;
        _1480 = _1474;
        _1481 = _1474;
        _1482 = _1474;
        _1483 = _1474;
        _1484 = _1474;
        _1485 = _1474;
        _1486 = 0.0;
        _1487 = 0.0;
        _1488 = 0.0;
    }
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1511 = fma(_1172, cbModelParam._m0[30u].z, fma(_1168, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1164));
        float _1515 = fma(_1172, cbModelParam._m0[31u].z, fma(_1168, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1164));
        float _1519 = fma(_1172, cbModelParam._m0[32u].z, fma(_1168, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1164));
        float _1542 = _1164 + _935;
        float _1543 = _1168 + _936;
        float _1544 = _1172 + _937;
        float _1554 = fma(_1544, cbModelParam._m0[30u].z, fma(_1543, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1542)) - _1511;
        float _1555 = fma(_1544, cbModelParam._m0[31u].z, fma(_1543, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1542)) - _1515;
        float _1556 = fma(_1544, cbModelParam._m0[32u].z, fma(_1543, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1542)) - _1519;
        float _1560 = inversesqrt(dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556)));
        float _1573 = ((_1560 * _1554) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1511 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1574 = ((_1560 * _1555) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1515 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1575 = ((_1560 * _1556) / cbModelParam._m0[35u].z) + ((((((_1519 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        float _1610 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1577.x + (-0.5));
        float _1612 = _1610 * (_1577.y + (-0.5));
        float _1613 = _1610 * (_1577.z + (-0.5));
        float _1620 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1584.x + (-0.5));
        float _1622 = _1620 * (_1584.y + (-0.5));
        float _1623 = _1620 * (_1584.z + (-0.5));
        float _1630 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1591.x + (-0.5));
        float _1632 = _1630 * (_1591.y + (-0.5));
        float _1633 = _1630 * (_1591.z + (-0.5));
        float _1640 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1598.x + (-0.5));
        float _1642 = _1640 * (_1598.y + (-0.5));
        float _1643 = _1640 * (_1598.z + (-0.5));
        float _1644 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1645 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = _1611 * 0.5;
        float _1648 = _1621 * 0.5;
        float _1649 = _1631 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_935, _936, _937), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4400 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1644 + 9.9999997473787516355514526367188e-06);
        float _4411 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4422 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_1674 + 1.0))) + _1679) * _1644;
        float _1689 = _1612 * 0.5;
        float _1690 = _1622 * 0.5;
        float _1691 = _1632 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_935, _936, _937), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1645 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4455 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1716 + 1.0))) + _1721) * _1645;
        float _1731 = _1613 * 0.5;
        float _1732 = _1623 * 0.5;
        float _1733 = _1633 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_935, _936, _937), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4466 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4477 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4488 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_1758 + 1.0))) + _1763) * _1646;
        _1780 = _1613;
        _1781 = _1612;
        _1782 = _1611;
        _1783 = _1623;
        _1784 = _1622;
        _1785 = _1621;
        _1786 = _1633;
        _1787 = _1632;
        _1788 = _1631;
        _1789 = _1646;
        _1790 = _1645;
        _1791 = _1644;
        _1792 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1793 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
    }
    else
    {
        _1780 = _1474;
        _1781 = _1474;
        _1782 = _1474;
        _1783 = _1474;
        _1784 = _1474;
        _1785 = _1474;
        _1786 = _1474;
        _1787 = _1474;
        _1788 = _1474;
        _1789 = _1474;
        _1790 = _1474;
        _1791 = _1474;
        _1792 = 0.0;
        _1793 = 0.0;
        _1794 = 0.0;
    }
    float _1804 = (cbModelParam._m0[1u].x * (_1792 - _1486)) + _1486;
    float _1805 = (cbModelParam._m0[1u].x * (_1793 - _1487)) + _1487;
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1488)) + _1488;
    float _1827 = fma(_1806, cbSceneParam._m0[89u].z, fma(_1805, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1830 = fma(_1806, cbSceneParam._m0[90u].z, fma(_1805, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1833 = fma(_1806, cbSceneParam._m0[91u].z, fma(_1805, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1804));
    float _1848 = _1108 * 0.5;
    float _1849 = _1109 * 0.5;
    float _1850 = _1110 * 0.5;
    float _1851 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1854 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1781, _1784, _1787, _1790));
    float _1857 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1780, _1783, _1786, _1789));
    float _1891;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1864 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1473, _1477, _1480, _1483));
        float _1868 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1475, _1478, _1481, _1484));
        float _1872 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1476, _1479, _1482, _1485));
        float _1879 = dot(vec4(cbModelParam._m0[39u]), vec4(_1848, _1849, _1850, 1.0));
        _1891 = dot(vec3(isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1879) ? 0.0 : (isnan(0.0) ? _1879 : max(0.0, _1879))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1891 = 1.0;
    }
    float _1902;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1893 = dot(vec4(cbModelParam._m0[40u]), vec4(_1848, _1849, _1850, 1.0));
        _1902 = dot(vec3(isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1893) ? 0.0 : (isnan(0.0) ? _1893 : max(0.0, _1893))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1902 = 1.0;
    }
    float _1906 = (_1902 * cbModelParam._m0[1u].x) + (_1891 * (1.0 - cbModelParam._m0[1u].x));
    float _1916 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _938);
    float _1917 = isnan(_1916) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1916 : min(cbModelParam._m0[25u].z, _1916));
    float _1997;
    float _1999;
    float _2001;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1964 = fma(_1172, cbModelParam._m0[13u].z, fma(_1168, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1164)) + cbModelParam._m0[13u].w;
        float _1968 = fma(_1172, cbModelParam._m0[14u].z, fma(_1168, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1164)) + cbModelParam._m0[14u].w;
        float _1972 = fma(_1172, cbModelParam._m0[15u].z, fma(_1168, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1164)) + cbModelParam._m0[15u].w;
        float _1975 = fma(_1110, cbModelParam._m0[13u].z, fma(_1109, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1108));
        float _1978 = fma(_1110, cbModelParam._m0[14u].z, fma(_1109, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1108));
        float _1981 = fma(_1110, cbModelParam._m0[15u].z, fma(_1109, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1108));
        float _2009;
        if (_1975 > 0.0)
        {
            _2009 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2009 = frontier_phi_14_12_ladder;
        }
        float _2180;
        if (_1978 > 0.0)
        {
            _2180 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2180 = frontier_phi_23_19_ladder;
        }
        float _2475;
        if (_1981 > 0.0)
        {
            _2475 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2475 = frontier_phi_35_30_ladder;
        }
        float _2477 = isnan(_2180) ? _2009 : (isnan(_2009) ? _2180 : min(_2009, _2180));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1975) + _1964;
        float _2483 = (_2478 * _1978) + _1968;
        float _2484 = (_2478 * _1981) + _1972;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2487 = (-1.0) - _2485;
        float _2489 = _2485 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2484 > _2489) || ((_2484 < _2487) || ((_2483 > _2489) || ((_2483 < _2487) || ((_2482 < _2487) || (_2482 > _2489))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2484, cbModelParam._m0[9u].z, fma(_2483, cbModelParam._m0[9u].y, _2482 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2484, cbModelParam._m0[10u].z, fma(_2483, cbModelParam._m0[10u].y, _2482 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2484, cbModelParam._m0[11u].z, fma(_2483, cbModelParam._m0[11u].y, _2482 * cbModelParam._m0[11u].x))), _1917);
            frontier_phi_13_35_ladder = _2629.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2629.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2629.x * cbModelParam._m0[1u].y;
        }
        _1997 = frontier_phi_13_35_ladder_2;
        _1999 = frontier_phi_13_35_ladder_1;
        _2001 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1985 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1108, _1109, _1110), _1917);
        _1997 = _1985.x * cbModelParam._m0[1u].y;
        _1999 = _1985.y * cbModelParam._m0[1u].y;
        _2001 = _1985.z * cbModelParam._m0[1u].y;
    }
    float _2005 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _938);
    float _2006 = isnan(_2005) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2005 : min(cbModelParam._m0[25u].w, _2005));
    float _2095;
    float _2097;
    float _2099;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2059 = fma(_1172, cbModelParam._m0[21u].z, fma(_1168, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1164)) + cbModelParam._m0[21u].w;
        float _2063 = fma(_1172, cbModelParam._m0[22u].z, fma(_1168, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1164)) + cbModelParam._m0[22u].w;
        float _2067 = fma(_1172, cbModelParam._m0[23u].z, fma(_1168, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1164)) + cbModelParam._m0[23u].w;
        float _2070 = fma(_1110, cbModelParam._m0[21u].z, fma(_1109, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1108));
        float _2073 = fma(_1110, cbModelParam._m0[22u].z, fma(_1109, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1108));
        float _2076 = fma(_1110, cbModelParam._m0[23u].z, fma(_1109, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1108));
        float _2185;
        if (_2070 > 0.0)
        {
            _2185 = abs((1.0 - _2059) / _2070);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2059 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2185 = frontier_phi_25_21_ladder;
        }
        float _2502;
        if (_2073 > 0.0)
        {
            _2502 = abs((1.0 - _2063) / _2073);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2063 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2502 = frontier_phi_37_32_ladder;
        }
        float _2840;
        if (_2076 > 0.0)
        {
            _2840 = abs((1.0 - _2067) / _2076);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2067 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2840 = frontier_phi_47_44_ladder;
        }
        float _2842 = isnan(_2502) ? _2185 : (isnan(_2185) ? _2502 : min(_2185, _2502));
        float _2843 = isnan(_2840) ? _2842 : (isnan(_2842) ? _2840 : min(_2842, _2840));
        float _2847 = (_2843 * _2070) + _2059;
        float _2848 = (_2843 * _2073) + _2063;
        float _2849 = (_2843 * _2076) + _2067;
        float _2850 = _2843 * 9.9999997473787516355514526367188e-05;
        float _2851 = (-1.0) - _2850;
        float _2853 = _2850 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2849 > _2853) || ((_2849 < _2851) || ((_2848 > _2853) || ((_2848 < _2851) || ((_2847 < _2851) || (_2847 > _2853))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2971 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2849, cbModelParam._m0[17u].z, fma(_2848, cbModelParam._m0[17u].y, _2847 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2849, cbModelParam._m0[18u].z, fma(_2848, cbModelParam._m0[18u].y, _2847 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2849, cbModelParam._m0[19u].z, fma(_2848, cbModelParam._m0[19u].y, _2847 * cbModelParam._m0[19u].x))), _2006);
            frontier_phi_22_47_ladder = _2971.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2971.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2971.x * cbModelParam._m0[1u].z;
        }
        _2095 = frontier_phi_22_47_ladder_2;
        _2097 = frontier_phi_22_47_ladder_1;
        _2099 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2079 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1108, _1109, _1110), _2006);
        _2095 = _2079.x * cbModelParam._m0[1u].z;
        _2097 = _2079.y * cbModelParam._m0[1u].z;
        _2099 = _2079.z * cbModelParam._m0[1u].z;
    }
    float _2112 = (((_1135 * _1084) + _1136) * _1100) * ((cbModelParam._m0[1u].w * (_2095 - _1997)) + _1997);
    float _2114 = (((_1135 * _1086) + _1136) * _1100) * ((cbModelParam._m0[1u].w * (_2097 - _1999)) + _1999);
    float _2116 = (((_1135 * _1087) + _1136) * _1100) * ((cbModelParam._m0[1u].w * (_2099 - _2001)) + _2001);
    float _2119 = fma(_2116, cbSceneParam._m0[89u].z, fma(_2114, cbSceneParam._m0[89u].y, _2112 * cbSceneParam._m0[89u].x));
    float _2122 = fma(_2116, cbSceneParam._m0[90u].z, fma(_2114, cbSceneParam._m0[90u].y, _2112 * cbSceneParam._m0[90u].x));
    float _2125 = fma(_2116, cbSceneParam._m0[91u].z, fma(_2114, cbSceneParam._m0[91u].y, _2112 * cbSceneParam._m0[91u].x));
    float _2159 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2163 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2167 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2171 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2172 = _2159 / _2171;
    float _2173 = _2163 / _2171;
    float _2174 = _2167 / _2171;
    float _2321;
    float _2322;
    float _2323;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2201 = ((uint(_2174 > cbSceneParam._m0[59u].y) + uint(_2174 > cbSceneParam._m0[59u].x)) + uint(_2174 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2202 = _2201 + 43u;
        uint _2210 = _2201 + 44u;
        uint _2218 = _2201 + 45u;
        uint _2226 = _2201 + 46u;
        float _2237 = fma(_2171, cbSceneParam._m0[_2202].w, fma(_2167, cbSceneParam._m0[_2202].z, fma(_2163, cbSceneParam._m0[_2202].y, _2159 * cbSceneParam._m0[_2202].x)));
        float _2241 = fma(_2171, cbSceneParam._m0[_2210].w, fma(_2167, cbSceneParam._m0[_2210].z, fma(_2163, cbSceneParam._m0[_2210].y, _2159 * cbSceneParam._m0[_2210].x)));
        float _2249 = fma(_2171, cbSceneParam._m0[_2226].w, fma(_2167, cbSceneParam._m0[_2226].z, fma(_2163, cbSceneParam._m0[_2226].y, _2159 * cbSceneParam._m0[_2226].x)));
        float _2254 = cbSceneParam._m0[33u].z * _2249;
        float _2256 = cbSceneParam._m0[33u].w * _2249;
        float _2259 = fma(_2171, cbSceneParam._m0[_2218].w, fma(_2167, cbSceneParam._m0[_2218].z, fma(_2163, cbSceneParam._m0[_2218].y, _2159 * cbSceneParam._m0[_2218].x))) / _2249;
        float _2307 = (cbSceneParam._m0[33u].x - sqrt(((_2173 * _2173) + (_2172 * _2172)) + (_2174 * _2174))) * cbSceneParam._m0[33u].y;
        float _4614 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2314 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2254 + _2237) / _2249, (_2256 + _2241) / _2249), _2259), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2256 + _2237) / _2249, (_2241 - _2254) / _2249), _2259), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2237 - _2254) / _2249, (_2241 - _2256) / _2249), _2259), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2237 - _2256) / _2249, (_2254 + _2241) / _2249), _2259), 0.0)).x), vec4(0.25)));
        _2321 = 1.0 - (_2314 * cbSceneParam._m0[34u].x);
        _2322 = 1.0 - (_2314 * cbSceneParam._m0[34u].y);
        _2323 = 1.0 - (_2314 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2321 = 1.0;
        _2322 = 1.0;
        _2323 = 1.0;
    }
    float _2387;
    float _2389;
    float _2391;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2375 = fma(_2171, cbSceneParam._m0[63u].w, fma(_2167, cbSceneParam._m0[63u].z, fma(_2163, cbSceneParam._m0[63u].y, _2159 * cbSceneParam._m0[63u].x)));
        float _2376 = fma(_2171, cbSceneParam._m0[60u].w, fma(_2167, cbSceneParam._m0[60u].z, fma(_2163, cbSceneParam._m0[60u].y, _2159 * cbSceneParam._m0[60u].x))) / _2375;
        float _2377 = fma(_2171, cbSceneParam._m0[61u].w, fma(_2167, cbSceneParam._m0[61u].z, fma(_2163, cbSceneParam._m0[61u].y, _2159 * cbSceneParam._m0[61u].x))) / _2375;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2376 >= cbSceneParam._m0[64u].x) && (_2377 >= cbSceneParam._m0[64u].y)) && (_2376 <= cbSceneParam._m0[64u].z)) && (_2377 <= cbSceneParam._m0[64u].w))
        {
            float _2515 = fma(_2171, cbSceneParam._m0[62u].w, fma(_2167, cbSceneParam._m0[62u].z, fma(_2163, cbSceneParam._m0[62u].y, _2159 * cbSceneParam._m0[62u].x))) / _2375;
            float _2519 = isnan(cbSceneParam._m0[41u].w) ? _2515 : (isnan(_2515) ? cbSceneParam._m0[41u].w : max(_2515, cbSceneParam._m0[41u].w));
            float _2562 = (cbSceneParam._m0[33u].x - sqrt(((_2173 * _2173) + (_2172 * _2172)) + (_2174 * _2174))) * cbSceneParam._m0[33u].y;
            float _4630 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
            float _2569 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2376, cbSceneParam._m0[33u].w + _2377), _2519), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2376, _2377 - cbSceneParam._m0[33u].z), _2519), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2376 - cbSceneParam._m0[33u].z, _2377 - cbSceneParam._m0[33u].w), _2519), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2376 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2377), _2519), 0.0)).x), vec4(0.25)));
            float _2573 = 1.0 - (_2569 * cbSceneParam._m0[34u].x);
            float _2574 = 1.0 - (_2569 * cbSceneParam._m0[34u].y);
            float _2575 = 1.0 - (_2569 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2575) ? _2323 : (isnan(_2323) ? _2575 : min(_2323, _2575));
            frontier_phi_34_33_ladder_1 = isnan(_2574) ? _2322 : (isnan(_2322) ? _2574 : min(_2322, _2574));
            frontier_phi_34_33_ladder_2 = isnan(_2573) ? _2321 : (isnan(_2321) ? _2573 : min(_2321, _2573));
        }
        else
        {
            frontier_phi_34_33_ladder = _2323;
            frontier_phi_34_33_ladder_1 = _2322;
            frontier_phi_34_33_ladder_2 = _2321;
        }
        _2387 = frontier_phi_34_33_ladder_2;
        _2389 = frontier_phi_34_33_ladder_1;
        _2391 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2387 = _2321;
        _2389 = _2322;
        _2391 = _2323;
    }
    uvec4 _2396 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2398 = _2396.x * 14u;
    uint _2399 = _2398 + 13u;
    float _2406 = _1100 + (-1.0);
    float _2411 = (cbLight._m0[_2399].x * _2406) + 1.0;
    float _2412 = (cbLight._m0[_2399].y * _2406) + 1.0;
    float _2413 = (cbLight._m0[_2399].z * _2406) + 1.0;
    float _2414 = (cbLight._m0[_2399].w * _2406) + 1.0;
    uint _2415 = _2398 + 5u;
    float _2421 = isnan(1.0) ? _2412 : (isnan(_2412) ? 1.0 : min(_2412, 1.0));
    uint _2425 = _2398 + 4u;
    float _2434 = isnan(1.0) ? _2411 : (isnan(_2411) ? 1.0 : min(_2411, 1.0));
    uint _2438 = _2398 | 1u;
    float _2449 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_935, _936, _937));
    float _2452 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_935, _936, _937));
    float _4666 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _4677 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2457 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * 0.3183098733425140380859375;
    float _2459 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * 0.3183098733425140380859375;
    float _2466 = ((cbLight._m0[_2415].x * _2421) * _2459) + (((cbLight._m0[_2425].x * _2387) * _2434) * _2457);
    float _2467 = ((_2421 * cbLight._m0[_2415].y) * _2459) + (((cbLight._m0[_2425].y * _2389) * _2434) * _2457);
    float _2468 = ((_2421 * cbLight._m0[_2415].z) * _2459) + (((cbLight._m0[_2425].z * _2391) * _2434) * _2457);
    uvec4 _2472 = floatBitsToUint(cbLight._m0[_2398 + 12u]);
    bool _2474 = _2472.x == 0u;
    float _2576;
    float _2578;
    float _2580;
    if (_2474)
    {
        _2576 = _2466;
        _2578 = _2467;
        _2580 = _2468;
    }
    else
    {
        uint _2584 = _2398 + 6u;
        float _2600 = (dot(vec3(cbLight._m0[_2398 + 2u].xyz), vec3(_935, _936, _937)) * 0.5) + 0.5;
        float _2601 = _2600 * _2600;
        float _4688 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2602 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2603 = isnan(1.0) ? _2413 : (isnan(_2413) ? 1.0 : min(_2413, 1.0));
        _2576 = (((cbLight._m0[_2584].x * 0.3183098733425140380859375) * _2602) * _2603) + _2466;
        _2578 = (((cbLight._m0[_2584].y * 0.3183098733425140380859375) * _2602) * _2603) + _2467;
        _2580 = (((cbLight._m0[_2584].z * 0.3183098733425140380859375) * _2602) * _2603) + _2468;
    }
    bool _2583 = _2472.y == 0u;
    float _2638;
    float _2640;
    float _2642;
    if (_2583)
    {
        _2638 = _2576;
        _2640 = _2578;
        _2642 = _2580;
    }
    else
    {
        uint _2811 = _2398 + 7u;
        float _2827 = (dot(vec3(cbLight._m0[_2398 + 3u].xyz), vec3(_935, _936, _937)) * 0.5) + 0.5;
        float _2828 = _2827 * _2827;
        float _4704 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2829 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2830 = isnan(1.0) ? _2414 : (isnan(_2414) ? 1.0 : min(_2414, 1.0));
        _2638 = (((cbLight._m0[_2811].x * 0.3183098733425140380859375) * _2829) * _2830) + _2576;
        _2640 = (((cbLight._m0[_2811].y * 0.3183098733425140380859375) * _2829) * _2830) + _2578;
        _2642 = (((cbLight._m0[_2811].z * 0.3183098733425140380859375) * _2829) * _2830) + _2580;
    }
    uint _2645 = _2398 + 8u;
    float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2398].w)) * _938) * 0.949999988079071044921875);
    float _2659 = _2658 * _2658;
    float _2660 = cbLight._m0[_2398].x + _1014;
    float _2661 = cbLight._m0[_2398].y + _1015;
    float _2662 = cbLight._m0[_2398].z + _1016;
    float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
    float _2667 = _2666 * _2660;
    float _2668 = _2666 * _2661;
    float _2669 = _2666 * _2662;
    float _2670 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2398].xyz));
    float _4720 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2673 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _4731 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _2674 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _2675 = dot(vec3(_935, _936, _937), vec3(_2667, _2668, _2669));
    float _4742 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2678 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2679 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_2667, _2668, _2669));
    float _4753 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2683 = _2659 * _2659;
    float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
    float _2695 = exp2(log2(1.0 - (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) * 5.0);
    float _2696 = 0.959999978542327880859375 - _1081;
    float _2698 = 0.959999978542327880859375 - _1082;
    float _2699 = 0.959999978542327880859375 - _1083;
    float _2706 = 1.0 - _2659;
    float _2717 = (0.5 / (((_2674 * ((_2673 * _2706) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2674 * _2706) + _2659) * _2673))) * _2673;
    float _4764 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2719 = (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
    uint _2733 = _2398 + 9u;
    float _2744 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _938) * 0.949999988079071044921875);
    float _2745 = _2744 * _2744;
    float _2746 = cbLight._m0[_2438].x + _1014;
    float _2747 = cbLight._m0[_2438].y + _1015;
    float _2748 = cbLight._m0[_2438].z + _1016;
    float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
    float _2753 = _2752 * _2746;
    float _2754 = _2752 * _2747;
    float _2755 = _2752 * _2748;
    float _2756 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2438].xyz));
    float _4775 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
    float _2759 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
    float _2760 = dot(vec3(_935, _936, _937), vec3(_2753, _2754, _2755));
    float _4786 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2763 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
    float _2764 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2753, _2754, _2755));
    float _4797 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2768 = _2745 * _2745;
    float _2772 = ((_2763 * _2763) * (_2768 + (-1.0))) + 1.0;
    float _2779 = exp2(log2(1.0 - (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) * 5.0);
    float _2786 = 1.0 - _2745;
    float _2796 = (0.5 / (((_2674 * ((_2759 * _2786) + _2745)) + 9.9999999392252902907785028219223e-09) + (((_2674 * _2786) + _2745) * _2759))) * _2759;
    float _4808 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2798 = (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2768 / ((_2772 * _2772) * 3.141590118408203125));
    float _2808 = (((((_2779 * _2696) + _1084) * cbLight._m0[_2733].x) * _2798) * _2421) + ((((cbLight._m0[_2645].x * _2387) * ((_2695 * _2696) + _1084)) * _2719) * _2434);
    float _2809 = (((((_2779 * _2698) + _1086) * cbLight._m0[_2733].y) * _2798) * _2421) + ((((cbLight._m0[_2645].y * _2389) * ((_2695 * _2698) + _1086)) * _2719) * _2434);
    float _2810 = (((((_2779 * _2699) + _1087) * cbLight._m0[_2733].z) * _2798) * _2421) + ((((cbLight._m0[_2645].z * _2391) * ((_2695 * _2699) + _1087)) * _2719) * _2434);
    float _2866;
    float _2868;
    float _2870;
    if (_2474)
    {
        _2866 = _2808;
        _2868 = _2809;
        _2870 = _2810;
    }
    else
    {
        uint _2872 = _2398 + 2u;
        uint _2876 = _2398 + 10u;
        float _2890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2872].w)) * _938) * 0.949999988079071044921875);
        float _2891 = _2890 * _2890;
        float _2892 = cbLight._m0[_2872].x + _1014;
        float _2893 = cbLight._m0[_2872].y + _1015;
        float _2894 = cbLight._m0[_2872].z + _1016;
        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
        float _2899 = _2898 * _2892;
        float _2900 = _2898 * _2893;
        float _2901 = _2898 * _2894;
        float _2902 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2872].xyz));
        float _4819 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2906 = dot(vec3(_935, _936, _937), vec3(_2899, _2900, _2901));
        float _4830 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2910 = dot(vec3(cbLight._m0[_2872].xyz), vec3(_2899, _2900, _2901));
        float _4841 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2914 = _2891 * _2891;
        float _2918 = ((_2909 * _2909) * (_2914 + (-1.0))) + 1.0;
        float _2925 = exp2(log2(1.0 - (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) * 5.0);
        float _2932 = 1.0 - _2891;
        float _2942 = (0.5 / (((_2674 * ((_2905 * _2932) + _2891)) + 9.9999999392252902907785028219223e-09) + (((_2674 * _2932) + _2891) * _2905))) * _2905;
        float _4852 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2944 = (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2914 / ((_2918 * _2918) * 3.141590118408203125));
        float _2945 = isnan(1.0) ? _2413 : (isnan(_2413) ? 1.0 : min(_2413, 1.0));
        _2866 = (((((_2925 * _2696) + _1084) * cbLight._m0[_2876].x) * _2944) * _2945) + _2808;
        _2868 = (((((_2925 * _2698) + _1086) * cbLight._m0[_2876].y) * _2944) * _2945) + _2809;
        _2870 = (((((_2925 * _2699) + _1087) * cbLight._m0[_2876].z) * _2944) * _2945) + _2810;
    }
    float _2976;
    float _2978;
    float _2980;
    if (_2583)
    {
        _2976 = _2866;
        _2978 = _2868;
        _2980 = _2870;
    }
    else
    {
        uint _2987 = _2398 + 3u;
        uint _2991 = _2398 + 11u;
        float _3005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2987].w)) * _938) * 0.949999988079071044921875);
        float _3006 = _3005 * _3005;
        float _3007 = cbLight._m0[_2987].x + _1014;
        float _3008 = cbLight._m0[_2987].y + _1015;
        float _3009 = cbLight._m0[_2987].z + _1016;
        float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
        float _3014 = _3013 * _3007;
        float _3015 = _3013 * _3008;
        float _3016 = _3013 * _3009;
        float _3017 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2987].xyz));
        float _4868 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
        float _3020 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
        float _3021 = dot(vec3(_935, _936, _937), vec3(_3014, _3015, _3016));
        float _4879 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3024 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _3025 = dot(vec3(cbLight._m0[_2987].xyz), vec3(_3014, _3015, _3016));
        float _4890 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
        float _3029 = _3006 * _3006;
        float _3033 = ((_3024 * _3024) * (_3029 + (-1.0))) + 1.0;
        float _3040 = exp2(log2(1.0 - (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0)))) * 5.0);
        float _3047 = 1.0 - _3006;
        float _3057 = (0.5 / (((_2674 * ((_3020 * _3047) + _3006)) + 9.9999999392252902907785028219223e-09) + (((_2674 * _3047) + _3006) * _3020))) * _3020;
        float _4901 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
        float _3059 = (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_3029 / ((_3033 * _3033) * 3.141590118408203125));
        float _3060 = isnan(1.0) ? _2414 : (isnan(_2414) ? 1.0 : min(_2414, 1.0));
        _2976 = (((((_3040 * _2696) + _1084) * cbLight._m0[_2991].x) * _3059) * _3060) + _2866;
        _2978 = (((((_3040 * _2698) + _1086) * cbLight._m0[_2991].y) * _3059) * _3060) + _2868;
        _2980 = (((((_3040 * _2699) + _1087) * cbLight._m0[_2991].z) * _3059) * _3060) + _2870;
    }
    float _3126;
    float _3128;
    float _3130;
    float _3132;
    float _3134;
    float _3136;
    if (_2396.y == 0u)
    {
        uvec4 _3081 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3082 = _3081.x;
        uint _3093 = uint((float(_3081.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1023) / _3082))) + floor(float(uint(cbSceneParam._m0[85u].x * _1022) / _3082)));
        float _3103 = (log2(_2174 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3104 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
        uint _3107 = uint(isnan(14.0) ? _3104 : (isnan(_3104) ? 14.0 : min(_3104, 14.0)));
        uvec4 _3112 = texelFetch(g_lightClusterGridBuffer, int(((_3107 << 2u) + (_3093 << 6u)) >> 2u));
        uint _3113 = _3112.x;
        uint _3114 = _3081.z;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        if (((((1u << ((_3114 >> 4u) & 15u)) + 4294967295u) & _3113) == 0u) || ((_3114 & 240u) == 0u))
        {
            _3193 = 0.0;
            _3195 = 0.0;
            _3197 = 0.0;
            _3199 = 0.0;
            _3201 = 0.0;
            _3203 = 0.0;
        }
        else
        {
            float _3194;
            float _3196;
            float _3198;
            float _3200;
            float _3202;
            float _3204;
            float _3338 = 0.0;
            float _3339 = 0.0;
            float _3340 = 0.0;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            uint _3344 = 0u;
            uint _3353;
            bool _3354;
            for (;;)
            {
                _3353 = texelFetch(g_lightClassification, int((((_3107 << 5u) + (_3093 << 9u)) + (_3344 << 2u)) >> 2u)).x;
                _3354 = _3353 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3354)
                {
                    frontier_phi_66_pred = _3343;
                    frontier_phi_66_pred_1 = _3342;
                    frontier_phi_66_pred_2 = _3341;
                    frontier_phi_66_pred_3 = _3340;
                    frontier_phi_66_pred_4 = _3339;
                    frontier_phi_66_pred_5 = _3338;
                }
                else
                {
                    float _3462;
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    float _3467;
                    uint _3468;
                    _3462 = _3338;
                    _3463 = _3339;
                    _3464 = _3340;
                    _3465 = _3341;
                    _3466 = _3342;
                    _3467 = _3343;
                    _3468 = _3353;
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    float _3398;
                    float _3399;
                    for (;;)
                    {
                        uint _3472 = uint(findLSB(_3468)) + (_3344 << 5u);
                        uint _3469 = (_3468 + 4294967295u) & _3468;
                        uint _3474 = _3472 * 48u;
                        vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 3u)).x));
                        uint _3494 = (_3472 * 48u) + 4u;
                        vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3494)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 3u)).x));
                        uint _3513 = (_3472 * 48u) + 8u;
                        vec3 _3524 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3513)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 2u)).x));
                        float _3528 = _3488.x - _2172;
                        float _3529 = _3488.y - _2173;
                        float _3530 = _3488.z - _2174;
                        float _3531 = dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530));
                        float _3534 = inversesqrt(_3531);
                        float _3535 = _3534 * _3528;
                        float _3536 = _3534 * _3529;
                        float _3537 = _3534 * _3530;
                        float _3538 = dot(vec3(_1041, _1044, _1047), vec3(_3535, _3536, _3537));
                        float _3543 = 1.0 - (_3531 * _3488.w);
                        float _4927 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3544 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                        float _3545 = sqrt(_3531) * _3507.w;
                        float _3548 = 1.39999997615814208984375 / (_3545 + 1.39999997615814208984375);
                        float _3549 = _3548 * _3548;
                        float _3552 = ((1.0 - _3549) * _3538) + _3549;
                        float _3555 = _3545 * _3545;
                        float _3559 = ((isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0))) * _3544) / ((_3555 * 0.699999988079071044921875) + 1.0);
                        float _3563 = (-0.0) - _2172;
                        float _3564 = (-0.0) - _2173;
                        float _3565 = (-0.0) - _2174;
                        float _3569 = inversesqrt(dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565)));
                        float _3570 = _3569 * _3563;
                        float _3571 = _3569 * _3564;
                        float _3572 = _3569 * _3565;
                        float _3579 = exp2(log2(1.0 / ((_3555 * 3.5) + 5.0)) * 0.25);
                        float _3580 = 1.0 - _1116;
                        float _3587 = sqrt(1.0 - ((1.0 - (_3580 * _3580)) * (1.0 - (_3579 * _3579))));
                        float _3588 = _3587 * _3587;
                        float _3589 = _3588 * _3588;
                        float _3590 = _3570 + _3535;
                        float _3591 = _3571 + _3536;
                        float _3592 = _3572 + _3537;
                        float _3596 = inversesqrt(dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592)));
                        float _3600 = dot(vec3(_1041, _1044, _1047), vec3(_3570, _3571, _3572));
                        float _4943 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                        float _3603 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3604 = dot(vec3(_1041, _1044, _1047), vec3(_3596 * _3590, _3596 * _3591, _3596 * _3592));
                        float _4954 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                        float _3607 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                        float _3611 = ((_3607 * _3607) * (_3589 + (-1.0))) + 1.0;
                        float _3612 = _3548 * _3588;
                        float _3613 = _3612 * _3612;
                        float _3616 = ((1.0 - _3613) * _3538) + _3613;
                        float _4965 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                        float _3617 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                        float _3618 = 1.0 - _3588;
                        float _3628 = (0.5 / (((_3617 * ((_3603 * _3618) + _3588)) + 9.9999999392252902907785028219223e-09) + (((_3617 * _3618) + _3588) * _3603))) * _3617;
                        float _4976 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                        float _3639 = (((_3589 * 3.1415927410125732421875) * (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0)))) / ((_3611 * _3611) * ((_3555 * 2.1991131305694580078125) + 3.141590118408203125))) * _3544;
                        _3397 = (_3559 * _3507.x) + _3465;
                        _3398 = (_3559 * _3507.y) + _3466;
                        _3399 = (_3559 * _3507.z) + _3467;
                        _3394 = (_3639 * _3524.x) + _3462;
                        _3395 = (_3639 * _3524.y) + _3463;
                        _3396 = (_3639 * _3524.z) + _3464;
                        if (_3469 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3462 = _3394;
                            _3463 = _3395;
                            _3464 = _3396;
                            _3465 = _3397;
                            _3466 = _3398;
                            _3467 = _3399;
                            _3468 = _3469;
                        }
                    }
                    frontier_phi_66_pred = _3399;
                    frontier_phi_66_pred_1 = _3398;
                    frontier_phi_66_pred_2 = _3397;
                    frontier_phi_66_pred_3 = _3396;
                    frontier_phi_66_pred_4 = _3395;
                    frontier_phi_66_pred_5 = _3394;
                }
                _3204 = frontier_phi_66_pred;
                _3202 = frontier_phi_66_pred_1;
                _3200 = frontier_phi_66_pred_2;
                _3198 = frontier_phi_66_pred_3;
                _3196 = frontier_phi_66_pred_4;
                _3194 = frontier_phi_66_pred_5;
                uint _3345 = _3344 + 1u;
                if (_3345 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3338 = _3194;
                    _3339 = _3196;
                    _3340 = _3198;
                    _3341 = _3200;
                    _3342 = _3202;
                    _3343 = _3204;
                    _3344 = _3345;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3193 = _3194;
            _3195 = _3196;
            _3197 = _3198;
            _3199 = _3200;
            _3201 = _3202;
            _3203 = _3204;
        }
        uvec4 _3207 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3208 = _3207.z;
        uint _3210 = (_3208 >> 8u) & 15u;
        float _3306;
        float _3308;
        float _3310;
        float _3312;
        float _3314;
        float _3316;
        if (((4294967295u << _3210) & _3113) == 0u)
        {
            _3306 = _3193;
            _3308 = _3195;
            _3310 = _3197;
            _3312 = _3199;
            _3314 = _3201;
            _3316 = _3203;
        }
        else
        {
            float _3331 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
            float _3332 = _3331 * _2172;
            float _3333 = _3331 * _2173;
            float _3334 = _3331 * _2174;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3210 < ((_3208 >> 12u) & 15u))
            {
                float _3307;
                float _3309;
                float _3311;
                float _3313;
                float _3315;
                float _3317;
                float _3445 = _3193;
                float _3446 = _3195;
                float _3447 = _3197;
                float _3448 = _3199;
                float _3449 = _3201;
                float _3450 = _3203;
                uint _3451 = _3210;
                uint _3460;
                bool _3461;
                for (;;)
                {
                    _3460 = texelFetch(g_lightClassification, int((((_3107 << 5u) + (_3093 << 9u)) + (_3451 << 2u)) >> 2u)).x;
                    _3461 = _3460 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3461)
                    {
                        frontier_phi_72_pred = _3450;
                        frontier_phi_72_pred_1 = _3449;
                        frontier_phi_72_pred_2 = _3448;
                        frontier_phi_72_pred_3 = _3447;
                        frontier_phi_72_pred_4 = _3446;
                        frontier_phi_72_pred_5 = _3445;
                    }
                    else
                    {
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3937;
                        float _3938;
                        float _3939;
                        float _3940;
                        float _3941;
                        float _3942;
                        float _3657 = _3445;
                        float _3658 = _3446;
                        float _3659 = _3447;
                        float _3660 = _3448;
                        float _3661 = _3449;
                        float _3662 = _3450;
                        uint _3663 = _3460;
                        uint _3664;
                        vec4 _3689;
                        float _3690;
                        vec4 _3705;
                        vec3 _3717;
                        vec4 _3732;
                        vec4 _3747;
                        float _3793;
                        bool _3794;
                        for (;;)
                        {
                            uint _3674 = ((_3451 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3663));
                            _3664 = (_3663 + 4294967295u) & _3663;
                            uint _3676 = _3674 * 40u;
                            _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            _3690 = _3689.w;
                            uint _3692 = (_3674 * 40u) + 4u;
                            _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            uint _3707 = (_3674 * 40u) + 8u;
                            _3717 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x));
                            uint _3719 = (_3674 * 40u) + 16u;
                            _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            uint _3734 = (_3674 * 40u) + 20u;
                            _3747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 3u)).x));
                            uint _3749 = (_3674 * 40u) + 24u;
                            vec4 _3762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 3u)).x));
                            uint _3768 = (_3674 * 40u) + 28u;
                            vec4 _3781 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 3u)).x));
                            _3793 = fma(_2174, _3781.z, fma(_2173, _3781.y, _3781.x * _2172)) + _3781.w;
                            _3794 = !((fma(_2174, _3762.z, fma(_2173, _3762.y, _3762.x * _2172)) + _3762.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3794)
                            {
                                float _3821 = _3689.x - _2172;
                                float _3822 = _3689.y - _2173;
                                float _3823 = _3689.z - _2174;
                                float _3824 = dot(vec3(_3821, _3822, _3823), vec3(_3821, _3822, _3823));
                                float _3827 = inversesqrt(_3824);
                                float _3828 = _3827 * _3821;
                                float _3829 = _3827 * _3822;
                                float _3830 = _3827 * _3823;
                                float _3834 = 1.0 - (_3824 / (_3690 * _3690));
                                float _4987 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3835 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3839 = sqrt(_3824) * _3705.w;
                                float _3841 = 1.39999997615814208984375 / (_3839 + 1.39999997615814208984375);
                                float _3842 = _3841 * _3841;
                                float _3845 = ((1.0 - _3842) * dot(vec3(_3828, _3829, _3830), vec3(_1041, _1044, _1047))) + _3842;
                                float _3848 = _3839 * _3839;
                                float _3852 = (fma(_2174, _3732.z, fma(_2173, _3732.y, _3732.x * _2172)) + _3732.w) / _3793;
                                float _3853 = (fma(_2174, _3747.z, fma(_2173, _3747.y, _3747.x * _2172)) + _3747.w) / _3793;
                                float _3857 = 1.0 - dot(vec2(_3852, _3853), vec2(_3852, _3853));
                                float _5003 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3858 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3859 = _3858 * (((isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0))) * _3835) / ((_3848 * 0.699999988079071044921875) + 1.0));
                                float _3871 = exp2(log2(1.0 / ((_3848 * 3.5) + 5.0)) * 0.25);
                                float _3872 = 1.0 - _1116;
                                float _3879 = sqrt(1.0 - ((1.0 - (_3872 * _3872)) * (1.0 - (_3871 * _3871))));
                                float _3880 = _3879 * _3879;
                                float _3881 = _3880 * _3880;
                                float _3882 = _3828 - _3332;
                                float _3883 = _3829 - _3333;
                                float _3884 = _3830 - _3334;
                                float _3888 = inversesqrt(dot(vec3(_3882, _3883, _3884), vec3(_3882, _3883, _3884)));
                                float _3892 = dot(vec3(_1041, _1044, _1047), vec3((-0.0) - _3332, (-0.0) - _3333, (-0.0) - _3334));
                                float _5014 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3895 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3896 = dot(vec3(_1041, _1044, _1047), vec3(_3888 * _3882, _3888 * _3883, _3888 * _3884));
                                float _5025 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                                float _3899 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3903 = ((_3899 * _3899) * (_3881 + (-1.0))) + 1.0;
                                float _3904 = _3841 * _3880;
                                float _3905 = _3904 * _3904;
                                float _3911 = ((1.0 - _3905) * dot(vec3(_1041, _1044, _1047), vec3(_3828, _3829, _3830))) + _3905;
                                float _5036 = isnan(0.0) ? _3911 : (isnan(_3911) ? 0.0 : max(_3911, 0.0));
                                float _3912 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                                float _3913 = 1.0 - _3880;
                                float _3923 = (0.5 / (((_3912 * ((_3895 * _3913) + _3880)) + 9.9999999392252902907785028219223e-09) + (((_3912 * _3913) + _3880) * _3895))) * _3912;
                                float _5047 = isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0));
                                float _3933 = (_3858 * _3835) * (((_3881 * 3.1415927410125732421875) * (isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0)))) / ((_3903 * _3903) * ((_3848 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3859 * _3705.y;
                                frontier_phi_78_pred_1 = _3859 * _3705.x;
                                frontier_phi_78_pred_2 = _3933 * _3717.z;
                                frontier_phi_78_pred_3 = _3933 * _3717.y;
                                frontier_phi_78_pred_4 = _3933 * _3717.x;
                                frontier_phi_78_pred_5 = _3859 * _3705.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3941 = frontier_phi_78_pred;
                            _3940 = frontier_phi_78_pred_1;
                            _3939 = frontier_phi_78_pred_2;
                            _3938 = frontier_phi_78_pred_3;
                            _3937 = frontier_phi_78_pred_4;
                            _3942 = frontier_phi_78_pred_5;
                            _3647 = _3940 + _3660;
                            _3648 = _3941 + _3661;
                            _3649 = _3942 + _3662;
                            _3644 = _3937 + _3657;
                            _3645 = _3938 + _3658;
                            _3646 = _3939 + _3659;
                            if (_3664 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3657 = _3644;
                                _3658 = _3645;
                                _3659 = _3646;
                                _3660 = _3647;
                                _3661 = _3648;
                                _3662 = _3649;
                                _3663 = _3664;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3649;
                        frontier_phi_72_pred_1 = _3648;
                        frontier_phi_72_pred_2 = _3647;
                        frontier_phi_72_pred_3 = _3646;
                        frontier_phi_72_pred_4 = _3645;
                        frontier_phi_72_pred_5 = _3644;
                    }
                    _3317 = frontier_phi_72_pred;
                    _3315 = frontier_phi_72_pred_1;
                    _3313 = frontier_phi_72_pred_2;
                    _3311 = frontier_phi_72_pred_3;
                    _3309 = frontier_phi_72_pred_4;
                    _3307 = frontier_phi_72_pred_5;
                    uint _3452 = _3451 + 1u;
                    if (_3452 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3445 = _3307;
                        _3446 = _3309;
                        _3447 = _3311;
                        _3448 = _3313;
                        _3449 = _3315;
                        _3450 = _3317;
                        _3451 = _3452;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3317;
                frontier_phi_60_61_ladder_1 = _3315;
                frontier_phi_60_61_ladder_2 = _3311;
                frontier_phi_60_61_ladder_3 = _3309;
                frontier_phi_60_61_ladder_4 = _3307;
                frontier_phi_60_61_ladder_5 = _3313;
            }
            else
            {
                frontier_phi_60_61_ladder = _3203;
                frontier_phi_60_61_ladder_1 = _3201;
                frontier_phi_60_61_ladder_2 = _3197;
                frontier_phi_60_61_ladder_3 = _3195;
                frontier_phi_60_61_ladder_4 = _3193;
                frontier_phi_60_61_ladder_5 = _3199;
            }
            _3306 = frontier_phi_60_61_ladder_4;
            _3308 = frontier_phi_60_61_ladder_3;
            _3310 = frontier_phi_60_61_ladder_2;
            _3312 = frontier_phi_60_61_ladder_5;
            _3314 = frontier_phi_60_61_ladder_1;
            _3316 = frontier_phi_60_61_ladder;
        }
        float _3321 = isnan(1.0) ? _1100 : (isnan(_1100) ? 1.0 : min(_1100, 1.0));
        _3126 = (_3321 * _3312) + _2638;
        _3128 = (_3321 * _3314) + _2640;
        _3130 = (_3321 * _3316) + _2642;
        _3132 = ((_3306 * _1084) * _3321) + _2976;
        _3134 = ((_3308 * _1086) * _3321) + _2978;
        _3136 = ((_3310 * _1087) * _3321) + _2980;
    }
    else
    {
        _3126 = _2638;
        _3128 = _2640;
        _3130 = _2642;
        _3132 = _2976;
        _3134 = _2978;
        _3136 = _2980;
    }
    float _5063 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _5074 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _5085 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    uint _3156 = _256 + 6u;
    float _3164 = _1022 / cbSceneParam._m0[86u].x;
    float _3165 = _1023 / cbSceneParam._m0[86u].y;
    vec4 _3179 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3164, _3165, (log2((isnan(cbSceneParam._m0[77u].w) ? _957 : (isnan(_957) ? cbSceneParam._m0[77u].w : min(_957, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3181 = _3179.x;
    float _3182 = _3179.y;
    float _3183 = _3179.z;
    float _3184 = _3179.w;
    float _3256;
    float _3258;
    float _3260;
    float _3262;
    if (_957 > cbSceneParam._m0[78u].w)
    {
        float _3218 = isnan(_957) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _957 : min(cbSceneParam._m0[80u].w, _957));
        float _3219 = _3218 / _957;
        float _3230 = _3219 * _1007;
        float _3231 = _1008 * _3219;
        float _3232 = (-0.0) - _3231;
        float _3234 = _3219 * _1009;
        float _3236 = (cbSceneParam._m0[77u].w * _3232) / _3218;
        float _3237 = _3236 + cbSceneParam._m0[79u].w;
        float _3238 = cbSceneParam._m0[79u].w - _3231;
        float _3244 = sqrt(((_3230 * _3230) + (_3231 * _3231)) + (_3234 * _3234));
        float _3247 = (1.0 - (cbSceneParam._m0[77u].w / _3218)) * _3244;
        float _3252 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3254 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3407;
        if (abs((_3232 - _3236) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3407 = ((((_3237 > 0.0) ? exp2(_3252 * _3237) : (2.0 - exp2(_3254 * _3237))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3247;
        }
        else
        {
            float _3367 = 1.0 / cbSceneParam._m0[80u].x;
            float _3368 = isnan(_3238) ? _3237 : (isnan(_3237) ? _3238 : max(_3237, _3238));
            float _3369 = isnan(_3238) ? _3237 : (isnan(_3237) ? _3238 : min(_3237, _3238));
            float _3378 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : min(_3368, 0.0));
            float _3379 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : min(_3369, 0.0));
            _3407 = ((abs(_3244 / _3232) * cbSceneParam._m0[80u].y) * ((((_3378 - _3379) * 2.0) - ((exp2(_3252 * (isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0)))) - exp2(_3252 * (isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))))) * _3367)) - ((exp2(_3254 * _3378) - exp2(_3254 * _3379)) * _3367))) + (_3247 * cbSceneParam._m0[80u].z);
        }
        vec4 _3409 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3164, _3165, 1.0), 0.0);
        float _3418 = exp2((_3407 * (-1.44269502162933349609375)) * (1.0 - _3409.w));
        float _3419 = log2(_3418);
        float _3435 = log2(_3184);
        _3256 = (exp2(_3435 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3419 * cbSceneParam._m0[78u].x)) * _3409.x) / cbSceneParam._m0[78u].x)) + _3181;
        _3258 = (exp2(_3435 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3419 * cbSceneParam._m0[78u].y)) * _3409.y) / cbSceneParam._m0[78u].y)) + _3182;
        _3260 = (exp2(_3435 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3419 * cbSceneParam._m0[78u].z)) * _3409.z) / cbSceneParam._m0[78u].z)) + _3183;
        _3262 = _3418 * _3184;
    }
    else
    {
        _3256 = _3181;
        _3258 = _3182;
        _3260 = _3183;
        _3262 = _3184;
    }
    float _3274 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3275 = _3274 == 3.0;
    float _3276 = log2(_3262);
    float _3283 = exp2(_3276 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0))) * (_3126 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1100))) + ((_3132 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1906)) * cbPerFrame._m0[3u].x));
    float _3284 = exp2(_3276 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0))) * (_3128 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1100))) + ((_3134 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1906)) * cbPerFrame._m0[3u].x));
    float _3285 = exp2(_3276 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0))) * (_3130 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1100))) + ((_3136 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1906)) * cbPerFrame._m0[3u].x));
    float _3294 = (_3274 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3294 * (_3275 ? _3283 : (_3283 + (cbSceneParam._m0[72u].w * _3256)));
    SV_Target.y = _3294 * (_3275 ? _3284 : (_3284 + (cbSceneParam._m0[72u].w * _3258)));
    SV_Target.z = _3294 * (_3275 ? _3285 : (_3285 + (cbSceneParam._m0[72u].w * _3260)));
    SV_Target.w = cbInstanceData._m0[_3156].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3156].w;
}


