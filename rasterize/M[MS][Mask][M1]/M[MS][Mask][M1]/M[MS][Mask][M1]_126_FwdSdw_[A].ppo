#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1631;
float _4291;
float _4292;
float _4293;
float _4294;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _254 = _253 * _245;
    float _255 = _253 * _246;
    float _256 = _253 * _247;
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = _260 * NORMAL.x;
    float _262 = _260 * NORMAL.y;
    float _263 = _260 * NORMAL.z;
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = _267 * TANGENT.x;
    float _269 = _267 * TANGENT.y;
    float _270 = _267 * TANGENT.z;
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _313.x * cbMtdParam._m0[11u].x;
    float _320 = _313.y * cbMtdParam._m0[11u].y;
    float _321 = _313.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _359.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[23u].w) + _412) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4303 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _437 = (_430 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _438 = (_430 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _439 = (_430 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _292) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _293) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _359.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[23u].w) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4314 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _510 = (_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437;
    float _511 = (_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438;
    float _512 = (_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439;
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _292) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _293) + cbTextureTilingScale._m0[24u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _550 = _548.x;
    float _560 = dot(vec4(_550, _548.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _572 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _359.z) * 2.0) - ((((_550 - _560) * cbMtdParam._m0[23u].w) + _560) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4325 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _580 = (_573 * ((_531.x * cbMtdParam._m0[14u].x) - _510)) + _510;
    float _581 = (_573 * ((_531.y * cbMtdParam._m0[14u].y) - _511)) + _511;
    float _582 = (_573 * ((_531.z * cbMtdParam._m0[14u].z) - _512)) + _512;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _619 = _617.x;
    float _620 = _617.y;
    float _621 = _617.z;
    float _628 = ((_600.x - _619) * _430) + _619;
    float _629 = ((_600.y - _620) * _430) + _620;
    float _630 = ((_600.z - _621) * _430) + _621;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _292) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _293) + cbTextureTilingScale._m0[2u].w));
    float _653 = ((_642.x - _628) * _503) + _628;
    float _654 = ((_642.y - _629) * _503) + _629;
    float _655 = ((_642.z - _630) * _503) + _630;
    vec4 _667 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _292) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _293) + cbTextureTilingScale._m0[23u].w));
    float _680 = ((_667.z - _655) * _573) + _655;
    float _683 = ((((_667.x - _653) * _573) + _653) * 2.0) + (-1.0);
    float _685 = ((((_667.y - _654) * _573) + _654) * 2.0) + (-1.0);
    float _686 = dot(vec2(_683, _685), vec2(_683, _685));
    float _4336 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _691 = sqrt(1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _717 = (((_705.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _683;
    float _718 = (((_705.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _685;
    float _721 = fma(_691, _261, fma(_718, _268, _717 * _254));
    float _724 = fma(_691, _262, fma(_718, _269, _717 * _255));
    float _727 = fma(_691, _263, fma(_718, _270, _717 * _256));
    float _731 = inversesqrt(dot(vec3(_721, _724, _727), vec3(_721, _724, _727)));
    vec4 _758 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _760 = _758.x;
    float _761 = 1.0 - _760;
    float _769 = (cbMtdParam._m0[19u].x + dot(vec4(_731 * _721, _731 * _724, _731 * _727, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_760 - _761) * cbMtdParam._m0[24u].z) + _761) * cbMtdParam._m0[21u].z);
    float _4347 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _770 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _772 = (-0.0) - cbMtdParam._m0[24u].x;
    float _774 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _774 : (isnan(_774) ? 1.0 : min(_774, 1.0));
    float _782 = _770 - ((_770 * TEXCOORD_8.x) * _775);
    float _783 = _770 - ((_770 * TEXCOORD_8.y) * _775);
    float _784 = _770 - ((_770 * TEXCOORD_8.z) * _775);
    float _791 = (_782 * (cbMtdParam._m0[17u].x - _580)) + _580;
    float _792 = (_783 * (cbMtdParam._m0[17u].y - _581)) + _581;
    float _793 = (_784 * (cbMtdParam._m0[17u].z - _582)) + _582;
    vec4 _805 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _807 = _805.x;
    float _808 = 1.0 - _807;
    float _834 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_807 - _808) * cbMtdParam._m0[24u].w) + _808) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4368 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _835 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _843 = ((((cbMtdParam._m0[10u].x - _791) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _835) + _791;
    float _844 = ((((cbMtdParam._m0[10u].y - _792) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _835) + _792;
    float _845 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _793)) * _835) + _793;
    vec4 _871 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _873 = _871.x;
    float _891 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _292) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _293) + cbTextureTilingScale._m0[9u].w)).x - _873) * _430) + _873;
    float _908 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _292) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _293) + cbTextureTilingScale._m0[21u].w)).x - _891) * _503) + _891;
    float _925 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _292) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _293) + cbTextureTilingScale._m0[10u].w)).x - _908) * _573) + _908;
    float _929 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _925) * cbMtdParam._m0[19u].z) + _925;
    float _931 = _929 - (_929 * _782);
    float _933 = _931 - (_931 * _835);
    float _937 = (cbMtdParam._m0[19u].w * (_705.z - _680)) + _680;
    vec4 _953 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _960 = (_953.x * 2.0) + (-1.0);
    float _961 = (_953.y * 2.0) + (-1.0);
    float _962 = dot(vec2(_960, _961), vec2(_960, _961));
    float _4379 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _970 = ((_953.z - _937) * _782) + _937;
    float _973 = ((cbMtdParam._m0[23u].x - _970) * _835) + _970;
    vec4 _996 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1002 = (_996.x * 2.0) + (-1.0);
    float _1003 = (_996.y * 2.0) + (-1.0);
    float _1004 = dot(vec2(_1002, _1003), vec2(_1002, _1003));
    float _4390 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1019 = ((sqrt(1.0 - (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) - _691) * _784) + _691;
    float _1022 = (((_960 - _717) * _782) + _717) + (cbMtdParam._m0[21u].x * _717);
    float _1023 = (((_961 - _718) * _783) + _718) + (cbMtdParam._m0[21u].x * _718);
    float _1034 = (((_1002 - _1022) + (_1022 * cbMtdParam._m0[22u].z)) * _835) + _1022;
    float _1035 = (((_1003 - _1023) + (_1023 * cbMtdParam._m0[22u].z)) * _835) + _1023;
    float _1036 = (_835 * (sqrt(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) - _1019)) + _1019;
    float _1038 = cbMtdParam._m0[22u].x + _705.w;
    float _1041 = fma(_1036, _261, fma(_1035, _268, _1034 * _254));
    float _1044 = fma(_1036, _262, fma(_1035, _269, _1034 * _255));
    float _1047 = fma(_1036, _263, fma(_1035, _270, _1034 * _256));
    float _1051 = inversesqrt(dot(vec3(_1041, _1044, _1047), vec3(_1041, _1044, _1047)));
    float _1052 = _1051 * _1041;
    float _1053 = _1051 * _1044;
    float _1054 = _1051 * _1047;
    float _4401 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _1055 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _4412 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _4423 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4434 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4445 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4456 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _1060 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _1074 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1114 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1124 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1114);
    float _1125 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1114);
    float _1126 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1114);
    float _1130 = inversesqrt(dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126)));
    float _1131 = _1124 * _1130;
    float _1132 = _1125 * _1130;
    float _1133 = _1126 * _1130;
    vec4 _1138 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1140 = _1138.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1312 = sqrt(((_1124 * _1124) + (_1125 * _1125)) + (_1126 * _1126));
        float _1318 = (cbMatDynParam._m0[5u].x * _1312) + cbMatDynParam._m0[5u].y;
        float _4467 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1323 = (cbMatDynParam._m0[5u].z * _1312) + cbMatDynParam._m0[5u].w;
        float _4478 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) - _1319)) + _1319) < ((_1140 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1151 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1152 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1170 = fma(_1054, cbSceneParam._m0[5u].z, fma(_1053, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1052));
    float _1173 = fma(_1054, cbSceneParam._m0[6u].z, fma(_1053, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1052));
    float _1176 = fma(_1054, cbSceneParam._m0[7u].z, fma(_1053, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1052));
    uint _1189 = _273 + 9u;
    uint _1190 = _1189 + uint(cbMatDynParam._m0[0u].w);
    float _1196 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) * cbInstanceData._m0[_1190].x;
    float _1197 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * cbInstanceData._m0[_1190].y;
    float _1198 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * cbInstanceData._m0[_1190].z;
    float _4489 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _1199 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _4500 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    float _1200 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _4511 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _1201 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _1202 = 1.0 - _1060;
    float _1203 = _1199 * _1202;
    float _1204 = _1200 * _1202;
    float _1205 = _1201 * _1202;
    float _1210 = (_1199 + (-0.039999999105930328369140625)) * _1060;
    float _1211 = (_1200 + (-0.039999999105930328369140625)) * _1060;
    float _1212 = (_1201 + (-0.039999999105930328369140625)) * _1060;
    float _1213 = _1210 + 0.039999999105930328369140625;
    float _1215 = _1211 + 0.039999999105930328369140625;
    float _1216 = _1212 + 0.039999999105930328369140625;
    vec4 _1225 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1151, cbSceneParam._m0[86u].y * _1152));
    float _1229 = ((isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * TEXCOORD_5.w) * _1225.x;
    float _1230 = dot(vec3(_1052, _1053, _1054), vec3(_1131, _1132, _1133));
    float _1233 = _1230 * 2.0;
    float _1237 = (_1233 * _1052) - _1131;
    float _1238 = (_1233 * _1053) - _1132;
    float _1239 = (_1233 * _1054) - _1133;
    float _1243 = abs(dot(vec3(_1131, _1132, _1133), vec3(_1052, _1053, _1054)));
    float _4522 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
    float _1245 = sqrt(_1055);
    float _1258 = exp2((_1245 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1245 * 3.0));
    float _1264 = (1.0 - _1258) * ((_1245 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1265 = _1258 * _1245;
    float _1293 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1297 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1301 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1630;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1355 = fma(_1301, cbModelParam._m0[26u].z, fma(_1297, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1293));
        float _1359 = fma(_1301, cbModelParam._m0[27u].z, fma(_1297, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1293));
        float _1363 = fma(_1301, cbModelParam._m0[28u].z, fma(_1297, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1293));
        float _1388 = _1293 + _1052;
        float _1389 = _1297 + _1053;
        float _1390 = _1301 + _1054;
        float _1400 = fma(_1390, cbModelParam._m0[26u].z, fma(_1389, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1388)) - _1355;
        float _1401 = fma(_1390, cbModelParam._m0[27u].z, fma(_1389, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1388)) - _1359;
        float _1402 = fma(_1390, cbModelParam._m0[28u].z, fma(_1389, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1388)) - _1363;
        float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
        float _1419 = ((_1406 * _1400) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1355 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1406 * _1401) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1359 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1406 * _1402) / cbModelParam._m0[34u].z) + ((((((_1363 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        float _1458 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1424.x + (-0.5));
        float _1460 = _1458 * (_1424.y + (-0.5));
        float _1461 = _1458 * (_1424.z + (-0.5));
        float _1468 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1431.x + (-0.5));
        float _1470 = _1468 * (_1431.y + (-0.5));
        float _1471 = _1468 * (_1431.z + (-0.5));
        float _1478 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1438.x + (-0.5));
        float _1480 = _1478 * (_1438.y + (-0.5));
        float _1481 = _1478 * (_1438.z + (-0.5));
        float _1488 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1445.x + (-0.5));
        float _1490 = _1488 * (_1445.y + (-0.5));
        float _1491 = _1488 * (_1445.z + (-0.5));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = _1459 * 0.5;
        float _1496 = _1469 * 0.5;
        float _1497 = _1479 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1512 = (dot(vec3(_1052, _1053, _1054), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4548 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1522 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4559 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4570 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_1524 + 1.0))) + _1529) * _1492;
        float _1539 = _1460 * 0.5;
        float _1540 = _1470 * 0.5;
        float _1541 = _1480 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_1052, _1053, _1054), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4581 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4592 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4603 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_1566 + 1.0))) + _1571) * _1493;
        float _1581 = _1461 * 0.5;
        float _1582 = _1471 * 0.5;
        float _1583 = _1481 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_1052, _1053, _1054), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4614 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4625 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4636 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_1608 + 1.0))) + _1613) * _1494;
        _1630 = _1461;
        _1632 = _1460;
        _1633 = _1459;
        _1634 = _1471;
        _1635 = _1470;
        _1636 = _1469;
        _1637 = _1481;
        _1638 = _1480;
        _1639 = _1479;
        _1640 = _1494;
        _1641 = _1493;
        _1642 = _1492;
        _1643 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1644 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1645 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
    }
    else
    {
        _1630 = _1631;
        _1632 = _1631;
        _1633 = _1631;
        _1634 = _1631;
        _1635 = _1631;
        _1636 = _1631;
        _1637 = _1631;
        _1638 = _1631;
        _1639 = _1631;
        _1640 = _1631;
        _1641 = _1631;
        _1642 = _1631;
        _1643 = 0.0;
        _1644 = 0.0;
        _1645 = 0.0;
    }
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    float _1953;
    float _1954;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1671 = fma(_1301, cbModelParam._m0[30u].z, fma(_1297, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1293));
        float _1675 = fma(_1301, cbModelParam._m0[31u].z, fma(_1297, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1293));
        float _1679 = fma(_1301, cbModelParam._m0[32u].z, fma(_1297, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1293));
        float _1702 = _1293 + _1052;
        float _1703 = _1297 + _1053;
        float _1704 = _1301 + _1054;
        float _1714 = fma(_1704, cbModelParam._m0[30u].z, fma(_1703, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1702)) - _1671;
        float _1715 = fma(_1704, cbModelParam._m0[31u].z, fma(_1703, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1702)) - _1675;
        float _1716 = fma(_1704, cbModelParam._m0[32u].z, fma(_1703, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1702)) - _1679;
        float _1720 = inversesqrt(dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716)));
        float _1733 = ((_1720 * _1714) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1671 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1734 = ((_1720 * _1715) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1675 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1735 = ((_1720 * _1716) / cbModelParam._m0[35u].z) + ((((((_1679 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1737 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1733, _1734, _1735), 0.0);
        vec4 _1744 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1733, _1734, _1735), 0.0);
        vec4 _1751 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1733, _1734, _1735), 0.0);
        vec4 _1758 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1733, _1734, _1735), 0.0);
        float _1770 = exp2((_1737.w + (-0.5)) * 20.0) * 2.0;
        float _1771 = _1770 * (_1737.x + (-0.5));
        float _1772 = _1770 * (_1737.y + (-0.5));
        float _1773 = _1770 * (_1737.z + (-0.5));
        float _1780 = exp2((_1744.w + (-0.5)) * 20.0) * 2.0;
        float _1781 = _1780 * (_1744.x + (-0.5));
        float _1782 = _1780 * (_1744.y + (-0.5));
        float _1783 = _1780 * (_1744.z + (-0.5));
        float _1790 = exp2((_1751.w + (-0.5)) * 20.0) * 2.0;
        float _1791 = _1790 * (_1751.x + (-0.5));
        float _1792 = _1790 * (_1751.y + (-0.5));
        float _1793 = _1790 * (_1751.z + (-0.5));
        float _1800 = exp2((_1758.w + (-0.5)) * 20.0) * 2.0;
        float _1801 = _1800 * (_1758.x + (-0.5));
        float _1802 = _1800 * (_1758.y + (-0.5));
        float _1803 = _1800 * (_1758.z + (-0.5));
        float _1804 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1805 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1806 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1807 = _1771 * 0.5;
        float _1808 = _1781 * 0.5;
        float _1809 = _1791 * 0.5;
        float _1810 = dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809));
        float _1815 = (_1810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1810);
        float _1823 = (dot(vec3(_1052, _1053, _1054), vec3(_1815 * _1807, _1815 * _1808, _1815 * _1809)) + 1.0) * 0.5;
        float _4677 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1832 = sqrt(((_1808 * _1808) + (_1807 * _1807)) + (_1809 * _1809)) / (_1804 + 9.9999997473787516355514526367188e-06);
        float _4688 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1833 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _1834 = _1833 * 2.0;
        float _1838 = (1.0 - _1833) / (_1833 + 1.0);
        float _4699 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _1848 = ((((1.0 - _1839) * (_1834 + 2.0)) * exp2(log2(isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_1834 + 1.0))) + _1839) * _1804;
        float _1849 = _1772 * 0.5;
        float _1850 = _1782 * 0.5;
        float _1851 = _1792 * 0.5;
        float _1852 = dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851));
        float _1857 = (_1852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1852);
        float _1865 = (dot(vec3(_1052, _1053, _1054), vec3(_1857 * _1849, _1857 * _1850, _1857 * _1851)) + 1.0) * 0.5;
        float _4710 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1874 = sqrt(((_1850 * _1850) + (_1849 * _1849)) + (_1851 * _1851)) / (_1805 + 9.9999997473787516355514526367188e-06);
        float _4721 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1875 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _1876 = _1875 * 2.0;
        float _1880 = (1.0 - _1875) / (_1875 + 1.0);
        float _4732 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _1890 = ((((1.0 - _1881) * (_1876 + 2.0)) * exp2(log2(isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_1876 + 1.0))) + _1881) * _1805;
        float _1891 = _1773 * 0.5;
        float _1892 = _1783 * 0.5;
        float _1893 = _1793 * 0.5;
        float _1894 = dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893));
        float _1899 = (_1894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1894);
        float _1907 = (dot(vec3(_1052, _1053, _1054), vec3(_1899 * _1891, _1899 * _1892, _1899 * _1893)) + 1.0) * 0.5;
        float _4743 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1916 = sqrt(((_1892 * _1892) + (_1891 * _1891)) + (_1893 * _1893)) / (_1806 + 9.9999997473787516355514526367188e-06);
        float _4754 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1917 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _1918 = _1917 * 2.0;
        float _1922 = (1.0 - _1917) / (_1917 + 1.0);
        float _4765 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _1932 = ((((1.0 - _1923) * (_1918 + 2.0)) * exp2(log2(isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_1918 + 1.0))) + _1923) * _1806;
        _1940 = _1773;
        _1941 = _1772;
        _1942 = _1771;
        _1943 = _1783;
        _1944 = _1782;
        _1945 = _1781;
        _1946 = _1793;
        _1947 = _1792;
        _1948 = _1791;
        _1949 = _1806;
        _1950 = _1805;
        _1951 = _1804;
        _1952 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)));
        _1953 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)));
        _1954 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)));
    }
    else
    {
        _1940 = _1631;
        _1941 = _1631;
        _1942 = _1631;
        _1943 = _1631;
        _1944 = _1631;
        _1945 = _1631;
        _1946 = _1631;
        _1947 = _1631;
        _1948 = _1631;
        _1949 = _1631;
        _1950 = _1631;
        _1951 = _1631;
        _1952 = 0.0;
        _1953 = 0.0;
        _1954 = 0.0;
    }
    float _1964 = (cbModelParam._m0[1u].x * (_1952 - _1643)) + _1643;
    float _1965 = (cbModelParam._m0[1u].x * (_1953 - _1644)) + _1644;
    float _1966 = (cbModelParam._m0[1u].x * (_1954 - _1645)) + _1645;
    float _1987 = fma(_1966, cbSceneParam._m0[89u].z, fma(_1965, cbSceneParam._m0[89u].y, _1964 * cbSceneParam._m0[89u].x));
    float _1990 = fma(_1966, cbSceneParam._m0[90u].z, fma(_1965, cbSceneParam._m0[90u].y, _1964 * cbSceneParam._m0[90u].x));
    float _1993 = fma(_1966, cbSceneParam._m0[91u].z, fma(_1965, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1964));
    float _2008 = _1237 * 0.5;
    float _2009 = _1238 * 0.5;
    float _2010 = _1239 * 0.5;
    float _2011 = dot(vec4(_2008, _2009, _2010, 1.0), vec4(_1942, _1945, _1948, _1951));
    float _2014 = dot(vec4(_2008, _2009, _2010, 1.0), vec4(_1941, _1944, _1947, _1950));
    float _2017 = dot(vec4(_2008, _2009, _2010, 1.0), vec4(_1940, _1943, _1946, _1949));
    float _2051;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2024 = dot(vec4(_2008, _2009, _2010, 1.0), vec4(_1630, _1634, _1637, _1640));
        float _2028 = dot(vec4(_2008, _2009, _2010, 1.0), vec4(_1632, _1635, _1638, _1641));
        float _2032 = dot(vec4(_2008, _2009, _2010, 1.0), vec4(_1633, _1636, _1639, _1642));
        float _2039 = dot(vec4(cbModelParam._m0[39u]), vec4(_2008, _2009, _2010, 1.0));
        _2051 = dot(vec3(isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0)), isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)), isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2039) ? 0.0 : (isnan(0.0) ? _2039 : max(0.0, _2039))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2051 = 1.0;
    }
    float _2062;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2053 = dot(vec4(cbModelParam._m0[40u]), vec4(_2008, _2009, _2010, 1.0));
        _2062 = dot(vec3(isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0)), isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0)), isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2053) ? 0.0 : (isnan(0.0) ? _2053 : max(0.0, _2053))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2062 = 1.0;
    }
    float _2066 = (_2062 * cbModelParam._m0[1u].x) + (_2051 * (1.0 - cbModelParam._m0[1u].x));
    float _2076 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1055);
    float _2077 = isnan(_2076) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2076 : min(cbModelParam._m0[25u].z, _2076));
    float _2157;
    float _2159;
    float _2161;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2124 = fma(_1301, cbModelParam._m0[13u].z, fma(_1297, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1293)) + cbModelParam._m0[13u].w;
        float _2128 = fma(_1301, cbModelParam._m0[14u].z, fma(_1297, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1293)) + cbModelParam._m0[14u].w;
        float _2132 = fma(_1301, cbModelParam._m0[15u].z, fma(_1297, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1293)) + cbModelParam._m0[15u].w;
        float _2135 = fma(_1239, cbModelParam._m0[13u].z, fma(_1238, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1237));
        float _2138 = fma(_1239, cbModelParam._m0[14u].z, fma(_1238, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1237));
        float _2141 = fma(_1239, cbModelParam._m0[15u].z, fma(_1238, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1237));
        float _2169;
        if (_2135 > 0.0)
        {
            _2169 = abs((1.0 - _2124) / _2135);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2124 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2169 = frontier_phi_17_15_ladder;
        }
        float _2341;
        if (_2138 > 0.0)
        {
            _2341 = abs((1.0 - _2128) / _2138);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2128 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2341 = frontier_phi_26_22_ladder;
        }
        float _2636;
        if (_2141 > 0.0)
        {
            _2636 = abs((1.0 - _2132) / _2141);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2141 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2132 + 1.0) / _2141);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2636 = frontier_phi_38_33_ladder;
        }
        float _2638 = isnan(_2341) ? _2169 : (isnan(_2169) ? _2341 : min(_2169, _2341));
        float _2639 = isnan(_2636) ? _2638 : (isnan(_2638) ? _2636 : min(_2638, _2636));
        float _2643 = (_2639 * _2135) + _2124;
        float _2644 = (_2639 * _2138) + _2128;
        float _2645 = (_2639 * _2141) + _2132;
        float _2646 = _2639 * 9.9999997473787516355514526367188e-05;
        float _2648 = (-1.0) - _2646;
        float _2650 = _2646 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2645 > _2650) || ((_2645 < _2648) || ((_2644 > _2650) || ((_2644 < _2648) || ((_2643 < _2648) || (_2643 > _2650))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2645, cbModelParam._m0[9u].z, fma(_2644, cbModelParam._m0[9u].y, _2643 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2645, cbModelParam._m0[10u].z, fma(_2644, cbModelParam._m0[10u].y, _2643 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2645, cbModelParam._m0[11u].z, fma(_2644, cbModelParam._m0[11u].y, _2643 * cbModelParam._m0[11u].x))), _2077);
            frontier_phi_16_38_ladder = _2790.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2790.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2790.x * cbModelParam._m0[1u].y;
        }
        _2157 = frontier_phi_16_38_ladder_2;
        _2159 = frontier_phi_16_38_ladder_1;
        _2161 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2145 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1237, _1238, _1239), _2077);
        _2157 = _2145.x * cbModelParam._m0[1u].y;
        _2159 = _2145.y * cbModelParam._m0[1u].y;
        _2161 = _2145.z * cbModelParam._m0[1u].y;
    }
    float _2165 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1055);
    float _2166 = isnan(_2165) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2165 : min(cbModelParam._m0[25u].w, _2165));
    float _2256;
    float _2258;
    float _2260;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2220 = fma(_1301, cbModelParam._m0[21u].z, fma(_1297, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1293)) + cbModelParam._m0[21u].w;
        float _2224 = fma(_1301, cbModelParam._m0[22u].z, fma(_1297, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1293)) + cbModelParam._m0[22u].w;
        float _2228 = fma(_1301, cbModelParam._m0[23u].z, fma(_1297, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1293)) + cbModelParam._m0[23u].w;
        float _2231 = fma(_1239, cbModelParam._m0[21u].z, fma(_1238, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1237));
        float _2234 = fma(_1239, cbModelParam._m0[22u].z, fma(_1238, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1237));
        float _2237 = fma(_1239, cbModelParam._m0[23u].z, fma(_1238, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1237));
        float _2346;
        if (_2231 > 0.0)
        {
            _2346 = abs((1.0 - _2220) / _2231);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2231 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2220 + 1.0) / _2231);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2346 = frontier_phi_28_24_ladder;
        }
        float _2663;
        if (_2234 > 0.0)
        {
            _2663 = abs((1.0 - _2224) / _2234);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2234 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2224 + 1.0) / _2234);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2663 = frontier_phi_40_35_ladder;
        }
        float _3001;
        if (_2237 > 0.0)
        {
            _3001 = abs((1.0 - _2228) / _2237);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2237 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2228 + 1.0) / _2237);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3001 = frontier_phi_50_47_ladder;
        }
        float _3003 = isnan(_2663) ? _2346 : (isnan(_2346) ? _2663 : min(_2346, _2663));
        float _3004 = isnan(_3001) ? _3003 : (isnan(_3003) ? _3001 : min(_3003, _3001));
        float _3008 = (_3004 * _2231) + _2220;
        float _3009 = (_3004 * _2234) + _2224;
        float _3010 = (_3004 * _2237) + _2228;
        float _3011 = _3004 * 9.9999997473787516355514526367188e-05;
        float _3012 = (-1.0) - _3011;
        float _3014 = _3011 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3010 > _3014) || ((_3010 < _3012) || ((_3009 > _3014) || ((_3009 < _3012) || ((_3008 < _3012) || (_3008 > _3014))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3132 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3010, cbModelParam._m0[17u].z, fma(_3009, cbModelParam._m0[17u].y, _3008 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3010, cbModelParam._m0[18u].z, fma(_3009, cbModelParam._m0[18u].y, _3008 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3010, cbModelParam._m0[19u].z, fma(_3009, cbModelParam._m0[19u].y, _3008 * cbModelParam._m0[19u].x))), _2166);
            frontier_phi_25_50_ladder = _3132.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3132.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3132.x * cbModelParam._m0[1u].z;
        }
        _2256 = frontier_phi_25_50_ladder_2;
        _2258 = frontier_phi_25_50_ladder_1;
        _2260 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2240 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1237, _1238, _1239), _2166);
        _2256 = _2240.x * cbModelParam._m0[1u].z;
        _2258 = _2240.y * cbModelParam._m0[1u].z;
        _2260 = _2240.z * cbModelParam._m0[1u].z;
    }
    float _2273 = (((_1264 * _1213) + _1265) * _1229) * ((cbModelParam._m0[1u].w * (_2256 - _2157)) + _2157);
    float _2275 = (((_1264 * _1215) + _1265) * _1229) * ((cbModelParam._m0[1u].w * (_2258 - _2159)) + _2159);
    float _2277 = (((_1264 * _1216) + _1265) * _1229) * ((cbModelParam._m0[1u].w * (_2260 - _2161)) + _2161);
    float _2280 = fma(_2277, cbSceneParam._m0[89u].z, fma(_2275, cbSceneParam._m0[89u].y, _2273 * cbSceneParam._m0[89u].x));
    float _2283 = fma(_2277, cbSceneParam._m0[90u].z, fma(_2275, cbSceneParam._m0[90u].y, _2273 * cbSceneParam._m0[90u].x));
    float _2286 = fma(_2277, cbSceneParam._m0[91u].z, fma(_2275, cbSceneParam._m0[91u].y, _2273 * cbSceneParam._m0[91u].x));
    float _2320 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2324 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2328 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2332 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2333 = _2320 / _2332;
    float _2334 = _2324 / _2332;
    float _2335 = _2328 / _2332;
    float _2482;
    float _2483;
    float _2484;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2362 = ((uint(_2335 > cbSceneParam._m0[59u].y) + uint(_2335 > cbSceneParam._m0[59u].x)) + uint(_2335 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2363 = _2362 + 43u;
        uint _2371 = _2362 + 44u;
        uint _2379 = _2362 + 45u;
        uint _2387 = _2362 + 46u;
        float _2398 = fma(_2332, cbSceneParam._m0[_2363].w, fma(_2328, cbSceneParam._m0[_2363].z, fma(_2324, cbSceneParam._m0[_2363].y, _2320 * cbSceneParam._m0[_2363].x)));
        float _2402 = fma(_2332, cbSceneParam._m0[_2371].w, fma(_2328, cbSceneParam._m0[_2371].z, fma(_2324, cbSceneParam._m0[_2371].y, _2320 * cbSceneParam._m0[_2371].x)));
        float _2410 = fma(_2332, cbSceneParam._m0[_2387].w, fma(_2328, cbSceneParam._m0[_2387].z, fma(_2324, cbSceneParam._m0[_2387].y, _2320 * cbSceneParam._m0[_2387].x)));
        float _2415 = cbSceneParam._m0[33u].z * _2410;
        float _2417 = cbSceneParam._m0[33u].w * _2410;
        float _2420 = fma(_2332, cbSceneParam._m0[_2379].w, fma(_2328, cbSceneParam._m0[_2379].z, fma(_2324, cbSceneParam._m0[_2379].y, _2320 * cbSceneParam._m0[_2379].x))) / _2410;
        float _2468 = (cbSceneParam._m0[33u].x - sqrt(((_2334 * _2334) + (_2333 * _2333)) + (_2335 * _2335))) * cbSceneParam._m0[33u].y;
        float _4891 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2475 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2415 + _2398) / _2410, (_2417 + _2402) / _2410), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2417 + _2398) / _2410, (_2402 - _2415) / _2410), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2398 - _2415) / _2410, (_2402 - _2417) / _2410), _2420), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2398 - _2417) / _2410, (_2415 + _2402) / _2410), _2420), 0.0)).x), vec4(0.25)));
        _2482 = 1.0 - (_2475 * cbSceneParam._m0[34u].x);
        _2483 = 1.0 - (_2475 * cbSceneParam._m0[34u].y);
        _2484 = 1.0 - (_2475 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2482 = 1.0;
        _2483 = 1.0;
        _2484 = 1.0;
    }
    float _2548;
    float _2550;
    float _2552;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2536 = fma(_2332, cbSceneParam._m0[63u].w, fma(_2328, cbSceneParam._m0[63u].z, fma(_2324, cbSceneParam._m0[63u].y, _2320 * cbSceneParam._m0[63u].x)));
        float _2537 = fma(_2332, cbSceneParam._m0[60u].w, fma(_2328, cbSceneParam._m0[60u].z, fma(_2324, cbSceneParam._m0[60u].y, _2320 * cbSceneParam._m0[60u].x))) / _2536;
        float _2538 = fma(_2332, cbSceneParam._m0[61u].w, fma(_2328, cbSceneParam._m0[61u].z, fma(_2324, cbSceneParam._m0[61u].y, _2320 * cbSceneParam._m0[61u].x))) / _2536;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2537 >= cbSceneParam._m0[64u].x) && (_2538 >= cbSceneParam._m0[64u].y)) && (_2537 <= cbSceneParam._m0[64u].z)) && (_2538 <= cbSceneParam._m0[64u].w))
        {
            float _2676 = fma(_2332, cbSceneParam._m0[62u].w, fma(_2328, cbSceneParam._m0[62u].z, fma(_2324, cbSceneParam._m0[62u].y, _2320 * cbSceneParam._m0[62u].x))) / _2536;
            float _2680 = isnan(cbSceneParam._m0[41u].w) ? _2676 : (isnan(_2676) ? cbSceneParam._m0[41u].w : max(_2676, cbSceneParam._m0[41u].w));
            float _2723 = (cbSceneParam._m0[33u].x - sqrt(((_2334 * _2334) + (_2333 * _2333)) + (_2335 * _2335))) * cbSceneParam._m0[33u].y;
            float _4907 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
            float _2730 = (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2537, cbSceneParam._m0[33u].w + _2538), _2680), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2537, _2538 - cbSceneParam._m0[33u].z), _2680), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2537 - cbSceneParam._m0[33u].z, _2538 - cbSceneParam._m0[33u].w), _2680), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2537 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2538), _2680), 0.0)).x), vec4(0.25)));
            float _2734 = 1.0 - (_2730 * cbSceneParam._m0[34u].x);
            float _2735 = 1.0 - (_2730 * cbSceneParam._m0[34u].y);
            float _2736 = 1.0 - (_2730 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2736) ? _2484 : (isnan(_2484) ? _2736 : min(_2484, _2736));
            frontier_phi_37_36_ladder_1 = isnan(_2735) ? _2483 : (isnan(_2483) ? _2735 : min(_2483, _2735));
            frontier_phi_37_36_ladder_2 = isnan(_2734) ? _2482 : (isnan(_2482) ? _2734 : min(_2482, _2734));
        }
        else
        {
            frontier_phi_37_36_ladder = _2484;
            frontier_phi_37_36_ladder_1 = _2483;
            frontier_phi_37_36_ladder_2 = _2482;
        }
        _2548 = frontier_phi_37_36_ladder_2;
        _2550 = frontier_phi_37_36_ladder_1;
        _2552 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2548 = _2482;
        _2550 = _2483;
        _2552 = _2484;
    }
    uvec4 _2557 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2559 = _2557.x * 14u;
    uint _2560 = _2559 + 13u;
    float _2567 = _1229 + (-1.0);
    float _2572 = (cbLight._m0[_2560].x * _2567) + 1.0;
    float _2573 = (cbLight._m0[_2560].y * _2567) + 1.0;
    float _2574 = (cbLight._m0[_2560].z * _2567) + 1.0;
    float _2575 = (cbLight._m0[_2560].w * _2567) + 1.0;
    uint _2576 = _2559 + 5u;
    float _2582 = isnan(1.0) ? _2573 : (isnan(_2573) ? 1.0 : min(_2573, 1.0));
    uint _2586 = _2559 + 4u;
    float _2595 = isnan(1.0) ? _2572 : (isnan(_2572) ? 1.0 : min(_2572, 1.0));
    uint _2599 = _2559 | 1u;
    float _2610 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_1052, _1053, _1054));
    float _2613 = dot(vec3(cbLight._m0[_2599].xyz), vec3(_1052, _1053, _1054));
    float _4943 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _4954 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2618 = (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * 0.3183098733425140380859375;
    float _2620 = (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * 0.3183098733425140380859375;
    float _2627 = ((cbLight._m0[_2576].x * _2582) * _2620) + (((cbLight._m0[_2586].x * _2548) * _2595) * _2618);
    float _2628 = ((_2582 * cbLight._m0[_2576].y) * _2620) + (((cbLight._m0[_2586].y * _2550) * _2595) * _2618);
    float _2629 = ((_2582 * cbLight._m0[_2576].z) * _2620) + (((cbLight._m0[_2586].z * _2552) * _2595) * _2618);
    uvec4 _2633 = floatBitsToUint(cbLight._m0[_2559 + 12u]);
    bool _2635 = _2633.x == 0u;
    float _2737;
    float _2739;
    float _2741;
    if (_2635)
    {
        _2737 = _2627;
        _2739 = _2628;
        _2741 = _2629;
    }
    else
    {
        uint _2745 = _2559 + 6u;
        float _2761 = (dot(vec3(cbLight._m0[_2559 + 2u].xyz), vec3(_1052, _1053, _1054)) * 0.5) + 0.5;
        float _2762 = _2761 * _2761;
        float _4965 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2763 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
        float _2764 = isnan(1.0) ? _2574 : (isnan(_2574) ? 1.0 : min(_2574, 1.0));
        _2737 = (((cbLight._m0[_2745].x * 0.3183098733425140380859375) * _2763) * _2764) + _2627;
        _2739 = (((cbLight._m0[_2745].y * 0.3183098733425140380859375) * _2763) * _2764) + _2628;
        _2741 = (((cbLight._m0[_2745].z * 0.3183098733425140380859375) * _2763) * _2764) + _2629;
    }
    bool _2744 = _2633.y == 0u;
    float _2799;
    float _2801;
    float _2803;
    if (_2744)
    {
        _2799 = _2737;
        _2801 = _2739;
        _2803 = _2741;
    }
    else
    {
        uint _2972 = _2559 + 7u;
        float _2988 = (dot(vec3(cbLight._m0[_2559 + 3u].xyz), vec3(_1052, _1053, _1054)) * 0.5) + 0.5;
        float _2989 = _2988 * _2988;
        float _4981 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2990 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
        float _2991 = isnan(1.0) ? _2575 : (isnan(_2575) ? 1.0 : min(_2575, 1.0));
        _2799 = (((cbLight._m0[_2972].x * 0.3183098733425140380859375) * _2990) * _2991) + _2737;
        _2801 = (((cbLight._m0[_2972].y * 0.3183098733425140380859375) * _2990) * _2991) + _2739;
        _2803 = (((cbLight._m0[_2972].z * 0.3183098733425140380859375) * _2990) * _2991) + _2741;
    }
    uint _2806 = _2559 + 8u;
    float _2819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _1055) * 0.949999988079071044921875);
    float _2820 = _2819 * _2819;
    float _2821 = cbLight._m0[_2559].x + _1131;
    float _2822 = cbLight._m0[_2559].y + _1132;
    float _2823 = cbLight._m0[_2559].z + _1133;
    float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
    float _2828 = _2827 * _2821;
    float _2829 = _2827 * _2822;
    float _2830 = _2827 * _2823;
    float _2831 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2559].xyz));
    float _4997 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
    float _2834 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
    float _5008 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
    float _2835 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
    float _2836 = dot(vec3(_1052, _1053, _1054), vec3(_2828, _2829, _2830));
    float _5019 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
    float _2839 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
    float _2840 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2828, _2829, _2830));
    float _5030 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
    float _2844 = _2820 * _2820;
    float _2848 = ((_2839 * _2839) * (_2844 + (-1.0))) + 1.0;
    float _2856 = exp2(log2(1.0 - (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0)))) * 5.0);
    float _2857 = 0.959999978542327880859375 - _1210;
    float _2859 = 0.959999978542327880859375 - _1211;
    float _2860 = 0.959999978542327880859375 - _1212;
    float _2867 = 1.0 - _2820;
    float _2878 = (0.5 / (((_2835 * ((_2834 * _2867) + _2820)) + 9.9999999392252902907785028219223e-09) + (((_2835 * _2867) + _2820) * _2834))) * _2834;
    float _5041 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
    float _2880 = (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_2844 / ((_2848 * _2848) * 3.141590118408203125));
    uint _2894 = _2559 + 9u;
    float _2905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2599].w)) * _1055) * 0.949999988079071044921875);
    float _2906 = _2905 * _2905;
    float _2907 = cbLight._m0[_2599].x + _1131;
    float _2908 = cbLight._m0[_2599].y + _1132;
    float _2909 = cbLight._m0[_2599].z + _1133;
    float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
    float _2914 = _2913 * _2907;
    float _2915 = _2913 * _2908;
    float _2916 = _2913 * _2909;
    float _2917 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2599].xyz));
    float _5052 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
    float _2920 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
    float _2921 = dot(vec3(_1052, _1053, _1054), vec3(_2914, _2915, _2916));
    float _5063 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
    float _2924 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
    float _2925 = dot(vec3(cbLight._m0[_2599].xyz), vec3(_2914, _2915, _2916));
    float _5074 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
    float _2929 = _2906 * _2906;
    float _2933 = ((_2924 * _2924) * (_2929 + (-1.0))) + 1.0;
    float _2940 = exp2(log2(1.0 - (isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0)))) * 5.0);
    float _2947 = 1.0 - _2906;
    float _2957 = (0.5 / (((_2835 * ((_2920 * _2947) + _2906)) + 9.9999999392252902907785028219223e-09) + (((_2835 * _2947) + _2906) * _2920))) * _2920;
    float _5085 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
    float _2959 = (isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0))) * (_2929 / ((_2933 * _2933) * 3.141590118408203125));
    float _2969 = (((((_2940 * _2857) + _1213) * cbLight._m0[_2894].x) * _2959) * _2582) + ((((cbLight._m0[_2806].x * _2548) * ((_2856 * _2857) + _1213)) * _2880) * _2595);
    float _2970 = (((((_2940 * _2859) + _1215) * cbLight._m0[_2894].y) * _2959) * _2582) + ((((cbLight._m0[_2806].y * _2550) * ((_2856 * _2859) + _1215)) * _2880) * _2595);
    float _2971 = (((((_2940 * _2860) + _1216) * cbLight._m0[_2894].z) * _2959) * _2582) + ((((cbLight._m0[_2806].z * _2552) * ((_2856 * _2860) + _1216)) * _2880) * _2595);
    float _3027;
    float _3029;
    float _3031;
    if (_2635)
    {
        _3027 = _2969;
        _3029 = _2970;
        _3031 = _2971;
    }
    else
    {
        uint _3033 = _2559 + 2u;
        uint _3037 = _2559 + 10u;
        float _3051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3033].w)) * _1055) * 0.949999988079071044921875);
        float _3052 = _3051 * _3051;
        float _3053 = cbLight._m0[_3033].x + _1131;
        float _3054 = cbLight._m0[_3033].y + _1132;
        float _3055 = cbLight._m0[_3033].z + _1133;
        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
        float _3060 = _3059 * _3053;
        float _3061 = _3059 * _3054;
        float _3062 = _3059 * _3055;
        float _3063 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_3033].xyz));
        float _5096 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
        float _3066 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
        float _3067 = dot(vec3(_1052, _1053, _1054), vec3(_3060, _3061, _3062));
        float _5107 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
        float _3070 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
        float _3071 = dot(vec3(cbLight._m0[_3033].xyz), vec3(_3060, _3061, _3062));
        float _5118 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
        float _3075 = _3052 * _3052;
        float _3079 = ((_3070 * _3070) * (_3075 + (-1.0))) + 1.0;
        float _3086 = exp2(log2(1.0 - (isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0)))) * 5.0);
        float _3093 = 1.0 - _3052;
        float _3103 = (0.5 / (((_2835 * ((_3066 * _3093) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_2835 * _3093) + _3052) * _3066))) * _3066;
        float _5129 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
        float _3105 = (isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0))) * (_3075 / ((_3079 * _3079) * 3.141590118408203125));
        float _3106 = isnan(1.0) ? _2574 : (isnan(_2574) ? 1.0 : min(_2574, 1.0));
        _3027 = (((((_3086 * _2857) + _1213) * cbLight._m0[_3037].x) * _3105) * _3106) + _2969;
        _3029 = (((((_3086 * _2859) + _1215) * cbLight._m0[_3037].y) * _3105) * _3106) + _2970;
        _3031 = (((((_3086 * _2860) + _1216) * cbLight._m0[_3037].z) * _3105) * _3106) + _2971;
    }
    float _3137;
    float _3139;
    float _3141;
    if (_2744)
    {
        _3137 = _3027;
        _3139 = _3029;
        _3141 = _3031;
    }
    else
    {
        uint _3148 = _2559 + 3u;
        uint _3152 = _2559 + 11u;
        float _3166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3148].w)) * _1055) * 0.949999988079071044921875);
        float _3167 = _3166 * _3166;
        float _3168 = cbLight._m0[_3148].x + _1131;
        float _3169 = cbLight._m0[_3148].y + _1132;
        float _3170 = cbLight._m0[_3148].z + _1133;
        float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
        float _3175 = _3174 * _3168;
        float _3176 = _3174 * _3169;
        float _3177 = _3174 * _3170;
        float _3178 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_3148].xyz));
        float _5145 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
        float _3181 = isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0));
        float _3182 = dot(vec3(_1052, _1053, _1054), vec3(_3175, _3176, _3177));
        float _5156 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
        float _3185 = isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0));
        float _3186 = dot(vec3(cbLight._m0[_3148].xyz), vec3(_3175, _3176, _3177));
        float _5167 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
        float _3190 = _3167 * _3167;
        float _3194 = ((_3185 * _3185) * (_3190 + (-1.0))) + 1.0;
        float _3201 = exp2(log2(1.0 - (isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0)))) * 5.0);
        float _3208 = 1.0 - _3167;
        float _3218 = (0.5 / (((_2835 * ((_3181 * _3208) + _3167)) + 9.9999999392252902907785028219223e-09) + (((_2835 * _3208) + _3167) * _3181))) * _3181;
        float _5178 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
        float _3220 = (isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0))) * (_3190 / ((_3194 * _3194) * 3.141590118408203125));
        float _3221 = isnan(1.0) ? _2575 : (isnan(_2575) ? 1.0 : min(_2575, 1.0));
        _3137 = (((((_3201 * _2857) + _1213) * cbLight._m0[_3152].x) * _3220) * _3221) + _3027;
        _3139 = (((((_3201 * _2859) + _1215) * cbLight._m0[_3152].y) * _3220) * _3221) + _3029;
        _3141 = (((((_3201 * _2860) + _1216) * cbLight._m0[_3152].z) * _3220) * _3221) + _3031;
    }
    float _3287;
    float _3289;
    float _3291;
    float _3293;
    float _3295;
    float _3297;
    if (_2557.y == 0u)
    {
        uvec4 _3242 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3243 = _3242.x;
        uint _3254 = uint((float(_3242.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1152) / _3243))) + floor(float(uint(cbSceneParam._m0[85u].x * _1151) / _3243)));
        float _3264 = (log2(_2335 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3265 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
        uint _3268 = uint(isnan(14.0) ? _3265 : (isnan(_3265) ? 14.0 : min(_3265, 14.0)));
        uvec4 _3273 = texelFetch(g_lightClusterGridBuffer, int(((_3268 << 2u) + (_3254 << 6u)) >> 2u));
        uint _3274 = _3273.x;
        uint _3275 = _3242.z;
        float _3354;
        float _3356;
        float _3358;
        float _3360;
        float _3362;
        float _3364;
        if (((((1u << ((_3275 >> 4u) & 15u)) + 4294967295u) & _3274) == 0u) || ((_3275 & 240u) == 0u))
        {
            _3354 = 0.0;
            _3356 = 0.0;
            _3358 = 0.0;
            _3360 = 0.0;
            _3362 = 0.0;
            _3364 = 0.0;
        }
        else
        {
            float _3355;
            float _3357;
            float _3359;
            float _3361;
            float _3363;
            float _3365;
            float _3506 = 0.0;
            float _3507 = 0.0;
            float _3508 = 0.0;
            float _3509 = 0.0;
            float _3510 = 0.0;
            float _3511 = 0.0;
            uint _3512 = 0u;
            uint _3521;
            bool _3522;
            for (;;)
            {
                _3521 = texelFetch(g_lightClassification, int((((_3268 << 5u) + (_3254 << 9u)) + (_3512 << 2u)) >> 2u)).x;
                _3522 = _3521 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3522)
                {
                    frontier_phi_71_pred = _3511;
                    frontier_phi_71_pred_1 = _3510;
                    frontier_phi_71_pred_2 = _3509;
                    frontier_phi_71_pred_3 = _3508;
                    frontier_phi_71_pred_4 = _3507;
                    frontier_phi_71_pred_5 = _3506;
                }
                else
                {
                    float _3651;
                    float _3652;
                    float _3653;
                    float _3654;
                    float _3655;
                    float _3656;
                    uint _3657;
                    _3651 = _3506;
                    _3652 = _3507;
                    _3653 = _3508;
                    _3654 = _3509;
                    _3655 = _3510;
                    _3656 = _3511;
                    _3657 = _3521;
                    float _3578;
                    float _3579;
                    float _3580;
                    float _3581;
                    float _3582;
                    float _3583;
                    for (;;)
                    {
                        uint _3661 = uint(findLSB(_3657)) + (_3512 << 5u);
                        uint _3658 = (_3657 + 4294967295u) & _3657;
                        uint _3663 = _3661 * 48u;
                        vec4 _3677 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3663)).x, texelFetch(g_PointLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3663 + 3u)).x));
                        uint _3683 = (_3661 * 48u) + 4u;
                        vec4 _3696 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3683)).x, texelFetch(g_PointLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3683 + 3u)).x));
                        uint _3702 = (_3661 * 48u) + 8u;
                        vec3 _3713 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3702)).x, texelFetch(g_PointLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3702 + 2u)).x));
                        float _3717 = _3677.x - _2333;
                        float _3718 = _3677.y - _2334;
                        float _3719 = _3677.z - _2335;
                        float _3720 = dot(vec3(_3717, _3718, _3719), vec3(_3717, _3718, _3719));
                        float _3723 = inversesqrt(_3720);
                        float _3724 = _3723 * _3717;
                        float _3725 = _3723 * _3718;
                        float _3726 = _3723 * _3719;
                        float _3727 = dot(vec3(_1170, _1173, _1176), vec3(_3724, _3725, _3726));
                        float _3732 = 1.0 - (_3720 * _3677.w);
                        float _5204 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                        float _3733 = isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0));
                        float _3734 = sqrt(_3720) * _3696.w;
                        float _3737 = 1.39999997615814208984375 / (_3734 + 1.39999997615814208984375);
                        float _3738 = _3737 * _3737;
                        float _3741 = ((1.0 - _3738) * _3727) + _3738;
                        float _3744 = _3734 * _3734;
                        float _3748 = ((isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0))) * _3733) / ((_3744 * 0.699999988079071044921875) + 1.0);
                        float _3752 = (-0.0) - _2333;
                        float _3753 = (-0.0) - _2334;
                        float _3754 = (-0.0) - _2335;
                        float _3758 = inversesqrt(dot(vec3(_3752, _3753, _3754), vec3(_3752, _3753, _3754)));
                        float _3759 = _3758 * _3752;
                        float _3760 = _3758 * _3753;
                        float _3761 = _3758 * _3754;
                        float _3768 = exp2(log2(1.0 / ((_3744 * 3.5) + 5.0)) * 0.25);
                        float _3769 = 1.0 - _1245;
                        float _3776 = sqrt(1.0 - ((1.0 - (_3769 * _3769)) * (1.0 - (_3768 * _3768))));
                        float _3777 = _3776 * _3776;
                        float _3778 = _3777 * _3777;
                        float _3779 = _3759 + _3724;
                        float _3780 = _3760 + _3725;
                        float _3781 = _3761 + _3726;
                        float _3785 = inversesqrt(dot(vec3(_3779, _3780, _3781), vec3(_3779, _3780, _3781)));
                        float _3789 = dot(vec3(_1170, _1173, _1176), vec3(_3759, _3760, _3761));
                        float _5220 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                        float _3792 = isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0));
                        float _3793 = dot(vec3(_1170, _1173, _1176), vec3(_3785 * _3779, _3785 * _3780, _3785 * _3781));
                        float _5231 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                        float _3796 = isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0));
                        float _3800 = ((_3796 * _3796) * (_3778 + (-1.0))) + 1.0;
                        float _3801 = _3737 * _3777;
                        float _3802 = _3801 * _3801;
                        float _3805 = ((1.0 - _3802) * _3727) + _3802;
                        float _5242 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                        float _3806 = isnan(1.0) ? _5242 : (isnan(_5242) ? 1.0 : min(_5242, 1.0));
                        float _3807 = 1.0 - _3777;
                        float _3817 = (0.5 / (((_3806 * ((_3792 * _3807) + _3777)) + 9.9999999392252902907785028219223e-09) + (((_3806 * _3807) + _3777) * _3792))) * _3806;
                        float _5253 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                        float _3828 = (((_3778 * 3.1415927410125732421875) * (isnan(1.0) ? _5253 : (isnan(_5253) ? 1.0 : min(_5253, 1.0)))) / ((_3800 * _3800) * ((_3744 * 2.1991131305694580078125) + 3.141590118408203125))) * _3733;
                        _3581 = (_3748 * _3696.x) + _3654;
                        _3582 = (_3748 * _3696.y) + _3655;
                        _3583 = (_3748 * _3696.z) + _3656;
                        _3578 = (_3828 * _3713.x) + _3651;
                        _3579 = (_3828 * _3713.y) + _3652;
                        _3580 = (_3828 * _3713.z) + _3653;
                        if (_3658 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3651 = _3578;
                            _3652 = _3579;
                            _3653 = _3580;
                            _3654 = _3581;
                            _3655 = _3582;
                            _3656 = _3583;
                            _3657 = _3658;
                        }
                    }
                    frontier_phi_71_pred = _3583;
                    frontier_phi_71_pred_1 = _3582;
                    frontier_phi_71_pred_2 = _3581;
                    frontier_phi_71_pred_3 = _3580;
                    frontier_phi_71_pred_4 = _3579;
                    frontier_phi_71_pred_5 = _3578;
                }
                _3365 = frontier_phi_71_pred;
                _3363 = frontier_phi_71_pred_1;
                _3361 = frontier_phi_71_pred_2;
                _3359 = frontier_phi_71_pred_3;
                _3357 = frontier_phi_71_pred_4;
                _3355 = frontier_phi_71_pred_5;
                uint _3513 = _3512 + 1u;
                if (_3513 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3506 = _3355;
                    _3507 = _3357;
                    _3508 = _3359;
                    _3509 = _3361;
                    _3510 = _3363;
                    _3511 = _3365;
                    _3512 = _3513;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3354 = _3355;
            _3356 = _3357;
            _3358 = _3359;
            _3360 = _3361;
            _3362 = _3363;
            _3364 = _3365;
        }
        uvec4 _3368 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3369 = _3368.z;
        uint _3371 = (_3369 >> 8u) & 15u;
        float _3474;
        float _3476;
        float _3478;
        float _3480;
        float _3482;
        float _3484;
        if (((4294967295u << _3371) & _3274) == 0u)
        {
            _3474 = _3354;
            _3476 = _3356;
            _3478 = _3358;
            _3480 = _3360;
            _3482 = _3362;
            _3484 = _3364;
        }
        else
        {
            float _3499 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
            float _3500 = _3499 * _2333;
            float _3501 = _3499 * _2334;
            float _3502 = _3499 * _2335;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3371 < ((_3369 >> 12u) & 15u))
            {
                float _3475;
                float _3477;
                float _3479;
                float _3481;
                float _3483;
                float _3485;
                float _3634 = _3354;
                float _3635 = _3356;
                float _3636 = _3358;
                float _3637 = _3360;
                float _3638 = _3362;
                float _3639 = _3364;
                uint _3640 = _3371;
                uint _3649;
                bool _3650;
                for (;;)
                {
                    _3649 = texelFetch(g_lightClassification, int((((_3268 << 5u) + (_3254 << 9u)) + (_3640 << 2u)) >> 2u)).x;
                    _3650 = _3649 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3650)
                    {
                        frontier_phi_82_pred = _3639;
                        frontier_phi_82_pred_1 = _3638;
                        frontier_phi_82_pred_2 = _3637;
                        frontier_phi_82_pred_3 = _3636;
                        frontier_phi_82_pred_4 = _3635;
                        frontier_phi_82_pred_5 = _3634;
                    }
                    else
                    {
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _4135;
                        float _4136;
                        float _4137;
                        float _4138;
                        float _4139;
                        float _4140;
                        float _3855 = _3634;
                        float _3856 = _3635;
                        float _3857 = _3636;
                        float _3858 = _3637;
                        float _3859 = _3638;
                        float _3860 = _3639;
                        uint _3861 = _3649;
                        uint _3862;
                        vec4 _3887;
                        float _3888;
                        vec4 _3903;
                        vec3 _3915;
                        vec4 _3930;
                        vec4 _3945;
                        float _3991;
                        bool _3992;
                        for (;;)
                        {
                            uint _3872 = ((_3640 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3861));
                            _3862 = (_3861 + 4294967295u) & _3861;
                            uint _3874 = _3872 * 40u;
                            _3887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 3u)).x));
                            _3888 = _3887.w;
                            uint _3890 = (_3872 * 40u) + 4u;
                            _3903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3890 + 3u)).x));
                            uint _3905 = (_3872 * 40u) + 8u;
                            _3915 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 2u)).x));
                            uint _3917 = (_3872 * 40u) + 16u;
                            _3930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3917 + 3u)).x));
                            uint _3932 = (_3872 * 40u) + 20u;
                            _3945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 3u)).x));
                            uint _3947 = (_3872 * 40u) + 24u;
                            vec4 _3960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3947 + 3u)).x));
                            uint _3966 = (_3872 * 40u) + 28u;
                            vec4 _3979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3966 + 3u)).x));
                            _3991 = fma(_2335, _3979.z, fma(_2334, _3979.y, _3979.x * _2333)) + _3979.w;
                            _3992 = !((fma(_2335, _3960.z, fma(_2334, _3960.y, _3960.x * _2333)) + _3960.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3992)
                            {
                                float _4019 = _3887.x - _2333;
                                float _4020 = _3887.y - _2334;
                                float _4021 = _3887.z - _2335;
                                float _4022 = dot(vec3(_4019, _4020, _4021), vec3(_4019, _4020, _4021));
                                float _4025 = inversesqrt(_4022);
                                float _4026 = _4025 * _4019;
                                float _4027 = _4025 * _4020;
                                float _4028 = _4025 * _4021;
                                float _4032 = 1.0 - (_4022 / (_3888 * _3888));
                                float _5264 = isnan(0.0) ? _4032 : (isnan(_4032) ? 0.0 : max(_4032, 0.0));
                                float _4033 = isnan(1.0) ? _5264 : (isnan(_5264) ? 1.0 : min(_5264, 1.0));
                                float _4037 = sqrt(_4022) * _3903.w;
                                float _4039 = 1.39999997615814208984375 / (_4037 + 1.39999997615814208984375);
                                float _4040 = _4039 * _4039;
                                float _4043 = ((1.0 - _4040) * dot(vec3(_4026, _4027, _4028), vec3(_1170, _1173, _1176))) + _4040;
                                float _4046 = _4037 * _4037;
                                float _4050 = (fma(_2335, _3930.z, fma(_2334, _3930.y, _3930.x * _2333)) + _3930.w) / _3991;
                                float _4051 = (fma(_2335, _3945.z, fma(_2334, _3945.y, _3945.x * _2333)) + _3945.w) / _3991;
                                float _4055 = 1.0 - dot(vec2(_4050, _4051), vec2(_4050, _4051));
                                float _5280 = isnan(0.0) ? _4055 : (isnan(_4055) ? 0.0 : max(_4055, 0.0));
                                float _4056 = isnan(1.0) ? _5280 : (isnan(_5280) ? 1.0 : min(_5280, 1.0));
                                float _4057 = _4056 * (((isnan(0.0) ? _4043 : (isnan(_4043) ? 0.0 : max(_4043, 0.0))) * _4033) / ((_4046 * 0.699999988079071044921875) + 1.0));
                                float _4069 = exp2(log2(1.0 / ((_4046 * 3.5) + 5.0)) * 0.25);
                                float _4070 = 1.0 - _1245;
                                float _4077 = sqrt(1.0 - ((1.0 - (_4070 * _4070)) * (1.0 - (_4069 * _4069))));
                                float _4078 = _4077 * _4077;
                                float _4079 = _4078 * _4078;
                                float _4080 = _4026 - _3500;
                                float _4081 = _4027 - _3501;
                                float _4082 = _4028 - _3502;
                                float _4086 = inversesqrt(dot(vec3(_4080, _4081, _4082), vec3(_4080, _4081, _4082)));
                                float _4090 = dot(vec3(_1170, _1173, _1176), vec3((-0.0) - _3500, (-0.0) - _3501, (-0.0) - _3502));
                                float _5291 = isnan(0.0) ? _4090 : (isnan(_4090) ? 0.0 : max(_4090, 0.0));
                                float _4093 = isnan(1.0) ? _5291 : (isnan(_5291) ? 1.0 : min(_5291, 1.0));
                                float _4094 = dot(vec3(_1170, _1173, _1176), vec3(_4086 * _4080, _4086 * _4081, _4086 * _4082));
                                float _5302 = isnan(0.0) ? _4094 : (isnan(_4094) ? 0.0 : max(_4094, 0.0));
                                float _4097 = isnan(1.0) ? _5302 : (isnan(_5302) ? 1.0 : min(_5302, 1.0));
                                float _4101 = ((_4097 * _4097) * (_4079 + (-1.0))) + 1.0;
                                float _4102 = _4039 * _4078;
                                float _4103 = _4102 * _4102;
                                float _4109 = ((1.0 - _4103) * dot(vec3(_1170, _1173, _1176), vec3(_4026, _4027, _4028))) + _4103;
                                float _5313 = isnan(0.0) ? _4109 : (isnan(_4109) ? 0.0 : max(_4109, 0.0));
                                float _4110 = isnan(1.0) ? _5313 : (isnan(_5313) ? 1.0 : min(_5313, 1.0));
                                float _4111 = 1.0 - _4078;
                                float _4121 = (0.5 / (((_4110 * ((_4093 * _4111) + _4078)) + 9.9999999392252902907785028219223e-09) + (((_4110 * _4111) + _4078) * _4093))) * _4110;
                                float _5324 = isnan(0.0) ? _4121 : (isnan(_4121) ? 0.0 : max(_4121, 0.0));
                                float _4131 = (_4056 * _4033) * (((_4079 * 3.1415927410125732421875) * (isnan(1.0) ? _5324 : (isnan(_5324) ? 1.0 : min(_5324, 1.0)))) / ((_4101 * _4101) * ((_4046 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4057 * _3903.z;
                                frontier_phi_88_pred_1 = _4057 * _3903.y;
                                frontier_phi_88_pred_2 = _4057 * _3903.x;
                                frontier_phi_88_pred_3 = _4131 * _3915.z;
                                frontier_phi_88_pred_4 = _4131 * _3915.y;
                                frontier_phi_88_pred_5 = _4131 * _3915.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4140 = frontier_phi_88_pred;
                            _4139 = frontier_phi_88_pred_1;
                            _4138 = frontier_phi_88_pred_2;
                            _4137 = frontier_phi_88_pred_3;
                            _4136 = frontier_phi_88_pred_4;
                            _4135 = frontier_phi_88_pred_5;
                            _3845 = _4138 + _3858;
                            _3846 = _4139 + _3859;
                            _3847 = _4140 + _3860;
                            _3842 = _4135 + _3855;
                            _3843 = _4136 + _3856;
                            _3844 = _4137 + _3857;
                            if (_3862 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3855 = _3842;
                                _3856 = _3843;
                                _3857 = _3844;
                                _3858 = _3845;
                                _3859 = _3846;
                                _3860 = _3847;
                                _3861 = _3862;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3847;
                        frontier_phi_82_pred_1 = _3846;
                        frontier_phi_82_pred_2 = _3845;
                        frontier_phi_82_pred_3 = _3844;
                        frontier_phi_82_pred_4 = _3843;
                        frontier_phi_82_pred_5 = _3842;
                    }
                    _3485 = frontier_phi_82_pred;
                    _3483 = frontier_phi_82_pred_1;
                    _3481 = frontier_phi_82_pred_2;
                    _3479 = frontier_phi_82_pred_3;
                    _3477 = frontier_phi_82_pred_4;
                    _3475 = frontier_phi_82_pred_5;
                    uint _3641 = _3640 + 1u;
                    if (_3641 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3634 = _3475;
                        _3635 = _3477;
                        _3636 = _3479;
                        _3637 = _3481;
                        _3638 = _3483;
                        _3639 = _3485;
                        _3640 = _3641;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3481;
                frontier_phi_63_64_ladder_1 = _3485;
                frontier_phi_63_64_ladder_2 = _3483;
                frontier_phi_63_64_ladder_3 = _3479;
                frontier_phi_63_64_ladder_4 = _3477;
                frontier_phi_63_64_ladder_5 = _3475;
            }
            else
            {
                frontier_phi_63_64_ladder = _3360;
                frontier_phi_63_64_ladder_1 = _3364;
                frontier_phi_63_64_ladder_2 = _3362;
                frontier_phi_63_64_ladder_3 = _3358;
                frontier_phi_63_64_ladder_4 = _3356;
                frontier_phi_63_64_ladder_5 = _3354;
            }
            _3474 = frontier_phi_63_64_ladder_5;
            _3476 = frontier_phi_63_64_ladder_4;
            _3478 = frontier_phi_63_64_ladder_3;
            _3480 = frontier_phi_63_64_ladder;
            _3482 = frontier_phi_63_64_ladder_2;
            _3484 = frontier_phi_63_64_ladder_1;
        }
        float _3489 = isnan(1.0) ? _1229 : (isnan(_1229) ? 1.0 : min(_1229, 1.0));
        _3287 = (_3489 * _3480) + _2799;
        _3289 = (_3489 * _3482) + _2801;
        _3291 = (_3489 * _3484) + _2803;
        _3293 = ((_3474 * _1213) * _3489) + _3137;
        _3295 = ((_3476 * _1215) * _3489) + _3139;
        _3297 = ((_3478 * _1216) * _3489) + _3141;
    }
    else
    {
        _3287 = _2799;
        _3289 = _2801;
        _3291 = _2803;
        _3293 = _3137;
        _3295 = _3139;
        _3297 = _3141;
    }
    float _5340 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _5351 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _5362 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
    float _3314 = ((isnan(1.0) ? _5340 : (isnan(_5340) ? 1.0 : min(_5340, 1.0))) * (_3287 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1229))) + ((_3293 + ((isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0))) * _2066)) * cbPerFrame._m0[3u].x);
    float _3315 = ((isnan(1.0) ? _5351 : (isnan(_5351) ? 1.0 : min(_5351, 1.0))) * (_3289 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1229))) + ((_3295 + ((isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0))) * _2066)) * cbPerFrame._m0[3u].x);
    float _3316 = ((isnan(1.0) ? _5362 : (isnan(_5362) ? 1.0 : min(_5362, 1.0))) * (_3291 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1229))) + ((_3297 + ((isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0))) * _2066)) * cbPerFrame._m0[3u].x);
    uint _3317 = _273 + 6u;
    float _3325 = _1151 / cbSceneParam._m0[86u].x;
    float _3326 = _1152 / cbSceneParam._m0[86u].y;
    vec4 _3340 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3325, _3326, (log2((isnan(cbSceneParam._m0[77u].w) ? _1074 : (isnan(_1074) ? cbSceneParam._m0[77u].w : min(_1074, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3342 = _3340.x;
    float _3343 = _3340.y;
    float _3344 = _3340.z;
    float _3345 = _3340.w;
    float _3416;
    float _3418;
    float _3420;
    float _3422;
    if (_1074 > cbSceneParam._m0[78u].w)
    {
        float _3379 = isnan(_1074) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1074 : min(cbSceneParam._m0[80u].w, _1074));
        float _3380 = _3379 / _1074;
        float _3391 = _3380 * _1124;
        float _3392 = _1125 * _3380;
        float _3393 = (-0.0) - _3392;
        float _3394 = _3380 * _1126;
        float _3396 = (cbSceneParam._m0[77u].w * _3393) / _3379;
        float _3397 = _3396 + cbSceneParam._m0[79u].w;
        float _3398 = cbSceneParam._m0[79u].w - _3392;
        float _3404 = sqrt(((_3391 * _3391) + (_3392 * _3392)) + (_3394 * _3394));
        float _3407 = (1.0 - (cbSceneParam._m0[77u].w / _3379)) * _3404;
        float _3412 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3414 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3591;
        if (abs((_3393 - _3396) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3591 = ((((_3397 > 0.0) ? exp2(_3412 * _3397) : (2.0 - exp2(_3414 * _3397))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3407;
        }
        else
        {
            float _3535 = 1.0 / cbSceneParam._m0[80u].x;
            float _3536 = isnan(_3398) ? _3397 : (isnan(_3397) ? _3398 : max(_3397, _3398));
            float _3537 = isnan(_3398) ? _3397 : (isnan(_3397) ? _3398 : min(_3397, _3398));
            float _3546 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : min(_3536, 0.0));
            float _3547 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : min(_3537, 0.0));
            _3591 = ((abs(_3404 / _3393) * cbSceneParam._m0[80u].y) * ((((_3546 - _3547) * 2.0) - ((exp2(_3412 * (isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0)))) - exp2(_3412 * (isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0))))) * _3535)) - ((exp2(_3414 * _3546) - exp2(_3414 * _3547)) * _3535))) + (_3407 * cbSceneParam._m0[80u].z);
        }
        vec4 _3593 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3325, _3326, 1.0), 0.0);
        float _3602 = exp2((_3591 * (-1.44269502162933349609375)) * (1.0 - _3593.w));
        float _3603 = log2(_3602);
        float _3619 = log2(_3345);
        _3416 = (exp2(_3619 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3603 * cbSceneParam._m0[78u].x)) * _3593.x) / cbSceneParam._m0[78u].x)) + _3342;
        _3418 = (exp2(_3619 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3603 * cbSceneParam._m0[78u].y)) * _3593.y) / cbSceneParam._m0[78u].y)) + _3343;
        _3420 = (exp2(_3619 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3603 * cbSceneParam._m0[78u].z)) * _3593.z) / cbSceneParam._m0[78u].z)) + _3344;
        _3422 = _3602 * _3345;
    }
    else
    {
        _3416 = _3342;
        _3418 = _3343;
        _3420 = _3344;
        _3422 = _3345;
    }
    bool _3629;
    vec4 _3432;
    vec4 _3454;
    float _3456;
    float _3460;
    float _3461;
    float _3462;
    float _3463;
    bool _3473;
    for (;;)
    {
        _3432 = cbMatDynParam._m0[0u];
        float _3434 = roundEven(_3432.y);
        bool _3435 = _3434 == 3.0;
        float _3436 = log2(_3422);
        float _3443 = exp2(_3436 * cbSceneParam._m0[78u].x) * _3314;
        float _3444 = exp2(_3436 * cbSceneParam._m0[78u].y) * _3315;
        float _3445 = exp2(_3436 * cbSceneParam._m0[78u].z) * _3316;
        float _3452 = _1140 + (-0.5);
        _3454 = cbMtdParam._m0[1u];
        _3456 = _3454.y * _3452;
        float _3459 = (_3434 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3460 = _3459 * (_3435 ? _3443 : (_3443 + (cbSceneParam._m0[72u].w * _3416)));
        _3461 = _3459 * (_3435 ? _3444 : (_3444 + (cbSceneParam._m0[72u].w * _3418)));
        _3462 = _3459 * (_3435 ? _3445 : (_3445 + (cbSceneParam._m0[72u].w * _3420)));
        _3463 = _3452 * 0.999000012874603271484375;
        _3473 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3473)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _3463) < 0.5)
            {
                _3629 = true;
                break;
            }
        }
        uint _3570 = _1189 + uint(_3432.w);
        if ((cbInstanceData._m0[_3570].w < 1.0) && ((cbInstanceData._m0[_3570].w + _3463) < 0.5))
        {
            _3629 = true;
            break;
        }
        if ((_3456 + 1.0) < _3454.x)
        {
            _3629 = true;
            break;
        }
        _3629 = false;
        break;
    }
    float _3833;
    if (_3629)
    {
        discard_state = true;
        _3833 = 0.0;
    }
    else
    {
        _3833 = cbInstanceData._m0[_3317].w;
    }
    SV_Target.x = _3460;
    SV_Target.y = _3461;
    SV_Target.z = _3462;
    SV_Target.w = _3833;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3317].w;
    discard_exit();
}


