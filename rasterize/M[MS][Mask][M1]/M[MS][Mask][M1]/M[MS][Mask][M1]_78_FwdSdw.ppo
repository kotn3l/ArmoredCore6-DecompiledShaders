#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1554;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _253 = _252 * _244;
    float _254 = _252 * _245;
    float _255 = _252 * _246;
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = _259 * NORMAL.x;
    float _261 = _259 * NORMAL.y;
    float _262 = _259 * NORMAL.z;
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = _266 * TANGENT.x;
    float _268 = _266 * TANGENT.y;
    float _269 = _266 * TANGENT.z;
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4162 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4173 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4184 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[23u].w) + _439) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4195 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _464 = (_457 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _465 = (_457 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _466 = (_457 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[23u].w) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4206 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    float _543 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _537;
    float _546 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _538;
    float _549 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _539;
    float _556 = ((_537 - _543) * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) + _543;
    float _557 = ((_538 - _546) * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) + _546;
    float _558 = ((_539 - _549) * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) + _549;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _619 = _617.x;
    float _620 = _617.y;
    float _621 = _617.z;
    float _628 = ((_600.x - _619) * _457) + _619;
    float _629 = ((_600.y - _620) * _457) + _620;
    float _630 = ((_600.z - _621) * _457) + _621;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _655 = ((_642.z - _630) * _530) + _630;
    float _658 = ((((_642.x - _628) * _530) + _628) * 2.0) + (-1.0);
    float _659 = ((((_642.y - _629) * _530) + _629) * 2.0) + (-1.0);
    float _660 = dot(vec2(_658, _659), vec2(_658, _659));
    float _4217 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _665 = sqrt(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))));
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _695 = (_658 + ((((_575.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_683.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _696 = (_659 + ((((_575.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_683.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _699 = fma(_665, _260, fma(_696, _267, _695 * _253));
    float _702 = fma(_665, _261, fma(_696, _268, _695 * _254));
    float _705 = fma(_665, _262, fma(_696, _269, _695 * _255));
    float _709 = inversesqrt(dot(vec3(_699, _702, _705), vec3(_699, _702, _705)));
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _738 = _736.x;
    float _739 = 1.0 - _738;
    float _748 = (cbMtdParam._m0[19u].x + dot(vec4(_709 * _699, _709 * _702, _709 * _705, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_738 - _739) * cbMtdParam._m0[24u].z) + _739) * cbMtdParam._m0[21u].z);
    float _4228 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _749 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _751 = (-0.0) - cbMtdParam._m0[24u].x;
    float _753 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _753 : (isnan(_753) ? 1.0 : min(_753, 1.0));
    float _761 = _749 - ((_749 * TEXCOORD_8.x) * _754);
    float _762 = _749 - ((_749 * TEXCOORD_8.y) * _754);
    float _763 = _749 - ((_749 * TEXCOORD_8.z) * _754);
    float _770 = (_761 * (cbMtdParam._m0[17u].x - _556)) + _556;
    float _771 = (_762 * (cbMtdParam._m0[17u].y - _557)) + _557;
    float _772 = (_763 * (cbMtdParam._m0[17u].z - _558)) + _558;
    vec4 _784 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _786 = _784.x;
    float _787 = 1.0 - _786;
    float _813 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_786 - _787) * cbMtdParam._m0[24u].w) + _787) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4249 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _814 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _822 = ((((cbMtdParam._m0[10u].x - _770) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _814) + _770;
    float _823 = ((((cbMtdParam._m0[10u].y - _771) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _814) + _771;
    float _824 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _772)) * _814) + _772;
    vec4 _850 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _852 = _850.x;
    float _870 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _852) * _457) + _852;
    float _887 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _870) * _530) + _870;
    float _891 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _887) * cbMtdParam._m0[19u].z) + _887;
    float _893 = _891 - (_891 * _761);
    float _895 = _893 - (_893 * _814);
    float _900 = (((_575.z - _655) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _655;
    float _904 = ((_683.z - _900) * cbMtdParam._m0[19u].w) + _900;
    vec4 _918 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _925 = (_918.x * 2.0) + (-1.0);
    float _926 = (_918.y * 2.0) + (-1.0);
    float _927 = dot(vec2(_925, _926), vec2(_925, _926));
    float _4260 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _935 = ((_918.z - _904) * _761) + _904;
    float _938 = ((cbMtdParam._m0[23u].x - _935) * _814) + _935;
    vec4 _959 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _965 = (_959.x * 2.0) + (-1.0);
    float _966 = (_959.y * 2.0) + (-1.0);
    float _967 = dot(vec2(_965, _966), vec2(_965, _966));
    float _4271 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _982 = ((sqrt(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) - _665) * _763) + _665;
    float _985 = (((_925 - _695) * _761) + _695) + (cbMtdParam._m0[21u].x * _695);
    float _986 = (((_926 - _696) * _762) + _696) + (cbMtdParam._m0[21u].x * _696);
    float _997 = (((_965 - _985) + (_985 * cbMtdParam._m0[22u].z)) * _814) + _985;
    float _998 = (((_966 - _986) + (_986 * cbMtdParam._m0[22u].z)) * _814) + _986;
    float _999 = (_814 * (sqrt(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) - _982)) + _982;
    float _1001 = cbMtdParam._m0[22u].x + _683.w;
    float _1004 = fma(_999, _260, fma(_998, _267, _997 * _253));
    float _1007 = fma(_999, _261, fma(_998, _268, _997 * _254));
    float _1010 = fma(_999, _262, fma(_998, _269, _997 * _255));
    float _1014 = inversesqrt(dot(vec3(_1004, _1007, _1010), vec3(_1004, _1007, _1010)));
    float _1015 = _1014 * _1004;
    float _1016 = _1014 * _1007;
    float _1017 = _1014 * _1010;
    float _4282 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _1018 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _4293 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4304 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4315 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4326 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4337 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _1023 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _1037 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1087 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1077);
    float _1088 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1077);
    float _1089 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1077);
    float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
    float _1094 = _1087 * _1093;
    float _1095 = _1088 * _1093;
    float _1096 = _1089 * _1093;
    float _1102 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1103 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1121 = fma(_1017, cbSceneParam._m0[5u].z, fma(_1016, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1015));
    float _1124 = fma(_1017, cbSceneParam._m0[6u].z, fma(_1016, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1015));
    float _1127 = fma(_1017, cbSceneParam._m0[7u].z, fma(_1016, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1015));
    uint _1141 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1147 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * cbInstanceData._m0[_1141].x;
    float _1148 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * cbInstanceData._m0[_1141].y;
    float _1149 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * cbInstanceData._m0[_1141].z;
    float _4348 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1150 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _4359 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _1151 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _4370 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _1152 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _1153 = 1.0 - _1023;
    float _1154 = _1150 * _1153;
    float _1155 = _1151 * _1153;
    float _1156 = _1152 * _1153;
    float _1161 = (_1150 + (-0.039999999105930328369140625)) * _1023;
    float _1162 = (_1151 + (-0.039999999105930328369140625)) * _1023;
    float _1163 = (_1152 + (-0.039999999105930328369140625)) * _1023;
    float _1164 = _1161 + 0.039999999105930328369140625;
    float _1166 = _1162 + 0.039999999105930328369140625;
    float _1167 = _1163 + 0.039999999105930328369140625;
    vec4 _1176 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1102, cbSceneParam._m0[86u].y * _1103));
    float _1180 = ((isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * TEXCOORD_5.w) * _1176.x;
    float _1181 = dot(vec3(_1015, _1016, _1017), vec3(_1094, _1095, _1096));
    float _1184 = _1181 * 2.0;
    float _1188 = (_1184 * _1015) - _1094;
    float _1189 = (_1184 * _1016) - _1095;
    float _1190 = (_1184 * _1017) - _1096;
    float _1194 = abs(dot(vec3(_1094, _1095, _1096), vec3(_1015, _1016, _1017)));
    float _4381 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _1196 = sqrt(_1018);
    float _1209 = exp2((_1196 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1196 * 3.0));
    float _1215 = (1.0 - _1209) * ((_1196 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1216 = _1209 * _1196;
    float _1244 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1248 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1252 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1553;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1278 = fma(_1252, cbModelParam._m0[26u].z, fma(_1248, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1244));
        float _1282 = fma(_1252, cbModelParam._m0[27u].z, fma(_1248, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1244));
        float _1286 = fma(_1252, cbModelParam._m0[28u].z, fma(_1248, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1244));
        float _1311 = _1244 + _1015;
        float _1312 = _1248 + _1016;
        float _1313 = _1252 + _1017;
        float _1323 = fma(_1313, cbModelParam._m0[26u].z, fma(_1312, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1311)) - _1278;
        float _1324 = fma(_1313, cbModelParam._m0[27u].z, fma(_1312, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1311)) - _1282;
        float _1325 = fma(_1313, cbModelParam._m0[28u].z, fma(_1312, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1311)) - _1286;
        float _1329 = inversesqrt(dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325)));
        float _1342 = ((_1329 * _1323) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1278 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1329 * _1324) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1282 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1329 * _1325) / cbModelParam._m0[34u].z) + ((((((_1286 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        float _1381 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1347.x + (-0.5));
        float _1383 = _1381 * (_1347.y + (-0.5));
        float _1384 = _1381 * (_1347.z + (-0.5));
        float _1391 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1354.x + (-0.5));
        float _1393 = _1391 * (_1354.y + (-0.5));
        float _1394 = _1391 * (_1354.z + (-0.5));
        float _1401 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1361.x + (-0.5));
        float _1403 = _1401 * (_1361.y + (-0.5));
        float _1404 = _1401 * (_1361.z + (-0.5));
        float _1411 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1368.x + (-0.5));
        float _1413 = _1411 * (_1368.y + (-0.5));
        float _1414 = _1411 * (_1368.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1435 = (dot(vec3(_1015, _1016, _1017), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1445 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4429 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1447 + 1.0))) + _1452) * _1415;
        float _1462 = _1383 * 0.5;
        float _1463 = _1393 * 0.5;
        float _1464 = _1403 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_1015, _1016, _1017), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4440 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4451 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4462 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_1489 + 1.0))) + _1494) * _1416;
        float _1504 = _1384 * 0.5;
        float _1505 = _1394 * 0.5;
        float _1506 = _1404 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_1015, _1016, _1017), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4473 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4484 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4495 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_1531 + 1.0))) + _1536) * _1417;
        _1553 = _1384;
        _1555 = _1383;
        _1556 = _1382;
        _1557 = _1394;
        _1558 = _1393;
        _1559 = _1392;
        _1560 = _1404;
        _1561 = _1403;
        _1562 = _1402;
        _1563 = _1417;
        _1564 = _1416;
        _1565 = _1415;
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1567 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1568 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    }
    else
    {
        _1553 = _1554;
        _1555 = _1554;
        _1556 = _1554;
        _1557 = _1554;
        _1558 = _1554;
        _1559 = _1554;
        _1560 = _1554;
        _1561 = _1554;
        _1562 = _1554;
        _1563 = _1554;
        _1564 = _1554;
        _1565 = _1554;
        _1566 = 0.0;
        _1567 = 0.0;
        _1568 = 0.0;
    }
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1592 = fma(_1252, cbModelParam._m0[30u].z, fma(_1248, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1244));
        float _1596 = fma(_1252, cbModelParam._m0[31u].z, fma(_1248, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1244));
        float _1600 = fma(_1252, cbModelParam._m0[32u].z, fma(_1248, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1244));
        float _1623 = _1244 + _1015;
        float _1624 = _1248 + _1016;
        float _1625 = _1252 + _1017;
        float _1635 = fma(_1625, cbModelParam._m0[30u].z, fma(_1624, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1623)) - _1592;
        float _1636 = fma(_1625, cbModelParam._m0[31u].z, fma(_1624, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1623)) - _1596;
        float _1637 = fma(_1625, cbModelParam._m0[32u].z, fma(_1624, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1623)) - _1600;
        float _1641 = inversesqrt(dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637)));
        float _1654 = ((_1641 * _1635) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1592 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1655 = ((_1641 * _1636) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1596 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1656 = ((_1641 * _1637) / cbModelParam._m0[35u].z) + ((((((_1600 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1658 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        vec4 _1665 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        vec4 _1672 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        vec4 _1679 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1654, _1655, _1656), 0.0);
        float _1691 = exp2((_1658.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1658.x + (-0.5));
        float _1693 = _1691 * (_1658.y + (-0.5));
        float _1694 = _1691 * (_1658.z + (-0.5));
        float _1701 = exp2((_1665.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1665.x + (-0.5));
        float _1703 = _1701 * (_1665.y + (-0.5));
        float _1704 = _1701 * (_1665.z + (-0.5));
        float _1711 = exp2((_1672.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1672.x + (-0.5));
        float _1713 = _1711 * (_1672.y + (-0.5));
        float _1714 = _1711 * (_1672.z + (-0.5));
        float _1721 = exp2((_1679.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1679.x + (-0.5));
        float _1723 = _1721 * (_1679.y + (-0.5));
        float _1724 = _1721 * (_1679.z + (-0.5));
        float _1725 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1726 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1727 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1728 = _1692 * 0.5;
        float _1729 = _1702 * 0.5;
        float _1730 = _1712 * 0.5;
        float _1731 = dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730));
        float _1736 = (_1731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1731);
        float _1744 = (dot(vec3(_1015, _1016, _1017), vec3(_1736 * _1728, _1736 * _1729, _1736 * _1730)) + 1.0) * 0.5;
        float _4536 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1753 = sqrt(((_1729 * _1729) + (_1728 * _1728)) + (_1730 * _1730)) / (_1725 + 9.9999997473787516355514526367188e-06);
        float _4547 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1755 = _1754 * 2.0;
        float _1759 = (1.0 - _1754) / (_1754 + 1.0);
        float _4558 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1769 = ((((1.0 - _1760) * (_1755 + 2.0)) * exp2(log2(isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_1755 + 1.0))) + _1760) * _1725;
        float _1770 = _1693 * 0.5;
        float _1771 = _1703 * 0.5;
        float _1772 = _1713 * 0.5;
        float _1773 = dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772));
        float _1778 = (_1773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1773);
        float _1786 = (dot(vec3(_1015, _1016, _1017), vec3(_1778 * _1770, _1778 * _1771, _1778 * _1772)) + 1.0) * 0.5;
        float _4569 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1795 = sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772)) / (_1726 + 9.9999997473787516355514526367188e-06);
        float _4580 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1797 = _1796 * 2.0;
        float _1801 = (1.0 - _1796) / (_1796 + 1.0);
        float _4591 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1811 = ((((1.0 - _1802) * (_1797 + 2.0)) * exp2(log2(isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_1797 + 1.0))) + _1802) * _1726;
        float _1812 = _1694 * 0.5;
        float _1813 = _1704 * 0.5;
        float _1814 = _1714 * 0.5;
        float _1815 = dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814));
        float _1820 = (_1815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1815);
        float _1828 = (dot(vec3(_1015, _1016, _1017), vec3(_1820 * _1812, _1820 * _1813, _1820 * _1814)) + 1.0) * 0.5;
        float _4602 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1837 = sqrt(((_1813 * _1813) + (_1812 * _1812)) + (_1814 * _1814)) / (_1727 + 9.9999997473787516355514526367188e-06);
        float _4613 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1839 = _1838 * 2.0;
        float _1843 = (1.0 - _1838) / (_1838 + 1.0);
        float _4624 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _1853 = ((((1.0 - _1844) * (_1839 + 2.0)) * exp2(log2(isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_1839 + 1.0))) + _1844) * _1727;
        _1861 = _1694;
        _1862 = _1693;
        _1863 = _1692;
        _1864 = _1704;
        _1865 = _1703;
        _1866 = _1702;
        _1867 = _1714;
        _1868 = _1713;
        _1869 = _1712;
        _1870 = _1727;
        _1871 = _1726;
        _1872 = _1725;
        _1873 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)));
        _1874 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)));
        _1875 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)));
    }
    else
    {
        _1861 = _1554;
        _1862 = _1554;
        _1863 = _1554;
        _1864 = _1554;
        _1865 = _1554;
        _1866 = _1554;
        _1867 = _1554;
        _1868 = _1554;
        _1869 = _1554;
        _1870 = _1554;
        _1871 = _1554;
        _1872 = _1554;
        _1873 = 0.0;
        _1874 = 0.0;
        _1875 = 0.0;
    }
    float _1885 = (cbModelParam._m0[1u].x * (_1873 - _1566)) + _1566;
    float _1886 = (cbModelParam._m0[1u].x * (_1874 - _1567)) + _1567;
    float _1887 = (cbModelParam._m0[1u].x * (_1875 - _1568)) + _1568;
    float _1908 = fma(_1887, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1885 * cbSceneParam._m0[89u].x));
    float _1911 = fma(_1887, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1885 * cbSceneParam._m0[90u].x));
    float _1914 = fma(_1887, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1885));
    float _1929 = _1188 * 0.5;
    float _1930 = _1189 * 0.5;
    float _1931 = _1190 * 0.5;
    float _1932 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1863, _1866, _1869, _1872));
    float _1935 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1862, _1865, _1868, _1871));
    float _1938 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1861, _1864, _1867, _1870));
    float _1972;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1945 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1553, _1557, _1560, _1563));
        float _1949 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1555, _1558, _1561, _1564));
        float _1953 = dot(vec4(_1929, _1930, _1931, 1.0), vec4(_1556, _1559, _1562, _1565));
        float _1960 = dot(vec4(cbModelParam._m0[39u]), vec4(_1929, _1930, _1931, 1.0));
        _1972 = dot(vec3(isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0)), isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1960) ? 0.0 : (isnan(0.0) ? _1960 : max(0.0, _1960))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1972 = 1.0;
    }
    float _1983;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1974 = dot(vec4(cbModelParam._m0[40u]), vec4(_1929, _1930, _1931, 1.0));
        _1983 = dot(vec3(isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1974) ? 0.0 : (isnan(0.0) ? _1974 : max(0.0, _1974))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1983 = 1.0;
    }
    float _1987 = (_1983 * cbModelParam._m0[1u].x) + (_1972 * (1.0 - cbModelParam._m0[1u].x));
    float _1997 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1018);
    float _1998 = isnan(_1997) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1997 : min(cbModelParam._m0[25u].z, _1997));
    float _2079;
    float _2081;
    float _2083;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2046 = fma(_1252, cbModelParam._m0[13u].z, fma(_1248, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1244)) + cbModelParam._m0[13u].w;
        float _2050 = fma(_1252, cbModelParam._m0[14u].z, fma(_1248, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1244)) + cbModelParam._m0[14u].w;
        float _2054 = fma(_1252, cbModelParam._m0[15u].z, fma(_1248, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1244)) + cbModelParam._m0[15u].w;
        float _2057 = fma(_1190, cbModelParam._m0[13u].z, fma(_1189, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1188));
        float _2060 = fma(_1190, cbModelParam._m0[14u].z, fma(_1189, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1188));
        float _2063 = fma(_1190, cbModelParam._m0[15u].z, fma(_1189, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1188));
        float _2091;
        if (_2057 > 0.0)
        {
            _2091 = abs((1.0 - _2046) / _2057);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2046 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2091 = frontier_phi_14_12_ladder;
        }
        float _2263;
        if (_2060 > 0.0)
        {
            _2263 = abs((1.0 - _2050) / _2060);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2050 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2263 = frontier_phi_23_19_ladder;
        }
        float _2558;
        if (_2063 > 0.0)
        {
            _2558 = abs((1.0 - _2054) / _2063);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2054 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2558 = frontier_phi_35_30_ladder;
        }
        float _2560 = isnan(_2263) ? _2091 : (isnan(_2091) ? _2263 : min(_2091, _2263));
        float _2561 = isnan(_2558) ? _2560 : (isnan(_2560) ? _2558 : min(_2560, _2558));
        float _2565 = (_2561 * _2057) + _2046;
        float _2566 = (_2561 * _2060) + _2050;
        float _2567 = (_2561 * _2063) + _2054;
        float _2568 = _2561 * 9.9999997473787516355514526367188e-05;
        float _2570 = (-1.0) - _2568;
        float _2572 = _2568 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2567 > _2572) || ((_2567 < _2570) || ((_2566 > _2572) || ((_2566 < _2570) || ((_2565 < _2570) || (_2565 > _2572))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2712 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2567, cbModelParam._m0[9u].z, fma(_2566, cbModelParam._m0[9u].y, _2565 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2567, cbModelParam._m0[10u].z, fma(_2566, cbModelParam._m0[10u].y, _2565 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2567, cbModelParam._m0[11u].z, fma(_2566, cbModelParam._m0[11u].y, _2565 * cbModelParam._m0[11u].x))), _1998);
            frontier_phi_13_35_ladder = _2712.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2712.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2712.x * cbModelParam._m0[1u].y;
        }
        _2079 = frontier_phi_13_35_ladder_2;
        _2081 = frontier_phi_13_35_ladder_1;
        _2083 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2067 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1188, _1189, _1190), _1998);
        _2079 = _2067.x * cbModelParam._m0[1u].y;
        _2081 = _2067.y * cbModelParam._m0[1u].y;
        _2083 = _2067.z * cbModelParam._m0[1u].y;
    }
    float _2087 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1018);
    float _2088 = isnan(_2087) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2087 : min(cbModelParam._m0[25u].w, _2087));
    float _2178;
    float _2180;
    float _2182;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2142 = fma(_1252, cbModelParam._m0[21u].z, fma(_1248, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1244)) + cbModelParam._m0[21u].w;
        float _2146 = fma(_1252, cbModelParam._m0[22u].z, fma(_1248, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1244)) + cbModelParam._m0[22u].w;
        float _2150 = fma(_1252, cbModelParam._m0[23u].z, fma(_1248, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1244)) + cbModelParam._m0[23u].w;
        float _2153 = fma(_1190, cbModelParam._m0[21u].z, fma(_1189, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1188));
        float _2156 = fma(_1190, cbModelParam._m0[22u].z, fma(_1189, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1188));
        float _2159 = fma(_1190, cbModelParam._m0[23u].z, fma(_1189, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1188));
        float _2268;
        if (_2153 > 0.0)
        {
            _2268 = abs((1.0 - _2142) / _2153);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2153 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2142 + 1.0) / _2153);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2268 = frontier_phi_25_21_ladder;
        }
        float _2585;
        if (_2156 > 0.0)
        {
            _2585 = abs((1.0 - _2146) / _2156);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2146 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2585 = frontier_phi_37_32_ladder;
        }
        float _2923;
        if (_2159 > 0.0)
        {
            _2923 = abs((1.0 - _2150) / _2159);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2150 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2923 = frontier_phi_47_44_ladder;
        }
        float _2925 = isnan(_2585) ? _2268 : (isnan(_2268) ? _2585 : min(_2268, _2585));
        float _2926 = isnan(_2923) ? _2925 : (isnan(_2925) ? _2923 : min(_2925, _2923));
        float _2930 = (_2926 * _2153) + _2142;
        float _2931 = (_2926 * _2156) + _2146;
        float _2932 = (_2926 * _2159) + _2150;
        float _2933 = _2926 * 9.9999997473787516355514526367188e-05;
        float _2934 = (-1.0) - _2933;
        float _2936 = _2933 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2932 > _2936) || ((_2932 < _2934) || ((_2931 > _2936) || ((_2931 < _2934) || ((_2930 < _2934) || (_2930 > _2936))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3054 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2932, cbModelParam._m0[17u].z, fma(_2931, cbModelParam._m0[17u].y, _2930 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2932, cbModelParam._m0[18u].z, fma(_2931, cbModelParam._m0[18u].y, _2930 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2932, cbModelParam._m0[19u].z, fma(_2931, cbModelParam._m0[19u].y, _2930 * cbModelParam._m0[19u].x))), _2088);
            frontier_phi_22_47_ladder = _3054.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3054.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3054.x * cbModelParam._m0[1u].z;
        }
        _2178 = frontier_phi_22_47_ladder_2;
        _2180 = frontier_phi_22_47_ladder_1;
        _2182 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2162 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1188, _1189, _1190), _2088);
        _2178 = _2162.x * cbModelParam._m0[1u].z;
        _2180 = _2162.y * cbModelParam._m0[1u].z;
        _2182 = _2162.z * cbModelParam._m0[1u].z;
    }
    float _2195 = (((_1215 * _1164) + _1216) * _1180) * ((cbModelParam._m0[1u].w * (_2178 - _2079)) + _2079);
    float _2197 = (((_1215 * _1166) + _1216) * _1180) * ((cbModelParam._m0[1u].w * (_2180 - _2081)) + _2081);
    float _2199 = (((_1215 * _1167) + _1216) * _1180) * ((cbModelParam._m0[1u].w * (_2182 - _2083)) + _2083);
    float _2202 = fma(_2199, cbSceneParam._m0[89u].z, fma(_2197, cbSceneParam._m0[89u].y, _2195 * cbSceneParam._m0[89u].x));
    float _2205 = fma(_2199, cbSceneParam._m0[90u].z, fma(_2197, cbSceneParam._m0[90u].y, _2195 * cbSceneParam._m0[90u].x));
    float _2208 = fma(_2199, cbSceneParam._m0[91u].z, fma(_2197, cbSceneParam._m0[91u].y, _2195 * cbSceneParam._m0[91u].x));
    float _2242 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2246 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2250 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2254 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2255 = _2242 / _2254;
    float _2256 = _2246 / _2254;
    float _2257 = _2250 / _2254;
    float _2404;
    float _2405;
    float _2406;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2284 = ((uint(_2257 > cbSceneParam._m0[59u].y) + uint(_2257 > cbSceneParam._m0[59u].x)) + uint(_2257 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2285 = _2284 + 43u;
        uint _2293 = _2284 + 44u;
        uint _2301 = _2284 + 45u;
        uint _2309 = _2284 + 46u;
        float _2320 = fma(_2254, cbSceneParam._m0[_2285].w, fma(_2250, cbSceneParam._m0[_2285].z, fma(_2246, cbSceneParam._m0[_2285].y, _2242 * cbSceneParam._m0[_2285].x)));
        float _2324 = fma(_2254, cbSceneParam._m0[_2293].w, fma(_2250, cbSceneParam._m0[_2293].z, fma(_2246, cbSceneParam._m0[_2293].y, _2242 * cbSceneParam._m0[_2293].x)));
        float _2332 = fma(_2254, cbSceneParam._m0[_2309].w, fma(_2250, cbSceneParam._m0[_2309].z, fma(_2246, cbSceneParam._m0[_2309].y, _2242 * cbSceneParam._m0[_2309].x)));
        float _2337 = cbSceneParam._m0[33u].z * _2332;
        float _2339 = cbSceneParam._m0[33u].w * _2332;
        float _2342 = fma(_2254, cbSceneParam._m0[_2301].w, fma(_2250, cbSceneParam._m0[_2301].z, fma(_2246, cbSceneParam._m0[_2301].y, _2242 * cbSceneParam._m0[_2301].x))) / _2332;
        float _2390 = (cbSceneParam._m0[33u].x - sqrt(((_2256 * _2256) + (_2255 * _2255)) + (_2257 * _2257))) * cbSceneParam._m0[33u].y;
        float _4750 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2397 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2337 + _2320) / _2332, (_2339 + _2324) / _2332), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2339 + _2320) / _2332, (_2324 - _2337) / _2332), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2320 - _2337) / _2332, (_2324 - _2339) / _2332), _2342), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2320 - _2339) / _2332, (_2337 + _2324) / _2332), _2342), 0.0)).x), vec4(0.25)));
        _2404 = 1.0 - (_2397 * cbSceneParam._m0[34u].x);
        _2405 = 1.0 - (_2397 * cbSceneParam._m0[34u].y);
        _2406 = 1.0 - (_2397 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2404 = 1.0;
        _2405 = 1.0;
        _2406 = 1.0;
    }
    float _2470;
    float _2472;
    float _2474;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2458 = fma(_2254, cbSceneParam._m0[63u].w, fma(_2250, cbSceneParam._m0[63u].z, fma(_2246, cbSceneParam._m0[63u].y, _2242 * cbSceneParam._m0[63u].x)));
        float _2459 = fma(_2254, cbSceneParam._m0[60u].w, fma(_2250, cbSceneParam._m0[60u].z, fma(_2246, cbSceneParam._m0[60u].y, _2242 * cbSceneParam._m0[60u].x))) / _2458;
        float _2460 = fma(_2254, cbSceneParam._m0[61u].w, fma(_2250, cbSceneParam._m0[61u].z, fma(_2246, cbSceneParam._m0[61u].y, _2242 * cbSceneParam._m0[61u].x))) / _2458;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2459 >= cbSceneParam._m0[64u].x) && (_2460 >= cbSceneParam._m0[64u].y)) && (_2459 <= cbSceneParam._m0[64u].z)) && (_2460 <= cbSceneParam._m0[64u].w))
        {
            float _2598 = fma(_2254, cbSceneParam._m0[62u].w, fma(_2250, cbSceneParam._m0[62u].z, fma(_2246, cbSceneParam._m0[62u].y, _2242 * cbSceneParam._m0[62u].x))) / _2458;
            float _2602 = isnan(cbSceneParam._m0[41u].w) ? _2598 : (isnan(_2598) ? cbSceneParam._m0[41u].w : max(_2598, cbSceneParam._m0[41u].w));
            float _2645 = (cbSceneParam._m0[33u].x - sqrt(((_2256 * _2256) + (_2255 * _2255)) + (_2257 * _2257))) * cbSceneParam._m0[33u].y;
            float _4766 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
            float _2652 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2459, cbSceneParam._m0[33u].w + _2460), _2602), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2459, _2460 - cbSceneParam._m0[33u].z), _2602), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2459 - cbSceneParam._m0[33u].z, _2460 - cbSceneParam._m0[33u].w), _2602), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2459 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2460), _2602), 0.0)).x), vec4(0.25)));
            float _2656 = 1.0 - (_2652 * cbSceneParam._m0[34u].x);
            float _2657 = 1.0 - (_2652 * cbSceneParam._m0[34u].y);
            float _2658 = 1.0 - (_2652 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2658) ? _2406 : (isnan(_2406) ? _2658 : min(_2406, _2658));
            frontier_phi_34_33_ladder_1 = isnan(_2657) ? _2405 : (isnan(_2405) ? _2657 : min(_2405, _2657));
            frontier_phi_34_33_ladder_2 = isnan(_2656) ? _2404 : (isnan(_2404) ? _2656 : min(_2404, _2656));
        }
        else
        {
            frontier_phi_34_33_ladder = _2406;
            frontier_phi_34_33_ladder_1 = _2405;
            frontier_phi_34_33_ladder_2 = _2404;
        }
        _2470 = frontier_phi_34_33_ladder_2;
        _2472 = frontier_phi_34_33_ladder_1;
        _2474 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2470 = _2404;
        _2472 = _2405;
        _2474 = _2406;
    }
    uvec4 _2479 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2481 = _2479.x * 14u;
    uint _2482 = _2481 + 13u;
    float _2489 = _1180 + (-1.0);
    float _2494 = (cbLight._m0[_2482].x * _2489) + 1.0;
    float _2495 = (cbLight._m0[_2482].y * _2489) + 1.0;
    float _2496 = (cbLight._m0[_2482].z * _2489) + 1.0;
    float _2497 = (cbLight._m0[_2482].w * _2489) + 1.0;
    uint _2498 = _2481 + 5u;
    float _2504 = isnan(1.0) ? _2495 : (isnan(_2495) ? 1.0 : min(_2495, 1.0));
    uint _2508 = _2481 + 4u;
    float _2517 = isnan(1.0) ? _2494 : (isnan(_2494) ? 1.0 : min(_2494, 1.0));
    uint _2521 = _2481 | 1u;
    float _2532 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_1015, _1016, _1017));
    float _2535 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_1015, _1016, _1017));
    float _4802 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _4813 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2540 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * 0.3183098733425140380859375;
    float _2542 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * 0.3183098733425140380859375;
    float _2549 = ((cbLight._m0[_2498].x * _2504) * _2542) + (((cbLight._m0[_2508].x * _2470) * _2517) * _2540);
    float _2550 = ((_2504 * cbLight._m0[_2498].y) * _2542) + (((cbLight._m0[_2508].y * _2472) * _2517) * _2540);
    float _2551 = ((_2504 * cbLight._m0[_2498].z) * _2542) + (((cbLight._m0[_2508].z * _2474) * _2517) * _2540);
    uvec4 _2555 = floatBitsToUint(cbLight._m0[_2481 + 12u]);
    bool _2557 = _2555.x == 0u;
    float _2659;
    float _2661;
    float _2663;
    if (_2557)
    {
        _2659 = _2549;
        _2661 = _2550;
        _2663 = _2551;
    }
    else
    {
        uint _2667 = _2481 + 6u;
        float _2683 = (dot(vec3(cbLight._m0[_2481 + 2u].xyz), vec3(_1015, _1016, _1017)) * 0.5) + 0.5;
        float _2684 = _2683 * _2683;
        float _4824 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2685 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2686 = isnan(1.0) ? _2496 : (isnan(_2496) ? 1.0 : min(_2496, 1.0));
        _2659 = (((cbLight._m0[_2667].x * 0.3183098733425140380859375) * _2685) * _2686) + _2549;
        _2661 = (((cbLight._m0[_2667].y * 0.3183098733425140380859375) * _2685) * _2686) + _2550;
        _2663 = (((cbLight._m0[_2667].z * 0.3183098733425140380859375) * _2685) * _2686) + _2551;
    }
    bool _2666 = _2555.y == 0u;
    float _2721;
    float _2723;
    float _2725;
    if (_2666)
    {
        _2721 = _2659;
        _2723 = _2661;
        _2725 = _2663;
    }
    else
    {
        uint _2894 = _2481 + 7u;
        float _2910 = (dot(vec3(cbLight._m0[_2481 + 3u].xyz), vec3(_1015, _1016, _1017)) * 0.5) + 0.5;
        float _2911 = _2910 * _2910;
        float _4840 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2912 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2913 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
        _2721 = (((cbLight._m0[_2894].x * 0.3183098733425140380859375) * _2912) * _2913) + _2659;
        _2723 = (((cbLight._m0[_2894].y * 0.3183098733425140380859375) * _2912) * _2913) + _2661;
        _2725 = (((cbLight._m0[_2894].z * 0.3183098733425140380859375) * _2912) * _2913) + _2663;
    }
    uint _2728 = _2481 + 8u;
    float _2741 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _1018) * 0.949999988079071044921875);
    float _2742 = _2741 * _2741;
    float _2743 = cbLight._m0[_2481].x + _1094;
    float _2744 = cbLight._m0[_2481].y + _1095;
    float _2745 = cbLight._m0[_2481].z + _1096;
    float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
    float _2750 = _2749 * _2743;
    float _2751 = _2749 * _2744;
    float _2752 = _2749 * _2745;
    float _2753 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2481].xyz));
    float _4856 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2756 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
    float _4867 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _2757 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
    float _2758 = dot(vec3(_1015, _1016, _1017), vec3(_2750, _2751, _2752));
    float _4878 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2761 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
    float _2762 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2750, _2751, _2752));
    float _4889 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2766 = _2742 * _2742;
    float _2770 = ((_2761 * _2761) * (_2766 + (-1.0))) + 1.0;
    float _2778 = exp2(log2(1.0 - (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0)))) * 5.0);
    float _2779 = 0.959999978542327880859375 - _1161;
    float _2781 = 0.959999978542327880859375 - _1162;
    float _2782 = 0.959999978542327880859375 - _1163;
    float _2789 = 1.0 - _2742;
    float _2800 = (0.5 / (((_2757 * ((_2756 * _2789) + _2742)) + 9.9999999392252902907785028219223e-09) + (((_2757 * _2789) + _2742) * _2756))) * _2756;
    float _4900 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
    float _2802 = (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2766 / ((_2770 * _2770) * 3.141590118408203125));
    uint _2816 = _2481 + 9u;
    float _2827 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _1018) * 0.949999988079071044921875);
    float _2828 = _2827 * _2827;
    float _2829 = cbLight._m0[_2521].x + _1094;
    float _2830 = cbLight._m0[_2521].y + _1095;
    float _2831 = cbLight._m0[_2521].z + _1096;
    float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
    float _2836 = _2835 * _2829;
    float _2837 = _2835 * _2830;
    float _2838 = _2835 * _2831;
    float _2839 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2521].xyz));
    float _4911 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
    float _2842 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
    float _2843 = dot(vec3(_1015, _1016, _1017), vec3(_2836, _2837, _2838));
    float _4922 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
    float _2846 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
    float _2847 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2836, _2837, _2838));
    float _4933 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
    float _2851 = _2828 * _2828;
    float _2855 = ((_2846 * _2846) * (_2851 + (-1.0))) + 1.0;
    float _2862 = exp2(log2(1.0 - (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0)))) * 5.0);
    float _2869 = 1.0 - _2828;
    float _2879 = (0.5 / (((_2757 * ((_2842 * _2869) + _2828)) + 9.9999999392252902907785028219223e-09) + (((_2757 * _2869) + _2828) * _2842))) * _2842;
    float _4944 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
    float _2881 = (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2851 / ((_2855 * _2855) * 3.141590118408203125));
    float _2891 = (((((_2862 * _2779) + _1164) * cbLight._m0[_2816].x) * _2881) * _2504) + ((((cbLight._m0[_2728].x * _2470) * ((_2778 * _2779) + _1164)) * _2802) * _2517);
    float _2892 = (((((_2862 * _2781) + _1166) * cbLight._m0[_2816].y) * _2881) * _2504) + ((((cbLight._m0[_2728].y * _2472) * ((_2778 * _2781) + _1166)) * _2802) * _2517);
    float _2893 = (((((_2862 * _2782) + _1167) * cbLight._m0[_2816].z) * _2881) * _2504) + ((((cbLight._m0[_2728].z * _2474) * ((_2778 * _2782) + _1167)) * _2802) * _2517);
    float _2949;
    float _2951;
    float _2953;
    if (_2557)
    {
        _2949 = _2891;
        _2951 = _2892;
        _2953 = _2893;
    }
    else
    {
        uint _2955 = _2481 + 2u;
        uint _2959 = _2481 + 10u;
        float _2973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2955].w)) * _1018) * 0.949999988079071044921875);
        float _2974 = _2973 * _2973;
        float _2975 = cbLight._m0[_2955].x + _1094;
        float _2976 = cbLight._m0[_2955].y + _1095;
        float _2977 = cbLight._m0[_2955].z + _1096;
        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
        float _2982 = _2981 * _2975;
        float _2983 = _2981 * _2976;
        float _2984 = _2981 * _2977;
        float _2985 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2955].xyz));
        float _4955 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2988 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
        float _2989 = dot(vec3(_1015, _1016, _1017), vec3(_2982, _2983, _2984));
        float _4966 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2992 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
        float _2993 = dot(vec3(cbLight._m0[_2955].xyz), vec3(_2982, _2983, _2984));
        float _4977 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2997 = _2974 * _2974;
        float _3001 = ((_2992 * _2992) * (_2997 + (-1.0))) + 1.0;
        float _3008 = exp2(log2(1.0 - (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) * 5.0);
        float _3015 = 1.0 - _2974;
        float _3025 = (0.5 / (((_2757 * ((_2988 * _3015) + _2974)) + 9.9999999392252902907785028219223e-09) + (((_2757 * _3015) + _2974) * _2988))) * _2988;
        float _4988 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
        float _3027 = (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0))) * (_2997 / ((_3001 * _3001) * 3.141590118408203125));
        float _3028 = isnan(1.0) ? _2496 : (isnan(_2496) ? 1.0 : min(_2496, 1.0));
        _2949 = (((((_3008 * _2779) + _1164) * cbLight._m0[_2959].x) * _3027) * _3028) + _2891;
        _2951 = (((((_3008 * _2781) + _1166) * cbLight._m0[_2959].y) * _3027) * _3028) + _2892;
        _2953 = (((((_3008 * _2782) + _1167) * cbLight._m0[_2959].z) * _3027) * _3028) + _2893;
    }
    float _3059;
    float _3061;
    float _3063;
    if (_2666)
    {
        _3059 = _2949;
        _3061 = _2951;
        _3063 = _2953;
    }
    else
    {
        uint _3070 = _2481 + 3u;
        uint _3074 = _2481 + 11u;
        float _3088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3070].w)) * _1018) * 0.949999988079071044921875);
        float _3089 = _3088 * _3088;
        float _3090 = cbLight._m0[_3070].x + _1094;
        float _3091 = cbLight._m0[_3070].y + _1095;
        float _3092 = cbLight._m0[_3070].z + _1096;
        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
        float _3097 = _3096 * _3090;
        float _3098 = _3096 * _3091;
        float _3099 = _3096 * _3092;
        float _3100 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_3070].xyz));
        float _5004 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
        float _3103 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
        float _3104 = dot(vec3(_1015, _1016, _1017), vec3(_3097, _3098, _3099));
        float _5015 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
        float _3107 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
        float _3108 = dot(vec3(cbLight._m0[_3070].xyz), vec3(_3097, _3098, _3099));
        float _5026 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
        float _3112 = _3089 * _3089;
        float _3116 = ((_3107 * _3107) * (_3112 + (-1.0))) + 1.0;
        float _3123 = exp2(log2(1.0 - (isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0)))) * 5.0);
        float _3130 = 1.0 - _3089;
        float _3140 = (0.5 / (((_2757 * ((_3103 * _3130) + _3089)) + 9.9999999392252902907785028219223e-09) + (((_2757 * _3130) + _3089) * _3103))) * _3103;
        float _5037 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
        float _3142 = (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0))) * (_3112 / ((_3116 * _3116) * 3.141590118408203125));
        float _3143 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
        _3059 = (((((_3123 * _2779) + _1164) * cbLight._m0[_3074].x) * _3142) * _3143) + _2949;
        _3061 = (((((_3123 * _2781) + _1166) * cbLight._m0[_3074].y) * _3142) * _3143) + _2951;
        _3063 = (((((_3123 * _2782) + _1167) * cbLight._m0[_3074].z) * _3142) * _3143) + _2953;
    }
    float _3209;
    float _3211;
    float _3213;
    float _3215;
    float _3217;
    float _3219;
    if (_2479.y == 0u)
    {
        uvec4 _3164 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3165 = _3164.x;
        uint _3176 = uint((float(_3164.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1103) / _3165))) + floor(float(uint(cbSceneParam._m0[85u].x * _1102) / _3165)));
        float _3186 = (log2(_2257 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3187 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
        uint _3190 = uint(isnan(14.0) ? _3187 : (isnan(_3187) ? 14.0 : min(_3187, 14.0)));
        uvec4 _3195 = texelFetch(g_lightClusterGridBuffer, int(((_3190 << 2u) + (_3176 << 6u)) >> 2u));
        uint _3196 = _3195.x;
        uint _3197 = _3164.z;
        float _3276;
        float _3278;
        float _3280;
        float _3282;
        float _3284;
        float _3286;
        if (((((1u << ((_3197 >> 4u) & 15u)) + 4294967295u) & _3196) == 0u) || ((_3197 & 240u) == 0u))
        {
            _3276 = 0.0;
            _3278 = 0.0;
            _3280 = 0.0;
            _3282 = 0.0;
            _3284 = 0.0;
            _3286 = 0.0;
        }
        else
        {
            float _3277;
            float _3279;
            float _3281;
            float _3283;
            float _3285;
            float _3287;
            float _3420 = 0.0;
            float _3421 = 0.0;
            float _3422 = 0.0;
            float _3423 = 0.0;
            float _3424 = 0.0;
            float _3425 = 0.0;
            uint _3426 = 0u;
            uint _3435;
            bool _3436;
            for (;;)
            {
                _3435 = texelFetch(g_lightClassification, int((((_3190 << 5u) + (_3176 << 9u)) + (_3426 << 2u)) >> 2u)).x;
                _3436 = _3435 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3436)
                {
                    frontier_phi_66_pred = _3425;
                    frontier_phi_66_pred_1 = _3424;
                    frontier_phi_66_pred_2 = _3423;
                    frontier_phi_66_pred_3 = _3422;
                    frontier_phi_66_pred_4 = _3421;
                    frontier_phi_66_pred_5 = _3420;
                }
                else
                {
                    float _3544;
                    float _3545;
                    float _3546;
                    float _3547;
                    float _3548;
                    float _3549;
                    uint _3550;
                    _3544 = _3420;
                    _3545 = _3421;
                    _3546 = _3422;
                    _3547 = _3423;
                    _3548 = _3424;
                    _3549 = _3425;
                    _3550 = _3435;
                    float _3476;
                    float _3477;
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    for (;;)
                    {
                        uint _3554 = uint(findLSB(_3550)) + (_3426 << 5u);
                        uint _3551 = (_3550 + 4294967295u) & _3550;
                        uint _3556 = _3554 * 48u;
                        vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3556)).x, texelFetch(g_PointLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3556 + 3u)).x));
                        uint _3576 = (_3554 * 48u) + 4u;
                        vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3576)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 3u)).x));
                        uint _3595 = (_3554 * 48u) + 8u;
                        vec3 _3606 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3595)).x, texelFetch(g_PointLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3595 + 2u)).x));
                        float _3610 = _3570.x - _2255;
                        float _3611 = _3570.y - _2256;
                        float _3612 = _3570.z - _2257;
                        float _3613 = dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612));
                        float _3616 = inversesqrt(_3613);
                        float _3617 = _3616 * _3610;
                        float _3618 = _3616 * _3611;
                        float _3619 = _3616 * _3612;
                        float _3620 = dot(vec3(_1121, _1124, _1127), vec3(_3617, _3618, _3619));
                        float _3625 = 1.0 - (_3613 * _3570.w);
                        float _5063 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                        float _3626 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                        float _3627 = sqrt(_3613) * _3589.w;
                        float _3630 = 1.39999997615814208984375 / (_3627 + 1.39999997615814208984375);
                        float _3631 = _3630 * _3630;
                        float _3634 = ((1.0 - _3631) * _3620) + _3631;
                        float _3637 = _3627 * _3627;
                        float _3641 = ((isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0))) * _3626) / ((_3637 * 0.699999988079071044921875) + 1.0);
                        float _3645 = (-0.0) - _2255;
                        float _3646 = (-0.0) - _2256;
                        float _3647 = (-0.0) - _2257;
                        float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                        float _3652 = _3651 * _3645;
                        float _3653 = _3651 * _3646;
                        float _3654 = _3651 * _3647;
                        float _3661 = exp2(log2(1.0 / ((_3637 * 3.5) + 5.0)) * 0.25);
                        float _3662 = 1.0 - _1196;
                        float _3669 = sqrt(1.0 - ((1.0 - (_3662 * _3662)) * (1.0 - (_3661 * _3661))));
                        float _3670 = _3669 * _3669;
                        float _3671 = _3670 * _3670;
                        float _3672 = _3652 + _3617;
                        float _3673 = _3653 + _3618;
                        float _3674 = _3654 + _3619;
                        float _3678 = inversesqrt(dot(vec3(_3672, _3673, _3674), vec3(_3672, _3673, _3674)));
                        float _3682 = dot(vec3(_1121, _1124, _1127), vec3(_3652, _3653, _3654));
                        float _5079 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                        float _3685 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                        float _3686 = dot(vec3(_1121, _1124, _1127), vec3(_3678 * _3672, _3678 * _3673, _3678 * _3674));
                        float _5090 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                        float _3689 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                        float _3693 = ((_3689 * _3689) * (_3671 + (-1.0))) + 1.0;
                        float _3694 = _3630 * _3670;
                        float _3695 = _3694 * _3694;
                        float _3698 = ((1.0 - _3695) * _3620) + _3695;
                        float _5101 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                        float _3699 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
                        float _3700 = 1.0 - _3670;
                        float _3710 = (0.5 / (((_3699 * ((_3685 * _3700) + _3670)) + 9.9999999392252902907785028219223e-09) + (((_3699 * _3700) + _3670) * _3685))) * _3699;
                        float _5112 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                        float _3721 = (((_3671 * 3.1415927410125732421875) * (isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0)))) / ((_3693 * _3693) * ((_3637 * 2.1991131305694580078125) + 3.141590118408203125))) * _3626;
                        _3479 = (_3641 * _3589.x) + _3547;
                        _3480 = (_3641 * _3589.y) + _3548;
                        _3481 = (_3641 * _3589.z) + _3549;
                        _3476 = (_3721 * _3606.x) + _3544;
                        _3477 = (_3721 * _3606.y) + _3545;
                        _3478 = (_3721 * _3606.z) + _3546;
                        if (_3551 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3544 = _3476;
                            _3545 = _3477;
                            _3546 = _3478;
                            _3547 = _3479;
                            _3548 = _3480;
                            _3549 = _3481;
                            _3550 = _3551;
                        }
                    }
                    frontier_phi_66_pred = _3481;
                    frontier_phi_66_pred_1 = _3480;
                    frontier_phi_66_pred_2 = _3479;
                    frontier_phi_66_pred_3 = _3478;
                    frontier_phi_66_pred_4 = _3477;
                    frontier_phi_66_pred_5 = _3476;
                }
                _3287 = frontier_phi_66_pred;
                _3285 = frontier_phi_66_pred_1;
                _3283 = frontier_phi_66_pred_2;
                _3281 = frontier_phi_66_pred_3;
                _3279 = frontier_phi_66_pred_4;
                _3277 = frontier_phi_66_pred_5;
                uint _3427 = _3426 + 1u;
                if (_3427 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3420 = _3277;
                    _3421 = _3279;
                    _3422 = _3281;
                    _3423 = _3283;
                    _3424 = _3285;
                    _3425 = _3287;
                    _3426 = _3427;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3276 = _3277;
            _3278 = _3279;
            _3280 = _3281;
            _3282 = _3283;
            _3284 = _3285;
            _3286 = _3287;
        }
        uvec4 _3290 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3291 = _3290.z;
        uint _3293 = (_3291 >> 8u) & 15u;
        float _3388;
        float _3390;
        float _3392;
        float _3394;
        float _3396;
        float _3398;
        if (((4294967295u << _3293) & _3196) == 0u)
        {
            _3388 = _3276;
            _3390 = _3278;
            _3392 = _3280;
            _3394 = _3282;
            _3396 = _3284;
            _3398 = _3286;
        }
        else
        {
            float _3413 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
            float _3414 = _3413 * _2255;
            float _3415 = _3413 * _2256;
            float _3416 = _3413 * _2257;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3293 < ((_3291 >> 12u) & 15u))
            {
                float _3389;
                float _3391;
                float _3393;
                float _3395;
                float _3397;
                float _3399;
                float _3527 = _3276;
                float _3528 = _3278;
                float _3529 = _3280;
                float _3530 = _3282;
                float _3531 = _3284;
                float _3532 = _3286;
                uint _3533 = _3293;
                uint _3542;
                bool _3543;
                for (;;)
                {
                    _3542 = texelFetch(g_lightClassification, int((((_3190 << 5u) + (_3176 << 9u)) + (_3533 << 2u)) >> 2u)).x;
                    _3543 = _3542 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3543)
                    {
                        frontier_phi_72_pred = _3532;
                        frontier_phi_72_pred_1 = _3531;
                        frontier_phi_72_pred_2 = _3530;
                        frontier_phi_72_pred_3 = _3529;
                        frontier_phi_72_pred_4 = _3528;
                        frontier_phi_72_pred_5 = _3527;
                    }
                    else
                    {
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _4019;
                        float _4020;
                        float _4021;
                        float _4022;
                        float _4023;
                        float _4024;
                        float _3739 = _3527;
                        float _3740 = _3528;
                        float _3741 = _3529;
                        float _3742 = _3530;
                        float _3743 = _3531;
                        float _3744 = _3532;
                        uint _3745 = _3542;
                        uint _3746;
                        vec4 _3771;
                        float _3772;
                        vec4 _3787;
                        vec3 _3799;
                        vec4 _3814;
                        vec4 _3829;
                        float _3875;
                        bool _3876;
                        for (;;)
                        {
                            uint _3756 = ((_3533 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3745));
                            _3746 = (_3745 + 4294967295u) & _3745;
                            uint _3758 = _3756 * 40u;
                            _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            _3772 = _3771.w;
                            uint _3774 = (_3756 * 40u) + 4u;
                            _3787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 3u)).x));
                            uint _3789 = (_3756 * 40u) + 8u;
                            _3799 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x));
                            uint _3801 = (_3756 * 40u) + 16u;
                            _3814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 3u)).x));
                            uint _3816 = (_3756 * 40u) + 20u;
                            _3829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 3u)).x));
                            uint _3831 = (_3756 * 40u) + 24u;
                            vec4 _3844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 3u)).x));
                            uint _3850 = (_3756 * 40u) + 28u;
                            vec4 _3863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3850 + 3u)).x));
                            _3875 = fma(_2257, _3863.z, fma(_2256, _3863.y, _3863.x * _2255)) + _3863.w;
                            _3876 = !((fma(_2257, _3844.z, fma(_2256, _3844.y, _3844.x * _2255)) + _3844.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3876)
                            {
                                float _3903 = _3771.x - _2255;
                                float _3904 = _3771.y - _2256;
                                float _3905 = _3771.z - _2257;
                                float _3906 = dot(vec3(_3903, _3904, _3905), vec3(_3903, _3904, _3905));
                                float _3909 = inversesqrt(_3906);
                                float _3910 = _3909 * _3903;
                                float _3911 = _3909 * _3904;
                                float _3912 = _3909 * _3905;
                                float _3916 = 1.0 - (_3906 / (_3772 * _3772));
                                float _5123 = isnan(0.0) ? _3916 : (isnan(_3916) ? 0.0 : max(_3916, 0.0));
                                float _3917 = isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0));
                                float _3921 = sqrt(_3906) * _3787.w;
                                float _3923 = 1.39999997615814208984375 / (_3921 + 1.39999997615814208984375);
                                float _3924 = _3923 * _3923;
                                float _3927 = ((1.0 - _3924) * dot(vec3(_3910, _3911, _3912), vec3(_1121, _1124, _1127))) + _3924;
                                float _3930 = _3921 * _3921;
                                float _3934 = (fma(_2257, _3814.z, fma(_2256, _3814.y, _3814.x * _2255)) + _3814.w) / _3875;
                                float _3935 = (fma(_2257, _3829.z, fma(_2256, _3829.y, _3829.x * _2255)) + _3829.w) / _3875;
                                float _3939 = 1.0 - dot(vec2(_3934, _3935), vec2(_3934, _3935));
                                float _5139 = isnan(0.0) ? _3939 : (isnan(_3939) ? 0.0 : max(_3939, 0.0));
                                float _3940 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
                                float _3941 = _3940 * (((isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0))) * _3917) / ((_3930 * 0.699999988079071044921875) + 1.0));
                                float _3953 = exp2(log2(1.0 / ((_3930 * 3.5) + 5.0)) * 0.25);
                                float _3954 = 1.0 - _1196;
                                float _3961 = sqrt(1.0 - ((1.0 - (_3954 * _3954)) * (1.0 - (_3953 * _3953))));
                                float _3962 = _3961 * _3961;
                                float _3963 = _3962 * _3962;
                                float _3964 = _3910 - _3414;
                                float _3965 = _3911 - _3415;
                                float _3966 = _3912 - _3416;
                                float _3970 = inversesqrt(dot(vec3(_3964, _3965, _3966), vec3(_3964, _3965, _3966)));
                                float _3974 = dot(vec3(_1121, _1124, _1127), vec3((-0.0) - _3414, (-0.0) - _3415, (-0.0) - _3416));
                                float _5150 = isnan(0.0) ? _3974 : (isnan(_3974) ? 0.0 : max(_3974, 0.0));
                                float _3977 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
                                float _3978 = dot(vec3(_1121, _1124, _1127), vec3(_3970 * _3964, _3970 * _3965, _3970 * _3966));
                                float _5161 = isnan(0.0) ? _3978 : (isnan(_3978) ? 0.0 : max(_3978, 0.0));
                                float _3981 = isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0));
                                float _3985 = ((_3981 * _3981) * (_3963 + (-1.0))) + 1.0;
                                float _3986 = _3923 * _3962;
                                float _3987 = _3986 * _3986;
                                float _3993 = ((1.0 - _3987) * dot(vec3(_1121, _1124, _1127), vec3(_3910, _3911, _3912))) + _3987;
                                float _5172 = isnan(0.0) ? _3993 : (isnan(_3993) ? 0.0 : max(_3993, 0.0));
                                float _3994 = isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0));
                                float _3995 = 1.0 - _3962;
                                float _4005 = (0.5 / (((_3994 * ((_3977 * _3995) + _3962)) + 9.9999999392252902907785028219223e-09) + (((_3994 * _3995) + _3962) * _3977))) * _3994;
                                float _5183 = isnan(0.0) ? _4005 : (isnan(_4005) ? 0.0 : max(_4005, 0.0));
                                float _4015 = (_3940 * _3917) * (((_3963 * 3.1415927410125732421875) * (isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0)))) / ((_3985 * _3985) * ((_3930 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3941 * _3787.y;
                                frontier_phi_78_pred_1 = _3941 * _3787.x;
                                frontier_phi_78_pred_2 = _4015 * _3799.z;
                                frontier_phi_78_pred_3 = _4015 * _3799.y;
                                frontier_phi_78_pred_4 = _4015 * _3799.x;
                                frontier_phi_78_pred_5 = _3941 * _3787.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4023 = frontier_phi_78_pred;
                            _4022 = frontier_phi_78_pred_1;
                            _4021 = frontier_phi_78_pred_2;
                            _4020 = frontier_phi_78_pred_3;
                            _4019 = frontier_phi_78_pred_4;
                            _4024 = frontier_phi_78_pred_5;
                            _3729 = _4022 + _3742;
                            _3730 = _4023 + _3743;
                            _3731 = _4024 + _3744;
                            _3726 = _4019 + _3739;
                            _3727 = _4020 + _3740;
                            _3728 = _4021 + _3741;
                            if (_3746 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3739 = _3726;
                                _3740 = _3727;
                                _3741 = _3728;
                                _3742 = _3729;
                                _3743 = _3730;
                                _3744 = _3731;
                                _3745 = _3746;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3731;
                        frontier_phi_72_pred_1 = _3730;
                        frontier_phi_72_pred_2 = _3729;
                        frontier_phi_72_pred_3 = _3728;
                        frontier_phi_72_pred_4 = _3727;
                        frontier_phi_72_pred_5 = _3726;
                    }
                    _3399 = frontier_phi_72_pred;
                    _3397 = frontier_phi_72_pred_1;
                    _3395 = frontier_phi_72_pred_2;
                    _3393 = frontier_phi_72_pred_3;
                    _3391 = frontier_phi_72_pred_4;
                    _3389 = frontier_phi_72_pred_5;
                    uint _3534 = _3533 + 1u;
                    if (_3534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3527 = _3389;
                        _3528 = _3391;
                        _3529 = _3393;
                        _3530 = _3395;
                        _3531 = _3397;
                        _3532 = _3399;
                        _3533 = _3534;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3399;
                frontier_phi_60_61_ladder_1 = _3397;
                frontier_phi_60_61_ladder_2 = _3393;
                frontier_phi_60_61_ladder_3 = _3391;
                frontier_phi_60_61_ladder_4 = _3389;
                frontier_phi_60_61_ladder_5 = _3395;
            }
            else
            {
                frontier_phi_60_61_ladder = _3286;
                frontier_phi_60_61_ladder_1 = _3284;
                frontier_phi_60_61_ladder_2 = _3280;
                frontier_phi_60_61_ladder_3 = _3278;
                frontier_phi_60_61_ladder_4 = _3276;
                frontier_phi_60_61_ladder_5 = _3282;
            }
            _3388 = frontier_phi_60_61_ladder_4;
            _3390 = frontier_phi_60_61_ladder_3;
            _3392 = frontier_phi_60_61_ladder_2;
            _3394 = frontier_phi_60_61_ladder_5;
            _3396 = frontier_phi_60_61_ladder_1;
            _3398 = frontier_phi_60_61_ladder;
        }
        float _3403 = isnan(1.0) ? _1180 : (isnan(_1180) ? 1.0 : min(_1180, 1.0));
        _3209 = (_3403 * _3394) + _2721;
        _3211 = (_3403 * _3396) + _2723;
        _3213 = (_3403 * _3398) + _2725;
        _3215 = ((_3388 * _1164) * _3403) + _3059;
        _3217 = ((_3390 * _1166) * _3403) + _3061;
        _3219 = ((_3392 * _1167) * _3403) + _3063;
    }
    else
    {
        _3209 = _2721;
        _3211 = _2723;
        _3213 = _2725;
        _3215 = _3059;
        _3217 = _3061;
        _3219 = _3063;
    }
    float _5199 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _5210 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _5221 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    uint _3239 = _291 + 6u;
    float _3247 = _1102 / cbSceneParam._m0[86u].x;
    float _3248 = _1103 / cbSceneParam._m0[86u].y;
    vec4 _3262 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3247, _3248, (log2((isnan(cbSceneParam._m0[77u].w) ? _1037 : (isnan(_1037) ? cbSceneParam._m0[77u].w : min(_1037, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3264 = _3262.x;
    float _3265 = _3262.y;
    float _3266 = _3262.z;
    float _3267 = _3262.w;
    float _3338;
    float _3340;
    float _3342;
    float _3344;
    if (_1037 > cbSceneParam._m0[78u].w)
    {
        float _3301 = isnan(_1037) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1037 : min(cbSceneParam._m0[80u].w, _1037));
        float _3302 = _3301 / _1037;
        float _3313 = _3302 * _1087;
        float _3314 = _1088 * _3302;
        float _3315 = (-0.0) - _3314;
        float _3316 = _3302 * _1089;
        float _3318 = (cbSceneParam._m0[77u].w * _3315) / _3301;
        float _3319 = _3318 + cbSceneParam._m0[79u].w;
        float _3320 = cbSceneParam._m0[79u].w - _3314;
        float _3326 = sqrt(((_3313 * _3313) + (_3314 * _3314)) + (_3316 * _3316));
        float _3329 = (1.0 - (cbSceneParam._m0[77u].w / _3301)) * _3326;
        float _3334 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3336 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3489;
        if (abs((_3315 - _3318) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3489 = ((((_3319 > 0.0) ? exp2(_3334 * _3319) : (2.0 - exp2(_3336 * _3319))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3329;
        }
        else
        {
            float _3449 = 1.0 / cbSceneParam._m0[80u].x;
            float _3450 = isnan(_3320) ? _3319 : (isnan(_3319) ? _3320 : max(_3319, _3320));
            float _3451 = isnan(_3320) ? _3319 : (isnan(_3319) ? _3320 : min(_3319, _3320));
            float _3460 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : min(_3450, 0.0));
            float _3461 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : min(_3451, 0.0));
            _3489 = ((abs(_3326 / _3315) * cbSceneParam._m0[80u].y) * ((((_3460 - _3461) * 2.0) - ((exp2(_3334 * (isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0)))) - exp2(_3334 * (isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0))))) * _3449)) - ((exp2(_3336 * _3460) - exp2(_3336 * _3461)) * _3449))) + (_3329 * cbSceneParam._m0[80u].z);
        }
        vec4 _3491 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3247, _3248, 1.0), 0.0);
        float _3500 = exp2((_3489 * (-1.44269502162933349609375)) * (1.0 - _3491.w));
        float _3501 = log2(_3500);
        float _3517 = log2(_3267);
        _3338 = (exp2(_3517 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3501 * cbSceneParam._m0[78u].x)) * _3491.x) / cbSceneParam._m0[78u].x)) + _3264;
        _3340 = (exp2(_3517 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3501 * cbSceneParam._m0[78u].y)) * _3491.y) / cbSceneParam._m0[78u].y)) + _3265;
        _3342 = (exp2(_3517 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3501 * cbSceneParam._m0[78u].z)) * _3491.z) / cbSceneParam._m0[78u].z)) + _3266;
        _3344 = _3500 * _3267;
    }
    else
    {
        _3338 = _3264;
        _3340 = _3265;
        _3342 = _3266;
        _3344 = _3267;
    }
    float _3356 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3357 = _3356 == 3.0;
    float _3358 = log2(_3344);
    float _3365 = exp2(_3358 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0))) * (_3209 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1180))) + ((_3215 + ((isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0))) * _1987)) * cbPerFrame._m0[3u].x));
    float _3366 = exp2(_3358 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0))) * (_3211 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1180))) + ((_3217 + ((isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0))) * _1987)) * cbPerFrame._m0[3u].x));
    float _3367 = exp2(_3358 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0))) * (_3213 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1180))) + ((_3219 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1987)) * cbPerFrame._m0[3u].x));
    float _3376 = (_3356 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3376 * (_3357 ? _3365 : (_3365 + (cbSceneParam._m0[72u].w * _3338)));
    SV_Target.y = _3376 * (_3357 ? _3366 : (_3366 + (cbSceneParam._m0[72u].w * _3340)));
    SV_Target.z = _3376 * (_3357 ? _3367 : (_3367 + (cbSceneParam._m0[72u].w * _3342)));
    SV_Target.w = cbInstanceData._m0[_3239].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3239].w;
}


