#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1473;
float _3852;
float _3853;
float _3854;
float _3855;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3864 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3875 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3886 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _344 = _339.x * cbMtdParam._m0[11u].x;
    float _345 = _339.y * cbMtdParam._m0[11u].y;
    float _346 = _339.z * cbMtdParam._m0[11u].z;
    vec4 _365 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _419 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _421 = _419.x;
    float _433 = dot(vec4(_421, _419.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _450 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _384.x) * 2.0) - ((((_421 - _433) * cbMtdParam._m0[23u].w) + _433) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3897 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _458 = (_451 * ((_365.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _459 = (_451 * ((_365.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _460 = (_451 * ((_365.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _477 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _497 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _499 = _497.x;
    float _509 = dot(vec4(_499, _497.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _523 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _384.y) * 2.0) - ((((_499 - _509) * cbMtdParam._m0[23u].w) + _509) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3908 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _524 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _531 = (_524 * ((_477.x * cbMtdParam._m0[13u].x) - _458)) + _458;
    float _532 = (_524 * ((_477.y * cbMtdParam._m0[13u].y) - _459)) + _459;
    float _533 = (_524 * ((_477.z * cbMtdParam._m0[13u].z) - _460)) + _460;
    vec4 _552 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _301) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _302) + cbTextureTilingScale._m0[24u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _571 = _569.x;
    float _581 = dot(vec4(_571, _569.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _593 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _384.z) * 2.0) - ((((_571 - _581) * cbMtdParam._m0[23u].w) + _581) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3919 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _601 = (_594 * ((_552.x * cbMtdParam._m0[14u].x) - _531)) + _531;
    float _602 = (_594 * ((_552.y * cbMtdParam._m0[14u].y) - _532)) + _532;
    float _603 = (_594 * ((_552.z * cbMtdParam._m0[14u].z) - _533)) + _533;
    float _607 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _601;
    float _610 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _602;
    float _613 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _603;
    float _620 = ((_601 - _607) * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) + _607;
    float _621 = ((_602 - _610) * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) + _610;
    float _622 = ((_603 - _613) * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) + _613;
    vec4 _634 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _657 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _676 = _674.x;
    float _677 = _674.y;
    float _678 = _674.z;
    float _685 = ((_657.x - _676) * _451) + _676;
    float _686 = ((_657.y - _677) * _451) + _677;
    float _687 = ((_657.z - _678) * _451) + _678;
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _710 = ((_699.x - _685) * _524) + _685;
    float _711 = ((_699.y - _686) * _524) + _686;
    float _712 = ((_699.z - _687) * _524) + _687;
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _301) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _302) + cbTextureTilingScale._m0[23u].w));
    float _737 = ((_724.z - _712) * _594) + _712;
    float _740 = ((((_724.x - _710) * _594) + _710) * 2.0) + (-1.0);
    float _741 = ((((_724.y - _711) * _594) + _711) * 2.0) + (-1.0);
    float _742 = dot(vec2(_740, _741), vec2(_740, _741));
    float _3930 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _747 = sqrt(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))));
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _779 = (_740 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_634.x * 2.0) + (-1.0)))) + (((_767.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _780 = (_741 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_634.y * 2.0) + (-1.0)))) + (((_767.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _806 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _808 = _806.x;
    float _826 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _808) * _451) + _808;
    float _844 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _826) * _524) + _826;
    float _862 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _301) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _302) + cbTextureTilingScale._m0[10u].w)).x - _844) * _594) + _844;
    float _866 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _862) * cbMtdParam._m0[19u].z) + _862;
    float _871 = (((_634.z - _737) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _737;
    float _875 = ((_767.z - _871) * cbMtdParam._m0[19u].w) + _871;
    float _879 = cbMtdParam._m0[22u].x + _767.w;
    float _882 = fma(_747, _248 * NORMAL.x, fma(_780, _255 * TANGENT.x, (_241 * _233) * _779));
    float _885 = fma(_747, _248 * NORMAL.y, fma(_780, _255 * TANGENT.y, (_241 * _234) * _779));
    float _888 = fma(_747, _248 * NORMAL.z, fma(_780, _255 * TANGENT.z, (_241 * _235) * _779));
    float _892 = inversesqrt(dot(vec3(_882, _885, _888), vec3(_882, _885, _888)));
    float _893 = _892 * _882;
    float _894 = _892 * _885;
    float _895 = _892 * _888;
    float _3941 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _896 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _3963 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3974 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3985 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3996 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _901 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _915 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _965 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _955);
    float _966 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _955);
    float _967 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _955);
    float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
    float _972 = _965 * _971;
    float _973 = _966 * _971;
    float _974 = _967 * _971;
    vec4 _979 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _981 = _979.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1153 = sqrt(((_965 * _965) + (_966 * _966)) + (_967 * _967));
        float _1159 = (cbMatDynParam._m0[5u].x * _1153) + cbMatDynParam._m0[5u].y;
        float _4007 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1164 = (cbMatDynParam._m0[5u].z * _1153) + cbMatDynParam._m0[5u].w;
        float _4018 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) - _1160)) + _1160) < ((_981 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _992 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _993 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1011 = fma(_895, cbSceneParam._m0[5u].z, fma(_894, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _893));
    float _1014 = fma(_895, cbSceneParam._m0[6u].z, fma(_894, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _893));
    float _1017 = fma(_895, cbSceneParam._m0[7u].z, fma(_894, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _893));
    uint _1030 = _282 + 9u;
    uint _1031 = _1030 + uint(cbMatDynParam._m0[0u].w);
    float _1037 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * cbInstanceData._m0[_1031].x;
    float _1038 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * cbInstanceData._m0[_1031].y;
    float _1039 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * cbInstanceData._m0[_1031].z;
    float _4029 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1040 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1041 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _4051 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1042 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _1043 = 1.0 - _901;
    float _1044 = _1040 * _1043;
    float _1045 = _1041 * _1043;
    float _1046 = _1042 * _1043;
    float _1051 = (_1040 + (-0.039999999105930328369140625)) * _901;
    float _1052 = (_1041 + (-0.039999999105930328369140625)) * _901;
    float _1053 = (_1042 + (-0.039999999105930328369140625)) * _901;
    float _1054 = _1051 + 0.039999999105930328369140625;
    float _1056 = _1052 + 0.039999999105930328369140625;
    float _1057 = _1053 + 0.039999999105930328369140625;
    vec4 _1066 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _992, cbSceneParam._m0[86u].y * _993));
    float _1070 = ((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * TEXCOORD_5.w) * _1066.x;
    float _1071 = dot(vec3(_893, _894, _895), vec3(_972, _973, _974));
    float _1074 = _1071 * 2.0;
    float _1078 = (_1074 * _893) - _972;
    float _1079 = (_1074 * _894) - _973;
    float _1080 = (_1074 * _895) - _974;
    float _1084 = abs(dot(vec3(_972, _973, _974), vec3(_893, _894, _895)));
    float _4062 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _1086 = sqrt(_896);
    float _1099 = exp2((_1086 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1086 * 3.0));
    float _1105 = (1.0 - _1099) * ((_1086 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1106 = _1099 * _1086;
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1472;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1197 = fma(_1142, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1134));
        float _1201 = fma(_1142, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1134));
        float _1205 = fma(_1142, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1134));
        float _1230 = _1134 + _893;
        float _1231 = _1138 + _894;
        float _1232 = _1142 + _895;
        float _1242 = fma(_1232, cbModelParam._m0[26u].z, fma(_1231, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1230)) - _1197;
        float _1243 = fma(_1232, cbModelParam._m0[27u].z, fma(_1231, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1230)) - _1201;
        float _1244 = fma(_1232, cbModelParam._m0[28u].z, fma(_1231, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1230)) - _1205;
        float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
        float _1261 = ((_1248 * _1242) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1197 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1248 * _1243) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1201 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1248 * _1244) / cbModelParam._m0[34u].z) + ((((((_1205 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1300 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1266.x + (-0.5));
        float _1302 = _1300 * (_1266.y + (-0.5));
        float _1303 = _1300 * (_1266.z + (-0.5));
        float _1310 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1273.x + (-0.5));
        float _1312 = _1310 * (_1273.y + (-0.5));
        float _1313 = _1310 * (_1273.z + (-0.5));
        float _1320 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1280.x + (-0.5));
        float _1322 = _1320 * (_1280.y + (-0.5));
        float _1323 = _1320 * (_1280.z + (-0.5));
        float _1330 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1287.x + (-0.5));
        float _1332 = _1330 * (_1287.y + (-0.5));
        float _1333 = _1330 * (_1287.z + (-0.5));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = _1301 * 0.5;
        float _1338 = _1311 * 0.5;
        float _1339 = _1321 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1354 = (dot(vec3(_893, _894, _895), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1364 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4110 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1366 + 1.0))) + _1371) * _1334;
        float _1381 = _1302 * 0.5;
        float _1382 = _1312 * 0.5;
        float _1383 = _1322 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_893, _894, _895), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4143 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1408 + 1.0))) + _1413) * _1335;
        float _1423 = _1303 * 0.5;
        float _1424 = _1313 * 0.5;
        float _1425 = _1323 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_893, _894, _895), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4176 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1450 + 1.0))) + _1455) * _1336;
        _1472 = _1303;
        _1474 = _1302;
        _1475 = _1301;
        _1476 = _1313;
        _1477 = _1312;
        _1478 = _1311;
        _1479 = _1323;
        _1480 = _1322;
        _1481 = _1321;
        _1482 = _1336;
        _1483 = _1335;
        _1484 = _1334;
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1486 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
    }
    else
    {
        _1472 = _1473;
        _1474 = _1473;
        _1475 = _1473;
        _1476 = _1473;
        _1477 = _1473;
        _1478 = _1473;
        _1479 = _1473;
        _1480 = _1473;
        _1481 = _1473;
        _1482 = _1473;
        _1483 = _1473;
        _1484 = _1473;
        _1485 = 0.0;
        _1486 = 0.0;
        _1487 = 0.0;
    }
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1513 = fma(_1142, cbModelParam._m0[30u].z, fma(_1138, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1134));
        float _1517 = fma(_1142, cbModelParam._m0[31u].z, fma(_1138, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1134));
        float _1521 = fma(_1142, cbModelParam._m0[32u].z, fma(_1138, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1134));
        float _1544 = _1134 + _893;
        float _1545 = _1138 + _894;
        float _1546 = _1142 + _895;
        float _1556 = fma(_1546, cbModelParam._m0[30u].z, fma(_1545, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1544)) - _1513;
        float _1557 = fma(_1546, cbModelParam._m0[31u].z, fma(_1545, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1544)) - _1517;
        float _1558 = fma(_1546, cbModelParam._m0[32u].z, fma(_1545, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1544)) - _1521;
        float _1562 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
        float _1575 = ((_1562 * _1556) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1513 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1576 = ((_1562 * _1557) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1517 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1577 = ((_1562 * _1558) / cbModelParam._m0[35u].z) + ((((((_1521 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        float _1612 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1579.x + (-0.5));
        float _1614 = _1612 * (_1579.y + (-0.5));
        float _1615 = _1612 * (_1579.z + (-0.5));
        float _1622 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1586.x + (-0.5));
        float _1624 = _1622 * (_1586.y + (-0.5));
        float _1625 = _1622 * (_1586.z + (-0.5));
        float _1632 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1593.x + (-0.5));
        float _1634 = _1632 * (_1593.y + (-0.5));
        float _1635 = _1632 * (_1593.z + (-0.5));
        float _1642 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1600.x + (-0.5));
        float _1644 = _1642 * (_1600.y + (-0.5));
        float _1645 = _1642 * (_1600.z + (-0.5));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = _1613 * 0.5;
        float _1650 = _1623 * 0.5;
        float _1651 = _1633 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_893, _894, _895), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4239 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1676 + 1.0))) + _1681) * _1646;
        float _1691 = _1614 * 0.5;
        float _1692 = _1624 * 0.5;
        float _1693 = _1634 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_893, _894, _895), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1647 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4272 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1718 + 1.0))) + _1723) * _1647;
        float _1733 = _1615 * 0.5;
        float _1734 = _1625 * 0.5;
        float _1735 = _1635 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_893, _894, _895), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4305 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1760 + 1.0))) + _1765) * _1648;
        _1782 = _1615;
        _1783 = _1614;
        _1784 = _1613;
        _1785 = _1625;
        _1786 = _1624;
        _1787 = _1623;
        _1788 = _1635;
        _1789 = _1634;
        _1790 = _1633;
        _1791 = _1648;
        _1792 = _1647;
        _1793 = _1646;
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1795 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
    }
    else
    {
        _1782 = _1473;
        _1783 = _1473;
        _1784 = _1473;
        _1785 = _1473;
        _1786 = _1473;
        _1787 = _1473;
        _1788 = _1473;
        _1789 = _1473;
        _1790 = _1473;
        _1791 = _1473;
        _1792 = _1473;
        _1793 = _1473;
        _1794 = 0.0;
        _1795 = 0.0;
        _1796 = 0.0;
    }
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1485)) + _1485;
    float _1807 = (cbModelParam._m0[1u].x * (_1795 - _1486)) + _1486;
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1487)) + _1487;
    float _1829 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1807, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1832 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1807, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1835 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1807, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1806));
    float _1850 = _1078 * 0.5;
    float _1851 = _1079 * 0.5;
    float _1852 = _1080 * 0.5;
    float _1853 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1856 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1783, _1786, _1789, _1792));
    float _1859 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1893;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1866 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1472, _1476, _1479, _1482));
        float _1870 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1474, _1477, _1480, _1483));
        float _1874 = dot(vec4(_1850, _1851, _1852, 1.0), vec4(_1475, _1478, _1481, _1484));
        float _1881 = dot(vec4(cbModelParam._m0[39u]), vec4(_1850, _1851, _1852, 1.0));
        _1893 = dot(vec3(isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1881) ? 0.0 : (isnan(0.0) ? _1881 : max(0.0, _1881))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1893 = 1.0;
    }
    float _1904;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1895 = dot(vec4(cbModelParam._m0[40u]), vec4(_1850, _1851, _1852, 1.0));
        _1904 = dot(vec3(isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1895) ? 0.0 : (isnan(0.0) ? _1895 : max(0.0, _1895))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1904 = 1.0;
    }
    float _1908 = (_1904 * cbModelParam._m0[1u].x) + (_1893 * (1.0 - cbModelParam._m0[1u].x));
    float _1918 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _896);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1918 : min(cbModelParam._m0[25u].z, _1918));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1967 = fma(_1142, cbModelParam._m0[13u].z, fma(_1138, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1134)) + cbModelParam._m0[13u].w;
        float _1971 = fma(_1142, cbModelParam._m0[14u].z, fma(_1138, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1134)) + cbModelParam._m0[14u].w;
        float _1975 = fma(_1142, cbModelParam._m0[15u].z, fma(_1138, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1134)) + cbModelParam._m0[15u].w;
        float _1978 = fma(_1080, cbModelParam._m0[13u].z, fma(_1079, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1078));
        float _1981 = fma(_1080, cbModelParam._m0[14u].z, fma(_1079, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1078));
        float _1984 = fma(_1080, cbModelParam._m0[15u].z, fma(_1079, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1078));
        float _2012;
        if (_1978 > 0.0)
        {
            _2012 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2012 = frontier_phi_17_15_ladder;
        }
        float _2215;
        if (_1981 > 0.0)
        {
            _2215 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2215 = frontier_phi_26_22_ladder;
        }
        float _2469;
        if (_1984 > 0.0)
        {
            _2469 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2469 = frontier_phi_38_33_ladder;
        }
        float _2471 = isnan(_2215) ? _2012 : (isnan(_2012) ? _2215 : min(_2012, _2215));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1978) + _1967;
        float _2477 = (_2472 * _1981) + _1971;
        float _2478 = (_2472 * _1984) + _1975;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2479;
        float _2483 = _2479 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 > _2483) || ((_2477 < _2481) || ((_2476 < _2481) || (_2476 > _2483))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2606 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2478, cbModelParam._m0[9u].z, fma(_2477, cbModelParam._m0[9u].y, _2476 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2478, cbModelParam._m0[10u].z, fma(_2477, cbModelParam._m0[10u].y, _2476 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2478, cbModelParam._m0[11u].z, fma(_2477, cbModelParam._m0[11u].y, _2476 * cbModelParam._m0[11u].x))), _1919);
            frontier_phi_16_38_ladder = _2606.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2606.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2606.x * cbModelParam._m0[1u].y;
        }
        _2000 = frontier_phi_16_38_ladder_2;
        _2002 = frontier_phi_16_38_ladder_1;
        _2004 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1078, _1079, _1080), _1919);
        _2000 = _1988.x * cbModelParam._m0[1u].y;
        _2002 = _1988.y * cbModelParam._m0[1u].y;
        _2004 = _1988.z * cbModelParam._m0[1u].y;
    }
    float _2008 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _896);
    float _2009 = isnan(_2008) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2008 : min(cbModelParam._m0[25u].w, _2008));
    float _2099;
    float _2101;
    float _2103;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2063 = fma(_1142, cbModelParam._m0[21u].z, fma(_1138, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1134)) + cbModelParam._m0[21u].w;
        float _2067 = fma(_1142, cbModelParam._m0[22u].z, fma(_1138, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1134)) + cbModelParam._m0[22u].w;
        float _2071 = fma(_1142, cbModelParam._m0[23u].z, fma(_1138, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1134)) + cbModelParam._m0[23u].w;
        float _2074 = fma(_1080, cbModelParam._m0[21u].z, fma(_1079, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1078));
        float _2077 = fma(_1080, cbModelParam._m0[22u].z, fma(_1079, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1078));
        float _2080 = fma(_1080, cbModelParam._m0[23u].z, fma(_1079, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1078));
        float _2220;
        if (_2074 > 0.0)
        {
            _2220 = abs((1.0 - _2063) / _2074);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2063 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2220 = frontier_phi_28_24_ladder;
        }
        float _2496;
        if (_2077 > 0.0)
        {
            _2496 = abs((1.0 - _2067) / _2077);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2067 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2496 = frontier_phi_40_35_ladder;
        }
        float _2709;
        if (_2080 > 0.0)
        {
            _2709 = abs((1.0 - _2071) / _2080);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2071 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2709 = frontier_phi_49_46_ladder;
        }
        float _2711 = isnan(_2496) ? _2220 : (isnan(_2220) ? _2496 : min(_2220, _2496));
        float _2712 = isnan(_2709) ? _2711 : (isnan(_2711) ? _2709 : min(_2711, _2709));
        float _2716 = (_2712 * _2074) + _2063;
        float _2717 = (_2712 * _2077) + _2067;
        float _2718 = (_2712 * _2080) + _2071;
        float _2719 = _2712 * 9.9999997473787516355514526367188e-05;
        float _2720 = (-1.0) - _2719;
        float _2722 = _2719 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2718 > _2722) || ((_2718 < _2720) || ((_2717 > _2722) || ((_2717 < _2720) || ((_2716 < _2720) || (_2716 > _2722))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2718, cbModelParam._m0[17u].z, fma(_2717, cbModelParam._m0[17u].y, _2716 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2718, cbModelParam._m0[18u].z, fma(_2717, cbModelParam._m0[18u].y, _2716 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2718, cbModelParam._m0[19u].z, fma(_2717, cbModelParam._m0[19u].y, _2716 * cbModelParam._m0[19u].x))), _2009);
            frontier_phi_25_49_ladder = _2917.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2917.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2917.x * cbModelParam._m0[1u].z;
        }
        _2099 = frontier_phi_25_49_ladder_2;
        _2101 = frontier_phi_25_49_ladder_1;
        _2103 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2083 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1078, _1079, _1080), _2009);
        _2099 = _2083.x * cbModelParam._m0[1u].z;
        _2101 = _2083.y * cbModelParam._m0[1u].z;
        _2103 = _2083.z * cbModelParam._m0[1u].z;
    }
    float _2116 = (((_1105 * _1054) + _1106) * _1070) * ((cbModelParam._m0[1u].w * (_2099 - _2000)) + _2000);
    float _2118 = (((_1105 * _1056) + _1106) * _1070) * ((cbModelParam._m0[1u].w * (_2101 - _2002)) + _2002);
    float _2120 = (((_1105 * _1057) + _1106) * _1070) * ((cbModelParam._m0[1u].w * (_2103 - _2004)) + _2004);
    float _2123 = fma(_2120, cbSceneParam._m0[89u].z, fma(_2118, cbSceneParam._m0[89u].y, _2116 * cbSceneParam._m0[89u].x));
    float _2126 = fma(_2120, cbSceneParam._m0[90u].z, fma(_2118, cbSceneParam._m0[90u].y, _2116 * cbSceneParam._m0[90u].x));
    float _2129 = fma(_2120, cbSceneParam._m0[91u].z, fma(_2118, cbSceneParam._m0[91u].y, _2116 * cbSceneParam._m0[91u].x));
    uvec4 _2139 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2141 = _2139.x * 14u;
    uint _2142 = _2141 + 13u;
    float _2149 = _1070 + (-1.0);
    float _2154 = (cbLight._m0[_2142].x * _2149) + 1.0;
    float _2155 = (cbLight._m0[_2142].y * _2149) + 1.0;
    float _2156 = (cbLight._m0[_2142].z * _2149) + 1.0;
    float _2157 = (cbLight._m0[_2142].w * _2149) + 1.0;
    uint _2158 = _2141 + 5u;
    float _2164 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
    uint _2168 = _2141 + 4u;
    float _2174 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
    uint _2178 = _2141 | 1u;
    float _2189 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_893, _894, _895));
    float _2192 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_893, _894, _895));
    float _4441 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _4452 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2197 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * 0.3183098733425140380859375;
    float _2199 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * 0.3183098733425140380859375;
    float _2206 = ((cbLight._m0[_2158].x * _2164) * _2199) + ((cbLight._m0[_2168].x * _2174) * _2197);
    float _2207 = ((_2164 * cbLight._m0[_2158].y) * _2199) + ((_2174 * cbLight._m0[_2168].y) * _2197);
    float _2208 = ((_2164 * cbLight._m0[_2158].z) * _2199) + ((_2174 * cbLight._m0[_2168].z) * _2197);
    uvec4 _2212 = floatBitsToUint(cbLight._m0[_2141 + 12u]);
    bool _2214 = _2212.x == 0u;
    float _2225;
    float _2227;
    float _2229;
    if (_2214)
    {
        _2225 = _2206;
        _2227 = _2207;
        _2229 = _2208;
    }
    else
    {
        uint _2233 = _2141 + 6u;
        float _2249 = (dot(vec3(cbLight._m0[_2141 + 2u].xyz), vec3(_893, _894, _895)) * 0.5) + 0.5;
        float _2250 = _2249 * _2249;
        float _4463 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2251 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2252 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2225 = (((cbLight._m0[_2233].x * 0.3183098733425140380859375) * _2251) * _2252) + _2206;
        _2227 = (((cbLight._m0[_2233].y * 0.3183098733425140380859375) * _2251) * _2252) + _2207;
        _2229 = (((cbLight._m0[_2233].z * 0.3183098733425140380859375) * _2251) * _2252) + _2208;
    }
    bool _2232 = _2212.y == 0u;
    float _2270;
    float _2272;
    float _2274;
    if (_2232)
    {
        _2270 = _2225;
        _2272 = _2227;
        _2274 = _2229;
    }
    else
    {
        uint _2440 = _2141 + 7u;
        float _2456 = (dot(vec3(cbLight._m0[_2141 + 3u].xyz), vec3(_893, _894, _895)) * 0.5) + 0.5;
        float _2457 = _2456 * _2456;
        float _4479 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2458 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2459 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2270 = (((cbLight._m0[_2440].x * 0.3183098733425140380859375) * _2458) * _2459) + _2225;
        _2272 = (((cbLight._m0[_2440].y * 0.3183098733425140380859375) * _2458) * _2459) + _2227;
        _2274 = (((cbLight._m0[_2440].z * 0.3183098733425140380859375) * _2458) * _2459) + _2229;
    }
    uint _2277 = _2141 + 8u;
    float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _896) * 0.949999988079071044921875);
    float _2291 = _2290 * _2290;
    float _2292 = cbLight._m0[_2141].x + _972;
    float _2293 = cbLight._m0[_2141].y + _973;
    float _2294 = cbLight._m0[_2141].z + _974;
    float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
    float _2299 = _2298 * _2292;
    float _2300 = _2298 * _2293;
    float _2301 = _2298 * _2294;
    float _2302 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2141].xyz));
    float _4495 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _4506 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _2306 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2307 = dot(vec3(_893, _894, _895), vec3(_2299, _2300, _2301));
    float _4517 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2311 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2299, _2300, _2301));
    float _4528 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2315 = _2291 * _2291;
    float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
    float _2327 = exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0);
    float _2328 = 0.959999978542327880859375 - _1051;
    float _2330 = 0.959999978542327880859375 - _1052;
    float _2331 = 0.959999978542327880859375 - _1053;
    float _2338 = 1.0 - _2291;
    float _2349 = (0.5 / (((_2306 * ((_2305 * _2338) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2338) + _2291) * _2305))) * _2305;
    float _4539 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2351 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
    uint _2362 = _2141 + 9u;
    float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _896) * 0.949999988079071044921875);
    float _2374 = _2373 * _2373;
    float _2375 = cbLight._m0[_2178].x + _972;
    float _2376 = cbLight._m0[_2178].y + _973;
    float _2377 = cbLight._m0[_2178].z + _974;
    float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
    float _2382 = _2381 * _2375;
    float _2383 = _2381 * _2376;
    float _2384 = _2381 * _2377;
    float _2385 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2178].xyz));
    float _4550 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2389 = dot(vec3(_893, _894, _895), vec3(_2382, _2383, _2384));
    float _4561 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2393 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2382, _2383, _2384));
    float _4572 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2397 = _2374 * _2374;
    float _2401 = ((_2392 * _2392) * (_2397 + (-1.0))) + 1.0;
    float _2408 = exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0);
    float _2415 = 1.0 - _2374;
    float _2425 = (0.5 / (((_2306 * ((_2388 * _2415) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2415) + _2374) * _2388))) * _2388;
    float _4583 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2427 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2397 / ((_2401 * _2401) * 3.141590118408203125));
    float _2437 = (((((_2408 * _2328) + _1054) * cbLight._m0[_2362].x) * _2427) * _2164) + (((((_2327 * _2328) + _1054) * cbLight._m0[_2277].x) * _2351) * _2174);
    float _2438 = (((((_2408 * _2330) + _1056) * cbLight._m0[_2362].y) * _2427) * _2164) + (((((_2327 * _2330) + _1056) * cbLight._m0[_2277].y) * _2351) * _2174);
    float _2439 = (((((_2408 * _2331) + _1057) * cbLight._m0[_2362].z) * _2427) * _2164) + (((((_2327 * _2331) + _1057) * cbLight._m0[_2277].z) * _2351) * _2174);
    float _2501;
    float _2503;
    float _2505;
    if (_2214)
    {
        _2501 = _2437;
        _2503 = _2438;
        _2505 = _2439;
    }
    else
    {
        uint _2507 = _2141 + 2u;
        uint _2511 = _2141 + 10u;
        float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2507].w)) * _896) * 0.949999988079071044921875);
        float _2526 = _2525 * _2525;
        float _2527 = cbLight._m0[_2507].x + _972;
        float _2528 = cbLight._m0[_2507].y + _973;
        float _2529 = cbLight._m0[_2507].z + _974;
        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
        float _2534 = _2533 * _2527;
        float _2535 = _2533 * _2528;
        float _2536 = _2533 * _2529;
        float _2537 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2507].xyz));
        float _4594 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2541 = dot(vec3(_893, _894, _895), vec3(_2534, _2535, _2536));
        float _4605 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2545 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_2534, _2535, _2536));
        float _4616 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2549 = _2526 * _2526;
        float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
        float _2560 = exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0);
        float _2567 = 1.0 - _2526;
        float _2577 = (0.5 / (((_2306 * ((_2540 * _2567) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2567) + _2526) * _2540))) * _2540;
        float _4627 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2579 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
        float _2580 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2501 = (((((_2560 * _2328) + _1054) * cbLight._m0[_2511].x) * _2579) * _2580) + _2437;
        _2503 = (((((_2560 * _2330) + _1056) * cbLight._m0[_2511].y) * _2579) * _2580) + _2438;
        _2505 = (((((_2560 * _2331) + _1057) * cbLight._m0[_2511].z) * _2579) * _2580) + _2439;
    }
    float _2615;
    float _2617;
    float _2619;
    if (_2232)
    {
        _2615 = _2501;
        _2617 = _2503;
        _2619 = _2505;
    }
    else
    {
        uint _2626 = _2141 + 3u;
        uint _2630 = _2141 + 11u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _896) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _972;
        float _2647 = cbLight._m0[_2626].y + _973;
        float _2648 = cbLight._m0[_2626].z + _974;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2626].xyz));
        float _4643 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2660 = dot(vec3(_893, _894, _895), vec3(_2653, _2654, _2655));
        float _4654 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4665 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0);
        float _2686 = 1.0 - _2645;
        float _2696 = (0.5 / (((_2306 * ((_2659 * _2686) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2306 * _2686) + _2645) * _2659))) * _2659;
        float _4676 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2615 = (((((_2679 * _2328) + _1054) * cbLight._m0[_2630].x) * _2698) * _2699) + _2501;
        _2617 = (((((_2679 * _2330) + _1056) * cbLight._m0[_2630].y) * _2698) * _2699) + _2503;
        _2619 = (((((_2679 * _2331) + _1057) * cbLight._m0[_2630].z) * _2698) * _2699) + _2505;
    }
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_2139.y == 0u)
    {
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2775 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2774;
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2774;
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2774;
        uvec4 _2789 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2790 = _2789.x;
        uint _2801 = uint((float(_2789.y) * floor(float(uint(cbSceneParam._m0[85u].y * _993) / _2790))) + floor(float(uint(cbSceneParam._m0[85u].x * _992) / _2790)));
        float _2811 = (log2(_2777 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2812 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        uint _2815 = uint(isnan(14.0) ? _2812 : (isnan(_2812) ? 14.0 : min(_2812, 14.0)));
        uvec4 _2820 = texelFetch(g_lightClusterGridBuffer, int(((_2815 << 2u) + (_2801 << 6u)) >> 2u));
        uint _2821 = _2820.x;
        uint _2822 = _2789.z;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        if (((((1u << ((_2822 >> 4u) & 15u)) + 4294967295u) & _2821) == 0u) || ((_2822 & 240u) == 0u))
        {
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
        }
        else
        {
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            uint _3081 = 0u;
            uint _3090;
            bool _3091;
            for (;;)
            {
                _3090 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3081 << 2u)) >> 2u)).x;
                _3091 = _3090 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3091)
                {
                    frontier_phi_66_pred = _3075;
                    frontier_phi_66_pred_1 = _3080;
                    frontier_phi_66_pred_2 = _3079;
                    frontier_phi_66_pred_3 = _3078;
                    frontier_phi_66_pred_4 = _3077;
                    frontier_phi_66_pred_5 = _3076;
                }
                else
                {
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    uint _3226;
                    _3220 = _3075;
                    _3221 = _3076;
                    _3222 = _3077;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3090;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    for (;;)
                    {
                        uint _3230 = uint(findLSB(_3226)) + (_3081 << 5u);
                        uint _3227 = (_3226 + 4294967295u) & _3226;
                        uint _3232 = _3230 * 48u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3252 = (_3230 * 48u) + 4u;
                        vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 3u)).x));
                        uint _3271 = (_3230 * 48u) + 8u;
                        vec3 _3282 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x));
                        float _3286 = _3246.x - _2775;
                        float _3287 = _3246.y - _2776;
                        float _3288 = _3246.z - _2777;
                        float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                        float _3292 = inversesqrt(_3289);
                        float _3293 = _3292 * _3286;
                        float _3294 = _3292 * _3287;
                        float _3295 = _3292 * _3288;
                        float _3296 = dot(vec3(_1011, _1014, _1017), vec3(_3293, _3294, _3295));
                        float _3301 = 1.0 - (_3289 * _3246.w);
                        float _4702 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                        float _3303 = sqrt(_3289) * _3265.w;
                        float _3306 = 1.39999997615814208984375 / (_3303 + 1.39999997615814208984375);
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3296) + _3307;
                        float _3313 = _3303 * _3303;
                        float _3317 = ((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3302) / ((_3313 * 0.699999988079071044921875) + 1.0);
                        float _3321 = (-0.0) - _2775;
                        float _3322 = (-0.0) - _2776;
                        float _3323 = (-0.0) - _2777;
                        float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                        float _3328 = _3327 * _3321;
                        float _3329 = _3327 * _3322;
                        float _3330 = _3327 * _3323;
                        float _3338 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                        float _3339 = 1.0 - _1086;
                        float _3346 = sqrt(1.0 - ((1.0 - (_3339 * _3339)) * (1.0 - (_3338 * _3338))));
                        float _3347 = _3346 * _3346;
                        float _3348 = _3347 * _3347;
                        float _3349 = _3328 + _3293;
                        float _3350 = _3329 + _3294;
                        float _3351 = _3330 + _3295;
                        float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                        float _3359 = dot(vec3(_1011, _1014, _1017), vec3(_3328, _3329, _3330));
                        float _4718 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3362 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                        float _3363 = dot(vec3(_1011, _1014, _1017), vec3(_3355 * _3349, _3355 * _3350, _3355 * _3351));
                        float _4729 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3366 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3370 = ((_3366 * _3366) * (_3348 + (-1.0))) + 1.0;
                        float _3371 = _3306 * _3347;
                        float _3372 = _3371 * _3371;
                        float _3375 = ((1.0 - _3372) * _3296) + _3372;
                        float _4740 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3376 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3377 = 1.0 - _3347;
                        float _3387 = (0.5 / (((_3376 * ((_3362 * _3377) + _3347)) + 9.9999999392252902907785028219223e-09) + (((_3376 * _3377) + _3347) * _3362))) * _3376;
                        float _4751 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3398 = (((_3348 * 3.1415927410125732421875) * (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) / ((_3370 * _3370) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125))) * _3302;
                        _3150 = (_3317 * _3265.x) + _3223;
                        _3151 = (_3317 * _3265.y) + _3224;
                        _3152 = (_3317 * _3265.z) + _3225;
                        _3147 = (_3398 * _3282.x) + _3220;
                        _3148 = (_3398 * _3282.y) + _3221;
                        _3149 = (_3398 * _3282.z) + _3222;
                        if (_3227 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3220 = _3147;
                            _3221 = _3148;
                            _3222 = _3149;
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3227;
                        }
                    }
                    frontier_phi_66_pred = _3147;
                    frontier_phi_66_pred_1 = _3152;
                    frontier_phi_66_pred_2 = _3151;
                    frontier_phi_66_pred_3 = _3150;
                    frontier_phi_66_pred_4 = _3149;
                    frontier_phi_66_pred_5 = _3148;
                }
                _2923 = frontier_phi_66_pred;
                _2933 = frontier_phi_66_pred_1;
                _2931 = frontier_phi_66_pred_2;
                _2929 = frontier_phi_66_pred_3;
                _2927 = frontier_phi_66_pred_4;
                _2925 = frontier_phi_66_pred_5;
                uint _3082 = _3081 + 1u;
                if (_3082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3075 = _2923;
                    _3076 = _2925;
                    _3077 = _2927;
                    _3078 = _2929;
                    _3079 = _2931;
                    _3080 = _2933;
                    _3081 = _3082;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
        }
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.z;
        uint _2939 = (_2937 >> 8u) & 15u;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        if (((4294967295u << _2939) & _2821) == 0u)
        {
            _3043 = _2922;
            _3045 = _2924;
            _3047 = _2926;
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
        }
        else
        {
            float _3068 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
            float _3069 = _3068 * _2775;
            float _3070 = _3068 * _2776;
            float _3071 = _3068 * _2777;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2939 < ((_2937 >> 12u) & 15u))
            {
                float _3044;
                float _3046;
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3203 = _2922;
                float _3204 = _2924;
                float _3205 = _2926;
                float _3206 = _2928;
                float _3207 = _2930;
                float _3208 = _2932;
                uint _3209 = _2939;
                uint _3218;
                bool _3219;
                for (;;)
                {
                    _3218 = texelFetch(g_lightClassification, int((((_2815 << 5u) + (_2801 << 9u)) + (_3209 << 2u)) >> 2u)).x;
                    _3219 = _3218 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3219)
                    {
                        frontier_phi_77_pred = _3208;
                        frontier_phi_77_pred_1 = _3207;
                        frontier_phi_77_pred_2 = _3206;
                        frontier_phi_77_pred_3 = _3205;
                        frontier_phi_77_pred_4 = _3204;
                        frontier_phi_77_pred_5 = _3203;
                    }
                    else
                    {
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3425 = _3203;
                        float _3426 = _3204;
                        float _3427 = _3205;
                        float _3428 = _3206;
                        float _3429 = _3207;
                        float _3430 = _3208;
                        uint _3431 = _3218;
                        uint _3432;
                        vec4 _3457;
                        float _3458;
                        vec4 _3473;
                        vec3 _3485;
                        vec4 _3500;
                        vec4 _3515;
                        float _3561;
                        bool _3562;
                        for (;;)
                        {
                            uint _3442 = ((_3209 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3431));
                            _3432 = (_3431 + 4294967295u) & _3431;
                            uint _3444 = _3442 * 40u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            _3458 = _3457.w;
                            uint _3460 = (_3442 * 40u) + 4u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3442 * 40u) + 8u;
                            _3485 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x));
                            uint _3487 = (_3442 * 40u) + 16u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3502 = (_3442 * 40u) + 20u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3442 * 40u) + 24u;
                            vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3536 = (_3442 * 40u) + 28u;
                            vec4 _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            _3561 = fma(_2777, _3549.z, fma(_2776, _3549.y, _3549.x * _2775)) + _3549.w;
                            _3562 = !((fma(_2777, _3530.z, fma(_2776, _3530.y, _3530.x * _2775)) + _3530.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3562)
                            {
                                float _3589 = _3457.x - _2775;
                                float _3590 = _3457.y - _2776;
                                float _3591 = _3457.z - _2777;
                                float _3592 = dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591));
                                float _3595 = inversesqrt(_3592);
                                float _3596 = _3595 * _3589;
                                float _3597 = _3595 * _3590;
                                float _3598 = _3595 * _3591;
                                float _3602 = 1.0 - (_3592 / (_3458 * _3458));
                                float _4762 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3607 = sqrt(_3592) * _3473.w;
                                float _3609 = 1.39999997615814208984375 / (_3607 + 1.39999997615814208984375);
                                float _3610 = _3609 * _3609;
                                float _3613 = ((1.0 - _3610) * dot(vec3(_3596, _3597, _3598), vec3(_1011, _1014, _1017))) + _3610;
                                float _3616 = _3607 * _3607;
                                float _3620 = (fma(_2777, _3500.z, fma(_2776, _3500.y, _3500.x * _2775)) + _3500.w) / _3561;
                                float _3621 = (fma(_2777, _3515.z, fma(_2776, _3515.y, _3515.x * _2775)) + _3515.w) / _3561;
                                float _3625 = 1.0 - dot(vec2(_3620, _3621), vec2(_3620, _3621));
                                float _4778 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3627 = _3626 * (((isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0))) * _3603) / ((_3616 * 0.699999988079071044921875) + 1.0));
                                float _3639 = exp2(log2(1.0 / ((_3616 * 3.5) + 5.0)) * 0.25);
                                float _3640 = 1.0 - _1086;
                                float _3647 = sqrt(1.0 - ((1.0 - (_3640 * _3640)) * (1.0 - (_3639 * _3639))));
                                float _3648 = _3647 * _3647;
                                float _3649 = _3648 * _3648;
                                float _3650 = _3596 - _3069;
                                float _3651 = _3597 - _3070;
                                float _3652 = _3598 - _3071;
                                float _3656 = inversesqrt(dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652)));
                                float _3660 = dot(vec3(_1011, _1014, _1017), vec3((-0.0) - _3069, (-0.0) - _3070, (-0.0) - _3071));
                                float _4789 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3663 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3664 = dot(vec3(_1011, _1014, _1017), vec3(_3656 * _3650, _3656 * _3651, _3656 * _3652));
                                float _4800 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3667 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3671 = ((_3667 * _3667) * (_3649 + (-1.0))) + 1.0;
                                float _3672 = _3609 * _3648;
                                float _3673 = _3672 * _3672;
                                float _3679 = ((1.0 - _3673) * dot(vec3(_1011, _1014, _1017), vec3(_3596, _3597, _3598))) + _3673;
                                float _4811 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3680 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3681 = 1.0 - _3648;
                                float _3691 = (0.5 / (((_3680 * ((_3663 * _3681) + _3648)) + 9.9999999392252902907785028219223e-09) + (((_3680 * _3681) + _3648) * _3663))) * _3680;
                                float _4822 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3701 = (_3626 * _3603) * (((_3649 * 3.1415927410125732421875) * (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) / ((_3671 * _3671) * ((_3616 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3627 * _3473.y;
                                frontier_phi_83_pred_1 = _3627 * _3473.x;
                                frontier_phi_83_pred_2 = _3701 * _3485.z;
                                frontier_phi_83_pred_3 = _3701 * _3485.y;
                                frontier_phi_83_pred_4 = _3701 * _3485.x;
                                frontier_phi_83_pred_5 = _3627 * _3473.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3709 = frontier_phi_83_pred;
                            _3708 = frontier_phi_83_pred_1;
                            _3707 = frontier_phi_83_pred_2;
                            _3706 = frontier_phi_83_pred_3;
                            _3705 = frontier_phi_83_pred_4;
                            _3710 = frontier_phi_83_pred_5;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            _3417 = _3710 + _3430;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            if (_3432 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3432;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3417;
                        frontier_phi_77_pred_1 = _3416;
                        frontier_phi_77_pred_2 = _3415;
                        frontier_phi_77_pred_3 = _3414;
                        frontier_phi_77_pred_4 = _3413;
                        frontier_phi_77_pred_5 = _3412;
                    }
                    _3054 = frontier_phi_77_pred;
                    _3052 = frontier_phi_77_pred_1;
                    _3050 = frontier_phi_77_pred_2;
                    _3048 = frontier_phi_77_pred_3;
                    _3046 = frontier_phi_77_pred_4;
                    _3044 = frontier_phi_77_pred_5;
                    uint _3210 = _3209 + 1u;
                    if (_3210 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3203 = _3044;
                        _3204 = _3046;
                        _3205 = _3048;
                        _3206 = _3050;
                        _3207 = _3052;
                        _3208 = _3054;
                        _3209 = _3210;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3048;
                frontier_phi_58_59_ladder_1 = _3054;
                frontier_phi_58_59_ladder_2 = _3052;
                frontier_phi_58_59_ladder_3 = _3050;
                frontier_phi_58_59_ladder_4 = _3046;
                frontier_phi_58_59_ladder_5 = _3044;
            }
            else
            {
                frontier_phi_58_59_ladder = _2926;
                frontier_phi_58_59_ladder_1 = _2932;
                frontier_phi_58_59_ladder_2 = _2930;
                frontier_phi_58_59_ladder_3 = _2928;
                frontier_phi_58_59_ladder_4 = _2924;
                frontier_phi_58_59_ladder_5 = _2922;
            }
            _3043 = frontier_phi_58_59_ladder_5;
            _3045 = frontier_phi_58_59_ladder_4;
            _3047 = frontier_phi_58_59_ladder;
            _3049 = frontier_phi_58_59_ladder_3;
            _3051 = frontier_phi_58_59_ladder_2;
            _3053 = frontier_phi_58_59_ladder_1;
        }
        float _3058 = isnan(1.0) ? _1070 : (isnan(_1070) ? 1.0 : min(_1070, 1.0));
        _2834 = (_3058 * _3049) + _2270;
        _2836 = (_3058 * _3051) + _2272;
        _2838 = (_3058 * _3053) + _2274;
        _2840 = ((_3043 * _1054) * _3058) + _2615;
        _2842 = ((_3045 * _1056) * _3058) + _2617;
        _2844 = ((_3047 * _1057) * _3058) + _2619;
    }
    else
    {
        _2834 = _2270;
        _2836 = _2272;
        _2838 = _2274;
        _2840 = _2615;
        _2842 = _2617;
        _2844 = _2619;
    }
    float _4838 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _4849 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _4860 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _2861 = ((isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2834 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1070))) + ((_2840 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1908)) * cbPerFrame._m0[3u].x);
    float _2862 = ((isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2836 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1070))) + ((_2842 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1908)) * cbPerFrame._m0[3u].x);
    float _2863 = ((isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2838 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1070))) + ((_2844 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1908)) * cbPerFrame._m0[3u].x);
    uint _2864 = _282 + 6u;
    float _2872 = _992 / cbSceneParam._m0[86u].x;
    float _2873 = _993 / cbSceneParam._m0[86u].y;
    vec4 _2887 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, (log2((isnan(cbSceneParam._m0[77u].w) ? _915 : (isnan(_915) ? cbSceneParam._m0[77u].w : min(_915, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2889 = _2887.x;
    float _2890 = _2887.y;
    float _2891 = _2887.z;
    float _2892 = _2887.w;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    if (_915 > cbSceneParam._m0[78u].w)
    {
        float _2947 = isnan(_915) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _915 : min(cbSceneParam._m0[80u].w, _915));
        float _2948 = _2947 / _915;
        float _2959 = _2948 * _965;
        float _2960 = _966 * _2948;
        float _2961 = (-0.0) - _2960;
        float _2963 = _2948 * _967;
        float _2965 = (cbSceneParam._m0[77u].w * _2961) / _2947;
        float _2966 = _2965 + cbSceneParam._m0[79u].w;
        float _2967 = cbSceneParam._m0[79u].w - _2960;
        float _2973 = sqrt(((_2959 * _2959) + (_2960 * _2960)) + (_2963 * _2963));
        float _2976 = (1.0 - (cbSceneParam._m0[77u].w / _2947)) * _2973;
        float _2981 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2983 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3160;
        if (abs((_2961 - _2965) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3160 = ((((_2966 > 0.0) ? exp2(_2981 * _2966) : (2.0 - exp2(_2983 * _2966))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2976;
        }
        else
        {
            float _3104 = 1.0 / cbSceneParam._m0[80u].x;
            float _3105 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : max(_2966, _2967));
            float _3106 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : min(_2966, _2967));
            float _3115 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : min(_3105, 0.0));
            float _3116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : min(_3106, 0.0));
            _3160 = ((abs(_2973 / _2961) * cbSceneParam._m0[80u].y) * ((((_3115 - _3116) * 2.0) - ((exp2(_2981 * (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0)))) - exp2(_2981 * (isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))))) * _3104)) - ((exp2(_2983 * _3115) - exp2(_2983 * _3116)) * _3104))) + (_2976 * cbSceneParam._m0[80u].z);
        }
        vec4 _3162 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, 1.0), 0.0);
        float _3171 = exp2((_3160 * (-1.44269502162933349609375)) * (1.0 - _3162.w));
        float _3172 = log2(_3171);
        float _3188 = log2(_2892);
        _2985 = (exp2(_3188 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].x)) * _3162.x) / cbSceneParam._m0[78u].x)) + _2889;
        _2987 = (exp2(_3188 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].y)) * _3162.y) / cbSceneParam._m0[78u].y)) + _2890;
        _2989 = (exp2(_3188 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].z)) * _3162.z) / cbSceneParam._m0[78u].z)) + _2891;
        _2991 = _3171 * _2892;
    }
    else
    {
        _2985 = _2889;
        _2987 = _2890;
        _2989 = _2891;
        _2991 = _2892;
    }
    bool _3198;
    vec4 _3001;
    vec4 _3023;
    float _3025;
    float _3029;
    float _3030;
    float _3031;
    float _3032;
    bool _3042;
    for (;;)
    {
        _3001 = cbMatDynParam._m0[0u];
        float _3003 = roundEven(_3001.y);
        bool _3004 = _3003 == 3.0;
        float _3005 = log2(_2991);
        float _3012 = exp2(_3005 * cbSceneParam._m0[78u].x) * _2861;
        float _3013 = exp2(_3005 * cbSceneParam._m0[78u].y) * _2862;
        float _3014 = exp2(_3005 * cbSceneParam._m0[78u].z) * _2863;
        float _3021 = _981 + (-0.5);
        _3023 = cbMtdParam._m0[1u];
        _3025 = _3023.y * _3021;
        float _3028 = (_3003 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3029 = _3028 * (_3004 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2985)));
        _3030 = _3028 * (_3004 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2987)));
        _3031 = _3028 * (_3004 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2989)));
        _3032 = _3021 * 0.999000012874603271484375;
        _3042 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3042)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3032) < 0.5)
            {
                _3198 = true;
                break;
            }
        }
        uint _3139 = _1030 + uint(_3001.w);
        if ((cbInstanceData._m0[_3139].w < 1.0) && ((cbInstanceData._m0[_3139].w + _3032) < 0.5))
        {
            _3198 = true;
            break;
        }
        if ((_3025 + 1.0) < _3023.x)
        {
            _3198 = true;
            break;
        }
        _3198 = false;
        break;
    }
    float _3403;
    if (_3198)
    {
        discard_state = true;
        _3403 = 0.0;
    }
    else
    {
        _3403 = cbInstanceData._m0[_2864].w;
    }
    SV_Target.x = _3029;
    SV_Target.y = _3030;
    SV_Target.z = _3031;
    SV_Target.w = _3403;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2864].w;
    discard_exit();
}


