#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1456;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4063 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4074 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4085 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[23u].w) + _430) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4096 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _455 = (_448 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _456 = (_448 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _457 = (_448 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _461 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _455;
    float _464 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _456;
    float _467 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _457;
    float _474 = ((_455 - _461) * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) + _461;
    float _475 = ((_456 - _464) * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) + _464;
    float _476 = ((_457 - _467) * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) + _467;
    vec4 _495 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _304) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _305) + cbTextureTilingScale._m0[14u].w));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _561 = _559.x;
    float _562 = _559.y;
    float _563 = _559.z;
    float _572 = ((_542.z - _563) * _448) + _563;
    float _575 = ((((_542.x - _561) * _448) + _561) * 2.0) + (-1.0);
    float _576 = ((((_542.y - _562) * _448) + _562) * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _4107 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _582 = sqrt(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _614 = (_575 + ((((_515.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_602.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _615 = (_576 + ((((_515.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_602.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _618 = fma(_582, _254, fma(_615, _261, _614 * _247));
    float _621 = fma(_582, _255, fma(_615, _262, _614 * _248));
    float _624 = fma(_582, _256, fma(_615, _263, _614 * _249));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    vec4 _655 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _657 = _655.x;
    float _658 = 1.0 - _657;
    float _667 = (cbMtdParam._m0[19u].x + dot(vec4(_628 * _618, _628 * _621, _628 * _624, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_657 - _658) * cbMtdParam._m0[24u].z) + _658) * cbMtdParam._m0[21u].z);
    float _4118 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _668 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _670 = (-0.0) - cbMtdParam._m0[24u].x;
    float _672 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _672 : (isnan(_672) ? 1.0 : min(_672, 1.0));
    float _680 = _668 - ((_668 * TEXCOORD_8.x) * _673);
    float _681 = _668 - ((_668 * TEXCOORD_8.y) * _673);
    float _682 = _668 - ((_668 * TEXCOORD_8.z) * _673);
    float _689 = (_680 * ((_495.x * cbMtdParam._m0[18u].x) - _474)) + _474;
    float _690 = (_681 * ((_495.y * cbMtdParam._m0[18u].y) - _475)) + _475;
    float _691 = (_682 * ((_495.z * cbMtdParam._m0[18u].z) - _476)) + _476;
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _705 = _703.x;
    float _706 = 1.0 - _705;
    float _732 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_705 - _706) * cbMtdParam._m0[24u].w) + _706) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4139 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _733 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _741 = ((((cbMtdParam._m0[10u].x - _689) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _733) + _689;
    float _742 = ((((cbMtdParam._m0[10u].y - _690) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _733) + _690;
    float _743 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _691)) * _733) + _691;
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _771 = _769.x;
    float _789 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _771) * _448) + _771;
    float _793 = ((_755.x - _789) * cbMtdParam._m0[19u].z) + _789;
    float _795 = _793 - (_793 * _680);
    float _797 = _795 - (_795 * _733);
    float _802 = (((_515.z - _572) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _572;
    float _806 = ((_602.z - _802) * cbMtdParam._m0[19u].w) + _802;
    vec4 _820 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _827 = (_820.x * 2.0) + (-1.0);
    float _828 = (_820.y * 2.0) + (-1.0);
    float _829 = dot(vec2(_827, _828), vec2(_827, _828));
    float _4150 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _837 = ((_820.z - _806) * _680) + _806;
    float _840 = ((cbMtdParam._m0[23u].x - _837) * _733) + _837;
    vec4 _861 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _867 = (_861.x * 2.0) + (-1.0);
    float _868 = (_861.y * 2.0) + (-1.0);
    float _869 = dot(vec2(_867, _868), vec2(_867, _868));
    float _4161 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _884 = ((sqrt(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) - _582) * _682) + _582;
    float _887 = (((_827 - _614) * _680) + _614) + (cbMtdParam._m0[21u].x * _614);
    float _888 = (((_828 - _615) * _681) + _615) + (cbMtdParam._m0[21u].x * _615);
    float _899 = (((_867 - _887) + (_887 * cbMtdParam._m0[22u].z)) * _733) + _887;
    float _900 = (((_868 - _888) + (_888 * cbMtdParam._m0[22u].z)) * _733) + _888;
    float _901 = (_733 * (sqrt(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) - _884)) + _884;
    float _903 = cbMtdParam._m0[22u].x + _602.w;
    float _906 = fma(_901, _254, fma(_900, _261, _899 * _247));
    float _909 = fma(_901, _255, fma(_900, _262, _899 * _248));
    float _912 = fma(_901, _256, fma(_900, _263, _899 * _249));
    float _916 = inversesqrt(dot(vec3(_906, _909, _912), vec3(_906, _909, _912)));
    float _917 = _916 * _906;
    float _918 = _916 * _909;
    float _919 = _916 * _912;
    float _4172 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _920 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _4183 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4194 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4205 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4216 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4227 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _925 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _939 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _989 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _979);
    float _990 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _979);
    float _991 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _979);
    float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
    float _996 = _989 * _995;
    float _997 = _990 * _995;
    float _998 = _991 * _995;
    float _1004 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1005 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1023 = fma(_919, cbSceneParam._m0[5u].z, fma(_918, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _917));
    float _1026 = fma(_919, cbSceneParam._m0[6u].z, fma(_918, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _917));
    float _1029 = fma(_919, cbSceneParam._m0[7u].z, fma(_918, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _917));
    uint _1043 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1049 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * cbInstanceData._m0[_1043].x;
    float _1050 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * cbInstanceData._m0[_1043].y;
    float _1051 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * cbInstanceData._m0[_1043].z;
    float _4238 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _1055 = 1.0 - _925;
    float _1056 = _1052 * _1055;
    float _1057 = _1053 * _1055;
    float _1058 = _1054 * _1055;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _925;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _925;
    float _1065 = (_1054 + (-0.039999999105930328369140625)) * _925;
    float _1066 = _1063 + 0.039999999105930328369140625;
    float _1068 = _1064 + 0.039999999105930328369140625;
    float _1069 = _1065 + 0.039999999105930328369140625;
    vec4 _1078 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1004, cbSceneParam._m0[86u].y * _1005));
    float _1082 = ((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * TEXCOORD_5.w) * _1078.x;
    float _1083 = dot(vec3(_917, _918, _919), vec3(_996, _997, _998));
    float _1086 = _1083 * 2.0;
    float _1090 = (_1086 * _917) - _996;
    float _1091 = (_1086 * _918) - _997;
    float _1092 = (_1086 * _919) - _998;
    float _1096 = abs(dot(vec3(_996, _997, _998), vec3(_917, _918, _919)));
    float _4271 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1098 = sqrt(_920);
    float _1111 = exp2((_1098 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1098 * 3.0));
    float _1117 = (1.0 - _1111) * ((_1098 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1118 = _1111 * _1098;
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1455;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1180 = fma(_1154, cbModelParam._m0[26u].z, fma(_1150, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1146));
        float _1184 = fma(_1154, cbModelParam._m0[27u].z, fma(_1150, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1146));
        float _1188 = fma(_1154, cbModelParam._m0[28u].z, fma(_1150, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1146));
        float _1213 = _1146 + _917;
        float _1214 = _1150 + _918;
        float _1215 = _1154 + _919;
        float _1225 = fma(_1215, cbModelParam._m0[26u].z, fma(_1214, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1213)) - _1180;
        float _1226 = fma(_1215, cbModelParam._m0[27u].z, fma(_1214, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1213)) - _1184;
        float _1227 = fma(_1215, cbModelParam._m0[28u].z, fma(_1214, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1213)) - _1188;
        float _1231 = inversesqrt(dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227)));
        float _1244 = ((_1231 * _1225) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1180 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1231 * _1226) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1184 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1231 * _1227) / cbModelParam._m0[34u].z) + ((((((_1188 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        float _1283 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1249.x + (-0.5));
        float _1285 = _1283 * (_1249.y + (-0.5));
        float _1286 = _1283 * (_1249.z + (-0.5));
        float _1293 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1256.x + (-0.5));
        float _1295 = _1293 * (_1256.y + (-0.5));
        float _1296 = _1293 * (_1256.z + (-0.5));
        float _1303 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1263.x + (-0.5));
        float _1305 = _1303 * (_1263.y + (-0.5));
        float _1306 = _1303 * (_1263.z + (-0.5));
        float _1313 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1270.x + (-0.5));
        float _1315 = _1313 * (_1270.y + (-0.5));
        float _1316 = _1313 * (_1270.z + (-0.5));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = _1284 * 0.5;
        float _1321 = _1294 * 0.5;
        float _1322 = _1304 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1337 = (dot(vec3(_917, _918, _919), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1347 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4319 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1349 + 1.0))) + _1354) * _1317;
        float _1364 = _1285 * 0.5;
        float _1365 = _1295 * 0.5;
        float _1366 = _1305 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_917, _918, _919), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4352 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1391 + 1.0))) + _1396) * _1318;
        float _1406 = _1286 * 0.5;
        float _1407 = _1296 * 0.5;
        float _1408 = _1306 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_917, _918, _919), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4385 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1433 + 1.0))) + _1438) * _1319;
        _1455 = _1286;
        _1457 = _1285;
        _1458 = _1284;
        _1459 = _1296;
        _1460 = _1295;
        _1461 = _1294;
        _1462 = _1306;
        _1463 = _1305;
        _1464 = _1304;
        _1465 = _1319;
        _1466 = _1318;
        _1467 = _1317;
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
    }
    else
    {
        _1455 = _1456;
        _1457 = _1456;
        _1458 = _1456;
        _1459 = _1456;
        _1460 = _1456;
        _1461 = _1456;
        _1462 = _1456;
        _1463 = _1456;
        _1464 = _1456;
        _1465 = _1456;
        _1466 = _1456;
        _1467 = _1456;
        _1468 = 0.0;
        _1469 = 0.0;
        _1470 = 0.0;
    }
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1495 = fma(_1154, cbModelParam._m0[30u].z, fma(_1150, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146));
        float _1499 = fma(_1154, cbModelParam._m0[31u].z, fma(_1150, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146));
        float _1503 = fma(_1154, cbModelParam._m0[32u].z, fma(_1150, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146));
        float _1526 = _1146 + _917;
        float _1527 = _1150 + _918;
        float _1528 = _1154 + _919;
        float _1538 = fma(_1528, cbModelParam._m0[30u].z, fma(_1527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1526)) - _1495;
        float _1539 = fma(_1528, cbModelParam._m0[31u].z, fma(_1527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1526)) - _1499;
        float _1540 = fma(_1528, cbModelParam._m0[32u].z, fma(_1527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1526)) - _1503;
        float _1544 = inversesqrt(dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540)));
        float _1557 = ((_1544 * _1538) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1495 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1558 = ((_1544 * _1539) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1499 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1559 = ((_1544 * _1540) / cbModelParam._m0[35u].z) + ((((((_1503 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        float _1594 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1561.x + (-0.5));
        float _1596 = _1594 * (_1561.y + (-0.5));
        float _1597 = _1594 * (_1561.z + (-0.5));
        float _1604 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1568.x + (-0.5));
        float _1606 = _1604 * (_1568.y + (-0.5));
        float _1607 = _1604 * (_1568.z + (-0.5));
        float _1614 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1575.x + (-0.5));
        float _1616 = _1614 * (_1575.y + (-0.5));
        float _1617 = _1614 * (_1575.z + (-0.5));
        float _1624 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1582.x + (-0.5));
        float _1626 = _1624 * (_1582.y + (-0.5));
        float _1627 = _1624 * (_1582.z + (-0.5));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = _1595 * 0.5;
        float _1632 = _1605 * 0.5;
        float _1633 = _1615 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_917, _918, _919), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4426 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4437 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4448 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_1658 + 1.0))) + _1663) * _1628;
        float _1673 = _1596 * 0.5;
        float _1674 = _1606 * 0.5;
        float _1675 = _1616 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_917, _918, _919), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4459 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4470 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4481 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_1700 + 1.0))) + _1705) * _1629;
        float _1715 = _1597 * 0.5;
        float _1716 = _1607 * 0.5;
        float _1717 = _1617 * 0.5;
        float _1718 = dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717));
        float _1723 = (_1718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1718);
        float _1731 = (dot(vec3(_917, _918, _919), vec3(_1723 * _1715, _1723 * _1716, _1723 * _1717)) + 1.0) * 0.5;
        float _4492 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4503 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1742 = _1741 * 2.0;
        float _1746 = (1.0 - _1741) / (_1741 + 1.0);
        float _4514 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1756 = ((((1.0 - _1747) * (_1742 + 2.0)) * exp2(log2(isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_1742 + 1.0))) + _1747) * _1630;
        _1764 = _1597;
        _1765 = _1596;
        _1766 = _1595;
        _1767 = _1607;
        _1768 = _1606;
        _1769 = _1605;
        _1770 = _1617;
        _1771 = _1616;
        _1772 = _1615;
        _1773 = _1630;
        _1774 = _1629;
        _1775 = _1628;
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)));
    }
    else
    {
        _1764 = _1456;
        _1765 = _1456;
        _1766 = _1456;
        _1767 = _1456;
        _1768 = _1456;
        _1769 = _1456;
        _1770 = _1456;
        _1771 = _1456;
        _1772 = _1456;
        _1773 = _1456;
        _1774 = _1456;
        _1775 = _1456;
        _1776 = 0.0;
        _1777 = 0.0;
        _1778 = 0.0;
    }
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1468)) + _1468;
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1469)) + _1469;
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1470)) + _1470;
    float _1811 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1788));
    float _1832 = _1090 * 0.5;
    float _1833 = _1091 * 0.5;
    float _1834 = _1092 * 0.5;
    float _1835 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1838 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1841 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1875;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1848 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1455, _1459, _1462, _1465));
        float _1852 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1457, _1460, _1463, _1466));
        float _1856 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1458, _1461, _1464, _1467));
        float _1863 = dot(vec4(cbModelParam._m0[39u]), vec4(_1832, _1833, _1834, 1.0));
        _1875 = dot(vec3(isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1863) ? 0.0 : (isnan(0.0) ? _1863 : max(0.0, _1863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1875 = 1.0;
    }
    float _1886;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1877 = dot(vec4(cbModelParam._m0[40u]), vec4(_1832, _1833, _1834, 1.0));
        _1886 = dot(vec3(isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1877) ? 0.0 : (isnan(0.0) ? _1877 : max(0.0, _1877))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1886 = 1.0;
    }
    float _1890 = (_1886 * cbModelParam._m0[1u].x) + (_1875 * (1.0 - cbModelParam._m0[1u].x));
    float _1900 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _920);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1900 : min(cbModelParam._m0[25u].z, _1900));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1948 = fma(_1154, cbModelParam._m0[13u].z, fma(_1150, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1146)) + cbModelParam._m0[13u].w;
        float _1952 = fma(_1154, cbModelParam._m0[14u].z, fma(_1150, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1146)) + cbModelParam._m0[14u].w;
        float _1956 = fma(_1154, cbModelParam._m0[15u].z, fma(_1150, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1146)) + cbModelParam._m0[15u].w;
        float _1959 = fma(_1092, cbModelParam._m0[13u].z, fma(_1091, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1090));
        float _1962 = fma(_1092, cbModelParam._m0[14u].z, fma(_1091, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1090));
        float _1965 = fma(_1092, cbModelParam._m0[15u].z, fma(_1091, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1090));
        float _1993;
        if (_1959 > 0.0)
        {
            _1993 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1993 = frontier_phi_14_12_ladder;
        }
        float _2164;
        if (_1962 > 0.0)
        {
            _2164 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2164 = frontier_phi_23_19_ladder;
        }
        float _2459;
        if (_1965 > 0.0)
        {
            _2459 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2459 = frontier_phi_35_30_ladder;
        }
        float _2461 = isnan(_2164) ? _1993 : (isnan(_1993) ? _2164 : min(_1993, _2164));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1959) + _1948;
        float _2467 = (_2462 * _1962) + _1952;
        float _2468 = (_2462 * _1965) + _1956;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2469;
        float _2473 = _2469 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 > _2473) || ((_2467 < _2471) || ((_2466 < _2471) || (_2466 > _2473))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2613 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2468, cbModelParam._m0[9u].z, fma(_2467, cbModelParam._m0[9u].y, _2466 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2468, cbModelParam._m0[10u].z, fma(_2467, cbModelParam._m0[10u].y, _2466 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2468, cbModelParam._m0[11u].z, fma(_2467, cbModelParam._m0[11u].y, _2466 * cbModelParam._m0[11u].x))), _1901);
            frontier_phi_13_35_ladder = _2613.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2613.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2613.x * cbModelParam._m0[1u].y;
        }
        _1981 = frontier_phi_13_35_ladder_2;
        _1983 = frontier_phi_13_35_ladder_1;
        _1985 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1090, _1091, _1092), _1901);
        _1981 = _1969.x * cbModelParam._m0[1u].y;
        _1983 = _1969.y * cbModelParam._m0[1u].y;
        _1985 = _1969.z * cbModelParam._m0[1u].y;
    }
    float _1989 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _920);
    float _1990 = isnan(_1989) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1989 : min(cbModelParam._m0[25u].w, _1989));
    float _2079;
    float _2081;
    float _2083;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2043 = fma(_1154, cbModelParam._m0[21u].z, fma(_1150, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1146)) + cbModelParam._m0[21u].w;
        float _2047 = fma(_1154, cbModelParam._m0[22u].z, fma(_1150, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1146)) + cbModelParam._m0[22u].w;
        float _2051 = fma(_1154, cbModelParam._m0[23u].z, fma(_1150, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1146)) + cbModelParam._m0[23u].w;
        float _2054 = fma(_1092, cbModelParam._m0[21u].z, fma(_1091, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1090));
        float _2057 = fma(_1092, cbModelParam._m0[22u].z, fma(_1091, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1090));
        float _2060 = fma(_1092, cbModelParam._m0[23u].z, fma(_1091, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1090));
        float _2169;
        if (_2054 > 0.0)
        {
            _2169 = abs((1.0 - _2043) / _2054);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2043 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2169 = frontier_phi_25_21_ladder;
        }
        float _2486;
        if (_2057 > 0.0)
        {
            _2486 = abs((1.0 - _2047) / _2057);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2047 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2486 = frontier_phi_37_32_ladder;
        }
        float _2824;
        if (_2060 > 0.0)
        {
            _2824 = abs((1.0 - _2051) / _2060);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2051 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2824 = frontier_phi_47_44_ladder;
        }
        float _2826 = isnan(_2486) ? _2169 : (isnan(_2169) ? _2486 : min(_2169, _2486));
        float _2827 = isnan(_2824) ? _2826 : (isnan(_2826) ? _2824 : min(_2826, _2824));
        float _2831 = (_2827 * _2054) + _2043;
        float _2832 = (_2827 * _2057) + _2047;
        float _2833 = (_2827 * _2060) + _2051;
        float _2834 = _2827 * 9.9999997473787516355514526367188e-05;
        float _2835 = (-1.0) - _2834;
        float _2837 = _2834 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2833 > _2837) || ((_2833 < _2835) || ((_2832 > _2837) || ((_2832 < _2835) || ((_2831 < _2835) || (_2831 > _2837))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2955 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2833, cbModelParam._m0[17u].z, fma(_2832, cbModelParam._m0[17u].y, _2831 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2833, cbModelParam._m0[18u].z, fma(_2832, cbModelParam._m0[18u].y, _2831 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2833, cbModelParam._m0[19u].z, fma(_2832, cbModelParam._m0[19u].y, _2831 * cbModelParam._m0[19u].x))), _1990);
            frontier_phi_22_47_ladder = _2955.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2955.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2955.x * cbModelParam._m0[1u].z;
        }
        _2079 = frontier_phi_22_47_ladder_2;
        _2081 = frontier_phi_22_47_ladder_1;
        _2083 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2063 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1090, _1091, _1092), _1990);
        _2079 = _2063.x * cbModelParam._m0[1u].z;
        _2081 = _2063.y * cbModelParam._m0[1u].z;
        _2083 = _2063.z * cbModelParam._m0[1u].z;
    }
    float _2096 = (((_1117 * _1066) + _1118) * _1082) * ((cbModelParam._m0[1u].w * (_2079 - _1981)) + _1981);
    float _2098 = (((_1117 * _1068) + _1118) * _1082) * ((cbModelParam._m0[1u].w * (_2081 - _1983)) + _1983);
    float _2100 = (((_1117 * _1069) + _1118) * _1082) * ((cbModelParam._m0[1u].w * (_2083 - _1985)) + _1985);
    float _2103 = fma(_2100, cbSceneParam._m0[89u].z, fma(_2098, cbSceneParam._m0[89u].y, _2096 * cbSceneParam._m0[89u].x));
    float _2106 = fma(_2100, cbSceneParam._m0[90u].z, fma(_2098, cbSceneParam._m0[90u].y, _2096 * cbSceneParam._m0[90u].x));
    float _2109 = fma(_2100, cbSceneParam._m0[91u].z, fma(_2098, cbSceneParam._m0[91u].y, _2096 * cbSceneParam._m0[91u].x));
    float _2143 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2147 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2151 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2155 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2156 = _2143 / _2155;
    float _2157 = _2147 / _2155;
    float _2158 = _2151 / _2155;
    float _2305;
    float _2306;
    float _2307;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2185 = ((uint(_2158 > cbSceneParam._m0[59u].y) + uint(_2158 > cbSceneParam._m0[59u].x)) + uint(_2158 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2186 = _2185 + 43u;
        uint _2194 = _2185 + 44u;
        uint _2202 = _2185 + 45u;
        uint _2210 = _2185 + 46u;
        float _2221 = fma(_2155, cbSceneParam._m0[_2186].w, fma(_2151, cbSceneParam._m0[_2186].z, fma(_2147, cbSceneParam._m0[_2186].y, _2143 * cbSceneParam._m0[_2186].x)));
        float _2225 = fma(_2155, cbSceneParam._m0[_2194].w, fma(_2151, cbSceneParam._m0[_2194].z, fma(_2147, cbSceneParam._m0[_2194].y, _2143 * cbSceneParam._m0[_2194].x)));
        float _2233 = fma(_2155, cbSceneParam._m0[_2210].w, fma(_2151, cbSceneParam._m0[_2210].z, fma(_2147, cbSceneParam._m0[_2210].y, _2143 * cbSceneParam._m0[_2210].x)));
        float _2238 = cbSceneParam._m0[33u].z * _2233;
        float _2240 = cbSceneParam._m0[33u].w * _2233;
        float _2243 = fma(_2155, cbSceneParam._m0[_2202].w, fma(_2151, cbSceneParam._m0[_2202].z, fma(_2147, cbSceneParam._m0[_2202].y, _2143 * cbSceneParam._m0[_2202].x))) / _2233;
        float _2291 = (cbSceneParam._m0[33u].x - sqrt(((_2157 * _2157) + (_2156 * _2156)) + (_2158 * _2158))) * cbSceneParam._m0[33u].y;
        float _4640 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2298 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2238 + _2221) / _2233, (_2240 + _2225) / _2233), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2240 + _2221) / _2233, (_2225 - _2238) / _2233), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2221 - _2238) / _2233, (_2225 - _2240) / _2233), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2221 - _2240) / _2233, (_2238 + _2225) / _2233), _2243), 0.0)).x), vec4(0.25)));
        _2305 = 1.0 - (_2298 * cbSceneParam._m0[34u].x);
        _2306 = 1.0 - (_2298 * cbSceneParam._m0[34u].y);
        _2307 = 1.0 - (_2298 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2305 = 1.0;
        _2306 = 1.0;
        _2307 = 1.0;
    }
    float _2371;
    float _2373;
    float _2375;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2359 = fma(_2155, cbSceneParam._m0[63u].w, fma(_2151, cbSceneParam._m0[63u].z, fma(_2147, cbSceneParam._m0[63u].y, _2143 * cbSceneParam._m0[63u].x)));
        float _2360 = fma(_2155, cbSceneParam._m0[60u].w, fma(_2151, cbSceneParam._m0[60u].z, fma(_2147, cbSceneParam._m0[60u].y, _2143 * cbSceneParam._m0[60u].x))) / _2359;
        float _2361 = fma(_2155, cbSceneParam._m0[61u].w, fma(_2151, cbSceneParam._m0[61u].z, fma(_2147, cbSceneParam._m0[61u].y, _2143 * cbSceneParam._m0[61u].x))) / _2359;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2360 >= cbSceneParam._m0[64u].x) && (_2361 >= cbSceneParam._m0[64u].y)) && (_2360 <= cbSceneParam._m0[64u].z)) && (_2361 <= cbSceneParam._m0[64u].w))
        {
            float _2499 = fma(_2155, cbSceneParam._m0[62u].w, fma(_2151, cbSceneParam._m0[62u].z, fma(_2147, cbSceneParam._m0[62u].y, _2143 * cbSceneParam._m0[62u].x))) / _2359;
            float _2503 = isnan(cbSceneParam._m0[41u].w) ? _2499 : (isnan(_2499) ? cbSceneParam._m0[41u].w : max(_2499, cbSceneParam._m0[41u].w));
            float _2546 = (cbSceneParam._m0[33u].x - sqrt(((_2157 * _2157) + (_2156 * _2156)) + (_2158 * _2158))) * cbSceneParam._m0[33u].y;
            float _4656 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
            float _2553 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2360, cbSceneParam._m0[33u].w + _2361), _2503), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2360, _2361 - cbSceneParam._m0[33u].z), _2503), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2360 - cbSceneParam._m0[33u].z, _2361 - cbSceneParam._m0[33u].w), _2503), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2360 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2361), _2503), 0.0)).x), vec4(0.25)));
            float _2557 = 1.0 - (_2553 * cbSceneParam._m0[34u].x);
            float _2558 = 1.0 - (_2553 * cbSceneParam._m0[34u].y);
            float _2559 = 1.0 - (_2553 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2559) ? _2307 : (isnan(_2307) ? _2559 : min(_2307, _2559));
            frontier_phi_34_33_ladder_1 = isnan(_2558) ? _2306 : (isnan(_2306) ? _2558 : min(_2306, _2558));
            frontier_phi_34_33_ladder_2 = isnan(_2557) ? _2305 : (isnan(_2305) ? _2557 : min(_2305, _2557));
        }
        else
        {
            frontier_phi_34_33_ladder = _2307;
            frontier_phi_34_33_ladder_1 = _2306;
            frontier_phi_34_33_ladder_2 = _2305;
        }
        _2371 = frontier_phi_34_33_ladder_2;
        _2373 = frontier_phi_34_33_ladder_1;
        _2375 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2371 = _2305;
        _2373 = _2306;
        _2375 = _2307;
    }
    uvec4 _2380 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2382 = _2380.x * 14u;
    uint _2383 = _2382 + 13u;
    float _2390 = _1082 + (-1.0);
    float _2395 = (cbLight._m0[_2383].x * _2390) + 1.0;
    float _2396 = (cbLight._m0[_2383].y * _2390) + 1.0;
    float _2397 = (cbLight._m0[_2383].z * _2390) + 1.0;
    float _2398 = (cbLight._m0[_2383].w * _2390) + 1.0;
    uint _2399 = _2382 + 5u;
    float _2405 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
    uint _2409 = _2382 + 4u;
    float _2418 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
    uint _2422 = _2382 | 1u;
    float _2433 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_917, _918, _919));
    float _2436 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_917, _918, _919));
    float _4692 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _4703 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2441 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * 0.3183098733425140380859375;
    float _2443 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * 0.3183098733425140380859375;
    float _2450 = ((cbLight._m0[_2399].x * _2405) * _2443) + (((cbLight._m0[_2409].x * _2371) * _2418) * _2441);
    float _2451 = ((_2405 * cbLight._m0[_2399].y) * _2443) + (((cbLight._m0[_2409].y * _2373) * _2418) * _2441);
    float _2452 = ((_2405 * cbLight._m0[_2399].z) * _2443) + (((cbLight._m0[_2409].z * _2375) * _2418) * _2441);
    uvec4 _2456 = floatBitsToUint(cbLight._m0[_2382 + 12u]);
    bool _2458 = _2456.x == 0u;
    float _2560;
    float _2562;
    float _2564;
    if (_2458)
    {
        _2560 = _2450;
        _2562 = _2451;
        _2564 = _2452;
    }
    else
    {
        uint _2568 = _2382 + 6u;
        float _2584 = (dot(vec3(cbLight._m0[_2382 + 2u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2585 = _2584 * _2584;
        float _4714 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2586 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2587 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
        _2560 = (((cbLight._m0[_2568].x * 0.3183098733425140380859375) * _2586) * _2587) + _2450;
        _2562 = (((cbLight._m0[_2568].y * 0.3183098733425140380859375) * _2586) * _2587) + _2451;
        _2564 = (((cbLight._m0[_2568].z * 0.3183098733425140380859375) * _2586) * _2587) + _2452;
    }
    bool _2567 = _2456.y == 0u;
    float _2622;
    float _2624;
    float _2626;
    if (_2567)
    {
        _2622 = _2560;
        _2624 = _2562;
        _2626 = _2564;
    }
    else
    {
        uint _2795 = _2382 + 7u;
        float _2811 = (dot(vec3(cbLight._m0[_2382 + 3u].xyz), vec3(_917, _918, _919)) * 0.5) + 0.5;
        float _2812 = _2811 * _2811;
        float _4730 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2813 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2814 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2622 = (((cbLight._m0[_2795].x * 0.3183098733425140380859375) * _2813) * _2814) + _2560;
        _2624 = (((cbLight._m0[_2795].y * 0.3183098733425140380859375) * _2813) * _2814) + _2562;
        _2626 = (((cbLight._m0[_2795].z * 0.3183098733425140380859375) * _2813) * _2814) + _2564;
    }
    uint _2629 = _2382 + 8u;
    float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _920) * 0.949999988079071044921875);
    float _2643 = _2642 * _2642;
    float _2644 = cbLight._m0[_2382].x + _996;
    float _2645 = cbLight._m0[_2382].y + _997;
    float _2646 = cbLight._m0[_2382].z + _998;
    float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
    float _2651 = _2650 * _2644;
    float _2652 = _2650 * _2645;
    float _2653 = _2650 * _2646;
    float _2654 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2382].xyz));
    float _4746 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _4757 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _2658 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2659 = dot(vec3(_917, _918, _919), vec3(_2651, _2652, _2653));
    float _4768 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2662 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    float _2663 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2651, _2652, _2653));
    float _4779 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2667 = _2643 * _2643;
    float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
    float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) * 5.0);
    float _2680 = 0.959999978542327880859375 - _1063;
    float _2682 = 0.959999978542327880859375 - _1064;
    float _2683 = 0.959999978542327880859375 - _1065;
    float _2690 = 1.0 - _2643;
    float _2701 = (0.5 / (((_2658 * ((_2657 * _2690) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2658 * _2690) + _2643) * _2657))) * _2657;
    float _4790 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2703 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
    uint _2717 = _2382 + 9u;
    float _2728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2422].w)) * _920) * 0.949999988079071044921875);
    float _2729 = _2728 * _2728;
    float _2730 = cbLight._m0[_2422].x + _996;
    float _2731 = cbLight._m0[_2422].y + _997;
    float _2732 = cbLight._m0[_2422].z + _998;
    float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
    float _2737 = _2736 * _2730;
    float _2738 = _2736 * _2731;
    float _2739 = _2736 * _2732;
    float _2740 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2422].xyz));
    float _4801 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2743 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
    float _2744 = dot(vec3(_917, _918, _919), vec3(_2737, _2738, _2739));
    float _4812 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2747 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
    float _2748 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_2737, _2738, _2739));
    float _4823 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2752 = _2729 * _2729;
    float _2756 = ((_2747 * _2747) * (_2752 + (-1.0))) + 1.0;
    float _2763 = exp2(log2(1.0 - (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) * 5.0);
    float _2770 = 1.0 - _2729;
    float _2780 = (0.5 / (((_2658 * ((_2743 * _2770) + _2729)) + 9.9999999392252902907785028219223e-09) + (((_2658 * _2770) + _2729) * _2743))) * _2743;
    float _4834 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _2782 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2752 / ((_2756 * _2756) * 3.141590118408203125));
    float _2792 = (((((_2763 * _2680) + _1066) * cbLight._m0[_2717].x) * _2782) * _2405) + ((((cbLight._m0[_2629].x * _2371) * ((_2679 * _2680) + _1066)) * _2703) * _2418);
    float _2793 = (((((_2763 * _2682) + _1068) * cbLight._m0[_2717].y) * _2782) * _2405) + ((((cbLight._m0[_2629].y * _2373) * ((_2679 * _2682) + _1068)) * _2703) * _2418);
    float _2794 = (((((_2763 * _2683) + _1069) * cbLight._m0[_2717].z) * _2782) * _2405) + ((((cbLight._m0[_2629].z * _2375) * ((_2679 * _2683) + _1069)) * _2703) * _2418);
    float _2850;
    float _2852;
    float _2854;
    if (_2458)
    {
        _2850 = _2792;
        _2852 = _2793;
        _2854 = _2794;
    }
    else
    {
        uint _2856 = _2382 + 2u;
        uint _2860 = _2382 + 10u;
        float _2874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2856].w)) * _920) * 0.949999988079071044921875);
        float _2875 = _2874 * _2874;
        float _2876 = cbLight._m0[_2856].x + _996;
        float _2877 = cbLight._m0[_2856].y + _997;
        float _2878 = cbLight._m0[_2856].z + _998;
        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
        float _2883 = _2882 * _2876;
        float _2884 = _2882 * _2877;
        float _2885 = _2882 * _2878;
        float _2886 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2856].xyz));
        float _4845 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2889 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2890 = dot(vec3(_917, _918, _919), vec3(_2883, _2884, _2885));
        float _4856 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2893 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _2894 = dot(vec3(cbLight._m0[_2856].xyz), vec3(_2883, _2884, _2885));
        float _4867 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2898 = _2875 * _2875;
        float _2902 = ((_2893 * _2893) * (_2898 + (-1.0))) + 1.0;
        float _2909 = exp2(log2(1.0 - (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0)))) * 5.0);
        float _2916 = 1.0 - _2875;
        float _2926 = (0.5 / (((_2658 * ((_2889 * _2916) + _2875)) + 9.9999999392252902907785028219223e-09) + (((_2658 * _2916) + _2875) * _2889))) * _2889;
        float _4878 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2928 = (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2898 / ((_2902 * _2902) * 3.141590118408203125));
        float _2929 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
        _2850 = (((((_2909 * _2680) + _1066) * cbLight._m0[_2860].x) * _2928) * _2929) + _2792;
        _2852 = (((((_2909 * _2682) + _1068) * cbLight._m0[_2860].y) * _2928) * _2929) + _2793;
        _2854 = (((((_2909 * _2683) + _1069) * cbLight._m0[_2860].z) * _2928) * _2929) + _2794;
    }
    float _2960;
    float _2962;
    float _2964;
    if (_2567)
    {
        _2960 = _2850;
        _2962 = _2852;
        _2964 = _2854;
    }
    else
    {
        uint _2971 = _2382 + 3u;
        uint _2975 = _2382 + 11u;
        float _2989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2971].w)) * _920) * 0.949999988079071044921875);
        float _2990 = _2989 * _2989;
        float _2991 = cbLight._m0[_2971].x + _996;
        float _2992 = cbLight._m0[_2971].y + _997;
        float _2993 = cbLight._m0[_2971].z + _998;
        float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
        float _2998 = _2997 * _2991;
        float _2999 = _2997 * _2992;
        float _3000 = _2997 * _2993;
        float _3001 = dot(vec3(_917, _918, _919), vec3(cbLight._m0[_2971].xyz));
        float _4894 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        float _3004 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
        float _3005 = dot(vec3(_917, _918, _919), vec3(_2998, _2999, _3000));
        float _4905 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
        float _3008 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
        float _3009 = dot(vec3(cbLight._m0[_2971].xyz), vec3(_2998, _2999, _3000));
        float _4916 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
        float _3013 = _2990 * _2990;
        float _3017 = ((_3008 * _3008) * (_3013 + (-1.0))) + 1.0;
        float _3024 = exp2(log2(1.0 - (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0)))) * 5.0);
        float _3031 = 1.0 - _2990;
        float _3041 = (0.5 / (((_2658 * ((_3004 * _3031) + _2990)) + 9.9999999392252902907785028219223e-09) + (((_2658 * _3031) + _2990) * _3004))) * _3004;
        float _4927 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
        float _3043 = (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_3013 / ((_3017 * _3017) * 3.141590118408203125));
        float _3044 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2960 = (((((_3024 * _2680) + _1066) * cbLight._m0[_2975].x) * _3043) * _3044) + _2850;
        _2962 = (((((_3024 * _2682) + _1068) * cbLight._m0[_2975].y) * _3043) * _3044) + _2852;
        _2964 = (((((_3024 * _2683) + _1069) * cbLight._m0[_2975].z) * _3043) * _3044) + _2854;
    }
    float _3110;
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    if (_2380.y == 0u)
    {
        uvec4 _3065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3066 = _3065.x;
        uint _3077 = uint((float(_3065.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1005) / _3066))) + floor(float(uint(cbSceneParam._m0[85u].x * _1004) / _3066)));
        float _3087 = (log2(_2158 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3088 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
        uint _3091 = uint(isnan(14.0) ? _3088 : (isnan(_3088) ? 14.0 : min(_3088, 14.0)));
        uvec4 _3096 = texelFetch(g_lightClusterGridBuffer, int(((_3091 << 2u) + (_3077 << 6u)) >> 2u));
        uint _3097 = _3096.x;
        uint _3098 = _3065.z;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        if (((((1u << ((_3098 >> 4u) & 15u)) + 4294967295u) & _3097) == 0u) || ((_3098 & 240u) == 0u))
        {
            _3177 = 0.0;
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
            _3187 = 0.0;
        }
        else
        {
            float _3178;
            float _3180;
            float _3182;
            float _3184;
            float _3186;
            float _3188;
            float _3321 = 0.0;
            float _3322 = 0.0;
            float _3323 = 0.0;
            float _3324 = 0.0;
            float _3325 = 0.0;
            float _3326 = 0.0;
            uint _3327 = 0u;
            uint _3336;
            bool _3337;
            for (;;)
            {
                _3336 = texelFetch(g_lightClassification, int((((_3091 << 5u) + (_3077 << 9u)) + (_3327 << 2u)) >> 2u)).x;
                _3337 = _3336 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3337)
                {
                    frontier_phi_66_pred = _3326;
                    frontier_phi_66_pred_1 = _3325;
                    frontier_phi_66_pred_2 = _3324;
                    frontier_phi_66_pred_3 = _3323;
                    frontier_phi_66_pred_4 = _3322;
                    frontier_phi_66_pred_5 = _3321;
                }
                else
                {
                    float _3445;
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    float _3450;
                    uint _3451;
                    _3445 = _3321;
                    _3446 = _3322;
                    _3447 = _3323;
                    _3448 = _3324;
                    _3449 = _3325;
                    _3450 = _3326;
                    _3451 = _3336;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    float _3382;
                    for (;;)
                    {
                        uint _3455 = uint(findLSB(_3451)) + (_3327 << 5u);
                        uint _3452 = (_3451 + 4294967295u) & _3451;
                        uint _3457 = _3455 * 48u;
                        vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3457)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3457 + 3u)).x));
                        uint _3477 = (_3455 * 48u) + 4u;
                        vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3477)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 3u)).x));
                        uint _3496 = (_3455 * 48u) + 8u;
                        vec3 _3507 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3496)).x, texelFetch(g_PointLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3496 + 2u)).x));
                        float _3511 = _3471.x - _2156;
                        float _3512 = _3471.y - _2157;
                        float _3513 = _3471.z - _2158;
                        float _3514 = dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513));
                        float _3517 = inversesqrt(_3514);
                        float _3518 = _3517 * _3511;
                        float _3519 = _3517 * _3512;
                        float _3520 = _3517 * _3513;
                        float _3521 = dot(vec3(_1023, _1026, _1029), vec3(_3518, _3519, _3520));
                        float _3526 = 1.0 - (_3514 * _3471.w);
                        float _4953 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3527 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                        float _3528 = sqrt(_3514) * _3490.w;
                        float _3531 = 1.39999997615814208984375 / (_3528 + 1.39999997615814208984375);
                        float _3532 = _3531 * _3531;
                        float _3535 = ((1.0 - _3532) * _3521) + _3532;
                        float _3538 = _3528 * _3528;
                        float _3542 = ((isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0))) * _3527) / ((_3538 * 0.699999988079071044921875) + 1.0);
                        float _3546 = (-0.0) - _2156;
                        float _3547 = (-0.0) - _2157;
                        float _3548 = (-0.0) - _2158;
                        float _3552 = inversesqrt(dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548)));
                        float _3553 = _3552 * _3546;
                        float _3554 = _3552 * _3547;
                        float _3555 = _3552 * _3548;
                        float _3562 = exp2(log2(1.0 / ((_3538 * 3.5) + 5.0)) * 0.25);
                        float _3563 = 1.0 - _1098;
                        float _3570 = sqrt(1.0 - ((1.0 - (_3563 * _3563)) * (1.0 - (_3562 * _3562))));
                        float _3571 = _3570 * _3570;
                        float _3572 = _3571 * _3571;
                        float _3573 = _3553 + _3518;
                        float _3574 = _3554 + _3519;
                        float _3575 = _3555 + _3520;
                        float _3579 = inversesqrt(dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575)));
                        float _3583 = dot(vec3(_1023, _1026, _1029), vec3(_3553, _3554, _3555));
                        float _4969 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3586 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                        float _3587 = dot(vec3(_1023, _1026, _1029), vec3(_3579 * _3573, _3579 * _3574, _3579 * _3575));
                        float _4980 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3590 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                        float _3594 = ((_3590 * _3590) * (_3572 + (-1.0))) + 1.0;
                        float _3595 = _3531 * _3571;
                        float _3596 = _3595 * _3595;
                        float _3599 = ((1.0 - _3596) * _3521) + _3596;
                        float _4991 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                        float _3600 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                        float _3601 = 1.0 - _3571;
                        float _3611 = (0.5 / (((_3600 * ((_3586 * _3601) + _3571)) + 9.9999999392252902907785028219223e-09) + (((_3600 * _3601) + _3571) * _3586))) * _3600;
                        float _5002 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                        float _3622 = (((_3572 * 3.1415927410125732421875) * (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0)))) / ((_3594 * _3594) * ((_3538 * 2.1991131305694580078125) + 3.141590118408203125))) * _3527;
                        _3380 = (_3542 * _3490.x) + _3448;
                        _3381 = (_3542 * _3490.y) + _3449;
                        _3382 = (_3542 * _3490.z) + _3450;
                        _3377 = (_3622 * _3507.x) + _3445;
                        _3378 = (_3622 * _3507.y) + _3446;
                        _3379 = (_3622 * _3507.z) + _3447;
                        if (_3452 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3445 = _3377;
                            _3446 = _3378;
                            _3447 = _3379;
                            _3448 = _3380;
                            _3449 = _3381;
                            _3450 = _3382;
                            _3451 = _3452;
                        }
                    }
                    frontier_phi_66_pred = _3382;
                    frontier_phi_66_pred_1 = _3381;
                    frontier_phi_66_pred_2 = _3380;
                    frontier_phi_66_pred_3 = _3379;
                    frontier_phi_66_pred_4 = _3378;
                    frontier_phi_66_pred_5 = _3377;
                }
                _3188 = frontier_phi_66_pred;
                _3186 = frontier_phi_66_pred_1;
                _3184 = frontier_phi_66_pred_2;
                _3182 = frontier_phi_66_pred_3;
                _3180 = frontier_phi_66_pred_4;
                _3178 = frontier_phi_66_pred_5;
                uint _3328 = _3327 + 1u;
                if (_3328 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3321 = _3178;
                    _3322 = _3180;
                    _3323 = _3182;
                    _3324 = _3184;
                    _3325 = _3186;
                    _3326 = _3188;
                    _3327 = _3328;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3177 = _3178;
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
            _3187 = _3188;
        }
        uvec4 _3191 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3192 = _3191.z;
        uint _3194 = (_3192 >> 8u) & 15u;
        float _3289;
        float _3291;
        float _3293;
        float _3295;
        float _3297;
        float _3299;
        if (((4294967295u << _3194) & _3097) == 0u)
        {
            _3289 = _3177;
            _3291 = _3179;
            _3293 = _3181;
            _3295 = _3183;
            _3297 = _3185;
            _3299 = _3187;
        }
        else
        {
            float _3314 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
            float _3315 = _3314 * _2156;
            float _3316 = _3314 * _2157;
            float _3317 = _3314 * _2158;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3194 < ((_3192 >> 12u) & 15u))
            {
                float _3290;
                float _3292;
                float _3294;
                float _3296;
                float _3298;
                float _3300;
                float _3428 = _3177;
                float _3429 = _3179;
                float _3430 = _3181;
                float _3431 = _3183;
                float _3432 = _3185;
                float _3433 = _3187;
                uint _3434 = _3194;
                uint _3443;
                bool _3444;
                for (;;)
                {
                    _3443 = texelFetch(g_lightClassification, int((((_3091 << 5u) + (_3077 << 9u)) + (_3434 << 2u)) >> 2u)).x;
                    _3444 = _3443 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3444)
                    {
                        frontier_phi_72_pred = _3433;
                        frontier_phi_72_pred_1 = _3432;
                        frontier_phi_72_pred_2 = _3431;
                        frontier_phi_72_pred_3 = _3430;
                        frontier_phi_72_pred_4 = _3429;
                        frontier_phi_72_pred_5 = _3428;
                    }
                    else
                    {
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3925;
                        float _3640 = _3428;
                        float _3641 = _3429;
                        float _3642 = _3430;
                        float _3643 = _3431;
                        float _3644 = _3432;
                        float _3645 = _3433;
                        uint _3646 = _3443;
                        uint _3647;
                        vec4 _3672;
                        float _3673;
                        vec4 _3688;
                        vec3 _3700;
                        vec4 _3715;
                        vec4 _3730;
                        float _3776;
                        bool _3777;
                        for (;;)
                        {
                            uint _3657 = ((_3434 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3646));
                            _3647 = (_3646 + 4294967295u) & _3646;
                            uint _3659 = _3657 * 40u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3673 = _3672.w;
                            uint _3675 = (_3657 * 40u) + 4u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3690 = (_3657 * 40u) + 8u;
                            _3700 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x));
                            uint _3702 = (_3657 * 40u) + 16u;
                            _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3717 = (_3657 * 40u) + 20u;
                            _3730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 3u)).x));
                            uint _3732 = (_3657 * 40u) + 24u;
                            vec4 _3745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 3u)).x));
                            uint _3751 = (_3657 * 40u) + 28u;
                            vec4 _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            _3776 = fma(_2158, _3764.z, fma(_2157, _3764.y, _3764.x * _2156)) + _3764.w;
                            _3777 = !((fma(_2158, _3745.z, fma(_2157, _3745.y, _3745.x * _2156)) + _3745.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3777)
                            {
                                float _3804 = _3672.x - _2156;
                                float _3805 = _3672.y - _2157;
                                float _3806 = _3672.z - _2158;
                                float _3807 = dot(vec3(_3804, _3805, _3806), vec3(_3804, _3805, _3806));
                                float _3810 = inversesqrt(_3807);
                                float _3811 = _3810 * _3804;
                                float _3812 = _3810 * _3805;
                                float _3813 = _3810 * _3806;
                                float _3817 = 1.0 - (_3807 / (_3673 * _3673));
                                float _5013 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3818 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
                                float _3822 = sqrt(_3807) * _3688.w;
                                float _3824 = 1.39999997615814208984375 / (_3822 + 1.39999997615814208984375);
                                float _3825 = _3824 * _3824;
                                float _3828 = ((1.0 - _3825) * dot(vec3(_3811, _3812, _3813), vec3(_1023, _1026, _1029))) + _3825;
                                float _3831 = _3822 * _3822;
                                float _3835 = (fma(_2158, _3715.z, fma(_2157, _3715.y, _3715.x * _2156)) + _3715.w) / _3776;
                                float _3836 = (fma(_2158, _3730.z, fma(_2157, _3730.y, _3730.x * _2156)) + _3730.w) / _3776;
                                float _3840 = 1.0 - dot(vec2(_3835, _3836), vec2(_3835, _3836));
                                float _5029 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3841 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                                float _3842 = _3841 * (((isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0))) * _3818) / ((_3831 * 0.699999988079071044921875) + 1.0));
                                float _3854 = exp2(log2(1.0 / ((_3831 * 3.5) + 5.0)) * 0.25);
                                float _3855 = 1.0 - _1098;
                                float _3862 = sqrt(1.0 - ((1.0 - (_3855 * _3855)) * (1.0 - (_3854 * _3854))));
                                float _3863 = _3862 * _3862;
                                float _3864 = _3863 * _3863;
                                float _3865 = _3811 - _3315;
                                float _3866 = _3812 - _3316;
                                float _3867 = _3813 - _3317;
                                float _3871 = inversesqrt(dot(vec3(_3865, _3866, _3867), vec3(_3865, _3866, _3867)));
                                float _3875 = dot(vec3(_1023, _1026, _1029), vec3((-0.0) - _3315, (-0.0) - _3316, (-0.0) - _3317));
                                float _5040 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3878 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                                float _3879 = dot(vec3(_1023, _1026, _1029), vec3(_3871 * _3865, _3871 * _3866, _3871 * _3867));
                                float _5051 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3882 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                                float _3886 = ((_3882 * _3882) * (_3864 + (-1.0))) + 1.0;
                                float _3887 = _3824 * _3863;
                                float _3888 = _3887 * _3887;
                                float _3894 = ((1.0 - _3888) * dot(vec3(_1023, _1026, _1029), vec3(_3811, _3812, _3813))) + _3888;
                                float _5062 = isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0));
                                float _3895 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                                float _3896 = 1.0 - _3863;
                                float _3906 = (0.5 / (((_3895 * ((_3878 * _3896) + _3863)) + 9.9999999392252902907785028219223e-09) + (((_3895 * _3896) + _3863) * _3878))) * _3895;
                                float _5073 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3916 = (_3841 * _3818) * (((_3864 * 3.1415927410125732421875) * (isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0)))) / ((_3886 * _3886) * ((_3831 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3842 * _3688.y;
                                frontier_phi_78_pred_1 = _3842 * _3688.x;
                                frontier_phi_78_pred_2 = _3916 * _3700.z;
                                frontier_phi_78_pred_3 = _3916 * _3700.y;
                                frontier_phi_78_pred_4 = _3916 * _3700.x;
                                frontier_phi_78_pred_5 = _3842 * _3688.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3924 = frontier_phi_78_pred;
                            _3923 = frontier_phi_78_pred_1;
                            _3922 = frontier_phi_78_pred_2;
                            _3921 = frontier_phi_78_pred_3;
                            _3920 = frontier_phi_78_pred_4;
                            _3925 = frontier_phi_78_pred_5;
                            _3630 = _3923 + _3643;
                            _3631 = _3924 + _3644;
                            _3632 = _3925 + _3645;
                            _3627 = _3920 + _3640;
                            _3628 = _3921 + _3641;
                            _3629 = _3922 + _3642;
                            if (_3647 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3647;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3632;
                        frontier_phi_72_pred_1 = _3631;
                        frontier_phi_72_pred_2 = _3630;
                        frontier_phi_72_pred_3 = _3629;
                        frontier_phi_72_pred_4 = _3628;
                        frontier_phi_72_pred_5 = _3627;
                    }
                    _3300 = frontier_phi_72_pred;
                    _3298 = frontier_phi_72_pred_1;
                    _3296 = frontier_phi_72_pred_2;
                    _3294 = frontier_phi_72_pred_3;
                    _3292 = frontier_phi_72_pred_4;
                    _3290 = frontier_phi_72_pred_5;
                    uint _3435 = _3434 + 1u;
                    if (_3435 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3428 = _3290;
                        _3429 = _3292;
                        _3430 = _3294;
                        _3431 = _3296;
                        _3432 = _3298;
                        _3433 = _3300;
                        _3434 = _3435;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3300;
                frontier_phi_60_61_ladder_1 = _3298;
                frontier_phi_60_61_ladder_2 = _3294;
                frontier_phi_60_61_ladder_3 = _3292;
                frontier_phi_60_61_ladder_4 = _3290;
                frontier_phi_60_61_ladder_5 = _3296;
            }
            else
            {
                frontier_phi_60_61_ladder = _3187;
                frontier_phi_60_61_ladder_1 = _3185;
                frontier_phi_60_61_ladder_2 = _3181;
                frontier_phi_60_61_ladder_3 = _3179;
                frontier_phi_60_61_ladder_4 = _3177;
                frontier_phi_60_61_ladder_5 = _3183;
            }
            _3289 = frontier_phi_60_61_ladder_4;
            _3291 = frontier_phi_60_61_ladder_3;
            _3293 = frontier_phi_60_61_ladder_2;
            _3295 = frontier_phi_60_61_ladder_5;
            _3297 = frontier_phi_60_61_ladder_1;
            _3299 = frontier_phi_60_61_ladder;
        }
        float _3304 = isnan(1.0) ? _1082 : (isnan(_1082) ? 1.0 : min(_1082, 1.0));
        _3110 = (_3304 * _3295) + _2622;
        _3112 = (_3304 * _3297) + _2624;
        _3114 = (_3304 * _3299) + _2626;
        _3116 = ((_3289 * _1066) * _3304) + _2960;
        _3118 = ((_3291 * _1068) * _3304) + _2962;
        _3120 = ((_3293 * _1069) * _3304) + _2964;
    }
    else
    {
        _3110 = _2622;
        _3112 = _2624;
        _3114 = _2626;
        _3116 = _2960;
        _3118 = _2962;
        _3120 = _2964;
    }
    float _5089 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _5100 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _5111 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    uint _3140 = _285 + 6u;
    float _3148 = _1004 / cbSceneParam._m0[86u].x;
    float _3149 = _1005 / cbSceneParam._m0[86u].y;
    vec4 _3163 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3148, _3149, (log2((isnan(cbSceneParam._m0[77u].w) ? _939 : (isnan(_939) ? cbSceneParam._m0[77u].w : min(_939, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3165 = _3163.x;
    float _3166 = _3163.y;
    float _3167 = _3163.z;
    float _3168 = _3163.w;
    float _3239;
    float _3241;
    float _3243;
    float _3245;
    if (_939 > cbSceneParam._m0[78u].w)
    {
        float _3202 = isnan(_939) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _939 : min(cbSceneParam._m0[80u].w, _939));
        float _3203 = _3202 / _939;
        float _3214 = _3203 * _989;
        float _3215 = _990 * _3203;
        float _3216 = (-0.0) - _3215;
        float _3217 = _3203 * _991;
        float _3219 = (cbSceneParam._m0[77u].w * _3216) / _3202;
        float _3220 = _3219 + cbSceneParam._m0[79u].w;
        float _3221 = cbSceneParam._m0[79u].w - _3215;
        float _3227 = sqrt(((_3214 * _3214) + (_3215 * _3215)) + (_3217 * _3217));
        float _3230 = (1.0 - (cbSceneParam._m0[77u].w / _3202)) * _3227;
        float _3235 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3237 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3390;
        if (abs((_3216 - _3219) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3390 = ((((_3220 > 0.0) ? exp2(_3235 * _3220) : (2.0 - exp2(_3237 * _3220))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3230;
        }
        else
        {
            float _3350 = 1.0 / cbSceneParam._m0[80u].x;
            float _3351 = isnan(_3221) ? _3220 : (isnan(_3220) ? _3221 : max(_3220, _3221));
            float _3352 = isnan(_3221) ? _3220 : (isnan(_3220) ? _3221 : min(_3220, _3221));
            float _3361 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : min(_3351, 0.0));
            float _3362 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : min(_3352, 0.0));
            _3390 = ((abs(_3227 / _3216) * cbSceneParam._m0[80u].y) * ((((_3361 - _3362) * 2.0) - ((exp2(_3235 * (isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0)))) - exp2(_3235 * (isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0))))) * _3350)) - ((exp2(_3237 * _3361) - exp2(_3237 * _3362)) * _3350))) + (_3230 * cbSceneParam._m0[80u].z);
        }
        vec4 _3392 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3148, _3149, 1.0), 0.0);
        float _3401 = exp2((_3390 * (-1.44269502162933349609375)) * (1.0 - _3392.w));
        float _3402 = log2(_3401);
        float _3418 = log2(_3168);
        _3239 = (exp2(_3418 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3402 * cbSceneParam._m0[78u].x)) * _3392.x) / cbSceneParam._m0[78u].x)) + _3165;
        _3241 = (exp2(_3418 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3402 * cbSceneParam._m0[78u].y)) * _3392.y) / cbSceneParam._m0[78u].y)) + _3166;
        _3243 = (exp2(_3418 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3402 * cbSceneParam._m0[78u].z)) * _3392.z) / cbSceneParam._m0[78u].z)) + _3167;
        _3245 = _3401 * _3168;
    }
    else
    {
        _3239 = _3165;
        _3241 = _3166;
        _3243 = _3167;
        _3245 = _3168;
    }
    float _3257 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3258 = _3257 == 3.0;
    float _3259 = log2(_3245);
    float _3266 = exp2(_3259 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0))) * (_3110 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1082))) + ((_3116 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1890)) * cbPerFrame._m0[3u].x));
    float _3267 = exp2(_3259 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0))) * (_3112 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1082))) + ((_3118 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1890)) * cbPerFrame._m0[3u].x));
    float _3268 = exp2(_3259 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0))) * (_3114 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1082))) + ((_3120 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1890)) * cbPerFrame._m0[3u].x));
    float _3277 = (_3257 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3277 * (_3258 ? _3266 : (_3266 + (cbSceneParam._m0[72u].w * _3239)));
    SV_Target.y = _3277 * (_3258 ? _3267 : (_3267 + (cbSceneParam._m0[72u].w * _3241)));
    SV_Target.z = _3277 * (_3258 ? _3268 : (_3268 + (cbSceneParam._m0[72u].w * _3243)));
    SV_Target.w = cbInstanceData._m0[_3140].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3140].w;
}


