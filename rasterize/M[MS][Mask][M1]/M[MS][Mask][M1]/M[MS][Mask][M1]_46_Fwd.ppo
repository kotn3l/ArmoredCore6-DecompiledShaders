#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1354;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _372 = _370.x;
    float _384 = dot(vec4(_372, _370.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _401 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_372 - _384) * cbMtdParam._m0[23u].w) + _384) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3679 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _409 = (_402 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _410 = (_402 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _411 = (_402 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _469 = _467.x;
    float _470 = _467.y;
    float _471 = _467.z;
    float _480 = ((_450.z - _471) * _402) + _471;
    float _483 = ((((_450.x - _469) * _402) + _469) * 2.0) + (-1.0);
    float _485 = ((((_450.y - _470) * _402) + _470) * 2.0) + (-1.0);
    float _486 = dot(vec2(_483, _485), vec2(_483, _485));
    float _3690 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _491 = sqrt(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _519 = (((_507.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _483;
    float _520 = (((_507.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _485;
    float _523 = fma(_491, _239, fma(_520, _246, _519 * _232));
    float _526 = fma(_491, _240, fma(_520, _247, _519 * _233));
    float _529 = fma(_491, _241, fma(_520, _248, _519 * _234));
    float _533 = inversesqrt(dot(vec3(_523, _526, _529), vec3(_523, _526, _529)));
    vec4 _560 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _562 = _560.x;
    float _563 = 1.0 - _562;
    float _572 = (cbMtdParam._m0[19u].x + dot(vec4(_533 * _523, _533 * _526, _533 * _529, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_562 - _563) * cbMtdParam._m0[24u].z) + _563) * cbMtdParam._m0[21u].z);
    float _3701 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _575 = (-0.0) - cbMtdParam._m0[24u].x;
    float _577 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _577 : (isnan(_577) ? 1.0 : min(_577, 1.0));
    float _585 = _573 - ((_573 * TEXCOORD_8.x) * _578);
    float _586 = _573 - ((_573 * TEXCOORD_8.y) * _578);
    float _587 = _573 - ((_573 * TEXCOORD_8.z) * _578);
    float _594 = (_585 * ((_430.x * cbMtdParam._m0[18u].x) - _409)) + _409;
    float _595 = (_586 * ((_430.y * cbMtdParam._m0[18u].y) - _410)) + _410;
    float _596 = (_587 * ((_430.z * cbMtdParam._m0[18u].z) - _411)) + _411;
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _610 = _608.x;
    float _611 = 1.0 - _610;
    float _637 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_610 - _611) * cbMtdParam._m0[24u].w) + _611) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3722 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _646 = ((((cbMtdParam._m0[10u].x - _594) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _638) + _594;
    float _647 = ((((cbMtdParam._m0[10u].y - _595) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _638) + _595;
    float _648 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _596)) * _638) + _596;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _676 = _674.x;
    float _694 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _676) * _402) + _676;
    float _698 = ((_660.x - _694) * cbMtdParam._m0[19u].z) + _694;
    float _700 = _698 - (_698 * _585);
    float _702 = _700 - (_700 * _638);
    float _706 = (cbMtdParam._m0[19u].w * (_507.z - _480)) + _480;
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _727 = (_720.x * 2.0) + (-1.0);
    float _728 = (_720.y * 2.0) + (-1.0);
    float _729 = dot(vec2(_727, _728), vec2(_727, _728));
    float _3733 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _737 = ((_720.z - _706) * _585) + _706;
    float _740 = ((cbMtdParam._m0[23u].x - _737) * _638) + _737;
    vec4 _759 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _765 = (_759.x * 2.0) + (-1.0);
    float _766 = (_759.y * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _3744 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _782 = ((sqrt(1.0 - (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) - _491) * _587) + _491;
    float _785 = (((_727 - _519) * _585) + _519) + (cbMtdParam._m0[21u].x * _519);
    float _786 = (((_728 - _520) * _586) + _520) + (cbMtdParam._m0[21u].x * _520);
    float _797 = (((_765 - _785) + (_785 * cbMtdParam._m0[22u].z)) * _638) + _785;
    float _798 = (((_766 - _786) + (_786 * cbMtdParam._m0[22u].z)) * _638) + _786;
    float _799 = (_638 * (sqrt(1.0 - (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) - _782)) + _782;
    float _801 = cbMtdParam._m0[22u].x + _507.w;
    float _804 = fma(_799, _239, fma(_798, _246, _797 * _232));
    float _807 = fma(_799, _240, fma(_798, _247, _797 * _233));
    float _810 = fma(_799, _241, fma(_798, _248, _797 * _234));
    float _814 = inversesqrt(dot(vec3(_804, _807, _810), vec3(_804, _807, _810)));
    float _815 = _814 * _804;
    float _816 = _814 * _807;
    float _817 = _814 * _810;
    float _3755 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _818 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _3777 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _3788 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3799 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3810 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _823 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _837 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _887 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _877);
    float _888 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _877);
    float _889 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _877);
    float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
    float _894 = _887 * _893;
    float _895 = _888 * _893;
    float _896 = _889 * _893;
    float _902 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _903 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _921 = fma(_817, cbSceneParam._m0[5u].z, fma(_816, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _815));
    float _924 = fma(_817, cbSceneParam._m0[6u].z, fma(_816, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _815));
    float _927 = fma(_817, cbSceneParam._m0[7u].z, fma(_816, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _815));
    uint _941 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _947 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_941].x;
    float _948 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * cbInstanceData._m0[_941].y;
    float _949 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * cbInstanceData._m0[_941].z;
    float _3821 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _953 = 1.0 - _823;
    float _954 = _950 * _953;
    float _955 = _951 * _953;
    float _956 = _952 * _953;
    float _961 = (_950 + (-0.039999999105930328369140625)) * _823;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _823;
    float _963 = (_952 + (-0.039999999105930328369140625)) * _823;
    float _964 = _961 + 0.039999999105930328369140625;
    float _966 = _962 + 0.039999999105930328369140625;
    float _967 = _963 + 0.039999999105930328369140625;
    vec4 _976 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _902, cbSceneParam._m0[86u].y * _903));
    float _980 = ((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * TEXCOORD_5.w) * _976.x;
    float _981 = dot(vec3(_815, _816, _817), vec3(_894, _895, _896));
    float _984 = _981 * 2.0;
    float _988 = (_984 * _815) - _894;
    float _989 = (_984 * _816) - _895;
    float _990 = (_984 * _817) - _896;
    float _994 = abs(dot(vec3(_894, _895, _896), vec3(_815, _816, _817)));
    float _3854 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _996 = sqrt(_818);
    float _1009 = exp2((_996 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_996 * 3.0));
    float _1015 = (1.0 - _1009) * ((_996 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1016 = _1009 * _996;
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1353;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1078 = fma(_1052, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1044));
        float _1082 = fma(_1052, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1044));
        float _1086 = fma(_1052, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1044));
        float _1111 = _1044 + _815;
        float _1112 = _1048 + _816;
        float _1113 = _1052 + _817;
        float _1123 = fma(_1113, cbModelParam._m0[26u].z, fma(_1112, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1111)) - _1078;
        float _1124 = fma(_1113, cbModelParam._m0[27u].z, fma(_1112, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1111)) - _1082;
        float _1125 = fma(_1113, cbModelParam._m0[28u].z, fma(_1112, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1111)) - _1086;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1078 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1082 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[34u].z) + ((((((_1086 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1181 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1147.x + (-0.5));
        float _1183 = _1181 * (_1147.y + (-0.5));
        float _1184 = _1181 * (_1147.z + (-0.5));
        float _1191 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1154.x + (-0.5));
        float _1193 = _1191 * (_1154.y + (-0.5));
        float _1194 = _1191 * (_1154.z + (-0.5));
        float _1201 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1161.x + (-0.5));
        float _1203 = _1201 * (_1161.y + (-0.5));
        float _1204 = _1201 * (_1161.z + (-0.5));
        float _1211 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1168.x + (-0.5));
        float _1213 = _1211 * (_1168.y + (-0.5));
        float _1214 = _1211 * (_1168.z + (-0.5));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = _1182 * 0.5;
        float _1219 = _1192 * 0.5;
        float _1220 = _1202 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1235 = (dot(vec3(_815, _816, _817), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1245 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3902 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1247 + 1.0))) + _1252) * _1215;
        float _1262 = _1183 * 0.5;
        float _1263 = _1193 * 0.5;
        float _1264 = _1203 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_815, _816, _817), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3935 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1289 + 1.0))) + _1294) * _1216;
        float _1304 = _1184 * 0.5;
        float _1305 = _1194 * 0.5;
        float _1306 = _1204 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_815, _816, _817), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3968 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1331 + 1.0))) + _1336) * _1217;
        _1353 = _1184;
        _1355 = _1183;
        _1356 = _1182;
        _1357 = _1194;
        _1358 = _1193;
        _1359 = _1192;
        _1360 = _1204;
        _1361 = _1203;
        _1362 = _1202;
        _1363 = _1217;
        _1364 = _1216;
        _1365 = _1215;
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
    }
    else
    {
        _1353 = _1354;
        _1355 = _1354;
        _1356 = _1354;
        _1357 = _1354;
        _1358 = _1354;
        _1359 = _1354;
        _1360 = _1354;
        _1361 = _1354;
        _1362 = _1354;
        _1363 = _1354;
        _1364 = _1354;
        _1365 = _1354;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1393 = fma(_1052, cbModelParam._m0[30u].z, fma(_1048, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1044));
        float _1397 = fma(_1052, cbModelParam._m0[31u].z, fma(_1048, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1044));
        float _1401 = fma(_1052, cbModelParam._m0[32u].z, fma(_1048, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1044));
        float _1424 = _1044 + _815;
        float _1425 = _1048 + _816;
        float _1426 = _1052 + _817;
        float _1436 = fma(_1426, cbModelParam._m0[30u].z, fma(_1425, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1424)) - _1393;
        float _1437 = fma(_1426, cbModelParam._m0[31u].z, fma(_1425, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1424)) - _1397;
        float _1438 = fma(_1426, cbModelParam._m0[32u].z, fma(_1425, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1424)) - _1401;
        float _1442 = inversesqrt(dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438)));
        float _1455 = ((_1442 * _1436) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1393 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1442 * _1437) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1397 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1442 * _1438) / cbModelParam._m0[35u].z) + ((((((_1401 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        float _1492 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1459.x + (-0.5));
        float _1494 = _1492 * (_1459.y + (-0.5));
        float _1495 = _1492 * (_1459.z + (-0.5));
        float _1502 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1466.x + (-0.5));
        float _1504 = _1502 * (_1466.y + (-0.5));
        float _1505 = _1502 * (_1466.z + (-0.5));
        float _1512 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1473.x + (-0.5));
        float _1514 = _1512 * (_1473.y + (-0.5));
        float _1515 = _1512 * (_1473.z + (-0.5));
        float _1522 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1480.x + (-0.5));
        float _1524 = _1522 * (_1480.y + (-0.5));
        float _1525 = _1522 * (_1480.z + (-0.5));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = _1493 * 0.5;
        float _1530 = _1503 * 0.5;
        float _1531 = _1513 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_815, _816, _817), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4031 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1556 + 1.0))) + _1561) * _1526;
        float _1571 = _1494 * 0.5;
        float _1572 = _1504 * 0.5;
        float _1573 = _1514 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_815, _816, _817), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4064 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1598 + 1.0))) + _1603) * _1527;
        float _1613 = _1495 * 0.5;
        float _1614 = _1505 * 0.5;
        float _1615 = _1515 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_815, _816, _817), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4097 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1640 + 1.0))) + _1645) * _1528;
        _1662 = _1495;
        _1663 = _1494;
        _1664 = _1493;
        _1665 = _1505;
        _1666 = _1504;
        _1667 = _1503;
        _1668 = _1515;
        _1669 = _1514;
        _1670 = _1513;
        _1671 = _1528;
        _1672 = _1527;
        _1673 = _1526;
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
    }
    else
    {
        _1662 = _1354;
        _1663 = _1354;
        _1664 = _1354;
        _1665 = _1354;
        _1666 = _1354;
        _1667 = _1354;
        _1668 = _1354;
        _1669 = _1354;
        _1670 = _1354;
        _1671 = _1354;
        _1672 = _1354;
        _1673 = _1354;
        _1674 = 0.0;
        _1675 = 0.0;
        _1676 = 0.0;
    }
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1366)) + _1366;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1367)) + _1367;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1368)) + _1368;
    float _1709 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1686));
    float _1730 = _988 * 0.5;
    float _1731 = _989 * 0.5;
    float _1732 = _990 * 0.5;
    float _1733 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1736 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1739 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1773;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1746 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1353, _1357, _1360, _1363));
        float _1750 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1355, _1358, _1361, _1364));
        float _1754 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1356, _1359, _1362, _1365));
        float _1761 = dot(vec4(cbModelParam._m0[39u]), vec4(_1730, _1731, _1732, 1.0));
        _1773 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1773 = 1.0;
    }
    float _1784;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1775 = dot(vec4(cbModelParam._m0[40u]), vec4(_1730, _1731, _1732, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1788 = (_1784 * cbModelParam._m0[1u].x) + (_1773 * (1.0 - cbModelParam._m0[1u].x));
    float _1798 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _818);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1798 : min(cbModelParam._m0[25u].z, _1798));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1846 = fma(_1052, cbModelParam._m0[13u].z, fma(_1048, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044)) + cbModelParam._m0[13u].w;
        float _1850 = fma(_1052, cbModelParam._m0[14u].z, fma(_1048, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044)) + cbModelParam._m0[14u].w;
        float _1854 = fma(_1052, cbModelParam._m0[15u].z, fma(_1048, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044)) + cbModelParam._m0[15u].w;
        float _1857 = fma(_990, cbModelParam._m0[13u].z, fma(_989, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988));
        float _1860 = fma(_990, cbModelParam._m0[14u].z, fma(_989, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988));
        float _1863 = fma(_990, cbModelParam._m0[15u].z, fma(_989, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988));
        float _1891;
        if (_1857 > 0.0)
        {
            _1891 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1891 = frontier_phi_14_12_ladder;
        }
        float _2093;
        if (_1860 > 0.0)
        {
            _2093 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2093 = frontier_phi_23_19_ladder;
        }
        float _2347;
        if (_1863 > 0.0)
        {
            _2347 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2347 = frontier_phi_35_30_ladder;
        }
        float _2349 = isnan(_2093) ? _1891 : (isnan(_1891) ? _2093 : min(_1891, _2093));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1857) + _1846;
        float _2355 = (_2350 * _1860) + _1850;
        float _2356 = (_2350 * _1863) + _1854;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2359 = (-1.0) - _2357;
        float _2361 = _2357 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2356 > _2361) || ((_2356 < _2359) || ((_2355 > _2361) || ((_2355 < _2359) || ((_2354 < _2359) || (_2354 > _2361))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2356, cbModelParam._m0[9u].z, fma(_2355, cbModelParam._m0[9u].y, _2354 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2356, cbModelParam._m0[10u].z, fma(_2355, cbModelParam._m0[10u].y, _2354 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2356, cbModelParam._m0[11u].z, fma(_2355, cbModelParam._m0[11u].y, _2354 * cbModelParam._m0[11u].x))), _1799);
            frontier_phi_13_35_ladder = _2484.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2484.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2484.x * cbModelParam._m0[1u].y;
        }
        _1879 = frontier_phi_13_35_ladder_2;
        _1881 = frontier_phi_13_35_ladder_1;
        _1883 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_988, _989, _990), _1799);
        _1879 = _1867.x * cbModelParam._m0[1u].y;
        _1881 = _1867.y * cbModelParam._m0[1u].y;
        _1883 = _1867.z * cbModelParam._m0[1u].y;
    }
    float _1887 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _818);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1887 : min(cbModelParam._m0[25u].w, _1887));
    float _1977;
    float _1979;
    float _1981;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1941 = fma(_1052, cbModelParam._m0[21u].z, fma(_1048, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044)) + cbModelParam._m0[21u].w;
        float _1945 = fma(_1052, cbModelParam._m0[22u].z, fma(_1048, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044)) + cbModelParam._m0[22u].w;
        float _1949 = fma(_1052, cbModelParam._m0[23u].z, fma(_1048, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044)) + cbModelParam._m0[23u].w;
        float _1952 = fma(_990, cbModelParam._m0[21u].z, fma(_989, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988));
        float _1955 = fma(_990, cbModelParam._m0[22u].z, fma(_989, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988));
        float _1958 = fma(_990, cbModelParam._m0[23u].z, fma(_989, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988));
        float _2098;
        if (_1952 > 0.0)
        {
            _2098 = abs((1.0 - _1941) / _1952);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1941 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2098 = frontier_phi_25_21_ladder;
        }
        float _2374;
        if (_1955 > 0.0)
        {
            _2374 = abs((1.0 - _1945) / _1955);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1945 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2374 = frontier_phi_37_32_ladder;
        }
        float _2587;
        if (_1958 > 0.0)
        {
            _2587 = abs((1.0 - _1949) / _1958);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1949 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2587 = frontier_phi_46_43_ladder;
        }
        float _2589 = isnan(_2374) ? _2098 : (isnan(_2098) ? _2374 : min(_2098, _2374));
        float _2590 = isnan(_2587) ? _2589 : (isnan(_2589) ? _2587 : min(_2589, _2587));
        float _2594 = (_2590 * _1952) + _1941;
        float _2595 = (_2590 * _1955) + _1945;
        float _2596 = (_2590 * _1958) + _1949;
        float _2597 = _2590 * 9.9999997473787516355514526367188e-05;
        float _2598 = (-1.0) - _2597;
        float _2600 = _2597 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2596 > _2600) || ((_2596 < _2598) || ((_2595 > _2600) || ((_2595 < _2598) || ((_2594 < _2598) || (_2594 > _2600))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2795 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2596, cbModelParam._m0[17u].z, fma(_2595, cbModelParam._m0[17u].y, _2594 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2596, cbModelParam._m0[18u].z, fma(_2595, cbModelParam._m0[18u].y, _2594 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2596, cbModelParam._m0[19u].z, fma(_2595, cbModelParam._m0[19u].y, _2594 * cbModelParam._m0[19u].x))), _1888);
            frontier_phi_22_46_ladder = _2795.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2795.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2795.x * cbModelParam._m0[1u].z;
        }
        _1977 = frontier_phi_22_46_ladder_2;
        _1979 = frontier_phi_22_46_ladder_1;
        _1981 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1961 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_988, _989, _990), _1888);
        _1977 = _1961.x * cbModelParam._m0[1u].z;
        _1979 = _1961.y * cbModelParam._m0[1u].z;
        _1981 = _1961.z * cbModelParam._m0[1u].z;
    }
    float _1994 = (((_1015 * _964) + _1016) * _980) * ((cbModelParam._m0[1u].w * (_1977 - _1879)) + _1879);
    float _1996 = (((_1015 * _966) + _1016) * _980) * ((cbModelParam._m0[1u].w * (_1979 - _1881)) + _1881);
    float _1998 = (((_1015 * _967) + _1016) * _980) * ((cbModelParam._m0[1u].w * (_1981 - _1883)) + _1883);
    float _2001 = fma(_1998, cbSceneParam._m0[89u].z, fma(_1996, cbSceneParam._m0[89u].y, _1994 * cbSceneParam._m0[89u].x));
    float _2004 = fma(_1998, cbSceneParam._m0[90u].z, fma(_1996, cbSceneParam._m0[90u].y, _1994 * cbSceneParam._m0[90u].x));
    float _2007 = fma(_1998, cbSceneParam._m0[91u].z, fma(_1996, cbSceneParam._m0[91u].y, _1994 * cbSceneParam._m0[91u].x));
    uvec4 _2017 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2019 = _2017.x * 14u;
    uint _2020 = _2019 + 13u;
    float _2027 = _980 + (-1.0);
    float _2032 = (cbLight._m0[_2020].x * _2027) + 1.0;
    float _2033 = (cbLight._m0[_2020].y * _2027) + 1.0;
    float _2034 = (cbLight._m0[_2020].z * _2027) + 1.0;
    float _2035 = (cbLight._m0[_2020].w * _2027) + 1.0;
    uint _2036 = _2019 + 5u;
    float _2042 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    uint _2046 = _2019 + 4u;
    float _2052 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2056 = _2019 | 1u;
    float _2067 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_815, _816, _817));
    float _2070 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_815, _816, _817));
    float _4233 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _4244 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2075 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * 0.3183098733425140380859375;
    float _2077 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * 0.3183098733425140380859375;
    float _2084 = ((cbLight._m0[_2036].x * _2042) * _2077) + ((cbLight._m0[_2046].x * _2052) * _2075);
    float _2085 = ((_2042 * cbLight._m0[_2036].y) * _2077) + ((_2052 * cbLight._m0[_2046].y) * _2075);
    float _2086 = ((_2042 * cbLight._m0[_2036].z) * _2077) + ((_2052 * cbLight._m0[_2046].z) * _2075);
    uvec4 _2090 = floatBitsToUint(cbLight._m0[_2019 + 12u]);
    bool _2092 = _2090.x == 0u;
    float _2103;
    float _2105;
    float _2107;
    if (_2092)
    {
        _2103 = _2084;
        _2105 = _2085;
        _2107 = _2086;
    }
    else
    {
        uint _2111 = _2019 + 6u;
        float _2127 = (dot(vec3(cbLight._m0[_2019 + 2u].xyz), vec3(_815, _816, _817)) * 0.5) + 0.5;
        float _2128 = _2127 * _2127;
        float _4255 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2129 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2130 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2103 = (((cbLight._m0[_2111].x * 0.3183098733425140380859375) * _2129) * _2130) + _2084;
        _2105 = (((cbLight._m0[_2111].y * 0.3183098733425140380859375) * _2129) * _2130) + _2085;
        _2107 = (((cbLight._m0[_2111].z * 0.3183098733425140380859375) * _2129) * _2130) + _2086;
    }
    bool _2110 = _2090.y == 0u;
    float _2148;
    float _2150;
    float _2152;
    if (_2110)
    {
        _2148 = _2103;
        _2150 = _2105;
        _2152 = _2107;
    }
    else
    {
        uint _2318 = _2019 + 7u;
        float _2334 = (dot(vec3(cbLight._m0[_2019 + 3u].xyz), vec3(_815, _816, _817)) * 0.5) + 0.5;
        float _2335 = _2334 * _2334;
        float _4271 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2336 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2337 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2148 = (((cbLight._m0[_2318].x * 0.3183098733425140380859375) * _2336) * _2337) + _2103;
        _2150 = (((cbLight._m0[_2318].y * 0.3183098733425140380859375) * _2336) * _2337) + _2105;
        _2152 = (((cbLight._m0[_2318].z * 0.3183098733425140380859375) * _2336) * _2337) + _2107;
    }
    uint _2155 = _2019 + 8u;
    float _2168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _818) * 0.949999988079071044921875);
    float _2169 = _2168 * _2168;
    float _2170 = cbLight._m0[_2019].x + _894;
    float _2171 = cbLight._m0[_2019].y + _895;
    float _2172 = cbLight._m0[_2019].z + _896;
    float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
    float _2177 = _2176 * _2170;
    float _2178 = _2176 * _2171;
    float _2179 = _2176 * _2172;
    float _2180 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2019].xyz));
    float _4287 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _4298 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _2184 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2185 = dot(vec3(_815, _816, _817), vec3(_2177, _2178, _2179));
    float _4309 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2189 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2177, _2178, _2179));
    float _4320 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2193 = _2169 * _2169;
    float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
    float _2205 = exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0);
    float _2206 = 0.959999978542327880859375 - _961;
    float _2208 = 0.959999978542327880859375 - _962;
    float _2209 = 0.959999978542327880859375 - _963;
    float _2216 = 1.0 - _2169;
    float _2227 = (0.5 / (((_2184 * ((_2183 * _2216) + _2169)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2216) + _2169) * _2183))) * _2183;
    float _4331 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2229 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
    uint _2240 = _2019 + 9u;
    float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _818) * 0.949999988079071044921875);
    float _2252 = _2251 * _2251;
    float _2253 = cbLight._m0[_2056].x + _894;
    float _2254 = cbLight._m0[_2056].y + _895;
    float _2255 = cbLight._m0[_2056].z + _896;
    float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
    float _2260 = _2259 * _2253;
    float _2261 = _2259 * _2254;
    float _2262 = _2259 * _2255;
    float _2263 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2056].xyz));
    float _4342 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2267 = dot(vec3(_815, _816, _817), vec3(_2260, _2261, _2262));
    float _4353 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2260, _2261, _2262));
    float _4364 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2252 * _2252;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2286 = exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0);
    float _2293 = 1.0 - _2252;
    float _2303 = (0.5 / (((_2184 * ((_2266 * _2293) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2293) + _2252) * _2266))) * _2266;
    float _4375 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    float _2315 = (((((_2286 * _2206) + _964) * cbLight._m0[_2240].x) * _2305) * _2042) + (((((_2205 * _2206) + _964) * cbLight._m0[_2155].x) * _2229) * _2052);
    float _2316 = (((((_2286 * _2208) + _966) * cbLight._m0[_2240].y) * _2305) * _2042) + (((((_2205 * _2208) + _966) * cbLight._m0[_2155].y) * _2229) * _2052);
    float _2317 = (((((_2286 * _2209) + _967) * cbLight._m0[_2240].z) * _2305) * _2042) + (((((_2205 * _2209) + _967) * cbLight._m0[_2155].z) * _2229) * _2052);
    float _2379;
    float _2381;
    float _2383;
    if (_2092)
    {
        _2379 = _2315;
        _2381 = _2316;
        _2383 = _2317;
    }
    else
    {
        uint _2385 = _2019 + 2u;
        uint _2389 = _2019 + 10u;
        float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2385].w)) * _818) * 0.949999988079071044921875);
        float _2404 = _2403 * _2403;
        float _2405 = cbLight._m0[_2385].x + _894;
        float _2406 = cbLight._m0[_2385].y + _895;
        float _2407 = cbLight._m0[_2385].z + _896;
        float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
        float _2412 = _2411 * _2405;
        float _2413 = _2411 * _2406;
        float _2414 = _2411 * _2407;
        float _2415 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2385].xyz));
        float _4386 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2419 = dot(vec3(_815, _816, _817), vec3(_2412, _2413, _2414));
        float _4397 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2423 = dot(vec3(cbLight._m0[_2385].xyz), vec3(_2412, _2413, _2414));
        float _4408 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2427 = _2404 * _2404;
        float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
        float _2438 = exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0);
        float _2445 = 1.0 - _2404;
        float _2455 = (0.5 / (((_2184 * ((_2418 * _2445) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2445) + _2404) * _2418))) * _2418;
        float _4419 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2457 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
        float _2458 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2379 = (((((_2438 * _2206) + _964) * cbLight._m0[_2389].x) * _2457) * _2458) + _2315;
        _2381 = (((((_2438 * _2208) + _966) * cbLight._m0[_2389].y) * _2457) * _2458) + _2316;
        _2383 = (((((_2438 * _2209) + _967) * cbLight._m0[_2389].z) * _2457) * _2458) + _2317;
    }
    float _2493;
    float _2495;
    float _2497;
    if (_2110)
    {
        _2493 = _2379;
        _2495 = _2381;
        _2497 = _2383;
    }
    else
    {
        uint _2504 = _2019 + 3u;
        uint _2508 = _2019 + 11u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _818) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _894;
        float _2525 = cbLight._m0[_2504].y + _895;
        float _2526 = cbLight._m0[_2504].z + _896;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2504].xyz));
        float _4435 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2538 = dot(vec3(_815, _816, _817), vec3(_2531, _2532, _2533));
        float _4446 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4457 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2557 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
        float _2564 = 1.0 - _2523;
        float _2574 = (0.5 / (((_2184 * ((_2537 * _2564) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2564) + _2523) * _2537))) * _2537;
        float _4468 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2576 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2577 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2493 = (((((_2557 * _2206) + _964) * cbLight._m0[_2508].x) * _2576) * _2577) + _2379;
        _2495 = (((((_2557 * _2208) + _966) * cbLight._m0[_2508].y) * _2576) * _2577) + _2381;
        _2497 = (((((_2557 * _2209) + _967) * cbLight._m0[_2508].z) * _2576) * _2577) + _2383;
    }
    float _2712;
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    if (_2017.y == 0u)
    {
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2652;
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2652;
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2652;
        uvec4 _2667 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2668 = _2667.x;
        uint _2679 = uint((float(_2667.y) * floor(float(uint(cbSceneParam._m0[85u].y * _903) / _2668))) + floor(float(uint(cbSceneParam._m0[85u].x * _902) / _2668)));
        float _2689 = (log2(_2655 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2690 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        uint _2693 = uint(isnan(14.0) ? _2690 : (isnan(_2690) ? 14.0 : min(_2690, 14.0)));
        uvec4 _2698 = texelFetch(g_lightClusterGridBuffer, int(((_2693 << 2u) + (_2679 << 6u)) >> 2u));
        uint _2699 = _2698.x;
        uint _2700 = _2667.z;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        if (((((1u << ((_2700 >> 4u) & 15u)) + 4294967295u) & _2699) == 0u) || ((_2700 & 240u) == 0u))
        {
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
        }
        else
        {
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            uint _2950 = 0u;
            uint _2959;
            bool _2960;
            for (;;)
            {
                _2959 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_2950 << 2u)) >> 2u)).x;
                _2960 = _2959 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2960)
                {
                    frontier_phi_61_pred = _2944;
                    frontier_phi_61_pred_1 = _2949;
                    frontier_phi_61_pred_2 = _2948;
                    frontier_phi_61_pred_3 = _2947;
                    frontier_phi_61_pred_4 = _2946;
                    frontier_phi_61_pred_5 = _2945;
                }
                else
                {
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    uint _3074;
                    _3068 = _2944;
                    _3069 = _2945;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2948;
                    _3073 = _2949;
                    _3074 = _2959;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    for (;;)
                    {
                        uint _3078 = uint(findLSB(_3074)) + (_2950 << 5u);
                        uint _3075 = (_3074 + 4294967295u) & _3074;
                        uint _3080 = _3078 * 48u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 3u)).x));
                        uint _3100 = (_3078 * 48u) + 4u;
                        vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 3u)).x));
                        uint _3119 = (_3078 * 48u) + 8u;
                        vec3 _3130 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x));
                        float _3134 = _3094.x - _2653;
                        float _3135 = _3094.y - _2654;
                        float _3136 = _3094.z - _2655;
                        float _3137 = dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136));
                        float _3140 = inversesqrt(_3137);
                        float _3141 = _3140 * _3134;
                        float _3142 = _3140 * _3135;
                        float _3143 = _3140 * _3136;
                        float _3144 = dot(vec3(_921, _924, _927), vec3(_3141, _3142, _3143));
                        float _3149 = 1.0 - (_3137 * _3094.w);
                        float _4494 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3150 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3151 = sqrt(_3137) * _3113.w;
                        float _3154 = 1.39999997615814208984375 / (_3151 + 1.39999997615814208984375);
                        float _3155 = _3154 * _3154;
                        float _3158 = ((1.0 - _3155) * _3144) + _3155;
                        float _3161 = _3151 * _3151;
                        float _3165 = ((isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))) * _3150) / ((_3161 * 0.699999988079071044921875) + 1.0);
                        float _3169 = (-0.0) - _2653;
                        float _3170 = (-0.0) - _2654;
                        float _3171 = (-0.0) - _2655;
                        float _3175 = inversesqrt(dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171)));
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3186 = exp2(log2(1.0 / ((_3161 * 3.5) + 5.0)) * 0.25);
                        float _3187 = 1.0 - _996;
                        float _3194 = sqrt(1.0 - ((1.0 - (_3187 * _3187)) * (1.0 - (_3186 * _3186))));
                        float _3195 = _3194 * _3194;
                        float _3196 = _3195 * _3195;
                        float _3197 = _3176 + _3141;
                        float _3198 = _3177 + _3142;
                        float _3199 = _3178 + _3143;
                        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                        float _3207 = dot(vec3(_921, _924, _927), vec3(_3176, _3177, _3178));
                        float _4510 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3210 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3211 = dot(vec3(_921, _924, _927), vec3(_3203 * _3197, _3203 * _3198, _3203 * _3199));
                        float _4521 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3214 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3218 = ((_3214 * _3214) * (_3196 + (-1.0))) + 1.0;
                        float _3219 = _3154 * _3195;
                        float _3220 = _3219 * _3219;
                        float _3223 = ((1.0 - _3220) * _3144) + _3220;
                        float _4532 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3224 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3225 = 1.0 - _3195;
                        float _3235 = (0.5 / (((_3224 * ((_3210 * _3225) + _3195)) + 9.9999999392252902907785028219223e-09) + (((_3224 * _3225) + _3195) * _3210))) * _3224;
                        float _4543 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3246 = (((_3196 * 3.1415927410125732421875) * (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) / ((_3218 * _3218) * ((_3161 * 2.1991131305694580078125) + 3.141590118408203125))) * _3150;
                        _3003 = (_3165 * _3113.x) + _3071;
                        _3004 = (_3165 * _3113.y) + _3072;
                        _3005 = (_3165 * _3113.z) + _3073;
                        _3000 = (_3246 * _3130.x) + _3068;
                        _3001 = (_3246 * _3130.y) + _3069;
                        _3002 = (_3246 * _3130.z) + _3070;
                        if (_3075 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3068 = _3000;
                            _3069 = _3001;
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3004;
                            _3073 = _3005;
                            _3074 = _3075;
                        }
                    }
                    frontier_phi_61_pred = _3000;
                    frontier_phi_61_pred_1 = _3005;
                    frontier_phi_61_pred_2 = _3004;
                    frontier_phi_61_pred_3 = _3003;
                    frontier_phi_61_pred_4 = _3002;
                    frontier_phi_61_pred_5 = _3001;
                }
                _2801 = frontier_phi_61_pred;
                _2811 = frontier_phi_61_pred_1;
                _2809 = frontier_phi_61_pred_2;
                _2807 = frontier_phi_61_pred_3;
                _2805 = frontier_phi_61_pred_4;
                _2803 = frontier_phi_61_pred_5;
                uint _2951 = _2950 + 1u;
                if (_2951 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2944 = _2801;
                    _2945 = _2803;
                    _2946 = _2805;
                    _2947 = _2807;
                    _2948 = _2809;
                    _2949 = _2811;
                    _2950 = _2951;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
        }
        uvec4 _2814 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2815 = _2814.z;
        uint _2817 = (_2815 >> 8u) & 15u;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((4294967295u << _2817) & _2699) == 0u)
        {
            _2912 = _2800;
            _2914 = _2802;
            _2916 = _2804;
            _2918 = _2806;
            _2920 = _2808;
            _2922 = _2810;
        }
        else
        {
            float _2937 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
            float _2938 = _2937 * _2653;
            float _2939 = _2937 * _2654;
            float _2940 = _2937 * _2655;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2817 < ((_2815 >> 12u) & 15u))
            {
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _3051 = _2800;
                float _3052 = _2802;
                float _3053 = _2804;
                float _3054 = _2806;
                float _3055 = _2808;
                float _3056 = _2810;
                uint _3057 = _2817;
                uint _3066;
                bool _3067;
                for (;;)
                {
                    _3066 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_3057 << 2u)) >> 2u)).x;
                    _3067 = _3066 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3067)
                    {
                        frontier_phi_67_pred = _3054;
                        frontier_phi_67_pred_1 = _3055;
                        frontier_phi_67_pred_2 = _3056;
                        frontier_phi_67_pred_3 = _3053;
                        frontier_phi_67_pred_4 = _3052;
                        frontier_phi_67_pred_5 = _3051;
                    }
                    else
                    {
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3264 = _3051;
                        float _3265 = _3052;
                        float _3266 = _3053;
                        float _3267 = _3054;
                        float _3268 = _3055;
                        float _3269 = _3056;
                        uint _3270 = _3066;
                        uint _3271;
                        vec4 _3296;
                        float _3297;
                        vec4 _3312;
                        vec3 _3324;
                        vec4 _3339;
                        vec4 _3355;
                        float _3401;
                        bool _3402;
                        for (;;)
                        {
                            uint _3281 = ((_3057 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3270));
                            _3271 = (_3270 + 4294967295u) & _3270;
                            uint _3283 = _3281 * 40u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            _3297 = _3296.w;
                            uint _3299 = (_3281 * 40u) + 4u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3281 * 40u) + 8u;
                            _3324 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x));
                            uint _3326 = (_3281 * 40u) + 16u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3342 = (_3281 * 40u) + 20u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3357 = (_3281 * 40u) + 24u;
                            vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3376 = (_3281 * 40u) + 28u;
                            vec4 _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            _3401 = fma(_2655, _3389.z, fma(_2654, _3389.y, _3389.x * _2653)) + _3389.w;
                            _3402 = !((fma(_2655, _3370.z, fma(_2654, _3370.y, _3370.x * _2653)) + _3370.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3402)
                            {
                                float _3429 = _3296.x - _2653;
                                float _3430 = _3296.y - _2654;
                                float _3431 = _3296.z - _2655;
                                float _3432 = dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431));
                                float _3435 = inversesqrt(_3432);
                                float _3436 = _3435 * _3429;
                                float _3437 = _3435 * _3430;
                                float _3438 = _3435 * _3431;
                                float _3442 = 1.0 - (_3432 / (_3297 * _3297));
                                float _4554 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3447 = sqrt(_3432) * _3312.w;
                                float _3449 = 1.39999997615814208984375 / (_3447 + 1.39999997615814208984375);
                                float _3450 = _3449 * _3449;
                                float _3453 = ((1.0 - _3450) * dot(vec3(_3436, _3437, _3438), vec3(_921, _924, _927))) + _3450;
                                float _3456 = _3447 * _3447;
                                float _3460 = (fma(_2655, _3339.z, fma(_2654, _3339.y, _3339.x * _2653)) + _3339.w) / _3401;
                                float _3461 = (fma(_2655, _3355.z, fma(_2654, _3355.y, _3355.x * _2653)) + _3355.w) / _3401;
                                float _3465 = 1.0 - dot(vec2(_3460, _3461), vec2(_3460, _3461));
                                float _4570 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3467 = _3466 * (((isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0))) * _3443) / ((_3456 * 0.699999988079071044921875) + 1.0));
                                float _3479 = exp2(log2(1.0 / ((_3456 * 3.5) + 5.0)) * 0.25);
                                float _3480 = 1.0 - _996;
                                float _3487 = sqrt(1.0 - ((1.0 - (_3480 * _3480)) * (1.0 - (_3479 * _3479))));
                                float _3488 = _3487 * _3487;
                                float _3489 = _3488 * _3488;
                                float _3490 = _3436 - _2938;
                                float _3491 = _3437 - _2939;
                                float _3492 = _3438 - _2940;
                                float _3496 = inversesqrt(dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492)));
                                float _3500 = dot(vec3(_921, _924, _927), vec3((-0.0) - _2938, (-0.0) - _2939, (-0.0) - _2940));
                                float _4581 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3503 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3504 = dot(vec3(_921, _924, _927), vec3(_3496 * _3490, _3496 * _3491, _3496 * _3492));
                                float _4592 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3507 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3511 = ((_3507 * _3507) * (_3489 + (-1.0))) + 1.0;
                                float _3512 = _3449 * _3488;
                                float _3513 = _3512 * _3512;
                                float _3519 = ((1.0 - _3513) * dot(vec3(_921, _924, _927), vec3(_3436, _3437, _3438))) + _3513;
                                float _4603 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3520 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3521 = 1.0 - _3488;
                                float _3531 = (0.5 / (((_3520 * ((_3503 * _3521) + _3488)) + 9.9999999392252902907785028219223e-09) + (((_3520 * _3521) + _3488) * _3503))) * _3520;
                                float _4614 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3541 = (_3466 * _3443) * (((_3489 * 3.1415927410125732421875) * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) / ((_3511 * _3511) * ((_3456 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3541 * _3324.x;
                                frontier_phi_73_pred_1 = _3541 * _3324.y;
                                frontier_phi_73_pred_2 = _3467 * _3312.z;
                                frontier_phi_73_pred_3 = _3467 * _3312.y;
                                frontier_phi_73_pred_4 = _3467 * _3312.x;
                                frontier_phi_73_pred_5 = _3541 * _3324.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3545 = frontier_phi_73_pred;
                            _3546 = frontier_phi_73_pred_1;
                            _3550 = frontier_phi_73_pred_2;
                            _3549 = frontier_phi_73_pred_3;
                            _3548 = frontier_phi_73_pred_4;
                            _3547 = frontier_phi_73_pred_5;
                            _3254 = _3548 + _3267;
                            _3255 = _3549 + _3268;
                            _3256 = _3550 + _3269;
                            _3251 = _3545 + _3264;
                            _3252 = _3546 + _3265;
                            _3253 = _3547 + _3266;
                            if (_3271 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3271;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3254;
                        frontier_phi_67_pred_1 = _3255;
                        frontier_phi_67_pred_2 = _3256;
                        frontier_phi_67_pred_3 = _3253;
                        frontier_phi_67_pred_4 = _3252;
                        frontier_phi_67_pred_5 = _3251;
                    }
                    _2919 = frontier_phi_67_pred;
                    _2921 = frontier_phi_67_pred_1;
                    _2923 = frontier_phi_67_pred_2;
                    _2917 = frontier_phi_67_pred_3;
                    _2915 = frontier_phi_67_pred_4;
                    _2913 = frontier_phi_67_pred_5;
                    uint _3058 = _3057 + 1u;
                    if (_3058 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3051 = _2913;
                        _3052 = _2915;
                        _3053 = _2917;
                        _3054 = _2919;
                        _3055 = _2921;
                        _3056 = _2923;
                        _3057 = _3058;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2921;
                frontier_phi_55_56_ladder_1 = _2923;
                frontier_phi_55_56_ladder_2 = _2919;
                frontier_phi_55_56_ladder_3 = _2917;
                frontier_phi_55_56_ladder_4 = _2915;
                frontier_phi_55_56_ladder_5 = _2913;
            }
            else
            {
                frontier_phi_55_56_ladder = _2808;
                frontier_phi_55_56_ladder_1 = _2810;
                frontier_phi_55_56_ladder_2 = _2806;
                frontier_phi_55_56_ladder_3 = _2804;
                frontier_phi_55_56_ladder_4 = _2802;
                frontier_phi_55_56_ladder_5 = _2800;
            }
            _2912 = frontier_phi_55_56_ladder_5;
            _2914 = frontier_phi_55_56_ladder_4;
            _2916 = frontier_phi_55_56_ladder_3;
            _2918 = frontier_phi_55_56_ladder_2;
            _2920 = frontier_phi_55_56_ladder;
            _2922 = frontier_phi_55_56_ladder_1;
        }
        float _2927 = isnan(1.0) ? _980 : (isnan(_980) ? 1.0 : min(_980, 1.0));
        _2712 = (_2927 * _2918) + _2148;
        _2714 = (_2927 * _2920) + _2150;
        _2716 = (_2927 * _2922) + _2152;
        _2718 = ((_2912 * _964) * _2927) + _2493;
        _2720 = ((_2914 * _966) * _2927) + _2495;
        _2722 = ((_2916 * _967) * _2927) + _2497;
    }
    else
    {
        _2712 = _2148;
        _2714 = _2150;
        _2716 = _2152;
        _2718 = _2493;
        _2720 = _2495;
        _2722 = _2497;
    }
    float _4630 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4641 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4652 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    uint _2742 = _251 + 6u;
    float _2750 = _902 / cbSceneParam._m0[86u].x;
    float _2751 = _903 / cbSceneParam._m0[86u].y;
    vec4 _2765 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2750, _2751, (log2((isnan(cbSceneParam._m0[77u].w) ? _837 : (isnan(_837) ? cbSceneParam._m0[77u].w : min(_837, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2767 = _2765.x;
    float _2768 = _2765.y;
    float _2769 = _2765.z;
    float _2770 = _2765.w;
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    if (_837 > cbSceneParam._m0[78u].w)
    {
        float _2825 = isnan(_837) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _837 : min(cbSceneParam._m0[80u].w, _837));
        float _2826 = _2825 / _837;
        float _2837 = _2826 * _887;
        float _2838 = _888 * _2826;
        float _2839 = (-0.0) - _2838;
        float _2840 = _2826 * _889;
        float _2842 = (cbSceneParam._m0[77u].w * _2839) / _2825;
        float _2843 = _2842 + cbSceneParam._m0[79u].w;
        float _2844 = cbSceneParam._m0[79u].w - _2838;
        float _2850 = sqrt(((_2837 * _2837) + (_2838 * _2838)) + (_2840 * _2840));
        float _2853 = (1.0 - (cbSceneParam._m0[77u].w / _2825)) * _2850;
        float _2858 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2860 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3013;
        if (abs((_2839 - _2842) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3013 = ((((_2843 > 0.0) ? exp2(_2858 * _2843) : (2.0 - exp2(_2860 * _2843))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2853;
        }
        else
        {
            float _2973 = 1.0 / cbSceneParam._m0[80u].x;
            float _2974 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : max(_2843, _2844));
            float _2975 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : min(_2843, _2844));
            float _2984 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : min(_2974, 0.0));
            float _2985 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : min(_2975, 0.0));
            _3013 = ((abs(_2850 / _2839) * cbSceneParam._m0[80u].y) * ((((_2984 - _2985) * 2.0) - ((exp2(_2858 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0)))) - exp2(_2858 * (isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))))) * _2973)) - ((exp2(_2860 * _2984) - exp2(_2860 * _2985)) * _2973))) + (_2853 * cbSceneParam._m0[80u].z);
        }
        vec4 _3015 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2750, _2751, 1.0), 0.0);
        float _3024 = exp2((_3013 * (-1.44269502162933349609375)) * (1.0 - _3015.w));
        float _3025 = log2(_3024);
        float _3041 = log2(_2770);
        _2862 = (exp2(_3041 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].x)) * _3015.x) / cbSceneParam._m0[78u].x)) + _2767;
        _2864 = (exp2(_3041 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].y)) * _3015.y) / cbSceneParam._m0[78u].y)) + _2768;
        _2866 = (exp2(_3041 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].z)) * _3015.z) / cbSceneParam._m0[78u].z)) + _2769;
        _2868 = _3024 * _2770;
    }
    else
    {
        _2862 = _2767;
        _2864 = _2768;
        _2866 = _2769;
        _2868 = _2770;
    }
    float _2880 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2881 = _2880 == 3.0;
    float _2882 = log2(_2868);
    float _2889 = exp2(_2882 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2712 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _980))) + ((_2718 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1788)) * cbPerFrame._m0[3u].x));
    float _2890 = exp2(_2882 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2714 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _980))) + ((_2720 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1788)) * cbPerFrame._m0[3u].x));
    float _2891 = exp2(_2882 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2716 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _980))) + ((_2722 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1788)) * cbPerFrame._m0[3u].x));
    float _2900 = (_2880 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2900 * (_2881 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2862)));
    SV_Target.y = _2900 * (_2881 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2864)));
    SV_Target.z = _2900 * (_2881 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2866)));
    SV_Target.w = cbInstanceData._m0[_2742].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2742].w;
}


